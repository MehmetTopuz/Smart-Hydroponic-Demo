
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000235d0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006680  080237b0  080237b0  000337b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029e30  08029e30  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08029e30  08029e30  00039e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029e38  08029e38  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08029e38  08029e38  00039e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08029e48  08029e48  00039e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08029e58  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cbc  2000033c  0802a194  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff8  0802a194  00040ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ac2d  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c156  00000000  00000000  000aaf99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004500  00000000  00000000  000b70f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000042e0  00000000  00000000  000bb5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d897  00000000  00000000  000bf8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d529  00000000  00000000  000ed167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114403  00000000  00000000  0011a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022ea93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014dac  00000000  00000000  0022eae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802378c 	.word	0x0802378c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	0802378c 	.word	0x0802378c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 f85f 	bl	8008d68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000848 	.word	0x20000848
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000848 	.word	0x20000848

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007b8 	.word	0x200007b8

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f01e ffd6 	bl	801fd8c <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f01e ff2e 	bl	801fd8c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20000ff8 	.word	0x20000ff8

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f01f fb05 	bl	80205c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f007 fce7 	bl	8008990 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	08029e58 	.word	0x08029e58
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20000ff8 	.word	0x20000ff8

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000fe4 	.word	0x20000fe4
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000fe4 	.word	0x20000fe4

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08026ca8 	.word	0x08026ca8
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08026cb8 	.word	0x08026cb8

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08026cb8 	.word	0x08026cb8

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	08026cc0 	.word	0x08026cc0
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08026cd8 	.word	0x08026cd8
 8003c70:	08026ce0 	.word	0x08026ce0

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fa9c 	bl	80041e4 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <Send_AT_Command+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000360 	.word	0x20000360

08003cf4 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x20>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 faad 	bl	8004266 <ringBuffer_push>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	2000037c 	.word	0x2000037c
 8003d14:	20000360 	.word	0x20000360

08003d18 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <Read_Response+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb27 	bl	800437a <ringBuffer_lookFor>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000037c 	.word	0x2000037c

08003d3c <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Wait_Response+0x74>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <Wait_Response+0x78>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <Wait_Response+0x7c>)
 8003d58:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Wait_Response+0x74>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Wait_Response+0x80>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb07 	bl	800437a <ringBuffer_lookFor>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Wait_Response+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Wait_Response+0x7c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e012      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <Wait_Response+0x78>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <Wait_Response+0x7c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d807      	bhi.n	8003da6 <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Wait_Response+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <Wait_Response+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003da6:	2304      	movs	r3, #4
	}

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	2000036c 	.word	0x2000036c
 8003db4:	20000360 	.word	0x20000360
 8003db8:	20000370 	.word	0x20000370
 8003dbc:	2000037c 	.word	0x2000037c

08003dc0 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	; 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <Connect_Wifi+0x64>)
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <Connect_Wifi+0x68>)
 8003dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003de8:	f107 0008 	add.w	r0, r7, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <Connect_Wifi+0x6c>)
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <Connect_Wifi+0x70>)
 8003df6:	f01c ff5b 	bl	8020cb0 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f82e 	bl	8003e6c <Command_Process>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3758      	adds	r7, #88	; 0x58
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	0802380c 	.word	0x0802380c
 8003e28:	08023818 	.word	0x08023818
 8003e2c:	080237f0 	.word	0x080237f0
 8003e30:	080237fc 	.word	0x080237fc

08003e34 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <Disconnect_Wifi+0x30>)
 8003e3c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x34>)
 8003e40:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e42:	2304      	movs	r3, #4
 8003e44:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e46:	1d39      	adds	r1, r7, #4
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f80c 	bl	8003e6c <Command_Process>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080237c0 	.word	0x080237c0
 8003e68:	080237d0 	.word	0x080237d0

08003e6c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <Command_Process+0x1e>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <Command_Process+0x104>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d806      	bhi.n	8003e98 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <Command_Process+0x108>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa3d 	bl	800430e <ringBuffer_flush>
		return STATUS_ERROR;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e067      	b.n	8003f68 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Command_Process+0x10c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <Command_Process+0x104>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Command_Process+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <Command_Process+0x104>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff37 	bl	8003d3c <Wait_Response>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003ed2:	482a      	ldr	r0, [pc, #168]	; (8003f7c <Command_Process+0x110>)
 8003ed4:	f7ff ff20 	bl	8003d18 <Read_Response>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Command_Process+0x10c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <Command_Process+0x104>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <Command_Process+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa0d 	bl	800430e <ringBuffer_flush>
				return STATUS_ERROR;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e037      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <Command_Process+0x96>
			{
				return response;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e032      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Command_Process+0x104>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <Command_Process+0x10c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <Command_Process+0x104>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <Command_Process+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f9f1 	bl	800430e <ringBuffer_flush>
					return STATUS_OK;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e01b      	b.n	8003f68 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Command_Process+0x10c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <Command_Process+0x104>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <Command_Process+0x104>)
 8003f40:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <Command_Process+0x108>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f9e1 	bl	800430e <ringBuffer_flush>
					return IDLE;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e00b      	b.n	8003f68 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Command_Process+0x10c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <Command_Process+0x104>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <Command_Process+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f9d4 	bl	800430e <ringBuffer_flush>
				return response;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000374 	.word	0x20000374
 8003f74:	2000037c 	.word	0x2000037c
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	08023824 	.word	0x08023824

08003f80 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a2      	sub	sp, #136	; 0x88
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <Connect_TCP_Server+0x68>)
 8003f92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Connect_TCP_Server+0x6c>)
 8003fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <Connect_TCP_Server+0x70>)
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <Connect_TCP_Server+0x74>)
 8003fba:	f01c fe79 	bl	8020cb0 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003fc4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4c 	bl	8003e6c <Command_Process>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003fda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3780      	adds	r7, #128	; 0x80
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	0802384c 	.word	0x0802384c
 8003fec:	08023854 	.word	0x08023854
 8003ff0:	0802382c 	.word	0x0802382c
 8003ff4:	08023840 	.word	0x08023840

08003ff8 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003ffe:	2304      	movs	r3, #4
 8004000:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <Disconnect_TCP_Server+0x30>)
 8004004:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <Disconnect_TCP_Server+0x34>)
 8004008:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800400a:	1d39      	adds	r1, r7, #4
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	2201      	movs	r2, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff2a 	bl	8003e6c <Command_Process>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 800401c:	7bfb      	ldrb	r3, [r7, #15]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	0802385c 	.word	0x0802385c
 800402c:	080237d0 	.word	0x080237d0

08004030 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b096      	sub	sp, #88	; 0x58
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8fa 	bl	800023c <strlen>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Send_TCP_Message+0x64>)
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <Send_TCP_Message+0x68>)
 8004054:	f01c fe2c 	bl	8020cb0 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <Send_TCP_Message+0x6c>)
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2202      	movs	r2, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef6 	bl	8003e6c <Command_Process>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	0802386c 	.word	0x0802386c
 8004098:	08023878 	.word	0x08023878
 800409c:	08023880 	.word	0x08023880

080040a0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <Read_TCP_Message+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	492d      	ldr	r1, [pc, #180]	; (8004164 <Read_TCP_Message+0xc4>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f01d fbbf 	bl	8021834 <strstr>
 80040b6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d042      	beq.n	800414c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e017      	b.n	80040fc <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80040cc:	7efb      	ldrb	r3, [r7, #27]
 80040ce:	3305      	adds	r3, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b3a      	cmp	r3, #58	; 0x3a
 80040d8:	d014      	beq.n	8004104 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	3305      	adds	r3, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	441a      	add	r2, r3
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	f107 0120 	add.w	r1, r7, #32
 80040ea:	440b      	add	r3, r1
 80040ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	3301      	adds	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9e4      	bls.n	80040cc <Read_TCP_Message+0x2c>
 8004102:	e000      	b.n	8004106 <Read_TCP_Message+0x66>
				break;
 8004104:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f01b fe31 	bl	801fd72 <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00d      	b.n	8004136 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	3306      	adds	r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	441a      	add	r2, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	440b      	add	r3, r1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <Read_TCP_Message+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f8e3 	bl	800430e <ringBuffer_flush>
		return STATUS_OK;
 8004148:	2302      	movs	r3, #2
 800414a:	e005      	b.n	8004158 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <Read_TCP_Message+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f8dc 	bl	800430e <ringBuffer_flush>
		return STATUS_ERROR;
 8004156:	2303      	movs	r3, #3
	}



}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000037c 	.word	0x2000037c
 8004164:	08023888 	.word	0x08023888

08004168 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <Wait_TCP_Message+0x74>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	4603      	mov	r3, r0
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <Wait_TCP_Message+0x78>)
 8004184:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff87 	bl	80040a0 <Read_TCP_Message>
 8004192:	4603      	mov	r3, r0
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <Wait_TCP_Message+0x78>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80041a4:	2302      	movs	r3, #2
 80041a6:	e012      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Wait_TCP_Message+0x74>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4798      	blx	r3
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d807      	bhi.n	80041cc <Wait_TCP_Message+0x64>
	{
		time = 0;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80041cc:	2304      	movs	r3, #4

}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000011 	.word	0x20000011
 80041dc:	20000360 	.word	0x20000360
 80041e0:	20000378 	.word	0x20000378

080041e4 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 80041ec:	2010      	movs	r0, #16
 80041ee:	f01c fb8d 	bl	802090c <malloc>
 80041f2:	4603      	mov	r3, r0
 80041f4:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e017      	b.n	8004230 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8004212:	2101      	movs	r1, #1
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f01b fdb1 	bl	801fd7c <calloc>
 800421a:	4603      	mov	r3, r0
 800421c:	461a      	mov	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 800422a:	2300      	movs	r3, #0
 800422c:	e000      	b.n	8004230 <ringBuffer_init+0x4c>
		}

	return rBuf;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4618      	mov	r0, r3
 8004254:	f01c fb62 	bl	802091c <free>
		}
		free(buffer);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f01c fb5f 	bl	802091c <free>
	}
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	d00c      	beq.n	800429a <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4413      	add	r3, r2
 800428a:	78fa      	ldrb	r2, [r7, #3]
 800428c:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8004298:	e009      	b.n	80042ae <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4413      	add	r3, r2
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d00d      	beq.n	80042ec <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]
		return data;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	e00a      	b.n	8004302 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	605a      	str	r2, [r3, #4]
		return data;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68d8      	ldr	r0, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	461a      	mov	r2, r3
 8004320:	2100      	movs	r1, #0
 8004322:	f01c fb11 	bl	8020948 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e00a      	b.n	8004362 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4413      	add	r3, r2
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff85 	bl	8004266 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	6838      	ldr	r0, [r7, #0]
 8004364:	f7fb ff6a 	bl	800023c <strlen>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d8ed      	bhi.n	800434c <ringBuffer_pushArray+0x10>
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f01d fa52 	bl	8021834 <strstr>
 8004390:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <ringBuffer_lookFor+0x22>
		return 1;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <ringBuffer_lookFor+0x24>
	else
		return 0;
 800439c:	2300      	movs	r3, #0

}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80043c6:	2032      	movs	r0, #50	; 0x32
 80043c8:	f7ff ff0c 	bl	80041e4 <ringBuffer_init>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	605a      	str	r2, [r3, #4]

	}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff26 	bl	8004238 <ringBuffer_deInit>
	}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4618      	mov	r0, r3
 8004400:	f010 f9ca 	bl	8014798 <_ZN5UtestC1Ev>
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	0802842c 	.word	0x0802842c

08004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	4a05      	ldr	r2, [pc, #20]	; (8004438 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	f010 f9c5 	bl	80147b8 <_ZN5UtestD1Ev>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	0802842c 	.word	0x0802842c

0800443c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ffe7 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800444a:	2108      	movs	r1, #8
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f006 f9e7 	bl	800a820 <_ZdlPvj>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ffbe 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004478:	4a03      	ldr	r2, [pc, #12]	; (8004488 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	0802840c 	.word	0x0802840c

0800448c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	2229      	movs	r2, #41	; 0x29
 8004496:	4906      	ldr	r1, [pc, #24]	; (80044b0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004498:	2008      	movs	r0, #8
 800449a:	f006 f9ad 	bl	800a7f8 <_ZnwjPKci>
 800449e:	4604      	mov	r4, r0
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff ffdb 	bl	800445c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044a6:	4623      	mov	r3, r4
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}
 80044b0:	08023904 	.word	0x08023904

080044b4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4618      	mov	r0, r3
 80044c0:	f00e fd88 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80044c4:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	08028360 	.word	0x08028360

080044d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b087      	sub	sp, #28
 80044dc:	af04      	add	r7, sp, #16
 80044de:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 80044e0:	f010 f930 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80044e4:	4604      	mov	r4, r0
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	3338      	adds	r3, #56	; 0x38
 80044ea:	681d      	ldr	r5, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	461e      	mov	r6, r3
 80044f4:	f010 f936 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	9302      	str	r3, [sp, #8]
 80044fc:	232c      	movs	r3, #44	; 0x2c
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004506:	4632      	mov	r2, r6
 8004508:	2132      	movs	r1, #50	; 0x32
 800450a:	4620      	mov	r0, r4
 800450c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800450e:	f010 f919 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004512:	4604      	mov	r4, r0
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	3320      	adds	r3, #32
 8004518:	681d      	ldr	r5, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2de      	uxtb	r6, r3
 800452a:	f010 f91b 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800452e:	4603      	mov	r3, r0
 8004530:	9303      	str	r3, [sp, #12]
 8004532:	232d      	movs	r3, #45	; 0x2d
 8004534:	9302      	str	r3, [sp, #8]
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004540:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004542:	4631      	mov	r1, r6
 8004544:	4620      	mov	r0, r4
 8004546:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004548:	f010 f8fc 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800454c:	4604      	mov	r4, r0
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	3338      	adds	r3, #56	; 0x38
 8004552:	681d      	ldr	r5, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461e      	mov	r6, r3
 800455c:	f010 f902 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004560:	4603      	mov	r3, r0
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	232e      	movs	r3, #46	; 0x2e
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800456e:	4632      	mov	r2, r6
 8004570:	2100      	movs	r1, #0
 8004572:	4620      	mov	r0, r4
 8004574:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004576:	f010 f8e5 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800457a:	4604      	mov	r4, r0
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	3338      	adds	r3, #56	; 0x38
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	461e      	mov	r6, r3
 800458a:	f010 f8eb 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800458e:	4603      	mov	r3, r0
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	232f      	movs	r3, #47	; 0x2f
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800459c:	4632      	mov	r2, r6
 800459e:	2100      	movs	r1, #0
 80045a0:	4620      	mov	r0, r4
 80045a2:	47a8      	blx	r5

}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ac:	08023904 	.word	0x08023904
 80045b0:	08023924 	.word	0x08023924
 80045b4:	0802394c 	.word	0x0802394c
 80045b8:	08023964 	.word	0x08023964
 80045bc:	0802396c 	.word	0x0802396c
 80045c0:	08023994 	.word	0x08023994

080045c4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff0a 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045e0:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	08028340 	.word	0x08028340

080045f4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	2233      	movs	r2, #51	; 0x33
 80045fe:	4906      	ldr	r1, [pc, #24]	; (8004618 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004600:	2008      	movs	r0, #8
 8004602:	f006 f8f9 	bl	800a7f8 <_ZnwjPKci>
 8004606:	4604      	mov	r4, r0
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff ffdb 	bl	80045c4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800460e:	4623      	mov	r3, r4
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	08023904 	.word	0x08023904

0800461c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4618      	mov	r0, r3
 8004628:	f00e fcd4 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 800462c:	4a03      	ldr	r2, [pc, #12]	; (800463c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08028294 	.word	0x08028294

08004640 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004642:	b087      	sub	sp, #28
 8004644:	af04      	add	r7, sp, #16
 8004646:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2145      	movs	r1, #69	; 0x45
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fe09 	bl	8004266 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004654:	f010 f876 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004658:	4604      	mov	r4, r0
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	3338      	adds	r3, #56	; 0x38
 800465e:	681d      	ldr	r5, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	461e      	mov	r6, r3
 800466a:	f010 f87b 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800466e:	4603      	mov	r3, r0
 8004670:	9302      	str	r3, [sp, #8]
 8004672:	2336      	movs	r3, #54	; 0x36
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800467c:	4632      	mov	r2, r6
 800467e:	2145      	movs	r1, #69	; 0x45
 8004680:	4620      	mov	r0, r4
 8004682:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2110      	movs	r1, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fdeb 	bl	8004266 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004690:	f010 f858 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004694:	4604      	mov	r4, r0
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	3338      	adds	r3, #56	; 0x38
 800469a:	681d      	ldr	r5, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461e      	mov	r6, r3
 80046a8:	f010 f85c 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046ac:	4603      	mov	r3, r0
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	2339      	movs	r3, #57	; 0x39
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80046ba:	4632      	mov	r2, r6
 80046bc:	2110      	movs	r1, #16
 80046be:	4620      	mov	r0, r4
 80046c0:	47a8      	blx	r5

}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	08023904 	.word	0x08023904
 80046d0:	080239bc 	.word	0x080239bc
 80046d4:	080239ec 	.word	0x080239ec

080046d8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fe80 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80046f4:	4a03      	ldr	r2, [pc, #12]	; (8004704 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08028274 	.word	0x08028274

08004708 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	223d      	movs	r2, #61	; 0x3d
 8004712:	4906      	ldr	r1, [pc, #24]	; (800472c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004714:	2008      	movs	r0, #8
 8004716:	f006 f86f 	bl	800a7f8 <_ZnwjPKci>
 800471a:	4604      	mov	r4, r0
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff ffdb 	bl	80046d8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004722:	4623      	mov	r3, r4
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bd90      	pop	{r4, r7, pc}
 800472c:	08023904 	.word	0x08023904

08004730 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f00e fc4a 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004740:	4a03      	ldr	r2, [pc, #12]	; (8004750 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	080281c8 	.word	0x080281c8

08004754 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af04      	add	r7, sp, #16
 800475a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4293      	cmp	r3, r2
 8004782:	da0b      	bge.n	800479c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fd69 	bl	8004266 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e7e3      	b.n	8004764 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	21ff      	movs	r1, #255	; 0xff
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fd5f 	bl	8004266 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047a8:	f00f ffcc 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80047ac:	4604      	mov	r4, r0
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	3338      	adds	r3, #56	; 0x38
 80047b2:	681d      	ldr	r5, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	461e      	mov	r6, r3
 80047be:	f00f ffd1 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	2345      	movs	r3, #69	; 0x45
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80047d0:	4632      	mov	r2, r6
 80047d2:	21ff      	movs	r1, #255	; 0xff
 80047d4:	4620      	mov	r0, r4
 80047d6:	47a8      	blx	r5
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e0:	08023904 	.word	0x08023904
 80047e4:	08023a1c 	.word	0x08023a1c

080047e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fdf8 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	080281a8 	.word	0x080281a8

08004818 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	2248      	movs	r2, #72	; 0x48
 8004822:	4906      	ldr	r1, [pc, #24]	; (800483c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004824:	2008      	movs	r0, #8
 8004826:	f005 ffe7 	bl	800a7f8 <_ZnwjPKci>
 800482a:	4604      	mov	r4, r0
 800482c:	4620      	mov	r0, r4
 800482e:	f7ff ffdb 	bl	80047e8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004832:	4623      	mov	r3, r4
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	08023904 	.word	0x08023904

08004840 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4618      	mov	r0, r3
 800484c:	f00e fbc2 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004850:	4a03      	ldr	r2, [pc, #12]	; (8004860 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	080280fc 	.word	0x080280fc

08004864 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af04      	add	r7, sp, #16
 800486a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	21ff      	movs	r1, #255	; 0xff
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fcf7 	bl	8004266 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff fd1c 	bl	80042ba <ringBuffer_pop>
 8004882:	4603      	mov	r3, r0
 8004884:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004886:	f00f ff5d 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800488a:	4604      	mov	r4, r0
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	3338      	adds	r3, #56	; 0x38
 8004890:	681d      	ldr	r5, [r3, #0]
 8004892:	7bfe      	ldrb	r6, [r7, #15]
 8004894:	f00f ff66 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004898:	4603      	mov	r3, r0
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	234d      	movs	r3, #77	; 0x4d
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048a6:	4632      	mov	r2, r6
 80048a8:	21ff      	movs	r1, #255	; 0xff
 80048aa:	4620      	mov	r0, r4
 80048ac:	47a8      	blx	r5

}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08023904 	.word	0x08023904
 80048bc:	08023a4c 	.word	0x08023a4c

080048c0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fd8c 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	080280dc 	.word	0x080280dc

080048f0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	2251      	movs	r2, #81	; 0x51
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 80048fc:	2008      	movs	r0, #8
 80048fe:	f005 ff7b 	bl	800a7f8 <_ZnwjPKci>
 8004902:	4604      	mov	r4, r0
 8004904:	4620      	mov	r0, r4
 8004906:	f7ff ffdb 	bl	80048c0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800490a:	4623      	mov	r3, r4
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	08023904 	.word	0x08023904

08004918 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f00e fb56 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	08028030 	.word	0x08028030

0800493c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af04      	add	r7, sp, #16
 8004942:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	21aa      	movs	r1, #170	; 0xaa
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fc89 	bl	8004266 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	3b01      	subs	r3, #1
 800496a:	429a      	cmp	r2, r3
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4293      	cmp	r3, r2
 800497a:	da0a      	bge.n	8004992 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fc9a 	bl	80042ba <ringBuffer_pop>
 8004986:	4603      	mov	r3, r0
 8004988:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e7e4      	b.n	800495c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fc8f 	bl	80042ba <ringBuffer_pop>
 800499c:	4603      	mov	r3, r0
 800499e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049a0:	f00f fed0 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80049a4:	4604      	mov	r4, r0
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	3338      	adds	r3, #56	; 0x38
 80049aa:	681d      	ldr	r5, [r3, #0]
 80049ac:	7afe      	ldrb	r6, [r7, #11]
 80049ae:	f00f fed9 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049b2:	4603      	mov	r3, r0
 80049b4:	9302      	str	r3, [sp, #8]
 80049b6:	235e      	movs	r3, #94	; 0x5e
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80049c0:	4632      	mov	r2, r6
 80049c2:	21aa      	movs	r1, #170	; 0xaa
 80049c4:	4620      	mov	r0, r4
 80049c6:	47a8      	blx	r5
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d0:	08023904 	.word	0x08023904
 80049d4:	08023a6c 	.word	0x08023a6c

080049d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fd00 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80049f4:	4a03      	ldr	r2, [pc, #12]	; (8004a04 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	08028010 	.word	0x08028010

08004a08 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	2261      	movs	r2, #97	; 0x61
 8004a12:	4906      	ldr	r1, [pc, #24]	; (8004a2c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a14:	2008      	movs	r0, #8
 8004a16:	f005 feef 	bl	800a7f8 <_ZnwjPKci>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7ff ffdb 	bl	80049d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a22:	4623      	mov	r3, r4
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd90      	pop	{r4, r7, pc}
 8004a2c:	08023904 	.word	0x08023904

08004a30 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00e faca 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004a40:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	08027f64 	.word	0x08027f64

08004a54 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a56:	b089      	sub	sp, #36	; 0x24
 8004a58:	af04      	add	r7, sp, #16
 8004a5a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d20b      	bcs.n	8004a84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fbf5 	bl	8004266 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e7ed      	b.n	8004a60 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004a84:	f00f fe5e 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	3338      	adds	r3, #56	; 0x38
 8004a8e:	681d      	ldr	r5, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	461e      	mov	r6, r3
 8004aa4:	f00f fe5e 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	2368      	movs	r3, #104	; 0x68
 8004aae:	9301      	str	r3, [sp, #4]
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004ab6:	4632      	mov	r2, r6
 8004ab8:	2131      	movs	r1, #49	; 0x31
 8004aba:	4620      	mov	r0, r4
 8004abc:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fc23 	bl	800430e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004ac8:	f00f fe3c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004acc:	4604      	mov	r4, r0
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	681d      	ldr	r5, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	461e      	mov	r6, r3
 8004ae8:	f00f fe3c 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004aec:	4603      	mov	r3, r0
 8004aee:	9302      	str	r3, [sp, #8]
 8004af0:	236c      	movs	r3, #108	; 0x6c
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004afa:	4632      	mov	r2, r6
 8004afc:	2100      	movs	r1, #0
 8004afe:	4620      	mov	r0, r4
 8004b00:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b02:	f00f fe1f 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004b06:	4604      	mov	r4, r0
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	3338      	adds	r3, #56	; 0x38
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	461e      	mov	r6, r3
 8004b22:	f00f fe1f 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b26:	4603      	mov	r3, r0
 8004b28:	9302      	str	r3, [sp, #8]
 8004b2a:	236d      	movs	r3, #109	; 0x6d
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b34:	4632      	mov	r2, r6
 8004b36:	2100      	movs	r1, #0
 8004b38:	4620      	mov	r0, r4
 8004b3a:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b44:	08023904 	.word	0x08023904
 8004b48:	08023a8c 	.word	0x08023a8c
 8004b4c:	08023ac8 	.word	0x08023ac8
 8004b50:	08023b04 	.word	0x08023b04

08004b54 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fc42 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	08027f44 	.word	0x08027f44

08004b84 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	2276      	movs	r2, #118	; 0x76
 8004b8e:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004b90:	2008      	movs	r0, #8
 8004b92:	f005 fe31 	bl	800a7f8 <_ZnwjPKci>
 8004b96:	4604      	mov	r4, r0
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f7ff ffdb 	bl	8004b54 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd90      	pop	{r4, r7, pc}
 8004ba8:	08023904 	.word	0x08023904

08004bac <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f00e fa0c 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004bbc:	4a03      	ldr	r2, [pc, #12]	; (8004bcc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	08027e98 	.word	0x08027e98

08004bd0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af04      	add	r7, sp, #16
 8004bd6:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fbac 	bl	800433c <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004be4:	f00f fdae 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004be8:	4604      	mov	r4, r0
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	3324      	adds	r3, #36	; 0x24
 8004bee:	681d      	ldr	r5, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68de      	ldr	r6, [r3, #12]
 8004bf6:	f00f fdb5 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	237a      	movs	r3, #122	; 0x7a
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	4632      	mov	r2, r6
 8004c0a:	4903      	ldr	r1, [pc, #12]	; (8004c18 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	47a8      	blx	r5
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c18:	08023b3c 	.word	0x08023b3c
 8004c1c:	08023904 	.word	0x08023904

08004c20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fbdc 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c3c:	4a03      	ldr	r2, [pc, #12]	; (8004c4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08027e78 	.word	0x08027e78

08004c50 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	227d      	movs	r2, #125	; 0x7d
 8004c5a:	4906      	ldr	r1, [pc, #24]	; (8004c74 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c5c:	2008      	movs	r0, #8
 8004c5e:	f005 fdcb 	bl	800a7f8 <_ZnwjPKci>
 8004c62:	4604      	mov	r4, r0
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff ffdb 	bl	8004c20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	08023904 	.word	0x08023904

08004c78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f00e f9a6 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004c88:	4a03      	ldr	r2, [pc, #12]	; (8004c98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	08027dcc 	.word	0x08027dcc

08004c9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	b08a      	sub	sp, #40	; 0x28
 8004ca2:	af04      	add	r7, sp, #16
 8004ca4:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	494e      	ldr	r1, [pc, #312]	; (8004de4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fb45 	bl	800433c <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cb2:	f00f fd47 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	3324      	adds	r3, #36	; 0x24
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68de      	ldr	r6, [r3, #12]
 8004cc4:	f00f fd4e 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	9302      	str	r3, [sp, #8]
 8004ccc:	2381      	movs	r3, #129	; 0x81
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4942      	ldr	r1, [pc, #264]	; (8004de4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004cda:	4620      	mov	r0, r4
 8004cdc:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4942      	ldr	r1, [pc, #264]	; (8004dec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fb48 	bl	800437a <ringBuffer_lookFor>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d05c      	beq.n	8004db4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	493b      	ldr	r1, [pc, #236]	; (8004dec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff fb3a 	bl	800437a <ringBuffer_lookFor>
 8004d06:	4604      	mov	r4, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fb33 	bl	800437a <ringBuffer_lookFor>
 8004d14:	4603      	mov	r3, r0
 8004d16:	429c      	cmp	r4, r3
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d24:	f00f fd0e 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004d28:	6803      	ldr	r3, [r0, #0]
 8004d2a:	3370      	adds	r3, #112	; 0x70
 8004d2c:	681c      	ldr	r4, [r3, #0]
 8004d2e:	2382      	movs	r3, #130	; 0x82
 8004d30:	4a2d      	ldr	r2, [pc, #180]	; (8004de8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d32:	492f      	ldr	r1, [pc, #188]	; (8004df0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d34:	47a0      	blx	r4
 8004d36:	f00f fd05 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	3358      	adds	r3, #88	; 0x58
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	2101      	movs	r1, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f008 ff97 	bl	800dc7c <_Z10StringFromi>
 8004d4e:	f107 0308 	add.w	r3, r7, #8
 8004d52:	4618      	mov	r0, r3
 8004d54:	f008 fc9e 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8004d58:	4606      	mov	r6, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4923      	ldr	r1, [pc, #140]	; (8004dec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fb0a 	bl	800437a <ringBuffer_lookFor>
 8004d66:	4602      	mov	r2, r0
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f009 f9fe 	bl	800e170 <_Z10StringFromm>
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f008 fc8b 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8004d7e:	4680      	mov	r8, r0
 8004d80:	f00f fcf0 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d84:	4603      	mov	r3, r0
 8004d86:	9303      	str	r3, [sp, #12]
 8004d88:	2382      	movs	r3, #130	; 0x82
 8004d8a:	9302      	str	r3, [sp, #8]
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	2300      	movs	r3, #0
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4643      	mov	r3, r8
 8004d96:	4632      	mov	r2, r6
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	47a8      	blx	r5
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	4618      	mov	r0, r3
 8004da4:	f008 fca3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4618      	mov	r0, r3
 8004dae:	f008 fc9e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8004db2:	e012      	b.n	8004dda <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004db4:	f00f fcc6 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004db8:	4604      	mov	r4, r0
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	3338      	adds	r3, #56	; 0x38
 8004dbe:	681d      	ldr	r5, [r3, #0]
 8004dc0:	f00f fcd0 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	9302      	str	r3, [sp, #8]
 8004dc8:	2382      	movs	r3, #130	; 0x82
 8004dca:	9301      	str	r3, [sp, #4]
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	47a8      	blx	r5
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	08023b44 	.word	0x08023b44
 8004de8:	08023904 	.word	0x08023904
 8004dec:	08023b50 	.word	0x08023b50
 8004df0:	08023b58 	.word	0x08023b58

08004df4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff faf2 	bl	80043f4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e10:	4a03      	ldr	r2, [pc, #12]	; (8004e20 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	08027dac 	.word	0x08027dac

08004e24 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	2285      	movs	r2, #133	; 0x85
 8004e2e:	4906      	ldr	r1, [pc, #24]	; (8004e48 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e30:	2008      	movs	r0, #8
 8004e32:	f005 fce1 	bl	800a7f8 <_ZnwjPKci>
 8004e36:	4604      	mov	r4, r0
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7ff ffdb 	bl	8004df4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e3e:	4623      	mov	r3, r4
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd90      	pop	{r4, r7, pc}
 8004e48:	08023904 	.word	0x08023904

08004e4c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f00e f8bc 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	08027d00 	.word	0x08027d00

08004e70 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af04      	add	r7, sp, #16
 8004e76:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004e78:	f00f fc64 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	3338      	adds	r3, #56	; 0x38
 8004e82:	681d      	ldr	r5, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fa8c 	bl	80043a6 <ringBuffer_capacity>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	461e      	mov	r6, r3
 8004e92:	f00f fc67 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e96:	4603      	mov	r3, r0
 8004e98:	9302      	str	r3, [sp, #8]
 8004e9a:	2388      	movs	r3, #136	; 0x88
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	2132      	movs	r1, #50	; 0x32
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	47a8      	blx	r5

}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb4:	08023904 	.word	0x08023904
 8004eb8:	08023bfc 	.word	0x08023bfc

08004ebc <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	491d      	ldr	r1, [pc, #116]	; (8004f40 <_Z18UART_Transmit_FakePh+0x84>)
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f008 f857 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f006 f92a 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004edc:	4604      	mov	r4, r0
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	681d      	ldr	r5, [r3, #0]
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	4916      	ldr	r1, [pc, #88]	; (8004f44 <_Z18UART_Transmit_FakePh+0x88>)
 8004eea:	4618      	mov	r0, r3
 8004eec:	f008 f847 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8004ef0:	f107 0310 	add.w	r3, r7, #16
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	47a8      	blx	r5
 8004efa:	4604      	mov	r4, r0
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	333c      	adds	r3, #60	; 0x3c
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	f107 0318 	add.w	r3, r7, #24
 8004f06:	4910      	ldr	r1, [pc, #64]	; (8004f48 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f008 f838 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8004f0e:	f107 0318 	add.w	r3, r7, #24
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4620      	mov	r0, r4
 8004f18:	47a8      	blx	r5
 8004f1a:	f107 0318 	add.w	r3, r7, #24
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f008 fbe5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f008 fbe0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f008 fbdb 	bl	800d6ee <_ZN12SimpleStringD1Ev>

}
 8004f38:	bf00      	nop
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f40:	08023c34 	.word	0x08023c34
 8004f44:	08023c38 	.word	0x08023c38
 8004f48:	08023c4c 	.word	0x08023c4c

08004f4c <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f4c:	b5b0      	push	{r4, r5, r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f52:	463b      	mov	r3, r7
 8004f54:	4916      	ldr	r1, [pc, #88]	; (8004fb0 <_Z17UART_Receive_Fakev+0x64>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f008 f811 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f006 f8e5 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f66:	4604      	mov	r4, r0
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	3318      	adds	r3, #24
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4910      	ldr	r1, [pc, #64]	; (8004fb4 <_Z17UART_Receive_Fakev+0x68>)
 8004f74:	4618      	mov	r0, r3
 8004f76:	f008 f802 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4620      	mov	r0, r4
 8004f82:	47a8      	blx	r5
 8004f84:	4603      	mov	r3, r0
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	3264      	adds	r2, #100	; 0x64
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4790      	blx	r2
 8004f90:	4603      	mov	r3, r0
 8004f92:	b2dc      	uxtb	r4, r3
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f008 fba8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f008 fba4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8004fa6:	4623      	mov	r3, r4
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb0:	08023c34 	.word	0x08023c34
 8004fb4:	08023c54 	.word	0x08023c54

08004fb8 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <_Z12getTick_Fakev+0x30>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d103      	bne.n	8004fce <_Z12getTick_Fakev+0x16>
		time = 0;
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <_Z12getTick_Fakev+0x30>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e004      	b.n	8004fd8 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <_Z12getTick_Fakev+0x30>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <_Z12getTick_Fakev+0x30>)
 8004fd6:	6013      	str	r3, [r2, #0]
	return time;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <_Z12getTick_Fakev+0x30>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	200004a0 	.word	0x200004a0

08004fec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004ff4:	2364      	movs	r3, #100	; 0x64
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004ff8:	4904      	ldr	r1, [pc, #16]	; (800500c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004ffc:	f7fe fe3a 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004f4d 	.word	0x08004f4d
 8005010:	08004ebd 	.word	0x08004ebd

08005014 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 800501c:	f107 0308 	add.w	r3, r7, #8
 8005020:	4917      	ldr	r1, [pc, #92]	; (8005080 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005022:	4618      	mov	r0, r3
 8005024:	f007 ffab 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f006 f87e 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005034:	4603      	mov	r3, r0
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	3294      	adds	r2, #148	; 0x94
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	4790      	blx	r2
 8005040:	f107 0308 	add.w	r3, r7, #8
 8005044:	4618      	mov	r0, r3
 8005046:	f008 fb52 	bl	800d6ee <_ZN12SimpleStringD1Ev>
		mock().clear();
 800504a:	f107 0310 	add.w	r3, r7, #16
 800504e:	490c      	ldr	r1, [pc, #48]	; (8005080 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005050:	4618      	mov	r0, r3
 8005052:	f007 ff94 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005056:	f107 0310 	add.w	r3, r7, #16
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f006 f867 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005062:	4603      	mov	r3, r0
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	329c      	adds	r2, #156	; 0x9c
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	4790      	blx	r2
 800506e:	f107 0310 	add.w	r3, r7, #16
 8005072:	4618      	mov	r0, r3
 8005074:	f008 fb3b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	}
 8005078:	bf00      	nop
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	08023c34 	.word	0x08023c34

08005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	f00f fb82 	bl	8014798 <_ZN5UtestC1Ev>
 8005094:	4a03      	ldr	r2, [pc, #12]	; (80050a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08027ce0 	.word	0x08027ce0

080050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f00f fb7d 	bl	80147b8 <_ZN5UtestD1Ev>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	08027ce0 	.word	0x08027ce0

080050cc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ffe7 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80050da:	2104      	movs	r1, #4
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f005 fb9f 	bl	800a820 <_ZdlPvj>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff ffc4 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80050fc:	4a03      	ldr	r2, [pc, #12]	; (800510c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	08027cc0 	.word	0x08027cc0

08005110 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	22c0      	movs	r2, #192	; 0xc0
 800511a:	4906      	ldr	r1, [pc, #24]	; (8005134 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 800511c:	2004      	movs	r0, #4
 800511e:	f005 fb6b 	bl	800a7f8 <_ZnwjPKci>
 8005122:	4604      	mov	r4, r0
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff ffe1 	bl	80050ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800512a:	4623      	mov	r3, r4
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	08023904 	.word	0x08023904

08005138 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4618      	mov	r0, r3
 8005144:	f00d ff46 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8005148:	4a03      	ldr	r2, [pc, #12]	; (8005158 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	08027c14 	.word	0x08027c14

0800515c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800515c:	b5b0      	push	{r4, r5, r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af04      	add	r7, sp, #16
 8005162:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005168:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 800516a:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	2364      	movs	r3, #100	; 0x64
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8005172:	4910      	ldr	r1, [pc, #64]	; (80051b4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005174:	f7fe fd7e 	bl	8003c74 <ESP_Init>
 8005178:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 800517a:	f00f fae3 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800517e:	4604      	mov	r4, r0
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	3338      	adds	r3, #56	; 0x38
 8005184:	681d      	ldr	r5, [r3, #0]
 8005186:	f00f faed 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800518a:	4603      	mov	r3, r0
 800518c:	9302      	str	r3, [sp, #8]
 800518e:	23ce      	movs	r3, #206	; 0xce
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	2101      	movs	r1, #1
 800519c:	4620      	mov	r0, r4
 800519e:	47a8      	blx	r5

}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}
 80051a8:	200004a4 	.word	0x200004a4
 80051ac:	08004ebd 	.word	0x08004ebd
 80051b0:	08004fb9 	.word	0x08004fb9
 80051b4:	08004f4d 	.word	0x08004f4d
 80051b8:	08023904 	.word	0x08023904
 80051bc:	08023c68 	.word	0x08023c68

080051c0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ff5a 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08027bf4 	.word	0x08027bf4

080051e4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	22d2      	movs	r2, #210	; 0xd2
 80051ee:	4906      	ldr	r1, [pc, #24]	; (8005208 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 80051f0:	2004      	movs	r0, #4
 80051f2:	f005 fb01 	bl	800a7f8 <_ZnwjPKci>
 80051f6:	4604      	mov	r4, r0
 80051f8:	4620      	mov	r0, r4
 80051fa:	f7ff ffe1 	bl	80051c0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 80051fe:	4623      	mov	r3, r4
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	08023904 	.word	0x08023904

0800520c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f00d fedc 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 800521c:	4a03      	ldr	r2, [pc, #12]	; (800522c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	08027b48 	.word	0x08027b48

08005230 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005230:	b5b0      	push	{r4, r5, r7, lr}
 8005232:	b08e      	sub	sp, #56	; 0x38
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	493d      	ldr	r1, [pc, #244]	; (8005334 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800523e:	4618      	mov	r0, r3
 8005240:	f007 fe9d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f005 ff70 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005250:	4604      	mov	r4, r0
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	681d      	ldr	r5, [r3, #0]
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	4936      	ldr	r1, [pc, #216]	; (8005338 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800525e:	4618      	mov	r0, r3
 8005260:	f007 fe8d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005264:	f107 0310 	add.w	r3, r7, #16
 8005268:	4619      	mov	r1, r3
 800526a:	4620      	mov	r0, r4
 800526c:	47a8      	blx	r5
 800526e:	4604      	mov	r4, r0
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	334c      	adds	r3, #76	; 0x4c
 8005274:	681d      	ldr	r5, [r3, #0]
 8005276:	f107 0318 	add.w	r3, r7, #24
 800527a:	4930      	ldr	r1, [pc, #192]	; (800533c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800527c:	4618      	mov	r0, r3
 800527e:	f007 fe7e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005282:	f107 0318 	add.w	r3, r7, #24
 8005286:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005288:	4619      	mov	r1, r3
 800528a:	4620      	mov	r0, r4
 800528c:	47a8      	blx	r5
 800528e:	f107 0318 	add.w	r3, r7, #24
 8005292:	4618      	mov	r0, r3
 8005294:	f008 fa2b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005298:	f107 0310 	add.w	r3, r7, #16
 800529c:	4618      	mov	r0, r3
 800529e:	f008 fa26 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f008 fa21 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052ac:	f107 0320 	add.w	r3, r7, #32
 80052b0:	4920      	ldr	r1, [pc, #128]	; (8005334 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052b2:	4618      	mov	r0, r3
 80052b4:	f007 fe63 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80052b8:	f107 0320 	add.w	r3, r7, #32
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f005 ff36 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052c4:	4604      	mov	r4, r0
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	681d      	ldr	r5, [r3, #0]
 80052cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d0:	4919      	ldr	r1, [pc, #100]	; (8005338 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f007 fe53 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80052d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052dc:	4619      	mov	r1, r3
 80052de:	4620      	mov	r0, r4
 80052e0:	47a8      	blx	r5
 80052e2:	4604      	mov	r4, r0
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	334c      	adds	r3, #76	; 0x4c
 80052e8:	681d      	ldr	r5, [r3, #0]
 80052ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052ee:	4913      	ldr	r1, [pc, #76]	; (800533c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052f0:	4618      	mov	r0, r3
 80052f2:	f007 fe44 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80052f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	47a8      	blx	r5
 8005302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005306:	4618      	mov	r0, r3
 8005308:	f008 f9f1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800530c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005310:	4618      	mov	r0, r3
 8005312:	f008 f9ec 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005316:	f107 0320 	add.w	r3, r7, #32
 800531a:	4618      	mov	r0, r3
 800531c:	f008 f9e7 	bl	800d6ee <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005320:	4807      	ldr	r0, [pc, #28]	; (8005340 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005322:	f7fe fcd9 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005326:	4807      	ldr	r0, [pc, #28]	; (8005344 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005328:	f7fe fcd6 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 800532c:	bf00      	nop
 800532e:	3738      	adds	r7, #56	; 0x38
 8005330:	46bd      	mov	sp, r7
 8005332:	bdb0      	pop	{r4, r5, r7, pc}
 8005334:	08023c34 	.word	0x08023c34
 8005338:	08023c38 	.word	0x08023c38
 800533c:	08023c4c 	.word	0x08023c4c
 8005340:	08023b3c 	.word	0x08023b3c
 8005344:	08023c88 	.word	0x08023c88

08005348 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fe96 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005358:	4a03      	ldr	r2, [pc, #12]	; (8005368 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	08027b28 	.word	0x08027b28

0800536c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	22de      	movs	r2, #222	; 0xde
 8005376:	4906      	ldr	r1, [pc, #24]	; (8005390 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005378:	2004      	movs	r0, #4
 800537a:	f005 fa3d 	bl	800a7f8 <_ZnwjPKci>
 800537e:	4604      	mov	r4, r0
 8005380:	4620      	mov	r0, r4
 8005382:	f7ff ffe1 	bl	8005348 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005386:	4623      	mov	r3, r4
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}
 8005390:	08023904 	.word	0x08023904

08005394 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f00d fe18 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80053a4:	4a03      	ldr	r2, [pc, #12]	; (80053b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	08027a7c 	.word	0x08027a7c

080053b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	b08f      	sub	sp, #60	; 0x3c
 80053bc:	af04      	add	r7, sp, #16
 80053be:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 80053c0:	4a31      	ldr	r2, [pc, #196]	; (8005488 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80053c2:	f107 030c 	add.w	r3, r7, #12
 80053c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053ca:	6018      	str	r0, [r3, #0]
 80053cc:	3304      	adds	r3, #4
 80053ce:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fa ff2f 	bl	800023c <strlen>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	4293      	cmp	r3, r2
 80053e6:	da35      	bge.n	8005454 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	4927      	ldr	r1, [pc, #156]	; (800548c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 80053ee:	4618      	mov	r0, r3
 80053f0:	f007 fdc5 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f005 fe98 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005400:	4604      	mov	r4, r0
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	681d      	ldr	r5, [r3, #0]
 8005408:	f107 031c 	add.w	r3, r7, #28
 800540c:	4920      	ldr	r1, [pc, #128]	; (8005490 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 800540e:	4618      	mov	r0, r3
 8005410:	f007 fdb5 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005414:	f107 031c 	add.w	r3, r7, #28
 8005418:	4619      	mov	r1, r3
 800541a:	4620      	mov	r0, r4
 800541c:	47a8      	blx	r5
 800541e:	4603      	mov	r3, r0
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	3264      	adds	r2, #100	; 0x64
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	f107 000c 	add.w	r0, r7, #12
 800542a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800542c:	4401      	add	r1, r0
 800542e:	7809      	ldrb	r1, [r1, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	4790      	blx	r2
 8005434:	f107 031c 	add.w	r3, r7, #28
 8005438:	4618      	mov	r0, r3
 800543a:	f008 f958 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	4618      	mov	r0, r3
 8005444:	f008 f953 	bl	800d6ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005448:	f7fe fc54 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	3301      	adds	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e7bf      	b.n	80053d4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005454:	f00f f976 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005458:	4604      	mov	r4, r0
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	3324      	adds	r3, #36	; 0x24
 800545e:	681d      	ldr	r5, [r3, #0]
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68de      	ldr	r6, [r3, #12]
 8005466:	f00f f97d 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800546a:	4603      	mov	r3, r0
 800546c:	9302      	str	r3, [sp, #8]
 800546e:	23e9      	movs	r3, #233	; 0xe9
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	4632      	mov	r2, r6
 800547a:	4903      	ldr	r1, [pc, #12]	; (8005488 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 800547c:	4620      	mov	r0, r4
 800547e:	47a8      	blx	r5

}
 8005480:	bf00      	nop
 8005482:	372c      	adds	r7, #44	; 0x2c
 8005484:	46bd      	mov	sp, r7
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005488:	08023c90 	.word	0x08023c90
 800548c:	08023c34 	.word	0x08023c34
 8005490:	08023c54 	.word	0x08023c54
 8005494:	2000037c 	.word	0x2000037c
 8005498:	08023904 	.word	0x08023904

0800549c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fdec 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054ac:	4a03      	ldr	r2, [pc, #12]	; (80054bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	08027a5c 	.word	0x08027a5c

080054c0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	22ed      	movs	r2, #237	; 0xed
 80054ca:	4906      	ldr	r1, [pc, #24]	; (80054e4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80054cc:	2004      	movs	r0, #4
 80054ce:	f005 f993 	bl	800a7f8 <_ZnwjPKci>
 80054d2:	4604      	mov	r4, r0
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ffe1 	bl	800549c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80054da:	4623      	mov	r3, r4
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}
 80054e4:	08023904 	.word	0x08023904

080054e8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f00d fd6e 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80054f8:	4a03      	ldr	r2, [pc, #12]	; (8005508 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	080279b0 	.word	0x080279b0

0800550c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550e:	b08f      	sub	sp, #60	; 0x3c
 8005510:	af04      	add	r7, sp, #16
 8005512:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005514:	4a32      	ldr	r2, [pc, #200]	; (80055e0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800551e:	6018      	str	r0, [r3, #0]
 8005520:	3304      	adds	r3, #4
 8005522:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005524:	2300      	movs	r3, #0
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	4618      	mov	r0, r3
 800552e:	f7fa fe85 	bl	800023c <strlen>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	4293      	cmp	r3, r2
 800553a:	da35      	bge.n	80055a8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800553c:	f107 0310 	add.w	r3, r7, #16
 8005540:	4928      	ldr	r1, [pc, #160]	; (80055e4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8005542:	4618      	mov	r0, r3
 8005544:	f007 fd1b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005548:	f107 0310 	add.w	r3, r7, #16
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f005 fdee 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005554:	4604      	mov	r4, r0
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	681d      	ldr	r5, [r3, #0]
 800555c:	f107 0318 	add.w	r3, r7, #24
 8005560:	4921      	ldr	r1, [pc, #132]	; (80055e8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005562:	4618      	mov	r0, r3
 8005564:	f007 fd0b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005568:	f107 0318 	add.w	r3, r7, #24
 800556c:	4619      	mov	r1, r3
 800556e:	4620      	mov	r0, r4
 8005570:	47a8      	blx	r5
 8005572:	4603      	mov	r3, r0
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	3264      	adds	r2, #100	; 0x64
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	f107 0008 	add.w	r0, r7, #8
 800557e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005580:	4401      	add	r1, r0
 8005582:	7809      	ldrb	r1, [r1, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	4790      	blx	r2
 8005588:	f107 0318 	add.w	r3, r7, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f008 f8ae 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005592:	f107 0310 	add.w	r3, r7, #16
 8005596:	4618      	mov	r0, r3
 8005598:	f008 f8a9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 800559c:	f7fe fbaa 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	3301      	adds	r3, #1
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
 80055a6:	e7bf      	b.n	8005528 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 80055a8:	4810      	ldr	r0, [pc, #64]	; (80055ec <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80055aa:	f7fe fbb5 	bl	8003d18 <Read_Response>
 80055ae:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 80055b0:	f00f f8c8 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80055b4:	4604      	mov	r4, r0
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	3338      	adds	r3, #56	; 0x38
 80055ba:	681d      	ldr	r5, [r3, #0]
 80055bc:	6a3e      	ldr	r6, [r7, #32]
 80055be:	f00f f8d1 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055c2:	4603      	mov	r3, r0
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	23f9      	movs	r3, #249	; 0xf9
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80055d0:	4632      	mov	r2, r6
 80055d2:	2101      	movs	r1, #1
 80055d4:	4620      	mov	r0, r4
 80055d6:	47a8      	blx	r5

}
 80055d8:	bf00      	nop
 80055da:	372c      	adds	r7, #44	; 0x2c
 80055dc:	46bd      	mov	sp, r7
 80055de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e0:	08023c90 	.word	0x08023c90
 80055e4:	08023c34 	.word	0x08023c34
 80055e8:	08023c54 	.word	0x08023c54
 80055ec:	08023890 	.word	0x08023890
 80055f0:	08023904 	.word	0x08023904
 80055f4:	08023c68 	.word	0x08023c68

080055f8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fd3e 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005608:	4a03      	ldr	r2, [pc, #12]	; (8005618 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08027990 	.word	0x08027990

0800561c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	22fe      	movs	r2, #254	; 0xfe
 8005626:	4906      	ldr	r1, [pc, #24]	; (8005640 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005628:	2004      	movs	r0, #4
 800562a:	f005 f8e5 	bl	800a7f8 <_ZnwjPKci>
 800562e:	4604      	mov	r4, r0
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff ffe1 	bl	80055f8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005636:	4623      	mov	r3, r4
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}
 8005640:	08023904 	.word	0x08023904

08005644 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4618      	mov	r0, r3
 8005650:	f00d fcc0 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8005654:	4a03      	ldr	r2, [pc, #12]	; (8005664 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	080278e4 	.word	0x080278e4

08005668 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af04      	add	r7, sp, #16
 800566e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005670:	2304      	movs	r3, #4
 8005672:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005674:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005678:	4811      	ldr	r0, [pc, #68]	; (80056c0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800567a:	f7fe fb5f 	bl	8003d3c <Wait_Response>
 800567e:	4603      	mov	r3, r0
 8005680:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b04      	cmp	r3, #4
 8005686:	d100      	bne.n	800568a <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005688:	e7f4      	b.n	8005674 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 800568a:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 800568c:	f00f f85a 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005690:	4604      	mov	r4, r0
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	3338      	adds	r3, #56	; 0x38
 8005696:	681d      	ldr	r5, [r3, #0]
 8005698:	7bfe      	ldrb	r6, [r7, #15]
 800569a:	f00f f863 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800569e:	4603      	mov	r3, r0
 80056a0:	9302      	str	r3, [sp, #8]
 80056a2:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80056ae:	4632      	mov	r2, r6
 80056b0:	2101      	movs	r1, #1
 80056b2:	4620      	mov	r0, r4
 80056b4:	47a8      	blx	r5

}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056be:	bf00      	nop
 80056c0:	08023890 	.word	0x08023890
 80056c4:	08023904 	.word	0x08023904
 80056c8:	08023c98 	.word	0x08023c98

080056cc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fcd4 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056dc:	4a03      	ldr	r2, [pc, #12]	; (80056ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	080278c4 	.word	0x080278c4

080056f0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80056fc:	4906      	ldr	r1, [pc, #24]	; (8005718 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 80056fe:	2004      	movs	r0, #4
 8005700:	f005 f87a 	bl	800a7f8 <_ZnwjPKci>
 8005704:	4604      	mov	r4, r0
 8005706:	4620      	mov	r0, r4
 8005708:	f7ff ffe0 	bl	80056cc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800570c:	4623      	mov	r3, r4
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}
 8005716:	bf00      	nop
 8005718:	08023904 	.word	0x08023904

0800571c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4618      	mov	r0, r3
 8005728:	f00d fc54 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 800572c:	4a03      	ldr	r2, [pc, #12]	; (800573c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	08027818 	.word	0x08027818

08005740 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005742:	b08f      	sub	sp, #60	; 0x3c
 8005744:	af04      	add	r7, sp, #16
 8005746:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005748:	2304      	movs	r3, #4
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 800574e:	4a38      	ldr	r2, [pc, #224]	; (8005830 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005750:	f107 0308 	add.w	r3, r7, #8
 8005754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005758:	6018      	str	r0, [r3, #0]
 800575a:	3304      	adds	r3, #4
 800575c:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 800575e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005762:	4834      	ldr	r0, [pc, #208]	; (8005834 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005764:	f7fe faea 	bl	8003d3c <Wait_Response>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 800576e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005772:	2b04      	cmp	r3, #4
 8005774:	d141      	bne.n	80057fa <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	f107 0308 	add.w	r3, r7, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa fd5c 	bl	800023c <strlen>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	4293      	cmp	r3, r2
 800578c:	dae7      	bge.n	800575e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	4929      	ldr	r1, [pc, #164]	; (8005838 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005794:	4618      	mov	r0, r3
 8005796:	f007 fbf2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800579a:	f107 0310 	add.w	r3, r7, #16
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f005 fcc5 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80057a6:	4604      	mov	r4, r0
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	681d      	ldr	r5, [r3, #0]
 80057ae:	f107 0318 	add.w	r3, r7, #24
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 80057b4:	4618      	mov	r0, r3
 80057b6:	f007 fbe2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80057ba:	f107 0318 	add.w	r3, r7, #24
 80057be:	4619      	mov	r1, r3
 80057c0:	4620      	mov	r0, r4
 80057c2:	47a8      	blx	r5
 80057c4:	4603      	mov	r3, r0
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	3264      	adds	r2, #100	; 0x64
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	f107 0008 	add.w	r0, r7, #8
 80057d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057d2:	4401      	add	r1, r0
 80057d4:	7809      	ldrb	r1, [r1, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	4790      	blx	r2
 80057da:	f107 0318 	add.w	r3, r7, #24
 80057de:	4618      	mov	r0, r3
 80057e0:	f007 ff85 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 ff80 	bl	800d6ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80057ee:	f7fe fa81 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	3301      	adds	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	e7bf      	b.n	800577a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 80057fa:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 80057fc:	f00e ffa2 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005800:	4604      	mov	r4, r0
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	3338      	adds	r3, #56	; 0x38
 8005806:	681d      	ldr	r5, [r3, #0]
 8005808:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 800580c:	f00e ffaa 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005810:	4603      	mov	r3, r0
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	f240 1321 	movw	r3, #289	; 0x121
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005820:	4632      	mov	r2, r6
 8005822:	2100      	movs	r1, #0
 8005824:	4620      	mov	r0, r4
 8005826:	47a8      	blx	r5
}
 8005828:	bf00      	nop
 800582a:	372c      	adds	r7, #44	; 0x2c
 800582c:	46bd      	mov	sp, r7
 800582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005830:	08023c90 	.word	0x08023c90
 8005834:	08023890 	.word	0x08023890
 8005838:	08023c34 	.word	0x08023c34
 800583c:	08023c54 	.word	0x08023c54
 8005840:	08023904 	.word	0x08023904
 8005844:	08023ccc 	.word	0x08023ccc

08005848 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fc16 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005858:	4a03      	ldr	r2, [pc, #12]	; (8005868 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	080277f8 	.word	0x080277f8

0800586c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005878:	4906      	ldr	r1, [pc, #24]	; (8005894 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800587a:	2004      	movs	r0, #4
 800587c:	f004 ffbc 	bl	800a7f8 <_ZnwjPKci>
 8005880:	4604      	mov	r4, r0
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff ffe0 	bl	8005848 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005888:	4623      	mov	r3, r4
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bd90      	pop	{r4, r7, pc}
 8005892:	bf00      	nop
 8005894:	08023904 	.word	0x08023904

08005898 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f00d fb96 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80058a8:	4a03      	ldr	r2, [pc, #12]	; (80058b8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	0802774c 	.word	0x0802774c

080058bc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b08f      	sub	sp, #60	; 0x3c
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80058ca:	f107 030c 	add.w	r3, r7, #12
 80058ce:	492f      	ldr	r1, [pc, #188]	; (800598c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80058d0:	4618      	mov	r0, r3
 80058d2:	f007 fb54 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 fc27 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058e2:	4604      	mov	r4, r0
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	681d      	ldr	r5, [r3, #0]
 80058ea:	f107 0314 	add.w	r3, r7, #20
 80058ee:	4928      	ldr	r1, [pc, #160]	; (8005990 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80058f0:	4618      	mov	r0, r3
 80058f2:	f007 fb44 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80058f6:	f107 0314 	add.w	r3, r7, #20
 80058fa:	4619      	mov	r1, r3
 80058fc:	4620      	mov	r0, r4
 80058fe:	47a8      	blx	r5
 8005900:	4604      	mov	r4, r0
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	334c      	adds	r3, #76	; 0x4c
 8005906:	681d      	ldr	r5, [r3, #0]
 8005908:	f107 031c 	add.w	r3, r7, #28
 800590c:	4921      	ldr	r1, [pc, #132]	; (8005994 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800590e:	4618      	mov	r0, r3
 8005910:	f007 fb35 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005914:	f107 031c 	add.w	r3, r7, #28
 8005918:	4a1f      	ldr	r2, [pc, #124]	; (8005998 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800591a:	4619      	mov	r1, r3
 800591c:	4620      	mov	r0, r4
 800591e:	47a8      	blx	r5
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	4618      	mov	r0, r3
 8005926:	f007 fee2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800592a:	f107 0314 	add.w	r3, r7, #20
 800592e:	4618      	mov	r0, r3
 8005930:	f007 fedd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005934:	f107 030c 	add.w	r3, r7, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f007 fed8 	bl	800d6ee <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 800593e:	4917      	ldr	r1, [pc, #92]	; (800599c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005940:	4817      	ldr	r0, [pc, #92]	; (80059a0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005942:	f7fe fa3d 	bl	8003dc0 <Connect_Wifi>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 800594c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005950:	2b04      	cmp	r3, #4
 8005952:	d100      	bne.n	8005956 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005954:	e7f3      	b.n	800593e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005956:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005958:	f00e fef4 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800595c:	4604      	mov	r4, r0
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	3338      	adds	r3, #56	; 0x38
 8005962:	681d      	ldr	r5, [r3, #0]
 8005964:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005968:	f00e fefc 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800596c:	4603      	mov	r3, r0
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	f240 1337 	movw	r3, #311	; 0x137
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 800597c:	4632      	mov	r2, r6
 800597e:	2101      	movs	r1, #1
 8005980:	4620      	mov	r0, r4
 8005982:	47a8      	blx	r5

}
 8005984:	bf00      	nop
 8005986:	372c      	adds	r7, #44	; 0x2c
 8005988:	46bd      	mov	sp, r7
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598c:	08023c34 	.word	0x08023c34
 8005990:	08023c38 	.word	0x08023c38
 8005994:	08023c4c 	.word	0x08023c4c
 8005998:	08023894 	.word	0x08023894
 800599c:	08023cf8 	.word	0x08023cf8
 80059a0:	08023d00 	.word	0x08023d00
 80059a4:	08023904 	.word	0x08023904
 80059a8:	08023d08 	.word	0x08023d08

080059ac <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fb64 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059bc:	4a03      	ldr	r2, [pc, #12]	; (80059cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	0802772c 	.word	0x0802772c

080059d0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	f240 123b 	movw	r2, #315	; 0x13b
 80059dc:	4906      	ldr	r1, [pc, #24]	; (80059f8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80059de:	2004      	movs	r0, #4
 80059e0:	f004 ff0a 	bl	800a7f8 <_ZnwjPKci>
 80059e4:	4604      	mov	r4, r0
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7ff ffe0 	bl	80059ac <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80059ec:	4623      	mov	r3, r4
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd90      	pop	{r4, r7, pc}
 80059f6:	bf00      	nop
 80059f8:	08023904 	.word	0x08023904

080059fc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f00d fae4 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8005a0c:	4a03      	ldr	r2, [pc, #12]	; (8005a1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08027680 	.word	0x08027680

08005a20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b0e1      	sub	sp, #388	; 0x184
 8005a24:	af04      	add	r7, sp, #16
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005a2a:	4a75      	ldr	r2, [pc, #468]	; (8005c00 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005a2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005a30:	4611      	mov	r1, r2
 8005a32:	2296      	movs	r2, #150	; 0x96
 8005a34:	4618      	mov	r0, r3
 8005a36:	f01a ff79 	bl	802092c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	4a71      	ldr	r2, [pc, #452]	; (8005c04 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	4611      	mov	r1, r2
 8005a44:	2396      	movs	r3, #150	; 0x96
 8005a46:	461a      	mov	r2, r3
 8005a48:	f01a ff70 	bl	802092c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005a52:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	dc46      	bgt.n	8005ae8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005a5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a5e:	496a      	ldr	r1, [pc, #424]	; (8005c08 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005a60:	4618      	mov	r0, r3
 8005a62:	f007 fa8c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f005 fb5f 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a72:	4604      	mov	r4, r0
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	681d      	ldr	r5, [r3, #0]
 8005a7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a7e:	4963      	ldr	r1, [pc, #396]	; (8005c0c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005a80:	4618      	mov	r0, r3
 8005a82:	f007 fa7c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005a86:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	47a8      	blx	r5
 8005a90:	4604      	mov	r4, r0
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	334c      	adds	r3, #76	; 0x4c
 8005a96:	681d      	ldr	r5, [r3, #0]
 8005a98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a9c:	495c      	ldr	r1, [pc, #368]	; (8005c10 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f007 fa6d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005aa4:	f107 0208 	add.w	r2, r7, #8
 8005aa8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005aac:	2132      	movs	r1, #50	; 0x32
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	441a      	add	r2, r3
 8005ab4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4620      	mov	r0, r4
 8005abc:	47a8      	blx	r5
 8005abe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f007 fe13 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005ac8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005acc:	4618      	mov	r0, r3
 8005ace:	f007 fe0e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f007 fe09 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005adc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005ae6:	e7b4      	b.n	8005a52 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005ae8:	2304      	movs	r3, #4
 8005aea:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005af4:	4947      	ldr	r1, [pc, #284]	; (8005c14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005af6:	4848      	ldr	r0, [pc, #288]	; (8005c18 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005af8:	f7fe f962 	bl	8003dc0 <Connect_Wifi>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005b02:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d15d      	bne.n	8005bc6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005b0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	dcf0      	bgt.n	8005af4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005b18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005b1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b20:	2132      	movs	r1, #50	; 0x32
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fa fb87 	bl	800023c <strlen>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005b36:	4293      	cmp	r3, r2
 8005b38:	da3f      	bge.n	8005bba <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005b3a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b3e:	4932      	ldr	r1, [pc, #200]	; (8005c08 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005b40:	4618      	mov	r0, r3
 8005b42:	f007 fa1c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005b46:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f005 faef 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b52:	4604      	mov	r4, r0
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	681d      	ldr	r5, [r3, #0]
 8005b5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b5e:	492f      	ldr	r1, [pc, #188]	; (8005c1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005b60:	4618      	mov	r0, r3
 8005b62:	f007 fa0c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005b66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	47a8      	blx	r5
 8005b70:	4603      	mov	r3, r0
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	3264      	adds	r2, #100	; 0x64
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005b7c:	2032      	movs	r0, #50	; 0x32
 8005b7e:	fb00 f101 	mul.w	r1, r0, r1
 8005b82:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005b86:	4408      	add	r0, r1
 8005b88:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005b8c:	4401      	add	r1, r0
 8005b8e:	39d0      	subs	r1, #208	; 0xd0
 8005b90:	7809      	ldrb	r1, [r1, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	4790      	blx	r2
 8005b96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f007 fda7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005ba0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f007 fda2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005baa:	f7fe f8a3 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005bae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005bb8:	e7ae      	b.n	8005b18 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 8005bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005bc4:	e796      	b.n	8005af4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 8005bc6:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8005bc8:	f00e fdbc 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	681d      	ldr	r5, [r3, #0]
 8005bd4:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005bd8:	f00e fdc4 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	9302      	str	r3, [sp, #8]
 8005be0:	f240 1363 	movw	r3, #355	; 0x163
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005bec:	4632      	mov	r2, r6
 8005bee:	2103      	movs	r1, #3
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	47a8      	blx	r5

}
 8005bf4:	bf00      	nop
 8005bf6:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	08023d60 	.word	0x08023d60
 8005c04:	08023df8 	.word	0x08023df8
 8005c08:	08023c34 	.word	0x08023c34
 8005c0c:	08023c38 	.word	0x08023c38
 8005c10:	08023c4c 	.word	0x08023c4c
 8005c14:	08023cf8 	.word	0x08023cf8
 8005c18:	08023d00 	.word	0x08023d00
 8005c1c:	08023c54 	.word	0x08023c54
 8005c20:	08023904 	.word	0x08023904
 8005c24:	08023d34 	.word	0x08023d34

08005c28 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fa26 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c38:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08027660 	.word	0x08027660

08005c4c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	f240 1267 	movw	r2, #359	; 0x167
 8005c58:	4906      	ldr	r1, [pc, #24]	; (8005c74 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005c5a:	2004      	movs	r0, #4
 8005c5c:	f004 fdcc 	bl	800a7f8 <_ZnwjPKci>
 8005c60:	4604      	mov	r4, r0
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff ffe0 	bl	8005c28 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005c68:	4623      	mov	r3, r4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd90      	pop	{r4, r7, pc}
 8005c72:	bf00      	nop
 8005c74:	08023904 	.word	0x08023904

08005c78 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f00d f9a6 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8005c88:	4a03      	ldr	r2, [pc, #12]	; (8005c98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	080275b4 	.word	0x080275b4

08005c9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c9e:	b0e1      	sub	sp, #388	; 0x184
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	1d3b      	adds	r3, r7, #4
 8005ca4:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005ca6:	4a73      	ldr	r2, [pc, #460]	; (8005e74 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 8005ca8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005cac:	4611      	mov	r1, r2
 8005cae:	2296      	movs	r2, #150	; 0x96
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f01a fe3b 	bl	802092c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4a6f      	ldr	r2, [pc, #444]	; (8005e78 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	2396      	movs	r3, #150	; 0x96
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f01a fe32 	bl	802092c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005cce:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	dc46      	bgt.n	8005d64 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005cd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005cda:	4968      	ldr	r1, [pc, #416]	; (8005e7c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f007 f94e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005ce2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f005 fa21 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005cfa:	4961      	ldr	r1, [pc, #388]	; (8005e80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f007 f93e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005d02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d06:	4619      	mov	r1, r3
 8005d08:	4620      	mov	r0, r4
 8005d0a:	47a8      	blx	r5
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	334c      	adds	r3, #76	; 0x4c
 8005d12:	681d      	ldr	r5, [r3, #0]
 8005d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d18:	495a      	ldr	r1, [pc, #360]	; (8005e84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f007 f92f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d28:	2132      	movs	r1, #50	; 0x32
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	441a      	add	r2, r3
 8005d30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d34:	4619      	mov	r1, r3
 8005d36:	4620      	mov	r0, r4
 8005d38:	47a8      	blx	r5
 8005d3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f007 fcd5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005d44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f007 fcd0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d52:	4618      	mov	r0, r3
 8005d54:	f007 fccb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005d58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d62:	e7b4      	b.n	8005cce <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005d6a:	4947      	ldr	r1, [pc, #284]	; (8005e88 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005d6c:	4847      	ldr	r0, [pc, #284]	; (8005e8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005d6e:	f7fe f827 	bl	8003dc0 <Connect_Wifi>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005d78:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d15d      	bne.n	8005e3c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 8005d80:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	dcf0      	bgt.n	8005d6a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d8e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005d92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d96:	2132      	movs	r1, #50	; 0x32
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fa4c 	bl	800023c <strlen>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005dac:	4293      	cmp	r3, r2
 8005dae:	da3f      	bge.n	8005e30 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005db0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005db4:	4931      	ldr	r1, [pc, #196]	; (8005e7c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005db6:	4618      	mov	r0, r3
 8005db8:	f007 f8e1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005dbc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f005 f9b4 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	681d      	ldr	r5, [r3, #0]
 8005dd0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005dd4:	492e      	ldr	r1, [pc, #184]	; (8005e90 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f007 f8d1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005ddc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005de0:	4619      	mov	r1, r3
 8005de2:	4620      	mov	r0, r4
 8005de4:	47a8      	blx	r5
 8005de6:	4603      	mov	r3, r0
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	3264      	adds	r2, #100	; 0x64
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005df2:	2032      	movs	r0, #50	; 0x32
 8005df4:	fb00 f101 	mul.w	r1, r0, r1
 8005df8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005dfc:	4408      	add	r0, r1
 8005dfe:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005e02:	4401      	add	r1, r0
 8005e04:	39d0      	subs	r1, #208	; 0xd0
 8005e06:	7809      	ldrb	r1, [r1, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	4790      	blx	r2
 8005e0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e10:	4618      	mov	r0, r3
 8005e12:	f007 fc6c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005e16:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f007 fc67 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005e20:	f7fd ff68 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e24:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e2e:	e7ae      	b.n	8005d8e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8005e30:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e34:	3301      	adds	r3, #1
 8005e36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005e3a:	e796      	b.n	8005d6a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8005e3c:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005e3e:	f00e fc81 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005e42:	4604      	mov	r4, r0
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	3338      	adds	r3, #56	; 0x38
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005e4e:	f00e fc89 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e52:	4603      	mov	r3, r0
 8005e54:	9302      	str	r3, [sp, #8]
 8005e56:	f240 138f 	movw	r3, #399	; 0x18f
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005e62:	4632      	mov	r2, r6
 8005e64:	2102      	movs	r1, #2
 8005e66:	4620      	mov	r0, r4
 8005e68:	47a8      	blx	r5

}
 8005e6a:	bf00      	nop
 8005e6c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e74:	08023eb8 	.word	0x08023eb8
 8005e78:	08023df8 	.word	0x08023df8
 8005e7c:	08023c34 	.word	0x08023c34
 8005e80:	08023c38 	.word	0x08023c38
 8005e84:	08023c4c 	.word	0x08023c4c
 8005e88:	08023cf8 	.word	0x08023cf8
 8005e8c:	08023d00 	.word	0x08023d00
 8005e90:	08023c54 	.word	0x08023c54
 8005e94:	08023904 	.word	0x08023904
 8005e98:	08023e90 	.word	0x08023e90

08005e9c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff f8ec 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005eac:	4a03      	ldr	r2, [pc, #12]	; (8005ebc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	08027594 	.word	0x08027594

08005ec0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	f240 1293 	movw	r2, #403	; 0x193
 8005ecc:	4906      	ldr	r1, [pc, #24]	; (8005ee8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005ece:	2004      	movs	r0, #4
 8005ed0:	f004 fc92 	bl	800a7f8 <_ZnwjPKci>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff ffe0 	bl	8005e9c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8005edc:	4623      	mov	r3, r4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	08023904 	.word	0x08023904

08005eec <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f00d f86c 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8005efc:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	080274e8 	.word	0x080274e8

08005f10 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f12:	b08f      	sub	sp, #60	; 0x3c
 8005f14:	af04      	add	r7, sp, #16
 8005f16:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8005f18:	f107 030c 	add.w	r3, r7, #12
 8005f1c:	492e      	ldr	r1, [pc, #184]	; (8005fd8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f007 f82d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005f24:	f107 030c 	add.w	r3, r7, #12
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f005 f900 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f30:	4604      	mov	r4, r0
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	681d      	ldr	r5, [r3, #0]
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4927      	ldr	r1, [pc, #156]	; (8005fdc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f007 f81d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	47a8      	blx	r5
 8005f4e:	4604      	mov	r4, r0
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	334c      	adds	r3, #76	; 0x4c
 8005f54:	681d      	ldr	r5, [r3, #0]
 8005f56:	f107 031c 	add.w	r3, r7, #28
 8005f5a:	4921      	ldr	r1, [pc, #132]	; (8005fe0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f007 f80e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8005f62:	f107 031c 	add.w	r3, r7, #28
 8005f66:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	47a8      	blx	r5
 8005f6e:	f107 031c 	add.w	r3, r7, #28
 8005f72:	4618      	mov	r0, r3
 8005f74:	f007 fbbb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f007 fbb6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8005f82:	f107 030c 	add.w	r3, r7, #12
 8005f86:	4618      	mov	r0, r3
 8005f88:	f007 fbb1 	bl	800d6ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8005f8c:	f7fd ff52 	bl	8003e34 <Disconnect_Wifi>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d100      	bne.n	8005fa0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 8005f9e:	e7f5      	b.n	8005f8c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8005fa0:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005fa2:	f00e fbcf 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	3338      	adds	r3, #56	; 0x38
 8005fac:	681d      	ldr	r5, [r3, #0]
 8005fae:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005fb2:	f00e fbd7 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	9302      	str	r3, [sp, #8]
 8005fba:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4620      	mov	r0, r4
 8005fcc:	47a8      	blx	r5
}
 8005fce:	bf00      	nop
 8005fd0:	372c      	adds	r7, #44	; 0x2c
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	08023c34 	.word	0x08023c34
 8005fdc:	08023c38 	.word	0x08023c38
 8005fe0:	08023c4c 	.word	0x08023c4c
 8005fe4:	080238a4 	.word	0x080238a4
 8005fe8:	08023904 	.word	0x08023904
 8005fec:	08023d08 	.word	0x08023d08

08005ff0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff f842 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006000:	4a03      	ldr	r2, [pc, #12]	; (8006010 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	080274c8 	.word	0x080274c8

08006014 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	f240 12a5 	movw	r2, #421	; 0x1a5
 8006020:	4906      	ldr	r1, [pc, #24]	; (800603c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006022:	2004      	movs	r0, #4
 8006024:	f004 fbe8 	bl	800a7f8 <_ZnwjPKci>
 8006028:	4604      	mov	r4, r0
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff ffe0 	bl	8005ff0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006030:	4623      	mov	r3, r4
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	bf00      	nop
 800603c:	08023904 	.word	0x08023904

08006040 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4618      	mov	r0, r3
 800604c:	f00c ffc2 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8006050:	4a03      	ldr	r2, [pc, #12]	; (8006060 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	0802741c 	.word	0x0802741c

08006064 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8006064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006066:	b093      	sub	sp, #76	; 0x4c
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 800606c:	f107 0308 	add.w	r3, r7, #8
 8006070:	494a      	ldr	r1, [pc, #296]	; (800619c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006072:	4618      	mov	r0, r3
 8006074:	f006 ff83 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f005 f856 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006084:	4604      	mov	r4, r0
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	681d      	ldr	r5, [r3, #0]
 800608c:	f107 0310 	add.w	r3, r7, #16
 8006090:	4943      	ldr	r1, [pc, #268]	; (80061a0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 8006092:	4618      	mov	r0, r3
 8006094:	f006 ff73 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	4619      	mov	r1, r3
 800609e:	4620      	mov	r0, r4
 80060a0:	47a8      	blx	r5
 80060a2:	4604      	mov	r4, r0
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	334c      	adds	r3, #76	; 0x4c
 80060a8:	681d      	ldr	r5, [r3, #0]
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	493d      	ldr	r1, [pc, #244]	; (80061a4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80060b0:	4618      	mov	r0, r3
 80060b2:	f006 ff64 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80060b6:	f107 0318 	add.w	r3, r7, #24
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80060bc:	4619      	mov	r1, r3
 80060be:	4620      	mov	r0, r4
 80060c0:	47a8      	blx	r5
 80060c2:	f107 0318 	add.w	r3, r7, #24
 80060c6:	4618      	mov	r0, r3
 80060c8:	f007 fb11 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80060cc:	f107 0310 	add.w	r3, r7, #16
 80060d0:	4618      	mov	r0, r3
 80060d2:	f007 fb0c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4618      	mov	r0, r3
 80060dc:	f007 fb07 	bl	800d6ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060e0:	f7fd fea8 	bl	8003e34 <Disconnect_Wifi>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 80060ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d139      	bne.n	8006166 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
 80060f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	dcf1      	bgt.n	80060e0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80060fc:	f107 0320 	add.w	r3, r7, #32
 8006100:	4926      	ldr	r1, [pc, #152]	; (800619c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006102:	4618      	mov	r0, r3
 8006104:	f006 ff3b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006108:	f107 0320 	add.w	r3, r7, #32
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f005 f80e 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006114:	4604      	mov	r4, r0
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	681d      	ldr	r5, [r3, #0]
 800611c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006120:	4922      	ldr	r1, [pc, #136]	; (80061ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8006122:	4618      	mov	r0, r3
 8006124:	f006 ff2b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006128:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800612c:	4619      	mov	r1, r3
 800612e:	4620      	mov	r0, r4
 8006130:	47a8      	blx	r5
 8006132:	4603      	mov	r3, r0
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	3264      	adds	r2, #100	; 0x64
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	481d      	ldr	r0, [pc, #116]	; (80061b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 800613c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800613e:	4401      	add	r1, r0
 8006140:	7809      	ldrb	r1, [r1, #0]
 8006142:	4618      	mov	r0, r3
 8006144:	4790      	blx	r2
 8006146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800614a:	4618      	mov	r0, r3
 800614c:	f007 facf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006150:	f107 0320 	add.w	r3, r7, #32
 8006154:	4618      	mov	r0, r3
 8006156:	f007 faca 	bl	800d6ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800615a:	f7fd fdcb 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	3301      	adds	r3, #1
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	e7c7      	b.n	80060f6 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8006166:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006168:	f00e faec 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800616c:	4604      	mov	r4, r0
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	3338      	adds	r3, #56	; 0x38
 8006172:	681d      	ldr	r5, [r3, #0]
 8006174:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006178:	f00e faf4 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800617c:	4603      	mov	r3, r0
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 800618c:	4632      	mov	r2, r6
 800618e:	2102      	movs	r1, #2
 8006190:	4620      	mov	r0, r4
 8006192:	47a8      	blx	r5
}
 8006194:	bf00      	nop
 8006196:	373c      	adds	r7, #60	; 0x3c
 8006198:	46bd      	mov	sp, r7
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800619c:	08023c34 	.word	0x08023c34
 80061a0:	08023c38 	.word	0x08023c38
 80061a4:	08023c4c 	.word	0x08023c4c
 80061a8:	080238a4 	.word	0x080238a4
 80061ac:	08023c54 	.word	0x08023c54
 80061b0:	08023890 	.word	0x08023890
 80061b4:	08023904 	.word	0x08023904
 80061b8:	08023e90 	.word	0x08023e90

080061bc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe ff5c 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80061cc:	4a03      	ldr	r2, [pc, #12]	; (80061dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	080273fc 	.word	0x080273fc

080061e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	f240 12bd 	movw	r2, #445	; 0x1bd
 80061ec:	4906      	ldr	r1, [pc, #24]	; (8006208 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 80061ee:	2004      	movs	r0, #4
 80061f0:	f004 fb02 	bl	800a7f8 <_ZnwjPKci>
 80061f4:	4604      	mov	r4, r0
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff ffe0 	bl	80061bc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80061fc:	4623      	mov	r3, r4
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	08023904 	.word	0x08023904

0800620c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4618      	mov	r0, r3
 8006218:	f00c fedc 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 800621c:	4a03      	ldr	r2, [pc, #12]	; (800622c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	08027350 	.word	0x08027350

08006230 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b09b      	sub	sp, #108	; 0x6c
 8006234:	af04      	add	r7, sp, #16
 8006236:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006238:	4a6a      	ldr	r2, [pc, #424]	; (80063e4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006244:	4a68      	ldr	r2, [pc, #416]	; (80063e8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	ca07      	ldmia	r2, {r0, r1, r2}
 800624c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006250:	2300      	movs	r3, #0
 8006252:	657b      	str	r3, [r7, #84]	; 0x54
 8006254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006256:	2b02      	cmp	r3, #2
 8006258:	dc43      	bgt.n	80062e2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800625a:	f107 0320 	add.w	r3, r7, #32
 800625e:	4963      	ldr	r1, [pc, #396]	; (80063ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006260:	4618      	mov	r0, r3
 8006262:	f006 fe8c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006266:	f107 0320 	add.w	r3, r7, #32
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f004 ff5f 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006272:	4604      	mov	r4, r0
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	681d      	ldr	r5, [r3, #0]
 800627a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800627e:	495c      	ldr	r1, [pc, #368]	; (80063f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 8006280:	4618      	mov	r0, r3
 8006282:	f006 fe7c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800628a:	4619      	mov	r1, r3
 800628c:	4620      	mov	r0, r4
 800628e:	47a8      	blx	r5
 8006290:	4604      	mov	r4, r0
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	334c      	adds	r3, #76	; 0x4c
 8006296:	681d      	ldr	r5, [r3, #0]
 8006298:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800629c:	4955      	ldr	r1, [pc, #340]	; (80063f4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f006 fe6d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80062a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80062ac:	4413      	add	r3, r2
 80062ae:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80062b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062b6:	4619      	mov	r1, r3
 80062b8:	4620      	mov	r0, r4
 80062ba:	47a8      	blx	r5
 80062bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062c0:	4618      	mov	r0, r3
 80062c2:	f007 fa14 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80062c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ca:	4618      	mov	r0, r3
 80062cc:	f007 fa0f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80062d0:	f107 0320 	add.w	r3, r7, #32
 80062d4:	4618      	mov	r0, r3
 80062d6:	f007 fa0a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80062da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062dc:	3301      	adds	r3, #1
 80062de:	657b      	str	r3, [r7, #84]	; 0x54
 80062e0:	e7b8      	b.n	8006254 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 80062e6:	f107 0114 	add.w	r1, r7, #20
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	2203      	movs	r2, #3
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fd fdbb 	bl	8003e6c <Command_Process>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 80062fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006300:	2b04      	cmp	r3, #4
 8006302:	d153      	bne.n	80063ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8006304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006306:	2b02      	cmp	r3, #2
 8006308:	dced      	bgt.n	80062e6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800630a:	2300      	movs	r3, #0
 800630c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006316:	4413      	add	r3, r2
 8006318:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800631c:	4618      	mov	r0, r3
 800631e:	f7f9 ff8d 	bl	800023c <strlen>
 8006322:	4603      	mov	r3, r0
 8006324:	461a      	mov	r2, r3
 8006326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006328:	4293      	cmp	r3, r2
 800632a:	da3b      	bge.n	80063a4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800632c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006330:	492e      	ldr	r1, [pc, #184]	; (80063ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006332:	4618      	mov	r0, r3
 8006334:	f006 fe23 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f004 fef6 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006344:	4604      	mov	r4, r0
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	681d      	ldr	r5, [r3, #0]
 800634c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006350:	4929      	ldr	r1, [pc, #164]	; (80063f8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006352:	4618      	mov	r0, r3
 8006354:	f006 fe13 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800635c:	4619      	mov	r1, r3
 800635e:	4620      	mov	r0, r4
 8006360:	47a8      	blx	r5
 8006362:	4602      	mov	r2, r0
 8006364:	6813      	ldr	r3, [r2, #0]
 8006366:	3364      	adds	r3, #100	; 0x64
 8006368:	681c      	ldr	r4, [r3, #0]
 800636a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006372:	440b      	add	r3, r1
 8006374:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8006378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637a:	440b      	add	r3, r1
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	47a0      	blx	r4
 8006384:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006388:	4618      	mov	r0, r3
 800638a:	f007 f9b0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800638e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006392:	4618      	mov	r0, r3
 8006394:	f007 f9ab 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006398:	f7fd fcac 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800639c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800639e:	3301      	adds	r3, #1
 80063a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a2:	e7b4      	b.n	800630e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 80063a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a6:	3301      	adds	r3, #1
 80063a8:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 80063aa:	e79c      	b.n	80062e6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 80063ac:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80063ae:	f00e f9c9 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80063b2:	4604      	mov	r4, r0
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	3338      	adds	r3, #56	; 0x38
 80063b8:	681d      	ldr	r5, [r3, #0]
 80063ba:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 80063be:	f00e f9d1 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80063c2:	4603      	mov	r3, r0
 80063c4:	9302      	str	r3, [sp, #8]
 80063c6:	f240 13e5 	movw	r3, #485	; 0x1e5
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80063d2:	4632      	mov	r2, r6
 80063d4:	2102      	movs	r1, #2
 80063d6:	4620      	mov	r0, r4
 80063d8:	47a8      	blx	r5

}
 80063da:	bf00      	nop
 80063dc:	375c      	adds	r7, #92	; 0x5c
 80063de:	46bd      	mov	sp, r7
 80063e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e2:	bf00      	nop
 80063e4:	08023f50 	.word	0x08023f50
 80063e8:	08023f5c 	.word	0x08023f5c
 80063ec:	08023c34 	.word	0x08023c34
 80063f0:	08023c38 	.word	0x08023c38
 80063f4:	08023c4c 	.word	0x08023c4c
 80063f8:	08023c54 	.word	0x08023c54
 80063fc:	08023904 	.word	0x08023904
 8006400:	08023e90 	.word	0x08023e90

08006404 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fe38 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006414:	4a03      	ldr	r2, [pc, #12]	; (8006424 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	08027330 	.word	0x08027330

08006428 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	f240 12e9 	movw	r2, #489	; 0x1e9
 8006434:	4906      	ldr	r1, [pc, #24]	; (8006450 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006436:	2004      	movs	r0, #4
 8006438:	f004 f9de 	bl	800a7f8 <_ZnwjPKci>
 800643c:	4604      	mov	r4, r0
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff ffe0 	bl	8006404 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006444:	4623      	mov	r3, r4
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bd90      	pop	{r4, r7, pc}
 800644e:	bf00      	nop
 8006450:	08023904 	.word	0x08023904

08006454 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	f00c fdb8 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	08027284 	.word	0x08027284

08006478 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b0b1      	sub	sp, #196	; 0xc4
 800647c:	af04      	add	r7, sp, #16
 800647e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006480:	4a71      	ldr	r2, [pc, #452]	; (8006648 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	4611      	mov	r1, r2
 8006488:	2264      	movs	r2, #100	; 0x64
 800648a:	4618      	mov	r0, r3
 800648c:	f01a fa4e 	bl	802092c <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8006490:	4a6e      	ldr	r2, [pc, #440]	; (800664c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800649a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 800649e:	2300      	movs	r3, #0
 80064a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	dc46      	bgt.n	800653a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80064ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80064b0:	4967      	ldr	r1, [pc, #412]	; (8006650 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80064b2:	4618      	mov	r0, r3
 80064b4:	f006 fd63 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80064b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f004 fe36 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064c4:	4604      	mov	r4, r0
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	330c      	adds	r3, #12
 80064ca:	681d      	ldr	r5, [r3, #0]
 80064cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064d0:	4960      	ldr	r1, [pc, #384]	; (8006654 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80064d2:	4618      	mov	r0, r3
 80064d4:	f006 fd53 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80064d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064dc:	4619      	mov	r1, r3
 80064de:	4620      	mov	r0, r4
 80064e0:	47a8      	blx	r5
 80064e2:	4604      	mov	r4, r0
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	334c      	adds	r3, #76	; 0x4c
 80064e8:	681d      	ldr	r5, [r3, #0]
 80064ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064ee:	495a      	ldr	r1, [pc, #360]	; (8006658 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 80064f0:	4618      	mov	r0, r3
 80064f2:	f006 fd44 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80064f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006500:	4413      	add	r3, r2
 8006502:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006506:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800650a:	4619      	mov	r1, r3
 800650c:	4620      	mov	r0, r4
 800650e:	47a8      	blx	r5
 8006510:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006514:	4618      	mov	r0, r3
 8006516:	f007 f8ea 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800651a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800651e:	4618      	mov	r0, r3
 8006520:	f007 f8e5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006524:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006528:	4618      	mov	r0, r3
 800652a:	f007 f8e0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 800652e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006532:	3301      	adds	r3, #1
 8006534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006538:	e7b4      	b.n	80064a4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006540:	4946      	ldr	r1, [pc, #280]	; (800665c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006542:	4847      	ldr	r0, [pc, #284]	; (8006660 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8006544:	f7fd fd1c 	bl	8003f80 <Connect_TCP_Server>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 800654e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006552:	2b04      	cmp	r3, #4
 8006554:	d15d      	bne.n	8006612 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800655a:	2b02      	cmp	r3, #2
 800655c:	dcf0      	bgt.n	8006540 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800655e:	2300      	movs	r3, #0
 8006560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006564:	f107 0214 	add.w	r2, r7, #20
 8006568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800656c:	2132      	movs	r1, #50	; 0x32
 800656e:	fb01 f303 	mul.w	r3, r1, r3
 8006572:	4413      	add	r3, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7f9 fe61 	bl	800023c <strlen>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006582:	4293      	cmp	r3, r2
 8006584:	da3f      	bge.n	8006606 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006586:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800658a:	4931      	ldr	r1, [pc, #196]	; (8006650 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 800658c:	4618      	mov	r0, r3
 800658e:	f006 fcf6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006592:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f004 fdc9 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800659e:	4604      	mov	r4, r0
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065aa:	492e      	ldr	r1, [pc, #184]	; (8006664 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80065ac:	4618      	mov	r0, r3
 80065ae:	f006 fce6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80065b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065b6:	4619      	mov	r1, r3
 80065b8:	4620      	mov	r0, r4
 80065ba:	47a8      	blx	r5
 80065bc:	4603      	mov	r3, r0
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	3264      	adds	r2, #100	; 0x64
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80065c8:	2032      	movs	r0, #50	; 0x32
 80065ca:	fb00 f101 	mul.w	r1, r0, r1
 80065ce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80065d2:	4408      	add	r0, r1
 80065d4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065d8:	4401      	add	r1, r0
 80065da:	399c      	subs	r1, #156	; 0x9c
 80065dc:	7809      	ldrb	r1, [r1, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	4790      	blx	r2
 80065e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065e6:	4618      	mov	r0, r3
 80065e8:	f007 f881 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80065ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80065f0:	4618      	mov	r0, r3
 80065f2:	f007 f87c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80065f6:	f7fd fb7d 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80065fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065fe:	3301      	adds	r3, #1
 8006600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006604:	e7ae      	b.n	8006564 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800660a:	3301      	adds	r3, #1
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006610:	e796      	b.n	8006540 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8006612:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006614:	f00e f896 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8006618:	4604      	mov	r4, r0
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	3338      	adds	r3, #56	; 0x38
 800661e:	681d      	ldr	r5, [r3, #0]
 8006620:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006624:	f00e f89e 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006628:	4603      	mov	r3, r0
 800662a:	9302      	str	r3, [sp, #8]
 800662c:	f240 2311 	movw	r3, #529	; 0x211
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006638:	4632      	mov	r2, r6
 800663a:	2102      	movs	r1, #2
 800663c:	4620      	mov	r0, r4
 800663e:	47a8      	blx	r5

}
 8006640:	bf00      	nop
 8006642:	37b4      	adds	r7, #180	; 0xb4
 8006644:	46bd      	mov	sp, r7
 8006646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006648:	08023f78 	.word	0x08023f78
 800664c:	08023fdc 	.word	0x08023fdc
 8006650:	08023c34 	.word	0x08023c34
 8006654:	08023c38 	.word	0x08023c38
 8006658:	08023c4c 	.word	0x08023c4c
 800665c:	08023f68 	.word	0x08023f68
 8006660:	08023f6c 	.word	0x08023f6c
 8006664:	08023c54 	.word	0x08023c54
 8006668:	08023904 	.word	0x08023904
 800666c:	08023e90 	.word	0x08023e90

08006670 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fd02 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006680:	4a03      	ldr	r2, [pc, #12]	; (8006690 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	08027264 	.word	0x08027264

08006694 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006694:	b590      	push	{r4, r7, lr}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	f240 2215 	movw	r2, #533	; 0x215
 80066a0:	4906      	ldr	r1, [pc, #24]	; (80066bc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 80066a2:	2004      	movs	r0, #4
 80066a4:	f004 f8a8 	bl	800a7f8 <_ZnwjPKci>
 80066a8:	4604      	mov	r4, r0
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff ffe0 	bl	8006670 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 80066b0:	4623      	mov	r3, r4
 80066b2:	4618      	mov	r0, r3
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	bf00      	nop
 80066bc:	08023904 	.word	0x08023904

080066c0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f00c fc82 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80066d0:	4a03      	ldr	r2, [pc, #12]	; (80066e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	080271b8 	.word	0x080271b8

080066e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 80066e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e6:	b091      	sub	sp, #68	; 0x44
 80066e8:	af04      	add	r7, sp, #16
 80066ea:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 80066ec:	4a33      	ldr	r2, [pc, #204]	; (80067bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 80066ee:	f107 030c 	add.w	r3, r7, #12
 80066f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066f6:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 80066fa:	f107 0314 	add.w	r3, r7, #20
 80066fe:	4930      	ldr	r1, [pc, #192]	; (80067c0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8006700:	4618      	mov	r0, r3
 8006702:	f006 fc3c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006706:	f107 0314 	add.w	r3, r7, #20
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f004 fd0f 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006712:	4604      	mov	r4, r0
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	f107 031c 	add.w	r3, r7, #28
 800671e:	4929      	ldr	r1, [pc, #164]	; (80067c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006720:	4618      	mov	r0, r3
 8006722:	f006 fc2c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006726:	f107 031c 	add.w	r3, r7, #28
 800672a:	4619      	mov	r1, r3
 800672c:	4620      	mov	r0, r4
 800672e:	47a8      	blx	r5
 8006730:	4604      	mov	r4, r0
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	334c      	adds	r3, #76	; 0x4c
 8006736:	681d      	ldr	r5, [r3, #0]
 8006738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673c:	4922      	ldr	r1, [pc, #136]	; (80067c8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 800673e:	4618      	mov	r0, r3
 8006740:	f006 fc1d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674a:	4619      	mov	r1, r3
 800674c:	4620      	mov	r0, r4
 800674e:	47a8      	blx	r5
 8006750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f006 ffca 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800675a:	f107 031c 	add.w	r3, r7, #28
 800675e:	4618      	mov	r0, r3
 8006760:	f006 ffc5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006764:	f107 0314 	add.w	r3, r7, #20
 8006768:	4618      	mov	r0, r3
 800676a:	f006 ffc0 	bl	800d6ee <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800676e:	4917      	ldr	r1, [pc, #92]	; (80067cc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006770:	4817      	ldr	r0, [pc, #92]	; (80067d0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 8006772:	f7fd fc05 	bl	8003f80 <Connect_TCP_Server>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 800677c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006780:	2b04      	cmp	r3, #4
 8006782:	d100      	bne.n	8006786 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006784:	e7f3      	b.n	800676e <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 8006786:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006788:	f00d ffdc 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800678c:	4604      	mov	r4, r0
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	3338      	adds	r3, #56	; 0x38
 8006792:	681d      	ldr	r5, [r3, #0]
 8006794:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006798:	f00d ffe4 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800679c:	4603      	mov	r3, r0
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	f44f 730b 	mov.w	r3, #556	; 0x22c
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 80067ac:	4632      	mov	r2, r6
 80067ae:	2101      	movs	r1, #1
 80067b0:	4620      	mov	r0, r4
 80067b2:	47a8      	blx	r5

}
 80067b4:	bf00      	nop
 80067b6:	3734      	adds	r7, #52	; 0x34
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067bc:	08023fdc 	.word	0x08023fdc
 80067c0:	08023c34 	.word	0x08023c34
 80067c4:	08023c38 	.word	0x08023c38
 80067c8:	08023c4c 	.word	0x08023c4c
 80067cc:	08023f68 	.word	0x08023f68
 80067d0:	08023f6c 	.word	0x08023f6c
 80067d4:	08023904 	.word	0x08023904
 80067d8:	08023d08 	.word	0x08023d08

080067dc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fc4c 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067ec:	4a03      	ldr	r2, [pc, #12]	; (80067fc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	08027198 	.word	0x08027198

08006800 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006800:	b590      	push	{r4, r7, lr}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	f44f 720c 	mov.w	r2, #560	; 0x230
 800680c:	4906      	ldr	r1, [pc, #24]	; (8006828 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800680e:	2004      	movs	r0, #4
 8006810:	f003 fff2 	bl	800a7f8 <_ZnwjPKci>
 8006814:	4604      	mov	r4, r0
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff ffe0 	bl	80067dc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 800681c:	4623      	mov	r3, r4
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	bd90      	pop	{r4, r7, pc}
 8006826:	bf00      	nop
 8006828:	08023904 	.word	0x08023904

0800682c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	f00c fbcc 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 800683c:	4a03      	ldr	r2, [pc, #12]	; (800684c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	080270ec 	.word	0x080270ec

08006850 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006852:	b0b1      	sub	sp, #196	; 0xc4
 8006854:	af04      	add	r7, sp, #16
 8006856:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006858:	4a71      	ldr	r2, [pc, #452]	; (8006a20 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 800685a:	f107 0314 	add.w	r3, r7, #20
 800685e:	4611      	mov	r1, r2
 8006860:	2264      	movs	r2, #100	; 0x64
 8006862:	4618      	mov	r0, r3
 8006864:	f01a f862 	bl	802092c <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006868:	4a6e      	ldr	r2, [pc, #440]	; (8006a24 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 800686a:	f107 030c 	add.w	r3, r7, #12
 800686e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006872:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800687c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006880:	2b01      	cmp	r3, #1
 8006882:	dc46      	bgt.n	8006912 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006884:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006888:	4967      	ldr	r1, [pc, #412]	; (8006a28 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 800688a:	4618      	mov	r0, r3
 800688c:	f006 fb77 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006890:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f004 fc4a 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800689c:	4604      	mov	r4, r0
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	681d      	ldr	r5, [r3, #0]
 80068a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068a8:	4960      	ldr	r1, [pc, #384]	; (8006a2c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 80068aa:	4618      	mov	r0, r3
 80068ac:	f006 fb67 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80068b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068b4:	4619      	mov	r1, r3
 80068b6:	4620      	mov	r0, r4
 80068b8:	47a8      	blx	r5
 80068ba:	4604      	mov	r4, r0
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	334c      	adds	r3, #76	; 0x4c
 80068c0:	681d      	ldr	r5, [r3, #0]
 80068c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80068c6:	495a      	ldr	r1, [pc, #360]	; (8006a30 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 80068c8:	4618      	mov	r0, r3
 80068ca:	f006 fb58 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80068ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80068d8:	4413      	add	r3, r2
 80068da:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80068de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80068e2:	4619      	mov	r1, r3
 80068e4:	4620      	mov	r0, r4
 80068e6:	47a8      	blx	r5
 80068e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80068ec:	4618      	mov	r0, r3
 80068ee:	f006 fefe 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80068f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068f6:	4618      	mov	r0, r3
 80068f8:	f006 fef9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80068fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006900:	4618      	mov	r0, r3
 8006902:	f006 fef4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800690a:	3301      	adds	r3, #1
 800690c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006910:	e7b4      	b.n	800687c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006918:	4946      	ldr	r1, [pc, #280]	; (8006a34 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 800691a:	4847      	ldr	r0, [pc, #284]	; (8006a38 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 800691c:	f7fd fb30 	bl	8003f80 <Connect_TCP_Server>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006926:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800692a:	2b04      	cmp	r3, #4
 800692c:	d15d      	bne.n	80069ea <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 800692e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006932:	2b02      	cmp	r3, #2
 8006934:	dcf0      	bgt.n	8006918 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006936:	2300      	movs	r3, #0
 8006938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800693c:	f107 0214 	add.w	r2, r7, #20
 8006940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006944:	2132      	movs	r1, #50	; 0x32
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7f9 fc75 	bl	800023c <strlen>
 8006952:	4603      	mov	r3, r0
 8006954:	461a      	mov	r2, r3
 8006956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800695a:	4293      	cmp	r3, r2
 800695c:	da3f      	bge.n	80069de <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800695e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006962:	4931      	ldr	r1, [pc, #196]	; (8006a28 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006964:	4618      	mov	r0, r3
 8006966:	f006 fb0a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800696a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f004 fbdd 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006976:	4604      	mov	r4, r0
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006982:	492e      	ldr	r1, [pc, #184]	; (8006a3c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006984:	4618      	mov	r0, r3
 8006986:	f006 fafa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800698a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800698e:	4619      	mov	r1, r3
 8006990:	4620      	mov	r0, r4
 8006992:	47a8      	blx	r5
 8006994:	4603      	mov	r3, r0
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	3264      	adds	r2, #100	; 0x64
 800699a:	6812      	ldr	r2, [r2, #0]
 800699c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80069a0:	2032      	movs	r0, #50	; 0x32
 80069a2:	fb00 f101 	mul.w	r1, r0, r1
 80069a6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80069aa:	4408      	add	r0, r1
 80069ac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069b0:	4401      	add	r1, r0
 80069b2:	399c      	subs	r1, #156	; 0x9c
 80069b4:	7809      	ldrb	r1, [r1, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	4790      	blx	r2
 80069ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80069be:	4618      	mov	r0, r3
 80069c0:	f006 fe95 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80069c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80069c8:	4618      	mov	r0, r3
 80069ca:	f006 fe90 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80069ce:	f7fd f991 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80069d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069d6:	3301      	adds	r3, #1
 80069d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069dc:	e7ae      	b.n	800693c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 80069de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069e2:	3301      	adds	r3, #1
 80069e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 80069e8:	e796      	b.n	8006918 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 80069ea:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80069ec:	f00d feaa 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80069f0:	4604      	mov	r4, r0
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	3338      	adds	r3, #56	; 0x38
 80069f6:	681d      	ldr	r5, [r3, #0]
 80069f8:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 80069fc:	f00d feb2 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006a00:	4603      	mov	r3, r0
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006a10:	4632      	mov	r2, r6
 8006a12:	2103      	movs	r1, #3
 8006a14:	4620      	mov	r0, r4
 8006a16:	47a8      	blx	r5

}
 8006a18:	bf00      	nop
 8006a1a:	37b4      	adds	r7, #180	; 0xb4
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a20:	08023fe4 	.word	0x08023fe4
 8006a24:	08023fdc 	.word	0x08023fdc
 8006a28:	08023c34 	.word	0x08023c34
 8006a2c:	08023c38 	.word	0x08023c38
 8006a30:	08023c4c 	.word	0x08023c4c
 8006a34:	08023f68 	.word	0x08023f68
 8006a38:	08023f6c 	.word	0x08023f6c
 8006a3c:	08023c54 	.word	0x08023c54
 8006a40:	08023904 	.word	0x08023904
 8006a44:	08023d34 	.word	0x08023d34

08006a48 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fb16 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006a58:	4a03      	ldr	r2, [pc, #12]	; (8006a68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	080270cc 	.word	0x080270cc

08006a6c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8006a78:	4906      	ldr	r1, [pc, #24]	; (8006a94 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006a7a:	2004      	movs	r0, #4
 8006a7c:	f003 febc 	bl	800a7f8 <_ZnwjPKci>
 8006a80:	4604      	mov	r4, r0
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff ffe0 	bl	8006a48 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006a88:	4623      	mov	r3, r4
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd90      	pop	{r4, r7, pc}
 8006a92:	bf00      	nop
 8006a94:	08023904 	.word	0x08023904

08006a98 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f00c fa96 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8006aa8:	4a03      	ldr	r2, [pc, #12]	; (8006ab8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	08027020 	.word	0x08027020

08006abc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006abe:	b093      	sub	sp, #76	; 0x4c
 8006ac0:	af04      	add	r7, sp, #16
 8006ac2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	494a      	ldr	r1, [pc, #296]	; (8006bf4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f006 fa57 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f004 fb2a 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006adc:	4604      	mov	r4, r0
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	681d      	ldr	r5, [r3, #0]
 8006ae4:	f107 0310 	add.w	r3, r7, #16
 8006ae8:	4943      	ldr	r1, [pc, #268]	; (8006bf8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006aea:	4618      	mov	r0, r3
 8006aec:	f006 fa47 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006af0:	f107 0310 	add.w	r3, r7, #16
 8006af4:	4619      	mov	r1, r3
 8006af6:	4620      	mov	r0, r4
 8006af8:	47a8      	blx	r5
 8006afa:	4604      	mov	r4, r0
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	334c      	adds	r3, #76	; 0x4c
 8006b00:	681d      	ldr	r5, [r3, #0]
 8006b02:	f107 0318 	add.w	r3, r7, #24
 8006b06:	493d      	ldr	r1, [pc, #244]	; (8006bfc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f006 fa38 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006b0e:	f107 0318 	add.w	r3, r7, #24
 8006b12:	4a3b      	ldr	r2, [pc, #236]	; (8006c00 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006b14:	4619      	mov	r1, r3
 8006b16:	4620      	mov	r0, r4
 8006b18:	47a8      	blx	r5
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f006 fde5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006b24:	f107 0310 	add.w	r3, r7, #16
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f006 fde0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006b2e:	f107 0308 	add.w	r3, r7, #8
 8006b32:	4618      	mov	r0, r3
 8006b34:	f006 fddb 	bl	800d6ee <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006b38:	f7fd fa5e 	bl	8003ff8 <Disconnect_TCP_Server>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006b42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d139      	bne.n	8006bbe <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	dcf1      	bgt.n	8006b38 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006b54:	f107 0320 	add.w	r3, r7, #32
 8006b58:	4926      	ldr	r1, [pc, #152]	; (8006bf4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f006 fa0f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006b60:	f107 0320 	add.w	r3, r7, #32
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f004 fae2 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	330c      	adds	r3, #12
 8006b72:	681d      	ldr	r5, [r3, #0]
 8006b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b78:	4922      	ldr	r1, [pc, #136]	; (8006c04 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f006 f9ff 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b84:	4619      	mov	r1, r3
 8006b86:	4620      	mov	r0, r4
 8006b88:	47a8      	blx	r5
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	3264      	adds	r2, #100	; 0x64
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	481d      	ldr	r0, [pc, #116]	; (8006c08 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006b94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b96:	4401      	add	r1, r0
 8006b98:	7809      	ldrb	r1, [r1, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	4790      	blx	r2
 8006b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f006 fda3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006ba8:	f107 0320 	add.w	r3, r7, #32
 8006bac:	4618      	mov	r0, r3
 8006bae:	f006 fd9e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006bb2:	f7fd f89f 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	3301      	adds	r3, #1
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	e7c7      	b.n	8006b4e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006bbe:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006bc0:	f00d fdc0 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	3338      	adds	r3, #56	; 0x38
 8006bca:	681d      	ldr	r5, [r3, #0]
 8006bcc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006bd0:	f00d fdc8 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	9302      	str	r3, [sp, #8]
 8006bd8:	f240 2371 	movw	r3, #625	; 0x271
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006be4:	4632      	mov	r2, r6
 8006be6:	2102      	movs	r1, #2
 8006be8:	4620      	mov	r0, r4
 8006bea:	47a8      	blx	r5

}
 8006bec:	bf00      	nop
 8006bee:	373c      	adds	r7, #60	; 0x3c
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf4:	08023c34 	.word	0x08023c34
 8006bf8:	08023c38 	.word	0x08023c38
 8006bfc:	08023c4c 	.word	0x08023c4c
 8006c00:	08024048 	.word	0x08024048
 8006c04:	08023c54 	.word	0x08023c54
 8006c08:	08023890 	.word	0x08023890
 8006c0c:	08023904 	.word	0x08023904
 8006c10:	08023e90 	.word	0x08023e90

08006c14 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fa30 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006c24:	4a03      	ldr	r2, [pc, #12]	; (8006c34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08027000 	.word	0x08027000

08006c38 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	f240 2275 	movw	r2, #629	; 0x275
 8006c44:	4906      	ldr	r1, [pc, #24]	; (8006c60 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006c46:	2004      	movs	r0, #4
 8006c48:	f003 fdd6 	bl	800a7f8 <_ZnwjPKci>
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7ff ffe0 	bl	8006c14 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006c54:	4623      	mov	r3, r4
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd90      	pop	{r4, r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	08023904 	.word	0x08023904

08006c64 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f00c f9b0 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8006c74:	4a03      	ldr	r2, [pc, #12]	; (8006c84 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08026f54 	.word	0x08026f54

08006c88 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c8a:	b0b3      	sub	sp, #204	; 0xcc
 8006c8c:	af04      	add	r7, sp, #16
 8006c8e:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006c96:	4a7f      	ldr	r2, [pc, #508]	; (8006e94 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006c98:	f107 0308 	add.w	r3, r7, #8
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	2264      	movs	r2, #100	; 0x64
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f019 fe43 	bl	802092c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006ca6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006caa:	497b      	ldr	r1, [pc, #492]	; (8006e98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006cac:	4618      	mov	r0, r3
 8006cae:	f006 f966 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006cb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f004 fa39 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	681d      	ldr	r5, [r3, #0]
 8006cc6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cca:	4974      	ldr	r1, [pc, #464]	; (8006e9c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f006 f956 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006cd2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4620      	mov	r0, r4
 8006cda:	47a8      	blx	r5
 8006cdc:	4604      	mov	r4, r0
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	334c      	adds	r3, #76	; 0x4c
 8006ce2:	681d      	ldr	r5, [r3, #0]
 8006ce4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006ce8:	496d      	ldr	r1, [pc, #436]	; (8006ea0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006cea:	4618      	mov	r0, r3
 8006cec:	f006 f947 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006cf0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006cf4:	4a6b      	ldr	r2, [pc, #428]	; (8006ea4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	47a8      	blx	r5
 8006cfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d00:	4618      	mov	r0, r3
 8006d02:	f006 fcf4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006d06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f006 fcef 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006d10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d14:	4618      	mov	r0, r3
 8006d16:	f006 fcea 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006d1a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d1e:	495e      	ldr	r1, [pc, #376]	; (8006e98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006d20:	4618      	mov	r0, r3
 8006d22:	f006 f92c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006d26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f004 f9ff 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d32:	4604      	mov	r4, r0
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	681d      	ldr	r5, [r3, #0]
 8006d3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d3e:	4957      	ldr	r1, [pc, #348]	; (8006e9c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006d40:	4618      	mov	r0, r3
 8006d42:	f006 f91c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006d46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	47a8      	blx	r5
 8006d50:	4604      	mov	r4, r0
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	334c      	adds	r3, #76	; 0x4c
 8006d56:	681d      	ldr	r5, [r3, #0]
 8006d58:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d5c:	4950      	ldr	r1, [pc, #320]	; (8006ea0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f006 f90d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006d64:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d68:	4a4f      	ldr	r2, [pc, #316]	; (8006ea8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	47a8      	blx	r5
 8006d70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d74:	4618      	mov	r0, r3
 8006d76:	f006 fcba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006d7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f006 fcb5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006d84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f006 fcb0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006d8e:	4846      	ldr	r0, [pc, #280]	; (8006ea8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006d90:	f7fd f94e 	bl	8004030 <Send_TCP_Message>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006d9a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d15d      	bne.n	8006e5e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 8006da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	dcf1      	bgt.n	8006d8e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db0:	f107 0208 	add.w	r2, r7, #8
 8006db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006db8:	2132      	movs	r1, #50	; 0x32
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7f9 fa3b 	bl	800023c <strlen>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	da3f      	bge.n	8006e52 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006dd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006dd6:	4930      	ldr	r1, [pc, #192]	; (8006e98 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f006 f8d0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006dde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f004 f9a3 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006dea:	4604      	mov	r4, r0
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006df6:	492d      	ldr	r1, [pc, #180]	; (8006eac <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f006 f8c0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006dfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4620      	mov	r0, r4
 8006e06:	47a8      	blx	r5
 8006e08:	4603      	mov	r3, r0
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	3264      	adds	r2, #100	; 0x64
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006e14:	2032      	movs	r0, #50	; 0x32
 8006e16:	fb00 f101 	mul.w	r1, r0, r1
 8006e1a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006e1e:	4408      	add	r0, r1
 8006e20:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006e24:	4401      	add	r1, r0
 8006e26:	39b0      	subs	r1, #176	; 0xb0
 8006e28:	7809      	ldrb	r1, [r1, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	4790      	blx	r2
 8006e2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f006 fc5b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006e38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f006 fc56 	bl	800d6ee <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006e42:	f7fc ff57 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e50:	e7ae      	b.n	8006db0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 8006e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006e5c:	e797      	b.n	8006d8e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 8006e5e:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8006e60:	f00d fc70 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8006e64:	4604      	mov	r4, r0
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	3338      	adds	r3, #56	; 0x38
 8006e6a:	681d      	ldr	r5, [r3, #0]
 8006e6c:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006e70:	f00d fc78 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006e74:	4603      	mov	r3, r0
 8006e76:	9302      	str	r3, [sp, #8]
 8006e78:	f240 2396 	movw	r3, #662	; 0x296
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006e84:	4632      	mov	r2, r6
 8006e86:	2102      	movs	r1, #2
 8006e88:	4620      	mov	r0, r4
 8006e8a:	47a8      	blx	r5

}
 8006e8c:	bf00      	nop
 8006e8e:	37bc      	adds	r7, #188	; 0xbc
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e94:	08024068 	.word	0x08024068
 8006e98:	08023c34 	.word	0x08023c34
 8006e9c:	08023c38 	.word	0x08023c38
 8006ea0:	08023c4c 	.word	0x08023c4c
 8006ea4:	08024058 	.word	0x08024058
 8006ea8:	08023b44 	.word	0x08023b44
 8006eac:	08023c54 	.word	0x08023c54
 8006eb0:	08023904 	.word	0x08023904
 8006eb4:	08023e90 	.word	0x08023e90

08006eb8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe f8de 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006ec8:	4a03      	ldr	r2, [pc, #12]	; (8006ed8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	08026f34 	.word	0x08026f34

08006edc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	f240 229a 	movw	r2, #666	; 0x29a
 8006ee8:	4906      	ldr	r1, [pc, #24]	; (8006f04 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006eea:	2004      	movs	r0, #4
 8006eec:	f003 fc84 	bl	800a7f8 <_ZnwjPKci>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff ffe0 	bl	8006eb8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8006ef8:	4623      	mov	r3, r4
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd90      	pop	{r4, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	08023904 	.word	0x08023904

08006f08 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f00c f85e 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 8006f18:	4a03      	ldr	r2, [pc, #12]	; (8006f28 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	08026e88 	.word	0x08026e88

08006f2c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 8006f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2e:	b0a3      	sub	sp, #140	; 0x8c
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8006f34:	4b49      	ldr	r3, [pc, #292]	; (800705c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8006f36:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	f107 0310 	add.w	r3, r7, #16
 8006f5e:	222e      	movs	r2, #46	; 0x2e
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f019 fcf0 	bl	8020948 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	677b      	str	r3, [r7, #116]	; 0x74
 8006f6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7f9 f963 	bl	800023c <strlen>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	da35      	bge.n	8006fec <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8006f80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f84:	4936      	ldr	r1, [pc, #216]	; (8007060 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 8006f86:	4618      	mov	r0, r3
 8006f88:	f005 fff9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006f8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f004 f8cc 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	681d      	ldr	r5, [r3, #0]
 8006fa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fa4:	492f      	ldr	r1, [pc, #188]	; (8007064 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f005 ffe9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8006fac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	47a8      	blx	r5
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	3264      	adds	r2, #100	; 0x64
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006fc2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006fc4:	4401      	add	r1, r0
 8006fc6:	7809      	ldrb	r1, [r1, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	4790      	blx	r2
 8006fcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f006 fb8c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8006fd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f006 fb87 	bl	800d6ee <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8006fe0:	f7fc fe88 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8006fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	677b      	str	r3, [r7, #116]	; 0x74
 8006fea:	e7bf      	b.n	8006f6c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 8006fec:	f107 030c 	add.w	r3, r7, #12
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fd f855 	bl	80040a0 <Read_TCP_Message>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 8006ffc:	f00d fba2 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8007000:	4604      	mov	r4, r0
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	3338      	adds	r3, #56	; 0x38
 8007006:	681d      	ldr	r5, [r3, #0]
 8007008:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800700c:	f00d fbaa 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007010:	4603      	mov	r3, r0
 8007012:	9302      	str	r3, [sp, #8]
 8007014:	f240 23aa 	movw	r3, #682	; 0x2aa
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4b13      	ldr	r3, [pc, #76]	; (800706c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007020:	4632      	mov	r2, r6
 8007022:	2102      	movs	r1, #2
 8007024:	4620      	mov	r0, r4
 8007026:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007028:	f00d fb8c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800702c:	4604      	mov	r4, r0
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	3324      	adds	r3, #36	; 0x24
 8007032:	681d      	ldr	r5, [r3, #0]
 8007034:	f00d fb96 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007038:	4603      	mov	r3, r0
 800703a:	f107 020c 	add.w	r2, r7, #12
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	4908      	ldr	r1, [pc, #32]	; (8007070 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800704e:	4620      	mov	r0, r4
 8007050:	47a8      	blx	r5

}
 8007052:	bf00      	nop
 8007054:	377c      	adds	r7, #124	; 0x7c
 8007056:	46bd      	mov	sp, r7
 8007058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705a:	bf00      	nop
 800705c:	080240fc 	.word	0x080240fc
 8007060:	08023c34 	.word	0x08023c34
 8007064:	08023c54 	.word	0x08023c54
 8007068:	08023904 	.word	0x08023904
 800706c:	080240cc 	.word	0x080240cc
 8007070:	08023b44 	.word	0x08023b44

08007074 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe f800 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007084:	4a03      	ldr	r2, [pc, #12]	; (8007094 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08026e68 	.word	0x08026e68

08007098 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80070a4:	4906      	ldr	r1, [pc, #24]	; (80070c0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80070a6:	2004      	movs	r0, #4
 80070a8:	f003 fba6 	bl	800a7f8 <_ZnwjPKci>
 80070ac:	4604      	mov	r4, r0
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff ffe0 	bl	8007074 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80070b4:	4623      	mov	r3, r4
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}
 80070be:	bf00      	nop
 80070c0:	08023904 	.word	0x08023904

080070c4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f00b ff80 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80070d4:	4a03      	ldr	r2, [pc, #12]	; (80070e4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	08026dbc 	.word	0x08026dbc

080070e8 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 80070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ea:	b095      	sub	sp, #84	; 0x54
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	222e      	movs	r2, #46	; 0x2e
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f019 fc20 	bl	8020948 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007110:	4618      	mov	r0, r3
 8007112:	f7fd f829 	bl	8004168 <Wait_TCP_Message>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800711c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007120:	2b04      	cmp	r3, #4
 8007122:	d100      	bne.n	8007126 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007124:	e7f0      	b.n	8007108 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007126:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007128:	f00d fb0c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800712c:	4604      	mov	r4, r0
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	3338      	adds	r3, #56	; 0x38
 8007132:	681d      	ldr	r5, [r3, #0]
 8007134:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007138:	f00d fb14 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800713c:	4603      	mov	r3, r0
 800713e:	9302      	str	r3, [sp, #8]
 8007140:	f240 23bd 	movw	r3, #701	; 0x2bd
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 800714c:	4632      	mov	r2, r6
 800714e:	2101      	movs	r1, #1
 8007150:	4620      	mov	r0, r4
 8007152:	47a8      	blx	r5

}
 8007154:	bf00      	nop
 8007156:	3744      	adds	r7, #68	; 0x44
 8007158:	46bd      	mov	sp, r7
 800715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715c:	08023904 	.word	0x08023904
 8007160:	08023c98 	.word	0x08023c98

08007164 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fd ff88 	bl	8005084 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007174:	4a03      	ldr	r2, [pc, #12]	; (8007184 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	08026d9c 	.word	0x08026d9c

08007188 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	f240 22c1 	movw	r2, #705	; 0x2c1
 8007194:	4906      	ldr	r1, [pc, #24]	; (80071b0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007196:	2004      	movs	r0, #4
 8007198:	f003 fb2e 	bl	800a7f8 <_ZnwjPKci>
 800719c:	4604      	mov	r4, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff ffe0 	bl	8007164 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 80071a4:	4623      	mov	r3, r4
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}
 80071ae:	bf00      	nop
 80071b0:	08023904 	.word	0x08023904

080071b4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4618      	mov	r0, r3
 80071c0:	f00b ff08 	bl	8012fd4 <_ZN10UtestShellC1Ev>
 80071c4:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	08026cf0 	.word	0x08026cf0

080071d8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	b0a3      	sub	sp, #140	; 0x8c
 80071dc:	af04      	add	r7, sp, #16
 80071de:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 80071e0:	4b4d      	ldr	r3, [pc, #308]	; (8007318 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 80071e2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80071e6:	461d      	mov	r5, r3
 80071e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80071f0:	6020      	str	r0, [r4, #0]
 80071f2:	3404      	adds	r4, #4
 80071f4:	8021      	strh	r1, [r4, #0]
 80071f6:	f107 0356 	add.w	r3, r7, #86	; 0x56
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	f107 0310 	add.w	r3, r7, #16
 800720e:	222e      	movs	r2, #46	; 0x2e
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f019 fb98 	bl	8020948 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007220:	4618      	mov	r0, r3
 8007222:	f7fc ffa1 	bl	8004168 <Wait_TCP_Message>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800722c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007230:	2b04      	cmp	r3, #4
 8007232:	d141      	bne.n	80072b8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007234:	2300      	movs	r3, #0
 8007236:	677b      	str	r3, [r7, #116]	; 0x74
 8007238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800723c:	4618      	mov	r0, r3
 800723e:	f7f8 fffd 	bl	800023c <strlen>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007248:	4293      	cmp	r3, r2
 800724a:	dae5      	bge.n	8007218 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800724c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007250:	4932      	ldr	r1, [pc, #200]	; (800731c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007252:	4618      	mov	r0, r3
 8007254:	f005 fe93 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8007258:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f003 ff66 	bl	800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007264:	4604      	mov	r4, r0
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	681d      	ldr	r5, [r3, #0]
 800726c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007270:	492b      	ldr	r1, [pc, #172]	; (8007320 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8007272:	4618      	mov	r0, r3
 8007274:	f005 fe83 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8007278:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800727c:	4619      	mov	r1, r3
 800727e:	4620      	mov	r0, r4
 8007280:	47a8      	blx	r5
 8007282:	4603      	mov	r3, r0
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	3264      	adds	r2, #100	; 0x64
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800728e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007290:	4401      	add	r1, r0
 8007292:	7809      	ldrb	r1, [r1, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	4790      	blx	r2
 8007298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800729c:	4618      	mov	r0, r3
 800729e:	f006 fa26 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80072a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072a6:	4618      	mov	r0, r3
 80072a8:	f006 fa21 	bl	800d6ee <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80072ac:	f7fc fd22 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80072b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072b2:	3301      	adds	r3, #1
 80072b4:	677b      	str	r3, [r7, #116]	; 0x74
 80072b6:	e7bf      	b.n	8007238 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 80072b8:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 80072ba:	f00d fa43 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80072be:	4604      	mov	r4, r0
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	3338      	adds	r3, #56	; 0x38
 80072c4:	681d      	ldr	r5, [r3, #0]
 80072c6:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 80072ca:	f00d fa4b 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072ce:	4603      	mov	r3, r0
 80072d0:	9302      	str	r3, [sp, #8]
 80072d2:	f240 23d7 	movw	r3, #727	; 0x2d7
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	4b12      	ldr	r3, [pc, #72]	; (8007324 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4b12      	ldr	r3, [pc, #72]	; (8007328 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 80072de:	4632      	mov	r2, r6
 80072e0:	2102      	movs	r1, #2
 80072e2:	4620      	mov	r0, r4
 80072e4:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 80072e6:	f00d fa2d 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80072ea:	4604      	mov	r4, r0
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	681d      	ldr	r5, [r3, #0]
 80072f2:	f00d fa37 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f107 020c 	add.w	r2, r7, #12
 80072fc:	9302      	str	r3, [sp, #8]
 80072fe:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	4908      	ldr	r1, [pc, #32]	; (800732c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 800730c:	4620      	mov	r0, r4
 800730e:	47a8      	blx	r5

}
 8007310:	bf00      	nop
 8007312:	377c      	adds	r7, #124	; 0x7c
 8007314:	46bd      	mov	sp, r7
 8007316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007318:	0802412c 	.word	0x0802412c
 800731c:	08023c34 	.word	0x08023c34
 8007320:	08023c54 	.word	0x08023c54
 8007324:	08023904 	.word	0x08023904
 8007328:	080240cc 	.word	0x080240cc
 800732c:	0802411c 	.word	0x0802411c

08007330 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	4a05      	ldr	r2, [pc, #20]	; (8007350 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4618      	mov	r0, r3
 8007342:	f00b fe9b 	bl	801307c <_ZN10UtestShellD1Ev>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	08026cf0 	.word	0x08026cf0

08007354 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ffe7 	bl	8007330 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8007362:	211c      	movs	r1, #28
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f003 fa5b 	bl	800a820 <_ZdlPvj>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	4a05      	ldr	r2, [pc, #20]	; (8007394 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd fe8f 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	08026d9c 	.word	0x08026d9c

08007398 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ffe7 	bl	8007374 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80073a6:	2104      	movs	r1, #4
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f003 fa39 	bl	800a820 <_ZdlPvj>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	4a05      	ldr	r2, [pc, #20]	; (80073d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f00b fe57 	bl	801307c <_ZN10UtestShellD1Ev>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	08026dbc 	.word	0x08026dbc

080073dc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff ffe7 	bl	80073b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 80073ea:	211c      	movs	r1, #28
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f003 fa17 	bl	800a820 <_ZdlPvj>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	4a05      	ldr	r2, [pc, #20]	; (800741c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd fe4b 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	08026e68 	.word	0x08026e68

08007420 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ffe7 	bl	80073fc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 800742e:	2104      	movs	r1, #4
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f003 f9f5 	bl	800a820 <_ZdlPvj>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	4a05      	ldr	r2, [pc, #20]	; (8007460 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f00b fe13 	bl	801307c <_ZN10UtestShellD1Ev>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08026e88 	.word	0x08026e88

08007464 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ffe7 	bl	8007440 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8007472:	211c      	movs	r1, #28
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f003 f9d3 	bl	800a820 <_ZdlPvj>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fe07 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	08026f34 	.word	0x08026f34

080074a8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ffe7 	bl	8007484 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80074b6:	2104      	movs	r1, #4
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f003 f9b1 	bl	800a820 <_ZdlPvj>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	4a05      	ldr	r2, [pc, #20]	; (80074e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	f00b fdcf 	bl	801307c <_ZN10UtestShellD1Ev>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	08026f54 	.word	0x08026f54

080074ec <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ffe7 	bl	80074c8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 80074fa:	211c      	movs	r1, #28
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f003 f98f 	bl	800a820 <_ZdlPvj>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4618      	mov	r0, r3
 800751e:	f7fd fdc3 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	08027000 	.word	0x08027000

08007530 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff ffe7 	bl	800750c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800753e:	2104      	movs	r1, #4
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f003 f96d 	bl	800a820 <_ZdlPvj>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	f00b fd8b 	bl	801307c <_ZN10UtestShellD1Ev>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08027020 	.word	0x08027020

08007574 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ffe7 	bl	8007550 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 8007582:	211c      	movs	r1, #28
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f003 f94b 	bl	800a820 <_ZdlPvj>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fd7f 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	080270cc 	.word	0x080270cc

080075b8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ffe7 	bl	8007594 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80075c6:	2104      	movs	r1, #4
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f003 f929 	bl	800a820 <_ZdlPvj>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f00b fd47 	bl	801307c <_ZN10UtestShellD1Ev>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	080270ec 	.word	0x080270ec

080075fc <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ffe7 	bl	80075d8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800760a:	211c      	movs	r1, #28
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f003 f907 	bl	800a820 <_ZdlPvj>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	4a05      	ldr	r2, [pc, #20]	; (800763c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fd3b 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	08027198 	.word	0x08027198

08007640 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff ffe7 	bl	800761c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 800764e:	2104      	movs	r1, #4
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f003 f8e5 	bl	800a820 <_ZdlPvj>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	4a05      	ldr	r2, [pc, #20]	; (8007680 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4618      	mov	r0, r3
 8007672:	f00b fd03 	bl	801307c <_ZN10UtestShellD1Ev>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	080271b8 	.word	0x080271b8

08007684 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff ffe7 	bl	8007660 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 8007692:	211c      	movs	r1, #28
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f003 f8c3 	bl	800a820 <_ZdlPvj>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd fcf7 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08027264 	.word	0x08027264

080076c8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff ffe7 	bl	80076a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80076d6:	2104      	movs	r1, #4
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f003 f8a1 	bl	800a820 <_ZdlPvj>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4a05      	ldr	r2, [pc, #20]	; (8007708 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f00b fcbf 	bl	801307c <_ZN10UtestShellD1Ev>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08027284 	.word	0x08027284

0800770c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ffe7 	bl	80076e8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 800771a:	211c      	movs	r1, #28
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f003 f87f 	bl	800a820 <_ZdlPvj>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	4a05      	ldr	r2, [pc, #20]	; (800774c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4618      	mov	r0, r3
 800773e:	f7fd fcb3 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08027330 	.word	0x08027330

08007750 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ffe7 	bl	800772c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 800775e:	2104      	movs	r1, #4
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f003 f85d 	bl	800a820 <_ZdlPvj>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	4a05      	ldr	r2, [pc, #20]	; (8007790 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f00b fc7b 	bl	801307c <_ZN10UtestShellD1Ev>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	08027350 	.word	0x08027350

08007794 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ffe7 	bl	8007770 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80077a2:	211c      	movs	r1, #28
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f003 f83b 	bl	800a820 <_ZdlPvj>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	4a05      	ldr	r2, [pc, #20]	; (80077d4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd fc6f 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	080273fc 	.word	0x080273fc

080077d8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ffe7 	bl	80077b4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80077e6:	2104      	movs	r1, #4
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f003 f819 	bl	800a820 <_ZdlPvj>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f00b fc37 	bl	801307c <_ZN10UtestShellD1Ev>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	0802741c 	.word	0x0802741c

0800781c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ffe7 	bl	80077f8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800782a:	211c      	movs	r1, #28
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f002 fff7 	bl	800a820 <_ZdlPvj>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4618      	mov	r0, r3
 800784e:	f7fd fc2b 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	080274c8 	.word	0x080274c8

08007860 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ffe7 	bl	800783c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 800786e:	2104      	movs	r1, #4
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f002 ffd5 	bl	800a820 <_ZdlPvj>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4618      	mov	r0, r3
 8007892:	f00b fbf3 	bl	801307c <_ZN10UtestShellD1Ev>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	080274e8 	.word	0x080274e8

080078a4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff ffe7 	bl	8007880 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80078b2:	211c      	movs	r1, #28
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 ffb3 	bl	800a820 <_ZdlPvj>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fd fbe7 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	08027594 	.word	0x08027594

080078e8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ffe7 	bl	80078c4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 80078f6:	2104      	movs	r1, #4
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 ff91 	bl	800a820 <_ZdlPvj>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	4a05      	ldr	r2, [pc, #20]	; (8007928 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f00b fbaf 	bl	801307c <_ZN10UtestShellD1Ev>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	080275b4 	.word	0x080275b4

0800792c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffe7 	bl	8007908 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 800793a:	211c      	movs	r1, #28
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f002 ff6f 	bl	800a820 <_ZdlPvj>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	4a05      	ldr	r2, [pc, #20]	; (800796c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	f7fd fba3 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	08027660 	.word	0x08027660

08007970 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ffe7 	bl	800794c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800797e:	2104      	movs	r1, #4
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f002 ff4d 	bl	800a820 <_ZdlPvj>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f00b fb6b 	bl	801307c <_ZN10UtestShellD1Ev>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	08027680 	.word	0x08027680

080079b4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ffe7 	bl	8007990 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80079c2:	211c      	movs	r1, #28
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f002 ff2b 	bl	800a820 <_ZdlPvj>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fd fb5f 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	0802772c 	.word	0x0802772c

080079f8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ffe7 	bl	80079d4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007a06:	2104      	movs	r1, #4
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f002 ff09 	bl	800a820 <_ZdlPvj>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f00b fb27 	bl	801307c <_ZN10UtestShellD1Ev>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	0802774c 	.word	0x0802774c

08007a3c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff ffe7 	bl	8007a18 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a4a:	211c      	movs	r1, #28
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f002 fee7 	bl	800a820 <_ZdlPvj>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fd fb1b 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	080277f8 	.word	0x080277f8

08007a80 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ffe7 	bl	8007a5c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007a8e:	2104      	movs	r1, #4
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f002 fec5 	bl	800a820 <_ZdlPvj>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	4a05      	ldr	r2, [pc, #20]	; (8007ac0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f00b fae3 	bl	801307c <_ZN10UtestShellD1Ev>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	08027818 	.word	0x08027818

08007ac4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ffe7 	bl	8007aa0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007ad2:	211c      	movs	r1, #28
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f002 fea3 	bl	800a820 <_ZdlPvj>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd fad7 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	080278c4 	.word	0x080278c4

08007b08 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff ffe7 	bl	8007ae4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007b16:	2104      	movs	r1, #4
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 fe81 	bl	800a820 <_ZdlPvj>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	4a05      	ldr	r2, [pc, #20]	; (8007b48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f00b fa9f 	bl	801307c <_ZN10UtestShellD1Ev>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	080278e4 	.word	0x080278e4

08007b4c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ffe7 	bl	8007b28 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007b5a:	211c      	movs	r1, #28
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f002 fe5f 	bl	800a820 <_ZdlPvj>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	4a05      	ldr	r2, [pc, #20]	; (8007b8c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fd fa93 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08027990 	.word	0x08027990

08007b90 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff ffe7 	bl	8007b6c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f002 fe3d 	bl	800a820 <_ZdlPvj>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f00b fa5b 	bl	801307c <_ZN10UtestShellD1Ev>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	080279b0 	.word	0x080279b0

08007bd4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ffe7 	bl	8007bb0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007be2:	211c      	movs	r1, #28
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f002 fe1b 	bl	800a820 <_ZdlPvj>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	4a05      	ldr	r2, [pc, #20]	; (8007c14 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fd fa4f 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	08027a5c 	.word	0x08027a5c

08007c18 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff ffe7 	bl	8007bf4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007c26:	2104      	movs	r1, #4
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f002 fdf9 	bl	800a820 <_ZdlPvj>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	4a05      	ldr	r2, [pc, #20]	; (8007c58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f00b fa17 	bl	801307c <_ZN10UtestShellD1Ev>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	08027a7c 	.word	0x08027a7c

08007c5c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ffe7 	bl	8007c38 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007c6a:	211c      	movs	r1, #28
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f002 fdd7 	bl	800a820 <_ZdlPvj>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	4a05      	ldr	r2, [pc, #20]	; (8007c9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fd fa0b 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	08027b28 	.word	0x08027b28

08007ca0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ffe7 	bl	8007c7c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007cae:	2104      	movs	r1, #4
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f002 fdb5 	bl	800a820 <_ZdlPvj>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	4a05      	ldr	r2, [pc, #20]	; (8007ce0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f00b f9d3 	bl	801307c <_ZN10UtestShellD1Ev>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	08027b48 	.word	0x08027b48

08007ce4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff ffe7 	bl	8007cc0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007cf2:	211c      	movs	r1, #28
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f002 fd93 	bl	800a820 <_ZdlPvj>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	4a05      	ldr	r2, [pc, #20]	; (8007d24 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd f9c7 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	08027bf4 	.word	0x08027bf4

08007d28 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff ffe7 	bl	8007d04 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007d36:	2104      	movs	r1, #4
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f002 fd71 	bl	800a820 <_ZdlPvj>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	4a05      	ldr	r2, [pc, #20]	; (8007d68 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f00b f98f 	bl	801307c <_ZN10UtestShellD1Ev>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	08027c14 	.word	0x08027c14

08007d6c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff ffe7 	bl	8007d48 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007d7a:	211c      	movs	r1, #28
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f002 fd4f 	bl	800a820 <_ZdlPvj>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	4a05      	ldr	r2, [pc, #20]	; (8007dac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fd f983 	bl	80050a8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	08027cc0 	.word	0x08027cc0

08007db0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff ffe7 	bl	8007d8c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f002 fd2d 	bl	800a820 <_ZdlPvj>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	4a05      	ldr	r2, [pc, #20]	; (8007df0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f00b f94b 	bl	801307c <_ZN10UtestShellD1Ev>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08027d00 	.word	0x08027d00

08007df4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ffe7 	bl	8007dd0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007e02:	211c      	movs	r1, #28
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f002 fd0b 	bl	800a820 <_ZdlPvj>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fc faf7 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08027dac 	.word	0x08027dac

08007e38 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff ffe7 	bl	8007e14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007e46:	2108      	movs	r1, #8
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f002 fce9 	bl	800a820 <_ZdlPvj>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	4a05      	ldr	r2, [pc, #20]	; (8007e78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f00b f907 	bl	801307c <_ZN10UtestShellD1Ev>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	08027dcc 	.word	0x08027dcc

08007e7c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ffe7 	bl	8007e58 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007e8a:	211c      	movs	r1, #28
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f002 fcc7 	bl	800a820 <_ZdlPvj>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	4a05      	ldr	r2, [pc, #20]	; (8007ebc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fc fab3 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	08027e78 	.word	0x08027e78

08007ec0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ffe7 	bl	8007e9c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8007ece:	2108      	movs	r1, #8
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f002 fca5 	bl	800a820 <_ZdlPvj>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f00b f8c3 	bl	801307c <_ZN10UtestShellD1Ev>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	08027e98 	.word	0x08027e98

08007f04 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ffe7 	bl	8007ee0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8007f12:	211c      	movs	r1, #28
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f002 fc83 	bl	800a820 <_ZdlPvj>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	4a05      	ldr	r2, [pc, #20]	; (8007f44 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fc fa6f 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	08027f44 	.word	0x08027f44

08007f48 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ffe7 	bl	8007f24 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8007f56:	2108      	movs	r1, #8
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f002 fc61 	bl	800a820 <_ZdlPvj>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f00b f87f 	bl	801307c <_ZN10UtestShellD1Ev>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	08027f64 	.word	0x08027f64

08007f8c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ffe7 	bl	8007f68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8007f9a:	211c      	movs	r1, #28
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f002 fc3f 	bl	800a820 <_ZdlPvj>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	4a05      	ldr	r2, [pc, #20]	; (8007fcc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fc fa2b 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	08028010 	.word	0x08028010

08007fd0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff ffe7 	bl	8007fac <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8007fde:	2108      	movs	r1, #8
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f002 fc1d 	bl	800a820 <_ZdlPvj>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	4a05      	ldr	r2, [pc, #20]	; (8008010 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f00b f83b 	bl	801307c <_ZN10UtestShellD1Ev>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	08028030 	.word	0x08028030

08008014 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ffe7 	bl	8007ff0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008022:	211c      	movs	r1, #28
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f002 fbfb 	bl	800a820 <_ZdlPvj>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	4a05      	ldr	r2, [pc, #20]	; (8008054 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fc f9e7 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	080280dc 	.word	0x080280dc

08008058 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff ffe7 	bl	8008034 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008066:	2108      	movs	r1, #8
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f002 fbd9 	bl	800a820 <_ZdlPvj>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	4a05      	ldr	r2, [pc, #20]	; (8008098 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	f00a fff7 	bl	801307c <_ZN10UtestShellD1Ev>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	080280fc 	.word	0x080280fc

0800809c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ffe7 	bl	8008078 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80080aa:	211c      	movs	r1, #28
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f002 fbb7 	bl	800a820 <_ZdlPvj>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	4a05      	ldr	r2, [pc, #20]	; (80080dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fc f9a3 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4618      	mov	r0, r3
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	080281a8 	.word	0x080281a8

080080e0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ffe7 	bl	80080bc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 80080ee:	2108      	movs	r1, #8
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f002 fb95 	bl	800a820 <_ZdlPvj>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	4a05      	ldr	r2, [pc, #20]	; (8008120 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	f00a ffb3 	bl	801307c <_ZN10UtestShellD1Ev>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	080281c8 	.word	0x080281c8

08008124 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ffe7 	bl	8008100 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008132:	211c      	movs	r1, #28
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f002 fb73 	bl	800a820 <_ZdlPvj>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	4a05      	ldr	r2, [pc, #20]	; (8008164 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4618      	mov	r0, r3
 8008156:	f7fc f95f 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	08028274 	.word	0x08028274

08008168 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff ffe7 	bl	8008144 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008176:	2108      	movs	r1, #8
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f002 fb51 	bl	800a820 <_ZdlPvj>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	4a05      	ldr	r2, [pc, #20]	; (80081a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4618      	mov	r0, r3
 800819a:	f00a ff6f 	bl	801307c <_ZN10UtestShellD1Ev>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	08028294 	.word	0x08028294

080081ac <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff ffe7 	bl	8008188 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80081ba:	211c      	movs	r1, #28
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f002 fb2f 	bl	800a820 <_ZdlPvj>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	4a05      	ldr	r2, [pc, #20]	; (80081ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fc f91b 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	08028340 	.word	0x08028340

080081f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ffe7 	bl	80081cc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 80081fe:	2108      	movs	r1, #8
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f002 fb0d 	bl	800a820 <_ZdlPvj>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	4a05      	ldr	r2, [pc, #20]	; (8008230 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4618      	mov	r0, r3
 8008222:	f00a ff2b 	bl	801307c <_ZN10UtestShellD1Ev>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	08028360 	.word	0x08028360

08008234 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff ffe7 	bl	8008210 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008242:	211c      	movs	r1, #28
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f002 faeb 	bl	800a820 <_ZdlPvj>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	4a05      	ldr	r2, [pc, #20]	; (8008274 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4618      	mov	r0, r3
 8008266:	f7fc f8d7 	bl	8004418 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	0802840c 	.word	0x0802840c

08008278 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff ffe7 	bl	8008254 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8008286:	2108      	movs	r1, #8
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f002 fac9 	bl	800a820 <_ZdlPvj>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af02      	add	r7, sp, #8
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 8224 	bne.w	80086f2 <_Z41__static_initialization_and_destruction_0ii+0x45a>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082b0:	4293      	cmp	r3, r2
 80082b2:	f040 821e 	bne.w	80086f2 <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 80082b6:	489f      	ldr	r0, [pc, #636]	; (8008534 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80082b8:	f7fc f8fc 	bl	80044b4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80082bc:	2329      	movs	r3, #41	; 0x29
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	4b9d      	ldr	r3, [pc, #628]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4b9d      	ldr	r3, [pc, #628]	; (800853c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80082c6:	4a9e      	ldr	r2, [pc, #632]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80082c8:	499a      	ldr	r1, [pc, #616]	; (8008534 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80082ca:	489e      	ldr	r0, [pc, #632]	; (8008544 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80082cc:	f00c fcd2 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80082d0:	489d      	ldr	r0, [pc, #628]	; (8008548 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80082d2:	f7fc f9a3 	bl	800461c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80082d6:	2333      	movs	r3, #51	; 0x33
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	4b97      	ldr	r3, [pc, #604]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4b9b      	ldr	r3, [pc, #620]	; (800854c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80082e0:	4a97      	ldr	r2, [pc, #604]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80082e2:	4999      	ldr	r1, [pc, #612]	; (8008548 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80082e4:	489a      	ldr	r0, [pc, #616]	; (8008550 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80082e6:	f00c fcc5 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80082ea:	489a      	ldr	r0, [pc, #616]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80082ec:	f7fc fa20 	bl	8004730 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80082f0:	233d      	movs	r3, #61	; 0x3d
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	4b90      	ldr	r3, [pc, #576]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	4b97      	ldr	r3, [pc, #604]	; (8008558 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80082fa:	4a91      	ldr	r2, [pc, #580]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80082fc:	4995      	ldr	r1, [pc, #596]	; (8008554 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80082fe:	4897      	ldr	r0, [pc, #604]	; (800855c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008300:	f00c fcb8 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008304:	4896      	ldr	r0, [pc, #600]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008306:	f7fc fa9b 	bl	8004840 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800830a:	2348      	movs	r3, #72	; 0x48
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	4b8a      	ldr	r3, [pc, #552]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4b94      	ldr	r3, [pc, #592]	; (8008564 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008314:	4a8a      	ldr	r2, [pc, #552]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008316:	4992      	ldr	r1, [pc, #584]	; (8008560 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008318:	4893      	ldr	r0, [pc, #588]	; (8008568 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800831a:	f00c fcab 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800831e:	4893      	ldr	r0, [pc, #588]	; (800856c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008320:	f7fc fafa 	bl	8004918 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008324:	2351      	movs	r3, #81	; 0x51
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	4b83      	ldr	r3, [pc, #524]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	4b90      	ldr	r3, [pc, #576]	; (8008570 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800832e:	4a84      	ldr	r2, [pc, #528]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008330:	498e      	ldr	r1, [pc, #568]	; (800856c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008332:	4890      	ldr	r0, [pc, #576]	; (8008574 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008334:	f00c fc9e 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008338:	488f      	ldr	r0, [pc, #572]	; (8008578 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800833a:	f7fc fb79 	bl	8004a30 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800833e:	2361      	movs	r3, #97	; 0x61
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	4b7d      	ldr	r3, [pc, #500]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4b8d      	ldr	r3, [pc, #564]	; (800857c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008348:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800834a:	498b      	ldr	r1, [pc, #556]	; (8008578 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800834c:	488c      	ldr	r0, [pc, #560]	; (8008580 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800834e:	f00c fc91 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008352:	488c      	ldr	r0, [pc, #560]	; (8008584 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008354:	f7fc fc2a 	bl	8004bac <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8008358:	2376      	movs	r3, #118	; 0x76
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	4b76      	ldr	r3, [pc, #472]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4b89      	ldr	r3, [pc, #548]	; (8008588 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008362:	4a77      	ldr	r2, [pc, #476]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008364:	4987      	ldr	r1, [pc, #540]	; (8008584 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008366:	4889      	ldr	r0, [pc, #548]	; (800858c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008368:	f00c fc84 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 800836c:	4888      	ldr	r0, [pc, #544]	; (8008590 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800836e:	f7fc fc83 	bl	8004c78 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8008372:	237d      	movs	r3, #125	; 0x7d
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	4b70      	ldr	r3, [pc, #448]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	4b86      	ldr	r3, [pc, #536]	; (8008594 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800837c:	4a70      	ldr	r2, [pc, #448]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800837e:	4984      	ldr	r1, [pc, #528]	; (8008590 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008380:	4885      	ldr	r0, [pc, #532]	; (8008598 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008382:	f00c fc77 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008386:	4885      	ldr	r0, [pc, #532]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008388:	f7fc fd60 	bl	8004e4c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 800838c:	2385      	movs	r3, #133	; 0x85
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	4b69      	ldr	r3, [pc, #420]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008396:	4a6a      	ldr	r2, [pc, #424]	; (8008540 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008398:	4980      	ldr	r1, [pc, #512]	; (800859c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800839a:	4882      	ldr	r0, [pc, #520]	; (80085a4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800839c:	f00c fc6a 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80083a0:	4881      	ldr	r0, [pc, #516]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80083a2:	f7fc fec9 	bl	8005138 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80083a6:	23c0      	movs	r3, #192	; 0xc0
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	4b63      	ldr	r3, [pc, #396]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4b7f      	ldr	r3, [pc, #508]	; (80085ac <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80083b0:	4a7f      	ldr	r2, [pc, #508]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80083b2:	497d      	ldr	r1, [pc, #500]	; (80085a8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80083b4:	487f      	ldr	r0, [pc, #508]	; (80085b4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80083b6:	f00c fc5d 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80083ba:	487f      	ldr	r0, [pc, #508]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80083bc:	f7fc ff26 	bl	800520c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80083c0:	23d2      	movs	r3, #210	; 0xd2
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	4b5c      	ldr	r3, [pc, #368]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	4b7c      	ldr	r3, [pc, #496]	; (80085bc <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80083ca:	4a79      	ldr	r2, [pc, #484]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80083cc:	497a      	ldr	r1, [pc, #488]	; (80085b8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80083ce:	487c      	ldr	r0, [pc, #496]	; (80085c0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80083d0:	f00c fc50 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80083d4:	487b      	ldr	r0, [pc, #492]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80083d6:	f7fc ffdd 	bl	8005394 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80083da:	23de      	movs	r3, #222	; 0xde
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	4b56      	ldr	r3, [pc, #344]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4b79      	ldr	r3, [pc, #484]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80083e4:	4a72      	ldr	r2, [pc, #456]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80083e6:	4977      	ldr	r1, [pc, #476]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80083e8:	4878      	ldr	r0, [pc, #480]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80083ea:	f00c fc43 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80083ee:	4878      	ldr	r0, [pc, #480]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80083f0:	f7fd f87a 	bl	80054e8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 80083f4:	23ed      	movs	r3, #237	; 0xed
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4b75      	ldr	r3, [pc, #468]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80083fe:	4a6c      	ldr	r2, [pc, #432]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008400:	4973      	ldr	r1, [pc, #460]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008402:	4875      	ldr	r0, [pc, #468]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008404:	f00c fc36 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008408:	4874      	ldr	r0, [pc, #464]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800840a:	f7fd f91b 	bl	8005644 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800840e:	23fe      	movs	r3, #254	; 0xfe
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	4b49      	ldr	r3, [pc, #292]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	4b72      	ldr	r3, [pc, #456]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008418:	4a65      	ldr	r2, [pc, #404]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800841a:	4970      	ldr	r1, [pc, #448]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800841c:	4871      	ldr	r0, [pc, #452]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800841e:	f00c fc29 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008422:	4871      	ldr	r0, [pc, #452]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008424:	f7fd f97a 	bl	800571c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008428:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	4b42      	ldr	r3, [pc, #264]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4b6e      	ldr	r3, [pc, #440]	; (80085ec <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008434:	4a5e      	ldr	r2, [pc, #376]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008436:	496c      	ldr	r1, [pc, #432]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008438:	486d      	ldr	r0, [pc, #436]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800843a:	f00c fc1b 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800843e:	486d      	ldr	r0, [pc, #436]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008440:	f7fd fa2a 	bl	8005898 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008444:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	4b3b      	ldr	r3, [pc, #236]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4b6a      	ldr	r3, [pc, #424]	; (80085f8 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008450:	4a57      	ldr	r2, [pc, #348]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008452:	4968      	ldr	r1, [pc, #416]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008454:	4869      	ldr	r0, [pc, #420]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008456:	f00c fc0d 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800845a:	4869      	ldr	r0, [pc, #420]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800845c:	f7fd face 	bl	80059fc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8008460:	f240 133b 	movw	r3, #315	; 0x13b
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	4b34      	ldr	r3, [pc, #208]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	4b66      	ldr	r3, [pc, #408]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800846c:	4a50      	ldr	r2, [pc, #320]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800846e:	4964      	ldr	r1, [pc, #400]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008470:	4865      	ldr	r0, [pc, #404]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008472:	f00c fbff 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008476:	4865      	ldr	r0, [pc, #404]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008478:	f7fd fbfe 	bl	8005c78 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 800847c:	f240 1367 	movw	r3, #359	; 0x167
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	4b2d      	ldr	r3, [pc, #180]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	4b62      	ldr	r3, [pc, #392]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8008488:	4a49      	ldr	r2, [pc, #292]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800848a:	4960      	ldr	r1, [pc, #384]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800848c:	4861      	ldr	r0, [pc, #388]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800848e:	f00c fbf1 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008492:	4861      	ldr	r0, [pc, #388]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008494:	f7fd fd2a 	bl	8005eec <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8008498:	f240 1393 	movw	r3, #403	; 0x193
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	4b26      	ldr	r3, [pc, #152]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4b5e      	ldr	r3, [pc, #376]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80084a4:	4a42      	ldr	r2, [pc, #264]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084a6:	495c      	ldr	r1, [pc, #368]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084a8:	485d      	ldr	r0, [pc, #372]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80084aa:	f00c fbe3 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80084ae:	485d      	ldr	r0, [pc, #372]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084b0:	f7fd fdc6 	bl	8006040 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80084b4:	f240 13a5 	movw	r3, #421	; 0x1a5
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	4b1f      	ldr	r3, [pc, #124]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	4b5a      	ldr	r3, [pc, #360]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80084c0:	4a3b      	ldr	r2, [pc, #236]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084c2:	4958      	ldr	r1, [pc, #352]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084c4:	4859      	ldr	r0, [pc, #356]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80084c6:	f00c fbd5 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80084ca:	4859      	ldr	r0, [pc, #356]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80084cc:	f7fd fe9e 	bl	800620c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80084d0:	f240 13bd 	movw	r3, #445	; 0x1bd
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4b56      	ldr	r3, [pc, #344]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80084dc:	4a34      	ldr	r2, [pc, #208]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084de:	4954      	ldr	r1, [pc, #336]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80084e0:	4855      	ldr	r0, [pc, #340]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80084e2:	f00c fbc7 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80084e6:	4855      	ldr	r0, [pc, #340]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80084e8:	f7fd ffb4 	bl	8006454 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 80084ec:	f240 13e9 	movw	r3, #489	; 0x1e9
 80084f0:	9301      	str	r3, [sp, #4]
 80084f2:	4b11      	ldr	r3, [pc, #68]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4b52      	ldr	r3, [pc, #328]	; (8008640 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80084f8:	4a2d      	ldr	r2, [pc, #180]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80084fa:	4950      	ldr	r1, [pc, #320]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80084fc:	4851      	ldr	r0, [pc, #324]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80084fe:	f00c fbb9 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008502:	4851      	ldr	r0, [pc, #324]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008504:	f7fe f8dc 	bl	80066c0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008508:	f240 2315 	movw	r3, #533	; 0x215
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4b4e      	ldr	r3, [pc, #312]	; (800864c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008514:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008516:	494c      	ldr	r1, [pc, #304]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008518:	484d      	ldr	r0, [pc, #308]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800851a:	f00c fbab 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800851e:	484d      	ldr	r0, [pc, #308]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008520:	f7fe f984 	bl	800682c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008524:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4b4a      	ldr	r3, [pc, #296]	; (8008658 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008530:	e094      	b.n	800865c <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8008532:	bf00      	nop
 8008534:	20000380 	.word	0x20000380
 8008538:	08023904 	.word	0x08023904
 800853c:	0802414c 	.word	0x0802414c
 8008540:	08024158 	.word	0x08024158
 8008544:	2000039c 	.word	0x2000039c
 8008548:	200003a0 	.word	0x200003a0
 800854c:	08024170 	.word	0x08024170
 8008550:	200003bc 	.word	0x200003bc
 8008554:	200003c0 	.word	0x200003c0
 8008558:	08024180 	.word	0x08024180
 800855c:	200003dc 	.word	0x200003dc
 8008560:	200003e0 	.word	0x200003e0
 8008564:	08024194 	.word	0x08024194
 8008568:	200003fc 	.word	0x200003fc
 800856c:	20000400 	.word	0x20000400
 8008570:	080241a4 	.word	0x080241a4
 8008574:	2000041c 	.word	0x2000041c
 8008578:	20000420 	.word	0x20000420
 800857c:	080241bc 	.word	0x080241bc
 8008580:	2000043c 	.word	0x2000043c
 8008584:	20000440 	.word	0x20000440
 8008588:	080241cc 	.word	0x080241cc
 800858c:	2000045c 	.word	0x2000045c
 8008590:	20000460 	.word	0x20000460
 8008594:	080241dc 	.word	0x080241dc
 8008598:	2000047c 	.word	0x2000047c
 800859c:	20000480 	.word	0x20000480
 80085a0:	080241e8 	.word	0x080241e8
 80085a4:	2000049c 	.word	0x2000049c
 80085a8:	200004a8 	.word	0x200004a8
 80085ac:	080241f8 	.word	0x080241f8
 80085b0:	08024208 	.word	0x08024208
 80085b4:	200004c4 	.word	0x200004c4
 80085b8:	200004c8 	.word	0x200004c8
 80085bc:	08024220 	.word	0x08024220
 80085c0:	200004e4 	.word	0x200004e4
 80085c4:	200004e8 	.word	0x200004e8
 80085c8:	08024238 	.word	0x08024238
 80085cc:	20000504 	.word	0x20000504
 80085d0:	20000508 	.word	0x20000508
 80085d4:	08024254 	.word	0x08024254
 80085d8:	20000524 	.word	0x20000524
 80085dc:	20000528 	.word	0x20000528
 80085e0:	08024268 	.word	0x08024268
 80085e4:	20000544 	.word	0x20000544
 80085e8:	20000548 	.word	0x20000548
 80085ec:	08024284 	.word	0x08024284
 80085f0:	20000564 	.word	0x20000564
 80085f4:	20000568 	.word	0x20000568
 80085f8:	08024298 	.word	0x08024298
 80085fc:	20000584 	.word	0x20000584
 8008600:	20000588 	.word	0x20000588
 8008604:	080242b4 	.word	0x080242b4
 8008608:	200005a4 	.word	0x200005a4
 800860c:	200005a8 	.word	0x200005a8
 8008610:	080242cc 	.word	0x080242cc
 8008614:	200005c4 	.word	0x200005c4
 8008618:	200005c8 	.word	0x200005c8
 800861c:	080242e0 	.word	0x080242e0
 8008620:	200005e4 	.word	0x200005e4
 8008624:	200005e8 	.word	0x200005e8
 8008628:	08024300 	.word	0x08024300
 800862c:	20000604 	.word	0x20000604
 8008630:	20000608 	.word	0x20000608
 8008634:	08024318 	.word	0x08024318
 8008638:	20000624 	.word	0x20000624
 800863c:	20000628 	.word	0x20000628
 8008640:	08024330 	.word	0x08024330
 8008644:	20000644 	.word	0x20000644
 8008648:	20000648 	.word	0x20000648
 800864c:	08024344 	.word	0x08024344
 8008650:	20000664 	.word	0x20000664
 8008654:	20000668 	.word	0x20000668
 8008658:	08024360 	.word	0x08024360
 800865c:	4a83      	ldr	r2, [pc, #524]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800865e:	4984      	ldr	r1, [pc, #528]	; (8008870 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008660:	4884      	ldr	r0, [pc, #528]	; (8008874 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008662:	f00c fb07 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008666:	4884      	ldr	r0, [pc, #528]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008668:	f7fe fa16 	bl	8006a98 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 800866c:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	4b82      	ldr	r3, [pc, #520]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	4b82      	ldr	r3, [pc, #520]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8008678:	4a7c      	ldr	r2, [pc, #496]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800867a:	497f      	ldr	r1, [pc, #508]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800867c:	4881      	ldr	r0, [pc, #516]	; (8008884 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800867e:	f00c faf9 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008682:	4881      	ldr	r0, [pc, #516]	; (8008888 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008684:	f7fe faee 	bl	8006c64 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 8008688:	f240 2375 	movw	r3, #629	; 0x275
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	4b7b      	ldr	r3, [pc, #492]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4b7e      	ldr	r3, [pc, #504]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8008694:	4a75      	ldr	r2, [pc, #468]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008696:	497c      	ldr	r1, [pc, #496]	; (8008888 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008698:	487d      	ldr	r0, [pc, #500]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800869a:	f00c faeb 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800869e:	487d      	ldr	r0, [pc, #500]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80086a0:	f7fe fc32 	bl	8006f08 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80086a4:	f240 239a 	movw	r3, #666	; 0x29a
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	4b74      	ldr	r3, [pc, #464]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4b7a      	ldr	r3, [pc, #488]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80086b0:	4a6e      	ldr	r2, [pc, #440]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086b2:	4978      	ldr	r1, [pc, #480]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80086b4:	4879      	ldr	r0, [pc, #484]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80086b6:	f00c fadd 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80086ba:	4879      	ldr	r0, [pc, #484]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80086bc:	f7fe fd02 	bl	80070c4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 80086c0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	4b6d      	ldr	r3, [pc, #436]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	4b76      	ldr	r3, [pc, #472]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80086cc:	4a67      	ldr	r2, [pc, #412]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086ce:	4974      	ldr	r1, [pc, #464]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80086d0:	4875      	ldr	r0, [pc, #468]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80086d2:	f00c facf 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80086d6:	4875      	ldr	r0, [pc, #468]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80086d8:	f7fe fd6c 	bl	80071b4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 80086dc:	f240 23c1 	movw	r3, #705	; 0x2c1
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	4b66      	ldr	r3, [pc, #408]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4b72      	ldr	r3, [pc, #456]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80086e8:	4a60      	ldr	r2, [pc, #384]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80086ea:	4970      	ldr	r1, [pc, #448]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80086ec:	4871      	ldr	r0, [pc, #452]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80086ee:	f00c fac1 	bl	8014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f040 80b4 	bne.w	8008862 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008700:	4293      	cmp	r3, r2
 8008702:	f040 80ae 	bne.w	8008862 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008706:	486b      	ldr	r0, [pc, #428]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008708:	f00c fade 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800870c:	4867      	ldr	r0, [pc, #412]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800870e:	f7fe fe0f 	bl	8007330 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008712:	4865      	ldr	r0, [pc, #404]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008714:	f00c fad8 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008718:	4861      	ldr	r0, [pc, #388]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800871a:	f7fe fe4d 	bl	80073b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800871e:	485f      	ldr	r0, [pc, #380]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008720:	f00c fad2 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008724:	485b      	ldr	r0, [pc, #364]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008726:	f7fe fe8b 	bl	8007440 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800872a:	4859      	ldr	r0, [pc, #356]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800872c:	f00c facc 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008730:	4855      	ldr	r0, [pc, #340]	; (8008888 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008732:	f7fe fec9 	bl	80074c8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008736:	4853      	ldr	r0, [pc, #332]	; (8008884 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008738:	f00c fac6 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800873c:	484e      	ldr	r0, [pc, #312]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800873e:	f7fe ff07 	bl	8007550 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008742:	484c      	ldr	r0, [pc, #304]	; (8008874 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008744:	f00c fac0 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008748:	4849      	ldr	r0, [pc, #292]	; (8008870 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800874a:	f7fe ff45 	bl	80075d8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800874e:	485a      	ldr	r0, [pc, #360]	; (80088b8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8008750:	f00c faba 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008754:	4859      	ldr	r0, [pc, #356]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8008756:	f7fe ff83 	bl	8007660 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 800875a:	4859      	ldr	r0, [pc, #356]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 800875c:	f00c fab4 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008760:	4858      	ldr	r0, [pc, #352]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8008762:	f7fe ffc1 	bl	80076e8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008766:	4858      	ldr	r0, [pc, #352]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008768:	f00c faae 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800876c:	4857      	ldr	r0, [pc, #348]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x634>)
 800876e:	f7fe ffff 	bl	8007770 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008772:	4857      	ldr	r0, [pc, #348]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8008774:	f00c faa8 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008778:	4856      	ldr	r0, [pc, #344]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 800877a:	f7ff f83d 	bl	80077f8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800877e:	4856      	ldr	r0, [pc, #344]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8008780:	f00c faa2 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008784:	4855      	ldr	r0, [pc, #340]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8008786:	f7ff f87b 	bl	8007880 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800878a:	4855      	ldr	r0, [pc, #340]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 800878c:	f00c fa9c 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008790:	4854      	ldr	r0, [pc, #336]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8008792:	f7ff f8b9 	bl	8007908 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008796:	4854      	ldr	r0, [pc, #336]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008798:	f00c fa96 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800879c:	4853      	ldr	r0, [pc, #332]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x654>)
 800879e:	f7ff f8f7 	bl	8007990 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80087a2:	4853      	ldr	r0, [pc, #332]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80087a4:	f00c fa90 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087a8:	4852      	ldr	r0, [pc, #328]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80087aa:	f7ff f935 	bl	8007a18 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80087ae:	4852      	ldr	r0, [pc, #328]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80087b0:	f00c fa8a 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087b4:	4851      	ldr	r0, [pc, #324]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80087b6:	f7ff f973 	bl	8007aa0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80087ba:	4851      	ldr	r0, [pc, #324]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80087bc:	f00c fa84 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087c0:	4850      	ldr	r0, [pc, #320]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80087c2:	f7ff f9b1 	bl	8007b28 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80087c6:	4850      	ldr	r0, [pc, #320]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80087c8:	f00c fa7e 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087cc:	484f      	ldr	r0, [pc, #316]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80087ce:	f7ff f9ef 	bl	8007bb0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80087d2:	484f      	ldr	r0, [pc, #316]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80087d4:	f00c fa78 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087d8:	484e      	ldr	r0, [pc, #312]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 80087da:	f7ff fa2d 	bl	8007c38 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80087de:	484e      	ldr	r0, [pc, #312]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 80087e0:	f00c fa72 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087e4:	484d      	ldr	r0, [pc, #308]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x684>)
 80087e6:	f7ff fa6b 	bl	8007cc0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80087ea:	484d      	ldr	r0, [pc, #308]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80087ec:	f00c fa6c 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087f0:	484c      	ldr	r0, [pc, #304]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80087f2:	f7ff faa9 	bl	8007d48 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80087f6:	484c      	ldr	r0, [pc, #304]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80087f8:	f00c fa66 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 80087fc:	484b      	ldr	r0, [pc, #300]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80087fe:	f7ff fae7 	bl	8007dd0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008802:	484b      	ldr	r0, [pc, #300]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008804:	f00c fa60 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008808:	484a      	ldr	r0, [pc, #296]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800880a:	f7ff fb25 	bl	8007e58 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800880e:	484a      	ldr	r0, [pc, #296]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008810:	f00c fa5a 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008814:	4849      	ldr	r0, [pc, #292]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008816:	f7ff fb63 	bl	8007ee0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800881a:	4849      	ldr	r0, [pc, #292]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800881c:	f00c fa54 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008820:	4848      	ldr	r0, [pc, #288]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008822:	f7ff fba1 	bl	8007f68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008826:	4848      	ldr	r0, [pc, #288]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008828:	f00c fa4e 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800882c:	4847      	ldr	r0, [pc, #284]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800882e:	f7ff fbdf 	bl	8007ff0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008832:	4847      	ldr	r0, [pc, #284]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008834:	f00c fa48 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008838:	4846      	ldr	r0, [pc, #280]	; (8008954 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800883a:	f7ff fc1d 	bl	8008078 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800883e:	4846      	ldr	r0, [pc, #280]	; (8008958 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008840:	f00c fa42 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008844:	4845      	ldr	r0, [pc, #276]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8008846:	f7ff fc5b 	bl	8008100 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 800884a:	4845      	ldr	r0, [pc, #276]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800884c:	f00c fa3c 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8008850:	4844      	ldr	r0, [pc, #272]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8008852:	f7ff fc99 	bl	8008188 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008856:	4844      	ldr	r0, [pc, #272]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008858:	f00c fa36 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 800885c:	4843      	ldr	r0, [pc, #268]	; (800896c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800885e:	f7ff fcd7 	bl	8008210 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	08024208 	.word	0x08024208
 8008870:	20000668 	.word	0x20000668
 8008874:	20000684 	.word	0x20000684
 8008878:	20000688 	.word	0x20000688
 800887c:	08023904 	.word	0x08023904
 8008880:	08024378 	.word	0x08024378
 8008884:	200006a4 	.word	0x200006a4
 8008888:	200006a8 	.word	0x200006a8
 800888c:	0802438c 	.word	0x0802438c
 8008890:	200006c4 	.word	0x200006c4
 8008894:	200006c8 	.word	0x200006c8
 8008898:	080243a4 	.word	0x080243a4
 800889c:	200006e4 	.word	0x200006e4
 80088a0:	200006e8 	.word	0x200006e8
 80088a4:	080243bc 	.word	0x080243bc
 80088a8:	20000704 	.word	0x20000704
 80088ac:	20000708 	.word	0x20000708
 80088b0:	080243dc 	.word	0x080243dc
 80088b4:	20000724 	.word	0x20000724
 80088b8:	20000664 	.word	0x20000664
 80088bc:	20000648 	.word	0x20000648
 80088c0:	20000644 	.word	0x20000644
 80088c4:	20000628 	.word	0x20000628
 80088c8:	20000624 	.word	0x20000624
 80088cc:	20000608 	.word	0x20000608
 80088d0:	20000604 	.word	0x20000604
 80088d4:	200005e8 	.word	0x200005e8
 80088d8:	200005e4 	.word	0x200005e4
 80088dc:	200005c8 	.word	0x200005c8
 80088e0:	200005c4 	.word	0x200005c4
 80088e4:	200005a8 	.word	0x200005a8
 80088e8:	200005a4 	.word	0x200005a4
 80088ec:	20000588 	.word	0x20000588
 80088f0:	20000584 	.word	0x20000584
 80088f4:	20000568 	.word	0x20000568
 80088f8:	20000564 	.word	0x20000564
 80088fc:	20000548 	.word	0x20000548
 8008900:	20000544 	.word	0x20000544
 8008904:	20000528 	.word	0x20000528
 8008908:	20000524 	.word	0x20000524
 800890c:	20000508 	.word	0x20000508
 8008910:	20000504 	.word	0x20000504
 8008914:	200004e8 	.word	0x200004e8
 8008918:	200004e4 	.word	0x200004e4
 800891c:	200004c8 	.word	0x200004c8
 8008920:	200004c4 	.word	0x200004c4
 8008924:	200004a8 	.word	0x200004a8
 8008928:	2000049c 	.word	0x2000049c
 800892c:	20000480 	.word	0x20000480
 8008930:	2000047c 	.word	0x2000047c
 8008934:	20000460 	.word	0x20000460
 8008938:	2000045c 	.word	0x2000045c
 800893c:	20000440 	.word	0x20000440
 8008940:	2000043c 	.word	0x2000043c
 8008944:	20000420 	.word	0x20000420
 8008948:	2000041c 	.word	0x2000041c
 800894c:	20000400 	.word	0x20000400
 8008950:	200003fc 	.word	0x200003fc
 8008954:	200003e0 	.word	0x200003e0
 8008958:	200003dc 	.word	0x200003dc
 800895c:	200003c0 	.word	0x200003c0
 8008960:	200003bc 	.word	0x200003bc
 8008964:	200003a0 	.word	0x200003a0
 8008968:	2000039c 	.word	0x2000039c
 800896c:	20000380 	.word	0x20000380

08008970 <_GLOBAL__sub_I_rx_buffer>:
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
 8008974:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008978:	2001      	movs	r0, #1
 800897a:	f7ff fc8d 	bl	8008298 <_Z41__static_initialization_and_destruction_0ii>
 800897e:	bd80      	pop	{r7, pc}

08008980 <_GLOBAL__sub_D_rx_buffer>:
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
 8008984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008988:	2000      	movs	r0, #0
 800898a:	f7ff fc85 	bl	8008298 <_Z41__static_initialization_and_destruction_0ii>
 800898e:	bd80      	pop	{r7, pc}

08008990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008996:	f7f8 fb22 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800899a:	f000 f817 	bl	80089cc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800899e:	f000 f973 	bl	8008c88 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80089a2:	f000 f947 	bl	8008c34 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80089a6:	f000 f887 	bl	8008ab8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80089aa:	f000 f8e3 	bl	8008b74 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 80089ae:	4a06      	ldr	r2, [pc, #24]	; (80089c8 <main+0x38>)
 80089b0:	463b      	mov	r3, r7
 80089b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089b6:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 80089ba:	463b      	mov	r3, r7
 80089bc:	4619      	mov	r1, r3
 80089be:	2002      	movs	r0, #2
 80089c0:	f000 fa4c 	bl	8008e5c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 80089c4:	e7fe      	b.n	80089c4 <main+0x34>
 80089c6:	bf00      	nop
 80089c8:	080243fc 	.word	0x080243fc

080089cc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b0a8      	sub	sp, #160	; 0xa0
 80089d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80089d6:	2238      	movs	r2, #56	; 0x38
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f017 ffb4 	bl	8020948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	605a      	str	r2, [r3, #4]
 80089ea:	609a      	str	r2, [r3, #8]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089f0:	463b      	mov	r3, r7
 80089f2:	2254      	movs	r2, #84	; 0x54
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f017 ffa6 	bl	8020948 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80089fc:	2000      	movs	r0, #0
 80089fe:	f7f9 f8a7 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a12:	2303      	movs	r3, #3
 8008a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8008a18:	2306      	movs	r3, #6
 8008a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8008a1e:	2355      	movs	r3, #85	; 0x55
 8008a20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008a24:	2302      	movs	r3, #2
 8008a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008a30:	2302      	movs	r3, #2
 8008a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7f9 f93c 	bl	8001cb8 <HAL_RCC_OscConfig>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bf14      	ite	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	2300      	moveq	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8008a50:	f000 f98a 	bl	8008d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a54:	230f      	movs	r3, #15
 8008a56:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008a60:	2300      	movs	r3, #0
 8008a62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a64:	2300      	movs	r3, #0
 8008a66:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008a68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7f9 fc3a 	bl	80022e8 <HAL_RCC_ClockConfig>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bf14      	ite	ne
 8008a7a:	2301      	movne	r3, #1
 8008a7c:	2300      	moveq	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8008a84:	f000 f970 	bl	8008d68 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8008a88:	2321      	movs	r3, #33	; 0x21
 8008a8a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008a90:	2300      	movs	r3, #0
 8008a92:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a94:	463b      	mov	r3, r7
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f9 fe42 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8008aac:	f000 f95c 	bl	8008d68 <Error_Handler>
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	37a0      	adds	r7, #160	; 0xa0
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008abc:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008abe:	4a2c      	ldr	r2, [pc, #176]	; (8008b70 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008ac0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008ac2:	4b2a      	ldr	r3, [pc, #168]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ac8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008aca:	4b28      	ldr	r3, [pc, #160]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008ad0:	4b26      	ldr	r3, [pc, #152]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008ad6:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008adc:	4b23      	ldr	r3, [pc, #140]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ade:	220c      	movs	r2, #12
 8008ae0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ae2:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ae8:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008aee:	4b1f      	ldr	r3, [pc, #124]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008af4:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008afa:	481c      	ldr	r0, [pc, #112]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008afc:	f7fa f85c 	bl	8002bb8 <HAL_UART_Init>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bf14      	ite	ne
 8008b06:	2301      	movne	r3, #1
 8008b08:	2300      	moveq	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8008b10:	f000 f92a 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008b14:	2100      	movs	r1, #0
 8008b16:	4815      	ldr	r0, [pc, #84]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b18:	f7fa ffe2 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8008b2c:	f000 f91c 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008b30:	2100      	movs	r1, #0
 8008b32:	480e      	ldr	r0, [pc, #56]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b34:	f7fb f812 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bf14      	ite	ne
 8008b3e:	2301      	movne	r3, #1
 8008b40:	2300      	moveq	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8008b48:	f000 f90e 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008b4c:	4807      	ldr	r0, [pc, #28]	; (8008b6c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008b4e:	f7fa ff8e 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8008b62:	f000 f901 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000728 	.word	0x20000728
 8008b70:	40008000 	.word	0x40008000

08008b74 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008b78:	4b2c      	ldr	r3, [pc, #176]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b7a:	4a2d      	ldr	r2, [pc, #180]	; (8008c30 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008b7e:	4b2b      	ldr	r3, [pc, #172]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008b86:	4b29      	ldr	r3, [pc, #164]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008b8c:	4b27      	ldr	r3, [pc, #156]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008b92:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008b98:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008b9a:	220c      	movs	r2, #12
 8008b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b9e:	4b23      	ldr	r3, [pc, #140]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ba4:	4b21      	ldr	r3, [pc, #132]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008baa:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008bb0:	4b1e      	ldr	r3, [pc, #120]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008bbc:	481b      	ldr	r0, [pc, #108]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bbe:	f7f9 fffb 	bl	8002bb8 <HAL_UART_Init>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8008bd2:	f000 f8c9 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4814      	ldr	r0, [pc, #80]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bda:	f7fa ff81 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	bf14      	ite	ne
 8008be4:	2301      	movne	r3, #1
 8008be6:	2300      	moveq	r3, #0
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8008bee:	f000 f8bb 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	480d      	ldr	r0, [pc, #52]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008bf6:	f7fa ffb1 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf14      	ite	ne
 8008c00:	2301      	movne	r3, #1
 8008c02:	2300      	moveq	r3, #0
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8008c0a:	f000 f8ad 	bl	8008d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008c0e:	4807      	ldr	r0, [pc, #28]	; (8008c2c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008c10:	f7fa ff2d 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bf14      	ite	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	2300      	moveq	r3, #0
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008c24:	f000 f8a0 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c28:	bf00      	nop
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	200007b8 	.word	0x200007b8
 8008c30:	40013800 	.word	0x40013800

08008c34 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008c3a:	4b12      	ldr	r3, [pc, #72]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3e:	4a11      	ldr	r2, [pc, #68]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c40:	f043 0304 	orr.w	r3, r3, #4
 8008c44:	6493      	str	r3, [r2, #72]	; 0x48
 8008c46:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c56:	4a0b      	ldr	r2, [pc, #44]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	6493      	str	r3, [r2, #72]	; 0x48
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_ZL11MX_DMA_Initv+0x50>)
 8008c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	200b      	movs	r0, #11
 8008c70:	f7f8 fb01 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008c74:	200b      	movs	r0, #11
 8008c76:	f7f8 fb18 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40021000 	.word	0x40021000

08008c88 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	605a      	str	r2, [r3, #4]
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	60da      	str	r2, [r3, #12]
 8008c9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c9e:	4b2f      	ldr	r3, [pc, #188]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	4a2e      	ldr	r2, [pc, #184]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ca4:	f043 0304 	orr.w	r3, r3, #4
 8008ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008caa:	4b2c      	ldr	r3, [pc, #176]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008cb6:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cba:	4a28      	ldr	r2, [pc, #160]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cbc:	f043 0320 	orr.w	r3, r3, #32
 8008cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cc2:	4b26      	ldr	r3, [pc, #152]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd2:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cd4:	f043 0301 	orr.w	r3, r3, #1
 8008cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cda:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	60bb      	str	r3, [r7, #8]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cec:	f043 0302 	orr.w	r3, r3, #2
 8008cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	; (8008d5c <_ZL12MX_GPIO_Initv+0xd4>)
 8008cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	607b      	str	r3, [r7, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2120      	movs	r1, #32
 8008d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d06:	f7f8 fee7 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <_ZL12MX_GPIO_Initv+0xd8>)
 8008d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008d18:	f107 0314 	add.w	r3, r7, #20
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4811      	ldr	r0, [pc, #68]	; (8008d64 <_ZL12MX_GPIO_Initv+0xdc>)
 8008d20:	f7f8 fd58 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008d24:	2320      	movs	r3, #32
 8008d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d30:	2300      	movs	r3, #0
 8008d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d3e:	f7f8 fd49 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	2028      	movs	r0, #40	; 0x28
 8008d48:	f7f8 fa95 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008d4c:	2028      	movs	r0, #40	; 0x28
 8008d4e:	f7f8 faac 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008d52:	bf00      	nop
 8008d54:	3728      	adds	r7, #40	; 0x28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	10110000 	.word	0x10110000
 8008d64:	48000800 	.word	0x48000800

08008d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008d6c:	b672      	cpsid	i
}
 8008d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008d70:	e7fe      	b.n	8008d70 <Error_Handler+0x8>

08008d72 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
    }
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69db      	ldr	r3, [r3, #28]
    }
 8008d96:	4618      	mov	r0, r3
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
    }
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8008dba:	b590      	push	{r4, r7, lr}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff ffed 	bl	8008da2 <_ZNK10TestResult15getFailureCountEv>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <_ZNK10TestResult9isFailureEv+0x2a>
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ffcf 	bl	8008d72 <_ZNK10TestResult11getRunCountEv>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff ffd7 	bl	8008d8a <_ZNK10TestResult15getIgnoredCountEv>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	4423      	add	r3, r4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <_ZNK10TestResult9isFailureEv+0x2e>
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <_ZNK10TestResult9isFailureEv+0x30>
 8008de8:	2300      	movs	r3, #0
    }
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd90      	pop	{r4, r7, pc}
	...

08008df4 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
    {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f007 fde6 	bl	80109d0 <_ZN10TestOutputC1Ev>
 8008e04:	4a03      	ldr	r2, [pc, #12]	; (8008e14 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
    }
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08028ac0 	.word	0x08028ac0

08008e18 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
    {
 8008e20:	4a05      	ldr	r2, [pc, #20]	; (8008e38 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f007 fdef 	bl	8010a0c <_ZN10TestOutputD1Ev>
    }
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	08028ac0 	.word	0x08028ac0

08008e3c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
    }
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ffe7 	bl	8008e18 <_ZN17ConsoleTestOutputD1Ev>
 8008e4a:	2110      	movs	r1, #16
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 fce7 	bl	800a820 <_ZdlPvj>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8008e5c:	b5b0      	push	{r4, r5, r7, lr}
 8008e5e:	b098      	sub	sp, #96	; 0x60
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
    int result = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8008e6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff ffc0 	bl	8008df4 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008e74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e78:	4935      	ldr	r1, [pc, #212]	; (8008f50 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f004 f87f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8008e80:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8008e84:	f107 0318 	add.w	r3, r7, #24
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 ff6a 	bl	800ad64 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8008e90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008e94:	4618      	mov	r0, r3
 8008e96:	f004 fc2a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8008e9a:	f107 0318 	add.w	r3, r7, #24
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 ff2f 	bl	800ad04 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8008ea6:	f009 fb21 	bl	80124ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	3234      	adds	r2, #52	; 0x34
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	f107 0118 	add.w	r1, r7, #24
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008eba:	f009 fb17 	bl	80124ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f107 0008 	add.w	r0, r7, #8
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	f000 f844 	bl	8008f54 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8008ecc:	f107 0308 	add.w	r3, r7, #8
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f899 	bl	8009008 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8008ed6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f863 	bl	8008fa8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8008ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10c      	bne.n	8008f02 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8008ee8:	f107 0318 	add.w	r3, r7, #24
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f002 f83a 	bl	800af68 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f007 fe27 	bl	8010b50 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8008f02:	f009 faf3 	bl	80124ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8008f06:	4604      	mov	r4, r0
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	3344      	adds	r3, #68	; 0x44
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008f12:	490f      	ldr	r1, [pc, #60]	; (8008f50 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8008f14:	4618      	mov	r0, r3
 8008f16:	f004 f832 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8008f1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4620      	mov	r0, r4
 8008f22:	47a8      	blx	r5
 8008f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f004 fbe0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return result;
 8008f2e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8008f30:	f107 0318 	add.w	r3, r7, #24
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 ff4d 	bl	800add4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8008f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff ff6a 	bl	8008e18 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8008f44:	4623      	mov	r3, r4
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3760      	adds	r7, #96	; 0x60
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	08024404 	.word	0x08024404

08008f54 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8008f54:	b590      	push	{r4, r7, lr}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8008f62:	4a0f      	ldr	r2, [pc, #60]	; (8008fa0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	605a      	str	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	609a      	str	r2, [r3, #8]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8008f7a:	2241      	movs	r2, #65	; 0x41
 8008f7c:	4909      	ldr	r1, [pc, #36]	; (8008fa4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8008f7e:	2038      	movs	r0, #56	; 0x38
 8008f80:	f001 fc3a 	bl	800a7f8 <_ZnwjPKci>
 8008f84:	4604      	mov	r4, r0
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f00c f84a 	bl	8015024 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	609c      	str	r4, [r3, #8]
}
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	0802844c 	.word	0x0802844c
 8008fa4:	08024418 	.word	0x08024418

08008fa8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	4a0c      	ldr	r2, [pc, #48]	; (8008fe4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d004      	beq.n	8008fc8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	3204      	adds	r2, #4
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	4790      	blx	r2
    delete output_;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	3204      	adds	r2, #4
 8008fd4:	6812      	ldr	r2, [r2, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	4790      	blx	r2
}
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	0802844c 	.word	0x0802844c

08008fe8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
}
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ffd9 	bl	8008fa8 <_ZN21CommandLineTestRunnerD1Ev>
 8008ff6:	2110      	movs	r1, #16
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fc11 	bl	800a820 <_ZdlPvj>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8009008:	b5b0      	push	{r4, r5, r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8009010:	2301      	movs	r3, #1
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8009014:	f107 031c 	add.w	r3, r7, #28
 8009018:	4929      	ldr	r1, [pc, #164]	; (80090c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800901a:	4618      	mov	r0, r3
 800901c:	f003 ffaf 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009020:	f107 021c 	add.w	r2, r7, #28
 8009024:	f107 0308 	add.w	r3, r7, #8
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f008 fe1c 	bl	8011c68 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8009030:	f107 031c 	add.w	r3, r7, #28
 8009034:	4618      	mov	r0, r3
 8009036:	f004 fb5a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3334      	adds	r3, #52	; 0x34
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	333c      	adds	r3, #60	; 0x3c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4610      	mov	r0, r2
 8009060:	4798      	blx	r3
 8009062:	4603      	mov	r3, r0
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa3e 	bl	80094e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8ac 	bl	80091d0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8009078:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68dd      	ldr	r5, [r3, #12]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3344      	adds	r3, #68	; 0x44
 8009086:	681c      	ldr	r4, [r3, #0]
 8009088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800908c:	490c      	ldr	r1, [pc, #48]	; (80090c0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800908e:	4618      	mov	r0, r3
 8009090:	f003 ff75 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009098:	4619      	mov	r1, r3
 800909a:	4628      	mov	r0, r5
 800909c:	47a0      	blx	r4
 800909e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f004 fb23 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return testResult;
 80090a8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80090aa:	f107 0308 	add.w	r3, r7, #8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 faaa 	bl	8009608 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80090b4:	4623      	mov	r3, r4
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3730      	adds	r7, #48	; 0x30
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bdb0      	pop	{r4, r5, r7, pc}
 80090be:	bf00      	nop
 80090c0:	0802443c 	.word	0x0802443c

080090c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80090c4:	b5b0      	push	{r4, r5, r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68dd      	ldr	r5, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3330      	adds	r3, #48	; 0x30
 80090d8:	681c      	ldr	r4, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f00c fce0 	bl	8015aa4 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80090e4:	4603      	mov	r3, r0
 80090e6:	4619      	mov	r1, r3
 80090e8:	4628      	mov	r0, r5
 80090ea:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68dd      	ldr	r5, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	332c      	adds	r3, #44	; 0x2c
 80090f8:	681c      	ldr	r4, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	4618      	mov	r0, r3
 8009100:	f00c fcdc 	bl	8015abc <_ZNK20CommandLineArguments14getNameFiltersEv>
 8009104:	4603      	mov	r3, r0
 8009106:	4619      	mov	r1, r3
 8009108:	4628      	mov	r0, r5
 800910a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f00c fc2b 	bl	801596c <_ZNK20CommandLineArguments9isVerboseEv>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3320      	adds	r3, #32
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2101      	movs	r1, #1
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	4618      	mov	r0, r3
 8009136:	f00c fc25 	bl	8015984 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3320      	adds	r3, #32
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2102      	movs	r1, #2
 8009150:	4610      	mov	r0, r2
 8009152:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f00c fc1f 	bl	801599c <_ZNK20CommandLineArguments7isColorEv>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3324      	adds	r3, #36	; 0x24
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4610      	mov	r0, r2
 8009174:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f00c fc4a 	bl	8015a14 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d008      	beq.n	8009198 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3360      	adds	r3, #96	; 0x60
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4610      	mov	r0, r2
 8009196:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	4618      	mov	r0, r3
 800919e:	f00c fc2d 	bl	80159fc <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f009 fa19 	bl	80125e4 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f00c fc50 	bl	8015a5c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80091c2:	f00b fadb 	bl	801477c <_ZN10UtestShell14setCrashOnFailEv>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080091d0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80091d0:	b5b0      	push	{r4, r5, r7, lr}
 80091d2:	b094      	sub	sp, #80	; 0x50
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff ff73 	bl	80090c4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80091e6:	2300      	movs	r3, #0
 80091e8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f00c fc1c 	bl	8015a2c <_ZNK20CommandLineArguments14getRepeatCountEv>
 80091f4:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f00c fbda 	bl	80159b4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	f107 0308 	add.w	r3, r7, #8
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f009 fbaf 	bl	8012974 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3320      	adds	r3, #32
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
        return 0;
 800922c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f009 fbd6 	bl	80129e4 <_ZN10TestResultD1Ev>
 8009238:	e0e1      	b.n	80093fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f00c fbc4 	bl	80159cc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d019      	beq.n	800927e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f009 fb8d 	bl	8012974 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3324      	adds	r3, #36	; 0x24
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f107 0108 	add.w	r1, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
        return 0;
 8009270:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4618      	mov	r0, r3
 8009278:	f009 fbb4 	bl	80129e4 <_ZN10TestResultD1Ev>
 800927c:	e0bf      	b.n	80093fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	4618      	mov	r0, r3
 8009284:	f00c fbae 	bl	80159e4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d019      	beq.n	80092c2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f009 fb6b 	bl	8012974 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3328      	adds	r3, #40	; 0x28
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f107 0108 	add.w	r1, r7, #8
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
        return 0;
 80092b4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80092b6:	f107 0308 	add.w	r3, r7, #8
 80092ba:	4618      	mov	r0, r3
 80092bc:	f009 fb92 	bl	80129e4 <_ZN10TestResultD1Ev>
 80092c0:	e09d      	b.n	80093fe <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f00c fbbc 	bl	8015a44 <_ZNK20CommandLineArguments11isReversingEv>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d008      	beq.n	80092e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	331c      	adds	r3, #28
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3

    if (arguments_->isShuffling())
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f00c fbc3 	bl	8015a74 <_ZNK20CommandLineArguments11isShufflingEv>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d023      	beq.n	800933c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	332c      	adds	r3, #44	; 0x2c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4941      	ldr	r1, [pc, #260]	; (8009408 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685d      	ldr	r5, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3334      	adds	r3, #52	; 0x34
 8009314:	681c      	ldr	r4, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	4618      	mov	r0, r3
 800931c:	f00c fbb6 	bl	8015a8c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8009320:	4603      	mov	r3, r0
 8009322:	4619      	mov	r1, r3
 8009324:	4628      	mov	r0, r5
 8009326:	47a0      	blx	r4
        output_->print("\n");
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	332c      	adds	r3, #44	; 0x2c
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4935      	ldr	r1, [pc, #212]	; (800940c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8009338:	4610      	mov	r0, r2
 800933a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009344:	429a      	cmp	r2, r3
 8009346:	bf8c      	ite	hi
 8009348:	2301      	movhi	r3, #1
 800934a:	2300      	movls	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d04e      	beq.n	80093f0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	4618      	mov	r0, r3
 8009358:	f00c fb8c 	bl	8015a74 <_ZNK20CommandLineArguments11isShufflingEv>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00f      	beq.n	8009382 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68dd      	ldr	r5, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3318      	adds	r3, #24
 800936e:	681c      	ldr	r4, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	4618      	mov	r0, r3
 8009376:	f00c fb89 	bl	8015a8c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800937a:	4603      	mov	r3, r0
 800937c:	4619      	mov	r1, r3
 800937e:	4628      	mov	r0, r5
 8009380:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6858      	ldr	r0, [r3, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3340      	adds	r3, #64	; 0x40
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009392:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009394:	4798      	blx	r3
        TestResult tr(*output_);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f009 fae7 	bl	8012974 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3314      	adds	r3, #20
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 80093bc:	f107 0308 	add.w	r3, r7, #8
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff fcee 	bl	8008da2 <_ZNK10TestResult15getFailureCountEv>
 80093c6:	4602      	mov	r2, r0
 80093c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ca:	4413      	add	r3, r2
 80093cc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 80093ce:	f107 0308 	add.w	r3, r7, #8
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff fcf1 	bl	8008dba <_ZNK10TestResult9isFailureEv>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 80093de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e0:	3301      	adds	r3, #1
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 80093e4:	f107 0308 	add.w	r3, r7, #8
 80093e8:	4618      	mov	r0, r3
 80093ea:	f009 fafb 	bl	80129e4 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 80093ee:	e7a5      	b.n	800933c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 80093f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 80093f6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80093f8:	e000      	b.n	80093fc <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 80093fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80093fc:	bf00      	nop
 80093fe:	4623      	mov	r3, r4
}
 8009400:	4618      	mov	r0, r3
 8009402:	3750      	adds	r7, #80	; 0x50
 8009404:	46bd      	mov	sp, r7
 8009406:	bdb0      	pop	{r4, r5, r7, pc}
 8009408:	08024450 	.word	0x08024450
 800940c:	0802447c 	.word	0x0802447c

08009410 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8009418:	229d      	movs	r2, #157	; 0x9d
 800941a:	4906      	ldr	r1, [pc, #24]	; (8009434 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800941c:	201c      	movs	r0, #28
 800941e:	f001 f9eb 	bl	800a7f8 <_ZnwjPKci>
 8009422:	4604      	mov	r4, r0
 8009424:	4620      	mov	r0, r4
 8009426:	f005 f955 	bl	800e6d4 <_ZN18TeamCityTestOutputC1Ev>
 800942a:	4623      	mov	r3, r4
}
 800942c:	4618      	mov	r0, r3
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	bd90      	pop	{r4, r7, pc}
 8009434:	08024418 	.word	0x08024418

08009438 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8009438:	b590      	push	{r4, r7, lr}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8009442:	22a2      	movs	r2, #162	; 0xa2
 8009444:	490a      	ldr	r1, [pc, #40]	; (8009470 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8009446:	2014      	movs	r0, #20
 8009448:	f001 f9d6 	bl	800a7f8 <_ZnwjPKci>
 800944c:	4604      	mov	r4, r0
 800944e:	4620      	mov	r0, r4
 8009450:	f000 f980 	bl	8009754 <_ZN15JUnitTestOutputC1Ev>
 8009454:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 fbb2 	bl	8009bc8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8009464:	68fb      	ldr	r3, [r7, #12]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	bd90      	pop	{r4, r7, pc}
 800946e:	bf00      	nop
 8009470:	08024418 	.word	0x08024418

08009474 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8009474:	b590      	push	{r4, r7, lr}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800947c:	22ab      	movs	r2, #171	; 0xab
 800947e:	4906      	ldr	r1, [pc, #24]	; (8009498 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8009480:	2010      	movs	r0, #16
 8009482:	f001 f9b9 	bl	800a7f8 <_ZnwjPKci>
 8009486:	4604      	mov	r4, r0
 8009488:	4620      	mov	r0, r4
 800948a:	f7ff fcb3 	bl	8008df4 <_ZN17ConsoleTestOutputC1Ev>
 800948e:	4623      	mov	r3, r4
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bd90      	pop	{r4, r7, pc}
 8009498:	08024418 	.word	0x08024418

0800949c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80094a8:	22b0      	movs	r2, #176	; 0xb0
 80094aa:	490e      	ldr	r1, [pc, #56]	; (80094e4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80094ac:	2018      	movs	r0, #24
 80094ae:	f001 f9a3 	bl	800a7f8 <_ZnwjPKci>
 80094b2:	4604      	mov	r4, r0
 80094b4:	4620      	mov	r0, r4
 80094b6:	f007 ff83 	bl	80113c0 <_ZN19CompositeTestOutputC1Ev>
 80094ba:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	335c      	adds	r3, #92	; 0x5c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3360      	adds	r3, #96	; 0x60
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	6978      	ldr	r0, [r7, #20]
 80094d6:	4798      	blx	r3
  return composite;
 80094d8:	697b      	ldr	r3, [r7, #20]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	371c      	adds	r7, #28
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd90      	pop	{r4, r7, pc}
 80094e2:	bf00      	nop
 80094e4:	08024418 	.word	0x08024418

080094e8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 80094e8:	b5b0      	push	{r4, r5, r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f00b fe4f 	bl	801519c <_ZN20CommandLineArguments5parseEP10TestPlugin>
 80094fe:	4603      	mov	r3, r0
 8009500:	f083 0301 	eor.w	r3, r3, #1
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d029      	beq.n	800955e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3310      	adds	r3, #16
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	4602      	mov	r2, r0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685d      	ldr	r5, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	332c      	adds	r3, #44	; 0x2c
 8009528:	681c      	ldr	r4, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f00c fa10 	bl	8015954 <_ZNK20CommandLineArguments8needHelpEv>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d006      	beq.n	8009548 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f00c f9fa 	bl	8015938 <_ZNK20CommandLineArguments4helpEv>
 8009544:	4603      	mov	r3, r0
 8009546:	e005      	b.n	8009554 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	4618      	mov	r0, r3
 800954e:	f00c f9e5 	bl	801591c <_ZNK20CommandLineArguments5usageEv>
 8009552:	4603      	mov	r3, r0
 8009554:	4619      	mov	r1, r3
 8009556:	4628      	mov	r0, r5
 8009558:	47a0      	blx	r4
    return false;
 800955a:	2300      	movs	r3, #0
 800955c:	e050      	b.n	8009600 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	4618      	mov	r0, r3
 8009564:	f00d f84c 	bl	8016600 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d02c      	beq.n	80095c8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	330c      	adds	r3, #12
 8009574:	681c      	ldr	r4, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	4618      	mov	r0, r3
 800957c:	f00d f864 	bl	8016648 <_ZNK20CommandLineArguments14getPackageNameEv>
 8009580:	4603      	mov	r3, r0
 8009582:	4619      	mov	r1, r3
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	47a0      	blx	r4
 8009588:	4602      	mov	r2, r0
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	4618      	mov	r0, r3
 8009594:	f00c f9ea 	bl	801596c <_ZNK20CommandLineArguments9isVerboseEv>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02f      	beq.n	80095fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3314      	adds	r3, #20
 80095a4:	681c      	ldr	r4, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685d      	ldr	r5, [r3, #4]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3310      	adds	r3, #16
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	4629      	mov	r1, r5
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	47a0      	blx	r4
 80095c0:	4602      	mov	r2, r0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]
 80095c6:	e01a      	b.n	80095fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f00d f829 	bl	8016624 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
 80095e4:	4602      	mov	r2, r0
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]
 80095ea:	e008      	b.n	80095fe <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3310      	adds	r3, #16
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	4798      	blx	r3
 80095f8:	4602      	mov	r2, r0
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	605a      	str	r2, [r3, #4]
  return true;
 80095fe:	2301      	movs	r3, #1
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bdb0      	pop	{r4, r5, r7, pc}

08009608 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4a05      	ldr	r2, [pc, #20]	; (8009628 <_ZN16SetPointerPluginD1Ev+0x20>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	f008 f9e7 	bl	80119ec <_ZN10TestPluginD1Ev>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	08028bcc 	.word	0x08028bcc

0800962c <_ZN16SetPointerPluginD0Ev>:
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ffe7 	bl	8009608 <_ZN16SetPointerPluginD1Ev>
 800963a:	2114      	movs	r1, #20
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f8ef 	bl	800a820 <_ZdlPvj>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
    }
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4910      	ldr	r1, [pc, #64]	; (80096b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009670:	4618      	mov	r0, r3
 8009672:	f003 fc84 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	609a      	str	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	60da      	str	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	741a      	strb	r2, [r3, #16]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3314      	adds	r3, #20
 800968c:	4908      	ldr	r1, [pc, #32]	; (80096b0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800968e:	4618      	mov	r0, r3
 8009690:	f003 fc75 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	61da      	str	r2, [r3, #28]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	621a      	str	r2, [r3, #32]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	08024480 	.word	0x08024480

080096b4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	605a      	str	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	609a      	str	r2, [r3, #8]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	60da      	str	r2, [r3, #12]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	611a      	str	r2, [r3, #16]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3314      	adds	r3, #20
 80096de:	4907      	ldr	r1, [pc, #28]	; (80096fc <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 80096e0:	4618      	mov	r0, r3
 80096e2:	f003 fc4c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	61da      	str	r2, [r3, #28]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	621a      	str	r2, [r3, #32]
    {
    }
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	08024480 	.word	0x08024480

08009700 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3314      	adds	r3, #20
 800970c:	4618      	mov	r0, r3
 800970e:	f003 ffee 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff ffc4 	bl	80096b4 <_ZN20JUnitTestGroupResultC1Ev>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3328      	adds	r3, #40	; 0x28
 8009730:	4907      	ldr	r1, [pc, #28]	; (8009750 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009732:	4618      	mov	r0, r3
 8009734:	f003 fc23 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3330      	adds	r3, #48	; 0x30
 800973c:	4904      	ldr	r1, [pc, #16]	; (8009750 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800973e:	4618      	mov	r0, r3
 8009740:	f003 fc1d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	08024480 	.word	0x08024480

08009754 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4618      	mov	r0, r3
 8009760:	f007 f936 	bl	80109d0 <_ZN10TestOutputC1Ev>
 8009764:	4a09      	ldr	r2, [pc, #36]	; (800978c <_ZN15JUnitTestOutputC1Ev+0x38>)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	224d      	movs	r2, #77	; 0x4d
 800976c:	4908      	ldr	r1, [pc, #32]	; (8009790 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800976e:	2038      	movs	r0, #56	; 0x38
 8009770:	f001 f842 	bl	800a7f8 <_ZnwjPKci>
 8009774:	4604      	mov	r4, r0
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff ffd0 	bl	800971c <_ZN19JUnitTestOutputImplC1Ev>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	611c      	str	r4, [r3, #16]
{
}
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	bd90      	pop	{r4, r7, pc}
 800978a:	bf00      	nop
 800978c:	0802846c 	.word	0x0802846c
 8009790:	08024484 	.word	0x08024484

08009794 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3330      	adds	r3, #48	; 0x30
 80097a0:	4618      	mov	r0, r3
 80097a2:	f003 ffa4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3328      	adds	r3, #40	; 0x28
 80097aa:	4618      	mov	r0, r3
 80097ac:	f003 ff9f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff ffa4 	bl	8009700 <_ZN20JUnitTestGroupResultD1Ev>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f838 	bl	8009848 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691c      	ldr	r4, [r3, #16]
 80097dc:	2c00      	cmp	r4, #0
 80097de:	d006      	beq.n	80097ee <_ZN15JUnitTestOutputD1Ev+0x2a>
 80097e0:	4620      	mov	r0, r4
 80097e2:	f7ff ffd7 	bl	8009794 <_ZN19JUnitTestOutputImplD1Ev>
 80097e6:	2138      	movs	r1, #56	; 0x38
 80097e8:	4620      	mov	r0, r4
 80097ea:	f001 f819 	bl	800a820 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f007 f90b 	bl	8010a0c <_ZN10TestOutputD1Ev>
}
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd90      	pop	{r4, r7, pc}
 8009800:	0802846c 	.word	0x0802846c

08009804 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
}
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffd9 	bl	80097c4 <_ZN15JUnitTestOutputD1Ev>
 8009812:	2114      	movs	r1, #20
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 f803 	bl	800a820 <_ZdlPvj>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3314      	adds	r3, #20
 8009830:	4618      	mov	r0, r3
 8009832:	f003 ff5c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4618      	mov	r0, r3
 800983a:	f003 ff58 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	2200      	movs	r2, #0
 800985e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f103 0414 	add.w	r4, r3, #20
 8009868:	f107 0308 	add.w	r3, r7, #8
 800986c:	491d      	ldr	r1, [pc, #116]	; (80098e4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800986e:	4618      	mov	r0, r3
 8009870:	f003 fb85 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009874:	f107 0308 	add.w	r3, r7, #8
 8009878:	4619      	mov	r1, r3
 800987a:	4620      	mov	r0, r4
 800987c:	f003 fbeb 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 8009880:	f107 0308 	add.w	r3, r7, #8
 8009884:	4618      	mov	r0, r3
 8009886:	f003 ff32 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d018      	beq.n	80098ca <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d004      	beq.n	80098b0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	3204      	adds	r2, #4
 80098aa:	6812      	ldr	r2, [r2, #0]
 80098ac:	4618      	mov	r0, r3
 80098ae:	4790      	blx	r2
        delete cur;
 80098b0:	697c      	ldr	r4, [r7, #20]
 80098b2:	2c00      	cmp	r4, #0
 80098b4:	d006      	beq.n	80098c4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80098b6:	4620      	mov	r0, r4
 80098b8:	f7ff ffb4 	bl	8009824 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80098bc:	2128      	movs	r1, #40	; 0x28
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 ffae 	bl	800a820 <_ZdlPvj>
        cur = tmp;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	617b      	str	r3, [r7, #20]
    while (cur) {
 80098c8:	e7e3      	b.n	8009892 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2200      	movs	r2, #0
 80098d0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2200      	movs	r2, #0
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd90      	pop	{r4, r7, pc}
 80098e2:	bf00      	nop
 80098e4:	08024480 	.word	0x08024480

080098e8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8009912:	b590      	push	{r4, r7, lr}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	6a1c      	ldr	r4, [r3, #32]
 8009922:	6838      	ldr	r0, [r7, #0]
 8009924:	f009 f9c6 	bl	8012cb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8009928:	4603      	mov	r3, r0
 800992a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	6a1c      	ldr	r4, [r3, #32]
 8009932:	6838      	ldr	r0, [r7, #0]
 8009934:	f7ff fe8a 	bl	800964c <_ZNK10TestResult13getCheckCountEv>
 8009938:	4603      	mov	r3, r0
 800993a:	6223      	str	r3, [r4, #32]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	bd90      	pop	{r4, r7, pc}

08009944 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800995a:	b590      	push	{r4, r7, lr}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691c      	ldr	r4, [r3, #16]
 8009968:	6838      	ldr	r0, [r7, #0]
 800996a:	f009 f9af 	bl	8012ccc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800996e:	4603      	mov	r3, r0
 8009970:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3364      	adds	r3, #100	; 0x64
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
    resetTestGroupResult();
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff ff62 	bl	8009848 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bd90      	pop	{r4, r7, pc}

0800998c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	3201      	adds	r2, #1
 800999e:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f103 0414 	add.w	r4, r3, #20
 80099a8:	f107 0308 	add.w	r3, r7, #8
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f009 fcef 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	4619      	mov	r1, r3
 80099ba:	4620      	mov	r0, r4
 80099bc:	f003 fb4b 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 80099c0:	f107 0308 	add.w	r3, r7, #8
 80099c4:	4618      	mov	r0, r3
 80099c6:	f003 fe92 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 80099ca:	4b3c      	ldr	r3, [pc, #240]	; (8009abc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4798      	blx	r3
 80099d0:	4602      	mov	r2, r0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d110      	bne.n	8009a04 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 80099e2:	2288      	movs	r2, #136	; 0x88
 80099e4:	4936      	ldr	r1, [pc, #216]	; (8009ac0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80099e6:	2028      	movs	r0, #40	; 0x28
 80099e8:	f000 ff06 	bl	800a7f8 <_ZnwjPKci>
 80099ec:	4604      	mov	r4, r0
 80099ee:	4620      	mov	r0, r4
 80099f0:	f7ff fe38 	bl	8009664 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 80099f8:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	6912      	ldr	r2, [r2, #16]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	61d3      	str	r3, [r2, #28]
 8009a02:	e013      	b.n	8009a2c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8009a04:	228b      	movs	r2, #139	; 0x8b
 8009a06:	492e      	ldr	r1, [pc, #184]	; (8009ac0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8009a08:	2028      	movs	r0, #40	; 0x28
 8009a0a:	f000 fef5 	bl	800a7f8 <_ZnwjPKci>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7ff fe27 	bl	8009664 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	6a1a      	ldr	r2, [r3, #32]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a2a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	461c      	mov	r4, r3
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f009 fc9a 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 8009a40:	f107 0310 	add.w	r3, r7, #16
 8009a44:	4619      	mov	r1, r3
 8009a46:	4620      	mov	r0, r4
 8009a48:	f003 fb05 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	4618      	mov	r0, r3
 8009a52:	f003 fe4c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	6a1b      	ldr	r3, [r3, #32]
 8009a5c:	f103 0414 	add.w	r4, r3, #20
 8009a60:	f107 0318 	add.w	r3, r7, #24
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f009 fd55 	bl	8013516 <_ZNK10UtestShell7getFileEv>
 8009a6c:	f107 0318 	add.w	r3, r7, #24
 8009a70:	4619      	mov	r1, r3
 8009a72:	4620      	mov	r0, r4
 8009a74:	f003 faef 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 8009a78:	f107 0318 	add.w	r3, r7, #24
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f003 fe36 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	6a1c      	ldr	r4, [r3, #32]
 8009a88:	6838      	ldr	r0, [r7, #0]
 8009a8a:	f009 fd53 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3318      	adds	r3, #24
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6838      	ldr	r0, [r7, #0]
 8009a9c:	4798      	blx	r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f083 0301 	eor.w	r3, r3, #1
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	741a      	strb	r2, [r3, #16]
    }
}
 8009ab4:	bf00      	nop
 8009ab6:	3724      	adds	r7, #36	; 0x24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd90      	pop	{r4, r7, pc}
 8009abc:	200000a8 	.word	0x200000a8
 8009ac0:	08024484 	.word	0x08024484

08009ac4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08a      	sub	sp, #40	; 0x28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	4928      	ldr	r1, [pc, #160]	; (8009b78 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f003 fa51 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	3328      	adds	r3, #40	; 0x28
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f003 fdf2 	bl	800d6cc <_ZNK12SimpleString7isEmptyEv>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f083 0301 	eor.w	r3, r3, #1
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00f      	beq.n	8009b14 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009afc:	f107 0310 	add.w	r3, r7, #16
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f003 fe70 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	491b      	ldr	r1, [pc, #108]	; (8009b7c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f003 fe7c 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8009b14:	f107 0310 	add.w	r3, r7, #16
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f003 fe64 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3384      	adds	r3, #132	; 0x84
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f107 0018 	add.w	r0, r7, #24
 8009b2c:	f107 0210 	add.w	r2, r7, #16
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	4798      	blx	r3
 8009b34:	f107 0320 	add.w	r3, r7, #32
 8009b38:	4911      	ldr	r1, [pc, #68]	; (8009b80 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f003 fa1f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f107 0220 	add.w	r2, r7, #32
 8009b46:	f107 0118 	add.w	r1, r7, #24
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f003 fe31 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 8009b50:	f107 0320 	add.w	r3, r7, #32
 8009b54:	4618      	mov	r0, r3
 8009b56:	f003 fdca 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8009b5a:	f107 0318 	add.w	r3, r7, #24
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f003 fdc5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8009b64:	f107 0310 	add.w	r3, r7, #16
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f003 fdc0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8009b6e:	bf00      	nop
}
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	3728      	adds	r7, #40	; 0x28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	080244a0 	.word	0x080244a0
 8009b7c:	080244ac 	.word	0x080244ac
 8009b80:	080244b0 	.word	0x080244b0

08009b84 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f003 fa47 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	225f      	movs	r2, #95	; 0x5f
 8009baa:	4619      	mov	r1, r3
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f003 fbcc 	bl	800d34a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e7f0      	b.n	8009b9c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8009bba:	bf00      	nop
}
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	080244b8 	.word	0x080244b8

08009bc8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	3328      	adds	r3, #40	; 0x28
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f003 fa37 	bl	800d056 <_ZN12SimpleStringaSERKS_>
    }
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8009bf0:	b590      	push	{r4, r7, lr}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3368      	adds	r3, #104	; 0x68
 8009bfe:	681c      	ldr	r4, [r3, #0]
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4908      	ldr	r1, [pc, #32]	; (8009c28 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8009c06:	4618      	mov	r0, r3
 8009c08:	f003 f9b9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	47a0      	blx	r4
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f003 fd67 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8009c20:	bf00      	nop
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd90      	pop	{r4, r7, pc}
 8009c28:	080244c4 	.word	0x080244c4

08009c2c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	b08a      	sub	sp, #40	; 0x28
 8009c32:	af04      	add	r7, sp, #16
 8009c34:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8009c3c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8009c42:	3314      	adds	r3, #20
 8009c44:	4618      	mov	r0, r3
 8009c46:	f003 fd25 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009c4a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8009c52:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	4a23      	ldr	r2, [pc, #140]	; (8009ce8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c60:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8009c62:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	691a      	ldr	r2, [r3, #16]
 8009c6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8009c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c70:	099b      	lsrs	r3, r3, #6
 8009c72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8009c7c:	603b      	str	r3, [r7, #0]
 8009c7e:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4798      	blx	r3
 8009c84:	4603      	mov	r3, r0
 8009c86:	f107 0008 	add.w	r0, r7, #8
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	9601      	str	r6, [sp, #4]
 8009c92:	9500      	str	r5, [sp, #0]
 8009c94:	4623      	mov	r3, r4
 8009c96:	4642      	mov	r2, r8
 8009c98:	4915      	ldr	r1, [pc, #84]	; (8009cf0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8009c9a:	f004 fa2f 	bl	800e0fc <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3368      	adds	r3, #104	; 0x68
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	f107 0308 	add.w	r3, r7, #8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f003 fcf2 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	f107 0310 	add.w	r3, r7, #16
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f003 f960 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009cbe:	f107 0310 	add.w	r3, r7, #16
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	47a0      	blx	r4
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f003 fd0e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f003 fd09 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8009cdc:	bf00      	nop
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ce6:	bf00      	nop
 8009ce8:	10624dd3 	.word	0x10624dd3
 8009cec:	200000ac 	.word	0x200000ac
 8009cf0:	080244f0 	.word	0x080244f0

08009cf4 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8009cf4:	b590      	push	{r4, r7, lr}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3368      	adds	r3, #104	; 0x68
 8009d02:	681c      	ldr	r4, [r3, #0]
 8009d04:	f107 0308 	add.w	r3, r7, #8
 8009d08:	4912      	ldr	r1, [pc, #72]	; (8009d54 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f003 f937 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	47a0      	blx	r4
 8009d1a:	f107 0308 	add.w	r3, r7, #8
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f003 fce5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3368      	adds	r3, #104	; 0x68
 8009d2a:	681c      	ldr	r4, [r3, #0]
 8009d2c:	f107 0310 	add.w	r3, r7, #16
 8009d30:	4909      	ldr	r1, [pc, #36]	; (8009d58 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8009d32:	4618      	mov	r0, r3
 8009d34:	f003 f923 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	47a0      	blx	r4
 8009d42:	f107 0310 	add.w	r3, r7, #16
 8009d46:	4618      	mov	r0, r3
 8009d48:	f003 fcd1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8009d4c:	bf00      	nop
 8009d4e:	371c      	adds	r7, #28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd90      	pop	{r4, r7, pc}
 8009d54:	08024560 	.word	0x08024560
 8009d58:	08024570 	.word	0x08024570

08009d5c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f003 fc93 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	4619      	mov	r1, r3
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f003 f903 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8009d78:	4a0e      	ldr	r2, [pc, #56]	; (8009db4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8009d7a:	490f      	ldr	r1, [pc, #60]	; (8009db8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f003 fb13 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8009d82:	4a0e      	ldr	r2, [pc, #56]	; (8009dbc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8009d84:	490e      	ldr	r1, [pc, #56]	; (8009dc0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f003 fb0e 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8009d8c:	4a0d      	ldr	r2, [pc, #52]	; (8009dc4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8009d8e:	490e      	ldr	r1, [pc, #56]	; (8009dc8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f003 fb09 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8009d96:	4a0d      	ldr	r2, [pc, #52]	; (8009dcc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8009d98:	490d      	ldr	r1, [pc, #52]	; (8009dd0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f003 fb04 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8009da0:	4a0c      	ldr	r2, [pc, #48]	; (8009dd4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8009da2:	490d      	ldr	r1, [pc, #52]	; (8009dd8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f003 faff 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8009daa:	bf00      	nop
}
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	08024580 	.word	0x08024580
 8009db8:	08024588 	.word	0x08024588
 8009dbc:	0802458c 	.word	0x0802458c
 8009dc0:	08024594 	.word	0x08024594
 8009dc4:	08024598 	.word	0x08024598
 8009dc8:	080245a0 	.word	0x080245a0
 8009dcc:	080245a4 	.word	0x080245a4
 8009dd0:	080245ac 	.word	0x080245ac
 8009dd4:	080245b0 	.word	0x080245b0
 8009dd8:	080245bc 	.word	0x080245bc

08009ddc <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8009ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de0:	b096      	sub	sp, #88	; 0x58
 8009de2:	af08      	add	r7, sp, #32
 8009de4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80b2 	beq.w	8009f5a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8009dfa:	3328      	adds	r3, #40	; 0x28
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f003 fc49 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009e02:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	3328      	adds	r3, #40	; 0x28
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f003 fc5e 	bl	800d6cc <_ZNK12SimpleString7isEmptyEv>
 8009e10:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8009e16:	4c53      	ldr	r4, [pc, #332]	; (8009f64 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8009e18:	e000      	b.n	8009e1c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8009e1a:	4c53      	ldr	r4, [pc, #332]	; (8009f68 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8009e20:	3314      	adds	r3, #20
 8009e22:	4618      	mov	r0, r3
 8009e24:	f003 fc36 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009e28:	4605      	mov	r5, r0
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f003 fc31 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009e32:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8009e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e36:	6a1a      	ldr	r2, [r3, #32]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009e40:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	4a49      	ldr	r2, [pc, #292]	; (8009f6c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009e48:	fba2 2303 	umull	r2, r3, r2, r3
 8009e4c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8009e4e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	689a      	ldr	r2, [r3, #8]
 8009e54:	4b45      	ldr	r3, [pc, #276]	; (8009f6c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8009e56:	fba3 1302 	umull	r1, r3, r3, r2
 8009e5a:	099b      	lsrs	r3, r3, #6
 8009e5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f003 fc11 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	f107 0014 	add.w	r0, r7, #20
 8009e7c:	9306      	str	r3, [sp, #24]
 8009e7e:	9205      	str	r2, [sp, #20]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	9204      	str	r2, [sp, #16]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	9203      	str	r2, [sp, #12]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	9302      	str	r3, [sp, #8]
 8009e8c:	9601      	str	r6, [sp, #4]
 8009e8e:	9500      	str	r5, [sp, #0]
 8009e90:	4623      	mov	r3, r4
 8009e92:	4642      	mov	r2, r8
 8009e94:	4936      	ldr	r1, [pc, #216]	; (8009f70 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8009e96:	f004 f931 	bl	800e0fc <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3368      	adds	r3, #104	; 0x68
 8009ea0:	681c      	ldr	r4, [r3, #0]
 8009ea2:	f107 0314 	add.w	r3, r7, #20
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f003 fbf4 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009eac:	4602      	mov	r2, r0
 8009eae:	f107 031c 	add.w	r3, r7, #28
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f003 f862 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009eba:	f107 031c 	add.w	r3, r7, #28
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	47a0      	blx	r4
 8009ec4:	f107 031c 	add.w	r3, r7, #28
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f003 fc10 	bl	800d6ee <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ed4:	6a12      	ldr	r2, [r2, #32]
 8009ed6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3388      	adds	r3, #136	; 0x88
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	4798      	blx	r3
 8009eee:	e017      	b.n	8009f20 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	7c1b      	ldrb	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d013      	beq.n	8009f20 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3368      	adds	r3, #104	; 0x68
 8009efe:	681c      	ldr	r4, [r3, #0]
 8009f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f04:	491b      	ldr	r1, [pc, #108]	; (8009f74 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8009f06:	4618      	mov	r0, r3
 8009f08:	f003 f839 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f10:	4619      	mov	r1, r3
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	47a0      	blx	r4
 8009f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f003 fbe7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3368      	adds	r3, #104	; 0x68
 8009f26:	681c      	ldr	r4, [r3, #0]
 8009f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f2c:	4912      	ldr	r1, [pc, #72]	; (8009f78 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f003 f825 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8009f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f38:	4619      	mov	r1, r3
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	47a0      	blx	r4
 8009f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f42:	4618      	mov	r0, r3
 8009f44:	f003 fbd3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8009f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8009f4e:	f107 0314 	add.w	r3, r7, #20
 8009f52:	4618      	mov	r0, r3
 8009f54:	f003 fbcb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    while (cur) {
 8009f58:	e749      	b.n	8009dee <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8009f5a:	bf00      	nop
 8009f5c:	3738      	adds	r7, #56	; 0x38
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f64:	08024480 	.word	0x08024480
 8009f68:	080245c0 	.word	0x080245c0
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	080245c4 	.word	0x080245c4
 8009f74:	08024620 	.word	0x08024620
 8009f78:	08024630 	.word	0x08024630

08009f7c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8009f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7e:	b091      	sub	sp, #68	; 0x44
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68d9      	ldr	r1, [r3, #12]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f107 0210 	add.w	r2, r7, #16
 8009f98:	4610      	mov	r0, r2
 8009f9a:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009f9c:	f107 0310 	add.w	r3, r7, #16
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f003 fb77 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009fa6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	3314      	adds	r3, #20
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
 8009fba:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8009fbc:	461e      	mov	r6, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3380      	adds	r3, #128	; 0x80
 8009fc4:	681c      	ldr	r4, [r3, #0]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68d9      	ldr	r1, [r3, #12]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3318      	adds	r3, #24
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 0220 	add.w	r2, r7, #32
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	f107 0318 	add.w	r3, r7, #24
 8009fe0:	f107 0220 	add.w	r2, r7, #32
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	47a0      	blx	r4
 8009fea:	f107 0318 	add.w	r3, r7, #24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f003 fb50 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f107 0008 	add.w	r0, r7, #8
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4633      	mov	r3, r6
 8009ffe:	462a      	mov	r2, r5
 800a000:	4924      	ldr	r1, [pc, #144]	; (800a094 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800a002:	f004 f87b 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800a006:	f107 0318 	add.w	r3, r7, #24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f003 fb6f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800a010:	f107 0320 	add.w	r3, r7, #32
 800a014:	4618      	mov	r0, r3
 800a016:	f003 fb6a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800a01a:	f107 0310 	add.w	r3, r7, #16
 800a01e:	4618      	mov	r0, r3
 800a020:	f003 fb65 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3368      	adds	r3, #104	; 0x68
 800a02a:	681c      	ldr	r4, [r3, #0]
 800a02c:	f107 0308 	add.w	r3, r7, #8
 800a030:	4618      	mov	r0, r3
 800a032:	f003 fb2f 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800a036:	4602      	mov	r2, r0
 800a038:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a03c:	4611      	mov	r1, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f002 ff9d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	47a0      	blx	r4
 800a04e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a052:	4618      	mov	r0, r3
 800a054:	f003 fb4b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3368      	adds	r3, #104	; 0x68
 800a05e:	681c      	ldr	r4, [r3, #0]
 800a060:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a064:	490c      	ldr	r1, [pc, #48]	; (800a098 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800a066:	4618      	mov	r0, r3
 800a068:	f002 ff89 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a06c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	47a0      	blx	r4
 800a076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a07a:	4618      	mov	r0, r3
 800a07c:	f003 fb37 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4618      	mov	r0, r3
 800a086:	f003 fb32 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800a08a:	bf00      	nop
 800a08c:	373c      	adds	r7, #60	; 0x3c
 800a08e:	46bd      	mov	sp, r7
 800a090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a092:	bf00      	nop
 800a094:	08024640 	.word	0x08024640
 800a098:	0802467c 	.word	0x0802467c

0800a09c <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b08d      	sub	sp, #52	; 0x34
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3368      	adds	r3, #104	; 0x68
 800a0aa:	681c      	ldr	r4, [r3, #0]
 800a0ac:	f107 0308 	add.w	r3, r7, #8
 800a0b0:	4933      	ldr	r1, [pc, #204]	; (800a180 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f002 ff63 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a0b8:	f107 0308 	add.w	r3, r7, #8
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	47a0      	blx	r4
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f003 fb11 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3368      	adds	r3, #104	; 0x68
 800a0d2:	681c      	ldr	r4, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3380      	adds	r3, #128	; 0x80
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	6912      	ldr	r2, [r2, #16]
 800a0e0:	3230      	adds	r2, #48	; 0x30
 800a0e2:	f107 0010 	add.w	r0, r7, #16
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4798      	blx	r3
 800a0ea:	f107 0310 	add.w	r3, r7, #16
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	47a0      	blx	r4
 800a0f4:	f107 0310 	add.w	r3, r7, #16
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f003 faf8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3368      	adds	r3, #104	; 0x68
 800a104:	681c      	ldr	r4, [r3, #0]
 800a106:	f107 0318 	add.w	r3, r7, #24
 800a10a:	491e      	ldr	r1, [pc, #120]	; (800a184 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 ff36 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a112:	f107 0318 	add.w	r3, r7, #24
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	47a0      	blx	r4
 800a11c:	f107 0318 	add.w	r3, r7, #24
 800a120:	4618      	mov	r0, r3
 800a122:	f003 fae4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3368      	adds	r3, #104	; 0x68
 800a12c:	681c      	ldr	r4, [r3, #0]
 800a12e:	f107 0320 	add.w	r3, r7, #32
 800a132:	4915      	ldr	r1, [pc, #84]	; (800a188 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800a134:	4618      	mov	r0, r3
 800a136:	f002 ff22 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a13a:	f107 0320 	add.w	r3, r7, #32
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	47a0      	blx	r4
 800a144:	f107 0320 	add.w	r3, r7, #32
 800a148:	4618      	mov	r0, r3
 800a14a:	f003 fad0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3368      	adds	r3, #104	; 0x68
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a15a:	490c      	ldr	r1, [pc, #48]	; (800a18c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800a15c:	4618      	mov	r0, r3
 800a15e:	f002 ff0e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800a162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	47a0      	blx	r4
 800a16c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a170:	4618      	mov	r0, r3
 800a172:	f003 fabc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800a176:	bf00      	nop
 800a178:	3734      	adds	r7, #52	; 0x34
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd90      	pop	{r4, r7, pc}
 800a17e:	bf00      	nop
 800a180:	08024688 	.word	0x08024688
 800a184:	08024698 	.word	0x08024698
 800a188:	080246a8 	.word	0x080246a8
 800a18c:	080246c4 	.word	0x080246c4

0800a190 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3360      	adds	r3, #96	; 0x60
 800a19e:	681c      	ldr	r4, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	335c      	adds	r3, #92	; 0x5c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6912      	ldr	r2, [r2, #16]
 800a1ac:	3214      	adds	r2, #20
 800a1ae:	f107 0008 	add.w	r0, r7, #8
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4798      	blx	r3
 800a1b6:	f107 0308 	add.w	r3, r7, #8
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	47a0      	blx	r4
 800a1c0:	f107 0308 	add.w	r3, r7, #8
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f003 fa92 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3370      	adds	r3, #112	; 0x70
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	4798      	blx	r3
    writeTestSuiteSummary();
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	3374      	adds	r3, #116	; 0x74
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
    writeProperties();
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3378      	adds	r3, #120	; 0x78
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
    writeTestCases();
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	337c      	adds	r3, #124	; 0x7c
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	4798      	blx	r3
    writeFileEnding();
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	338c      	adds	r3, #140	; 0x8c
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
    closeFile();
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	336c      	adds	r3, #108	; 0x6c
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
}
 800a212:	bf00      	nop
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	bd90      	pop	{r4, r7, pc}

0800a21a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	3330      	adds	r3, #48	; 0x30
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f003 fae2 	bl	800d80c <_ZN12SimpleStringpLEPKc>
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
}
 800a25a:	bf00      	nop
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d113      	bne.n	800a2ce <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	3201      	adds	r2, #1
 800a2ae:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800a2b0:	f240 1233 	movw	r2, #307	; 0x133
 800a2b4:	4908      	ldr	r1, [pc, #32]	; (800a2d8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800a2b6:	2034      	movs	r0, #52	; 0x34
 800a2b8:	f000 fa9e 	bl	800a7f8 <_ZnwjPKci>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f004 fd37 	bl	800ed34 <_ZN11TestFailureC1ERKS_>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	6a1b      	ldr	r3, [r3, #32]
 800a2cc:	60dc      	str	r4, [r3, #12]
    }
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd90      	pop	{r4, r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	08024484 	.word	0x08024484

0800a2dc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800a2dc:	b5b0      	push	{r4, r5, r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800a2e6:	4b08      	ldr	r3, [pc, #32]	; (800a308 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800a2e8:	681d      	ldr	r5, [r3, #0]
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f003 f9d2 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691c      	ldr	r4, [r3, #16]
 800a2f6:	4905      	ldr	r1, [pc, #20]	; (800a30c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	47a8      	blx	r5
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bdb0      	pop	{r4, r5, r7, pc}
 800a308:	200000b4 	.word	0x200000b4
 800a30c:	080246d4 	.word	0x080246d4

0800a310 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800a310:	b590      	push	{r4, r7, lr}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800a31c:	681c      	ldr	r4, [r3, #0]
 800a31e:	6838      	ldr	r0, [r7, #0]
 800a320:	f003 f9b8 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800a324:	4602      	mov	r2, r0
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	47a0      	blx	r4
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	200000b8 	.word	0x200000b8

0800a340 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800a348:	4b05      	ldr	r3, [pc, #20]	; (800a360 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	6912      	ldr	r2, [r2, #16]
 800a350:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
}
 800a356:	bf00      	nop
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	200000bc 	.word	0x200000bc

0800a364 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
        return false;
 800a372:	2300      	movs	r3, #0
    }
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
    {
 800a388:	4a04      	ldr	r2, [pc, #16]	; (800a39c <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
    }
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	08028518 	.word	0x08028518

0800a3a0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    }
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ffe9 	bl	800a380 <_ZN17MemoryLeakFailureD1Ev>
 800a3ae:	2104      	movs	r1, #4
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa35 	bl	800a820 <_ZdlPvj>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800a3c0:	b590      	push	{r4, r7, lr}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	687c      	ldr	r4, [r7, #4]
 800a3ca:	f000 fc71 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f00c ff6c 	bl	80172ae <_ZN18MemoryLeakDetector8getMutexEv>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f002 fb24 	bl	800ca28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd90      	pop	{r4, r7, pc}

0800a3ea <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f002 fb29 	bl	800ca4c <_ZN15ScopedMutexLockD1Ev>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800a404:	b590      	push	{r4, r7, lr}
 800a406:	b087      	sub	sp, #28
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800a410:	f000 fc4e 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a414:	4604      	mov	r4, r0
 800a416:	f006 f8df 	bl	80105d8 <_Z25getCurrentMallocAllocatorv>
 800a41a:	4601      	mov	r1, r0
 800a41c:	2301      	movs	r3, #1
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	4620      	mov	r0, r4
 800a42a:	f00d f983 	bl	8017734 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a42e:	4603      	mov	r3, r0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	bd90      	pop	{r4, r7, pc}

0800a438 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800a438:	b590      	push	{r4, r7, lr}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800a444:	f000 fc34 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a448:	4603      	mov	r3, r0
 800a44a:	68f9      	ldr	r1, [r7, #12]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f00c ffdd 	bl	801740c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800a452:	f000 fc2d 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a456:	4604      	mov	r4, r0
 800a458:	f006 f8be 	bl	80105d8 <_Z25getCurrentMallocAllocatorv>
 800a45c:	4601      	mov	r1, r0
 800a45e:	2301      	movs	r3, #1
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4620      	mov	r0, r4
 800a46c:	f00d f996 	bl	801779c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	bd90      	pop	{r4, r7, pc}

0800a478 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b089      	sub	sp, #36	; 0x24
 800a47c:	af04      	add	r7, sp, #16
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800a486:	f000 fc13 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a48a:	4604      	mov	r4, r0
 800a48c:	f006 f8a4 	bl	80105d8 <_Z25getCurrentMallocAllocatorv>
 800a490:	4601      	mov	r1, r0
 800a492:	2301      	movs	r3, #1
 800a494:	9302      	str	r3, [sp, #8]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	9301      	str	r3, [sp, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f00d f9de 	bl	8017864 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800a4a8:	4603      	mov	r3, r0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd90      	pop	{r4, r7, pc}
	...

0800a4b4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <_ZL13normal_mallocjPKcj+0x20>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	4798      	blx	r3
 800a4c8:	4603      	mov	r3, r0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200000c8 	.word	0x200000c8

0800a4d8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <_ZL14normal_reallocPvjPKcj+0x24>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	4798      	blx	r3
 800a4f0:	4603      	mov	r3, r0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200000cc 	.word	0x200000cc

0800a500 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800a50c:	4b03      	ldr	r3, [pc, #12]	; (800a51c <_ZL11normal_freePvPKcj+0x1c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	4798      	blx	r3
}
 800a514:	bf00      	nop
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	200000d0 	.word	0x200000d0

0800a520 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff ff47 	bl	800a3c0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a532:	f000 fbbd 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a536:	4604      	mov	r4, r0
 800a538:	f005 ff9e 	bl	8010478 <_Z22getCurrentNewAllocatorv>
 800a53c:	4601      	mov	r1, r0
 800a53e:	2300      	movs	r3, #0
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	4620      	mov	r0, r4
 800a544:	f00d f864 	bl	8017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a548:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a54a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff ff4a 	bl	800a3ea <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800a556:	4623      	mov	r3, r4
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd90      	pop	{r4, r7, pc}

0800a560 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a568:	f000 fba2 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a56c:	4604      	mov	r4, r0
 800a56e:	f005 ff83 	bl	8010478 <_Z22getCurrentNewAllocatorv>
 800a572:	4601      	mov	r1, r0
 800a574:	2300      	movs	r3, #0
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	4620      	mov	r0, r4
 800a57a:	f00d f849 	bl	8017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a57e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a580:	68fb      	ldr	r3, [r7, #12]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	bd90      	pop	{r4, r7, pc}

0800a58a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a58a:	b590      	push	{r4, r7, lr}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800a592:	f000 fb8d 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a596:	4604      	mov	r4, r0
 800a598:	f005 ff6e 	bl	8010478 <_Z22getCurrentNewAllocatorv>
 800a59c:	4601      	mov	r1, r0
 800a59e:	2300      	movs	r3, #0
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f00d f834 	bl	8017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a5a8:	4603      	mov	r3, r0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd90      	pop	{r4, r7, pc}

0800a5b2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a5b2:	b590      	push	{r4, r7, lr}
 800a5b4:	b089      	sub	sp, #36	; 0x24
 800a5b6:	af02      	add	r7, sp, #8
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800a5be:	f000 fb77 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	f005 ff58 	bl	8010478 <_Z22getCurrentNewAllocatorv>
 800a5c8:	4601      	mov	r1, r0
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f00d f8ac 	bl	8017734 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a5dc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a5de:	697b      	ldr	r3, [r7, #20]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd90      	pop	{r4, r7, pc}

0800a5e8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a5e8:	b590      	push	{r4, r7, lr}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a5f0:	f000 fb5e 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	f005 ff97 	bl	8010528 <_Z27getCurrentNewArrayAllocatorv>
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4620      	mov	r0, r4
 800a602:	f00d f805 	bl	8017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a606:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a608:	68fb      	ldr	r3, [r7, #12]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd90      	pop	{r4, r7, pc}

0800a612 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a612:	b590      	push	{r4, r7, lr}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800a61a:	f000 fb49 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a61e:	4604      	mov	r4, r0
 800a620:	f005 ff82 	bl	8010528 <_Z27getCurrentNewArrayAllocatorv>
 800a624:	4601      	mov	r1, r0
 800a626:	2300      	movs	r3, #0
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	4620      	mov	r0, r4
 800a62c:	f00c fff0 	bl	8017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800a630:	4603      	mov	r3, r0
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bd90      	pop	{r4, r7, pc}

0800a63a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800a63a:	b590      	push	{r4, r7, lr}
 800a63c:	b089      	sub	sp, #36	; 0x24
 800a63e:	af02      	add	r7, sp, #8
 800a640:	60f8      	str	r0, [r7, #12]
 800a642:	60b9      	str	r1, [r7, #8]
 800a644:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800a646:	f000 fb33 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a64a:	4604      	mov	r4, r0
 800a64c:	f005 ff6c 	bl	8010528 <_Z27getCurrentNewArrayAllocatorv>
 800a650:	4601      	mov	r1, r0
 800a652:	2300      	movs	r3, #0
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	4620      	mov	r0, r4
 800a660:	f00d f868 	bl	8017734 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800a664:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a666:	697b      	ldr	r3, [r7, #20]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	371c      	adds	r7, #28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd90      	pop	{r4, r7, pc}

0800a670 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800a670:	b590      	push	{r4, r7, lr}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a678:	f000 fb1a 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a67c:	4603      	mov	r3, r0
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	4618      	mov	r0, r3
 800a682:	f00c fec3 	bl	801740c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800a686:	f000 fb13 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a68a:	4604      	mov	r4, r0
 800a68c:	f005 fef4 	bl	8010478 <_Z22getCurrentNewAllocatorv>
 800a690:	4601      	mov	r1, r0
 800a692:	2300      	movs	r3, #0
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	4620      	mov	r0, r4
 800a698:	f00d f8ca 	bl	8017830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd90      	pop	{r4, r7, pc}

0800a6a4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800a6a4:	b590      	push	{r4, r7, lr}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800a6ac:	f000 fb00 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f00c fea9 	bl	801740c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800a6ba:	f000 faf9 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800a6be:	4604      	mov	r4, r0
 800a6c0:	f005 ff32 	bl	8010528 <_Z27getCurrentNewArrayAllocatorv>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f00d f8b0 	bl	8017830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd90      	pop	{r4, r7, pc}

0800a6d8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a6e0:	4b04      	ldr	r3, [pc, #16]	; (800a6f4 <_ZL19normal_operator_newj+0x1c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
 800a6e8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	200000c8 	.word	0x200000c8

0800a6f8 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	4798      	blx	r3
 800a708:	4603      	mov	r3, r0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200000c8 	.word	0x200000c8

0800a718 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a724:	4b04      	ldr	r3, [pc, #16]	; (800a738 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	4798      	blx	r3
 800a72c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a72e:	697b      	ldr	r3, [r7, #20]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	200000c8 	.word	0x200000c8

0800a73c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <_ZL25normal_operator_new_arrayj+0x1c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	4798      	blx	r3
 800a74c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a74e:	68fb      	ldr	r3, [r7, #12]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	200000c8 	.word	0x200000c8

0800a75c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800a764:	4b04      	ldr	r3, [pc, #16]	; (800a778 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
 800a76c:	4603      	mov	r3, r0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	200000c8 	.word	0x200000c8

0800a77c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800a788:	4b04      	ldr	r3, [pc, #16]	; (800a79c <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	4798      	blx	r3
 800a790:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800a792:	697b      	ldr	r3, [r7, #20]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200000c8 	.word	0x200000c8

0800a7a0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <_ZL22normal_operator_deletePv+0x18>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	4798      	blx	r3
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	200000d0 	.word	0x200000d0

0800a7bc <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800a7c4:	4b03      	ldr	r3, [pc, #12]	; (800a7d4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	4798      	blx	r3
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	200000d0 	.word	0x200000d0

0800a7d8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800a7e0:	4b04      	ldr	r3, [pc, #16]	; (800a7f4 <_Znwj+0x1c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2000002c 	.word	0x2000002c

0800a7f8 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <_ZnwjPKci+0x24>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	4798      	blx	r3
 800a810:	4603      	mov	r3, r0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20000034 	.word	0x20000034

0800a820 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800a82a:	4b04      	ldr	r3, [pc, #16]	; (800a83c <_ZdlPvj+0x1c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000044 	.word	0x20000044

0800a840 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800a84c:	4b05      	ldr	r3, [pc, #20]	; (800a864 <_ZnajPKci+0x24>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	68b9      	ldr	r1, [r7, #8]
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	4798      	blx	r3
 800a858:	4603      	mov	r3, r0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000040 	.word	0x20000040

0800a868 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800a870:	4b03      	ldr	r3, [pc, #12]	; (800a880 <_ZdaPv+0x18>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000048 	.word	0x20000048

0800a884 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800a88e:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <_ZdaPvj+0x1c>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000048 	.word	0x20000048

0800a8a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800a8a8:	4b12      	ldr	r3, [pc, #72]	; (800a8f4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800a8aa:	4a13      	ldr	r2, [pc, #76]	; (800a8f8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800a8ac:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800a8b0:	4a13      	ldr	r2, [pc, #76]	; (800a900 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800a8b2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800a8b4:	4b13      	ldr	r3, [pc, #76]	; (800a904 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800a8b6:	4a14      	ldr	r2, [pc, #80]	; (800a908 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800a8b8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800a8ba:	4b14      	ldr	r3, [pc, #80]	; (800a90c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800a8bc:	4a14      	ldr	r2, [pc, #80]	; (800a910 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800a8be:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800a8c2:	4a15      	ldr	r2, [pc, #84]	; (800a918 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800a8c4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800a8c6:	4b15      	ldr	r3, [pc, #84]	; (800a91c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800a8c8:	4a15      	ldr	r2, [pc, #84]	; (800a920 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800a8ca:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800a8cc:	4b15      	ldr	r3, [pc, #84]	; (800a924 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800a8ce:	4a16      	ldr	r2, [pc, #88]	; (800a928 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800a8d0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800a8d2:	4b16      	ldr	r3, [pc, #88]	; (800a92c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800a8d4:	4a16      	ldr	r2, [pc, #88]	; (800a930 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800a8d6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800a8d8:	4b16      	ldr	r3, [pc, #88]	; (800a934 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800a8dc:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800a8de:	4b17      	ldr	r3, [pc, #92]	; (800a93c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800a8e0:	4a17      	ldr	r2, [pc, #92]	; (800a940 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800a8e2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800a8e4:	4b17      	ldr	r3, [pc, #92]	; (800a944 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800a8e6:	4a18      	ldr	r2, [pc, #96]	; (800a948 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800a8e8:	601a      	str	r2, [r3, #0]

#endif
}
 800a8ea:	bf00      	nop
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	2000002c 	.word	0x2000002c
 800a8f8:	0800a6d9 	.word	0x0800a6d9
 800a8fc:	20000030 	.word	0x20000030
 800a900:	0800a6f9 	.word	0x0800a6f9
 800a904:	20000034 	.word	0x20000034
 800a908:	0800a719 	.word	0x0800a719
 800a90c:	20000038 	.word	0x20000038
 800a910:	0800a73d 	.word	0x0800a73d
 800a914:	2000003c 	.word	0x2000003c
 800a918:	0800a75d 	.word	0x0800a75d
 800a91c:	20000040 	.word	0x20000040
 800a920:	0800a77d 	.word	0x0800a77d
 800a924:	20000044 	.word	0x20000044
 800a928:	0800a7a1 	.word	0x0800a7a1
 800a92c:	20000048 	.word	0x20000048
 800a930:	0800a7bd 	.word	0x0800a7bd
 800a934:	20000014 	.word	0x20000014
 800a938:	0800a4b5 	.word	0x0800a4b5
 800a93c:	2000001c 	.word	0x2000001c
 800a940:	0800a4d9 	.word	0x0800a4d9
 800a944:	20000018 	.word	0x20000018
 800a948:	0800a501 	.word	0x0800a501

0800a94c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800a950:	4b08      	ldr	r3, [pc, #32]	; (800a974 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a08      	ldr	r2, [pc, #32]	; (800a978 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d004      	beq.n	800a964 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800a95a:	4b06      	ldr	r3, [pc, #24]	; (800a974 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a07      	ldr	r2, [pc, #28]	; (800a97c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d101      	bne.n	800a968 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800a968:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	2000002c 	.word	0x2000002c
 800a978:	0800a561 	.word	0x0800a561
 800a97c:	0800a521 	.word	0x0800a521

0800a980 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800a984:	4b1f      	ldr	r3, [pc, #124]	; (800aa04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3301      	adds	r3, #1
 800a98a:	4a1e      	ldr	r2, [pc, #120]	; (800aa04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a98c:	6013      	str	r3, [r2, #0]
 800a98e:	4b1d      	ldr	r3, [pc, #116]	; (800aa04 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b01      	cmp	r3, #1
 800a994:	bfcc      	ite	gt
 800a996:	2301      	movgt	r3, #1
 800a998:	2300      	movle	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d12e      	bne.n	800a9fe <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800a9a0:	4b19      	ldr	r3, [pc, #100]	; (800aa08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a19      	ldr	r2, [pc, #100]	; (800aa0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800a9a6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800a9a8:	4b19      	ldr	r3, [pc, #100]	; (800aa10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a19      	ldr	r2, [pc, #100]	; (800aa14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800a9ae:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800a9b0:	4b19      	ldr	r3, [pc, #100]	; (800aa18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a19      	ldr	r2, [pc, #100]	; (800aa1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800a9b6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800a9b8:	4b19      	ldr	r3, [pc, #100]	; (800aa20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a19      	ldr	r2, [pc, #100]	; (800aa24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800a9be:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800a9c0:	4b19      	ldr	r3, [pc, #100]	; (800aa28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a19      	ldr	r2, [pc, #100]	; (800aa2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800a9c6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800a9c8:	4b19      	ldr	r3, [pc, #100]	; (800aa30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800a9ce:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800a9d0:	4b19      	ldr	r3, [pc, #100]	; (800aa38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a19      	ldr	r2, [pc, #100]	; (800aa3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800a9d6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800a9d8:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a19      	ldr	r2, [pc, #100]	; (800aa44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800a9de:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800a9e0:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800a9e6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800a9e8:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a19      	ldr	r2, [pc, #100]	; (800aa54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800a9ee:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800a9f0:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a19      	ldr	r2, [pc, #100]	; (800aa5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800a9f6:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800a9f8:	f7ff ff54 	bl	800a8a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800a9fc:	e000      	b.n	800aa00 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800a9fe:	bf00      	nop
#endif
}
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	200008a8 	.word	0x200008a8
 800aa08:	2000002c 	.word	0x2000002c
 800aa0c:	2000004c 	.word	0x2000004c
 800aa10:	20000030 	.word	0x20000030
 800aa14:	20000050 	.word	0x20000050
 800aa18:	20000034 	.word	0x20000034
 800aa1c:	20000054 	.word	0x20000054
 800aa20:	20000038 	.word	0x20000038
 800aa24:	20000058 	.word	0x20000058
 800aa28:	2000003c 	.word	0x2000003c
 800aa2c:	2000005c 	.word	0x2000005c
 800aa30:	20000040 	.word	0x20000040
 800aa34:	20000060 	.word	0x20000060
 800aa38:	20000044 	.word	0x20000044
 800aa3c:	20000064 	.word	0x20000064
 800aa40:	20000048 	.word	0x20000048
 800aa44:	20000068 	.word	0x20000068
 800aa48:	20000014 	.word	0x20000014
 800aa4c:	20000020 	.word	0x20000020
 800aa50:	2000001c 	.word	0x2000001c
 800aa54:	20000028 	.word	0x20000028
 800aa58:	20000018 	.word	0x20000018
 800aa5c:	20000024 	.word	0x20000024

0800aa60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800aa64:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	4a1e      	ldr	r2, [pc, #120]	; (800aae4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	4b1d      	ldr	r3, [pc, #116]	; (800aae4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bfcc      	ite	gt
 800aa76:	2301      	movgt	r3, #1
 800aa78:	2300      	movle	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d12c      	bne.n	800aada <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800aa80:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a19      	ldr	r2, [pc, #100]	; (800aaec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800aa86:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800aa88:	4b19      	ldr	r3, [pc, #100]	; (800aaf0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a19      	ldr	r2, [pc, #100]	; (800aaf4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800aa8e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800aa90:	4b19      	ldr	r3, [pc, #100]	; (800aaf8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a19      	ldr	r2, [pc, #100]	; (800aafc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800aa96:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800aa98:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a19      	ldr	r2, [pc, #100]	; (800ab04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800aa9e:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800aaa0:	4b19      	ldr	r3, [pc, #100]	; (800ab08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a19      	ldr	r2, [pc, #100]	; (800ab0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800aaa6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800aaa8:	4b19      	ldr	r3, [pc, #100]	; (800ab10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a19      	ldr	r2, [pc, #100]	; (800ab14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800aaae:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800aab0:	4b19      	ldr	r3, [pc, #100]	; (800ab18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a19      	ldr	r2, [pc, #100]	; (800ab1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800aab6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800aab8:	4b19      	ldr	r3, [pc, #100]	; (800ab20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a19      	ldr	r2, [pc, #100]	; (800ab24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800aabe:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800aac0:	4b19      	ldr	r3, [pc, #100]	; (800ab28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a19      	ldr	r2, [pc, #100]	; (800ab2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800aac6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800aac8:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a19      	ldr	r2, [pc, #100]	; (800ab34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800aace:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800aad0:	4b19      	ldr	r3, [pc, #100]	; (800ab38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a19      	ldr	r2, [pc, #100]	; (800ab3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	e000      	b.n	800aadc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800aada:	bf00      	nop
#endif
}
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr
 800aae4:	200008a8 	.word	0x200008a8
 800aae8:	2000004c 	.word	0x2000004c
 800aaec:	2000002c 	.word	0x2000002c
 800aaf0:	20000050 	.word	0x20000050
 800aaf4:	20000030 	.word	0x20000030
 800aaf8:	20000054 	.word	0x20000054
 800aafc:	20000034 	.word	0x20000034
 800ab00:	20000058 	.word	0x20000058
 800ab04:	20000038 	.word	0x20000038
 800ab08:	2000005c 	.word	0x2000005c
 800ab0c:	2000003c 	.word	0x2000003c
 800ab10:	20000060 	.word	0x20000060
 800ab14:	20000040 	.word	0x20000040
 800ab18:	20000064 	.word	0x20000064
 800ab1c:	20000044 	.word	0x20000044
 800ab20:	20000068 	.word	0x20000068
 800ab24:	20000048 	.word	0x20000048
 800ab28:	20000020 	.word	0x20000020
 800ab2c:	20000014 	.word	0x20000014
 800ab30:	20000028 	.word	0x20000028
 800ab34:	2000001c 	.word	0x2000001c
 800ab38:	20000024 	.word	0x20000024
 800ab3c:	20000018 	.word	0x20000018

0800ab40 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
    {
 800ab48:	4a05      	ldr	r2, [pc, #20]	; (800ab60 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	601a      	str	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7ff fc15 	bl	800a380 <_ZN17MemoryLeakFailureD1Ev>
    }
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	08028504 	.word	0x08028504

0800ab64 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
    }
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f7ff ffe7 	bl	800ab40 <_ZN25MemoryLeakWarningReporterD1Ev>
 800ab72:	2104      	movs	r1, #4
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff fe53 	bl	800a820 <_ZdlPvj>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	4a04      	ldr	r2, [pc, #16]	; (800aba0 <_ZN14TestTerminatorC1Ev+0x1c>)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	08028eb0 	.word	0x08028eb0

0800aba4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff ffe8 	bl	800ab84 <_ZN14TestTerminatorC1Ev>
 800abb4:	4a03      	ldr	r2, [pc, #12]	; (800abc4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4618      	mov	r0, r3
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	08028e88 	.word	0x08028e88

0800abc8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	b099      	sub	sp, #100	; 0x64
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800abd2:	f009 fdb7 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800abd6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800abd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	339c      	adds	r3, #156	; 0x9c
 800abde:	681c      	ldr	r4, [r3, #0]
 800abe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800abe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abe6:	4618      	mov	r0, r3
 800abe8:	f008 fbc4 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800abec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800abf0:	4618      	mov	r0, r3
 800abf2:	f002 fd4f 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800abf6:	4605      	mov	r5, r0
 800abf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800abfa:	f008 fc9b 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 800abfe:	4606      	mov	r6, r0
 800ac00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f002 f9b9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800ac0c:	f107 000c 	add.w	r0, r7, #12
 800ac10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	4633      	mov	r3, r6
 800ac18:	462a      	mov	r2, r5
 800ac1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac1c:	f004 fd14 	bl	800f648 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800ac20:	2300      	movs	r3, #0
 800ac22:	653b      	str	r3, [r7, #80]	; 0x50
 800ac24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ffbb 	bl	800aba4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800ac2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ac32:	f107 030c 	add.w	r3, r7, #12
 800ac36:	4619      	mov	r1, r3
 800ac38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ac3a:	47a0      	blx	r4
 800ac3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac40:	4618      	mov	r0, r3
 800ac42:	f009 fe79 	bl	8014938 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f9ac 	bl	800afa8 <_ZN11FailFailureD1Ev>
 800ac50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac54:	4618      	mov	r0, r3
 800ac56:	f002 fd4a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800ac5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f002 fd45 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800ac64:	bf00      	nop
 800ac66:	375c      	adds	r7, #92	; 0x5c
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac6c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	4a04      	ldr	r2, [pc, #16]	; (800ac88 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	08028518 	.word	0x08028518

0800ac8c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff ffe8 	bl	800ac6c <_ZN17MemoryLeakFailureC1Ev>
 800ac9c:	4a03      	ldr	r2, [pc, #12]	; (800acac <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4618      	mov	r0, r3
 800aca6:	3708      	adds	r7, #8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	08028504 	.word	0x08028504

0800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800acb0:	b598      	push	{r3, r4, r7, lr}
 800acb2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800acb4:	4b11      	ldr	r3, [pc, #68]	; (800acfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d11b      	bne.n	800acf4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800acbc:	f7ff fe60 	bl	800a980 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800acc0:	2004      	movs	r0, #4
 800acc2:	f7ff fd89 	bl	800a7d8 <_Znwj>
 800acc6:	4603      	mov	r3, r0
 800acc8:	461c      	mov	r4, r3
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff ffde 	bl	800ac8c <_ZN25MemoryLeakWarningReporterC1Ev>
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800acd2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800acd4:	f241 1050 	movw	r0, #4432	; 0x1150
 800acd8:	f7ff fd7e 	bl	800a7d8 <_Znwj>
 800acdc:	4603      	mov	r3, r0
 800acde:	461c      	mov	r4, r3
 800ace0:	4b07      	ldr	r3, [pc, #28]	; (800ad00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4619      	mov	r1, r3
 800ace6:	4620      	mov	r0, r4
 800ace8:	f00c fa3e 	bl	8017168 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800acec:	4b03      	ldr	r3, [pc, #12]	; (800acfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800acee:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800acf0:	f7ff feb6 	bl	800aa60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800acf4:	4b01      	ldr	r3, [pc, #4]	; (800acfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	bd98      	pop	{r3, r4, r7, pc}
 800acfc:	200008b0 	.word	0x200008b0
 800ad00:	200008ac 	.word	0x200008ac

0800ad04 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	78fa      	ldrb	r2, [r7, #3]
 800ad14:	765a      	strb	r2, [r3, #25]
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
	...

0800ad24 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800ad28:	f7ff fdbc 	bl	800a8a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800ad2c:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	3204      	adds	r2, #4
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	4790      	blx	r2
    delete globalReporter;
 800ad3e:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	3204      	adds	r2, #4
 800ad4a:	6812      	ldr	r2, [r2, #0]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	4790      	blx	r2
    globalDetector = NULLPTR;
 800ad50:	4b02      	ldr	r3, [pc, #8]	; (800ad5c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
}
 800ad56:	bf00      	nop
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	200008b0 	.word	0x200008b0
 800ad60:	200008ac 	.word	0x200008ac

0800ad64 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f006 fdfd 	bl	8011974 <_ZN10TestPluginC1ERK12SimpleString>
 800ad7a:	4a14      	ldr	r2, [pc, #80]	; (800adcc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	761a      	strb	r2, [r3, #24]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	765a      	strb	r2, [r3, #25]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800ad9a:	4a0d      	ldr	r2, [pc, #52]	; (800add0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d003      	beq.n	800adae <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	615a      	str	r2, [r3, #20]
 800adac:	e004      	b.n	800adb8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800adae:	f7ff ff7f 	bl	800acb0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800adb2:	4602      	mov	r2, r0
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f00c fa69 	bl	8017294 <_ZN18MemoryLeakDetector6enableEv>
}
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	0802852c 	.word	0x0802852c
 800add0:	200008b4 	.word	0x200008b4

0800add4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	4a09      	ldr	r2, [pc, #36]	; (800ae04 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	7e5b      	ldrb	r3, [r3, #25]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800adea:	f7ff fd5b 	bl	800a8a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800adee:	f7ff ff99 	bl	800ad24 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f006 fdf9 	bl	80119ec <_ZN10TestPluginD1Ev>
    }
}
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	0802852c 	.word	0x0802852c

0800ae08 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
}
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff ffdf 	bl	800add4 <_ZN23MemoryLeakWarningPluginD1Ev>
 800ae16:	2124      	movs	r1, #36	; 0x24
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff fd01 	bl	800a820 <_ZdlPvj>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f00c fa0e 	bl	801725a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7fd ffaf 	bl	8008da2 <_ZNK10TestResult15getFailureCountEv>
 800ae44:	4602      	mov	r2, r0
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	621a      	str	r2, [r3, #32]
}
 800ae4a:	bf00      	nop
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b097      	sub	sp, #92	; 0x5c
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f00c fa08 	bl	801727a <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	2103      	movs	r1, #3
 800ae70:	4618      	mov	r0, r3
 800ae72:	f00c fda5 	bl	80179c0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800ae76:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	7e1b      	ldrb	r3, [r3, #24]
 800ae7c:	f083 0301 	eor.w	r3, r3, #1
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d009      	beq.n	800aea4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6a1c      	ldr	r4, [r3, #32]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7fd ff84 	bl	8008da2 <_ZNK10TestResult15getFailureCountEv>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	429c      	cmp	r4, r3
 800ae9e:	d101      	bne.n	800aea4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800aea0:	2301      	movs	r3, #1
 800aea2:	e000      	b.n	800aea6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800aea4:	2300      	movs	r3, #0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d04c      	beq.n	800af44 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800aeaa:	f7ff fd4f 	bl	800a94c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d028      	beq.n	800af06 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	2103      	movs	r1, #3
 800aeba:	4618      	mov	r0, r3
 800aebc:	f00c fd45 	bl	801794a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800aec0:	4602      	mov	r2, r0
 800aec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aec6:	4611      	mov	r1, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f002 f858 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800aece:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800aed2:	f107 0310 	add.w	r3, r7, #16
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f003 feaf 	bl	800ec3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800aede:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aee2:	4618      	mov	r0, r3
 800aee4:	f002 fc03 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3334      	adds	r3, #52	; 0x34
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f107 0210 	add.w	r2, r7, #16
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800aefa:	f107 0310 	add.w	r3, r7, #16
 800aefe:	4618      	mov	r0, r3
 800af00:	f003 ff5c 	bl	800edbc <_ZN11TestFailureD1Ev>
 800af04:	e01e      	b.n	800af44 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d01a      	beq.n	800af44 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3338      	adds	r3, #56	; 0x38
 800af14:	681c      	ldr	r4, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	461a      	mov	r2, r3
 800af1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af20:	4910      	ldr	r1, [pc, #64]	; (800af64 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800af22:	4618      	mov	r0, r3
 800af24:	f003 f8ea 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800af28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 fbb1 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800af32:	4603      	mov	r3, r0
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	47a0      	blx	r4
 800af3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800af3e:	4618      	mov	r0, r3
 800af40:	f002 fbd5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	4618      	mov	r0, r3
 800af4a:	f00c fd13 	bl	8017974 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	61da      	str	r2, [r3, #28]
}
 800af5a:	bf00      	nop
 800af5c:	375c      	adds	r7, #92	; 0x5c
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd90      	pop	{r4, r7, pc}
 800af62:	bf00      	nop
 800af64:	080246d8 	.word	0x080246d8

0800af68 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	2102      	movs	r1, #2
 800af78:	4618      	mov	r0, r3
 800af7a:	f00c fd21 	bl	80179c0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800af7e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d007      	beq.n	800af98 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	2102      	movs	r1, #2
 800af8e:	4618      	mov	r0, r3
 800af90:	f00c fcdb 	bl	801794a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800af94:	4603      	mov	r3, r0
 800af96:	e000      	b.n	800af9a <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800af98:	4b02      	ldr	r3, [pc, #8]	; (800afa4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	08024718 	.word	0x08024718

0800afa8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	4a05      	ldr	r2, [pc, #20]	; (800afc8 <_ZN11FailFailureD1Ev+0x20>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f003 feff 	bl	800edbc <_ZN11TestFailureD1Ev>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08028574 	.word	0x08028574

0800afcc <_ZN11FailFailureD0Ev>:
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffe7 	bl	800afa8 <_ZN11FailFailureD1Ev>
 800afda:	2134      	movs	r1, #52	; 0x34
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fc1f 	bl	800a820 <_ZdlPvj>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	4a06      	ldr	r2, [pc, #24]	; (800b040 <_ZN19MockFailureReporterC1Ev+0x24>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	711a      	strb	r2, [r3, #4]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	08029750 	.word	0x08029750

0800b044 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	4a04      	ldr	r2, [pc, #16]	; (800b060 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	08029750 	.word	0x08029750

0800b064 <_ZN19MockFailureReporterD0Ev>:
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ffe9 	bl	800b044 <_ZN19MockFailureReporterD1Ev>
 800b072:	2108      	movs	r1, #8
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff fbd3 	bl	800a820 <_ZdlPvj>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	4a05      	ldr	r2, [pc, #20]	; (800b0a4 <_ZN11MockFailureD1Ev+0x20>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4618      	mov	r0, r3
 800b096:	f003 fe91 	bl	800edbc <_ZN11TestFailureD1Ev>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4618      	mov	r0, r3
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	080286c8 	.word	0x080286c8

0800b0a8 <_ZN11MockFailureD0Ev>:
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff ffe7 	bl	800b084 <_ZN11MockFailureD1Ev>
 800b0b6:	2134      	movs	r1, #52	; 0x34
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fbb1 	bl	800a820 <_ZdlPvj>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <_ZN14MockNamedValueC1ERKS_+0x64>)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	1d1a      	adds	r2, r3, #4
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f001 ff9f 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f103 020c 	add.w	r2, r3, #12
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	330c      	adds	r3, #12
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	f001 ff96 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	f102 0418 	add.w	r4, r2, #24
 800b102:	3318      	adds	r3, #24
 800b104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	629a      	str	r2, [r3, #40]	; 0x28
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	62da      	str	r2, [r3, #44]	; 0x2c
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	631a      	str	r2, [r3, #48]	; 0x30
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd90      	pop	{r4, r7, pc}
 800b12c:	08029790 	.word	0x08029790

0800b130 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800b13a:	f107 030c 	add.w	r3, r7, #12
 800b13e:	4916      	ldr	r1, [pc, #88]	; (800b198 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800b140:	4618      	mov	r0, r3
 800b142:	f001 ff1c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 fb1f 	bl	800d790 <_ZneRK12SimpleStringS1_>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d005      	beq.n	800b164 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4810      	ldr	r0, [pc, #64]	; (800b19c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b15c:	f000 ff70 	bl	800c040 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800b160:	4603      	mov	r3, r0
 800b162:	e000      	b.n	800b166 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800b164:	4b0d      	ldr	r3, [pc, #52]	; (800b19c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	f107 030c 	add.w	r3, r7, #12
 800b16c:	4618      	mov	r0, r3
 800b16e:	f002 fabe 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	33a8      	adds	r3, #168	; 0xa8
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6978      	ldr	r0, [r7, #20]
 800b17e:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	33ac      	adds	r3, #172	; 0xac
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6978      	ldr	r0, [r7, #20]
 800b18a:	4798      	blx	r3
    return mock_support;
 800b18c:	697b      	ldr	r3, [r7, #20]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	0802471c 	.word	0x0802471c
 800b19c:	200008b8 	.word	0x200008b8

0800b1a0 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800b1aa:	4a21      	ldr	r2, [pc, #132]	; (800b230 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	609a      	str	r2, [r3, #8]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	731a      	strb	r2, [r3, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f103 0218 	add.w	r2, r3, #24
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	615a      	str	r2, [r3, #20]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff ff23 	bl	800b01c <_ZN19MockFailureReporterC1Ev>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3320      	adds	r3, #32
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f010 fefc 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3330      	adds	r3, #48	; 0x30
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f014 fbea 	bl	801f9d4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3338      	adds	r3, #56	; 0x38
 800b204:	4618      	mov	r0, r3
 800b206:	f014 faf4 	bl	801f7f2 <_ZN18MockNamedValueListC1Ev>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	333c      	adds	r3, #60	; 0x3c
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	4618      	mov	r0, r3
 800b212:	f001 ff08 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800b21e:	2100      	movs	r1, #0
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f894 	bl	800b34e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	080285a0 	.word	0x080285a0

0800b234 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	4a0d      	ldr	r2, [pc, #52]	; (800b274 <_ZN11MockSupportD1Ev+0x40>)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	333c      	adds	r3, #60	; 0x3c
 800b246:	4618      	mov	r0, r3
 800b248:	f002 fa51 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3330      	adds	r3, #48	; 0x30
 800b250:	4618      	mov	r0, r3
 800b252:	f014 fbd3 	bl	801f9fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3320      	adds	r3, #32
 800b25a:	4618      	mov	r0, r3
 800b25c:	f010 fed0 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3318      	adds	r3, #24
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff feed 	bl	800b044 <_ZN19MockFailureReporterD1Ev>
{
}
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	080285a0 	.word	0x080285a0

0800b278 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
}
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f7ff ffd7 	bl	800b234 <_ZN11MockSupportD1Ev>
 800b286:	2148      	movs	r1, #72	; 0x48
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f7ff fac9 	bl	800a820 <_ZdlPvj>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	691a      	ldr	r2, [r3, #16]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	3310      	adds	r3, #16
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	78f9      	ldrb	r1, [r7, #3]
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4798      	blx	r3
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d102      	bne.n	800b2d6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	3318      	adds	r3, #24
 800b2d4:	e000      	b.n	800b2d8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00a      	beq.n	800b2fa <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	33c8      	adds	r3, #200	; 0xc8
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	6952      	ldr	r2, [r2, #20]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	3338      	adds	r3, #56	; 0x38
 800b2fe:	4618      	mov	r0, r3
 800b300:	f014 fb0d 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01c      	beq.n	800b346 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800b30c:	68f9      	ldr	r1, [r7, #12]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 ff26 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	bf14      	ite	ne
 800b31a:	2301      	movne	r3, #1
 800b31c:	2300      	moveq	r3, #0
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800b324:	68f9      	ldr	r1, [r7, #12]
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 ff1a 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b32c:	4603      	mov	r3, r0
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	32a4      	adds	r2, #164	; 0xa4
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	6949      	ldr	r1, [r1, #20]
 800b338:	4618      	mov	r0, r3
 800b33a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f014 f9f7 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	e7df      	b.n	800b306 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d102      	bne.n	800b364 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	e000      	b.n	800b366 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	6113      	str	r3, [r2, #16]
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3330      	adds	r3, #48	; 0x30
 800b382:	4618      	mov	r0, r3
 800b384:	f012 fb10 	bl	801d9a8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800b390:	b590      	push	{r4, r7, lr}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3330      	adds	r3, #48	; 0x30
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	68b9      	ldr	r1, [r7, #8]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f014 fb77 	bl	801fa98 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3338      	adds	r3, #56	; 0x38
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f014 fab5 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b3b4:	6178      	str	r0, [r7, #20]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d01c      	beq.n	800b3f6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800b3bc:	6979      	ldr	r1, [r7, #20]
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 fece 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bf14      	ite	ne
 800b3ca:	2301      	movne	r3, #1
 800b3cc:	2300      	moveq	r3, #0
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800b3d4:	6979      	ldr	r1, [r7, #20]
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 fec2 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	32b0      	adds	r2, #176	; 0xb0
 800b3e2:	6814      	ldr	r4, [r2, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b3ec:	6978      	ldr	r0, [r7, #20]
 800b3ee:	f014 f99f 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b3f2:	6178      	str	r0, [r7, #20]
 800b3f4:	e7df      	b.n	800b3b6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800b3f6:	bf00      	nop
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd90      	pop	{r4, r7, pc}

0800b3fe <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800b3fe:	b590      	push	{r4, r7, lr}
 800b400:	b087      	sub	sp, #28
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3330      	adds	r3, #48	; 0x30
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	68b9      	ldr	r1, [r7, #8]
 800b412:	4618      	mov	r0, r3
 800b414:	f014 fb5c 	bl	801fad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	3338      	adds	r3, #56	; 0x38
 800b41c:	4618      	mov	r0, r3
 800b41e:	f014 fa7e 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b422:	6178      	str	r0, [r7, #20]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d01c      	beq.n	800b464 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800b42a:	6979      	ldr	r1, [r7, #20]
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f000 fe97 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	bf14      	ite	ne
 800b438:	2301      	movne	r3, #1
 800b43a:	2300      	moveq	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800b442:	6979      	ldr	r1, [r7, #20]
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 fe8b 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b44a:	4603      	mov	r3, r0
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	32b4      	adds	r2, #180	; 0xb4
 800b450:	6814      	ldr	r4, [r2, #0]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	4618      	mov	r0, r3
 800b458:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b45a:	6978      	ldr	r0, [r7, #20]
 800b45c:	f014 f968 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b460:	6178      	str	r0, [r7, #20]
 800b462:	e7df      	b.n	800b424 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800b464:	bf00      	nop
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd90      	pop	{r4, r7, pc}

0800b46c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3330      	adds	r3, #48	; 0x30
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f014 fb93 	bl	801fba8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3338      	adds	r3, #56	; 0x38
 800b486:	4618      	mov	r0, r3
 800b488:	f014 fa49 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01b      	beq.n	800b4cc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800b494:	68f9      	ldr	r1, [r7, #12]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fe62 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf14      	ite	ne
 800b4a2:	2301      	movne	r3, #1
 800b4a4:	2300      	moveq	r3, #0
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00a      	beq.n	800b4c2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800b4ac:	68f9      	ldr	r1, [r7, #12]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fe56 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	32b8      	adds	r2, #184	; 0xb8
 800b4ba:	6812      	ldr	r2, [r2, #0]
 800b4bc:	6839      	ldr	r1, [r7, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f014 f934 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	e7e0      	b.n	800b48e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800b4cc:	bf00      	nop
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3330      	adds	r3, #48	; 0x30
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f014 faba 	bl	801fa5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3338      	adds	r3, #56	; 0x38
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f014 fa17 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d01a      	beq.n	800b52e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800b4f8:	68f9      	ldr	r1, [r7, #12]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fe30 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	bf14      	ite	ne
 800b506:	2301      	movne	r3, #1
 800b508:	2300      	moveq	r3, #0
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800b510:	68f9      	ldr	r1, [r7, #12]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fe24 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b518:	4603      	mov	r3, r0
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	32bc      	adds	r2, #188	; 0xbc
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f014 f903 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	e7e1      	b.n	800b4f2 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d004      	beq.n	800b550 <_ZN11MockSupport5clearEv+0x1a>
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	3204      	adds	r2, #4
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	4618      	mov	r0, r3
 800b54e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800b55e:	f00e fe0d 	bl	801a17c <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3320      	adds	r3, #32
 800b566:	4618      	mov	r0, r3
 800b568:	f011 f937 	bl	801c7da <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	3338      	adds	r3, #56	; 0x38
 800b592:	4618      	mov	r0, r3
 800b594:	f014 f9c3 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d01a      	beq.n	800b5d6 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fddc 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b5a8:	60b8      	str	r0, [r7, #8]
        if (support) {
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00d      	beq.n	800b5cc <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	339c      	adds	r3, #156	; 0x9c
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68b8      	ldr	r0, [r7, #8]
 800b5ba:	4798      	blx	r3
            delete support;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d004      	beq.n	800b5cc <_ZN11MockSupport5clearEv+0x96>
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	3204      	adds	r2, #4
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f014 f8af 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	e7e1      	b.n	800b59a <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3338      	adds	r3, #56	; 0x38
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f014 f917 	bl	801f80e <_ZN18MockNamedValueList5clearEv>
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	731a      	strb	r2, [r3, #12]
}
 800b5f6:	bf00      	nop
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
	...

0800b604 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800b604:	b590      	push	{r4, r7, lr}
 800b606:	b089      	sub	sp, #36	; 0x24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	333c      	adds	r3, #60	; 0x3c
 800b614:	4618      	mov	r0, r3
 800b616:	f002 f859 	bl	800d6cc <_ZNK12SimpleString7isEmptyEv>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800b620:	6879      	ldr	r1, [r7, #4]
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f001 fcff 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800b628:	e021      	b.n	800b66e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b630:	f107 0318 	add.w	r3, r7, #24
 800b634:	4910      	ldr	r1, [pc, #64]	; (800b678 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800b636:	4618      	mov	r0, r3
 800b638:	f001 fca1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800b63c:	f107 0310 	add.w	r3, r7, #16
 800b640:	f107 0218 	add.w	r2, r7, #24
 800b644:	4621      	mov	r1, r4
 800b646:	4618      	mov	r0, r3
 800b648:	f002 f8b3 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f107 0110 	add.w	r1, r7, #16
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4618      	mov	r0, r3
 800b656:	f002 f8ac 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800b65a:	f107 0310 	add.w	r3, r7, #16
 800b65e:	4618      	mov	r0, r3
 800b660:	f002 f845 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800b664:	f107 0318 	add.w	r3, r7, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f002 f840 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	3724      	adds	r7, #36	; 0x24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd90      	pop	{r4, r7, pc}
 800b676:	bf00      	nop
 800b678:	08024720 	.word	0x08024720

0800b67c <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3314      	adds	r3, #20
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	2101      	movs	r1, #1
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	4798      	blx	r3
 800b696:	4603      	mov	r3, r0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3314      	adds	r3, #20
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	4798      	blx	r3
}
 800b6ba:	bf00      	nop
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b089      	sub	sp, #36	; 0x24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b6d6:	f083 0301 	eor.w	r3, r3, #1
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800b6e0:	f010 fbf6 	bl	801bed0 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	e041      	b.n	800b76c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f000 fb1b 	bl	800bd24 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800b6ee:	22a5      	movs	r2, #165	; 0xa5
 800b6f0:	4920      	ldr	r1, [pc, #128]	; (800b774 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800b6f2:	2070      	movs	r0, #112	; 0x70
 800b6f4:	f7ff f880 	bl	800a7f8 <_ZnwjPKci>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	68b9      	ldr	r1, [r7, #8]
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f00f f8f3 	bl	801a8e8 <_ZN23MockCheckedExpectedCallC1Ej>
 800b702:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3308      	adds	r3, #8
 800b70a:	681c      	ldr	r4, [r3, #0]
 800b70c:	f107 0314 	add.w	r3, r7, #20
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff ff75 	bl	800b604 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800b71a:	f107 0314 	add.w	r3, r7, #20
 800b71e:	4619      	mov	r1, r3
 800b720:	69f8      	ldr	r0, [r7, #28]
 800b722:	47a0      	blx	r4
 800b724:	f107 0314 	add.w	r3, r7, #20
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 ffe0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	7b1b      	ldrb	r3, [r3, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d013      	beq.n	800b75e <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3310      	adds	r3, #16
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	6892      	ldr	r2, [r2, #8]
 800b742:	1c50      	adds	r0, r2, #1
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	6891      	ldr	r1, [r2, #8]
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	440a      	add	r2, r1
 800b74c:	4601      	mov	r1, r0
 800b74e:	69f8      	ldr	r0, [r7, #28]
 800b750:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	441a      	add	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3320      	adds	r3, #32
 800b762:	69f9      	ldr	r1, [r7, #28]
 800b764:	4618      	mov	r0, r3
 800b766:	f010 fd89 	bl	801c27c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800b76a:	69fb      	ldr	r3, [r7, #28]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3724      	adds	r7, #36	; 0x24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}
 800b774:	08024724 	.word	0x08024724

0800b778 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800b778:	b5b0      	push	{r4, r5, r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685d      	ldr	r5, [r3, #4]
 800b78e:	22b1      	movs	r2, #177	; 0xb1
 800b790:	490a      	ldr	r1, [pc, #40]	; (800b7bc <_ZN11MockSupport16createActualCallEv+0x44>)
 800b792:	202c      	movs	r0, #44	; 0x2c
 800b794:	f7ff f830 	bl	800a7f8 <_ZnwjPKci>
 800b798:	4604      	mov	r4, r0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691a      	ldr	r2, [r3, #16]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3320      	adds	r3, #32
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f00c fbdb 	bl	8017f60 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	08024724 	.word	0x08024724

0800b7c0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00d      	beq.n	800b7f0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3320      	adds	r3, #32
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f010 fd2a 	bl	801c234 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f083 0301 	eor.w	r3, r3, #1
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800b7fa:	b590      	push	{r4, r7, lr}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b804:	f107 030c 	add.w	r3, r7, #12
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fef9 	bl	800b604 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d014      	beq.n	800b844 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	33c4      	adds	r3, #196	; 0xc4
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	3204      	adds	r2, #4
 800b838:	6812      	ldr	r2, [r2, #0]
 800b83a:	4618      	mov	r0, r3
 800b83c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800b84a:	f083 0301 	eor.w	r3, r3, #1
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d004      	beq.n	800b85e <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800b854:	f00e fcbe 	bl	801a1d4 <_ZN21MockIgnoredActualCall8instanceEv>
 800b858:	4603      	mov	r3, r0
 800b85a:	461c      	mov	r4, r3
 800b85c:	e02f      	b.n	800b8be <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00b      	beq.n	800b880 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800b868:	f00e fc6e 	bl	801a148 <_ZN19MockActualCallTrace8instanceEv>
 800b86c:	4603      	mov	r3, r0
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	3208      	adds	r2, #8
 800b872:	6812      	ldr	r2, [r2, #0]
 800b874:	f107 010c 	add.w	r1, r7, #12
 800b878:	4618      	mov	r0, r3
 800b87a:	4790      	blx	r2
 800b87c:	4604      	mov	r4, r0
 800b87e:	e01e      	b.n	800b8be <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800b880:	f107 030c 	add.w	r3, r7, #12
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff ff9a 	bl	800b7c0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800b892:	f00e fc9f 	bl	801a1d4 <_ZN21MockIgnoredActualCall8instanceEv>
 800b896:	4603      	mov	r3, r0
 800b898:	461c      	mov	r4, r3
 800b89a:	e010      	b.n	800b8be <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	33c0      	adds	r3, #192	; 0xc0
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	4798      	blx	r3
 800b8a8:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f107 020c 	add.w	r2, r7, #12
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	4798      	blx	r3
    return *call;
 800b8bc:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 ff13 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800b8c8:	4623      	mov	r3, r4
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	371c      	adds	r7, #28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd90      	pop	{r4, r7, pc}

0800b8d2 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3338      	adds	r3, #56	; 0x38
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f014 f819 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01a      	beq.n	800b92a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fc32 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf14      	ite	ne
 800b902:	2301      	movne	r3, #1
 800b904:	2300      	moveq	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800b90c:	68f9      	ldr	r1, [r7, #12]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fc26 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b914:	4603      	mov	r3, r0
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	3290      	adds	r2, #144	; 0x90
 800b91a:	6812      	ldr	r2, [r2, #0]
 800b91c:	4618      	mov	r0, r3
 800b91e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b920:	68f8      	ldr	r0, [r7, #12]
 800b922:	f013 ff05 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	e7e1      	b.n	800b8ee <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800b92a:	bf00      	nop
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3338      	adds	r3, #56	; 0x38
 800b946:	4618      	mov	r0, r3
 800b948:	f013 ffe9 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b94c:	60f8      	str	r0, [r7, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01a      	beq.n	800b98a <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800b954:	68f9      	ldr	r1, [r7, #12]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fc02 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bf14      	ite	ne
 800b962:	2301      	movne	r3, #1
 800b964:	2300      	moveq	r3, #0
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d009      	beq.n	800b980 <_ZN11MockSupport7disableEv+0x4e>
 800b96c:	68f9      	ldr	r1, [r7, #12]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fbf6 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b974:	4603      	mov	r3, r0
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	3284      	adds	r2, #132	; 0x84
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	4618      	mov	r0, r3
 800b97e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f013 fed5 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	e7e1      	b.n	800b94e <_ZN11MockSupport7disableEv+0x1c>
}
 800b98a:	bf00      	nop
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3338      	adds	r3, #56	; 0x38
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f013 ffb9 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800b9ac:	60f8      	str	r0, [r7, #12]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01a      	beq.n	800b9ea <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800b9b4:	68f9      	ldr	r1, [r7, #12]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fbd2 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	bf14      	ite	ne
 800b9c2:	2301      	movne	r3, #1
 800b9c4:	2300      	moveq	r3, #0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d009      	beq.n	800b9e0 <_ZN11MockSupport6enableEv+0x4e>
 800b9cc:	68f9      	ldr	r1, [r7, #12]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fbc6 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	3288      	adds	r2, #136	; 0x88
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f013 fea5 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	e7e1      	b.n	800b9ae <_ZN11MockSupport6enableEv+0x1c>
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	78fa      	ldrb	r2, [r7, #3]
 800ba02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3338      	adds	r3, #56	; 0x38
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f013 ff87 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d01b      	beq.n	800ba50 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800ba18:	68f9      	ldr	r1, [r7, #12]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fba0 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bf14      	ite	ne
 800ba26:	2301      	movne	r3, #1
 800ba28:	2300      	moveq	r3, #0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00a      	beq.n	800ba46 <_ZN11MockSupport7tracingEb+0x54>
 800ba30:	68f9      	ldr	r1, [r7, #12]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fb94 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	328c      	adds	r2, #140	; 0x8c
 800ba3e:	6812      	ldr	r2, [r2, #0]
 800ba40:	78f9      	ldrb	r1, [r7, #3]
 800ba42:	4618      	mov	r0, r3
 800ba44:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f013 fe72 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	e7e0      	b.n	800ba12 <_ZN11MockSupport7tracingEb+0x20>
}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3320      	adds	r3, #32
 800ba64:	4618      	mov	r0, r3
 800ba66:	f010 fbc1 	bl	801c1ec <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3338      	adds	r3, #56	; 0x38
 800ba72:	4618      	mov	r0, r3
 800ba74:	f013 ff53 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800ba78:	60b8      	str	r0, [r7, #8]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d01f      	beq.n	800bac0 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fb6c 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bf14      	ite	ne
 800ba8e:	2301      	movne	r3, #1
 800ba90:	2300      	moveq	r3, #0
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00e      	beq.n	800bab6 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800ba98:	68b9      	ldr	r1, [r7, #8]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fb60 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800baa0:	4603      	mov	r3, r0
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	3298      	adds	r2, #152	; 0x98
 800baa6:	6812      	ldr	r2, [r2, #0]
 800baa8:	4618      	mov	r0, r3
 800baaa:	4790      	blx	r2
 800baac:	4603      	mov	r3, r0
 800baae:	461a      	mov	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bab6:	68b8      	ldr	r0, [r7, #8]
 800bab8:	f013 fe3a 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800babc:	60b8      	str	r0, [r7, #8]
 800babe:	e7dc      	b.n	800ba7a <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bf14      	ite	ne
 800bac6:	2301      	movne	r3, #1
 800bac8:	2300      	moveq	r3, #0
 800baca:	b2db      	uxtb	r3, r3
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d010      	beq.n	800bb06 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	33bc      	adds	r3, #188	; 0xbc
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4610      	mov	r0, r2
 800baf4:	4798      	blx	r3
 800baf6:	4603      	mov	r3, r0
 800baf8:	f083 0301 	eor.w	r3, r3, #1
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800bb06:	2300      	movs	r3, #0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e02a      	b.n	800bb66 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3338      	adds	r3, #56	; 0x38
 800bb14:	4618      	mov	r0, r3
 800bb16:	f013 ff02 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d020      	beq.n	800bb64 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fb1b 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00f      	beq.n	800bb50 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800bb30:	68f9      	ldr	r1, [r7, #12]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fb14 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff ffca 	bl	800bad4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800bb40:	4603      	mov	r3, r0
 800bb42:	f083 0301 	eor.w	r3, r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e005      	b.n	800bb66 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f013 fde8 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	e7db      	b.n	800bb1c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800bb64:	2301      	movs	r3, #1
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b092      	sub	sp, #72	; 0x48
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800bb76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f010 fa2c 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f103 0220 	add.w	r2, r3, #32
 800bb86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f010 fbf3 	bl	801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	3338      	adds	r3, #56	; 0x38
 800bb96:	4618      	mov	r0, r3
 800bb98:	f013 fec1 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800bb9c:	6478      	str	r0, [r7, #68]	; 0x44
 800bb9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01d      	beq.n	800bbe0 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800bba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fada 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bf14      	ite	ne
 800bbb2:	2301      	movne	r3, #1
 800bbb4:	2300      	moveq	r3, #0
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00c      	beq.n	800bbd6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800bbbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 face 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f103 0220 	add.w	r2, r3, #32
 800bbca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bbce:	4611      	mov	r1, r2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f010 fbd1 	bl	801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bbd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bbd8:	f013 fdaa 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800bbdc:	6478      	str	r0, [r7, #68]	; 0x44
 800bbde:	e7de      	b.n	800bb9e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	330c      	adds	r3, #12
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4610      	mov	r0, r2
 800bbf0:	4798      	blx	r3
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bbf8:	f107 0308 	add.w	r3, r7, #8
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f011 f9f5 	bl	801cfec <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	33c4      	adds	r3, #196	; 0xc4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f107 0208 	add.w	r2, r7, #8
 800bc0e:	4611      	mov	r1, r2
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 fe6d 	bl	800c8f8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800bc1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc22:	4618      	mov	r0, r3
 800bc24:	f010 f9ec 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 800bc28:	bf00      	nop
 800bc2a:	3748      	adds	r7, #72	; 0x48
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b092      	sub	sp, #72	; 0x48
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800bc38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f010 f9cb 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f103 0220 	add.w	r2, r3, #32
 800bc48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f010 fb92 	bl	801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3338      	adds	r3, #56	; 0x38
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f013 fe60 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800bc5e:	6478      	str	r0, [r7, #68]	; 0x44
 800bc60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d01d      	beq.n	800bca2 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800bc66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fa79 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bf14      	ite	ne
 800bc74:	2301      	movne	r3, #1
 800bc76:	2300      	moveq	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00c      	beq.n	800bc98 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800bc7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa6d 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f103 0220 	add.w	r2, r3, #32
 800bc8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc90:	4611      	mov	r1, r2
 800bc92:	4618      	mov	r0, r3
 800bc94:	f010 fb70 	bl	801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bc98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bc9a:	f013 fd49 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800bc9e:	6478      	str	r0, [r7, #68]	; 0x44
 800bca0:	e7de      	b.n	800bc60 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	691a      	ldr	r2, [r3, #16]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	330c      	adds	r3, #12
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	4798      	blx	r3
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bcba:	f107 0308 	add.w	r3, r7, #8
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f011 fa38 	bl	801d134 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	33c4      	adds	r3, #196	; 0xc4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f107 0208 	add.w	r2, r7, #8
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800bcd6:	f107 0308 	add.w	r3, r7, #8
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fe2e 	bl	800c93c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800bce0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bce4:	4618      	mov	r0, r3
 800bce6:	f010 f98b 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 800bcea:	bf00      	nop
 800bcec:	3748      	adds	r7, #72	; 0x48
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b082      	sub	sp, #8
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
    clear();
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	339c      	adds	r3, #156	; 0x9c
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3308      	adds	r3, #8
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	4610      	mov	r0, r2
 800bd1a:	4798      	blx	r3
}
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800bd2c:	f008 fd0a 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800bd30:	4603      	mov	r3, r0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f007 fb78 	bl	8013428 <_ZN10UtestShell10countCheckEv>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d008      	beq.n	800bd62 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	33c4      	adds	r3, #196	; 0xc4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3338      	adds	r3, #56	; 0x38
 800bd66:	4618      	mov	r0, r3
 800bd68:	f013 fdd9 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d023      	beq.n	800bdbc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f9f2 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d009      	beq.n	800bd96 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f9eb 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800bd92:	2301      	movs	r3, #1
 800bd94:	e000      	b.n	800bd98 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800bd96:	2300      	movs	r3, #0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800bd9c:	68f9      	ldr	r1, [r7, #12]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f9de 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bda4:	4603      	mov	r3, r0
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	32c4      	adds	r2, #196	; 0xc4
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f013 fcbc 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	e7d8      	b.n	800bd6e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	3320      	adds	r3, #32
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f010 f947 	bl	801c064 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e027      	b.n	800be30 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3338      	adds	r3, #56	; 0x38
 800bde4:	4618      	mov	r0, r3
 800bde6:	f013 fd9a 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d01d      	beq.n	800be2e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800bdf2:	68f9      	ldr	r1, [r7, #12]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f9b3 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00c      	beq.n	800be1a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f9ac 	bl	800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800be08:	4603      	mov	r3, r0
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7ff ffda 	bl	800bdc4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800be1a:	2300      	movs	r3, #0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800be20:	2301      	movs	r3, #1
 800be22:	e005      	b.n	800be30 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f013 fc83 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	e7de      	b.n	800bdec <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7ff ff7d 	bl	800bd40 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7ff fe44 	bl	800bad4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3398      	adds	r3, #152	; 0x98
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800be64:	2301      	movs	r3, #1
 800be66:	e000      	b.n	800be6a <_ZN11MockSupport17checkExpectationsEv+0x32>
 800be68:	2300      	movs	r3, #0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff fe7d 	bl	800bb6e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff ffa5 	bl	800bdc4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff fed5 	bl	800bc30 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3338      	adds	r3, #56	; 0x38
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f013 fd0e 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bf14      	ite	ne
 800beaa:	2301      	movne	r3, #1
 800beac:	2300      	moveq	r3, #0
 800beae:	b2db      	uxtb	r3, r3
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3338      	adds	r3, #56	; 0x38
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f013 fcf9 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bece:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d111      	bne.n	800befa <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800bed6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800beda:	490a      	ldr	r1, [pc, #40]	; (800bf04 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800bedc:	2038      	movs	r0, #56	; 0x38
 800bede:	f7fe fc8b 	bl	800a7f8 <_ZnwjPKci>
 800bee2:	4604      	mov	r4, r0
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	4620      	mov	r0, r4
 800bee8:	f011 fd6e 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800beec:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	3338      	adds	r3, #56	; 0x38
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f013 fcad 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800befa:	68fb      	ldr	r3, [r7, #12]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd90      	pop	{r4, r7, pc}
 800bf04:	08024724 	.word	0x08024724

0800bf08 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800bf16:	68b9      	ldr	r1, [r7, #8]
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7ff ffcd 	bl	800beb8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800bf1e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3344      	adds	r3, #68	; 0x44
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	6978      	ldr	r0, [r7, #20]
 800bf2e:	4798      	blx	r3
}
 800bf30:	bf00      	nop
 800bf32:	3718      	adds	r7, #24
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	3338      	adds	r3, #56	; 0x38
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f013 fcb8 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800bf50:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d111      	bne.n	800bf7c <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800bf58:	f107 0314 	add.w	r3, r7, #20
 800bf5c:	490b      	ldr	r1, [pc, #44]	; (800bf8c <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f001 f80d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800bf64:	f107 0314 	add.w	r3, r7, #20
 800bf68:	4619      	mov	r1, r3
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f011 fd2c 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800bf70:	f107 0314 	add.w	r3, r7, #20
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 fbba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800bf7a:	e003      	b.n	800bf84 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800bf7c:	69f9      	ldr	r1, [r7, #28]
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff f8a2 	bl	800b0c8 <_ZN14MockNamedValueC1ERKS_>
}
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	3720      	adds	r7, #32
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	0802471c 	.word	0x0802471c

0800bf90 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800bf9a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bf9e:	4927      	ldr	r1, [pc, #156]	; (800c03c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800bfa0:	2048      	movs	r0, #72	; 0x48
 800bfa2:	f7fe fc29 	bl	800a7f8 <_ZnwjPKci>
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f7ff f8f8 	bl	800b1a0 <_ZN11MockSupportC1ERK12SimpleString>
 800bfb0:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	33a4      	adds	r3, #164	; 0xa4
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	6952      	ldr	r2, [r2, #20]
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	3390      	adds	r3, #144	; 0x90
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bfe0:	f083 0301 	eor.w	r3, r3, #1
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d005      	beq.n	800bff6 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3384      	adds	r3, #132	; 0x84
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	7b1b      	ldrb	r3, [r3, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3308      	adds	r3, #8
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	4798      	blx	r3

    newMock->tracing(tracing_);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	338c      	adds	r3, #140	; 0x8c
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800c018:	4611      	mov	r1, r2
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	33b8      	adds	r3, #184	; 0xb8
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	3230      	adds	r2, #48	; 0x30
 800c02a:	4611      	mov	r1, r2
 800c02c:	68f8      	ldr	r0, [r7, #12]
 800c02e:	4798      	blx	r3
    return newMock;
 800c030:	68fb      	ldr	r3, [r7, #12]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3714      	adds	r7, #20
 800c036:	46bd      	mov	sp, r7
 800c038:	bd90      	pop	{r4, r7, pc}
 800c03a:	bf00      	nop
 800c03c:	08024724 	.word	0x08024724

0800c040 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800c040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c042:	b0ab      	sub	sp, #172	; 0xac
 800c044:	af04      	add	r7, sp, #16
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c04a:	f107 0308 	add.w	r3, r7, #8
 800c04e:	4941      	ldr	r1, [pc, #260]	; (800c154 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800c050:	4618      	mov	r0, r3
 800c052:	f000 ff94 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800c056:	f107 0308 	add.w	r3, r7, #8
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 fbc3 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800c062:	f107 0308 	add.w	r3, r7, #8
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff ff10 	bl	800be8e <_ZN11MockSupport7hasDataERK12SimpleString>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d048      	beq.n	800c106 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800c074:	f008 fb66 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800c078:	4604      	mov	r4, r0
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	3324      	adds	r3, #36	; 0x24
 800c07e:	681d      	ldr	r5, [r3, #0]
 800c080:	f107 0318 	add.w	r3, r7, #24
 800c084:	f107 0208 	add.w	r2, r7, #8
 800c088:	6879      	ldr	r1, [r7, #4]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff ff54 	bl	800bf38 <_ZN11MockSupport7getDataERK12SimpleString>
 800c090:	f107 0310 	add.w	r3, r7, #16
 800c094:	f107 0218 	add.w	r2, r7, #24
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f011 ff63 	bl	801df66 <_ZNK14MockNamedValue7getTypeEv>
 800c0a0:	f107 0310 	add.w	r3, r7, #16
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 faf5 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800c0aa:	4606      	mov	r6, r0
 800c0ac:	f008 fb5a 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	9302      	str	r3, [sp, #8]
 800c0b4:	f240 13bd 	movw	r3, #445	; 0x1bd
 800c0b8:	9301      	str	r3, [sp, #4]
 800c0ba:	4b27      	ldr	r3, [pc, #156]	; (800c158 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4926      	ldr	r1, [pc, #152]	; (800c15c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	47a8      	blx	r5
 800c0c8:	f107 0310 	add.w	r3, r7, #16
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 fb0e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c0d2:	f107 0318 	add.w	r3, r7, #24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f011 fca0 	bl	801da1c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800c0dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0e0:	f107 0208 	add.w	r2, r7, #8
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff ff26 	bl	800bf38 <_ZN11MockSupport7getDataERK12SimpleString>
 800c0ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f012 fa51 	bl	801e598 <_ZNK14MockNamedValue16getObjectPointerEv>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	bf00      	nop
 800c0fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c0fe:	4618      	mov	r0, r3
 800c100:	f011 fc8c 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c104:	e01b      	b.n	800c13e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ff41 	bl	800bf90 <_ZN11MockSupport5cloneERK12SimpleString>
 800c10e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800c112:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c116:	4911      	ldr	r1, [pc, #68]	; (800c15c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 ff30 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800c11e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800c122:	f107 0108 	add.w	r1, r7, #8
 800c126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff feec 	bl	800bf08 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800c130:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c134:	4618      	mov	r0, r3
 800c136:	f001 fada 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return newMock;
 800c13a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	4618      	mov	r0, r3
 800c144:	f001 fad3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c148:	4623      	mov	r3, r4
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	379c      	adds	r7, #156	; 0x9c
 800c14e:	46bd      	mov	sp, r7
 800c150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c152:	bf00      	nop
 800c154:	0802473c 	.word	0x0802473c
 800c158:	08024724 	.word	0x08024724
 800c15c:	0802475c 	.word	0x0802475c

0800c160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800c160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c164:	b08b      	sub	sp, #44	; 0x2c
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800c16c:	2500      	movs	r5, #0
 800c16e:	2600      	movs	r6, #0
 800c170:	f107 0308 	add.w	r3, r7, #8
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f013 fb28 	bl	801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>
 800c17c:	f04f 0801 	mov.w	r8, #1
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	492e      	ldr	r1, [pc, #184]	; (800c240 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800c186:	4618      	mov	r0, r3
 800c188:	f000 fef9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800c18c:	f04f 0901 	mov.w	r9, #1
 800c190:	f107 0210 	add.w	r2, r7, #16
 800c194:	f107 0308 	add.w	r3, r7, #8
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 fab3 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d01a      	beq.n	800c1dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c1a6:	f107 0318 	add.w	r3, r7, #24
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f013 fafa 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 800c1b2:	2501      	movs	r5, #1
 800c1b4:	f107 0320 	add.w	r3, r7, #32
 800c1b8:	4922      	ldr	r1, [pc, #136]	; (800c244 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fedf 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800c1c0:	2601      	movs	r6, #1
 800c1c2:	f107 0220 	add.w	r2, r7, #32
 800c1c6:	f107 0318 	add.w	r3, r7, #24
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 ff54 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c1d8:	2401      	movs	r4, #1
 800c1da:	e000      	b.n	800c1de <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800c1dc:	2400      	movs	r4, #0
 800c1de:	2e00      	cmp	r6, #0
 800c1e0:	d004      	beq.n	800c1ec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800c1e2:	f107 0320 	add.w	r3, r7, #32
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f001 fa81 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c1ec:	2d00      	cmp	r5, #0
 800c1ee:	d004      	beq.n	800c1fa <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800c1f0:	f107 0318 	add.w	r3, r7, #24
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f001 fa7a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c1fa:	f1b9 0f00 	cmp.w	r9, #0
 800c1fe:	d004      	beq.n	800c20a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800c200:	f107 0310 	add.w	r3, r7, #16
 800c204:	4618      	mov	r0, r3
 800c206:	f001 fa72 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c20a:	f1b8 0f00 	cmp.w	r8, #0
 800c20e:	d004      	beq.n	800c21a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4618      	mov	r0, r3
 800c216:	f001 fa6a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d00a      	beq.n	800c234 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800c21e:	6838      	ldr	r0, [r7, #0]
 800c220:	f013 fa92 	bl	801f748 <_ZN22MockNamedValueListNode4itemEv>
 800c224:	4603      	mov	r3, r0
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	32a0      	adds	r2, #160	; 0xa0
 800c22a:	6812      	ldr	r2, [r2, #0]
 800c22c:	4618      	mov	r0, r3
 800c22e:	4790      	blx	r2
 800c230:	4603      	mov	r3, r0
 800c232:	e000      	b.n	800c236 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	372c      	adds	r7, #44	; 0x2c
 800c23a:	46bd      	mov	sp, r7
 800c23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c240:	0802475c 	.word	0x0802475c
 800c244:	0802473c 	.word	0x0802473c

0800c248 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00a      	beq.n	800c270 <_ZN11MockSupport11returnValueEv+0x28>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3354      	adds	r3, #84	; 0x54
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	4610      	mov	r0, r2
 800c26c:	4798      	blx	r3
 800c26e:	e010      	b.n	800c292 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800c270:	f107 0308 	add.w	r3, r7, #8
 800c274:	4909      	ldr	r1, [pc, #36]	; (800c29c <_ZN11MockSupport11returnValueEv+0x54>)
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fe81 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800c27c:	f107 0308 	add.w	r3, r7, #8
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f011 fba0 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800c288:	f107 0308 	add.w	r3, r7, #8
 800c28c:	4618      	mov	r0, r3
 800c28e:	f001 fa2e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	0802471c 	.word	0x0802471c

0800c2a0 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b091      	sub	sp, #68	; 0x44
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3320      	adds	r3, #32
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f107 0208 	add.w	r2, r7, #8
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4798      	blx	r3
 800c2ba:	f107 0308 	add.w	r3, r7, #8
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f011 fe60 	bl	801df84 <_ZNK14MockNamedValue12getBoolValueEv>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	461c      	mov	r4, r3
 800c2c8:	bf00      	nop
 800c2ca:	f107 0308 	add.w	r3, r7, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f011 fba4 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c2d4:	4623      	mov	r3, r4
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3744      	adds	r7, #68	; 0x44
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}

0800c2de <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800c2de:	b590      	push	{r4, r7, lr}
 800c2e0:	b091      	sub	sp, #68	; 0x44
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3320      	adds	r3, #32
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f107 0208 	add.w	r2, r7, #8
 800c2f2:	6879      	ldr	r1, [r7, #4]
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	f107 0308 	add.w	r3, r7, #8
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f011 fe69 	bl	801dfd4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800c302:	4604      	mov	r4, r0
 800c304:	bf00      	nop
 800c306:	f107 0308 	add.w	r3, r7, #8
 800c30a:	4618      	mov	r0, r3
 800c30c:	f011 fb86 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c310:	4623      	mov	r3, r4
}
 800c312:	4618      	mov	r0, r3
 800c314:	3744      	adds	r7, #68	; 0x44
 800c316:	46bd      	mov	sp, r7
 800c318:	bd90      	pop	{r4, r7, pc}

0800c31a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800c31a:	b590      	push	{r4, r7, lr}
 800c31c:	b091      	sub	sp, #68	; 0x44
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3320      	adds	r3, #32
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f107 0208 	add.w	r2, r7, #8
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	f107 0308 	add.w	r3, r7, #8
 800c338:	4618      	mov	r0, r3
 800c33a:	f011 fe9b 	bl	801e074 <_ZNK14MockNamedValue11getIntValueEv>
 800c33e:	4604      	mov	r4, r0
 800c340:	bf00      	nop
 800c342:	f107 0308 	add.w	r3, r7, #8
 800c346:	4618      	mov	r0, r3
 800c348:	f011 fb68 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c34c:	4623      	mov	r3, r4
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3744      	adds	r7, #68	; 0x44
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}

0800c356 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	331c      	adds	r3, #28
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	4798      	blx	r3
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d007      	beq.n	800c382 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	335c      	adds	r3, #92	; 0x5c
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	4798      	blx	r3
 800c37e:	4603      	mov	r3, r0
 800c380:	e000      	b.n	800c384 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800c382:	683b      	ldr	r3, [r7, #0]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	331c      	adds	r3, #28
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	4798      	blx	r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3368      	adds	r3, #104	; 0x68
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	4798      	blx	r3
 800c3b6:	eeb0 7a40 	vmov.f32	s14, s0
 800c3ba:	eef0 7a60 	vmov.f32	s15, s1
 800c3be:	e001      	b.n	800c3c4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800c3c0:	ed97 7b00 	vldr	d7, [r7]
}
 800c3c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c3c8:	eef0 0a67 	vmov.f32	s1, s15
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	331c      	adds	r3, #28
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	4798      	blx	r3
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3338      	adds	r3, #56	; 0x38
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	4798      	blx	r3
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	e000      	b.n	800c400 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800c3fe:	683b      	ldr	r3, [r7, #0]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	331c      	adds	r3, #28
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	4798      	blx	r3
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d007      	beq.n	800c436 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3324      	adds	r3, #36	; 0x24
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
 800c432:	4603      	mov	r3, r0
 800c434:	e000      	b.n	800c438 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800c436:	78fb      	ldrb	r3, [r7, #3]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	331c      	adds	r3, #28
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	4798      	blx	r3
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d007      	beq.n	800c46c <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	332c      	adds	r3, #44	; 0x2c
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	4798      	blx	r3
 800c468:	4603      	mov	r3, r0
 800c46a:	e000      	b.n	800c46e <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800c46c:	683b      	ldr	r3, [r7, #0]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	331c      	adds	r3, #28
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	4798      	blx	r3
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d007      	beq.n	800c4a2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3334      	adds	r3, #52	; 0x34
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	4798      	blx	r3
 800c49e:	4603      	mov	r3, r0
 800c4a0:	e000      	b.n	800c4a4 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800c4a2:	683b      	ldr	r3, [r7, #0]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	331c      	adds	r3, #28
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d007      	beq.n	800c4d8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3340      	adds	r3, #64	; 0x40
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	4798      	blx	r3
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	e000      	b.n	800c4da <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800c4d8:	683b      	ldr	r3, [r7, #0]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800c4e2:	b590      	push	{r4, r7, lr}
 800c4e4:	b091      	sub	sp, #68	; 0x44
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3320      	adds	r3, #32
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f107 0208 	add.w	r2, r7, #8
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	f107 0308 	add.w	r3, r7, #8
 800c500:	4618      	mov	r0, r3
 800c502:	f011 fddf 	bl	801e0c4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800c506:	4604      	mov	r4, r0
 800c508:	bf00      	nop
 800c50a:	f107 0308 	add.w	r3, r7, #8
 800c50e:	4618      	mov	r0, r3
 800c510:	f011 fa84 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c514:	4623      	mov	r3, r4
}
 800c516:	4618      	mov	r0, r3
 800c518:	3744      	adds	r7, #68	; 0x44
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd90      	pop	{r4, r7, pc}

0800c51e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800c51e:	b590      	push	{r4, r7, lr}
 800c520:	b091      	sub	sp, #68	; 0x44
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3320      	adds	r3, #32
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f107 0208 	add.w	r2, r7, #8
 800c532:	6879      	ldr	r1, [r7, #4]
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	f107 0308 	add.w	r3, r7, #8
 800c53c:	4618      	mov	r0, r3
 800c53e:	f011 fe23 	bl	801e188 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800c542:	4604      	mov	r4, r0
 800c544:	bf00      	nop
 800c546:	f107 0308 	add.w	r3, r7, #8
 800c54a:	4618      	mov	r0, r3
 800c54c:	f011 fa66 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c550:	4623      	mov	r3, r4
}
 800c552:	4618      	mov	r0, r3
 800c554:	3744      	adds	r7, #68	; 0x44
 800c556:	46bd      	mov	sp, r7
 800c558:	bd90      	pop	{r4, r7, pc}
	...

0800c55c <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800c55c:	b5b0      	push	{r4, r5, r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af02      	add	r7, sp, #8
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800c566:	f008 f8ed 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800c56a:	4604      	mov	r4, r0
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	3368      	adds	r3, #104	; 0x68
 800c570:	681d      	ldr	r5, [r3, #0]
 800c572:	f008 f8f7 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c576:	4603      	mov	r3, r0
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	f240 2345 	movw	r3, #581	; 0x245
 800c57e:	4a06      	ldr	r2, [pc, #24]	; (800c598 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800c580:	4906      	ldr	r1, [pc, #24]	; (800c59c <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800c582:	4620      	mov	r0, r4
 800c584:	47a8      	blx	r5
    return cpputest_longlong(0);
 800c586:	2100      	movs	r1, #0
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7fe fd2f 	bl	800afec <_ZN17cpputest_longlongC1Ei>
}
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bdb0      	pop	{r4, r5, r7, pc}
 800c596:	bf00      	nop
 800c598:	08024724 	.word	0x08024724
 800c59c:	08024768 	.word	0x08024768

0800c5a0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800c5a0:	b5b0      	push	{r4, r5, r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800c5aa:	f008 f8cb 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	3368      	adds	r3, #104	; 0x68
 800c5b4:	681d      	ldr	r5, [r3, #0]
 800c5b6:	f008 f8d5 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	f240 234b 	movw	r3, #587	; 0x24b
 800c5c2:	4a06      	ldr	r2, [pc, #24]	; (800c5dc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800c5c4:	4906      	ldr	r1, [pc, #24]	; (800c5e0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7fe fd19 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
}
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	08024724 	.word	0x08024724
 800c5e0:	08024788 	.word	0x08024788

0800c5e4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800c5e4:	b5b0      	push	{r4, r5, r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af02      	add	r7, sp, #8
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800c5f4:	f008 f8a6 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	3368      	adds	r3, #104	; 0x68
 800c5fe:	681d      	ldr	r5, [r3, #0]
 800c600:	f008 f8b0 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c604:	4603      	mov	r3, r0
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	f240 2351 	movw	r3, #593	; 0x251
 800c60c:	4a06      	ldr	r2, [pc, #24]	; (800c628 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800c60e:	4907      	ldr	r1, [pc, #28]	; (800c62c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800c610:	4620      	mov	r0, r4
 800c612:	47a8      	blx	r5
    return defaultValue;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	461a      	mov	r2, r3
 800c618:	463b      	mov	r3, r7
 800c61a:	cb03      	ldmia	r3!, {r0, r1}
 800c61c:	6010      	str	r0, [r2, #0]
 800c61e:	6051      	str	r1, [r2, #4]
}
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bdb0      	pop	{r4, r5, r7, pc}
 800c628:	08024724 	.word	0x08024724
 800c62c:	08024768 	.word	0x08024768

0800c630 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800c630:	b5b0      	push	{r4, r5, r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af02      	add	r7, sp, #8
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	4639      	mov	r1, r7
 800c63c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800c640:	f008 f880 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 800c644:	4604      	mov	r4, r0
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	3368      	adds	r3, #104	; 0x68
 800c64a:	681d      	ldr	r5, [r3, #0]
 800c64c:	f008 f88a 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c650:	4603      	mov	r3, r0
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	f240 2357 	movw	r3, #599	; 0x257
 800c658:	4a06      	ldr	r2, [pc, #24]	; (800c674 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800c65a:	4907      	ldr	r1, [pc, #28]	; (800c678 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800c65c:	4620      	mov	r0, r4
 800c65e:	47a8      	blx	r5
    return defaultValue;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	461a      	mov	r2, r3
 800c664:	463b      	mov	r3, r7
 800c666:	cb03      	ldmia	r3!, {r0, r1}
 800c668:	6010      	str	r0, [r2, #0]
 800c66a:	6051      	str	r1, [r2, #4]
}
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	3710      	adds	r7, #16
 800c670:	46bd      	mov	sp, r7
 800c672:	bdb0      	pop	{r4, r5, r7, pc}
 800c674:	08024724 	.word	0x08024724
 800c678:	08024788 	.word	0x08024788

0800c67c <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b091      	sub	sp, #68	; 0x44
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3320      	adds	r3, #32
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f107 0208 	add.w	r2, r7, #8
 800c690:	6879      	ldr	r1, [r7, #4]
 800c692:	4610      	mov	r0, r2
 800c694:	4798      	blx	r3
 800c696:	f107 0308 	add.w	r3, r7, #8
 800c69a:	4618      	mov	r0, r3
 800c69c:	f011 fea8 	bl	801e3f0 <_ZNK14MockNamedValue14getStringValueEv>
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	bf00      	nop
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f011 f9b7 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c6ae:	4623      	mov	r3, r4
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3744      	adds	r7, #68	; 0x44
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd90      	pop	{r4, r7, pc}

0800c6b8 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	ed2d 8b02 	vpush	{d8}
 800c6be:	b090      	sub	sp, #64	; 0x40
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3320      	adds	r3, #32
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f107 0208 	add.w	r2, r7, #8
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	4610      	mov	r0, r2
 800c6d4:	4798      	blx	r3
 800c6d6:	f107 0308 	add.w	r3, r7, #8
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f011 fe2c 	bl	801e338 <_ZNK14MockNamedValue14getDoubleValueEv>
 800c6e0:	eeb0 8a40 	vmov.f32	s16, s0
 800c6e4:	eef0 8a60 	vmov.f32	s17, s1
 800c6e8:	bf00      	nop
 800c6ea:	f107 0308 	add.w	r3, r7, #8
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f011 f994 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c6f4:	eeb0 7a48 	vmov.f32	s14, s16
 800c6f8:	eef0 7a68 	vmov.f32	s15, s17
}
 800c6fc:	eeb0 0a47 	vmov.f32	s0, s14
 800c700:	eef0 0a67 	vmov.f32	s1, s15
 800c704:	3740      	adds	r7, #64	; 0x40
 800c706:	46bd      	mov	sp, r7
 800c708:	ecbd 8b02 	vpop	{d8}
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	331c      	adds	r3, #28
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d007      	beq.n	800c73a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	336c      	adds	r3, #108	; 0x6c
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	4798      	blx	r3
 800c736:	4603      	mov	r3, r0
 800c738:	e000      	b.n	800c73c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800c73a:	683b      	ldr	r3, [r7, #0]
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	331c      	adds	r3, #28
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	4798      	blx	r3
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d007      	beq.n	800c770 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3378      	adds	r3, #120	; 0x78
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	4798      	blx	r3
 800c76c:	4603      	mov	r3, r0
 800c76e:	e000      	b.n	800c772 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800c770:	683b      	ldr	r3, [r7, #0]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	331c      	adds	r3, #28
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	4798      	blx	r3
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d007      	beq.n	800c7a6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3380      	adds	r3, #128	; 0x80
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	e000      	b.n	800c7a8 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800c7a6:	683b      	ldr	r3, [r7, #0]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800c7b0:	b590      	push	{r4, r7, lr}
 800c7b2:	b091      	sub	sp, #68	; 0x44
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3320      	adds	r3, #32
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f107 0208 	add.w	r2, r7, #8
 800c7c4:	6879      	ldr	r1, [r7, #4]
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	4798      	blx	r3
 800c7ca:	f107 0308 	add.w	r3, r7, #8
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f011 fe36 	bl	801e440 <_ZNK14MockNamedValue15getPointerValueEv>
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	bf00      	nop
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f011 f91d 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c7e2:	4623      	mov	r3, r4
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3744      	adds	r7, #68	; 0x44
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd90      	pop	{r4, r7, pc}

0800c7ec <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b091      	sub	sp, #68	; 0x44
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3320      	adds	r3, #32
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f107 0208 	add.w	r2, r7, #8
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	4610      	mov	r0, r2
 800c804:	4798      	blx	r3
 800c806:	f107 0308 	add.w	r3, r7, #8
 800c80a:	4618      	mov	r0, r3
 800c80c:	f011 fe40 	bl	801e490 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800c810:	4604      	mov	r4, r0
 800c812:	bf00      	nop
 800c814:	f107 0308 	add.w	r3, r7, #8
 800c818:	4618      	mov	r0, r3
 800c81a:	f011 f8ff 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c81e:	4623      	mov	r3, r4
}
 800c820:	4618      	mov	r0, r3
 800c822:	3744      	adds	r7, #68	; 0x44
 800c824:	46bd      	mov	sp, r7
 800c826:	bd90      	pop	{r4, r7, pc}

0800c828 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800c828:	b590      	push	{r4, r7, lr}
 800c82a:	b091      	sub	sp, #68	; 0x44
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3320      	adds	r3, #32
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f107 0208 	add.w	r2, r7, #8
 800c83c:	6879      	ldr	r1, [r7, #4]
 800c83e:	4610      	mov	r0, r2
 800c840:	4798      	blx	r3
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4618      	mov	r0, r3
 800c848:	f011 fe4a 	bl	801e4e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800c84c:	4604      	mov	r4, r0
 800c84e:	bf00      	nop
 800c850:	f107 0308 	add.w	r3, r7, #8
 800c854:	4618      	mov	r0, r3
 800c856:	f011 f8e1 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 800c85a:	4623      	mov	r3, r4
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3744      	adds	r7, #68	; 0x44
 800c860:	46bd      	mov	sp, r7
 800c862:	bd90      	pop	{r4, r7, pc}

0800c864 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d00a      	beq.n	800c88a <_ZN11MockSupport14hasReturnValueEv+0x26>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3350      	adds	r3, #80	; 0x50
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4610      	mov	r0, r2
 800c884:	4798      	blx	r3
 800c886:	4603      	mov	r3, r0
 800c888:	e000      	b.n	800c88c <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_Z41__static_initialization_and_destruction_0ii>:
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d115      	bne.n	800c8d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d110      	bne.n	800c8d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800c8ae:	f107 0308 	add.w	r3, r7, #8
 800c8b2:	490f      	ldr	r1, [pc, #60]	; (800c8f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 fb62 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800c8ba:	f107 0308 	add.w	r3, r7, #8
 800c8be:	4619      	mov	r1, r3
 800c8c0:	480c      	ldr	r0, [pc, #48]	; (800c8f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c8c2:	f7fe fc6d 	bl	800b1a0 <_ZN11MockSupportC1ERK12SimpleString>
 800c8c6:	f107 0308 	add.w	r3, r7, #8
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 ff0f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d107      	bne.n	800c8e6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d102      	bne.n	800c8e6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800c8e0:	4804      	ldr	r0, [pc, #16]	; (800c8f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c8e2:	f7fe fca7 	bl	800b234 <_ZN11MockSupportD1Ev>
}
 800c8e6:	bf00      	nop
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0802471c 	.word	0x0802471c
 800c8f4:	200008b8 	.word	0x200008b8

0800c8f8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	4a05      	ldr	r2, [pc, #20]	; (800c918 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe fbbb 	bl	800b084 <_ZN11MockFailureD1Ev>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	0802869c 	.word	0x0802869c

0800c91c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff ffe7 	bl	800c8f8 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800c92a:	2134      	movs	r1, #52	; 0x34
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f7fd ff77 	bl	800a820 <_ZdlPvj>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	4a05      	ldr	r2, [pc, #20]	; (800c95c <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7fe fb99 	bl	800b084 <_ZN11MockFailureD1Ev>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	08028670 	.word	0x08028670

0800c960 <_ZN20MockCallOrderFailureD0Ev>:
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff ffe7 	bl	800c93c <_ZN20MockCallOrderFailureD1Ev>
 800c96e:	2134      	movs	r1, #52	; 0x34
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7fd ff55 	bl	800a820 <_ZdlPvj>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
 800c984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c988:	2001      	movs	r0, #1
 800c98a:	f7ff ff83 	bl	800c894 <_Z41__static_initialization_and_destruction_0ii>
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800c990:	b580      	push	{r7, lr}
 800c992:	af00      	add	r7, sp, #0
 800c994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c998:	2000      	movs	r0, #0
 800c99a:	f7ff ff7b 	bl	800c894 <_Z41__static_initialization_and_destruction_0ii>
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800c9a8:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <_ZN11SimpleMutexC1Ev+0x20>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4798      	blx	r3
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
}
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	200000f0 	.word	0x200000f0

0800c9c4 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800c9cc:	4b05      	ldr	r3, [pc, #20]	; (800c9e4 <_ZN11SimpleMutexD1Ev+0x20>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	6812      	ldr	r2, [r2, #0]
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
}
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	200000fc 	.word	0x200000fc

0800c9e8 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800c9f0:	4b04      	ldr	r3, [pc, #16]	; (800ca04 <_ZN11SimpleMutex4LockEv+0x1c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	6812      	ldr	r2, [r2, #0]
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
}
 800c9fc:	bf00      	nop
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	200000f4 	.word	0x200000f4

0800ca08 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	6812      	ldr	r2, [r2, #0]
 800ca18:	4610      	mov	r0, r2
 800ca1a:	4798      	blx	r3
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	200000f8 	.word	0x200000f8

0800ca28 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7ff ffd3 	bl	800c9e8 <_ZN11SimpleMutex4LockEv>
}
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4618      	mov	r0, r3
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7ff ffd5 	bl	800ca08 <_ZN11SimpleMutex6UnlockEv>
}
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800ca6c:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d103      	bne.n	800ca7c <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800ca74:	f003 fd7a 	bl	801056c <_Z24defaultNewArrayAllocatorv>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	e001      	b.n	800ca80 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800ca7c:	4b01      	ldr	r3, [pc, #4]	; (800ca84 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000900 	.word	0x20000900

0800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800ca88:	b590      	push	{r4, r7, lr}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800ca94:	f7ff ffe8 	bl	800ca68 <_ZN12SimpleString18getStringAllocatorEv>
 800ca98:	6803      	ldr	r3, [r0, #0]
 800ca9a:	3308      	adds	r3, #8
 800ca9c:	681c      	ldr	r4, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	68f9      	ldr	r1, [r7, #12]
 800caa4:	47a0      	blx	r4
 800caa6:	4603      	mov	r3, r0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	bd90      	pop	{r4, r7, pc}

0800cab0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800cabe:	f7ff ffd3 	bl	800ca68 <_ZN12SimpleString18getStringAllocatorEv>
 800cac2:	6803      	ldr	r3, [r0, #0]
 800cac4:	330c      	adds	r3, #12
 800cac6:	681c      	ldr	r4, [r3, #0]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	68f9      	ldr	r1, [r7, #12]
 800cad2:	47a0      	blx	r4
}
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd90      	pop	{r4, r7, pc}

0800cadc <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800cae4:	2284      	movs	r2, #132	; 0x84
 800cae6:	4906      	ldr	r1, [pc, #24]	; (800cb00 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800cae8:	2001      	movs	r0, #1
 800caea:	f7ff ffcd 	bl	800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800caee:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]
    return empty;
 800caf6:	68fb      	ldr	r3, [r7, #12]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	080247b4 	.word	0x080247b4

0800cb04 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f001 f809 	bl	800db28 <_ZN12SimpleString7isSpaceEc>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <_ZN12SimpleString4AtoUEPKc+0x20>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e7f3      	b.n	800cb0c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 ffe7 	bl	800db00 <_ZN12SimpleString7isDigitEc>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d005      	beq.n	800cb44 <_ZN12SimpleString4AtoUEPKc+0x40>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b2f      	cmp	r3, #47	; 0x2f
 800cb3e:	d901      	bls.n	800cb44 <_ZN12SimpleString4AtoUEPKc+0x40>
 800cb40:	2301      	movs	r3, #1
 800cb42:	e000      	b.n	800cb46 <_ZN12SimpleString4AtoUEPKc+0x42>
 800cb44:	2300      	movs	r3, #0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d010      	beq.n	800cb6c <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4413      	add	r3, r2
 800cb60:	3b30      	subs	r3, #48	; 0x30
 800cb62:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3301      	adds	r3, #1
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	e7dd      	b.n	800cb28 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b084      	sub	sp, #16
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 ffd0 	bl	800db28 <_ZN12SimpleString7isSpaceEc>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d003      	beq.n	800cb96 <_ZN12SimpleString4AtoIEPKc+0x20>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3301      	adds	r3, #1
 800cb92:	607b      	str	r3, [r7, #4]
 800cb94:	e7f3      	b.n	800cb7e <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800cb9c:	7afb      	ldrb	r3, [r7, #11]
 800cb9e:	2b2d      	cmp	r3, #45	; 0x2d
 800cba0:	d002      	beq.n	800cba8 <_ZN12SimpleString4AtoIEPKc+0x32>
 800cba2:	7afb      	ldrb	r3, [r7, #11]
 800cba4:	2b2b      	cmp	r3, #43	; 0x2b
 800cba6:	d102      	bne.n	800cbae <_ZN12SimpleString4AtoIEPKc+0x38>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 ffa2 	bl	800db00 <_ZN12SimpleString7isDigitEc>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00f      	beq.n	800cbe2 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	3b30      	subs	r3, #48	; 0x30
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	607b      	str	r3, [r7, #4]
 800cbe0:	e7e7      	b.n	800cbb2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800cbe2:	7afb      	ldrb	r3, [r7, #11]
 800cbe4:	2b2d      	cmp	r3, #45	; 0x2d
 800cbe6:	d102      	bne.n	800cbee <_ZN12SimpleString4AtoIEPKc+0x78>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	425b      	negs	r3, r3
 800cbec:	e000      	b.n	800cbf0 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00c      	beq.n	800cc24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	781a      	ldrb	r2, [r3, #0]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d106      	bne.n	800cc24 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	607b      	str	r3, [r7, #4]
       ++s2;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800cc22:	e7ee      	b.n	800cc02 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	1ad3      	subs	r3, r2, r3
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800cc44:	f04f 33ff 	mov.w	r3, #4294967295
 800cc48:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	60fb      	str	r3, [r7, #12]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	607a      	str	r2, [r7, #4]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	bf14      	ite	ne
 800cc5c:	2301      	movne	r3, #1
 800cc5e:	2300      	moveq	r3, #0
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d000      	beq.n	800cc68 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800cc66:	e7f0      	b.n	800cc4a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800cc68:	68fb      	ldr	r3, [r7, #12]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b085      	sub	sp, #20
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d013      	beq.n	800ccb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00f      	beq.n	800ccb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d109      	bne.n	800ccb0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
        ++s1;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
        ++s2;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800ccae:	e7e8      	b.n	800cc82 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d006      	beq.n	800ccc4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	e000      	b.n	800ccc6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	b087      	sub	sp, #28
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	60f8      	str	r0, [r7, #12]
 800ccda:	60b9      	str	r1, [r7, #8]
 800ccdc:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	e01e      	b.n	800cd30 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	607b      	str	r3, [r7, #4]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e000      	b.n	800cd14 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800cd12:	2300      	movs	r3, #0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	60bb      	str	r3, [r7, #8]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	781a      	ldrb	r2, [r3, #0]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800cd2c:	e7e5      	b.n	800ccfa <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800cd2e:	697b      	ldr	r3, [r7, #20]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	e01b      	b.n	800cd8a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d016      	beq.n	800cd88 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800cd5a:	6838      	ldr	r0, [r7, #0]
 800cd5c:	f7ff ff6e 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800cd60:	4603      	mov	r3, r0
 800cd62:	461a      	mov	r2, r3
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff ff85 	bl	800cc76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bf0c      	ite	eq
 800cd72:	2301      	moveq	r3, #1
 800cd74:	2300      	movne	r3, #0
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	e004      	b.n	800cd8a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3301      	adds	r3, #1
 800cd84:	607b      	str	r3, [r7, #4]
 800cd86:	e7e4      	b.n	800cd52 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	4603      	mov	r3, r0
 800cd9a:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fed9 	bl	800db56 <_ZN12SimpleString7isUpperEc>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <_ZN12SimpleString7ToLowerEc+0x20>
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	3320      	adds	r3, #32
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	e000      	b.n	800cdb4 <_ZN12SimpleString7ToLowerEc+0x22>
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b087      	sub	sp, #28
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	613b      	str	r3, [r7, #16]

    while (n--)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	1e5a      	subs	r2, r3, #1
 800cdd4:	607a      	str	r2, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	bf14      	ite	ne
 800cdda:	2301      	movne	r3, #1
 800cddc:	2300      	moveq	r3, #0
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d013      	beq.n	800ce0c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d006      	beq.n	800cdfe <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	e007      	b.n	800ce0e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	3301      	adds	r3, #1
 800ce02:	617b      	str	r3, [r7, #20]
            ++p2;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	3301      	adds	r3, #1
 800ce08:	613b      	str	r3, [r7, #16]
    while (n--)
 800ce0a:	e7e1      	b.n	800cdd0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
	...

0800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00d      	beq.n	800ce48 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6859      	ldr	r1, [r3, #4]
 800ce34:	23ee      	movs	r3, #238	; 0xee
 800ce36:	4a06      	ldr	r2, [pc, #24]	; (800ce50 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800ce38:	f7ff fe3a 	bl	800cab0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	605a      	str	r2, [r3, #4]
    }
}
 800ce48:	bf00      	nop
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	080247b4 	.word	0x080247b4

0800ce54 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff ffdd 	bl	800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7ff fe37 	bl	800cadc <_ZNK12SimpleString14getEmptyStringEv>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ce88:	68f8      	ldr	r0, [r7, #12]
 800ce8a:	f7ff ffc7 	bl	800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	68b8      	ldr	r0, [r7, #8]
 800ce9c:	f000 fe12 	bl	800dac4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800cea0:	4602      	mov	r2, r0
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	601a      	str	r2, [r3, #0]
}
 800cea6:	bf00      	nop
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
	...

0800ceb0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff ffae 	bl	800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f240 1209 	movw	r2, #265	; 0x109
 800cece:	4907      	ldr	r1, [pc, #28]	; (800ceec <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fdd9 	bl	800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ced6:	4602      	mov	r2, r0
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2200      	movs	r2, #0
 800cee2:	701a      	strb	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	080247b4 	.word	0x080247b4

0800cef0 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f7ff ff8d 	bl	800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	601a      	str	r2, [r3, #0]
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800cf16:	b590      	push	{r4, r7, lr}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	681c      	ldr	r4, [r3, #0]
 800cf24:	6838      	ldr	r0, [r7, #0]
 800cf26:	f000 fbc1 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	461a      	mov	r2, r3
 800cf30:	4621      	mov	r1, r4
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff ffa2 	bl	800ce7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd90      	pop	{r4, r7, pc}

0800cf40 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800cf4a:	6838      	ldr	r0, [r7, #0]
 800cf4c:	f7ff fe76 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800cf50:	4603      	mov	r3, r0
 800cf52:	3301      	adds	r3, #1
 800cf54:	461a      	mov	r2, r3
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff ff8f 	bl	800ce7c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800cf66:	b480      	push	{r7}
 800cf68:	b083      	sub	sp, #12
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
    return buffer_;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d103      	bne.n	800cfa2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff ff5a 	bl	800ce54 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800cfa0:	e003      	b.n	800cfaa <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff ffcb 	bl	800cf40 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800cfcc:	68b8      	ldr	r0, [r7, #8]
 800cfce:	f7ff fe35 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800cfd2:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	fb02 f303 	mul.w	r3, r2, r3
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4619      	mov	r1, r3
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f7ff ff65 	bl	800ceb0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800cfec:	2300      	movs	r3, #0
 800cfee:	61bb      	str	r3, [r7, #24]
 800cff0:	69ba      	ldr	r2, [r7, #24]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d20e      	bcs.n	800d016 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	3301      	adds	r3, #1
 800cffc:	461a      	mov	r2, r3
 800cffe:	68b9      	ldr	r1, [r7, #8]
 800d000:	69f8      	ldr	r0, [r7, #28]
 800d002:	f7ff fe66 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	4413      	add	r3, r2
 800d00c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	3301      	adds	r3, #1
 800d012:	61bb      	str	r3, [r7, #24]
 800d014:	e7ec      	b.n	800cff0 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	2200      	movs	r2, #0
 800d01a:	701a      	strb	r2, [r3, #0]
}
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	4618      	mov	r0, r3
 800d020:	3720      	adds	r7, #32
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2200      	movs	r2, #0
 800d03a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800d03c:	6838      	ldr	r0, [r7, #0]
 800d03e:	f7ff ff92 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d042:	4603      	mov	r3, r0
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff ff7a 	bl	800cf40 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	429a      	cmp	r2, r3
 800d066:	d003      	beq.n	800d070 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff ff53 	bl	800cf16 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800d070:	687b      	ldr	r3, [r7, #4]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800d07a:	b590      	push	{r4, r7, lr}
 800d07c:	b083      	sub	sp, #12
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f7ff ff6e 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d08a:	4604      	mov	r4, r0
 800d08c:	6838      	ldr	r0, [r7, #0]
 800d08e:	f7ff ff6a 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d092:	4603      	mov	r3, r0
 800d094:	4619      	mov	r1, r3
 800d096:	4620      	mov	r0, r4
 800d098:	f7ff fe50 	bl	800cd3c <_ZN12SimpleString6StrStrEPKcS1_>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf14      	ite	ne
 800d0a2:	2301      	movne	r3, #1
 800d0a4:	2300      	moveq	r3, #0
 800d0a6:	b2db      	uxtb	r3, r3
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd90      	pop	{r4, r7, pc}

0800d0b0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800d0b0:	b590      	push	{r4, r7, lr}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 fabb 	bl	800d63c <_ZNK12SimpleString9lowerCaseEv>
 800d0c6:	f107 0310 	add.w	r3, r7, #16
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fab5 	bl	800d63c <_ZNK12SimpleString9lowerCaseEv>
 800d0d2:	f107 0210 	add.w	r2, r7, #16
 800d0d6:	f107 0308 	add.w	r3, r7, #8
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff ffcc 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	461c      	mov	r4, r3
 800d0e6:	bf00      	nop
 800d0e8:	f107 0310 	add.w	r3, r7, #16
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fafe 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d0f2:	f107 0308 	add.w	r3, r7, #8
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 faf9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d0fc:	4623      	mov	r3, r4
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}

0800d106 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800d106:	b590      	push	{r4, r7, lr}
 800d108:	b083      	sub	sp, #12
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800d110:	6838      	ldr	r0, [r7, #0]
 800d112:	f000 facb 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bf0c      	ite	eq
 800d11c:	2301      	moveq	r3, #1
 800d11e:	2300      	movne	r3, #0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800d126:	2301      	movs	r3, #1
 800d128:	e022      	b.n	800d170 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fabe 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	bf0c      	ite	eq
 800d136:	2301      	moveq	r3, #1
 800d138:	2300      	movne	r3, #0
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800d140:	2300      	movs	r3, #0
 800d142:	e015      	b.n	800d170 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ff0e 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d14a:	4604      	mov	r4, r0
 800d14c:	6838      	ldr	r0, [r7, #0]
 800d14e:	f7ff ff0a 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d152:	4603      	mov	r3, r0
 800d154:	4619      	mov	r1, r3
 800d156:	4620      	mov	r0, r4
 800d158:	f7ff fdf0 	bl	800cd3c <_ZN12SimpleString6StrStrEPKcS1_>
 800d15c:	4604      	mov	r4, r0
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7ff ff01 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d164:	4603      	mov	r3, r0
 800d166:	429c      	cmp	r4, r3
 800d168:	bf0c      	ite	eq
 800d16a:	2301      	moveq	r3, #1
 800d16c:	2300      	movne	r3, #0
 800d16e:	b2db      	uxtb	r3, r3
}
 800d170:	4618      	mov	r0, r3
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	bd90      	pop	{r4, r7, pc}

0800d178 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800d178:	b590      	push	{r4, r7, lr}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa92 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d188:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800d18a:	6838      	ldr	r0, [r7, #0]
 800d18c:	f000 fa8e 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d190:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <_ZNK12SimpleString8endsWithERKS_+0x24>
 800d198:	2301      	movs	r3, #1
 800d19a:	e020      	b.n	800d1de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e01b      	b.n	800d1de <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d201      	bcs.n	800d1b2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e015      	b.n	800d1de <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fed7 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	18cc      	adds	r4, r1, r3
 800d1c2:	6838      	ldr	r0, [r7, #0]
 800d1c4:	f7ff fecf 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f7ff fd13 	bl	800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	bf0c      	ite	eq
 800d1d8:	2301      	moveq	r3, #1
 800d1da:	2300      	movne	r3, #0
 800d1dc:	b2db      	uxtb	r3, r3
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd90      	pop	{r4, r7, pc}

0800d1e6 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b086      	sub	sp, #24
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff feb6 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d1fa:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]
    if (*str){
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d008      	beq.n	800d21a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800d208:	6838      	ldr	r0, [r7, #0]
 800d20a:	f7ff feac 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d20e:	4603      	mov	r3, r0
 800d210:	4619      	mov	r1, r3
 800d212:	6938      	ldr	r0, [r7, #16]
 800d214:	f7ff fd92 	bl	800cd3c <_ZN12SimpleString6StrStrEPKcS1_>
 800d218:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d014      	beq.n	800d24c <_ZNK12SimpleString5countERKS_+0x66>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d011      	beq.n	800d24c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	613b      	str	r3, [r7, #16]
        str++;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	3301      	adds	r3, #1
 800d230:	613b      	str	r3, [r7, #16]
        num++;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	3301      	adds	r3, #1
 800d236:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800d238:	6838      	ldr	r0, [r7, #0]
 800d23a:	f7ff fe94 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d23e:	4603      	mov	r3, r0
 800d240:	4619      	mov	r1, r3
 800d242:	6938      	ldr	r0, [r7, #16]
 800d244:	f7ff fd7a 	bl	800cd3c <_ZN12SimpleString6StrStrEPKcS1_>
 800d248:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800d24a:	e7e6      	b.n	800d21a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800d24c:	697b      	ldr	r3, [r7, #20]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800d256:	b590      	push	{r4, r7, lr}
 800d258:	b091      	sub	sp, #68	; 0x44
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800d262:	68b9      	ldr	r1, [r7, #8]
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff ffbe 	bl	800d1e6 <_ZNK12SimpleString5countERKS_>
 800d26a:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800d26c:	68b9      	ldr	r1, [r7, #8]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff ff82 	bl	800d178 <_ZNK12SimpleString8endsWithERKS_>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e000      	b.n	800d280 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800d27e:	2301      	movs	r3, #1
 800d280:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800d282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	4413      	add	r3, r2
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 f95c 	bl	800e548 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fe68 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d296:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800d298:	2300      	movs	r3, #0
 800d29a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d235      	bcs.n	800d310 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800d2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800d2a8:	68b8      	ldr	r0, [r7, #8]
 800d2aa:	f7ff fe5c 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d2b4:	f7ff fd42 	bl	800cd3c <_ZN12SimpleString6StrStrEPKcS1_>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800d2be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f001 f9db 	bl	800e67c <_ZN22SimpleStringCollectionixEj>
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	f107 031c 	add.w	r3, r7, #28
 800d2cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff fe55 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800d2d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	1ad3      	subs	r3, r2, r3
 800d2da:	f107 0014 	add.w	r0, r7, #20
 800d2de:	f107 011c 	add.w	r1, r7, #28
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f000 fb0c 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 800d2e8:	f107 0314 	add.w	r3, r7, #20
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7ff feb1 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800d2f4:	f107 0314 	add.w	r3, r7, #20
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 f9f8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d2fe:	f107 031c 	add.w	r3, r7, #28
 800d302:	4618      	mov	r0, r3
 800d304:	f000 f9f3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	3301      	adds	r3, #1
 800d30c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d30e:	e7c5      	b.n	800d29c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d312:	2b00      	cmp	r3, #0
 800d314:	d015      	beq.n	800d342 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800d316:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f001 f9af 	bl	800e67c <_ZN22SimpleStringCollectionixEj>
 800d31e:	4604      	mov	r4, r0
 800d320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d326:	4618      	mov	r0, r3
 800d328:	f7ff fe29 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800d32c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d330:	4619      	mov	r1, r3
 800d332:	4620      	mov	r0, r4
 800d334:	f7ff fe8f 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800d338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 f9d6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
}
 800d342:	bf00      	nop
 800d344:	3744      	adds	r7, #68	; 0x44
 800d346:	46bd      	mov	sp, r7
 800d348:	bd90      	pop	{r4, r7, pc}

0800d34a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b084      	sub	sp, #16
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
 800d356:	4613      	mov	r3, r2
 800d358:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f9a6 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d360:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800d362:	2300      	movs	r3, #0
 800d364:	60fb      	str	r3, [r7, #12]
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d218      	bcs.n	800d3a0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7ff fdf9 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d374:	4602      	mov	r2, r0
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	4413      	add	r3, r2
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	78fa      	ldrb	r2, [r7, #3]
 800d37e:	429a      	cmp	r2, r3
 800d380:	bf0c      	ite	eq
 800d382:	2301      	moveq	r3, #1
 800d384:	2300      	movne	r3, #0
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d005      	beq.n	800d398 <_ZN12SimpleString7replaceEcc+0x4e>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	4413      	add	r3, r2
 800d394:	78ba      	ldrb	r2, [r7, #2]
 800d396:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3301      	adds	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]
 800d39e:	e7e2      	b.n	800d366 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800d3a0:	bf00      	nop
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08e      	sub	sp, #56	; 0x38
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800d3b4:	f107 0310 	add.w	r3, r7, #16
 800d3b8:	68b9      	ldr	r1, [r7, #8]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7ff fddf 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800d3c0:	f107 0310 	add.w	r3, r7, #16
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f7ff ff0d 	bl	800d1e6 <_ZNK12SimpleString5countERKS_>
 800d3cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3ce:	f107 0310 	add.w	r3, r7, #16
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f98b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d071      	beq.n	800d4c2 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f000 f964 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d3e4:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800d3e6:	68b8      	ldr	r0, [r7, #8]
 800d3e8:	f7ff fc28 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800d3ec:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7ff fc24 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800d3f4:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3fa:	fb02 f203 	mul.w	r2, r2, r3
 800d3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d400:	441a      	add	r2, r3
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d406:	fb01 f303 	mul.w	r3, r1, r3
 800d40a:	1ad3      	subs	r3, r2, r3
 800d40c:	3301      	adds	r3, #1
 800d40e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d951      	bls.n	800d4ba <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800d416:	f240 129d 	movw	r2, #413	; 0x19d
 800d41a:	492c      	ldr	r1, [pc, #176]	; (800d4cc <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800d41c:	69f8      	ldr	r0, [r7, #28]
 800d41e:	f7ff fb33 	bl	800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d422:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800d424:	2300      	movs	r3, #0
 800d426:	637b      	str	r3, [r7, #52]	; 0x34
 800d428:	2300      	movs	r3, #0
 800d42a:	633b      	str	r3, [r7, #48]	; 0x30
 800d42c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	429a      	cmp	r2, r3
 800d432:	d236      	bcs.n	800d4a2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f7ff fd96 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d43a:	4602      	mov	r2, r0
 800d43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43e:	4413      	add	r3, r2
 800d440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fc16 	bl	800cc76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bf0c      	ite	eq
 800d450:	2301      	moveq	r3, #1
 800d452:	2300      	movne	r3, #0
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d011      	beq.n	800d47e <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	18d0      	adds	r0, r2, r3
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	3301      	adds	r3, #1
 800d464:	461a      	mov	r2, r3
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	f7ff fc33 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800d46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	4413      	add	r3, r2
 800d472:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800d474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	4413      	add	r3, r2
 800d47a:	637b      	str	r3, [r7, #52]	; 0x34
 800d47c:	e7d6      	b.n	800d42c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff fd71 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d484:	4602      	mov	r2, r0
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	441a      	add	r2, r3
 800d48a:	69b9      	ldr	r1, [r7, #24]
 800d48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48e:	440b      	add	r3, r1
 800d490:	7812      	ldrb	r2, [r2, #0]
 800d492:	701a      	strb	r2, [r3, #0]
                j++;
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	3301      	adds	r3, #1
 800d498:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800d49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49c:	3301      	adds	r3, #1
 800d49e:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800d4a0:	e7c4      	b.n	800d42c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	69b9      	ldr	r1, [r7, #24]
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f7ff fd1c 	bl	800cef0 <_ZN12SimpleString19setInternalBufferToEPcj>
 800d4b8:	e004      	b.n	800d4c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff fcca 	bl	800ce54 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d4c0:	e000      	b.n	800d4c4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800d4c2:	bf00      	nop
}
 800d4c4:	3738      	adds	r7, #56	; 0x38
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	080247b4 	.word	0x080247b4

0800d4d0 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b089      	sub	sp, #36	; 0x24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800d4da:	493b      	ldr	r1, [pc, #236]	; (800d5c8 <_ZNK12SimpleString9printableEv+0xf8>)
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff fd4e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800d4e2:	6838      	ldr	r0, [r7, #0]
 800d4e4:	f000 f876 	bl	800d5d4 <_ZNK12SimpleString16getPrintableSizeEv>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff fcde 	bl	800ceb0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800d4f4:	6838      	ldr	r0, [r7, #0]
 800d4f6:	f000 f8d9 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d4fa:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d500:	2300      	movs	r3, #0
 800d502:	61bb      	str	r3, [r7, #24]
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d252      	bcs.n	800d5b2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	4413      	add	r3, r2
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800d518:	7cfb      	ldrb	r3, [r7, #19]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fb43 	bl	800dba6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d012      	beq.n	800d54c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	18d0      	adds	r0, r2, r3
 800d52e:	7cfb      	ldrb	r3, [r7, #19]
 800d530:	3b07      	subs	r3, #7
 800d532:	b2db      	uxtb	r3, r3
 800d534:	461a      	mov	r2, r3
 800d536:	4b25      	ldr	r3, [pc, #148]	; (800d5cc <_ZNK12SimpleString9printableEv+0xfc>)
 800d538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53c:	2202      	movs	r2, #2
 800d53e:	4619      	mov	r1, r3
 800d540:	f7ff fbc7 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	3302      	adds	r3, #2
 800d548:	61fb      	str	r3, [r7, #28]
 800d54a:	e02e      	b.n	800d5aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800d54c:	7cfb      	ldrb	r3, [r7, #19]
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fb15 	bl	800db7e <_ZN12SimpleString9isControlEc>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d01e      	beq.n	800d598 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d55a:	7cfa      	ldrb	r2, [r7, #19]
 800d55c:	f107 0308 	add.w	r3, r7, #8
 800d560:	491b      	ldr	r1, [pc, #108]	; (800d5d0 <_ZNK12SimpleString9printableEv+0x100>)
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fdca 	bl	800e0fc <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	18d4      	adds	r4, r2, r3
 800d570:	f107 0308 	add.w	r3, r7, #8
 800d574:	4618      	mov	r0, r3
 800d576:	f000 f88d 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2204      	movs	r2, #4
 800d57e:	4619      	mov	r1, r3
 800d580:	4620      	mov	r0, r4
 800d582:	f7ff fba6 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	3304      	adds	r3, #4
 800d58a:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800d58c:	f107 0308 	add.w	r3, r7, #8
 800d590:	4618      	mov	r0, r3
 800d592:	f000 f8ac 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d596:	e008      	b.n	800d5aa <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	7cfa      	ldrb	r2, [r7, #19]
 800d5a2:	701a      	strb	r2, [r3, #0]
            j++;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	61bb      	str	r3, [r7, #24]
 800d5b0:	e7a8      	b.n	800d504 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	701a      	strb	r2, [r3, #0]

    return result;
 800d5be:	bf00      	nop
}
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	3724      	adds	r7, #36	; 0x24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd90      	pop	{r4, r7, pc}
 800d5c8:	08024874 	.word	0x08024874
 800d5cc:	2000006c 	.word	0x2000006c
 800d5d0:	08024878 	.word	0x08024878

0800d5d4 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f865 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d5e2:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	613b      	str	r3, [r7, #16]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d21e      	bcs.n	800d632 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800d600:	7afb      	ldrb	r3, [r7, #11]
 800d602:	4618      	mov	r0, r3
 800d604:	f000 facf 	bl	800dba6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	3301      	adds	r3, #1
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	e009      	b.n	800d62a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800d616:	7afb      	ldrb	r3, [r7, #11]
 800d618:	4618      	mov	r0, r3
 800d61a:	f000 fab0 	bl	800db7e <_ZN12SimpleString9isControlEc>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	3303      	adds	r3, #3
 800d628:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	3301      	adds	r3, #1
 800d62e:	613b      	str	r3, [r7, #16]
 800d630:	e7dc      	b.n	800d5ec <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800d632:	697b      	ldr	r3, [r7, #20]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800d63c:	b590      	push	{r4, r7, lr}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff fcec 	bl	800d026 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f82c 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d654:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800d656:	2300      	movs	r3, #0
 800d658:	60fb      	str	r3, [r7, #12]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	429a      	cmp	r2, r3
 800d660:	d213      	bcs.n	800d68a <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff fc7f 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d668:	4602      	mov	r2, r0
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	4413      	add	r3, r2
 800d66e:	7819      	ldrb	r1, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	18d4      	adds	r4, r2, r3
 800d678:	4608      	mov	r0, r1
 800d67a:	f7ff fb8a 	bl	800cd92 <_ZN12SimpleString7ToLowerEc>
 800d67e:	4603      	mov	r3, r0
 800d680:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	3301      	adds	r3, #1
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e7e7      	b.n	800d65a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800d68a:	bf00      	nop
}
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	bd90      	pop	{r4, r7, pc}

0800d694 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff fc62 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d6a2:	4603      	mov	r3, r0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff fc56 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fabd 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800d6c2:	4603      	mov	r3, r0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff ffe9 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	bf0c      	ite	eq
 800d6e0:	2301      	moveq	r3, #1
 800d6e2:	2300      	movne	r3, #0
 800d6e4:	b2db      	uxtb	r3, r3
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff fb90 	bl	800ce1c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800d706:	b590      	push	{r4, r7, lr}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff ffbf 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800d716:	4604      	mov	r4, r0
 800d718:	6838      	ldr	r0, [r7, #0]
 800d71a:	f7ff ffbb 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800d71e:	4603      	mov	r3, r0
 800d720:	4619      	mov	r1, r3
 800d722:	4620      	mov	r0, r4
 800d724:	f7ff fa68 	bl	800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	bf0c      	ite	eq
 800d72e:	2301      	moveq	r3, #1
 800d730:	2300      	movne	r3, #0
 800d732:	b2db      	uxtb	r3, r3
}
 800d734:	4618      	mov	r0, r3
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd90      	pop	{r4, r7, pc}

0800d73c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800d73c:	b590      	push	{r4, r7, lr}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800d746:	f107 0308 	add.w	r3, r7, #8
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff ff75 	bl	800d63c <_ZNK12SimpleString9lowerCaseEv>
 800d752:	f107 0310 	add.w	r3, r7, #16
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff ff6f 	bl	800d63c <_ZNK12SimpleString9lowerCaseEv>
 800d75e:	f107 0210 	add.w	r2, r7, #16
 800d762:	f107 0308 	add.w	r3, r7, #8
 800d766:	4611      	mov	r1, r2
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff ffcc 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 800d76e:	4603      	mov	r3, r0
 800d770:	461c      	mov	r4, r3
 800d772:	f107 0310 	add.w	r3, r7, #16
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff ffb9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d77c:	f107 0308 	add.w	r3, r7, #8
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff ffb4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d786:	4623      	mov	r3, r4
}
 800d788:	4618      	mov	r0, r3
 800d78a:	371c      	adds	r7, #28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd90      	pop	{r4, r7, pc}

0800d790 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800d79a:	6839      	ldr	r1, [r7, #0]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff ffb2 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	f083 0301 	eor.w	r3, r3, #1
 800d7a8:	b2db      	uxtb	r3, r3
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	60b9      	str	r1, [r7, #8]
 800d7bc:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800d7be:	68b8      	ldr	r0, [r7, #8]
 800d7c0:	f7ff fbd1 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f7ff fbd8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f7ff fbc9 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 f817 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    return t;
 800d7de:	bf00      	nop
}
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800d7f2:	6838      	ldr	r0, [r7, #0]
 800d7f4:	f7ff fbb7 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f805 	bl	800d80c <_ZN12SimpleStringpLEPKc>
 800d802:	4603      	mov	r3, r0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7ff ff48 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d81c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800d81e:	6838      	ldr	r0, [r7, #0]
 800d820:	f7ff fa0c 	bl	800cc3c <_ZN12SimpleString6StrLenEPKc>
 800d824:	4603      	mov	r3, r0
 800d826:	3301      	adds	r3, #1
 800d828:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	4413      	add	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7ff fb97 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d838:	4603      	mov	r3, r0
 800d83a:	68f9      	ldr	r1, [r7, #12]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 f941 	bl	800dac4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d842:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	4413      	add	r3, r2
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	6839      	ldr	r1, [r7, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff fa3f 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	68b9      	ldr	r1, [r7, #8]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff fb49 	bl	800cef0 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800d85e:	687b      	ldr	r3, [r7, #4]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b08b      	sub	sp, #44	; 0x2c
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	4613      	mov	r3, r2
 800d874:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7ff ff18 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d87c:	4604      	mov	r4, r0
 800d87e:	68b8      	ldr	r0, [r7, #8]
 800d880:	f7ff ff14 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d884:	4603      	mov	r3, r0
 800d886:	429c      	cmp	r4, r3
 800d888:	bf8c      	ite	hi
 800d88a:	2301      	movhi	r3, #1
 800d88c:	2300      	movls	r3, #0
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d006      	beq.n	800d8a2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800d894:	79fb      	ldrb	r3, [r7, #7]
 800d896:	461a      	mov	r2, r3
 800d898:	68f9      	ldr	r1, [r7, #12]
 800d89a:	68b8      	ldr	r0, [r7, #8]
 800d89c:	f7ff ffe4 	bl	800d868 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800d8a0:	e02b      	b.n	800d8fa <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800d8aa:	68b8      	ldr	r0, [r7, #8]
 800d8ac:	f7ff fefe 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7ff fefa 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	1ae2      	subs	r2, r4, r3
 800d8bc:	f107 0114 	add.w	r1, r7, #20
 800d8c0:	f107 0320 	add.w	r3, r7, #32
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff fb75 	bl	800cfb4 <_ZN12SimpleStringC1EPKcj>
 800d8ca:	f107 0318 	add.w	r3, r7, #24
 800d8ce:	f107 0120 	add.w	r1, r7, #32
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff ff6c 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800d8da:	f107 0318 	add.w	r3, r7, #24
 800d8de:	4619      	mov	r1, r3
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f7ff fbb8 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800d8e6:	f107 0318 	add.w	r3, r7, #24
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff feff 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800d8f0:	f107 0320 	add.w	r3, r7, #32
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fefa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800d8fa:	372c      	adds	r7, #44	; 0x2c
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd90      	pop	{r4, r7, pc}

0800d900 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
 800d90c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800d90e:	68b8      	ldr	r0, [r7, #8]
 800d910:	f7ff fecc 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d914:	4603      	mov	r3, r0
 800d916:	3b01      	subs	r3, #1
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	bf8c      	ite	hi
 800d91e:	2301      	movhi	r3, #1
 800d920:	2300      	movls	r3, #0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d004      	beq.n	800d932 <_ZNK12SimpleString9subStringEjj+0x32>
 800d928:	4919      	ldr	r1, [pc, #100]	; (800d990 <_ZNK12SimpleString9subStringEjj+0x90>)
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff fb27 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800d930:	e029      	b.n	800d986 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800d932:	68b8      	ldr	r0, [r7, #8]
 800d934:	f7ff fb17 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d938:	4602      	mov	r2, r0
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	441a      	add	r2, r3
 800d93e:	f107 0310 	add.w	r3, r7, #16
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff fb1a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800d94a:	f107 0310 	add.w	r3, r7, #16
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff feac 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800d954:	4602      	mov	r2, r0
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	4293      	cmp	r3, r2
 800d95a:	bf34      	ite	cc
 800d95c:	2301      	movcc	r3, #1
 800d95e:	2300      	movcs	r3, #0
 800d960:	b2db      	uxtb	r3, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	d004      	beq.n	800d970 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	4413      	add	r3, r2
 800d96c:	2200      	movs	r2, #0
 800d96e:	701a      	strb	r2, [r3, #0]

    return newString;
 800d970:	f107 0310 	add.w	r3, r7, #16
 800d974:	4619      	mov	r1, r3
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f7ff fb55 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800d97c:	f107 0310 	add.w	r3, r7, #16
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff feb4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	08024874 	.word	0x08024874

0800d994 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	f7ff ffa9 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
}
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff fad0 	bl	800cf66 <_ZNK12SimpleString9getBufferEv>
 800d9c6:	4602      	mov	r2, r0
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	781b      	ldrb	r3, [r3, #0]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b082      	sub	sp, #8
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800d9e2:	78fb      	ldrb	r3, [r7, #3]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f805 	bl	800d9f8 <_ZNK12SimpleString8findFromEjc>
 800d9ee:	4603      	mov	r3, r0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4613      	mov	r3, r2
 800da04:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff fe50 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800da0c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	429a      	cmp	r2, r3
 800da18:	d213      	bcs.n	800da42 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800da1a:	6979      	ldr	r1, [r7, #20]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff ffca 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800da22:	4603      	mov	r3, r0
 800da24:	461a      	mov	r2, r3
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4293      	cmp	r3, r2
 800da2a:	bf0c      	ite	eq
 800da2c:	2301      	moveq	r3, #1
 800da2e:	2300      	movne	r3, #0
 800da30:	b2db      	uxtb	r3, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <_ZNK12SimpleString8findFromEjc+0x42>
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	e005      	b.n	800da46 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	3301      	adds	r3, #1
 800da3e:	617b      	str	r3, [r7, #20]
 800da40:	e7e7      	b.n	800da12 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800da42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800da46:	4618      	mov	r0, r3
 800da48:	3718      	adds	r7, #24
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	4611      	mov	r1, r2
 800da5c:	461a      	mov	r2, r3
 800da5e:	460b      	mov	r3, r1
 800da60:	71fb      	strb	r3, [r7, #7]
 800da62:	4613      	mov	r3, r2
 800da64:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	4619      	mov	r1, r3
 800da6a:	68b8      	ldr	r0, [r7, #8]
 800da6c:	f7ff ffb3 	bl	800d9d6 <_ZNK12SimpleString4findEc>
 800da70:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da78:	d104      	bne.n	800da84 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800da7a:	4911      	ldr	r1, [pc, #68]	; (800dac0 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fa7e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800da82:	e019      	b.n	800dab8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800da84:	79bb      	ldrb	r3, [r7, #6]
 800da86:	461a      	mov	r2, r3
 800da88:	6979      	ldr	r1, [r7, #20]
 800da8a:	68b8      	ldr	r0, [r7, #8]
 800da8c:	f7ff ffb4 	bl	800d9f8 <_ZNK12SimpleString8findFromEjc>
 800da90:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d106      	bne.n	800daa8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff ff77 	bl	800d994 <_ZNK12SimpleString9subStringEj>
 800daa6:	e007      	b.n	800dab8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800daa8:	693a      	ldr	r2, [r7, #16]
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	68b9      	ldr	r1, [r7, #8]
 800dab4:	f7ff ff24 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
}
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	3718      	adds	r7, #24
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	08024874 	.word	0x08024874

0800dac4 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800dace:	f240 2275 	movw	r2, #629	; 0x275
 800dad2:	490a      	ldr	r1, [pc, #40]	; (800dafc <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800dad4:	6838      	ldr	r0, [r7, #0]
 800dad6:	f7fe ffd7 	bl	800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800dada:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7ff f8f6 	bl	800ccd2 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	3b01      	subs	r3, #1
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	4413      	add	r3, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800daf2:	68fb      	ldr	r3, [r7, #12]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	080247b4 	.word	0x080247b4

0800db00 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	4603      	mov	r3, r0
 800db08:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	2b2f      	cmp	r3, #47	; 0x2f
 800db0e:	d904      	bls.n	800db1a <_ZN12SimpleString7isDigitEc+0x1a>
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	2b39      	cmp	r3, #57	; 0x39
 800db14:	d801      	bhi.n	800db1a <_ZN12SimpleString7isDigitEc+0x1a>
 800db16:	2301      	movs	r3, #1
 800db18:	e000      	b.n	800db1c <_ZN12SimpleString7isDigitEc+0x1c>
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800db32:	79fb      	ldrb	r3, [r7, #7]
 800db34:	2b20      	cmp	r3, #32
 800db36:	d005      	beq.n	800db44 <_ZN12SimpleString7isSpaceEc+0x1c>
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	2b08      	cmp	r3, #8
 800db3c:	d904      	bls.n	800db48 <_ZN12SimpleString7isSpaceEc+0x20>
 800db3e:	79fb      	ldrb	r3, [r7, #7]
 800db40:	2b0d      	cmp	r3, #13
 800db42:	d801      	bhi.n	800db48 <_ZN12SimpleString7isSpaceEc+0x20>
 800db44:	2301      	movs	r3, #1
 800db46:	e000      	b.n	800db4a <_ZN12SimpleString7isSpaceEc+0x22>
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	4603      	mov	r3, r0
 800db5e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800db60:	79fb      	ldrb	r3, [r7, #7]
 800db62:	2b40      	cmp	r3, #64	; 0x40
 800db64:	d904      	bls.n	800db70 <_ZN12SimpleString7isUpperEc+0x1a>
 800db66:	79fb      	ldrb	r3, [r7, #7]
 800db68:	2b5a      	cmp	r3, #90	; 0x5a
 800db6a:	d801      	bhi.n	800db70 <_ZN12SimpleString7isUpperEc+0x1a>
 800db6c:	2301      	movs	r3, #1
 800db6e:	e000      	b.n	800db72 <_ZN12SimpleString7isUpperEc+0x1c>
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800db7e:	b480      	push	{r7}
 800db80:	b083      	sub	sp, #12
 800db82:	af00      	add	r7, sp, #0
 800db84:	4603      	mov	r3, r0
 800db86:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	2b1f      	cmp	r3, #31
 800db8c:	d902      	bls.n	800db94 <_ZN12SimpleString9isControlEc+0x16>
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	2b7f      	cmp	r3, #127	; 0x7f
 800db92:	d101      	bne.n	800db98 <_ZN12SimpleString9isControlEc+0x1a>
 800db94:	2301      	movs	r3, #1
 800db96:	e000      	b.n	800db9a <_ZN12SimpleString9isControlEc+0x1c>
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b083      	sub	sp, #12
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	4603      	mov	r3, r0
 800dbae:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b06      	cmp	r3, #6
 800dbb4:	d904      	bls.n	800dbc0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
 800dbb8:	2b0d      	cmp	r3, #13
 800dbba:	d801      	bhi.n	800dbc0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e000      	b.n	800dbc2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
	...

0800dbd0 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800dbdc:	78fb      	ldrb	r3, [r7, #3]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d001      	beq.n	800dbe6 <_Z10StringFromb+0x16>
 800dbe2:	4a06      	ldr	r2, [pc, #24]	; (800dbfc <_Z10StringFromb+0x2c>)
 800dbe4:	e000      	b.n	800dbe8 <_Z10StringFromb+0x18>
 800dbe6:	4a06      	ldr	r2, [pc, #24]	; (800dc00 <_Z10StringFromb+0x30>)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4906      	ldr	r1, [pc, #24]	; (800dc04 <_Z10StringFromb+0x34>)
 800dbec:	4618      	mov	r0, r3
 800dbee:	f000 fa85 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	08024880 	.word	0x08024880
 800dc00:	08024888 	.word	0x08024888
 800dc04:	08024890 	.word	0x08024890

0800dc08 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff f9b2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800dc24:	b590      	push	{r4, r7, lr}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800dc2e:	2400      	movs	r4, #0
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00e      	beq.n	800dc54 <_Z25PrintableStringFromOrNullPKc+0x30>
 800dc36:	f107 0308 	add.w	r3, r7, #8
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff ffe3 	bl	800dc08 <_Z10StringFromPKc>
 800dc42:	2401      	movs	r4, #1
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f107 0208 	add.w	r2, r7, #8
 800dc4a:	4611      	mov	r1, r2
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fc3f 	bl	800d4d0 <_ZNK12SimpleString9printableEv>
 800dc52:	e004      	b.n	800dc5e <_Z25PrintableStringFromOrNullPKc+0x3a>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4908      	ldr	r1, [pc, #32]	; (800dc78 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff ffd5 	bl	800dc08 <_Z10StringFromPKc>
 800dc5e:	2c00      	cmp	r4, #0
 800dc60:	d004      	beq.n	800dc6c <_Z25PrintableStringFromOrNullPKc+0x48>
 800dc62:	f107 0308 	add.w	r3, r7, #8
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7ff fd41 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dc6c:	bf00      	nop
}
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd90      	pop	{r4, r7, pc}
 800dc76:	bf00      	nop
 800dc78:	08024894 	.word	0x08024894

0800dc7c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	4904      	ldr	r1, [pc, #16]	; (800dc9c <_Z10StringFromi+0x20>)
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f000 fa35 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	0802489c 	.word	0x0802489c

0800dca0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	4904      	ldr	r1, [pc, #16]	; (800dcc0 <_Z10StringFroml+0x20>)
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 fa23 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	080248a0 	.word	0x080248a0

0800dcc4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800dcce:	f107 0308 	add.w	r3, r7, #8
 800dcd2:	4910      	ldr	r1, [pc, #64]	; (800dd14 <_Z10StringFromPKv+0x50>)
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff f952 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800dcda:	f107 0310 	add.w	r3, r7, #16
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f000 f9a1 	bl	800e028 <_Z13HexStringFromPKv>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f107 0210 	add.w	r2, r7, #16
 800dcec:	f107 0108 	add.w	r1, r7, #8
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fd5e 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800dcf6:	f107 0310 	add.w	r3, r7, #16
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7ff fcf7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dd00:	f107 0308 	add.w	r3, r7, #8
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff fcf2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dd0a:	bf00      	nop
}
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	080248a4 	.word	0x080248a4

0800dd18 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800dd22:	f107 0308 	add.w	r3, r7, #8
 800dd26:	4910      	ldr	r1, [pc, #64]	; (800dd68 <_Z10StringFromPFvvE+0x50>)
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff f928 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800dd2e:	f107 0310 	add.w	r3, r7, #16
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f98b 	bl	800e050 <_Z13HexStringFromPFvvE>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f107 0210 	add.w	r2, r7, #16
 800dd40:	f107 0108 	add.w	r1, r7, #8
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fd34 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800dd4a:	f107 0310 	add.w	r3, r7, #16
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fccd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dd54:	f107 0308 	add.w	r3, r7, #8
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7ff fcc8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dd5e:	bf00      	nop
}
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	3718      	adds	r7, #24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	080248a4 	.word	0x080248a4

0800dd6c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	4904      	ldr	r1, [pc, #16]	; (800dd8c <_Z13HexStringFroml+0x20>)
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f9bd 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	3708      	adds	r7, #8
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	080248a8 	.word	0x080248a8

0800dd90 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	4904      	ldr	r1, [pc, #16]	; (800ddb0 <_Z13HexStringFromi+0x20>)
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 f9ab 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	080248ac 	.word	0x080248ac

0800ddb4 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800ddc0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4912      	ldr	r1, [pc, #72]	; (800de10 <_Z13HexStringFroma+0x5c>)
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 f997 	bl	800e0fc <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800ddce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	da16      	bge.n	800de04 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fc68 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800dddc:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	1e9a      	subs	r2, r3, #2
 800dde2:	f107 030c 	add.w	r3, r7, #12
 800dde6:	6879      	ldr	r1, [r7, #4]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7ff fdd3 	bl	800d994 <_ZNK12SimpleString9subStringEj>
 800ddee:	f107 030c 	add.w	r3, r7, #12
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff f92e 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800ddfa:	f107 030c 	add.w	r3, r7, #12
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7ff fc75 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
    return result;
 800de04:	bf00      	nop
}
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	080248ac 	.word	0x080248ac

0800de14 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	4904      	ldr	r1, [pc, #16]	; (800de34 <_Z13HexStringFromm+0x20>)
 800de24:	4618      	mov	r0, r3
 800de26:	f000 f969 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	080248a8 	.word	0x080248a8

0800de38 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	4904      	ldr	r1, [pc, #16]	; (800de58 <_Z13HexStringFromj+0x20>)
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f957 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	3708      	adds	r7, #8
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	080248ac 	.word	0x080248ac

0800de5c <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800de66:	f107 0308 	add.w	r3, r7, #8
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7ff ff8f 	bl	800dd90 <_Z13HexStringFromi>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f107 0208 	add.w	r2, r7, #8
 800de78:	4611      	mov	r1, r2
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 f87e 	bl	800df7c <_Z26BracketsFormattedHexString12SimpleString>
 800de80:	f107 0308 	add.w	r3, r7, #8
 800de84:	4618      	mov	r0, r3
 800de86:	f7ff fc32 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800de8a:	bf00      	nop
}
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800de9e:	f107 0308 	add.w	r3, r7, #8
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7ff ffc7 	bl	800de38 <_Z13HexStringFromj>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f107 0208 	add.w	r2, r7, #8
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 f862 	bl	800df7c <_Z26BracketsFormattedHexString12SimpleString>
 800deb8:	f107 0308 	add.w	r3, r7, #8
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fc16 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dec2:	bf00      	nop
}
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ded6:	f107 0308 	add.w	r3, r7, #8
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff ff45 	bl	800dd6c <_Z13HexStringFroml>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f107 0208 	add.w	r2, r7, #8
 800dee8:	4611      	mov	r1, r2
 800deea:	4618      	mov	r0, r3
 800deec:	f000 f846 	bl	800df7c <_Z26BracketsFormattedHexString12SimpleString>
 800def0:	f107 0308 	add.w	r3, r7, #8
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff fbfa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800defa:	bf00      	nop
}
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	3710      	adds	r7, #16
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800df0e:	f107 0308 	add.w	r3, r7, #8
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff ff7d 	bl	800de14 <_Z13HexStringFromm>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f107 0208 	add.w	r2, r7, #8
 800df20:	4611      	mov	r1, r2
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f82a 	bl	800df7c <_Z26BracketsFormattedHexString12SimpleString>
 800df28:	f107 0308 	add.w	r3, r7, #8
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fbde 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800df32:	bf00      	nop
}
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	460b      	mov	r3, r1
 800df46:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800df48:	f107 0308 	add.w	r3, r7, #8
 800df4c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800df50:	4611      	mov	r1, r2
 800df52:	4618      	mov	r0, r3
 800df54:	f7ff ff2e 	bl	800ddb4 <_Z13HexStringFroma>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f107 0208 	add.w	r2, r7, #8
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f000 f80b 	bl	800df7c <_Z26BracketsFormattedHexString12SimpleString>
 800df66:	f107 0308 	add.w	r3, r7, #8
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fbbf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800df70:	bf00      	nop
}
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
	...

0800df7c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b088      	sub	sp, #32
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800df86:	f107 0310 	add.w	r3, r7, #16
 800df8a:	4917      	ldr	r1, [pc, #92]	; (800dfe8 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fff6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800df92:	f107 0308 	add.w	r3, r7, #8
 800df96:	f107 0110 	add.w	r1, r7, #16
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff fc08 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800dfa2:	f107 0318 	add.w	r3, r7, #24
 800dfa6:	4911      	ldr	r1, [pc, #68]	; (800dfec <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe ffe8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f107 0218 	add.w	r2, r7, #24
 800dfb4:	f107 0108 	add.w	r1, r7, #8
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fbfa 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800dfbe:	f107 0318 	add.w	r3, r7, #24
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fb93 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff fb8e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dfd2:	f107 0310 	add.w	r3, r7, #16
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff fb89 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800dfdc:	bf00      	nop
}
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	3720      	adds	r7, #32
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	080248b0 	.word	0x080248b0
 800dfec:	080248b4 	.word	0x080248b4

0800dff0 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800dff8:	1d3b      	adds	r3, r7, #4
 800dffa:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800e014:	1d3b      	adds	r3, r7, #4
 800e016:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800e032:	6838      	ldr	r0, [r7, #0]
 800e034:	f7ff ffdc 	bl	800dff0 <_ZL25convertPointerToLongValuePKv>
 800e038:	4602      	mov	r2, r0
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4903      	ldr	r1, [pc, #12]	; (800e04c <_Z13HexStringFromPKv+0x24>)
 800e03e:	4618      	mov	r0, r3
 800e040:	f000 f85c 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	080248a8 	.word	0x080248a8

0800e050 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800e05a:	6838      	ldr	r0, [r7, #0]
 800e05c:	f7ff ffd6 	bl	800e00c <_ZL33convertFunctionPointerToLongValuePFvvE>
 800e060:	4602      	mov	r2, r0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	4903      	ldr	r1, [pc, #12]	; (800e074 <_Z13HexStringFromPFvvE+0x24>)
 800e066:	4618      	mov	r0, r3
 800e068:	f000 f848 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	080248a8 	.word	0x080248a8

0800e078 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	ed87 0b00 	vstr	d0, [r7]
 800e084:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800e086:	4b18      	ldr	r3, [pc, #96]	; (800e0e8 <_Z10StringFromdi+0x70>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	ed97 0b00 	vldr	d0, [r7]
 800e08e:	4798      	blx	r3
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	bf14      	ite	ne
 800e096:	2301      	movne	r3, #1
 800e098:	2300      	moveq	r3, #0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d004      	beq.n	800e0aa <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800e0a0:	4912      	ldr	r1, [pc, #72]	; (800e0ec <_Z10StringFromdi+0x74>)
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f7fe ff6b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e0a8:	e01a      	b.n	800e0e0 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800e0aa:	4b11      	ldr	r3, [pc, #68]	; (800e0f0 <_Z10StringFromdi+0x78>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	ed97 0b00 	vldr	d0, [r7]
 800e0b2:	4798      	blx	r3
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	bf14      	ite	ne
 800e0ba:	2301      	movne	r3, #1
 800e0bc:	2300      	moveq	r3, #0
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d004      	beq.n	800e0ce <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800e0c4:	490b      	ldr	r1, [pc, #44]	; (800e0f4 <_Z10StringFromdi+0x7c>)
 800e0c6:	68f8      	ldr	r0, [r7, #12]
 800e0c8:	f7fe ff59 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e0cc:	e008      	b.n	800e0e0 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0d4:	e9cd 2300 	strd	r2, r3, [sp]
 800e0d8:	68ba      	ldr	r2, [r7, #8]
 800e0da:	4907      	ldr	r1, [pc, #28]	; (800e0f8 <_Z10StringFromdi+0x80>)
 800e0dc:	f000 f80e 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	200000e8 	.word	0x200000e8
 800e0ec:	080248e8 	.word	0x080248e8
 800e0f0:	200000ec 	.word	0x200000ec
 800e0f4:	080248fc 	.word	0x080248fc
 800e0f8:	0802490c 	.word	0x0802490c

0800e0fc <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800e0fc:	b40e      	push	{r1, r2, r3}
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b087      	sub	sp, #28
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800e106:	4910      	ldr	r1, [pc, #64]	; (800e148 <_Z16StringFromFormatPKcz+0x4c>)
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fe ff38 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800e10e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e112:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800e114:	f107 0310 	add.w	r3, r7, #16
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e11c:	4618      	mov	r0, r3
 800e11e:	f000 f839 	bl	800e194 <_Z17VStringFromFormatPKcSt9__va_list>
 800e122:	f107 0310 	add.w	r3, r7, #16
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fe ff94 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e12e:	f107 0310 	add.w	r3, r7, #16
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff fadb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800e138:	bf00      	nop
}
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	371c      	adds	r7, #28
 800e13e:	46bd      	mov	sp, r7
 800e140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e144:	b003      	add	sp, #12
 800e146:	4770      	bx	lr
 800e148:	08024874 	.word	0x08024874

0800e14c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	4904      	ldr	r1, [pc, #16]	; (800e16c <_Z10StringFromj+0x20>)
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff ffcd 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	08024918 	.word	0x08024918

0800e170 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	683a      	ldr	r2, [r7, #0]
 800e17e:	4904      	ldr	r1, [pc, #16]	; (800e190 <_Z10StringFromm+0x20>)
 800e180:	4618      	mov	r0, r3
 800e182:	f7ff ffbb 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	0802491c 	.word	0x0802491c

0800e194 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b0a7      	sub	sp, #156	; 0x9c
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800e1a4:	492e      	ldr	r1, [pc, #184]	; (800e260 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7fe fee9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800e1ac:	4b2d      	ldr	r3, [pc, #180]	; (800e264 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e1ae:	681c      	ldr	r4, [r3, #0]
 800e1b0:	f107 0014 	add.w	r0, r7, #20
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	2164      	movs	r1, #100	; 0x64
 800e1ba:	47a0      	blx	r4
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800e1c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1c6:	2b63      	cmp	r3, #99	; 0x63
 800e1c8:	d813      	bhi.n	800e1f2 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800e1ca:	f107 0214 	add.w	r2, r7, #20
 800e1ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe fed2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e1da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e1de:	4619      	mov	r1, r3
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f7fe ff38 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e1e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fa7f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800e1f0:	e031      	b.n	800e256 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800e1f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800e1fc:	f240 32c3 	movw	r2, #963	; 0x3c3
 800e200:	4919      	ldr	r1, [pc, #100]	; (800e268 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e202:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e206:	f7fe fc3f 	bl	800ca88 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e20a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800e20e:	4b15      	ldr	r3, [pc, #84]	; (800e264 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e210:	681c      	ldr	r4, [r3, #0]
 800e212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e21a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e21e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800e220:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e224:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe fea8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e22e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e232:	4619      	mov	r1, r3
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7fe ff0e 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e23a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e23e:	4618      	mov	r0, r3
 800e240:	f7ff fa55 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800e244:	f240 33c7 	movw	r3, #967	; 0x3c7
 800e248:	4a07      	ldr	r2, [pc, #28]	; (800e268 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e24a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e24e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e252:	f7fe fc2d 	bl	800cab0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800e256:	bf00      	nop
}
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	379c      	adds	r7, #156	; 0x9c
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd90      	pop	{r4, r7, pc}
 800e260:	08024874 	.word	0x08024874
 800e264:	200000b0 	.word	0x200000b0
 800e268:	080247b4 	.word	0x080247b4

0800e26c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08a      	sub	sp, #40	; 0x28
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800e278:	491f      	ldr	r1, [pc, #124]	; (800e2f8 <_Z16StringFromBinaryPKhj+0x8c>)
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7fe fe7f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800e280:	2300      	movs	r3, #0
 800e282:	627b      	str	r3, [r7, #36]	; 0x24
 800e284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d219      	bcs.n	800e2c0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	4413      	add	r3, r2
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	461a      	mov	r2, r3
 800e296:	f107 0314 	add.w	r3, r7, #20
 800e29a:	4918      	ldr	r1, [pc, #96]	; (800e2fc <_Z16StringFromBinaryPKhj+0x90>)
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff ff2d 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800e2a2:	f107 0314 	add.w	r3, r7, #20
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff fa9d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800e2ae:	f107 0314 	add.w	r3, r7, #20
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff fa1b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e2be:	e7e1      	b.n	800e284 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f7ff f9f3 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	f107 001c 	add.w	r0, r7, #28
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	68f9      	ldr	r1, [r7, #12]
 800e2d2:	f7ff fb15 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 800e2d6:	f107 031c 	add.w	r3, r7, #28
 800e2da:	4619      	mov	r1, r3
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7fe feba 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e2e2:	f107 031c 	add.w	r3, r7, #28
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff fa01 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    return result;
 800e2ec:	bf00      	nop
}
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	3728      	adds	r7, #40	; 0x28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	08024874 	.word	0x08024874
 800e2fc:	08024920 	.word	0x08024920

0800e300 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d006      	beq.n	800e320 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	68b9      	ldr	r1, [r7, #8]
 800e318:	4618      	mov	r0, r3
 800e31a:	f7ff ffa7 	bl	800e26c <_Z16StringFromBinaryPKhj>
 800e31e:	e004      	b.n	800e32a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	4904      	ldr	r1, [pc, #16]	; (800e334 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fc6f 	bl	800dc08 <_Z10StringFromPKc>
}
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	08024894 	.word	0x08024894

0800e338 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	4913      	ldr	r1, [pc, #76]	; (800e398 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7ff fed6 	bl	800e0fc <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b80      	cmp	r3, #128	; 0x80
 800e354:	bf28      	it	cs
 800e356:	2380      	movcs	r3, #128	; 0x80
 800e358:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800e35a:	f107 0314 	add.w	r3, r7, #20
 800e35e:	69fa      	ldr	r2, [r7, #28]
 800e360:	68b9      	ldr	r1, [r7, #8]
 800e362:	4618      	mov	r0, r3
 800e364:	f7ff ffcc 	bl	800e300 <_Z22StringFromBinaryOrNullPKhj>
 800e368:	f107 0314 	add.w	r3, r7, #20
 800e36c:	4619      	mov	r1, r3
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f7ff fa3a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800e374:	f107 0314 	add.w	r3, r7, #20
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff f9b8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	429a      	cmp	r2, r3
 800e384:	d903      	bls.n	800e38e <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800e386:	4905      	ldr	r1, [pc, #20]	; (800e39c <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff fa3f 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800e38e:	bf00      	nop
}
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	3720      	adds	r7, #32
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	08024928 	.word	0x08024928
 800e39c:	08024944 	.word	0x08024944

0800e3a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	68b9      	ldr	r1, [r7, #8]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7ff ffbd 	bl	800e338 <_Z24StringFromBinaryWithSizePKhj>
 800e3be:	e004      	b.n	800e3ca <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	4904      	ldr	r1, [pc, #16]	; (800e3d4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7ff fc1f 	bl	800dc08 <_Z10StringFromPKc>
}
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	08024894 	.word	0x08024894

0800e3d8 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800e3e6:	4925      	ldr	r1, [pc, #148]	; (800e47c <_Z20StringFromMaskedBitsmmj+0xa4>)
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7fe fdc8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d802      	bhi.n	800e3fa <_Z20StringFromMaskedBitsmmj+0x22>
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	e000      	b.n	800e3fc <_Z20StringFromMaskedBitsmmj+0x24>
 800e3fa:	2320      	movs	r3, #32
 800e3fc:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	3b01      	subs	r3, #1
 800e402:	2201      	movs	r2, #1
 800e404:	fa02 f303 	lsl.w	r3, r2, r3
 800e408:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800e40a:	2300      	movs	r3, #0
 800e40c:	61fb      	str	r3, [r7, #28]
 800e40e:	69fa      	ldr	r2, [r7, #28]
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	429a      	cmp	r2, r3
 800e414:	d22d      	bcs.n	800e472 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	4013      	ands	r3, r2
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00c      	beq.n	800e43a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	4013      	ands	r3, r2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <_Z20StringFromMaskedBitsmmj+0x56>
 800e42a:	4b15      	ldr	r3, [pc, #84]	; (800e480 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800e42c:	e000      	b.n	800e430 <_Z20StringFromMaskedBitsmmj+0x58>
 800e42e:	4b15      	ldr	r3, [pc, #84]	; (800e484 <_Z20StringFromMaskedBitsmmj+0xac>)
 800e430:	4619      	mov	r1, r3
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff f9ea 	bl	800d80c <_ZN12SimpleStringpLEPKc>
 800e438:	e003      	b.n	800e442 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800e43a:	4913      	ldr	r1, [pc, #76]	; (800e488 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff f9e5 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	f003 0307 	and.w	r3, r3, #7
 800e448:	2b07      	cmp	r3, #7
 800e44a:	d108      	bne.n	800e45e <_Z20StringFromMaskedBitsmmj+0x86>
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	3b01      	subs	r3, #1
 800e450:	69fa      	ldr	r2, [r7, #28]
 800e452:	429a      	cmp	r2, r3
 800e454:	d003      	beq.n	800e45e <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800e456:	490d      	ldr	r1, [pc, #52]	; (800e48c <_Z20StringFromMaskedBitsmmj+0xb4>)
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f7ff f9d7 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	005b      	lsls	r3, r3, #1
 800e468:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	3301      	adds	r3, #1
 800e46e:	61fb      	str	r3, [r7, #28]
 800e470:	e7cd      	b.n	800e40e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800e472:	bf00      	nop
}
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	08024874 	.word	0x08024874
 800e480:	0802494c 	.word	0x0802494c
 800e484:	08024950 	.word	0x08024950
 800e488:	08024954 	.word	0x08024954
 800e48c:	08024958 	.word	0x08024958

0800e490 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	4b18      	ldr	r3, [pc, #96]	; (800e500 <_Z23StringFromOrdinalNumberj+0x70>)
 800e49e:	fba3 1302 	umull	r1, r3, r3, r2
 800e4a2:	08d9      	lsrs	r1, r3, #3
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	440b      	add	r3, r1
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b0a      	cmp	r3, #10
 800e4b4:	d905      	bls.n	800e4c2 <_Z23StringFromOrdinalNumberj+0x32>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	2b0d      	cmp	r3, #13
 800e4ba:	d802      	bhi.n	800e4c2 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800e4bc:	4b11      	ldr	r3, [pc, #68]	; (800e504 <_Z23StringFromOrdinalNumberj+0x74>)
 800e4be:	60fb      	str	r3, [r7, #12]
 800e4c0:	e013      	b.n	800e4ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d102      	bne.n	800e4ce <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <_Z23StringFromOrdinalNumberj+0x78>)
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	e00d      	b.n	800e4ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d102      	bne.n	800e4da <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800e4d4:	4b0d      	ldr	r3, [pc, #52]	; (800e50c <_Z23StringFromOrdinalNumberj+0x7c>)
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e007      	b.n	800e4ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d102      	bne.n	800e4e6 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800e4e0:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <_Z23StringFromOrdinalNumberj+0x80>)
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e001      	b.n	800e4ea <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800e4e6:	4b07      	ldr	r3, [pc, #28]	; (800e504 <_Z23StringFromOrdinalNumberj+0x74>)
 800e4e8:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	4908      	ldr	r1, [pc, #32]	; (800e514 <_Z23StringFromOrdinalNumberj+0x84>)
 800e4f2:	f7ff fe03 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	cccccccd 	.word	0xcccccccd
 800e504:	0802495c 	.word	0x0802495c
 800e508:	08024960 	.word	0x08024960
 800e50c:	08024964 	.word	0x08024964
 800e510:	08024968 	.word	0x08024968
 800e514:	0802496c 	.word	0x0802496c

0800e518 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3304      	adds	r3, #4
 800e524:	4907      	ldr	r1, [pc, #28]	; (800e544 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800e526:	4618      	mov	r0, r3
 800e528:	f7fe fd29 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	60da      	str	r2, [r3, #12]
}
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4618      	mov	r0, r3
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	08024874 	.word	0x08024874

0800e548 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800e548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e54a:	b083      	sub	sp, #12
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d01e      	beq.n	800e598 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3b04      	subs	r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	00db      	lsls	r3, r3, #3
 800e568:	18d4      	adds	r4, r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	429c      	cmp	r4, r3
 800e570:	d004      	beq.n	800e57c <_ZN22SimpleStringCollection8allocateEj+0x34>
 800e572:	3c08      	subs	r4, #8
 800e574:	4620      	mov	r0, r4
 800e576:	f7ff f8ba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800e57a:	e7f6      	b.n	800e56a <_ZN22SimpleStringCollection8allocateEj+0x22>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f1a3 0208 	sub.w	r2, r3, #8
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	3b04      	subs	r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3301      	adds	r3, #1
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f7fc f976 	bl	800a884 <_ZdaPvj>

    size_ = _size;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68dc      	ldr	r4, [r3, #12]
 800e5a2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e5a6:	d202      	bcs.n	800e5ae <_ZN22SimpleStringCollection8allocateEj+0x66>
 800e5a8:	1c63      	adds	r3, r4, #1
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	e001      	b.n	800e5b2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800e5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b2:	f240 4227 	movw	r2, #1063	; 0x427
 800e5b6:	4910      	ldr	r1, [pc, #64]	; (800e5f8 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fc f941 	bl	800a840 <_ZnajPKci>
 800e5be:	4605      	mov	r5, r0
 800e5c0:	1d2b      	adds	r3, r5, #4
 800e5c2:	3b04      	subs	r3, #4
 800e5c4:	2208      	movs	r2, #8
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	1d2b      	adds	r3, r5, #4
 800e5ca:	601c      	str	r4, [r3, #0]
 800e5cc:	f105 0308 	add.w	r3, r5, #8
 800e5d0:	1e62      	subs	r2, r4, #1
 800e5d2:	4614      	mov	r4, r2
 800e5d4:	461e      	mov	r6, r3
 800e5d6:	2c00      	cmp	r4, #0
 800e5d8:	db06      	blt.n	800e5e8 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800e5da:	4908      	ldr	r1, [pc, #32]	; (800e5fc <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7fe fcce 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e5e2:	3608      	adds	r6, #8
 800e5e4:	3c01      	subs	r4, #1
 800e5e6:	e7f6      	b.n	800e5d6 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800e5e8:	f105 0208 	add.w	r2, r5, #8
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	601a      	str	r2, [r3, #0]
}
 800e5f0:	bf00      	nop
 800e5f2:	370c      	adds	r7, #12
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f8:	080247b4 	.word	0x080247b4
 800e5fc:	08024874 	.word	0x08024874

0800e600 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800e600:	b590      	push	{r4, r7, lr}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01e      	beq.n	800e64e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3b04      	subs	r3, #4
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	00db      	lsls	r3, r3, #3
 800e61e:	18d4      	adds	r4, r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	429c      	cmp	r4, r3
 800e626:	d004      	beq.n	800e632 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800e628:	3c08      	subs	r4, #8
 800e62a:	4620      	mov	r0, r4
 800e62c:	f7ff f85f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800e630:	e7f6      	b.n	800e620 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f1a3 0208 	sub.w	r2, r3, #8
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3b04      	subs	r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	4619      	mov	r1, r3
 800e648:	4610      	mov	r0, r2
 800e64a:	f7fc f91b 	bl	800a884 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3304      	adds	r3, #4
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff f84b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4618      	mov	r0, r3
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd90      	pop	{r4, r7, pc}

0800e662 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800e662:	b480      	push	{r7}
 800e664:	b083      	sub	sp, #12
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
    return size_;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	68db      	ldr	r3, [r3, #12]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
	...

0800e67c <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b085      	sub	sp, #20
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d315      	bcc.n	800e6bc <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	1d1c      	adds	r4, r3, #4
 800e694:	f107 0308 	add.w	r3, r7, #8
 800e698:	490d      	ldr	r1, [pc, #52]	; (800e6d0 <_ZN22SimpleStringCollectionixEj+0x54>)
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fc6f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e6a0:	f107 0308 	add.w	r3, r7, #8
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f7fe fcd5 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e6ac:	f107 0308 	add.w	r3, r7, #8
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff f81c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        return empty_;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	e004      	b.n	800e6c6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	4413      	add	r3, r2
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	08024874 	.word	0x08024874

0800e6d4 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fa fb88 	bl	8008df4 <_ZN17ConsoleTestOutputC1Ev>
 800e6e4:	4a08      	ldr	r2, [pc, #32]	; (800e708 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	611a      	str	r2, [r3, #16]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3314      	adds	r3, #20
 800e6f4:	4905      	ldr	r1, [pc, #20]	; (800e70c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe fc41 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
{
}
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	080286f4 	.word	0x080286f4
 800e70c:	08024974 	.word	0x08024974

0800e710 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	4a08      	ldr	r2, [pc, #32]	; (800e73c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3314      	adds	r3, #20
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe ffe3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fa fb74 	bl	8008e18 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4618      	mov	r0, r3
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	080286f4 	.word	0x080286f4

0800e740 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
}
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ffe1 	bl	800e710 <_ZN18TeamCityTestOutputD1Ev>
 800e74e:	211c      	movs	r1, #28
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7fc f865 	bl	800a820 <_ZdlPvj>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	332c      	adds	r3, #44	; 0x2c
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	492b      	ldr	r1, [pc, #172]	; (800e824 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800e776:	4610      	mov	r0, r2
 800e778:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	6839      	ldr	r1, [r7, #0]
 800e780:	4618      	mov	r0, r3
 800e782:	f004 fdf7 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800e786:	f107 0308 	add.w	r3, r7, #8
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fe ff82 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800e790:	4603      	mov	r3, r0
 800e792:	4619      	mov	r1, r3
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 f919 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe ffa5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	332c      	adds	r3, #44	; 0x2c
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	491e      	ldr	r1, [pc, #120]	; (800e828 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	4798      	blx	r3
    if (!test.willRun()) {
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3318      	adds	r3, #24
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6838      	ldr	r0, [r7, #0]
 800e7be:	4798      	blx	r3
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	f083 0301 	eor.w	r3, r3, #1
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d024      	beq.n	800e816 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	332c      	adds	r3, #44	; 0x2c
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4915      	ldr	r1, [pc, #84]	; (800e82c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800e7d8:	4610      	mov	r0, r2
 800e7da:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800e7dc:	f107 0310 	add.w	r3, r7, #16
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f004 fdc6 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800e7e8:	f107 0310 	add.w	r3, r7, #16
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe ff51 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f8e8 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e7fc:	f107 0310 	add.w	r3, r7, #16
 800e800:	4618      	mov	r0, r3
 800e802:	f7fe ff74 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        print("']\n");
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	332c      	adds	r3, #44	; 0x2c
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4905      	ldr	r1, [pc, #20]	; (800e828 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800e812:	4610      	mov	r0, r2
 800e814:	4798      	blx	r3
    }
    currtest_ = &test;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	611a      	str	r2, [r3, #16]
}
 800e81c:	bf00      	nop
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	08024978 	.word	0x08024978
 800e828:	08024998 	.word	0x08024998
 800e82c:	0802499c 	.word	0x0802499c

0800e830 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e830:	b5b0      	push	{r4, r5, r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	691b      	ldr	r3, [r3, #16]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d03b      	beq.n	800e8ba <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	332c      	adds	r3, #44	; 0x2c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	491d      	ldr	r1, [pc, #116]	; (800e8c4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800e84e:	4610      	mov	r0, r2
 800e850:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	4611      	mov	r1, r2
 800e85c:	4618      	mov	r0, r3
 800e85e:	f004 fd89 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800e862:	f107 0308 	add.w	r3, r7, #8
 800e866:	4618      	mov	r0, r3
 800e868:	f7fe ff14 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800e86c:	4603      	mov	r3, r0
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f8ab 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800e876:	f107 0308 	add.w	r3, r7, #8
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe ff37 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	332c      	adds	r3, #44	; 0x2c
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	490f      	ldr	r1, [pc, #60]	; (800e8c8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800e88c:	4610      	mov	r0, r2
 800e88e:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800e890:	687d      	ldr	r5, [r7, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3334      	adds	r3, #52	; 0x34
 800e898:	681c      	ldr	r4, [r3, #0]
 800e89a:	6838      	ldr	r0, [r7, #0]
 800e89c:	f004 fa0a 	bl	8012cb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	47a0      	blx	r4
    print("']\n");
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	332c      	adds	r3, #44	; 0x2c
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4906      	ldr	r1, [pc, #24]	; (800e8cc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	4798      	blx	r3
 800e8b8:	e000      	b.n	800e8bc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800e8ba:	bf00      	nop
}
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	080249bc 	.word	0x080249bc
 800e8c8:	080249dc 	.word	0x080249dc
 800e8cc:	08024998 	.word	0x08024998

0800e8d0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f103 0414 	add.w	r4, r3, #20
 800e8e0:	f107 0308 	add.w	r3, r7, #8
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f004 fd53 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 800e8ec:	f107 0308 	add.w	r3, r7, #8
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f7fe fbaf 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800e8f8:	f107 0308 	add.w	r3, r7, #8
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fe fef6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	332c      	adds	r3, #44	; 0x2c
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	490c      	ldr	r1, [pc, #48]	; (800e940 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800e90e:	4610      	mov	r0, r2
 800e910:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	3314      	adds	r3, #20
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe febc 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800e91c:	4603      	mov	r3, r0
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f853 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	332c      	adds	r3, #44	; 0x2c
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4904      	ldr	r1, [pc, #16]	; (800e944 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800e932:	4610      	mov	r0, r2
 800e934:	4798      	blx	r3
}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd90      	pop	{r4, r7, pc}
 800e93e:	bf00      	nop
 800e940:	080249ec 	.word	0x080249ec
 800e944:	08024998 	.word	0x08024998

0800e948 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800e948:	b590      	push	{r4, r7, lr}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f103 0414 	add.w	r4, r3, #20
 800e958:	f107 0308 	add.w	r3, r7, #8
 800e95c:	4918      	ldr	r1, [pc, #96]	; (800e9c0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe fb0d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800e964:	f107 0308 	add.w	r3, r7, #8
 800e968:	4619      	mov	r1, r3
 800e96a:	4620      	mov	r0, r4
 800e96c:	f7fe fecb 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 800e970:	4603      	mov	r3, r0
 800e972:	461c      	mov	r4, r3
 800e974:	f107 0308 	add.w	r3, r7, #8
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fe feb8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800e97e:	2c00      	cmp	r4, #0
 800e980:	d11a      	bne.n	800e9b8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800e982:	687a      	ldr	r2, [r7, #4]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	332c      	adds	r3, #44	; 0x2c
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	490d      	ldr	r1, [pc, #52]	; (800e9c4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800e98e:	4610      	mov	r0, r2
 800e990:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3314      	adds	r3, #20
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fe7c 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800e99c:	4603      	mov	r3, r0
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 f813 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	332c      	adds	r3, #44	; 0x2c
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4905      	ldr	r1, [pc, #20]	; (800e9c8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	4798      	blx	r3
 800e9b6:	e000      	b.n	800e9ba <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800e9b8:	bf00      	nop
}
 800e9ba:	3714      	adds	r7, #20
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd90      	pop	{r4, r7, pc}
 800e9c0:	08024974 	.word	0x08024974
 800e9c4:	08024a10 	.word	0x08024a10
 800e9c8:	08024998 	.word	0x08024998

0800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d03f      	beq.n	800ea5e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b27      	cmp	r3, #39	; 0x27
 800e9e4:	d00b      	beq.n	800e9fe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2b7c      	cmp	r3, #124	; 0x7c
 800e9ec:	d007      	beq.n	800e9fe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b5b      	cmp	r3, #91	; 0x5b
 800e9f4:	d003      	beq.n	800e9fe <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	2b5d      	cmp	r3, #93	; 0x5d
 800e9fc:	d107      	bne.n	800ea0e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800e9fe:	237c      	movs	r3, #124	; 0x7c
 800ea00:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73bb      	strb	r3, [r7, #14]
 800ea0c:	e01a      	b.n	800ea44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	2b0d      	cmp	r3, #13
 800ea14:	d106      	bne.n	800ea24 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800ea16:	237c      	movs	r3, #124	; 0x7c
 800ea18:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800ea1a:	2372      	movs	r3, #114	; 0x72
 800ea1c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	73bb      	strb	r3, [r7, #14]
 800ea22:	e00f      	b.n	800ea44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	2b0a      	cmp	r3, #10
 800ea2a:	d106      	bne.n	800ea3a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800ea2c:	237c      	movs	r3, #124	; 0x7c
 800ea2e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800ea30:	236e      	movs	r3, #110	; 0x6e
 800ea32:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	73bb      	strb	r3, [r7, #14]
 800ea38:	e004      	b.n	800ea44 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3328      	adds	r3, #40	; 0x28
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f107 010c 	add.w	r1, r7, #12
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
        s++;
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	603b      	str	r3, [r7, #0]
    while (*s) {
 800ea5c:	e7bb      	b.n	800e9d6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800ea68:	b5b0      	push	{r4, r5, r7, lr}
 800ea6a:	b08a      	sub	sp, #40	; 0x28
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	332c      	adds	r3, #44	; 0x2c
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4968      	ldr	r1, [pc, #416]	; (800ec20 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800ea7e:	4610      	mov	r0, r2
 800ea80:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3310      	adds	r3, #16
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f107 0208 	add.w	r2, r7, #8
 800ea8e:	6839      	ldr	r1, [r7, #0]
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
 800ea94:	f107 0308 	add.w	r3, r7, #8
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe fdfb 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff ff92 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eaa8:	f107 0308 	add.w	r3, r7, #8
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7fe fe1e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print("' message='");
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	332c      	adds	r3, #44	; 0x2c
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4959      	ldr	r1, [pc, #356]	; (800ec24 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800eabe:	4610      	mov	r0, r2
 800eac0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800eac2:	6838      	ldr	r0, [r7, #0]
 800eac4:	f000 fa15 	bl	800eef2 <_ZNK11TestFailure17isOutsideTestFileEv>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d105      	bne.n	800eada <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800eace:	6838      	ldr	r0, [r7, #0]
 800ead0:	f000 fa21 	bl	800ef16 <_ZNK11TestFailure18isInHelperFunctionEv>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800eada:	2301      	movs	r3, #1
 800eadc:	e000      	b.n	800eae0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800eade:	2300      	movs	r3, #0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d042      	beq.n	800eb6a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	332c      	adds	r3, #44	; 0x2c
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	494e      	ldr	r1, [pc, #312]	; (800ec28 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800eaf4:	687d      	ldr	r5, [r7, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	332c      	adds	r3, #44	; 0x2c
 800eafc:	681c      	ldr	r4, [r3, #0]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	331c      	adds	r3, #28
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f107 0210 	add.w	r2, r7, #16
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	4798      	blx	r3
 800eb10:	f107 0310 	add.w	r3, r7, #16
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fdbd 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4628      	mov	r0, r5
 800eb20:	47a0      	blx	r4
 800eb22:	f107 0310 	add.w	r3, r7, #16
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe fde1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        print(":");
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	332c      	adds	r3, #44	; 0x2c
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	493d      	ldr	r1, [pc, #244]	; (800ec2c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800eb38:	4610      	mov	r0, r2
 800eb3a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800eb3c:	687d      	ldr	r5, [r7, #4]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	3334      	adds	r3, #52	; 0x34
 800eb44:	681c      	ldr	r4, [r3, #0]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	3320      	adds	r3, #32
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	6838      	ldr	r0, [r7, #0]
 800eb50:	4798      	blx	r3
 800eb52:	4603      	mov	r3, r0
 800eb54:	4619      	mov	r1, r3
 800eb56:	4628      	mov	r0, r5
 800eb58:	47a0      	blx	r4
        print("): ");
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	332c      	adds	r3, #44	; 0x2c
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4932      	ldr	r1, [pc, #200]	; (800ec30 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800eb66:	4610      	mov	r0, r2
 800eb68:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3308      	adds	r3, #8
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f107 0218 	add.w	r2, r7, #24
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	4610      	mov	r0, r2
 800eb7a:	4798      	blx	r3
 800eb7c:	f107 0318 	add.w	r3, r7, #24
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe fd87 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800eb86:	4603      	mov	r3, r0
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7ff ff1e 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eb90:	f107 0318 	add.w	r3, r7, #24
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe fdaa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print(":");
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	332c      	adds	r3, #44	; 0x2c
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4921      	ldr	r1, [pc, #132]	; (800ec2c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800eba6:	4610      	mov	r0, r2
 800eba8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800ebaa:	687d      	ldr	r5, [r7, #4]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	3334      	adds	r3, #52	; 0x34
 800ebb2:	681c      	ldr	r4, [r3, #0]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	3314      	adds	r3, #20
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	6838      	ldr	r0, [r7, #0]
 800ebbe:	4798      	blx	r3
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	47a0      	blx	r4

    print("' details='");
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	332c      	adds	r3, #44	; 0x2c
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4918      	ldr	r1, [pc, #96]	; (800ec34 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	3318      	adds	r3, #24
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f107 0220 	add.w	r2, r7, #32
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	4610      	mov	r0, r2
 800ebe8:	4798      	blx	r3
 800ebea:	f107 0320 	add.w	r3, r7, #32
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fe fd50 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7ff fee7 	bl	800e9cc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ebfe:	f107 0320 	add.w	r3, r7, #32
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fe fd73 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    print("']\n");
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	332c      	adds	r3, #44	; 0x2c
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4909      	ldr	r1, [pc, #36]	; (800ec38 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800ec14:	4610      	mov	r0, r2
 800ec16:	4798      	blx	r3
}
 800ec18:	bf00      	nop
 800ec1a:	3728      	adds	r7, #40	; 0x28
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec20:	08024a34 	.word	0x08024a34
 800ec24:	08024a54 	.word	0x08024a54
 800ec28:	08024a60 	.word	0x08024a60
 800ec2c:	08024a70 	.word	0x08024a70
 800ec30:	08024a74 	.word	0x08024a74
 800ec34:	08024a78 	.word	0x08024a78
 800ec38:	08024998 	.word	0x08024998

0800ec3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800ec48:	4a1a      	ldr	r2, [pc, #104]	; (800ecb4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3314      	adds	r3, #20
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	3204      	adds	r2, #4
 800ec5a:	68b9      	ldr	r1, [r7, #8]
 800ec5c:	4610      	mov	r0, r2
 800ec5e:	4798      	blx	r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	330c      	adds	r3, #12
 800ec64:	68b9      	ldr	r1, [r7, #8]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f004 fb84 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	3314      	adds	r3, #20
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f004 fc4f 	bl	8013516 <_ZNK10UtestShell7getFileEv>
 800ec78:	68b8      	ldr	r0, [r7, #8]
 800ec7a:	f004 fc5b 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	61da      	str	r2, [r3, #28]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3320      	adds	r3, #32
 800ec88:	68b9      	ldr	r1, [r7, #8]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f004 fc43 	bl	8013516 <_ZNK10UtestShell7getFileEv>
 800ec90:	68b8      	ldr	r0, [r7, #8]
 800ec92:	f004 fc4f 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 800ec96:	4602      	mov	r2, r0
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	332c      	adds	r3, #44	; 0x2c
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe f9bf 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
{
}
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	080289c0 	.word	0x080289c0

0800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
 800ecc4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800ecc6:	4a19      	ldr	r2, [pc, #100]	; (800ed2c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	601a      	str	r2, [r3, #0]
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	3314      	adds	r3, #20
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	3204      	adds	r2, #4
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	4610      	mov	r0, r2
 800ecdc:	4798      	blx	r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	330c      	adds	r3, #12
 800ece2:	68b9      	ldr	r1, [r7, #8]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f004 fb45 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3314      	adds	r3, #20
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fe f944 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	61da      	str	r2, [r3, #28]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	3320      	adds	r3, #32
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f004 fc07 	bl	8013516 <_ZNK10UtestShell7getFileEv>
 800ed08:	68b8      	ldr	r0, [r7, #8]
 800ed0a:	f004 fc13 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	629a      	str	r2, [r3, #40]	; 0x28
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	332c      	adds	r3, #44	; 0x2c
 800ed18:	4905      	ldr	r1, [pc, #20]	; (800ed30 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fe f92f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
{
}
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	4618      	mov	r0, r3
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	080289c0 	.word	0x080289c0
 800ed30:	08024a84 	.word	0x08024a84

0800ed34 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800ed3e:	4a1e      	ldr	r2, [pc, #120]	; (800edb8 <_ZN11TestFailureC1ERKS_+0x84>)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	1d1a      	adds	r2, r3, #4
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7fe f969 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f103 020c 	add.w	r2, r3, #12
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	330c      	adds	r3, #12
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4610      	mov	r0, r2
 800ed62:	f7fe f960 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f103 0214 	add.w	r2, r3, #20
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	3314      	adds	r3, #20
 800ed70:	4619      	mov	r1, r3
 800ed72:	4610      	mov	r0, r2
 800ed74:	f7fe f957 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	69da      	ldr	r2, [r3, #28]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	61da      	str	r2, [r3, #28]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f103 0220 	add.w	r2, r3, #32
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	3320      	adds	r3, #32
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f7fe f94a 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	629a      	str	r2, [r3, #40]	; 0x28
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	332c      	adds	r3, #44	; 0x2c
 800eda4:	4619      	mov	r1, r3
 800eda6:	4610      	mov	r0, r2
 800eda8:	f7fe f93d 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
{
}
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4618      	mov	r0, r3
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	080289c0 	.word	0x080289c0

0800edbc <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	4a10      	ldr	r2, [pc, #64]	; (800ee08 <_ZN11TestFailureD1Ev+0x4c>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	601a      	str	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	332c      	adds	r3, #44	; 0x2c
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe fc8d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3320      	adds	r3, #32
 800edd8:	4618      	mov	r0, r3
 800edda:	f7fe fc88 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3314      	adds	r3, #20
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fe fc83 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	330c      	adds	r3, #12
 800edec:	4618      	mov	r0, r3
 800edee:	f7fe fc7e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	3304      	adds	r3, #4
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fe fc79 	bl	800d6ee <_ZN12SimpleStringD1Ev>
{
}
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	080289c0 	.word	0x080289c0

0800ee0c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
}
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7ff ffd1 	bl	800edbc <_ZN11TestFailureD1Ev>
 800ee1a:	2134      	movs	r1, #52	; 0x34
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7fb fcff 	bl	800a820 <_ZdlPvj>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4618      	mov	r0, r3
 800ee26:	3708      	adds	r7, #8
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
    return fileName_;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	3314      	adds	r3, #20
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7fe f8f2 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b082      	sub	sp, #8
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	3320      	adds	r3, #32
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7fe f8e3 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
    return testName_;
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	3304      	adds	r3, #4
 800ee76:	4619      	mov	r1, r3
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7fe f8d4 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	3708      	adds	r7, #8
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	330c      	adds	r3, #12
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fe f8c5 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	69db      	ldr	r3, [r3, #28]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
    return message_;
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	332c      	adds	r3, #44	; 0x2c
 800eee2:	4619      	mov	r1, r3
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7fe f89e 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b082      	sub	sp, #8
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f103 0220 	add.w	r2, r3, #32
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3314      	adds	r3, #20
 800ef04:	4619      	mov	r1, r3
 800ef06:	4610      	mov	r0, r2
 800ef08:	f7fe fc42 	bl	800d790 <_ZneRK12SimpleStringS1_>
 800ef0c:	4603      	mov	r3, r0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800ef16:	b480      	push	{r7}
 800ef18:	b083      	sub	sp, #12
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	69da      	ldr	r2, [r3, #28]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef26:	429a      	cmp	r2, r3
 800ef28:	bf34      	ite	cc
 800ef2a:	2301      	movcc	r3, #1
 800ef2c:	2300      	movcs	r3, #0
 800ef2e:	b2db      	uxtb	r3, r3
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800ef3c:	b590      	push	{r4, r7, lr}
 800ef3e:	b085      	sub	sp, #20
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
 800ef48:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7fe fba2 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800ef50:	4604      	mov	r4, r0
 800ef52:	6838      	ldr	r0, [r7, #0]
 800ef54:	f7fe fb9e 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	4903      	ldr	r1, [pc, #12]	; (800ef6c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800ef60:	f7ff f8cc 	bl	800e0fc <_Z16StringFromFormatPKcz>
}
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	3714      	adds	r7, #20
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	08024a90 	.word	0x08024a90

0800ef70 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800ef70:	b590      	push	{r4, r7, lr}
 800ef72:	b097      	sub	sp, #92	; 0x5c
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ef7e:	494c      	ldr	r1, [pc, #304]	; (800f0b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7fd fffc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ef86:	2314      	movs	r3, #20
 800ef88:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ef8a:	230a      	movs	r3, #10
 800ef8c:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ef8e:	f107 0320 	add.w	r3, r7, #32
 800ef92:	220a      	movs	r2, #10
 800ef94:	4947      	ldr	r1, [pc, #284]	; (800f0b4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fe f80c 	bl	800cfb4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ef9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efa0:	f107 0120 	add.w	r1, r7, #32
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe fc03 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800efac:	f107 0318 	add.w	r3, r7, #24
 800efb0:	f107 0220 	add.w	r2, r7, #32
 800efb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fe fbfa 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800efbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fb93 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800efc8:	f107 0310 	add.w	r3, r7, #16
 800efcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800efce:	493a      	ldr	r1, [pc, #232]	; (800f0b8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff f893 	bl	800e0fc <_Z16StringFromFormatPKcz>

    result += "\n";
 800efd6:	4939      	ldr	r1, [pc, #228]	; (800f0bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	f7fe fc17 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800efde:	f107 0310 	add.w	r3, r7, #16
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe fb56 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800efe8:	4604      	mov	r4, r0
 800efea:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800efee:	f107 0118 	add.w	r1, r7, #24
 800eff2:	2314      	movs	r3, #20
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	f7fe fc83 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 800effa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800effe:	4618      	mov	r0, r3
 800f000:	f7fe fb48 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f004:	4603      	mov	r3, r0
 800f006:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f00a:	4622      	mov	r2, r4
 800f00c:	492c      	ldr	r1, [pc, #176]	; (800f0c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800f00e:	f7ff f875 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800f012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f016:	4619      	mov	r1, r3
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f7fe fbe5 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f01e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe fb63 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f028:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe fb5e 	bl	800d6ee <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800f032:	f107 0310 	add.w	r3, r7, #16
 800f036:	4618      	mov	r0, r3
 800f038:	f7fe fb38 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 800f03c:	4603      	mov	r3, r0
 800f03e:	f103 020a 	add.w	r2, r3, #10
 800f042:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f046:	491b      	ldr	r1, [pc, #108]	; (800f0b4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fd ffb3 	bl	800cfb4 <_ZN12SimpleStringC1EPKcj>
 800f04e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fb1e 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f058:	4602      	mov	r2, r0
 800f05a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f05e:	4919      	ldr	r1, [pc, #100]	; (800f0c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff f84b 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800f066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f06a:	4619      	mov	r1, r3
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f7fe fbbb 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f076:	4618      	mov	r0, r3
 800f078:	f7fe fb39 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f07c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f080:	4618      	mov	r0, r3
 800f082:	f7fe fb34 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return result;
 800f086:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800f088:	f107 0310 	add.w	r3, r7, #16
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fe fb2e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800f092:	f107 0318 	add.w	r3, r7, #24
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe fb29 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800f09c:	f107 0320 	add.w	r3, r7, #32
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe fb24 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return result;
 800f0a6:	bf00      	nop
}
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	375c      	adds	r7, #92	; 0x5c
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd90      	pop	{r4, r7, pc}
 800f0b0:	08024ab0 	.word	0x08024ab0
 800f0b4:	08024ab4 	.word	0x08024ab4
 800f0b8:	08024ab8 	.word	0x08024ab8
 800f0bc:	08024ae0 	.word	0x08024ae0
 800f0c0:	08024ae4 	.word	0x08024ae4
 800f0c4:	08024aec 	.word	0x08024aec

0800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800f0c8:	b590      	push	{r4, r7, lr}
 800f0ca:	b087      	sub	sp, #28
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800f0d4:	491a      	ldr	r1, [pc, #104]	; (800f140 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f7fd ff51 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7fe faf5 	bl	800d6cc <_ZNK12SimpleString7isEmptyEv>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	f083 0301 	eor.w	r3, r3, #1
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d022      	beq.n	800f134 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800f0ee:	f107 0310 	add.w	r3, r7, #16
 800f0f2:	4914      	ldr	r1, [pc, #80]	; (800f144 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd ff42 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800f0fa:	f107 0310 	add.w	r3, r7, #16
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7fe f800 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 800f106:	4603      	mov	r3, r0
 800f108:	f083 0301 	eor.w	r3, r3, #1
 800f10c:	b2dc      	uxtb	r4, r3
 800f10e:	f107 0310 	add.w	r3, r7, #16
 800f112:	4618      	mov	r0, r3
 800f114:	f7fe faeb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d003      	beq.n	800f124 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800f11c:	490a      	ldr	r1, [pc, #40]	; (800f148 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7fe fb74 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f7fe fb5e 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800f12c:	4907      	ldr	r1, [pc, #28]	; (800f14c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f7fe fb6c 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800f134:	bf00      	nop
}
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	371c      	adds	r7, #28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd90      	pop	{r4, r7, pc}
 800f13e:	bf00      	nop
 800f140:	08024ab0 	.word	0x08024ab0
 800f144:	08024af4 	.word	0x08024af4
 800f148:	08024b00 	.word	0x08024b00
 800f14c:	08024b0c 	.word	0x08024b0c

0800f150 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f150:	b590      	push	{r4, r7, lr}
 800f152:	b089      	sub	sp, #36	; 0x24
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
 800f15c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	68b9      	ldr	r1, [r7, #8]
 800f166:	f7ff fda7 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f16a:	4a19      	ldr	r2, [pc, #100]	; (800f1d0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f176:	68f9      	ldr	r1, [r7, #12]
 800f178:	f107 0310 	add.w	r3, r7, #16
 800f17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff ffa2 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f184:	f107 0310 	add.w	r3, r7, #16
 800f188:	4619      	mov	r1, r3
 800f18a:	4620      	mov	r0, r4
 800f18c:	f7fd ff63 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f190:	f107 0310 	add.w	r3, r7, #16
 800f194:	4618      	mov	r0, r3
 800f196:	f7fe faaa 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f1a0:	68f9      	ldr	r1, [r7, #12]
 800f1a2:	f107 0018 	add.w	r0, r7, #24
 800f1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1aa:	f7ff fec7 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f1ae:	f107 0318 	add.w	r3, r7, #24
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f7fe fb17 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f1ba:	f107 0318 	add.w	r3, r7, #24
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fe fa95 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3724      	adds	r7, #36	; 0x24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd90      	pop	{r4, r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	08028994 	.word	0x08028994

0800f1d4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800f1d4:	b5b0      	push	{r4, r5, r7, lr}
 800f1d6:	b094      	sub	sp, #80	; 0x50
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6278      	str	r0, [r7, #36]	; 0x24
 800f1dc:	6239      	str	r1, [r7, #32]
 800f1de:	61fa      	str	r2, [r7, #28]
 800f1e0:	61bb      	str	r3, [r7, #24]
 800f1e2:	ed87 0b04 	vstr	d0, [r7, #16]
 800f1e6:	ed87 1b02 	vstr	d1, [r7, #8]
 800f1ea:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800f1ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	6a39      	ldr	r1, [r7, #32]
 800f1f6:	f7ff fd5f 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f1fa:	4a4a      	ldr	r2, [pc, #296]	; (800f324 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f20c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f20e:	4618      	mov	r0, r3
 800f210:	f7ff ff5a 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f218:	4619      	mov	r1, r3
 800f21a:	4620      	mov	r0, r4
 800f21c:	f7fd ff1b 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe fa62 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f230:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f236:	2107      	movs	r1, #7
 800f238:	ed97 0b04 	vldr	d0, [r7, #16]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fe ff1b 	bl	800e078 <_Z10StringFromdi>
 800f242:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f246:	2107      	movs	r1, #7
 800f248:	ed97 0b02 	vldr	d0, [r7, #8]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe ff13 	bl	800e078 <_Z10StringFromdi>
 800f252:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f256:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f25a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f25e:	4629      	mov	r1, r5
 800f260:	f7ff fe6c 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f268:	4619      	mov	r1, r3
 800f26a:	4620      	mov	r0, r4
 800f26c:	f7fe fabc 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe fa3a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f27a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fe fa35 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f284:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe fa30 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	332c      	adds	r3, #44	; 0x2c
 800f292:	4925      	ldr	r1, [pc, #148]	; (800f328 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800f294:	4618      	mov	r0, r3
 800f296:	f7fe fab9 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f2a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f2a4:	2107      	movs	r1, #7
 800f2a6:	ed97 0b00 	vldr	d0, [r7]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fee4 	bl	800e078 <_Z10StringFromdi>
 800f2b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f7fe fa96 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f2bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe fa14 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	332c      	adds	r3, #44	; 0x2c
 800f2ca:	4918      	ldr	r1, [pc, #96]	; (800f32c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fe fa9d 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800f2d2:	4b17      	ldr	r3, [pc, #92]	; (800f330 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	ed97 0b04 	vldr	d0, [r7, #16]
 800f2da:	4798      	blx	r3
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10f      	bne.n	800f302 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f2e2:	4b13      	ldr	r3, [pc, #76]	; (800f330 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	ed97 0b02 	vldr	d0, [r7, #8]
 800f2ea:	4798      	blx	r3
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d107      	bne.n	800f302 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	ed97 0b00 	vldr	d0, [r7]
 800f2fa:	4798      	blx	r3
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d001      	beq.n	800f306 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800f302:	2301      	movs	r3, #1
 800f304:	e000      	b.n	800f308 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800f306:	2300      	movs	r3, #0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d005      	beq.n	800f318 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800f30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30e:	332c      	adds	r3, #44	; 0x2c
 800f310:	4908      	ldr	r1, [pc, #32]	; (800f334 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800f312:	4618      	mov	r0, r3
 800f314:	f7fe fa7a 	bl	800d80c <_ZN12SimpleStringpLEPKc>
}
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	4618      	mov	r0, r3
 800f31c:	3750      	adds	r7, #80	; 0x50
 800f31e:	46bd      	mov	sp, r7
 800f320:	bdb0      	pop	{r4, r5, r7, pc}
 800f322:	bf00      	nop
 800f324:	08028968 	.word	0x08028968
 800f328:	08024b10 	.word	0x08024b10
 800f32c:	08024b28 	.word	0x08024b28
 800f330:	200000e8 	.word	0x200000e8
 800f334:	08024b2c 	.word	0x08024b2c

0800f338 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f338:	b590      	push	{r4, r7, lr}
 800f33a:	b093      	sub	sp, #76	; 0x4c
 800f33c:	af02      	add	r7, sp, #8
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	f7ff fcb3 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f352:	4a4f      	ldr	r2, [pc, #316]	; (800f490 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f35e:	68f9      	ldr	r1, [r7, #12]
 800f360:	f107 0320 	add.w	r3, r7, #32
 800f364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f366:	4618      	mov	r0, r3
 800f368:	f7ff feae 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f36c:	f107 0320 	add.w	r3, r7, #32
 800f370:	4619      	mov	r1, r3
 800f372:	4620      	mov	r0, r4
 800f374:	f7fd fe6f 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f378:	f107 0320 	add.w	r3, r7, #32
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fe f9b6 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f382:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f384:	f7fe f986 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f388:	4602      	mov	r2, r0
 800f38a:	f107 0318 	add.w	r3, r7, #24
 800f38e:	4611      	mov	r1, r2
 800f390:	4618      	mov	r0, r3
 800f392:	f7fe fc47 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f396:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f398:	f7fe f97c 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f39c:	4602      	mov	r2, r0
 800f39e:	f107 0310 	add.w	r3, r7, #16
 800f3a2:	4611      	mov	r1, r2
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe fc3d 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f3b0:	68f9      	ldr	r1, [r7, #12]
 800f3b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f3b6:	f107 0310 	add.w	r3, r7, #16
 800f3ba:	f107 0218 	add.w	r2, r7, #24
 800f3be:	f7ff fdbd 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f3c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7fe fa0d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f3ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fe f98b 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800f3d8:	2300      	movs	r3, #0
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f3e0:	f7fe fae9 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	461c      	mov	r4, r3
 800f3e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f3ec:	f7fe fae3 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	429c      	cmp	r4, r3
 800f3f4:	bf0c      	ite	eq
 800f3f6:	2301      	moveq	r3, #1
 800f3f8:	2300      	movne	r3, #0
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800f400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f402:	3301      	adds	r3, #1
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f406:	e7e9      	b.n	800f3dc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800f408:	2300      	movs	r3, #0
 800f40a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f40c:	f107 0310 	add.w	r3, r7, #16
 800f410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f412:	4618      	mov	r0, r3
 800f414:	f7fe facf 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800f418:	4603      	mov	r3, r0
 800f41a:	461c      	mov	r4, r3
 800f41c:	f107 0318 	add.w	r3, r7, #24
 800f420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f422:	4618      	mov	r0, r3
 800f424:	f7fe fac7 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800f428:	4603      	mov	r3, r0
 800f42a:	429c      	cmp	r4, r3
 800f42c:	bf0c      	ite	eq
 800f42e:	2301      	moveq	r3, #1
 800f430:	2300      	movne	r3, #0
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	3301      	adds	r3, #1
 800f43c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f43e:	e7e5      	b.n	800f40c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f446:	68f9      	ldr	r1, [r7, #12]
 800f448:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f44c:	f107 0210 	add.w	r2, r7, #16
 800f450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	f7ff fd8b 	bl	800ef70 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800f45a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f45e:	4619      	mov	r1, r3
 800f460:	4620      	mov	r0, r4
 800f462:	f7fe f9c1 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fe f93f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800f470:	f107 0310 	add.w	r3, r7, #16
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe f93a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800f47a:	f107 0318 	add.w	r3, r7, #24
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe f935 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4618      	mov	r0, r3
 800f488:	3744      	adds	r7, #68	; 0x44
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd90      	pop	{r4, r7, pc}
 800f48e:	bf00      	nop
 800f490:	0802893c 	.word	0x0802893c

0800f494 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b087      	sub	sp, #28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	687a      	ldr	r2, [r7, #4]
 800f4a8:	68b9      	ldr	r1, [r7, #8]
 800f4aa:	f7ff fc05 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f4ae:	4a1a      	ldr	r2, [pc, #104]	; (800f518 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f4ba:	68f9      	ldr	r1, [r7, #12]
 800f4bc:	f107 0310 	add.w	r3, r7, #16
 800f4c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff fe00 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f4c8:	f107 0310 	add.w	r3, r7, #16
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f7fd fdc1 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f4d4:	f107 0310 	add.w	r3, r7, #16
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fe f908 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	332c      	adds	r3, #44	; 0x2c
 800f4e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe f97f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	332c      	adds	r3, #44	; 0x2c
 800f4ee:	490b      	ldr	r1, [pc, #44]	; (800f51c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fe f98b 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	332c      	adds	r3, #44	; 0x2c
 800f4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fe f973 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	332c      	adds	r3, #44	; 0x2c
 800f506:	4906      	ldr	r1, [pc, #24]	; (800f520 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fe f97f 	bl	800d80c <_ZN12SimpleStringpLEPKc>
}
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	4618      	mov	r0, r3
 800f512:	371c      	adds	r7, #28
 800f514:	46bd      	mov	sp, r7
 800f516:	bd90      	pop	{r4, r7, pc}
 800f518:	08028910 	.word	0x08028910
 800f51c:	08024b50 	.word	0x08024b50
 800f520:	08024b54 	.word	0x08024b54

0800f524 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f524:	b5b0      	push	{r4, r5, r7, lr}
 800f526:	b088      	sub	sp, #32
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
 800f530:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	68b9      	ldr	r1, [r7, #8]
 800f53a:	f7ff fbbd 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f53e:	4a1c      	ldr	r2, [pc, #112]	; (800f5b0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f54a:	68f9      	ldr	r1, [r7, #12]
 800f54c:	f107 0310 	add.w	r3, r7, #16
 800f550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff fdb8 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f558:	f107 0310 	add.w	r3, r7, #16
 800f55c:	4619      	mov	r1, r3
 800f55e:	4620      	mov	r0, r4
 800f560:	f7fd fd79 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f564:	f107 0310 	add.w	r3, r7, #16
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fe f8c0 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f574:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f576:	f7fe f88d 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f57a:	4605      	mov	r5, r0
 800f57c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f57e:	f7fe f889 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 800f582:	4603      	mov	r3, r0
 800f584:	f107 0018 	add.w	r0, r7, #24
 800f588:	462a      	mov	r2, r5
 800f58a:	490a      	ldr	r1, [pc, #40]	; (800f5b4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800f58c:	f7fe fdb6 	bl	800e0fc <_Z16StringFromFormatPKcz>
 800f590:	f107 0318 	add.w	r3, r7, #24
 800f594:	4619      	mov	r1, r3
 800f596:	4620      	mov	r0, r4
 800f598:	f7fe f926 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f59c:	f107 0318 	add.w	r3, r7, #24
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fe f8a4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3720      	adds	r7, #32
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f5b0:	080288e4 	.word	0x080288e4
 800f5b4:	08024b60 	.word	0x08024b60

0800f5b8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800f5b8:	b590      	push	{r4, r7, lr}
 800f5ba:	b087      	sub	sp, #28
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
 800f5c4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	68b9      	ldr	r1, [r7, #8]
 800f5ce:	f7ff fb73 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f5d2:	4a1a      	ldr	r2, [pc, #104]	; (800f63c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f5de:	68f9      	ldr	r1, [r7, #12]
 800f5e0:	f107 0310 	add.w	r3, r7, #16
 800f5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff fd6e 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f5ec:	f107 0310 	add.w	r3, r7, #16
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f7fd fd2f 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f5f8:	f107 0310 	add.w	r3, r7, #16
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe f876 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	332c      	adds	r3, #44	; 0x2c
 800f606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fe f8ed 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	332c      	adds	r3, #44	; 0x2c
 800f612:	490b      	ldr	r1, [pc, #44]	; (800f640 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe f8f9 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	332c      	adds	r3, #44	; 0x2c
 800f61e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe f8e1 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	332c      	adds	r3, #44	; 0x2c
 800f62a:	4906      	ldr	r1, [pc, #24]	; (800f644 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe f8ed 	bl	800d80c <_ZN12SimpleStringpLEPKc>
}
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	4618      	mov	r0, r3
 800f636:	371c      	adds	r7, #28
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd90      	pop	{r4, r7, pc}
 800f63c:	080288b8 	.word	0x080288b8
 800f640:	08024b50 	.word	0x08024b50
 800f644:	08024b54 	.word	0x08024b54

0800f648 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
 800f654:	603b      	str	r3, [r7, #0]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	68b9      	ldr	r1, [r7, #8]
 800f65e:	f7ff fb2b 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f662:	4a07      	ldr	r2, [pc, #28]	; (800f680 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	332c      	adds	r3, #44	; 0x2c
 800f66c:	69b9      	ldr	r1, [r7, #24]
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fd fcf1 	bl	800d056 <_ZN12SimpleStringaSERKS_>
}
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	08028574 	.word	0x08028574

0800f684 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800f684:	b590      	push	{r4, r7, lr}
 800f686:	b09d      	sub	sp, #116	; 0x74
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	68b9      	ldr	r1, [r7, #8]
 800f69a:	f7ff fb0d 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f69e:	4a5d      	ldr	r2, [pc, #372]	; (800f814 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f6aa:	68f9      	ldr	r1, [r7, #12]
 800f6ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff fd07 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f6ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f7fd fcc8 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f6c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fe f80f 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f6d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe fae1 	bl	800dca0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800f6de:	f107 0320 	add.w	r3, r7, #32
 800f6e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fe fada 	bl	800dca0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f6ec:	f107 0120 	add.w	r1, r7, #32
 800f6f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fe f8b6 	bl	800d868 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f6fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f700:	4945      	ldr	r1, [pc, #276]	; (800f818 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f702:	4618      	mov	r0, r3
 800f704:	f7fd fc3b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800f708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f70c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f710:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe f84c 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f71a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f71e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fbd2 	bl	800decc <_Z30BracketsFormattedHexStringFroml>
 800f728:	f107 0318 	add.w	r3, r7, #24
 800f72c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f730:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe f83c 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f73a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fd ffd5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f744:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd ffd0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f74e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f752:	4618      	mov	r0, r3
 800f754:	f7fd ffcb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f75c:	492e      	ldr	r1, [pc, #184]	; (800f818 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fd fc0d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800f764:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f768:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f76c:	f107 0120 	add.w	r1, r7, #32
 800f770:	4618      	mov	r0, r3
 800f772:	f7fe f81e 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f776:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f77a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fe fba4 	bl	800decc <_Z30BracketsFormattedHexStringFroml>
 800f784:	f107 0310 	add.w	r3, r7, #16
 800f788:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f78c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f790:	4618      	mov	r0, r3
 800f792:	f7fe f80e 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f796:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f79a:	4618      	mov	r0, r3
 800f79c:	f7fd ffa7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f7a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fd ffa2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f7aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd ff9d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f7ba:	68f9      	ldr	r1, [r7, #12]
 800f7bc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f7c0:	f107 0318 	add.w	r3, r7, #24
 800f7c4:	f107 0210 	add.w	r2, r7, #16
 800f7c8:	f7ff fbb8 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f7cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7fe f808 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f7d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fd ff86 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f7e2:	f107 0310 	add.w	r3, r7, #16
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd ff81 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f7ec:	f107 0318 	add.w	r3, r7, #24
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fd ff7c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f7f6:	f107 0320 	add.w	r3, r7, #32
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fd ff77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f804:	4618      	mov	r0, r3
 800f806:	f7fd ff72 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	4618      	mov	r0, r3
 800f80e:	3774      	adds	r7, #116	; 0x74
 800f810:	46bd      	mov	sp, r7
 800f812:	bd90      	pop	{r4, r7, pc}
 800f814:	0802888c 	.word	0x0802888c
 800f818:	08024ab4 	.word	0x08024ab4

0800f81c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800f81c:	b590      	push	{r4, r7, lr}
 800f81e:	b09d      	sub	sp, #116	; 0x74
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
 800f828:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	68b9      	ldr	r1, [r7, #8]
 800f832:	f7ff fa41 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f836:	4a5d      	ldr	r2, [pc, #372]	; (800f9ac <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f842:	68f9      	ldr	r1, [r7, #12]
 800f844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f848:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7ff fc3b 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f856:	4619      	mov	r1, r3
 800f858:	4620      	mov	r0, r4
 800f85a:	f7fd fbfc 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f85e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f862:	4618      	mov	r0, r3
 800f864:	f7fd ff43 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800f868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f86c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe fc7d 	bl	800e170 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800f876:	f107 0320 	add.w	r3, r7, #32
 800f87a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fe fc76 	bl	800e170 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800f884:	f107 0120 	add.w	r1, r7, #32
 800f888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f88c:	2220      	movs	r2, #32
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fd ffea 	bl	800d868 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f898:	4945      	ldr	r1, [pc, #276]	; (800f9b0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fb6f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800f8a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f8a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f8a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fd ff80 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f8b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f8b6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe fb22 	bl	800df04 <_Z30BracketsFormattedHexStringFromm>
 800f8c0:	f107 0318 	add.w	r3, r7, #24
 800f8c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f8c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fd ff70 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f8d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fd ff09 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f8dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fd ff04 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f8e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fd feff 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f8f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f8f4:	492e      	ldr	r1, [pc, #184]	; (800f9b0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fd fb41 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800f8fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f900:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f904:	f107 0120 	add.w	r1, r7, #32
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fd ff52 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f90e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f912:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f916:	4618      	mov	r0, r3
 800f918:	f7fe faf4 	bl	800df04 <_Z30BracketsFormattedHexStringFromm>
 800f91c:	f107 0310 	add.w	r3, r7, #16
 800f920:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f924:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fd ff42 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800f92e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f932:	4618      	mov	r0, r3
 800f934:	f7fd fedb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f938:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fd fed6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800f942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f946:	4618      	mov	r0, r3
 800f948:	f7fd fed1 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f952:	68f9      	ldr	r1, [r7, #12]
 800f954:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800f958:	f107 0318 	add.w	r3, r7, #24
 800f95c:	f107 0210 	add.w	r2, r7, #16
 800f960:	f7ff faec 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f968:	4619      	mov	r1, r3
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7fd ff3c 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800f970:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f974:	4618      	mov	r0, r3
 800f976:	f7fd feba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800f97a:	f107 0310 	add.w	r3, r7, #16
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fd feb5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800f984:	f107 0318 	add.w	r3, r7, #24
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fd feb0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800f98e:	f107 0320 	add.w	r3, r7, #32
 800f992:	4618      	mov	r0, r3
 800f994:	f7fd feab 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800f998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fd fea6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3774      	adds	r7, #116	; 0x74
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd90      	pop	{r4, r7, pc}
 800f9ac:	08028860 	.word	0x08028860
 800f9b0:	08024ab4 	.word	0x08024ab4

0800f9b4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800f9b4:	b590      	push	{r4, r7, lr}
 800f9b6:	b09d      	sub	sp, #116	; 0x74
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
 800f9c0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	68b9      	ldr	r1, [r7, #8]
 800f9ca:	f7ff f975 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f9ce:	4a5f      	ldr	r2, [pc, #380]	; (800fb4c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f9da:	68f9      	ldr	r1, [r7, #12]
 800f9dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff fb6f 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f9ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7fd fb30 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800f9f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fd fe77 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800fa00:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800fa04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe f936 	bl	800dc7c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800fa10:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800fa14:	f107 0320 	add.w	r3, r7, #32
 800fa18:	4611      	mov	r1, r2
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fe f92e 	bl	800dc7c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800fa20:	f107 0120 	add.w	r1, r7, #32
 800fa24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa28:	2220      	movs	r2, #32
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fd ff1c 	bl	800d868 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fa30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa34:	4946      	ldr	r1, [pc, #280]	; (800fb50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fd faa1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800fa3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fa44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fd feb2 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800fa4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa52:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7fe fa6f 	bl	800df3c <_Z30BracketsFormattedHexStringFroma>
 800fa5e:	f107 0318 	add.w	r3, r7, #24
 800fa62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fa66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fd fea1 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800fa70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd fe3a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800fa7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fd fe35 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800fa84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fd fe30 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fa8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fa92:	492f      	ldr	r1, [pc, #188]	; (800fb50 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fd fa72 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 800fa9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800faa2:	f107 0120 	add.w	r1, r7, #32
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fd fe83 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800faac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fab0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800fab4:	4611      	mov	r1, r2
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe fa40 	bl	800df3c <_Z30BracketsFormattedHexStringFroma>
 800fabc:	f107 0310 	add.w	r3, r7, #16
 800fac0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fac4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fd fe72 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 800face:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fd fe0b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800fad8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fd fe06 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800fae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7fd fe01 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800faf2:	68f9      	ldr	r1, [r7, #12]
 800faf4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800faf8:	f107 0318 	add.w	r3, r7, #24
 800fafc:	f107 0210 	add.w	r2, r7, #16
 800fb00:	f7ff fa1c 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fb04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb08:	4619      	mov	r1, r3
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f7fd fe6c 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fb10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fd fdea 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fb1a:	f107 0310 	add.w	r3, r7, #16
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fd fde5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fb24:	f107 0318 	add.w	r3, r7, #24
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fd fde0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800fb2e:	f107 0320 	add.w	r3, r7, #32
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fd fddb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800fb38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fd fdd6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	4618      	mov	r0, r3
 800fb46:	3774      	adds	r7, #116	; 0x74
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd90      	pop	{r4, r7, pc}
 800fb4c:	08028834 	.word	0x08028834
 800fb50:	08024ab4 	.word	0x08024ab4

0800fb54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b093      	sub	sp, #76	; 0x4c
 800fb58:	af02      	add	r7, sp, #8
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	68b9      	ldr	r1, [r7, #8]
 800fb6a:	f7ff f8a5 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fb6e:	4a4a      	ldr	r2, [pc, #296]	; (800fc98 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb7a:	68f9      	ldr	r1, [r7, #12]
 800fb7c:	f107 0320 	add.w	r3, r7, #32
 800fb80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7ff faa0 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fb88:	f107 0320 	add.w	r3, r7, #32
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4620      	mov	r0, r4
 800fb90:	f7fd fa61 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800fb94:	f107 0320 	add.w	r3, r7, #32
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fd fda8 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fb9e:	f107 0318 	add.w	r3, r7, #24
 800fba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fe f83d 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fbaa:	f107 0310 	add.w	r3, r7, #16
 800fbae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fe f837 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbbc:	68f9      	ldr	r1, [r7, #12]
 800fbbe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fbc2:	f107 0310 	add.w	r3, r7, #16
 800fbc6:	f107 0218 	add.w	r2, r7, #24
 800fbca:	f7ff f9b7 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fbce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f7fd fe07 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fbda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fd fd85 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800fbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d046      	beq.n	800fc78 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800fbea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d043      	beq.n	800fc78 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf8:	4413      	add	r3, r2
 800fbfa:	781a      	ldrb	r2, [r3, #0]
 800fbfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc00:	440b      	add	r3, r1
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d103      	bne.n	800fc10 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800fc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc0e:	e7f1      	b.n	800fbf4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800fc10:	2300      	movs	r3, #0
 800fc12:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc14:	f107 0310 	add.w	r3, r7, #16
 800fc18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fd fecb 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800fc20:	4603      	mov	r3, r0
 800fc22:	461c      	mov	r4, r3
 800fc24:	f107 0318 	add.w	r3, r7, #24
 800fc28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fd fec3 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800fc30:	4603      	mov	r3, r0
 800fc32:	429c      	cmp	r4, r3
 800fc34:	bf0c      	ite	eq
 800fc36:	2301      	moveq	r3, #1
 800fc38:	2300      	movne	r3, #0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d003      	beq.n	800fc48 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800fc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc42:	3301      	adds	r3, #1
 800fc44:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc46:	e7e5      	b.n	800fc14 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fc54:	f107 0210 	add.w	r2, r7, #16
 800fc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5e:	f7ff f987 	bl	800ef70 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fc62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fc66:	4619      	mov	r1, r3
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f7fd fdbd 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fc6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7fd fd3b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fc78:	f107 0310 	add.w	r3, r7, #16
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7fd fd36 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fc82:	f107 0318 	add.w	r3, r7, #24
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fd fd31 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
}
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3744      	adds	r7, #68	; 0x44
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd90      	pop	{r4, r7, pc}
 800fc96:	bf00      	nop
 800fc98:	08028808 	.word	0x08028808

0800fc9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800fc9c:	b590      	push	{r4, r7, lr}
 800fc9e:	b093      	sub	sp, #76	; 0x4c
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	68b9      	ldr	r1, [r7, #8]
 800fcb2:	f7ff f801 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fcb6:	4a55      	ldr	r2, [pc, #340]	; (800fe0c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcc2:	68f9      	ldr	r1, [r7, #12]
 800fcc4:	f107 0320 	add.w	r3, r7, #32
 800fcc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff f9fc 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fcd0:	f107 0320 	add.w	r3, r7, #32
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f7fd f9bd 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800fcdc:	f107 0320 	add.w	r3, r7, #32
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fd fd04 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fce6:	f107 0318 	add.w	r3, r7, #24
 800fcea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fd ff99 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fcf2:	f107 0310 	add.w	r3, r7, #16
 800fcf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fd ff93 	bl	800dc24 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd04:	68f9      	ldr	r1, [r7, #12]
 800fd06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fd0a:	f107 0310 	add.w	r3, r7, #16
 800fd0e:	f107 0218 	add.w	r2, r7, #24
 800fd12:	f7ff f913 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fd16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f7fd fd63 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fd22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fd fce1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800fd2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d05c      	beq.n	800fdec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800fd32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d059      	beq.n	800fdec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800fd38:	2300      	movs	r3, #0
 800fd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd40:	4413      	add	r3, r2
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7fd f824 	bl	800cd92 <_ZN12SimpleString7ToLowerEc>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	461c      	mov	r4, r3
 800fd4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd52:	4413      	add	r3, r2
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fd f81b 	bl	800cd92 <_ZN12SimpleString7ToLowerEc>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	bf0c      	ite	eq
 800fd62:	2301      	moveq	r3, #1
 800fd64:	2300      	movne	r3, #0
 800fd66:	b2db      	uxtb	r3, r3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d003      	beq.n	800fd74 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800fd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6e:	3301      	adds	r3, #1
 800fd70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd72:	e7e3      	b.n	800fd3c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800fd74:	2300      	movs	r3, #0
 800fd76:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800fd78:	f107 0310 	add.w	r3, r7, #16
 800fd7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fd fe19 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800fd84:	4603      	mov	r3, r0
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fd f803 	bl	800cd92 <_ZN12SimpleString7ToLowerEc>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	461c      	mov	r4, r3
 800fd90:	f107 0318 	add.w	r3, r7, #24
 800fd94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fd fe0d 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fc fff7 	bl	800cd92 <_ZN12SimpleString7ToLowerEc>
 800fda4:	4603      	mov	r3, r0
 800fda6:	429c      	cmp	r4, r3
 800fda8:	bf0c      	ite	eq
 800fdaa:	2301      	moveq	r3, #1
 800fdac:	2300      	movne	r3, #0
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d003      	beq.n	800fdbc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdba:	e7dd      	b.n	800fd78 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdc2:	68f9      	ldr	r1, [r7, #12]
 800fdc4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fdc8:	f107 0210 	add.w	r2, r7, #16
 800fdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd2:	f7ff f8cd 	bl	800ef70 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fdd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdda:	4619      	mov	r1, r3
 800fddc:	4620      	mov	r0, r4
 800fdde:	f7fd fd03 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fde2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fc81 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800fdec:	f107 0310 	add.w	r3, r7, #16
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fd fc7c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800fdf6:	f107 0318 	add.w	r3, r7, #24
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fd fc77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
}
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	4618      	mov	r0, r3
 800fe04:	3744      	adds	r7, #68	; 0x44
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd90      	pop	{r4, r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	080287dc 	.word	0x080287dc

0800fe10 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800fe10:	b5b0      	push	{r4, r5, r7, lr}
 800fe12:	b092      	sub	sp, #72	; 0x48
 800fe14:	af02      	add	r7, sp, #8
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
 800fe1c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	68b9      	ldr	r1, [r7, #8]
 800fe26:	f7fe ff47 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fe2a:	4a40      	ldr	r2, [pc, #256]	; (800ff2c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fe36:	68f9      	ldr	r1, [r7, #12]
 800fe38:	f107 031c 	add.w	r3, r7, #28
 800fe3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff f942 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fe44:	f107 031c 	add.w	r3, r7, #28
 800fe48:	4619      	mov	r1, r3
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f7fd f903 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800fe50:	f107 031c 	add.w	r3, r7, #28
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fd fc4a 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800fe5a:	f107 0314 	add.w	r3, r7, #20
 800fe5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fe fa4c 	bl	800e300 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fe6e:	68fd      	ldr	r5, [r7, #12]
 800fe70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fe fa41 	bl	800e300 <_Z22StringFromBinaryOrNullPKhj>
 800fe7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe82:	f107 0314 	add.w	r3, r7, #20
 800fe86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7ff f856 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fe90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe94:	4619      	mov	r1, r3
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7fd fca6 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800fe9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fd fc24 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800fea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fd fc1f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800feb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d02f      	beq.n	800ff16 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800feb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d02c      	beq.n	800ff16 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800febc:	2300      	movs	r3, #0
 800febe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec4:	4413      	add	r3, r2
 800fec6:	781a      	ldrb	r2, [r3, #0]
 800fec8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800feca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fecc:	440b      	add	r3, r1
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d103      	bne.n	800fedc <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800fed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed6:	3301      	adds	r3, #1
 800fed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feda:	e7f1      	b.n	800fec0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fee2:	68f9      	ldr	r1, [r7, #12]
 800fee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fee6:	4613      	mov	r3, r2
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4413      	add	r3, r2
 800feec:	1c5d      	adds	r5, r3, #1
 800feee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800fef2:	f107 0214 	add.w	r2, r7, #20
 800fef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef8:	9300      	str	r3, [sp, #0]
 800fefa:	462b      	mov	r3, r5
 800fefc:	f7ff f838 	bl	800ef70 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ff00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff04:	4619      	mov	r1, r3
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7fd fc6e 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800ff0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fd fbec 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800ff16:	f107 0314 	add.w	r3, r7, #20
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fd fbe7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
	}
}
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	4618      	mov	r0, r3
 800ff24:	3740      	adds	r7, #64	; 0x40
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bdb0      	pop	{r4, r5, r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	080287b0 	.word	0x080287b0

0800ff30 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800ff30:	b5b0      	push	{r4, r5, r7, lr}
 800ff32:	b08c      	sub	sp, #48	; 0x30
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	68b9      	ldr	r1, [r7, #8]
 800ff46:	f7fe feb7 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ff4a:	4a26      	ldr	r2, [pc, #152]	; (800ffe4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ff56:	68f9      	ldr	r1, [r7, #12]
 800ff58:	f107 0310 	add.w	r3, r7, #16
 800ff5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7ff f8b2 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ff64:	f107 0310 	add.w	r3, r7, #16
 800ff68:	4619      	mov	r1, r3
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f7fd f873 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 800ff70:	f107 0310 	add.w	r3, r7, #16
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fd fbba 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ff80:	68fd      	ldr	r5, [r7, #12]
 800ff82:	f107 0020 	add.w	r0, r7, #32
 800ff86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff8c:	f7fe fa24 	bl	800e3d8 <_Z20StringFromMaskedBitsmmj>
 800ff90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ff94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff9a:	f7fe fa1d 	bl	800e3d8 <_Z20StringFromMaskedBitsmmj>
 800ff9e:	f107 0018 	add.w	r0, r7, #24
 800ffa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffa6:	f107 0220 	add.w	r2, r7, #32
 800ffaa:	4629      	mov	r1, r5
 800ffac:	f7fe ffc6 	bl	800ef3c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ffb0:	f107 0318 	add.w	r3, r7, #24
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f7fd fc16 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 800ffbc:	f107 0318 	add.w	r3, r7, #24
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fd fb94 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800ffc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd fb8f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 800ffd0:	f107 0320 	add.w	r3, r7, #32
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fd fb8a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3730      	adds	r7, #48	; 0x30
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bdb0      	pop	{r4, r5, r7, pc}
 800ffe4:	08028784 	.word	0x08028784

0800ffe8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800ffe8:	b590      	push	{r4, r7, lr}
 800ffea:	b089      	sub	sp, #36	; 0x24
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
 800fff4:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	687a      	ldr	r2, [r7, #4]
 800fffc:	68b9      	ldr	r1, [r7, #8]
 800fffe:	f7fe fe5b 	bl	800ecb8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010002:	4a1a      	ldr	r2, [pc, #104]	; (801006c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801000e:	68f9      	ldr	r1, [r7, #12]
 8010010:	f107 0310 	add.w	r3, r7, #16
 8010014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010016:	4618      	mov	r0, r3
 8010018:	f7ff f856 	bl	800f0c8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801001c:	f107 0310 	add.w	r3, r7, #16
 8010020:	4619      	mov	r1, r3
 8010022:	4620      	mov	r0, r4
 8010024:	f7fd f817 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 8010028:	f107 0310 	add.w	r3, r7, #16
 801002c:	4618      	mov	r0, r3
 801002e:	f7fd fb5e 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801003a:	f7fd fb2b 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801003e:	4602      	mov	r2, r0
 8010040:	f107 0318 	add.w	r3, r7, #24
 8010044:	490a      	ldr	r1, [pc, #40]	; (8010070 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe f858 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801004c:	f107 0318 	add.w	r3, r7, #24
 8010050:	4619      	mov	r1, r3
 8010052:	4620      	mov	r0, r4
 8010054:	f7fd fbc8 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8010058:	f107 0318 	add.w	r3, r7, #24
 801005c:	4618      	mov	r0, r3
 801005e:	f7fd fb46 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	4618      	mov	r0, r3
 8010066:	3724      	adds	r7, #36	; 0x24
 8010068:	46bd      	mov	sp, r7
 801006a:	bd90      	pop	{r4, r7, pc}
 801006c:	08028758 	.word	0x08028758
 8010070:	08024b84 	.word	0x08024b84

08010074 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	4a05      	ldr	r2, [pc, #20]	; (8010094 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	601a      	str	r2, [r3, #0]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	f7fe fe99 	bl	800edbc <_ZN11TestFailureD1Ev>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	08028758 	.word	0x08028758

08010098 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f7ff ffe7 	bl	8010074 <_ZN25FeatureUnsupportedFailureD1Ev>
 80100a6:	2134      	movs	r1, #52	; 0x34
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7fa fbb9 	bl	800a820 <_ZdlPvj>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	4a05      	ldr	r2, [pc, #20]	; (80100d8 <_ZN16BitsEqualFailureD1Ev+0x20>)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	601a      	str	r2, [r3, #0]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe fe77 	bl	800edbc <_ZN11TestFailureD1Ev>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	08028784 	.word	0x08028784

080100dc <_ZN16BitsEqualFailureD0Ev>:
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7ff ffe7 	bl	80100b8 <_ZN16BitsEqualFailureD1Ev>
 80100ea:	2134      	movs	r1, #52	; 0x34
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7fa fb97 	bl	800a820 <_ZdlPvj>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4618      	mov	r0, r3
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	4a05      	ldr	r2, [pc, #20]	; (801011c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	601a      	str	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4618      	mov	r0, r3
 801010e:	f7fe fe55 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	080287b0 	.word	0x080287b0

08010120 <_ZN18BinaryEqualFailureD0Ev>:
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7ff ffe7 	bl	80100fc <_ZN18BinaryEqualFailureD1Ev>
 801012e:	2134      	movs	r1, #52	; 0x34
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7fa fb75 	bl	800a820 <_ZdlPvj>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	4a05      	ldr	r2, [pc, #20]	; (8010160 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe fe33 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	080287dc 	.word	0x080287dc

08010164 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff ffe7 	bl	8010140 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010172:	2134      	movs	r1, #52	; 0x34
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7fa fb53 	bl	800a820 <_ZdlPvj>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4618      	mov	r0, r3
 801017e:	3708      	adds	r7, #8
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	4a05      	ldr	r2, [pc, #20]	; (80101a4 <_ZN18StringEqualFailureD1Ev+0x20>)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4618      	mov	r0, r3
 8010196:	f7fe fe11 	bl	800edbc <_ZN11TestFailureD1Ev>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	08028808 	.word	0x08028808

080101a8 <_ZN18StringEqualFailureD0Ev>:
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7ff ffe7 	bl	8010184 <_ZN18StringEqualFailureD1Ev>
 80101b6:	2134      	movs	r1, #52	; 0x34
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7fa fb31 	bl	800a820 <_ZdlPvj>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	4a05      	ldr	r2, [pc, #20]	; (80101e8 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	601a      	str	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fe fdef 	bl	800edbc <_ZN11TestFailureD1Ev>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	08028834 	.word	0x08028834

080101ec <_ZN23SignedBytesEqualFailureD0Ev>:
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff ffe7 	bl	80101c8 <_ZN23SignedBytesEqualFailureD1Ev>
 80101fa:	2134      	movs	r1, #52	; 0x34
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f7fa fb0f 	bl	800a820 <_ZdlPvj>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4618      	mov	r0, r3
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	4a05      	ldr	r2, [pc, #20]	; (801022c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	601a      	str	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4618      	mov	r0, r3
 801021e:	f7fe fdcd 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	3708      	adds	r7, #8
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	08028860 	.word	0x08028860

08010230 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ffe7 	bl	801020c <_ZN25UnsignedLongsEqualFailureD1Ev>
 801023e:	2134      	movs	r1, #52	; 0x34
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7fa faed 	bl	800a820 <_ZdlPvj>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	4a05      	ldr	r2, [pc, #20]	; (8010270 <_ZN17LongsEqualFailureD1Ev+0x20>)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	f7fe fdab 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	0802888c 	.word	0x0802888c

08010274 <_ZN17LongsEqualFailureD0Ev>:
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffe7 	bl	8010250 <_ZN17LongsEqualFailureD1Ev>
 8010282:	2134      	movs	r1, #52	; 0x34
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f7fa facb 	bl	800a820 <_ZdlPvj>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4618      	mov	r0, r3
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	4a05      	ldr	r2, [pc, #20]	; (80102b4 <_ZN12CheckFailureD1Ev+0x20>)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe fd89 	bl	800edbc <_ZN11TestFailureD1Ev>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	3708      	adds	r7, #8
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	080288b8 	.word	0x080288b8

080102b8 <_ZN12CheckFailureD0Ev>:
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff ffe7 	bl	8010294 <_ZN12CheckFailureD1Ev>
 80102c6:	2134      	movs	r1, #52	; 0x34
 80102c8:	6878      	ldr	r0, [r7, #4]
 80102ca:	f7fa faa9 	bl	800a820 <_ZdlPvj>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	4618      	mov	r0, r3
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	4a05      	ldr	r2, [pc, #20]	; (80102f8 <_ZN15ContainsFailureD1Ev+0x20>)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	601a      	str	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fe fd67 	bl	800edbc <_ZN11TestFailureD1Ev>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	080288e4 	.word	0x080288e4

080102fc <_ZN15ContainsFailureD0Ev>:
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff ffe7 	bl	80102d8 <_ZN15ContainsFailureD1Ev>
 801030a:	2134      	movs	r1, #52	; 0x34
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7fa fa87 	bl	800a820 <_ZdlPvj>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4618      	mov	r0, r3
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	4a05      	ldr	r2, [pc, #20]	; (801033c <_ZN17ComparisonFailureD1Ev+0x20>)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	601a      	str	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	f7fe fd45 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	08028910 	.word	0x08028910

08010340 <_ZN17ComparisonFailureD0Ev>:
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7ff ffe7 	bl	801031c <_ZN17ComparisonFailureD1Ev>
 801034e:	2134      	movs	r1, #52	; 0x34
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7fa fa65 	bl	800a820 <_ZdlPvj>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4618      	mov	r0, r3
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8010360:	b580      	push	{r7, lr}
 8010362:	b082      	sub	sp, #8
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	4a05      	ldr	r2, [pc, #20]	; (8010380 <_ZN17CheckEqualFailureD1Ev+0x20>)
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	f7fe fd23 	bl	800edbc <_ZN11TestFailureD1Ev>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	0802893c 	.word	0x0802893c

08010384 <_ZN17CheckEqualFailureD0Ev>:
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ffe7 	bl	8010360 <_ZN17CheckEqualFailureD1Ev>
 8010392:	2134      	movs	r1, #52	; 0x34
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7fa fa43 	bl	800a820 <_ZdlPvj>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4618      	mov	r0, r3
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	4a05      	ldr	r2, [pc, #20]	; (80103c4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	601a      	str	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7fe fd01 	bl	800edbc <_ZN11TestFailureD1Ev>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	08028968 	.word	0x08028968

080103c8 <_ZN19DoublesEqualFailureD0Ev>:
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff ffe7 	bl	80103a4 <_ZN19DoublesEqualFailureD1Ev>
 80103d6:	2134      	movs	r1, #52	; 0x34
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7fa fa21 	bl	800a820 <_ZdlPvj>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	4a05      	ldr	r2, [pc, #20]	; (8010408 <_ZN13EqualsFailureD1Ev+0x20>)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	601a      	str	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fe fcdf 	bl	800edbc <_ZN11TestFailureD1Ev>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4618      	mov	r0, r3
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	08028994 	.word	0x08028994

0801040c <_ZN13EqualsFailureD0Ev>:
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff ffe7 	bl	80103e8 <_ZN13EqualsFailureD1Ev>
 801041a:	2134      	movs	r1, #52	; 0x34
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7fa f9ff 	bl	800a820 <_ZdlPvj>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 801042c:	b5b0      	push	{r4, r5, r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af02      	add	r7, sp, #8
 8010432:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8010434:	4b0d      	ldr	r3, [pc, #52]	; (801046c <_ZL13checkedMallocj+0x40>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	4798      	blx	r3
 801043c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10e      	bne.n	8010462 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8010444:	f004 f97e 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8010448:	4604      	mov	r4, r0
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	3368      	adds	r3, #104	; 0x68
 801044e:	681d      	ldr	r5, [r3, #0]
 8010450:	f004 f988 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8010454:	4603      	mov	r3, r0
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	2325      	movs	r3, #37	; 0x25
 801045a:	4a05      	ldr	r2, [pc, #20]	; (8010470 <_ZL13checkedMallocj+0x44>)
 801045c:	4905      	ldr	r1, [pc, #20]	; (8010474 <_ZL13checkedMallocj+0x48>)
 801045e:	4620      	mov	r0, r4
 8010460:	47a8      	blx	r5
    return mem;
 8010462:	68fb      	ldr	r3, [r7, #12]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3710      	adds	r7, #16
 8010468:	46bd      	mov	sp, r7
 801046a:	bdb0      	pop	{r4, r5, r7, pc}
 801046c:	200000c8 	.word	0x200000c8
 8010470:	08024bf8 	.word	0x08024bf8
 8010474:	08024c18 	.word	0x08024c18

08010478 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8010478:	b580      	push	{r7, lr}
 801047a:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 801047c:	4b04      	ldr	r3, [pc, #16]	; (8010490 <_Z22getCurrentNewAllocatorv+0x18>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <_Z22getCurrentNewAllocatorv+0x10>
 8010484:	f000 f806 	bl	8010494 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8010488:	4b01      	ldr	r3, [pc, #4]	; (8010490 <_Z22getCurrentNewAllocatorv+0x18>)
 801048a:	681b      	ldr	r3, [r3, #0]
}
 801048c:	4618      	mov	r0, r3
 801048e:	bd80      	pop	{r7, pc}
 8010490:	20000904 	.word	0x20000904

08010494 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8010498:	f000 f810 	bl	80104bc <_Z19defaultNewAllocatorv>
 801049c:	4603      	mov	r3, r0
 801049e:	4a02      	ldr	r2, [pc, #8]	; (80104a8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80104a0:	6013      	str	r3, [r2, #0]
}
 80104a2:	bf00      	nop
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20000904 	.word	0x20000904

080104ac <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80104ac:	b580      	push	{r7, lr}
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	4801      	ldr	r0, [pc, #4]	; (80104b8 <__tcf_0+0xc>)
 80104b2:	f000 f909 	bl	80106c8 <_ZN19TestMemoryAllocatorD1Ev>
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	20000910 	.word	0x20000910

080104bc <_Z19defaultNewAllocatorv>:
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80104c0:	4b13      	ldr	r3, [pc, #76]	; (8010510 <_Z19defaultNewAllocatorv+0x54>)
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	f3bf 8f5b 	dmb	ish
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	f003 0301 	and.w	r3, r3, #1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	bf0c      	ite	eq
 80104d2:	2301      	moveq	r3, #1
 80104d4:	2300      	movne	r3, #0
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d016      	beq.n	801050a <_Z19defaultNewAllocatorv+0x4e>
 80104dc:	480c      	ldr	r0, [pc, #48]	; (8010510 <_Z19defaultNewAllocatorv+0x54>)
 80104de:	f00f fc0f 	bl	801fd00 <__cxa_guard_acquire>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	bf14      	ite	ne
 80104e8:	2301      	movne	r3, #1
 80104ea:	2300      	moveq	r3, #0
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00b      	beq.n	801050a <_Z19defaultNewAllocatorv+0x4e>
 80104f2:	4b08      	ldr	r3, [pc, #32]	; (8010514 <_Z19defaultNewAllocatorv+0x58>)
 80104f4:	4a08      	ldr	r2, [pc, #32]	; (8010518 <_Z19defaultNewAllocatorv+0x5c>)
 80104f6:	4909      	ldr	r1, [pc, #36]	; (801051c <_Z19defaultNewAllocatorv+0x60>)
 80104f8:	4809      	ldr	r0, [pc, #36]	; (8010520 <_Z19defaultNewAllocatorv+0x64>)
 80104fa:	f000 f8c5 	bl	8010688 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80104fe:	4804      	ldr	r0, [pc, #16]	; (8010510 <_Z19defaultNewAllocatorv+0x54>)
 8010500:	f00f fc0a 	bl	801fd18 <__cxa_guard_release>
 8010504:	4807      	ldr	r0, [pc, #28]	; (8010524 <_Z19defaultNewAllocatorv+0x68>)
 8010506:	f00f fc2e 	bl	801fd66 <atexit>
    return &allocator;
 801050a:	4b05      	ldr	r3, [pc, #20]	; (8010520 <_Z19defaultNewAllocatorv+0x64>)
}
 801050c:	4618      	mov	r0, r3
 801050e:	bd80      	pop	{r7, pc}
 8010510:	20000924 	.word	0x20000924
 8010514:	08024c38 	.word	0x08024c38
 8010518:	08024c40 	.word	0x08024c40
 801051c:	08024c44 	.word	0x08024c44
 8010520:	20000910 	.word	0x20000910
 8010524:	080104ad 	.word	0x080104ad

08010528 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8010528:	b580      	push	{r7, lr}
 801052a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 801052c:	4b04      	ldr	r3, [pc, #16]	; (8010540 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8010534:	f000 f806 	bl	8010544 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8010538:	4b01      	ldr	r3, [pc, #4]	; (8010540 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801053a:	681b      	ldr	r3, [r3, #0]
}
 801053c:	4618      	mov	r0, r3
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20000908 	.word	0x20000908

08010544 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8010544:	b580      	push	{r7, lr}
 8010546:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8010548:	f000 f810 	bl	801056c <_Z24defaultNewArrayAllocatorv>
 801054c:	4603      	mov	r3, r0
 801054e:	4a02      	ldr	r2, [pc, #8]	; (8010558 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8010550:	6013      	str	r3, [r2, #0]
}
 8010552:	bf00      	nop
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	20000908 	.word	0x20000908

0801055c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 801055c:	b580      	push	{r7, lr}
 801055e:	af00      	add	r7, sp, #0
 8010560:	4801      	ldr	r0, [pc, #4]	; (8010568 <__tcf_1+0xc>)
 8010562:	f000 f8b1 	bl	80106c8 <_ZN19TestMemoryAllocatorD1Ev>
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20000928 	.word	0x20000928

0801056c <_Z24defaultNewArrayAllocatorv>:
{
 801056c:	b580      	push	{r7, lr}
 801056e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8010570:	4b13      	ldr	r3, [pc, #76]	; (80105c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	f3bf 8f5b 	dmb	ish
 8010578:	b2db      	uxtb	r3, r3
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	2b00      	cmp	r3, #0
 8010580:	bf0c      	ite	eq
 8010582:	2301      	moveq	r3, #1
 8010584:	2300      	movne	r3, #0
 8010586:	b2db      	uxtb	r3, r3
 8010588:	2b00      	cmp	r3, #0
 801058a:	d016      	beq.n	80105ba <_Z24defaultNewArrayAllocatorv+0x4e>
 801058c:	480c      	ldr	r0, [pc, #48]	; (80105c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 801058e:	f00f fbb7 	bl	801fd00 <__cxa_guard_acquire>
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	bf14      	ite	ne
 8010598:	2301      	movne	r3, #1
 801059a:	2300      	moveq	r3, #0
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00b      	beq.n	80105ba <_Z24defaultNewArrayAllocatorv+0x4e>
 80105a2:	4b08      	ldr	r3, [pc, #32]	; (80105c4 <_Z24defaultNewArrayAllocatorv+0x58>)
 80105a4:	4a08      	ldr	r2, [pc, #32]	; (80105c8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80105a6:	4909      	ldr	r1, [pc, #36]	; (80105cc <_Z24defaultNewArrayAllocatorv+0x60>)
 80105a8:	4809      	ldr	r0, [pc, #36]	; (80105d0 <_Z24defaultNewArrayAllocatorv+0x64>)
 80105aa:	f000 f86d 	bl	8010688 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80105ae:	4804      	ldr	r0, [pc, #16]	; (80105c0 <_Z24defaultNewArrayAllocatorv+0x54>)
 80105b0:	f00f fbb2 	bl	801fd18 <__cxa_guard_release>
 80105b4:	4807      	ldr	r0, [pc, #28]	; (80105d4 <_Z24defaultNewArrayAllocatorv+0x68>)
 80105b6:	f00f fbd6 	bl	801fd66 <atexit>
    return &allocator;
 80105ba:	4b05      	ldr	r3, [pc, #20]	; (80105d0 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80105bc:	4618      	mov	r0, r3
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	2000093c 	.word	0x2000093c
 80105c4:	08024c5c 	.word	0x08024c5c
 80105c8:	08024c68 	.word	0x08024c68
 80105cc:	08024c70 	.word	0x08024c70
 80105d0:	20000928 	.word	0x20000928
 80105d4:	0801055d 	.word	0x0801055d

080105d8 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 80105dc:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <_Z25getCurrentMallocAllocatorv+0x18>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d101      	bne.n	80105e8 <_Z25getCurrentMallocAllocatorv+0x10>
 80105e4:	f000 f806 	bl	80105f4 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 80105e8:	4b01      	ldr	r3, [pc, #4]	; (80105f0 <_Z25getCurrentMallocAllocatorv+0x18>)
 80105ea:	681b      	ldr	r3, [r3, #0]
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	2000090c 	.word	0x2000090c

080105f4 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 80105f8:	f000 f810 	bl	801061c <_Z22defaultMallocAllocatorv>
 80105fc:	4603      	mov	r3, r0
 80105fe:	4a02      	ldr	r2, [pc, #8]	; (8010608 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010600:	6013      	str	r3, [r2, #0]
}
 8010602:	bf00      	nop
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	2000090c 	.word	0x2000090c

0801060c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
 8010610:	4801      	ldr	r0, [pc, #4]	; (8010618 <__tcf_2+0xc>)
 8010612:	f000 f859 	bl	80106c8 <_ZN19TestMemoryAllocatorD1Ev>
 8010616:	bd80      	pop	{r7, pc}
 8010618:	20000940 	.word	0x20000940

0801061c <_Z22defaultMallocAllocatorv>:
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010620:	4b13      	ldr	r3, [pc, #76]	; (8010670 <_Z22defaultMallocAllocatorv+0x54>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	f3bf 8f5b 	dmb	ish
 8010628:	b2db      	uxtb	r3, r3
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	2b00      	cmp	r3, #0
 8010630:	bf0c      	ite	eq
 8010632:	2301      	moveq	r3, #1
 8010634:	2300      	movne	r3, #0
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d016      	beq.n	801066a <_Z22defaultMallocAllocatorv+0x4e>
 801063c:	480c      	ldr	r0, [pc, #48]	; (8010670 <_Z22defaultMallocAllocatorv+0x54>)
 801063e:	f00f fb5f 	bl	801fd00 <__cxa_guard_acquire>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	bf14      	ite	ne
 8010648:	2301      	movne	r3, #1
 801064a:	2300      	moveq	r3, #0
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00b      	beq.n	801066a <_Z22defaultMallocAllocatorv+0x4e>
 8010652:	4b08      	ldr	r3, [pc, #32]	; (8010674 <_Z22defaultMallocAllocatorv+0x58>)
 8010654:	4a08      	ldr	r2, [pc, #32]	; (8010678 <_Z22defaultMallocAllocatorv+0x5c>)
 8010656:	4909      	ldr	r1, [pc, #36]	; (801067c <_Z22defaultMallocAllocatorv+0x60>)
 8010658:	4809      	ldr	r0, [pc, #36]	; (8010680 <_Z22defaultMallocAllocatorv+0x64>)
 801065a:	f000 f815 	bl	8010688 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801065e:	4804      	ldr	r0, [pc, #16]	; (8010670 <_Z22defaultMallocAllocatorv+0x54>)
 8010660:	f00f fb5a 	bl	801fd18 <__cxa_guard_release>
 8010664:	4807      	ldr	r0, [pc, #28]	; (8010684 <_Z22defaultMallocAllocatorv+0x68>)
 8010666:	f00f fb7e 	bl	801fd66 <atexit>
    return &allocator;
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <_Z22defaultMallocAllocatorv+0x64>)
}
 801066c:	4618      	mov	r0, r3
 801066e:	bd80      	pop	{r7, pc}
 8010670:	20000954 	.word	0x20000954
 8010674:	08024c8c 	.word	0x08024c8c
 8010678:	08024c94 	.word	0x08024c94
 801067c:	08024c9c 	.word	0x08024c9c
 8010680:	20000940 	.word	0x20000940
 8010684:	0801060d 	.word	0x0801060d

08010688 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	607a      	str	r2, [r7, #4]
 8010694:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8010696:	4a0b      	ldr	r2, [pc, #44]	; (80106c4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	68ba      	ldr	r2, [r7, #8]
 80106a0:	605a      	str	r2, [r3, #4]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	609a      	str	r2, [r3, #8]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	60da      	str	r2, [r3, #12]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2200      	movs	r2, #0
 80106b2:	741a      	strb	r2, [r3, #16]
{
}
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	4618      	mov	r0, r3
 80106b8:	3714      	adds	r7, #20
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	08028a20 	.word	0x08028a20

080106c8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	4a06      	ldr	r2, [pc, #24]	; (80106ec <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2201      	movs	r2, #1
 80106da:	741a      	strb	r2, [r3, #16]
}
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4618      	mov	r0, r3
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop
 80106ec:	08028a20 	.word	0x08028a20

080106f0 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
}
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ffe5 	bl	80106c8 <_ZN19TestMemoryAllocatorD1Ev>
 80106fe:	2114      	movs	r1, #20
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7fa f88d 	bl	800a820 <_ZdlPvj>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	4618      	mov	r0, r3
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	7c1b      	ldrb	r3, [r3, #16]
}
 801071c:	4618      	mov	r0, r3
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8010728:	b590      	push	{r4, r7, lr}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3310      	adds	r3, #16
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	4798      	blx	r3
 801073e:	4604      	mov	r4, r0
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3310      	adds	r3, #16
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	6838      	ldr	r0, [r7, #0]
 801074a:	4798      	blx	r3
 801074c:	4603      	mov	r3, r0
 801074e:	4619      	mov	r1, r3
 8010750:	4620      	mov	r0, r4
 8010752:	f7fc fa51 	bl	800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	bf0c      	ite	eq
 801075c:	2301      	moveq	r3, #1
 801075e:	2300      	movne	r3, #0
 8010760:	b2db      	uxtb	r3, r3
}
 8010762:	4618      	mov	r0, r3
 8010764:	370c      	adds	r7, #12
 8010766:	46bd      	mov	sp, r7
 8010768:	bd90      	pop	{r4, r7, pc}
	...

0801076c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b083      	sub	sp, #12
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	3308      	adds	r3, #8
 801077c:	681c      	ldr	r4, [r3, #0]
 801077e:	2301      	movs	r3, #1
 8010780:	4a04      	ldr	r2, [pc, #16]	; (8010794 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8010782:	6839      	ldr	r1, [r7, #0]
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	47a0      	blx	r4
 8010788:	4603      	mov	r3, r0
}
 801078a:	4618      	mov	r0, r3
 801078c:	370c      	adds	r7, #12
 801078e:	46bd      	mov	sp, r7
 8010790:	bd90      	pop	{r4, r7, pc}
 8010792:	bf00      	nop
 8010794:	08024cb8 	.word	0x08024cb8

08010798 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8010798:	b590      	push	{r4, r7, lr}
 801079a:	b085      	sub	sp, #20
 801079c:	af02      	add	r7, sp, #8
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	330c      	adds	r3, #12
 80107a8:	681c      	ldr	r4, [r3, #0]
 80107aa:	2301      	movs	r3, #1
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	4b04      	ldr	r3, [pc, #16]	; (80107c0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	47a0      	blx	r4
}
 80107b8:	bf00      	nop
 80107ba:	370c      	adds	r7, #12
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd90      	pop	{r4, r7, pc}
 80107c0:	08024cb8 	.word	0x08024cb8

080107c4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
 80107d0:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 80107d2:	68b8      	ldr	r0, [r7, #8]
 80107d4:	f7ff fe2a 	bl	801042c <_ZL13checkedMallocj>
 80107d8:	4603      	mov	r3, r0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
	...

080107e4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	60b9      	str	r1, [r7, #8]
 80107ee:	607a      	str	r2, [r7, #4]
 80107f0:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 80107f2:	4b04      	ldr	r3, [pc, #16]	; (8010804 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68b8      	ldr	r0, [r7, #8]
 80107f8:	4798      	blx	r3
}
 80107fa:	bf00      	nop
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	200000d0 	.word	0x200000d0

08010808 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8010808:	b480      	push	{r7}
 801080a:	b083      	sub	sp, #12
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    return name_;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	685b      	ldr	r3, [r3, #4]
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	689b      	ldr	r3, [r3, #8]
}
 801082c:	4618      	mov	r0, r3
 801082e:	370c      	adds	r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
    return free_name_;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	68db      	ldr	r3, [r3, #12]
}
 8010844:	4618      	mov	r0, r3
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr

08010850 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
    return this;
 8010858:	687b      	ldr	r3, [r7, #4]
}
 801085a:	4618      	mov	r0, r3
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
	...

08010868 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	4a05      	ldr	r2, [pc, #20]	; (8010888 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	601a      	str	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	f7ff ff25 	bl	80106c8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4618      	mov	r0, r3
 8010882:	3708      	adds	r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	080289ec 	.word	0x080289ec

0801088c <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
}
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff ffe7 	bl	8010868 <_ZN20NullUnknownAllocatorD1Ev>
 801089a:	2114      	movs	r1, #20
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7f9 ffbf 	bl	800a820 <_ZdlPvj>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
 80108b8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 80108ba:	2300      	movs	r3, #0
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
 80108d4:	603b      	str	r3, [r7, #0]
}
 80108d6:	bf00      	nop
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
	...

080108e4 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	4b06      	ldr	r3, [pc, #24]	; (8010908 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80108f0:	4a05      	ldr	r2, [pc, #20]	; (8010908 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80108f2:	4906      	ldr	r1, [pc, #24]	; (801090c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 80108f4:	f7ff fec8 	bl	8010688 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80108f8:	4a05      	ldr	r2, [pc, #20]	; (8010910 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	601a      	str	r2, [r3, #0]
{
}
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	08024cec 	.word	0x08024cec
 801090c:	08024cf4 	.word	0x08024cf4
 8010910:	080289ec 	.word	0x080289ec

08010914 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
 8010918:	4801      	ldr	r0, [pc, #4]	; (8010920 <__tcf_3+0xc>)
 801091a:	f7ff ffa5 	bl	8010868 <_ZN20NullUnknownAllocatorD1Ev>
 801091e:	bd80      	pop	{r7, pc}
 8010920:	20000958 	.word	0x20000958

08010924 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8010924:	b580      	push	{r7, lr}
 8010926:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8010928:	4b12      	ldr	r3, [pc, #72]	; (8010974 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	f3bf 8f5b 	dmb	ish
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 0301 	and.w	r3, r3, #1
 8010936:	2b00      	cmp	r3, #0
 8010938:	bf0c      	ite	eq
 801093a:	2301      	moveq	r3, #1
 801093c:	2300      	movne	r3, #0
 801093e:	b2db      	uxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d013      	beq.n	801096c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8010944:	480b      	ldr	r0, [pc, #44]	; (8010974 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010946:	f00f f9db 	bl	801fd00 <__cxa_guard_acquire>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	bf14      	ite	ne
 8010950:	2301      	movne	r3, #1
 8010952:	2300      	moveq	r3, #0
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d008      	beq.n	801096c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 801095a:	4807      	ldr	r0, [pc, #28]	; (8010978 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 801095c:	f7ff ffc2 	bl	80108e4 <_ZN20NullUnknownAllocatorC1Ev>
 8010960:	4804      	ldr	r0, [pc, #16]	; (8010974 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8010962:	f00f f9d9 	bl	801fd18 <__cxa_guard_release>
 8010966:	4805      	ldr	r0, [pc, #20]	; (801097c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8010968:	f00f f9fd 	bl	801fd66 <atexit>
    return &allocator;
 801096c:	4b02      	ldr	r3, [pc, #8]	; (8010978 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 801096e:	4618      	mov	r0, r3
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	2000096c 	.word	0x2000096c
 8010978:	20000958 	.word	0x20000958
 801097c:	08010915 	.word	0x08010915

08010980 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
        return testCount_;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	689b      	ldr	r3, [r3, #8]
    }
 801098c:	4618      	mov	r0, r3
 801098e:	370c      	adds	r7, #12
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	699b      	ldr	r3, [r3, #24]
    }
 80109a4:	4618      	mov	r0, r3
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 80109b4:	4b05      	ldr	r3, [pc, #20]	; (80109cc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	d103      	bne.n	80109c4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 80109bc:	f004 fa4a 	bl	8014e54 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 80109c0:	4603      	mov	r3, r0
 80109c2:	e001      	b.n	80109c8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 80109c4:	4b01      	ldr	r3, [pc, #4]	; (80109cc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80109c6:	781b      	ldrb	r3, [r3, #0]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	20000088 	.word	0x20000088

080109d0 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 80109d8:	4a0a      	ldr	r2, [pc, #40]	; (8010a04 <_ZN10TestOutputC1Ev+0x34>)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	605a      	str	r2, [r3, #4]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	721a      	strb	r2, [r3, #8]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	725a      	strb	r2, [r3, #9]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	4a05      	ldr	r2, [pc, #20]	; (8010a08 <_ZN10TestOutputC1Ev+0x38>)
 80109f4:	60da      	str	r2, [r3, #12]
{
}
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	370c      	adds	r7, #12
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr
 8010a04:	08028b24 	.word	0x08028b24
 8010a08:	080250f4 	.word	0x080250f4

08010a0c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	4a04      	ldr	r2, [pc, #16]	; (8010a28 <_ZN10TestOutputD1Ev+0x1c>)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	601a      	str	r2, [r3, #0]
{
}
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	08028b24 	.word	0x08028b24

08010a2c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	460b      	mov	r3, r1
 8010a36:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	78fa      	ldrb	r2, [r7, #3]
 8010a3c:	721a      	strb	r2, [r3, #8]
}
 8010a3e:	bf00      	nop
 8010a40:	370c      	adds	r7, #12
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8010a4a:	b480      	push	{r7}
 8010a4c:	b083      	sub	sp, #12
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
    color_ = true;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2201      	movs	r2, #1
 8010a56:	725a      	strb	r2, [r3, #9]
}
 8010a58:	bf00      	nop
 8010a5a:	370c      	adds	r7, #12
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	3328      	adds	r3, #40	; 0x28
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	4798      	blx	r3
}
 8010a7c:	bf00      	nop
 8010a7e:	3708      	adds	r7, #8
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8010a84:	b590      	push	{r4, r7, lr}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
 8010a8c:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	332c      	adds	r3, #44	; 0x2c
 8010a94:	681c      	ldr	r4, [r3, #0]
 8010a96:	f107 0308 	add.w	r3, r7, #8
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fd f8ff 	bl	800dca0 <_Z10StringFroml>
 8010aa2:	f107 0308 	add.w	r3, r7, #8
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fc fdf4 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8010aac:	4603      	mov	r3, r0
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	47a0      	blx	r4
 8010ab4:	f107 0308 	add.w	r3, r7, #8
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7fc fe18 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8010abe:	bf00      	nop
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd90      	pop	{r4, r7, pc}

08010ac6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8010ac6:	b590      	push	{r4, r7, lr}
 8010ac8:	b085      	sub	sp, #20
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	332c      	adds	r3, #44	; 0x2c
 8010ad6:	681c      	ldr	r4, [r3, #0]
 8010ad8:	f107 0308 	add.w	r3, r7, #8
 8010adc:	6839      	ldr	r1, [r7, #0]
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fd fb34 	bl	800e14c <_Z10StringFromj>
 8010ae4:	f107 0308 	add.w	r3, r7, #8
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7fc fdd3 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8010aee:	4603      	mov	r3, r0
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	47a0      	blx	r4
 8010af6:	f107 0308 	add.w	r3, r7, #8
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fc fdf7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8010b00:	bf00      	nop
 8010b02:	3714      	adds	r7, #20
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd90      	pop	{r4, r7, pc}

08010b08 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8010b08:	b590      	push	{r4, r7, lr}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	332c      	adds	r3, #44	; 0x2c
 8010b1a:	681c      	ldr	r4, [r3, #0]
 8010b1c:	f107 0310 	add.w	r3, r7, #16
 8010b20:	2106      	movs	r1, #6
 8010b22:	ed97 0b00 	vldr	d0, [r7]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fd faa6 	bl	800e078 <_Z10StringFromdi>
 8010b2c:	f107 0310 	add.w	r3, r7, #16
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fc fdaf 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8010b36:	4603      	mov	r3, r0
 8010b38:	4619      	mov	r1, r3
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	47a0      	blx	r4
 8010b3e:	f107 0310 	add.w	r3, r7, #16
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fc fdd3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8010b48:	bf00      	nop
 8010b4a:	371c      	adds	r7, #28
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd90      	pop	{r4, r7, pc}

08010b50 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
    p.print(s);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	332c      	adds	r3, #44	; 0x2c
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6839      	ldr	r1, [r7, #0]
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	4798      	blx	r3
    return p;
 8010b68:	687b      	ldr	r3, [r7, #4]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3708      	adds	r7, #8
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}
	...

08010b74 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010b74:	b590      	push	{r4, r7, lr}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	7a1b      	ldrb	r3, [r3, #8]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d01a      	beq.n	8010bbc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	332c      	adds	r3, #44	; 0x2c
 8010b8c:	681c      	ldr	r4, [r3, #0]
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3314      	adds	r3, #20
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f107 0208 	add.w	r2, r7, #8
 8010b9a:	6839      	ldr	r1, [r7, #0]
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	4798      	blx	r3
 8010ba0:	f107 0308 	add.w	r3, r7, #8
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fc fd75 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8010baa:	4603      	mov	r3, r0
 8010bac:	4619      	mov	r1, r3
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	47a0      	blx	r4
 8010bb2:	f107 0308 	add.w	r3, r7, #8
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fc fd99 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	3318      	adds	r3, #24
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	6838      	ldr	r0, [r7, #0]
 8010bc6:	4798      	blx	r3
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d007      	beq.n	8010bde <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3344      	adds	r3, #68	; 0x44
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4907      	ldr	r1, [pc, #28]	; (8010bf4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8010bdc:	e006      	b.n	8010bec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3344      	adds	r3, #68	; 0x44
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4904      	ldr	r1, [pc, #16]	; (8010bf8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	4798      	blx	r3
}
 8010bec:	bf00      	nop
 8010bee:	3714      	adds	r7, #20
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd90      	pop	{r4, r7, pc}
 8010bf4:	080250f4 	.word	0x080250f4
 8010bf8:	080250f8 	.word	0x080250f8

08010bfc <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010bfc:	b590      	push	{r4, r7, lr}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7a1b      	ldrb	r3, [r3, #8]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d019      	beq.n	8010c42 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	332c      	adds	r3, #44	; 0x2c
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4910      	ldr	r1, [pc, #64]	; (8010c58 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	3334      	adds	r3, #52	; 0x34
 8010c22:	681c      	ldr	r4, [r3, #0]
 8010c24:	6838      	ldr	r0, [r7, #0]
 8010c26:	f002 f845 	bl	8012cb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	47a0      	blx	r4
        print(" ms\n");
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	332c      	adds	r3, #44	; 0x2c
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4908      	ldr	r1, [pc, #32]	; (8010c5c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8010c40:	e005      	b.n	8010c4e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	3358      	adds	r3, #88	; 0x58
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	4798      	blx	r3
}
 8010c4e:	bf00      	nop
 8010c50:	370c      	adds	r7, #12
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd90      	pop	{r4, r7, pc}
 8010c56:	bf00      	nop
 8010c58:	080250fc 	.word	0x080250fc
 8010c5c:	08025100 	.word	0x08025100

08010c60 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	332c      	adds	r3, #44	; 0x2c
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	68d2      	ldr	r2, [r2, #12]
 8010c74:	4611      	mov	r1, r2
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	605a      	str	r2, [r3, #4]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	4b0d      	ldr	r3, [pc, #52]	; (8010cc0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8010c8a:	fb83 1302 	smull	r1, r3, r3, r2
 8010c8e:	1119      	asrs	r1, r3, #4
 8010c90:	17d3      	asrs	r3, r2, #31
 8010c92:	1acb      	subs	r3, r1, r3
 8010c94:	2132      	movs	r1, #50	; 0x32
 8010c96:	fb01 f303 	mul.w	r3, r1, r3
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	bf0c      	ite	eq
 8010ca0:	2301      	moveq	r3, #1
 8010ca2:	2300      	movne	r3, #0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d006      	beq.n	8010cb8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	332c      	adds	r3, #44	; 0x2c
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4904      	ldr	r1, [pc, #16]	; (8010cc4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	4798      	blx	r3
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	51eb851f 	.word	0x51eb851f
 8010cc4:	08025108 	.word	0x08025108

08010cc8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	60da      	str	r2, [r3, #12]
}
 8010cd8:	bf00      	nop
 8010cda:	370c      	adds	r7, #12
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
}
 8010cec:	bf00      	nop
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8010cf8:	b480      	push	{r7}
 8010cfa:	b083      	sub	sp, #12
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
}
 8010d02:	bf00      	nop
 8010d04:	370c      	adds	r7, #12
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr

08010d0e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b083      	sub	sp, #12
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	6039      	str	r1, [r7, #0]
}
 8010d18:	bf00      	nop
 8010d1a:	370c      	adds	r7, #12
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr

08010d24 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8010d24:	b590      	push	{r4, r7, lr}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
    print("\n");
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	332c      	adds	r3, #44	; 0x2c
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	496f      	ldr	r1, [pc, #444]	; (8010ef4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8010d3c:	6838      	ldr	r0, [r7, #0]
 8010d3e:	f7f8 f83c 	bl	8008dba <_ZNK10TestResult9isFailureEv>
 8010d42:	4603      	mov	r3, r0
 8010d44:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8010d46:	6838      	ldr	r0, [r7, #0]
 8010d48:	f7f8 f82b 	bl	8008da2 <_ZNK10TestResult15getFailureCountEv>
 8010d4c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8010d4e:	7bfb      	ldrb	r3, [r7, #15]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d02b      	beq.n	8010dac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	7a5b      	ldrb	r3, [r3, #9]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d006      	beq.n	8010d6a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	332c      	adds	r3, #44	; 0x2c
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4964      	ldr	r1, [pc, #400]	; (8010ef8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	4798      	blx	r3
        }
        print("Errors (");
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	332c      	adds	r3, #44	; 0x2c
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4962      	ldr	r1, [pc, #392]	; (8010efc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	4798      	blx	r3
        if (failureCount > 0) {
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d00e      	beq.n	8010d9c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	3334      	adds	r3, #52	; 0x34
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	68b9      	ldr	r1, [r7, #8]
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	4798      	blx	r3
            print(" failures, ");
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	332c      	adds	r3, #44	; 0x2c
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	495a      	ldr	r1, [pc, #360]	; (8010f00 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	4798      	blx	r3
 8010d9a:	e019      	b.n	8010dd0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	332c      	adds	r3, #44	; 0x2c
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4957      	ldr	r1, [pc, #348]	; (8010f04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	4798      	blx	r3
 8010daa:	e011      	b.n	8010dd0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	7a5b      	ldrb	r3, [r3, #9]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d006      	beq.n	8010dc2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	332c      	adds	r3, #44	; 0x2c
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4952      	ldr	r1, [pc, #328]	; (8010f08 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	4798      	blx	r3
        }
        print("OK (");
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	332c      	adds	r3, #44	; 0x2c
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4950      	ldr	r1, [pc, #320]	; (8010f0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	4798      	blx	r3
    }
    print(result.getTestCount());
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	3334      	adds	r3, #52	; 0x34
 8010dd6:	681c      	ldr	r4, [r3, #0]
 8010dd8:	6838      	ldr	r0, [r7, #0]
 8010dda:	f7ff fdd1 	bl	8010980 <_ZNK10TestResult12getTestCountEv>
 8010dde:	4603      	mov	r3, r0
 8010de0:	4619      	mov	r1, r3
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	47a0      	blx	r4
    print(" tests, ");
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	332c      	adds	r3, #44	; 0x2c
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	4948      	ldr	r1, [pc, #288]	; (8010f10 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	4798      	blx	r3
    print(result.getRunCount());
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	3334      	adds	r3, #52	; 0x34
 8010dfa:	681c      	ldr	r4, [r3, #0]
 8010dfc:	6838      	ldr	r0, [r7, #0]
 8010dfe:	f7f7 ffb8 	bl	8008d72 <_ZNK10TestResult11getRunCountEv>
 8010e02:	4603      	mov	r3, r0
 8010e04:	4619      	mov	r1, r3
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	47a0      	blx	r4
    print(" ran, ");
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	332c      	adds	r3, #44	; 0x2c
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4940      	ldr	r1, [pc, #256]	; (8010f14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	4798      	blx	r3
    print(result.getCheckCount());
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	3334      	adds	r3, #52	; 0x34
 8010e1e:	681c      	ldr	r4, [r3, #0]
 8010e20:	6838      	ldr	r0, [r7, #0]
 8010e22:	f7f8 fc13 	bl	800964c <_ZNK10TestResult13getCheckCountEv>
 8010e26:	4603      	mov	r3, r0
 8010e28:	4619      	mov	r1, r3
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	47a0      	blx	r4
    print(" checks, ");
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	332c      	adds	r3, #44	; 0x2c
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4938      	ldr	r1, [pc, #224]	; (8010f18 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	4798      	blx	r3
    print(result.getIgnoredCount());
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3334      	adds	r3, #52	; 0x34
 8010e42:	681c      	ldr	r4, [r3, #0]
 8010e44:	6838      	ldr	r0, [r7, #0]
 8010e46:	f7f7 ffa0 	bl	8008d8a <_ZNK10TestResult15getIgnoredCountEv>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	47a0      	blx	r4
    print(" ignored, ");
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	332c      	adds	r3, #44	; 0x2c
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4930      	ldr	r1, [pc, #192]	; (8010f1c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	3334      	adds	r3, #52	; 0x34
 8010e66:	681c      	ldr	r4, [r3, #0]
 8010e68:	6838      	ldr	r0, [r7, #0]
 8010e6a:	f7ff fd95 	bl	8010998 <_ZNK10TestResult19getFilteredOutCountEv>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	47a0      	blx	r4
    print(" filtered out, ");
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	332c      	adds	r3, #44	; 0x2c
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4928      	ldr	r1, [pc, #160]	; (8010f20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3334      	adds	r3, #52	; 0x34
 8010e8a:	681c      	ldr	r4, [r3, #0]
 8010e8c:	6838      	ldr	r0, [r7, #0]
 8010e8e:	f001 ff05 	bl	8012c9c <_ZNK10TestResult21getTotalExecutionTimeEv>
 8010e92:	4603      	mov	r3, r0
 8010e94:	4619      	mov	r1, r3
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	47a0      	blx	r4
    print(" ms)");
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	332c      	adds	r3, #44	; 0x2c
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4920      	ldr	r1, [pc, #128]	; (8010f24 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	4798      	blx	r3
    if (color_) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	7a5b      	ldrb	r3, [r3, #9]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d006      	beq.n	8010ebe <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	332c      	adds	r3, #44	; 0x2c
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	491b      	ldr	r1, [pc, #108]	; (8010f28 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d009      	beq.n	8010ed8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	332c      	adds	r3, #44	; 0x2c
 8010ed0:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8010ed2:	4916      	ldr	r1, [pc, #88]	; (8010f2c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	4798      	blx	r3
    }
    print("\n\n");
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	332c      	adds	r3, #44	; 0x2c
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4913      	ldr	r1, [pc, #76]	; (8010f30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	4798      	blx	r3

    dotCount_ = 0;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	605a      	str	r2, [r3, #4]
}
 8010eec:	bf00      	nop
 8010eee:	3714      	adds	r7, #20
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd90      	pop	{r4, r7, pc}
 8010ef4:	08025108 	.word	0x08025108
 8010ef8:	0802510c 	.word	0x0802510c
 8010efc:	08025114 	.word	0x08025114
 8010f00:	08025120 	.word	0x08025120
 8010f04:	0802512c 	.word	0x0802512c
 8010f08:	0802513c 	.word	0x0802513c
 8010f0c:	08025144 	.word	0x08025144
 8010f10:	0802514c 	.word	0x0802514c
 8010f14:	08025158 	.word	0x08025158
 8010f18:	08025160 	.word	0x08025160
 8010f1c:	0802516c 	.word	0x0802516c
 8010f20:	08025178 	.word	0x08025178
 8010f24:	08025188 	.word	0x08025188
 8010f28:	08025190 	.word	0x08025190
 8010f2c:	08025194 	.word	0x08025194
 8010f30:	08025238 	.word	0x08025238

08010f34 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d922      	bls.n	8010f8c <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	332c      	adds	r3, #44	; 0x2c
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	4911      	ldr	r1, [pc, #68]	; (8010f94 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	4798      	blx	r3
        print(number);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	3334      	adds	r3, #52	; 0x34
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	68b9      	ldr	r1, [r7, #8]
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	4798      	blx	r3
        print(" of ");
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	332c      	adds	r3, #44	; 0x2c
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	490b      	ldr	r1, [pc, #44]	; (8010f98 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	4798      	blx	r3
        print(total);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3334      	adds	r3, #52	; 0x34
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	6879      	ldr	r1, [r7, #4]
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	4798      	blx	r3
        print("\n");
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	332c      	adds	r3, #44	; 0x2c
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	4905      	ldr	r1, [pc, #20]	; (8010f9c <_ZN10TestOutput12printTestRunEjj+0x68>)
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	4798      	blx	r3
    }
}
 8010f8c:	bf00      	nop
 8010f8e:	3710      	adds	r7, #16
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	0802523c 	.word	0x0802523c
 8010f98:	08025248 	.word	0x08025248
 8010f9c:	08025108 	.word	0x08025108

08010fa0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8010faa:	6838      	ldr	r0, [r7, #0]
 8010fac:	f7fd ffa1 	bl	800eef2 <_ZNK11TestFailure17isOutsideTestFileEv>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d105      	bne.n	8010fc2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8010fb6:	6838      	ldr	r0, [r7, #0]
 8010fb8:	f7fd ffad 	bl	800ef16 <_ZNK11TestFailure18isInHelperFunctionEv>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e000      	b.n	8010fc8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d004      	beq.n	8010fd6 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 f81d 	bl	801100e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8010fd4:	e003      	b.n	8010fde <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 f86b 	bl	80110b4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3318      	adds	r3, #24
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f107 0208 	add.w	r2, r7, #8
 8010fea:	6839      	ldr	r1, [r7, #0]
 8010fec:	4610      	mov	r0, r2
 8010fee:	4798      	blx	r3
 8010ff0:	f107 0308 	add.w	r3, r7, #8
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 f8b2 	bl	8011160 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8010ffc:	f107 0308 	add.w	r3, r7, #8
 8011000:	4618      	mov	r0, r3
 8011002:	f7fc fb74 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8011006:	bf00      	nop
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b088      	sub	sp, #32
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	331c      	adds	r3, #28
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f107 0208 	add.w	r2, r7, #8
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	4610      	mov	r0, r2
 8011028:	4798      	blx	r3
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	3320      	adds	r3, #32
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	6838      	ldr	r0, [r7, #0]
 8011034:	4798      	blx	r3
 8011036:	4602      	mov	r2, r0
 8011038:	f107 0308 	add.w	r3, r7, #8
 801103c:	4619      	mov	r1, r3
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 f8be 	bl	80111c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011044:	f107 0308 	add.w	r3, r7, #8
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc fb50 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	330c      	adds	r3, #12
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f107 0210 	add.w	r2, r7, #16
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	4610      	mov	r0, r2
 801105e:	4798      	blx	r3
 8011060:	f107 0310 	add.w	r3, r7, #16
 8011064:	4619      	mov	r1, r3
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 f85c 	bl	8011124 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801106c:	f107 0310 	add.w	r3, r7, #16
 8011070:	4618      	mov	r0, r3
 8011072:	f7fc fb3c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f107 0218 	add.w	r2, r7, #24
 8011082:	6839      	ldr	r1, [r7, #0]
 8011084:	4610      	mov	r0, r2
 8011086:	4798      	blx	r3
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	3314      	adds	r3, #20
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	6838      	ldr	r0, [r7, #0]
 8011092:	4798      	blx	r3
 8011094:	4602      	mov	r2, r0
 8011096:	f107 0318 	add.w	r3, r7, #24
 801109a:	4619      	mov	r1, r3
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 f88f 	bl	80111c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80110a2:	f107 0318 	add.w	r3, r7, #24
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fc fb21 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80110ac:	bf00      	nop
 80110ae:	3720      	adds	r7, #32
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
 80110bc:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	3308      	adds	r3, #8
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f107 0208 	add.w	r2, r7, #8
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	4610      	mov	r0, r2
 80110ce:	4798      	blx	r3
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	3314      	adds	r3, #20
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6838      	ldr	r0, [r7, #0]
 80110da:	4798      	blx	r3
 80110dc:	4602      	mov	r2, r0
 80110de:	f107 0308 	add.w	r3, r7, #8
 80110e2:	4619      	mov	r1, r3
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 f86b 	bl	80111c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80110ea:	f107 0308 	add.w	r3, r7, #8
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fc fafd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	330c      	adds	r3, #12
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	f107 0210 	add.w	r2, r7, #16
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	4610      	mov	r0, r2
 8011104:	4798      	blx	r3
 8011106:	f107 0310 	add.w	r3, r7, #16
 801110a:	4619      	mov	r1, r3
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 f809 	bl	8011124 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8011112:	f107 0310 	add.w	r3, r7, #16
 8011116:	4618      	mov	r0, r3
 8011118:	f7fc fae9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801111c:	bf00      	nop
 801111e:	3718      	adds	r7, #24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}

08011124 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	332c      	adds	r3, #44	; 0x2c
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4909      	ldr	r1, [pc, #36]	; (801115c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	4798      	blx	r3
    print(testName.asCharString());
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	332c      	adds	r3, #44	; 0x2c
 8011142:	681c      	ldr	r4, [r3, #0]
 8011144:	6838      	ldr	r0, [r7, #0]
 8011146:	f7fc faa5 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801114a:	4603      	mov	r3, r0
 801114c:	4619      	mov	r1, r3
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	47a0      	blx	r4
}
 8011152:	bf00      	nop
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	bd90      	pop	{r4, r7, pc}
 801115a:	bf00      	nop
 801115c:	08025250 	.word	0x08025250

08011160 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8011160:	b590      	push	{r4, r7, lr}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
    print("\n");
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	332c      	adds	r3, #44	; 0x2c
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4910      	ldr	r1, [pc, #64]	; (80111b4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	4798      	blx	r3
    print("\t");
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	332c      	adds	r3, #44	; 0x2c
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	490d      	ldr	r1, [pc, #52]	; (80111b8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	4798      	blx	r3
    print(reason.asCharString());
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	332c      	adds	r3, #44	; 0x2c
 801118c:	681c      	ldr	r4, [r3, #0]
 801118e:	6838      	ldr	r0, [r7, #0]
 8011190:	f7fc fa80 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8011194:	4603      	mov	r3, r0
 8011196:	4619      	mov	r1, r3
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	47a0      	blx	r4
    print("\n\n");
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	332c      	adds	r3, #44	; 0x2c
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	4905      	ldr	r1, [pc, #20]	; (80111bc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	4798      	blx	r3
}
 80111aa:	bf00      	nop
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd90      	pop	{r4, r7, pc}
 80111b2:	bf00      	nop
 80111b4:	08025108 	.word	0x08025108
 80111b8:	08025260 	.word	0x08025260
 80111bc:	08025238 	.word	0x08025238

080111c0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80111c0:	b590      	push	{r4, r7, lr}
 80111c2:	b089      	sub	sp, #36	; 0x24
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	60b9      	str	r1, [r7, #8]
 80111ca:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80111cc:	f7ff fbf0 	bl	80109b0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	bf0c      	ite	eq
 80111d6:	2301      	moveq	r3, #1
 80111d8:	2300      	movne	r3, #0
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d015      	beq.n	801120c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	3354      	adds	r3, #84	; 0x54
 80111e6:	681c      	ldr	r4, [r3, #0]
 80111e8:	f107 0310 	add.w	r3, r7, #16
 80111ec:	68b9      	ldr	r1, [r7, #8]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fb ff19 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 80111f4:	f107 0310 	add.w	r3, r7, #16
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	4619      	mov	r1, r3
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	47a0      	blx	r4
 8011200:	f107 0310 	add.w	r3, r7, #16
 8011204:	4618      	mov	r0, r3
 8011206:	f7fc fa72 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 801120a:	e014      	b.n	8011236 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	3350      	adds	r3, #80	; 0x50
 8011212:	681c      	ldr	r4, [r3, #0]
 8011214:	f107 0318 	add.w	r3, r7, #24
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	4618      	mov	r0, r3
 801121c:	f7fb ff03 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 8011220:	f107 0318 	add.w	r3, r7, #24
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	4619      	mov	r1, r3
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	47a0      	blx	r4
 801122c:	f107 0318 	add.w	r3, r7, #24
 8011230:	4618      	mov	r0, r3
 8011232:	f7fc fa5c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8011236:	bf00      	nop
 8011238:	3724      	adds	r7, #36	; 0x24
 801123a:	46bd      	mov	sp, r7
 801123c:	bd90      	pop	{r4, r7, pc}
	...

08011240 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8011240:	b590      	push	{r4, r7, lr}
 8011242:	b085      	sub	sp, #20
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	607a      	str	r2, [r7, #4]
    print("\n");
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	332c      	adds	r3, #44	; 0x2c
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4916      	ldr	r1, [pc, #88]	; (80112b0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	4798      	blx	r3
    print(file.asCharString());
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	332c      	adds	r3, #44	; 0x2c
 8011260:	681c      	ldr	r4, [r3, #0]
 8011262:	68b8      	ldr	r0, [r7, #8]
 8011264:	f7fc fa16 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8011268:	4603      	mov	r3, r0
 801126a:	4619      	mov	r1, r3
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	47a0      	blx	r4
    print(":");
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	332c      	adds	r3, #44	; 0x2c
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	490e      	ldr	r1, [pc, #56]	; (80112b4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	4798      	blx	r3
    print(lineNumber);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	3334      	adds	r3, #52	; 0x34
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	4798      	blx	r3
    print(":");
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	332c      	adds	r3, #44	; 0x2c
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4907      	ldr	r1, [pc, #28]	; (80112b4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	4798      	blx	r3
    print(" error:");
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	332c      	adds	r3, #44	; 0x2c
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4905      	ldr	r1, [pc, #20]	; (80112b8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	4798      	blx	r3
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd90      	pop	{r4, r7, pc}
 80112b0:	08025108 	.word	0x08025108
 80112b4:	08025264 	.word	0x08025264
 80112b8:	08025268 	.word	0x08025268

080112bc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b085      	sub	sp, #20
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
    print("\n");
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	332c      	adds	r3, #44	; 0x2c
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4916      	ldr	r1, [pc, #88]	; (801132c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	4798      	blx	r3
    print(file.asCharString());
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	332c      	adds	r3, #44	; 0x2c
 80112dc:	681c      	ldr	r4, [r3, #0]
 80112de:	68b8      	ldr	r0, [r7, #8]
 80112e0:	f7fc f9d8 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 80112e4:	4603      	mov	r3, r0
 80112e6:	4619      	mov	r1, r3
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	47a0      	blx	r4
    print("(");
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	332c      	adds	r3, #44	; 0x2c
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	490e      	ldr	r1, [pc, #56]	; (8011330 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	4798      	blx	r3
    print(lineNumber);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	3334      	adds	r3, #52	; 0x34
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	6879      	ldr	r1, [r7, #4]
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	4798      	blx	r3
    print("):");
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	332c      	adds	r3, #44	; 0x2c
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4908      	ldr	r1, [pc, #32]	; (8011334 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8011312:	68f8      	ldr	r0, [r7, #12]
 8011314:	4798      	blx	r3
    print(" error:");
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	332c      	adds	r3, #44	; 0x2c
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4906      	ldr	r1, [pc, #24]	; (8011338 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	4798      	blx	r3
}
 8011324:	bf00      	nop
 8011326:	3714      	adds	r7, #20
 8011328:	46bd      	mov	sp, r7
 801132a:	bd90      	pop	{r4, r7, pc}
 801132c:	08025108 	.word	0x08025108
 8011330:	08025270 	.word	0x08025270
 8011334:	08025274 	.word	0x08025274
 8011338:	08025268 	.word	0x08025268

0801133c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b082      	sub	sp, #8
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7a1b      	ldrb	r3, [r3, #8]
 801134a:	2b02      	cmp	r3, #2
 801134c:	d106      	bne.n	801135c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3328      	adds	r3, #40	; 0x28
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	6839      	ldr	r1, [r7, #0]
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	4798      	blx	r3
}
 801135c:	bf00      	nop
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
    while (*s) {
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d009      	beq.n	801138a <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8011376:	4b0a      	ldr	r3, [pc, #40]	; (80113a0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	7812      	ldrb	r2, [r2, #0]
 801137e:	4610      	mov	r0, r2
 8011380:	4798      	blx	r3
        s++;
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	603b      	str	r3, [r7, #0]
    while (*s) {
 8011388:	e7f1      	b.n	801136e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	334c      	adds	r3, #76	; 0x4c
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	4798      	blx	r3
}
 8011396:	bf00      	nop
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	200000c0 	.word	0x200000c0

080113a4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80113ac:	4b03      	ldr	r3, [pc, #12]	; (80113bc <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4798      	blx	r3
}
 80113b2:	bf00      	nop
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	200000c4 	.word	0x200000c4

080113c0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fb00 	bl	80109d0 <_ZN10TestOutputC1Ev>
 80113d0:	4a06      	ldr	r2, [pc, #24]	; (80113ec <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	601a      	str	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	611a      	str	r2, [r3, #16]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	615a      	str	r2, [r3, #20]
{
}
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	08028a54 	.word	0x08028a54

080113f0 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	4a0e      	ldr	r2, [pc, #56]	; (8011434 <_ZN19CompositeTestOutputD1Ev+0x44>)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d004      	beq.n	8011410 <_ZN19CompositeTestOutputD1Ev+0x20>
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	3204      	adds	r2, #4
 801140a:	6812      	ldr	r2, [r2, #0]
 801140c:	4618      	mov	r0, r3
 801140e:	4790      	blx	r2
  delete outputTwo_;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	695b      	ldr	r3, [r3, #20]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d004      	beq.n	8011422 <_ZN19CompositeTestOutputD1Ev+0x32>
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	3204      	adds	r2, #4
 801141c:	6812      	ldr	r2, [r2, #0]
 801141e:	4618      	mov	r0, r3
 8011420:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff faf1 	bl	8010a0c <_ZN10TestOutputD1Ev>
}
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	08028a54 	.word	0x08028a54

08011438 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
}
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f7ff ffd5 	bl	80113f0 <_ZN19CompositeTestOutputD1Ev>
 8011446:	2118      	movs	r1, #24
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7f9 f9e9 	bl	800a820 <_ZdlPvj>
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d004      	beq.n	8011474 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	3204      	adds	r2, #4
 801146e:	6812      	ldr	r2, [r2, #0]
 8011470:	4618      	mov	r0, r3
 8011472:	4790      	blx	r2
  outputOne_ = output;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	611a      	str	r2, [r3, #16]
}
 801147a:	bf00      	nop
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b082      	sub	sp, #8
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
 801148a:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	695b      	ldr	r3, [r3, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d004      	beq.n	801149e <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	3204      	adds	r2, #4
 8011498:	6812      	ldr	r2, [r2, #0]
 801149a:	4618      	mov	r0, r3
 801149c:	4790      	blx	r2
  outputTwo_ = output;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	615a      	str	r2, [r3, #20]
}
 80114a4:	bf00      	nop
 80114a6:	3708      	adds	r7, #8
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	691b      	ldr	r3, [r3, #16]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d008      	beq.n	80114ce <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	691a      	ldr	r2, [r3, #16]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	691b      	ldr	r3, [r3, #16]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	3308      	adds	r3, #8
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	4610      	mov	r0, r2
 80114cc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	695b      	ldr	r3, [r3, #20]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d008      	beq.n	80114e8 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	695a      	ldr	r2, [r3, #20]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3308      	adds	r3, #8
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4610      	mov	r0, r2
 80114e6:	4798      	blx	r3
}
 80114e8:	bf00      	nop
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d009      	beq.n	8011516 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	691a      	ldr	r2, [r3, #16]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	691b      	ldr	r3, [r3, #16]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	330c      	adds	r3, #12
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	6839      	ldr	r1, [r7, #0]
 8011512:	4610      	mov	r0, r2
 8011514:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d009      	beq.n	8011532 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	695a      	ldr	r2, [r3, #20]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	695b      	ldr	r3, [r3, #20]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	330c      	adds	r3, #12
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	6839      	ldr	r1, [r7, #0]
 801152e:	4610      	mov	r0, r2
 8011530:	4798      	blx	r3
}
 8011532:	bf00      	nop
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801153a:	b580      	push	{r7, lr}
 801153c:	b082      	sub	sp, #8
 801153e:	af00      	add	r7, sp, #0
 8011540:	6078      	str	r0, [r7, #4]
 8011542:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	691b      	ldr	r3, [r3, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d009      	beq.n	8011560 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	691a      	ldr	r2, [r3, #16]
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	691b      	ldr	r3, [r3, #16]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	3310      	adds	r3, #16
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	6839      	ldr	r1, [r7, #0]
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	695b      	ldr	r3, [r3, #20]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d009      	beq.n	801157c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	695a      	ldr	r2, [r3, #20]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	695b      	ldr	r3, [r3, #20]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	3310      	adds	r3, #16
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	6839      	ldr	r1, [r7, #0]
 8011578:	4610      	mov	r0, r2
 801157a:	4798      	blx	r3
}
 801157c:	bf00      	nop
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	691b      	ldr	r3, [r3, #16]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d009      	beq.n	80115aa <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	691a      	ldr	r2, [r3, #16]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	3314      	adds	r3, #20
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	6839      	ldr	r1, [r7, #0]
 80115a6:	4610      	mov	r0, r2
 80115a8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	695b      	ldr	r3, [r3, #20]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d009      	beq.n	80115c6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	695a      	ldr	r2, [r3, #20]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	695b      	ldr	r3, [r3, #20]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3314      	adds	r3, #20
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	4610      	mov	r0, r2
 80115c4:	4798      	blx	r3
}
 80115c6:	bf00      	nop
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}

080115ce <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80115ce:	b580      	push	{r7, lr}
 80115d0:	b082      	sub	sp, #8
 80115d2:	af00      	add	r7, sp, #0
 80115d4:	6078      	str	r0, [r7, #4]
 80115d6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d009      	beq.n	80115f4 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	691a      	ldr	r2, [r3, #16]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	3318      	adds	r3, #24
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6839      	ldr	r1, [r7, #0]
 80115f0:	4610      	mov	r0, r2
 80115f2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	695b      	ldr	r3, [r3, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d009      	beq.n	8011610 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	695a      	ldr	r2, [r3, #20]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3318      	adds	r3, #24
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	4610      	mov	r0, r2
 801160e:	4798      	blx	r3
}
 8011610:	bf00      	nop
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	691b      	ldr	r3, [r3, #16]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d009      	beq.n	801163e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	691a      	ldr	r2, [r3, #16]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	691b      	ldr	r3, [r3, #16]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	331c      	adds	r3, #28
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	695b      	ldr	r3, [r3, #20]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d009      	beq.n	801165a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	695a      	ldr	r2, [r3, #20]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	695b      	ldr	r3, [r3, #20]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	331c      	adds	r3, #28
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	6839      	ldr	r1, [r7, #0]
 8011656:	4610      	mov	r0, r2
 8011658:	4798      	blx	r3
}
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b082      	sub	sp, #8
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
 801166a:	460b      	mov	r3, r1
 801166c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d009      	beq.n	801168a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	691a      	ldr	r2, [r3, #16]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	3320      	adds	r3, #32
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	78f9      	ldrb	r1, [r7, #3]
 8011686:	4610      	mov	r0, r2
 8011688:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	695b      	ldr	r3, [r3, #20]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d009      	beq.n	80116a6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	695a      	ldr	r2, [r3, #20]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	695b      	ldr	r3, [r3, #20]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3320      	adds	r3, #32
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	78f9      	ldrb	r1, [r7, #3]
 80116a2:	4610      	mov	r0, r2
 80116a4:	4798      	blx	r3
}
 80116a6:	bf00      	nop
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b082      	sub	sp, #8
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d008      	beq.n	80116d0 <_ZN19CompositeTestOutput5colorEv+0x22>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	691a      	ldr	r2, [r3, #16]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3324      	adds	r3, #36	; 0x24
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4610      	mov	r0, r2
 80116ce:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	695b      	ldr	r3, [r3, #20]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d008      	beq.n	80116ea <_ZN19CompositeTestOutput5colorEv+0x3c>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	695a      	ldr	r2, [r3, #20]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	695b      	ldr	r3, [r3, #20]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	3324      	adds	r3, #36	; 0x24
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4610      	mov	r0, r2
 80116e8:	4798      	blx	r3
}
 80116ea:	bf00      	nop
 80116ec:	3708      	adds	r7, #8
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b082      	sub	sp, #8
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	691b      	ldr	r3, [r3, #16]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d009      	beq.n	8011718 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	691a      	ldr	r2, [r3, #16]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	3328      	adds	r3, #40	; 0x28
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6839      	ldr	r1, [r7, #0]
 8011714:	4610      	mov	r0, r2
 8011716:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	695b      	ldr	r3, [r3, #20]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d009      	beq.n	8011734 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	695a      	ldr	r2, [r3, #20]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	695b      	ldr	r3, [r3, #20]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	3328      	adds	r3, #40	; 0x28
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	4610      	mov	r0, r2
 8011732:	4798      	blx	r3
}
 8011734:	bf00      	nop
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d009      	beq.n	8011762 <_ZN19CompositeTestOutput5printEPKc+0x26>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	691a      	ldr	r2, [r3, #16]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	332c      	adds	r3, #44	; 0x2c
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	6839      	ldr	r1, [r7, #0]
 801175e:	4610      	mov	r0, r2
 8011760:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	695b      	ldr	r3, [r3, #20]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d009      	beq.n	801177e <_ZN19CompositeTestOutput5printEPKc+0x42>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	695a      	ldr	r2, [r3, #20]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	695b      	ldr	r3, [r3, #20]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	332c      	adds	r3, #44	; 0x2c
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6839      	ldr	r1, [r7, #0]
 801177a:	4610      	mov	r0, r2
 801177c:	4798      	blx	r3
}
 801177e:	bf00      	nop
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8011786:	b580      	push	{r7, lr}
 8011788:	b082      	sub	sp, #8
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
 801178e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d009      	beq.n	80117ac <_ZN19CompositeTestOutput5printEl+0x26>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	691a      	ldr	r2, [r3, #16]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3330      	adds	r3, #48	; 0x30
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	6839      	ldr	r1, [r7, #0]
 80117a8:	4610      	mov	r0, r2
 80117aa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d009      	beq.n	80117c8 <_ZN19CompositeTestOutput5printEl+0x42>
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	695a      	ldr	r2, [r3, #20]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	3330      	adds	r3, #48	; 0x30
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	6839      	ldr	r1, [r7, #0]
 80117c4:	4610      	mov	r0, r2
 80117c6:	4798      	blx	r3
}
 80117c8:	bf00      	nop
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	691b      	ldr	r3, [r3, #16]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d009      	beq.n	80117f6 <_ZN19CompositeTestOutput5printEj+0x26>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691a      	ldr	r2, [r3, #16]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	691b      	ldr	r3, [r3, #16]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3334      	adds	r3, #52	; 0x34
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	4610      	mov	r0, r2
 80117f4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	695b      	ldr	r3, [r3, #20]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d009      	beq.n	8011812 <_ZN19CompositeTestOutput5printEj+0x42>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	695a      	ldr	r2, [r3, #20]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	695b      	ldr	r3, [r3, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	3334      	adds	r3, #52	; 0x34
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	4610      	mov	r0, r2
 8011810:	4798      	blx	r3
}
 8011812:	bf00      	nop
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}

0801181a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 801181a:	b580      	push	{r7, lr}
 801181c:	b084      	sub	sp, #16
 801181e:	af00      	add	r7, sp, #0
 8011820:	60f8      	str	r0, [r7, #12]
 8011822:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	691b      	ldr	r3, [r3, #16]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00a      	beq.n	8011844 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	691a      	ldr	r2, [r3, #16]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	691b      	ldr	r3, [r3, #16]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	3338      	adds	r3, #56	; 0x38
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	ed97 0b00 	vldr	d0, [r7]
 8011840:	4610      	mov	r0, r2
 8011842:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	695b      	ldr	r3, [r3, #20]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	695a      	ldr	r2, [r3, #20]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	695b      	ldr	r3, [r3, #20]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	3338      	adds	r3, #56	; 0x38
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	ed97 0b00 	vldr	d0, [r7]
 801185e:	4610      	mov	r0, r2
 8011860:	4798      	blx	r3
}
 8011862:	bf00      	nop
 8011864:	3710      	adds	r7, #16
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}

0801186a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d009      	beq.n	8011890 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	691a      	ldr	r2, [r3, #16]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	333c      	adds	r3, #60	; 0x3c
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	4610      	mov	r0, r2
 801188e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	695b      	ldr	r3, [r3, #20]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d009      	beq.n	80118ac <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	695a      	ldr	r2, [r3, #20]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	695b      	ldr	r3, [r3, #20]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	333c      	adds	r3, #60	; 0x3c
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	6839      	ldr	r1, [r7, #0]
 80118a8:	4610      	mov	r0, r2
 80118aa:	4798      	blx	r3
}
 80118ac:	bf00      	nop
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	691b      	ldr	r3, [r3, #16]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d009      	beq.n	80118da <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	691a      	ldr	r2, [r3, #16]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	691b      	ldr	r3, [r3, #16]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	3344      	adds	r3, #68	; 0x44
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	4610      	mov	r0, r2
 80118d8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d009      	beq.n	80118f6 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	695a      	ldr	r2, [r3, #20]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	695b      	ldr	r3, [r3, #20]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	3344      	adds	r3, #68	; 0x44
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	4610      	mov	r0, r2
 80118f4:	4798      	blx	r3
}
 80118f6:	bf00      	nop
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	691b      	ldr	r3, [r3, #16]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d008      	beq.n	8011920 <_ZN19CompositeTestOutput5flushEv+0x22>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	691a      	ldr	r2, [r3, #16]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	334c      	adds	r3, #76	; 0x4c
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	695b      	ldr	r3, [r3, #20]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d008      	beq.n	801193a <_ZN19CompositeTestOutput5flushEv+0x3c>
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	695a      	ldr	r2, [r3, #20]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	334c      	adds	r3, #76	; 0x4c
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4610      	mov	r0, r2
 8011938:	4798      	blx	r3
}
 801193a:	bf00      	nop
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8011942:	b480      	push	{r7}
 8011944:	b085      	sub	sp, #20
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	607a      	str	r2, [r7, #4]
    }
 801194e:	bf00      	nop
 8011950:	3714      	adds	r7, #20
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr

0801195a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 801195a:	b480      	push	{r7}
 801195c:	b085      	sub	sp, #20
 801195e:	af00      	add	r7, sp, #0
 8011960:	60f8      	str	r0, [r7, #12]
 8011962:	60b9      	str	r1, [r7, #8]
 8011964:	607a      	str	r2, [r7, #4]
    }
 8011966:	bf00      	nop
 8011968:	3714      	adds	r7, #20
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr
	...

08011974 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 801197e:	4a0b      	ldr	r2, [pc, #44]	; (80119ac <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	601a      	str	r2, [r3, #0]
 8011984:	f000 f9ce 	bl	8011d24 <_ZN14NullTestPlugin8instanceEv>
 8011988:	4602      	mov	r2, r0
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	605a      	str	r2, [r3, #4]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	3308      	adds	r3, #8
 8011992:	6839      	ldr	r1, [r7, #0]
 8011994:	4618      	mov	r0, r3
 8011996:	f7fb fb46 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2201      	movs	r2, #1
 801199e:	741a      	strb	r2, [r3, #16]
{
}
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4618      	mov	r0, r3
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	08028c10 	.word	0x08028c10

080119b0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80119ba:	4a0a      	ldr	r2, [pc, #40]	; (80119e4 <_ZN10TestPluginC1EPS_+0x34>)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	683a      	ldr	r2, [r7, #0]
 80119c4:	605a      	str	r2, [r3, #4]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	3308      	adds	r3, #8
 80119ca:	4907      	ldr	r1, [pc, #28]	; (80119e8 <_ZN10TestPluginC1EPS_+0x38>)
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fb fad6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2201      	movs	r2, #1
 80119d6:	741a      	strb	r2, [r3, #16]
{
}
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4618      	mov	r0, r3
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	08028c10 	.word	0x08028c10
 80119e8:	08025278 	.word	0x08025278

080119ec <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	4a06      	ldr	r2, [pc, #24]	; (8011a10 <_ZN10TestPluginD1Ev+0x24>)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	3308      	adds	r3, #8
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fb fe75 	bl	800d6ee <_ZN12SimpleStringD1Ev>
{
}
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4618      	mov	r0, r3
 8011a08:	3708      	adds	r7, #8
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	08028c10 	.word	0x08028c10

08011a14 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
}
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff ffe5 	bl	80119ec <_ZN10TestPluginD1Ev>
 8011a22:	2114      	movs	r1, #20
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f7f8 fefb 	bl	800a820 <_ZdlPvj>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	605a      	str	r2, [r3, #4]
    return this;
 8011a44:	687b      	ldr	r3, [r7, #4]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	370c      	adds	r7, #12
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr

08011a52 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b084      	sub	sp, #16
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	60f8      	str	r0, [r7, #12]
 8011a5a:	60b9      	str	r1, [r7, #8]
 8011a5c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	7c1b      	ldrb	r3, [r3, #16]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d007      	beq.n	8011a76 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	3308      	adds	r3, #8
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	68b9      	ldr	r1, [r7, #8]
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	6858      	ldr	r0, [r3, #4]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	685b      	ldr	r3, [r3, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	3314      	adds	r3, #20
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	68b9      	ldr	r1, [r7, #8]
 8011a88:	4798      	blx	r3
}
 8011a8a:	bf00      	nop
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	6858      	ldr	r0, [r3, #4]
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	3318      	adds	r3, #24
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	7c1b      	ldrb	r3, [r3, #16]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d007      	beq.n	8011aca <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	330c      	adds	r3, #12
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	68b9      	ldr	r1, [r7, #8]
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	4798      	blx	r3
}
 8011aca:	bf00      	nop
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8011ad2:	b590      	push	{r4, r7, lr}
 8011ad4:	b085      	sub	sp, #20
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	60f8      	str	r0, [r7, #12]
 8011ada:	60b9      	str	r1, [r7, #8]
 8011adc:	607a      	str	r2, [r7, #4]
 8011ade:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	331c      	adds	r3, #28
 8011ae6:	681c      	ldr	r4, [r3, #0]
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	68b9      	ldr	r1, [r7, #8]
 8011aee:	68f8      	ldr	r0, [r7, #12]
 8011af0:	47a0      	blx	r4
 8011af2:	4603      	mov	r3, r0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3714      	adds	r7, #20
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd90      	pop	{r4, r7, pc}

08011afc <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8011afc:	b590      	push	{r4, r7, lr}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	60f8      	str	r0, [r7, #12]
 8011b04:	60b9      	str	r1, [r7, #8]
 8011b06:	607a      	str	r2, [r7, #4]
 8011b08:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	3310      	adds	r3, #16
 8011b10:	681c      	ldr	r4, [r3, #0]
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	68b9      	ldr	r1, [r7, #8]
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	47a0      	blx	r4
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d001      	beq.n	8011b26 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8011b22:	2301      	movs	r3, #1
 8011b24:	e011      	b.n	8011b4a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00c      	beq.n	8011b48 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6858      	ldr	r0, [r3, #4]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	331c      	adds	r3, #28
 8011b3a:	681c      	ldr	r4, [r3, #0]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	68b9      	ldr	r1, [r7, #8]
 8011b42:	47a0      	blx	r4
 8011b44:	4603      	mov	r3, r0
 8011b46:	e000      	b.n	8011b4a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3714      	adds	r7, #20
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd90      	pop	{r4, r7, pc}

08011b52 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8011b52:	b480      	push	{r7}
 8011b54:	b083      	sub	sp, #12
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	6078      	str	r0, [r7, #4]
    return name_;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3308      	adds	r3, #8
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b082      	sub	sp, #8
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	3308      	adds	r3, #8
 8011b78:	4619      	mov	r1, r3
 8011b7a:	6838      	ldr	r0, [r7, #0]
 8011b7c:	f7fb fdc3 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	e00d      	b.n	8011ba6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d007      	beq.n	8011ba2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff ffe6 	bl	8011b6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	e001      	b.n	8011ba6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	685b      	ldr	r3, [r3, #4]
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8011bae:	b480      	push	{r7}
 8011bb0:	b083      	sub	sp, #12
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
    return next_;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	685b      	ldr	r3, [r3, #4]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	370c      	adds	r7, #12
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc4:	4770      	bx	lr

08011bc6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b084      	sub	sp, #16
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00e      	beq.n	8011bfa <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7ff ffb6 	bl	8011b52 <_ZN10TestPlugin7getNameEv>
 8011be6:	4603      	mov	r3, r0
 8011be8:	6839      	ldr	r1, [r7, #0]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fb fd8b 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d001      	beq.n	8011bfa <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e000      	b.n	8011bfc <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d007      	beq.n	8011c10 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	685a      	ldr	r2, [r3, #4]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8011c10:	68fb      	ldr	r3, [r7, #12]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8011c1a:	b480      	push	{r7}
 8011c1c:	b083      	sub	sp, #12
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	741a      	strb	r2, [r3, #16]
}
 8011c28:	bf00      	nop
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8011c34:	b480      	push	{r7}
 8011c36:	b083      	sub	sp, #12
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2201      	movs	r2, #1
 8011c40:	741a      	strb	r2, [r3, #16]
}
 8011c42:	bf00      	nop
 8011c44:	370c      	adds	r7, #12
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
    return enabled_;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	7c1b      	ldrb	r3, [r3, #16]
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	370c      	adds	r7, #12
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
	...

08011c68 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
 8011c70:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6839      	ldr	r1, [r7, #0]
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7ff fe7c 	bl	8011974 <_ZN10TestPluginC1ERK12SimpleString>
 8011c7c:	4a05      	ldr	r2, [pc, #20]	; (8011c94 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8011c82:	4b05      	ldr	r3, [pc, #20]	; (8011c98 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	601a      	str	r2, [r3, #0]
}
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3708      	adds	r7, #8
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	08028bcc 	.word	0x08028bcc
 8011c98:	20000970 	.word	0x20000970

08011c9c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b087      	sub	sp, #28
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011ca8:	4b0e      	ldr	r3, [pc, #56]	; (8011ce4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	db0d      	blt.n	8011cd2 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8011cb6:	4a0c      	ldr	r2, [pc, #48]	; (8011ce8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011cbe:	490a      	ldr	r1, [pc, #40]	; (8011ce8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	440b      	add	r3, r1
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e7ee      	b.n	8011cb0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8011cd2:	4b04      	ldr	r3, [pc, #16]	; (8011ce4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	601a      	str	r2, [r3, #0]
}
 8011cd8:	bf00      	nop
 8011cda:	371c      	adds	r7, #28
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr
 8011ce4:	20000970 	.word	0x20000970
 8011ce8:	20000974 	.word	0x20000974

08011cec <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7ff fe59 	bl	80119b0 <_ZN10TestPluginC1EPS_>
 8011cfe:	4a04      	ldr	r2, [pc, #16]	; (8011d10 <_ZN14NullTestPluginC1Ev+0x24>)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	601a      	str	r2, [r3, #0]
{
}
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	4618      	mov	r0, r3
 8011d08:	3708      	adds	r7, #8
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	08028b88 	.word	0x08028b88

08011d14 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8011d14:	b580      	push	{r7, lr}
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	4801      	ldr	r0, [pc, #4]	; (8011d20 <__tcf_0+0xc>)
 8011d1a:	f000 f849 	bl	8011db0 <_ZN14NullTestPluginD1Ev>
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	20000a74 	.word	0x20000a74

08011d24 <_ZN14NullTestPlugin8instanceEv>:
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8011d28:	4b12      	ldr	r3, [pc, #72]	; (8011d74 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f3bf 8f5b 	dmb	ish
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	f003 0301 	and.w	r3, r3, #1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bf0c      	ite	eq
 8011d3a:	2301      	moveq	r3, #1
 8011d3c:	2300      	movne	r3, #0
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d013      	beq.n	8011d6c <_ZN14NullTestPlugin8instanceEv+0x48>
 8011d44:	480b      	ldr	r0, [pc, #44]	; (8011d74 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011d46:	f00d ffdb 	bl	801fd00 <__cxa_guard_acquire>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	bf14      	ite	ne
 8011d50:	2301      	movne	r3, #1
 8011d52:	2300      	moveq	r3, #0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d008      	beq.n	8011d6c <_ZN14NullTestPlugin8instanceEv+0x48>
 8011d5a:	4807      	ldr	r0, [pc, #28]	; (8011d78 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8011d5c:	f7ff ffc6 	bl	8011cec <_ZN14NullTestPluginC1Ev>
 8011d60:	4804      	ldr	r0, [pc, #16]	; (8011d74 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8011d62:	f00d ffd9 	bl	801fd18 <__cxa_guard_release>
 8011d66:	4805      	ldr	r0, [pc, #20]	; (8011d7c <_ZN14NullTestPlugin8instanceEv+0x58>)
 8011d68:	f00d fffd 	bl	801fd66 <atexit>
    return &_instance;
 8011d6c:	4b02      	ldr	r3, [pc, #8]	; (8011d78 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	20000a88 	.word	0x20000a88
 8011d78:	20000a74 	.word	0x20000a74
 8011d7c:	08011d15 	.word	0x08011d15

08011d80 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
}
 8011d8c:	bf00      	nop
 8011d8e:	3714      	adds	r7, #20
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	607a      	str	r2, [r7, #4]
}
 8011da4:	bf00      	nop
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	4a05      	ldr	r2, [pc, #20]	; (8011dd0 <_ZN14NullTestPluginD1Ev+0x20>)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fe13 	bl	80119ec <_ZN10TestPluginD1Ev>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	08028b88 	.word	0x08028b88

08011dd4 <_ZN14NullTestPluginD0Ev>:
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f7ff ffe7 	bl	8011db0 <_ZN14NullTestPluginD1Ev>
 8011de2:	2114      	movs	r1, #20
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7f8 fd1b 	bl	800a820 <_ZdlPvj>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4618      	mov	r0, r3
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8011dfc:	4a0f      	ldr	r2, [pc, #60]	; (8011e3c <_ZN12TestRegistryC1Ev+0x48>)
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2200      	movs	r2, #0
 8011e06:	605a      	str	r2, [r3, #4]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	609a      	str	r2, [r3, #8]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2200      	movs	r2, #0
 8011e12:	60da      	str	r2, [r3, #12]
 8011e14:	f7ff ff86 	bl	8011d24 <_ZN14NullTestPlugin8instanceEv>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	611a      	str	r2, [r3, #16]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	751a      	strb	r2, [r3, #20]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	619a      	str	r2, [r3, #24]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	771a      	strb	r2, [r3, #28]
{
}
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	4618      	mov	r0, r3
 8011e34:	3708      	adds	r7, #8
 8011e36:	46bd      	mov	sp, r7
 8011e38:	bd80      	pop	{r7, pc}
 8011e3a:	bf00      	nop
 8011e3c:	08028c54 	.word	0x08028c54

08011e40 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8011e40:	b480      	push	{r7}
 8011e42:	b083      	sub	sp, #12
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	4a04      	ldr	r2, [pc, #16]	; (8011e5c <_ZN12TestRegistryD1Ev+0x1c>)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	601a      	str	r2, [r3, #0]
{
}
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	4618      	mov	r0, r3
 8011e52:	370c      	adds	r7, #12
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr
 8011e5c:	08028c54 	.word	0x08028c54

08011e60 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
}
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f7ff ffe9 	bl	8011e40 <_ZN12TestRegistryD1Ev>
 8011e6e:	2120      	movs	r1, #32
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7f8 fcd5 	bl	800a820 <_ZdlPvj>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3308      	adds	r3, #8
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	6852      	ldr	r2, [r2, #4]
 8011e96:	4611      	mov	r1, r2
 8011e98:	6838      	ldr	r0, [r7, #0]
 8011e9a:	4798      	blx	r3
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	605a      	str	r2, [r3, #4]
}
 8011ea2:	bf00      	nop
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	3308      	adds	r3, #8
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	6838      	ldr	r0, [r7, #0]
 8011ec2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	60bb      	str	r3, [r7, #8]
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d05c      	beq.n	8011f8a <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	7d1b      	ldrb	r3, [r3, #20]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d005      	beq.n	8011ee4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3380      	adds	r3, #128	; 0x80
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	68b8      	ldr	r0, [r7, #8]
 8011ee2:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	7f1b      	ldrb	r3, [r3, #28]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d005      	beq.n	8011ef8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	3384      	adds	r3, #132	; 0x84
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	68b8      	ldr	r0, [r7, #8]
 8011ef6:	4798      	blx	r3

        if (groupStart) {
 8011ef8:	7bfb      	ldrb	r3, [r7, #15]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d008      	beq.n	8011f10 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	3310      	adds	r3, #16
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	68b9      	ldr	r1, [r7, #8]
 8011f08:	6838      	ldr	r0, [r7, #0]
 8011f0a:	4798      	blx	r3
            groupStart = false;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	3320      	adds	r3, #32
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	6838      	ldr	r0, [r7, #0]
 8011f1a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8011f1c:	683a      	ldr	r2, [r7, #0]
 8011f1e:	68b9      	ldr	r1, [r7, #8]
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 fb79 	bl	8012618 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8011f26:	4603      	mov	r3, r0
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d016      	beq.n	8011f5a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	3318      	adds	r3, #24
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	68b9      	ldr	r1, [r7, #8]
 8011f36:	6838      	ldr	r0, [r7, #0]
 8011f38:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	3390      	adds	r3, #144	; 0x90
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	6911      	ldr	r1, [r2, #16]
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	68b8      	ldr	r0, [r7, #8]
 8011f4a:	4798      	blx	r3
            result.currentTestEnded(test);
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	331c      	adds	r3, #28
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	68b9      	ldr	r1, [r7, #8]
 8011f56:	6838      	ldr	r0, [r7, #0]
 8011f58:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8011f5a:	68b9      	ldr	r1, [r7, #8]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 fa5b 	bl	8012418 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d008      	beq.n	8011f7a <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	3314      	adds	r3, #20
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68b9      	ldr	r1, [r7, #8]
 8011f76:	6838      	ldr	r0, [r7, #0]
 8011f78:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	330c      	adds	r3, #12
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	68b8      	ldr	r0, [r7, #8]
 8011f84:	4798      	blx	r3
 8011f86:	60b8      	str	r0, [r7, #8]
 8011f88:	e79f      	b.n	8011eca <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	330c      	adds	r3, #12
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	6838      	ldr	r0, [r7, #0]
 8011f94:	4798      	blx	r3
    currentRepetition_++;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	699b      	ldr	r3, [r3, #24]
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	619a      	str	r2, [r3, #24]
}
 8011fa0:	bf00      	nop
 8011fa2:	3710      	adds	r7, #16
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8011fa8:	b590      	push	{r4, r7, lr}
 8011faa:	b08f      	sub	sp, #60	; 0x3c
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8011fb2:	f107 0314 	add.w	r3, r7, #20
 8011fb6:	4953      	ldr	r1, [pc, #332]	; (8012104 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7fa ffe0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8011fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d04d      	beq.n	8012066 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8011fca:	f107 030c 	add.w	r3, r7, #12
 8011fce:	494d      	ldr	r1, [pc, #308]	; (8012104 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fa ffd4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8011fd6:	f107 030c 	add.w	r3, r7, #12
 8011fda:	494b      	ldr	r1, [pc, #300]	; (8012108 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fb fc15 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8011fe2:	f107 031c 	add.w	r3, r7, #28
 8011fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f001 f9d2 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 8011fee:	f107 021c 	add.w	r2, r7, #28
 8011ff2:	f107 030c 	add.w	r3, r7, #12
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fb fbf5 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8011ffe:	f107 031c 	add.w	r3, r7, #28
 8012002:	4618      	mov	r0, r3
 8012004:	f7fb fb73 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        gname += "#";
 8012008:	f107 030c 	add.w	r3, r7, #12
 801200c:	493e      	ldr	r1, [pc, #248]	; (8012108 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801200e:	4618      	mov	r0, r3
 8012010:	f7fb fbfc 	bl	800d80c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8012014:	f107 020c 	add.w	r2, r7, #12
 8012018:	f107 0314 	add.w	r3, r7, #20
 801201c:	4611      	mov	r1, r2
 801201e:	4618      	mov	r0, r3
 8012020:	f7fb f82b 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 8012024:	4603      	mov	r3, r0
 8012026:	f083 0301 	eor.w	r3, r3, #1
 801202a:	b2db      	uxtb	r3, r3
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00d      	beq.n	801204c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8012030:	f107 020c 	add.w	r2, r7, #12
 8012034:	f107 0314 	add.w	r3, r7, #20
 8012038:	4611      	mov	r1, r2
 801203a:	4618      	mov	r0, r3
 801203c:	f7fb fbd4 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8012040:	f107 0314 	add.w	r3, r7, #20
 8012044:	4931      	ldr	r1, [pc, #196]	; (801210c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8012046:	4618      	mov	r0, r3
 8012048:	f7fb fbe0 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 801204c:	f107 030c 	add.w	r3, r7, #12
 8012050:	4618      	mov	r0, r3
 8012052:	f7fb fb4c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	330c      	adds	r3, #12
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012060:	4798      	blx	r3
 8012062:	6378      	str	r0, [r7, #52]	; 0x34
 8012064:	e7ae      	b.n	8011fc4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8012066:	f107 0314 	add.w	r3, r7, #20
 801206a:	4a26      	ldr	r2, [pc, #152]	; (8012104 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 801206c:	4926      	ldr	r1, [pc, #152]	; (8012108 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801206e:	4618      	mov	r0, r3
 8012070:	f7fb f99a 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8012074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012078:	4924      	ldr	r1, [pc, #144]	; (801210c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801207a:	4618      	mov	r0, r3
 801207c:	f7fa ff7f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8012080:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012084:	f107 0314 	add.w	r3, r7, #20
 8012088:	4611      	mov	r1, r2
 801208a:	4618      	mov	r0, r3
 801208c:	f7fb f874 	bl	800d178 <_ZNK12SimpleString8endsWithERKS_>
 8012090:	4603      	mov	r3, r0
 8012092:	461c      	mov	r4, r3
 8012094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012098:	4618      	mov	r0, r3
 801209a:	f7fb fb28 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801209e:	2c00      	cmp	r4, #0
 80120a0:	d01a      	beq.n	80120d8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80120a2:	f107 0314 	add.w	r3, r7, #20
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fb fb00 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 80120ac:	4603      	mov	r3, r0
 80120ae:	3b01      	subs	r3, #1
 80120b0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80120b4:	f107 0114 	add.w	r1, r7, #20
 80120b8:	2200      	movs	r2, #0
 80120ba:	f7fb fc21 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 80120be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80120c2:	f107 0314 	add.w	r3, r7, #20
 80120c6:	4611      	mov	r1, r2
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fa ffc4 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 80120ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fb fb0b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3338      	adds	r3, #56	; 0x38
 80120de:	681c      	ldr	r4, [r3, #0]
 80120e0:	f107 0314 	add.w	r3, r7, #20
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fb fad5 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 80120ea:	4603      	mov	r3, r0
 80120ec:	4619      	mov	r1, r3
 80120ee:	6838      	ldr	r0, [r7, #0]
 80120f0:	47a0      	blx	r4
    SimpleString groupList;
 80120f2:	f107 0314 	add.w	r3, r7, #20
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fb faf9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80120fc:	bf00      	nop
 80120fe:	373c      	adds	r7, #60	; 0x3c
 8012100:	46bd      	mov	sp, r7
 8012102:	bd90      	pop	{r4, r7, pc}
 8012104:	080252c8 	.word	0x080252c8
 8012108:	080252cc 	.word	0x080252cc
 801210c:	080252d0 	.word	0x080252d0

08012110 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8012110:	b590      	push	{r4, r7, lr}
 8012112:	b091      	sub	sp, #68	; 0x44
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801211a:	f107 0314 	add.w	r3, r7, #20
 801211e:	4964      	ldr	r1, [pc, #400]	; (80122b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012120:	4618      	mov	r0, r3
 8012122:	f7fa ff2c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801212c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801212e:	2b00      	cmp	r3, #0
 8012130:	d06e      	beq.n	8012210 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f000 fa6e 	bl	8012618 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801213c:	4603      	mov	r3, r0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d05e      	beq.n	8012200 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8012142:	f107 030c 	add.w	r3, r7, #12
 8012146:	495a      	ldr	r1, [pc, #360]	; (80122b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012148:	4618      	mov	r0, r3
 801214a:	f7fa ff18 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801214e:	f107 030c 	add.w	r3, r7, #12
 8012152:	4958      	ldr	r1, [pc, #352]	; (80122b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8012154:	4618      	mov	r0, r3
 8012156:	f7fb fb59 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801215a:	f107 031c 	add.w	r3, r7, #28
 801215e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012160:	4618      	mov	r0, r3
 8012162:	f001 f916 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 8012166:	f107 021c 	add.w	r2, r7, #28
 801216a:	f107 030c 	add.w	r3, r7, #12
 801216e:	4611      	mov	r1, r2
 8012170:	4618      	mov	r0, r3
 8012172:	f7fb fb39 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8012176:	f107 031c 	add.w	r3, r7, #28
 801217a:	4618      	mov	r0, r3
 801217c:	f7fb fab7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8012180:	f107 030c 	add.w	r3, r7, #12
 8012184:	494c      	ldr	r1, [pc, #304]	; (80122b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8012186:	4618      	mov	r0, r3
 8012188:	f7fb fb40 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 801218c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012192:	4618      	mov	r0, r3
 8012194:	f001 f8ee 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 8012198:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801219c:	f107 030c 	add.w	r3, r7, #12
 80121a0:	4611      	mov	r1, r2
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fb fb20 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80121a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fb fa9e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80121b2:	f107 030c 	add.w	r3, r7, #12
 80121b6:	493f      	ldr	r1, [pc, #252]	; (80122b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fb fb27 	bl	800d80c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80121be:	f107 020c 	add.w	r2, r7, #12
 80121c2:	f107 0314 	add.w	r3, r7, #20
 80121c6:	4611      	mov	r1, r2
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fa ff56 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 80121ce:	4603      	mov	r3, r0
 80121d0:	f083 0301 	eor.w	r3, r3, #1
 80121d4:	b2db      	uxtb	r3, r3
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00d      	beq.n	80121f6 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80121da:	f107 020c 	add.w	r2, r7, #12
 80121de:	f107 0314 	add.w	r3, r7, #20
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fb faff 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80121ea:	f107 0314 	add.w	r3, r7, #20
 80121ee:	4933      	ldr	r1, [pc, #204]	; (80122bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fb fb0b 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 80121f6:	f107 030c 	add.w	r3, r7, #12
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fb fa77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	330c      	adds	r3, #12
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801220a:	4798      	blx	r3
 801220c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801220e:	e78d      	b.n	801212c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8012210:	f107 0314 	add.w	r3, r7, #20
 8012214:	4a26      	ldr	r2, [pc, #152]	; (80122b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012216:	4927      	ldr	r1, [pc, #156]	; (80122b4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8012218:	4618      	mov	r0, r3
 801221a:	f7fb f8c5 	bl	800d3a8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801221e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012222:	4926      	ldr	r1, [pc, #152]	; (80122bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8012224:	4618      	mov	r0, r3
 8012226:	f7fa feaa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801222a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801222e:	f107 0314 	add.w	r3, r7, #20
 8012232:	4611      	mov	r1, r2
 8012234:	4618      	mov	r0, r3
 8012236:	f7fa ff9f 	bl	800d178 <_ZNK12SimpleString8endsWithERKS_>
 801223a:	4603      	mov	r3, r0
 801223c:	461c      	mov	r4, r3
 801223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012242:	4618      	mov	r0, r3
 8012244:	f7fb fa53 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8012248:	2c00      	cmp	r4, #0
 801224a:	d01a      	beq.n	8012282 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 801224c:	f107 0314 	add.w	r3, r7, #20
 8012250:	4618      	mov	r0, r3
 8012252:	f7fb fa2b 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8012256:	4603      	mov	r3, r0
 8012258:	3b01      	subs	r3, #1
 801225a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801225e:	f107 0114 	add.w	r1, r7, #20
 8012262:	2200      	movs	r2, #0
 8012264:	f7fb fb4c 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 8012268:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801226c:	f107 0314 	add.w	r3, r7, #20
 8012270:	4611      	mov	r1, r2
 8012272:	4618      	mov	r0, r3
 8012274:	f7fa feef 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 8012278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801227c:	4618      	mov	r0, r3
 801227e:	f7fb fa36 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	3338      	adds	r3, #56	; 0x38
 8012288:	681c      	ldr	r4, [r3, #0]
 801228a:	f107 0314 	add.w	r3, r7, #20
 801228e:	4618      	mov	r0, r3
 8012290:	f7fb fa00 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8012294:	4603      	mov	r3, r0
 8012296:	4619      	mov	r1, r3
 8012298:	6838      	ldr	r0, [r7, #0]
 801229a:	47a0      	blx	r4
    SimpleString groupAndNameList;
 801229c:	f107 0314 	add.w	r3, r7, #20
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fb fa24 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80122a6:	bf00      	nop
 80122a8:	3744      	adds	r7, #68	; 0x44
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd90      	pop	{r4, r7, pc}
 80122ae:	bf00      	nop
 80122b0:	080252c8 	.word	0x080252c8
 80122b4:	080252cc 	.word	0x080252cc
 80122b8:	080252d4 	.word	0x080252d4
 80122bc:	080252d0 	.word	0x080252d0

080122c0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80122c0:	b590      	push	{r4, r7, lr}
 80122c2:	b091      	sub	sp, #68	; 0x44
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80122ca:	f107 0314 	add.w	r3, r7, #20
 80122ce:	494f      	ldr	r1, [pc, #316]	; (801240c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7fa fe54 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d07d      	beq.n	80123de <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80122e2:	f107 030c 	add.w	r3, r7, #12
 80122e6:	4949      	ldr	r1, [pc, #292]	; (801240c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fa fe48 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80122ee:	f107 031c 	add.w	r3, r7, #28
 80122f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122f4:	4618      	mov	r0, r3
 80122f6:	f001 f84c 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 80122fa:	f107 021c 	add.w	r2, r7, #28
 80122fe:	f107 030c 	add.w	r3, r7, #12
 8012302:	4611      	mov	r1, r2
 8012304:	4618      	mov	r0, r3
 8012306:	f7fb fa6f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801230a:	f107 031c 	add.w	r3, r7, #28
 801230e:	4618      	mov	r0, r3
 8012310:	f7fb f9ed 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012314:	f107 030c 	add.w	r3, r7, #12
 8012318:	493d      	ldr	r1, [pc, #244]	; (8012410 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801231a:	4618      	mov	r0, r3
 801231c:	f7fb fa76 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8012320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012326:	4618      	mov	r0, r3
 8012328:	f001 f824 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 801232c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012330:	f107 030c 	add.w	r3, r7, #12
 8012334:	4611      	mov	r1, r2
 8012336:	4618      	mov	r0, r3
 8012338:	f7fb fa56 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012340:	4618      	mov	r0, r3
 8012342:	f7fb f9d4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012346:	f107 030c 	add.w	r3, r7, #12
 801234a:	4931      	ldr	r1, [pc, #196]	; (8012410 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801234c:	4618      	mov	r0, r3
 801234e:	f7fb fa5d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8012352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012356:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012358:	4618      	mov	r0, r3
 801235a:	f001 f8dc 	bl	8013516 <_ZNK10UtestShell7getFileEv>
 801235e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012362:	f107 030c 	add.w	r3, r7, #12
 8012366:	4611      	mov	r1, r2
 8012368:	4618      	mov	r0, r3
 801236a:	f7fb fa3d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801236e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012372:	4618      	mov	r0, r3
 8012374:	f7fb f9bb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012378:	f107 030c 	add.w	r3, r7, #12
 801237c:	4924      	ldr	r1, [pc, #144]	; (8012410 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801237e:	4618      	mov	r0, r3
 8012380:	f7fb fa44 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8012384:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012386:	f001 f8d5 	bl	8013534 <_ZNK10UtestShell13getLineNumberEv>
 801238a:	4603      	mov	r3, r0
 801238c:	461a      	mov	r2, r3
 801238e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012392:	4920      	ldr	r1, [pc, #128]	; (8012414 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8012394:	4618      	mov	r0, r3
 8012396:	f7fb feb1 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801239a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801239e:	f107 030c 	add.w	r3, r7, #12
 80123a2:	4611      	mov	r1, r2
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fb fa1f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80123aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fb f99d 	bl	800d6ee <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80123b4:	f107 020c 	add.w	r2, r7, #12
 80123b8:	f107 0314 	add.w	r3, r7, #20
 80123bc:	4611      	mov	r1, r2
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fb fa12 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80123c4:	f107 030c 	add.w	r3, r7, #12
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fb f990 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80123ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	330c      	adds	r3, #12
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80123d8:	4798      	blx	r3
 80123da:	63f8      	str	r0, [r7, #60]	; 0x3c
 80123dc:	e77e      	b.n	80122dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	3338      	adds	r3, #56	; 0x38
 80123e4:	681c      	ldr	r4, [r3, #0]
 80123e6:	f107 0314 	add.w	r3, r7, #20
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fb f952 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 80123f0:	4603      	mov	r3, r0
 80123f2:	4619      	mov	r1, r3
 80123f4:	6838      	ldr	r0, [r7, #0]
 80123f6:	47a0      	blx	r4
    SimpleString testLocations;
 80123f8:	f107 0314 	add.w	r3, r7, #20
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fb f976 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8012402:	bf00      	nop
 8012404:	3744      	adds	r7, #68	; 0x44
 8012406:	46bd      	mov	sp, r7
 8012408:	bd90      	pop	{r4, r7, pc}
 801240a:	bf00      	nop
 801240c:	080252c8 	.word	0x080252c8
 8012410:	080252d4 	.word	0x080252d4
 8012414:	080252d8 	.word	0x080252d8

08012418 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8012418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801241a:	b087      	sub	sp, #28
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8012422:	2400      	movs	r4, #0
 8012424:	2500      	movs	r5, #0
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d028      	beq.n	801247e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	330c      	adds	r3, #12
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	6838      	ldr	r0, [r7, #0]
 8012436:	4798      	blx	r3
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d01f      	beq.n	801247e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801243e:	f107 0308 	add.w	r3, r7, #8
 8012442:	6839      	ldr	r1, [r7, #0]
 8012444:	4618      	mov	r0, r3
 8012446:	f000 ffa4 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 801244a:	2401      	movs	r4, #1
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	330c      	adds	r3, #12
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	6838      	ldr	r0, [r7, #0]
 8012456:	4798      	blx	r3
 8012458:	4602      	mov	r2, r0
 801245a:	f107 0310 	add.w	r3, r7, #16
 801245e:	4611      	mov	r1, r2
 8012460:	4618      	mov	r0, r3
 8012462:	f000 ff96 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 8012466:	2501      	movs	r5, #1
 8012468:	f107 0210 	add.w	r2, r7, #16
 801246c:	f107 0308 	add.w	r3, r7, #8
 8012470:	4611      	mov	r1, r2
 8012472:	4618      	mov	r0, r3
 8012474:	f7fb f98c 	bl	800d790 <_ZneRK12SimpleStringS1_>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d001      	beq.n	8012482 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801247e:	2601      	movs	r6, #1
 8012480:	e000      	b.n	8012484 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8012482:	2600      	movs	r6, #0
 8012484:	2d00      	cmp	r5, #0
 8012486:	d004      	beq.n	8012492 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8012488:	f107 0310 	add.w	r3, r7, #16
 801248c:	4618      	mov	r0, r3
 801248e:	f7fb f92e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8012492:	2c00      	cmp	r4, #0
 8012494:	d004      	beq.n	80124a0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8012496:	f107 0308 	add.w	r3, r7, #8
 801249a:	4618      	mov	r0, r3
 801249c:	f7fb f927 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80124a0:	4633      	mov	r3, r6
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	371c      	adds	r7, #28
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080124aa <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b082      	sub	sp, #8
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d00a      	beq.n	80124d0 <_ZN12TestRegistry10countTestsEv+0x26>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	685b      	ldr	r3, [r3, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	3310      	adds	r3, #16
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4610      	mov	r0, r2
 80124ca:	4798      	blx	r3
 80124cc:	4603      	mov	r3, r0
 80124ce:	e000      	b.n	80124d2 <_ZN12TestRegistry10countTestsEv+0x28>
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
	...

080124dc <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80124dc:	b580      	push	{r7, lr}
 80124de:	af00      	add	r7, sp, #0
 80124e0:	4801      	ldr	r0, [pc, #4]	; (80124e8 <__tcf_0+0xc>)
 80124e2:	f7ff fcad 	bl	8011e40 <_ZN12TestRegistryD1Ev>
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	20000a90 	.word	0x20000a90

080124ec <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 80124f0:	4b15      	ldr	r3, [pc, #84]	; (8012548 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	f3bf 8f5b 	dmb	ish
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	f003 0301 	and.w	r3, r3, #1
 80124fe:	2b00      	cmp	r3, #0
 8012500:	bf0c      	ite	eq
 8012502:	2301      	moveq	r3, #1
 8012504:	2300      	movne	r3, #0
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b00      	cmp	r3, #0
 801250a:	d013      	beq.n	8012534 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801250c:	480e      	ldr	r0, [pc, #56]	; (8012548 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801250e:	f00d fbf7 	bl	801fd00 <__cxa_guard_acquire>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	bf14      	ite	ne
 8012518:	2301      	movne	r3, #1
 801251a:	2300      	moveq	r3, #0
 801251c:	b2db      	uxtb	r3, r3
 801251e:	2b00      	cmp	r3, #0
 8012520:	d008      	beq.n	8012534 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012522:	480a      	ldr	r0, [pc, #40]	; (801254c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8012524:	f7ff fc66 	bl	8011df4 <_ZN12TestRegistryC1Ev>
 8012528:	4807      	ldr	r0, [pc, #28]	; (8012548 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801252a:	f00d fbf5 	bl	801fd18 <__cxa_guard_release>
 801252e:	4808      	ldr	r0, [pc, #32]	; (8012550 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8012530:	f00d fc19 	bl	801fd66 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8012534:	4b07      	ldr	r3, [pc, #28]	; (8012554 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 801253c:	4b05      	ldr	r3, [pc, #20]	; (8012554 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	e000      	b.n	8012544 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8012542:	4b02      	ldr	r3, [pc, #8]	; (801254c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8012544:	4618      	mov	r0, r3
 8012546:	bd80      	pop	{r7, pc}
 8012548:	20000ab0 	.word	0x20000ab0
 801254c:	20000a90 	.word	0x20000a90
 8012550:	080124dd 	.word	0x080124dd
 8012554:	20000a8c 	.word	0x20000a8c

08012558 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8012558:	b480      	push	{r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8012562:	4a04      	ldr	r2, [pc, #16]	; (8012574 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	6013      	str	r3, [r2, #0]
}
 8012568:	bf00      	nop
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	20000a8c 	.word	0x20000a8c

08012578 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00a      	beq.n	801259e <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	685a      	ldr	r2, [r3, #4]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	330c      	adds	r3, #12
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4610      	mov	r0, r2
 8012598:	4798      	blx	r3
 801259a:	4603      	mov	r3, r0
 801259c:	e000      	b.n	80125a0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 801259e:	2300      	movs	r3, #0
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	6053      	str	r3, [r2, #4]

}
 80125a4:	bf00      	nop
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	683a      	ldr	r2, [r7, #0]
 80125ba:	609a      	str	r2, [r3, #8]
}
 80125bc:	bf00      	nop
 80125be:	370c      	adds	r7, #12
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	683a      	ldr	r2, [r7, #0]
 80125d6:	60da      	str	r2, [r3, #12]
}
 80125d8:	bf00      	nop
 80125da:	370c      	adds	r7, #12
 80125dc:	46bd      	mov	sp, r7
 80125de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e2:	4770      	bx	lr

080125e4 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2201      	movs	r2, #1
 80125f0:	771a      	strb	r2, [r3, #28]
}
 80125f2:	bf00      	nop
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 80125fe:	b480      	push	{r7}
 8012600:	b083      	sub	sp, #12
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2201      	movs	r2, #1
 801260a:	751a      	strb	r2, [r3, #20]
}
 801260c:	bf00      	nop
 801260e:	370c      	adds	r7, #12
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	68d9      	ldr	r1, [r3, #12]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	461a      	mov	r2, r3
 801262e:	68b8      	ldr	r0, [r7, #8]
 8012630:	f000 ffbb 	bl	80135aa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d001      	beq.n	801263e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 801263a:	2301      	movs	r3, #1
 801263c:	e006      	b.n	801264c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	332c      	adds	r3, #44	; 0x2c
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	4798      	blx	r3
        return false;
 801264a:	2300      	movs	r3, #0
    }
}
 801264c:	4618      	mov	r0, r3
 801264e:	3710      	adds	r7, #16
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 801265c:	f7ff fb62 	bl	8011d24 <_ZN14NullTestPlugin8instanceEv>
 8012660:	4602      	mov	r2, r0
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	611a      	str	r2, [r3, #16]
}
 8012666:	bf00      	nop
 8012668:	3708      	adds	r7, #8
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}

0801266e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 801266e:	b580      	push	{r7, lr}
 8012670:	b082      	sub	sp, #8
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	3324      	adds	r3, #36	; 0x24
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	687a      	ldr	r2, [r7, #4]
 8012682:	6912      	ldr	r2, [r2, #16]
 8012684:	4611      	mov	r1, r2
 8012686:	6838      	ldr	r0, [r7, #0]
 8012688:	4798      	blx	r3
 801268a:	4602      	mov	r2, r0
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	611a      	str	r2, [r3, #16]
}
 8012690:	bf00      	nop
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8012698:	b480      	push	{r7}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	691b      	ldr	r3, [r3, #16]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	691b      	ldr	r3, [r3, #16]
 80126be:	6839      	ldr	r1, [r7, #0]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7ff fa52 	bl	8011b6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80126c6:	4603      	mov	r3, r0
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3708      	adds	r7, #8
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b082      	sub	sp, #8
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	691a      	ldr	r2, [r3, #16]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	3328      	adds	r3, #40	; 0x28
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	6839      	ldr	r1, [r7, #0]
 80126ea:	4610      	mov	r0, r2
 80126ec:	4798      	blx	r3
 80126ee:	4602      	mov	r2, r0
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	bf0c      	ite	eq
 80126f8:	2301      	moveq	r3, #1
 80126fa:	2300      	movne	r3, #0
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00b      	beq.n	801271a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	691a      	ldr	r2, [r3, #16]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	691b      	ldr	r3, [r3, #16]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	332c      	adds	r3, #44	; 0x2c
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4610      	mov	r0, r2
 8012712:	4798      	blx	r3
 8012714:	4602      	mov	r2, r0
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	691b      	ldr	r3, [r3, #16]
 801271e:	4618      	mov	r0, r3
 8012720:	f7ff fa17 	bl	8011b52 <_ZN10TestPlugin7getNameEv>
 8012724:	4603      	mov	r3, r0
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	4618      	mov	r0, r3
 801272a:	f7fa ffec 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00b      	beq.n	801274c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	691a      	ldr	r2, [r3, #16]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	691b      	ldr	r3, [r3, #16]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	332c      	adds	r3, #44	; 0x2c
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	4610      	mov	r0, r2
 8012744:	4798      	blx	r3
 8012746:	4602      	mov	r2, r0
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	691a      	ldr	r2, [r3, #16]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	691b      	ldr	r3, [r3, #16]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	3328      	adds	r3, #40	; 0x28
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	4610      	mov	r0, r2
 801275e:	4798      	blx	r3
}
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
    int count = 0;
 8012770:	2300      	movs	r3, #0
 8012772:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	691b      	ldr	r3, [r3, #16]
 8012778:	60bb      	str	r3, [r7, #8]
 801277a:	f7ff fad3 	bl	8011d24 <_ZN14NullTestPlugin8instanceEv>
 801277e:	4602      	mov	r2, r0
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	4293      	cmp	r3, r2
 8012784:	bf14      	ite	ne
 8012786:	2301      	movne	r3, #1
 8012788:	2300      	moveq	r3, #0
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00a      	beq.n	80127a6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	3301      	adds	r3, #1
 8012794:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	332c      	adds	r3, #44	; 0x2c
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	68b8      	ldr	r0, [r7, #8]
 80127a0:	4798      	blx	r3
 80127a2:	60b8      	str	r0, [r7, #8]
 80127a4:	e7e9      	b.n	801277a <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 80127a6:	68fb      	ldr	r3, [r7, #12]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    return tests_;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	685b      	ldr	r3, [r3, #4]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	334c      	adds	r3, #76	; 0x4c
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	4798      	blx	r3
 80127de:	4602      	mov	r2, r0
 80127e0:	f107 0308 	add.w	r3, r7, #8
 80127e4:	4611      	mov	r1, r2
 80127e6:	4618      	mov	r0, r3
 80127e8:	f002 f8f8 	bl	80149dc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 80127ec:	f107 0308 	add.w	r3, r7, #8
 80127f0:	6839      	ldr	r1, [r7, #0]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f002 f980 	bl	8014af8 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 80127f8:	f107 0308 	add.w	r3, r7, #8
 80127fc:	4618      	mov	r0, r3
 80127fe:	f002 fa13 	bl	8014c28 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012802:	4602      	mov	r2, r0
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012808:	f107 0308 	add.w	r3, r7, #8
 801280c:	4618      	mov	r0, r3
 801280e:	f002 f939 	bl	8014a84 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012812:	bf00      	nop
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}

0801281a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801281a:	b580      	push	{r7, lr}
 801281c:	b084      	sub	sp, #16
 801281e:	af00      	add	r7, sp, #0
 8012820:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	334c      	adds	r3, #76	; 0x4c
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	4798      	blx	r3
 801282e:	4602      	mov	r2, r0
 8012830:	f107 0308 	add.w	r3, r7, #8
 8012834:	4611      	mov	r1, r2
 8012836:	4618      	mov	r0, r3
 8012838:	f002 f8d0 	bl	80149dc <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 801283c:	f107 0308 	add.w	r3, r7, #8
 8012840:	4618      	mov	r0, r3
 8012842:	f002 f995 	bl	8014b70 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8012846:	f107 0308 	add.w	r3, r7, #8
 801284a:	4618      	mov	r0, r3
 801284c:	f002 f9ec 	bl	8014c28 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012850:	4602      	mov	r2, r0
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012856:	f107 0308 	add.w	r3, r7, #8
 801285a:	4618      	mov	r0, r3
 801285c:	f002 f912 	bl	8014a84 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012860:	bf00      	nop
 8012862:	3710      	adds	r7, #16
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}

08012868 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b084      	sub	sp, #16
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
 8012870:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00b      	beq.n	8012896 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	330c      	adds	r3, #12
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	4798      	blx	r3
 801288a:	4602      	mov	r2, r0
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	4293      	cmp	r3, r2
 8012890:	d001      	beq.n	8012896 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012892:	2301      	movs	r3, #1
 8012894:	e000      	b.n	8012898 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8012896:	2300      	movs	r3, #0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d007      	beq.n	80128ac <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	330c      	adds	r3, #12
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	4798      	blx	r3
 80128a8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80128aa:	e7e5      	b.n	8012878 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80128ac:	68fb      	ldr	r3, [r7, #12]
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80128b6:	b590      	push	{r4, r7, lr}
 80128b8:	b087      	sub	sp, #28
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]
 80128be:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	617b      	str	r3, [r7, #20]
    while (current) {
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d01e      	beq.n	801290a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80128cc:	f107 030c 	add.w	r3, r7, #12
 80128d0:	6979      	ldr	r1, [r7, #20]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f000 fd4e 	bl	8013374 <_ZNK10UtestShell7getNameEv>
 80128d8:	f107 030c 	add.w	r3, r7, #12
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fa ff11 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80128e4:	4603      	mov	r3, r0
 80128e6:	461c      	mov	r4, r3
 80128e8:	f107 030c 	add.w	r3, r7, #12
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fa fefe 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80128f2:	2c00      	cmp	r4, #0
 80128f4:	d001      	beq.n	80128fa <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	e008      	b.n	801290c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	330c      	adds	r3, #12
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	6978      	ldr	r0, [r7, #20]
 8012904:	4798      	blx	r3
 8012906:	6178      	str	r0, [r7, #20]
    while (current) {
 8012908:	e7dd      	b.n	80128c6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	371c      	adds	r7, #28
 8012910:	46bd      	mov	sp, r7
 8012912:	bd90      	pop	{r4, r7, pc}

08012914 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8012914:	b590      	push	{r4, r7, lr}
 8012916:	b087      	sub	sp, #28
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	617b      	str	r3, [r7, #20]
    while (current) {
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d01e      	beq.n	8012968 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801292a:	f107 030c 	add.w	r3, r7, #12
 801292e:	6979      	ldr	r1, [r7, #20]
 8012930:	4618      	mov	r0, r3
 8012932:	f000 fd2e 	bl	8013392 <_ZNK10UtestShell8getGroupEv>
 8012936:	f107 030c 	add.w	r3, r7, #12
 801293a:	6839      	ldr	r1, [r7, #0]
 801293c:	4618      	mov	r0, r3
 801293e:	f7fa fee2 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8012942:	4603      	mov	r3, r0
 8012944:	461c      	mov	r4, r3
 8012946:	f107 030c 	add.w	r3, r7, #12
 801294a:	4618      	mov	r0, r3
 801294c:	f7fa fecf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8012950:	2c00      	cmp	r4, #0
 8012952:	d001      	beq.n	8012958 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	e008      	b.n	801296a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	330c      	adds	r3, #12
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6978      	ldr	r0, [r7, #20]
 8012962:	4798      	blx	r3
 8012964:	6178      	str	r0, [r7, #20]
    while (current) {
 8012966:	e7dd      	b.n	8012924 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	371c      	adds	r7, #28
 801296e:	46bd      	mov	sp, r7
 8012970:	bd90      	pop	{r4, r7, pc}
	...

08012974 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
 801297c:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 801297e:	4a18      	ldr	r2, [pc, #96]	; (80129e0 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	601a      	str	r2, [r3, #0]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	605a      	str	r2, [r3, #4]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2200      	movs	r2, #0
 801298e:	609a      	str	r2, [r3, #8]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2200      	movs	r2, #0
 8012994:	60da      	str	r2, [r3, #12]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2200      	movs	r2, #0
 801299a:	611a      	str	r2, [r3, #16]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2200      	movs	r2, #0
 80129a0:	615a      	str	r2, [r3, #20]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	619a      	str	r2, [r3, #24]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	61da      	str	r2, [r3, #28]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	621a      	str	r2, [r3, #32]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	625a      	str	r2, [r3, #36]	; 0x24
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	629a      	str	r2, [r3, #40]	; 0x28
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2200      	movs	r2, #0
 80129ca:	631a      	str	r2, [r3, #48]	; 0x30
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr
 80129e0:	08028cc0 	.word	0x08028cc0

080129e4 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	4a04      	ldr	r2, [pc, #16]	; (8012a00 <_ZN10TestResultD1Ev+0x1c>)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	601a      	str	r2, [r3, #0]
{
}
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4618      	mov	r0, r3
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr
 8012a00:	08028cc0 	.word	0x08028cc0

08012a04 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
}
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff ffe9 	bl	80129e4 <_ZN10TestResultD1Ev>
 8012a12:	2138      	movs	r1, #56	; 0x38
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7f7 ff03 	bl	800a820 <_ZdlPvj>
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	685b      	ldr	r3, [r3, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	3318      	adds	r3, #24
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	6839      	ldr	r1, [r7, #0]
 8012a3e:	4610      	mov	r0, r2
 8012a40:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012a42:	4b05      	ldr	r3, [pc, #20]	; (8012a58 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	4798      	blx	r3
 8012a48:	4603      	mov	r3, r0
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	200000a8 	.word	0x200000a8

08012a5c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8012a66:	4b0c      	ldr	r3, [pc, #48]	; (8012a98 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	4798      	blx	r3
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	461a      	mov	r2, r3
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a74:	1ad2      	subs	r2, r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	685a      	ldr	r2, [r3, #4]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	331c      	adds	r3, #28
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	6879      	ldr	r1, [r7, #4]
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	4798      	blx	r3
}
 8012a8e:	bf00      	nop
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	200000a8 	.word	0x200000a8

08012a9c <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	685a      	ldr	r2, [r3, #4]
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3310      	adds	r3, #16
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	6839      	ldr	r1, [r7, #0]
 8012ab6:	4610      	mov	r0, r2
 8012ab8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012aba:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4798      	blx	r3
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012ac8:	bf00      	nop
 8012aca:	3708      	adds	r7, #8
 8012acc:	46bd      	mov	sp, r7
 8012ace:	bd80      	pop	{r7, pc}
 8012ad0:	200000a8 	.word	0x200000a8

08012ad4 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	685a      	ldr	r2, [r3, #4]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	332c      	adds	r3, #44	; 0x2c
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	4610      	mov	r0, r2
 8012af0:	4798      	blx	r3
}
 8012af2:	bf00      	nop
 8012af4:	3708      	adds	r7, #8
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b082      	sub	sp, #8
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	685a      	ldr	r2, [r3, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	3348      	adds	r3, #72	; 0x48
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	6839      	ldr	r1, [r7, #0]
 8012b14:	4610      	mov	r0, r2
 8012b16:	4798      	blx	r3
}
 8012b18:	bf00      	nop
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8012b2a:	4b0c      	ldr	r3, [pc, #48]	; (8012b5c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	4798      	blx	r3
 8012b30:	4603      	mov	r3, r0
 8012b32:	461a      	mov	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b38:	1ad2      	subs	r2, r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	685a      	ldr	r2, [r3, #4]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3314      	adds	r3, #20
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	6879      	ldr	r1, [r7, #4]
 8012b4e:	4610      	mov	r0, r2
 8012b50:	4798      	blx	r3

}
 8012b52:	bf00      	nop
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	200000a8 	.word	0x200000a8

08012b60 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	685a      	ldr	r2, [r3, #4]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	333c      	adds	r3, #60	; 0x3c
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	6839      	ldr	r1, [r7, #0]
 8012b7a:	4610      	mov	r0, r2
 8012b7c:	4798      	blx	r3
    failureCount_++;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	695b      	ldr	r3, [r3, #20]
 8012b82:	1c5a      	adds	r2, r3, #1
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	615a      	str	r2, [r3, #20]
}
 8012b88:	bf00      	nop
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
    testCount_++;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	689b      	ldr	r3, [r3, #8]
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	609a      	str	r2, [r3, #8]
}
 8012ba2:	bf00      	nop
 8012ba4:	370c      	adds	r7, #12
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr

08012bae <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
    runCount_++;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	1c5a      	adds	r2, r3, #1
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	60da      	str	r2, [r3, #12]
}
 8012bc0:	bf00      	nop
 8012bc2:	370c      	adds	r7, #12
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr

08012bcc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	691b      	ldr	r3, [r3, #16]
 8012bd8:	1c5a      	adds	r2, r3, #1
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	611a      	str	r2, [r3, #16]
}
 8012bde:	bf00      	nop
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8012bea:	b480      	push	{r7}
 8012bec:	b083      	sub	sp, #12
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	699b      	ldr	r3, [r3, #24]
 8012bf6:	1c5a      	adds	r2, r3, #1
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	619a      	str	r2, [r3, #24]
}
 8012bfc:	bf00      	nop
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b083      	sub	sp, #12
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	69db      	ldr	r3, [r3, #28]
 8012c14:	1c5a      	adds	r2, r3, #1
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	61da      	str	r2, [r3, #28]
}
 8012c1a:	bf00      	nop
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
	...

08012c28 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8012c30:	4b09      	ldr	r3, [pc, #36]	; (8012c58 <_ZN10TestResult12testsStartedEv+0x30>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	4798      	blx	r3
 8012c36:	4603      	mov	r3, r0
 8012c38:	461a      	mov	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	685a      	ldr	r2, [r3, #4]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3308      	adds	r3, #8
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4798      	blx	r3
}
 8012c50:	bf00      	nop
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	200000a8 	.word	0x200000a8

08012c5c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8012c64:	4b0c      	ldr	r3, [pc, #48]	; (8012c98 <_ZN10TestResult10testsEndedEv+0x3c>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4798      	blx	r3
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	1ad2      	subs	r2, r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	330c      	adds	r3, #12
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	4798      	blx	r3
}
 8012c8e:	bf00      	nop
 8012c90:	3710      	adds	r7, #16
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	200000a8 	.word	0x200000a8

08012c9c <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6a1b      	ldr	r3, [r3, #32]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8012ce4:	b590      	push	{r4, r7, lr}
 8012ce6:	b087      	sub	sp, #28
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	ed87 0b04 	vstr	d0, [r7, #16]
 8012cee:	ed87 1b02 	vstr	d1, [r7, #8]
 8012cf2:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8012cf6:	4b2c      	ldr	r3, [pc, #176]	; (8012da8 <_Z13doubles_equalddd+0xc4>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	ed97 0b04 	vldr	d0, [r7, #16]
 8012cfe:	4798      	blx	r3
 8012d00:	4603      	mov	r3, r0
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d10f      	bne.n	8012d26 <_Z13doubles_equalddd+0x42>
 8012d06:	4b28      	ldr	r3, [pc, #160]	; (8012da8 <_Z13doubles_equalddd+0xc4>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	ed97 0b02 	vldr	d0, [r7, #8]
 8012d0e:	4798      	blx	r3
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d107      	bne.n	8012d26 <_Z13doubles_equalddd+0x42>
 8012d16:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <_Z13doubles_equalddd+0xc4>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	ed97 0b00 	vldr	d0, [r7]
 8012d1e:	4798      	blx	r3
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <_Z13doubles_equalddd+0x46>
 8012d26:	2301      	movs	r3, #1
 8012d28:	e000      	b.n	8012d2c <_Z13doubles_equalddd+0x48>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d001      	beq.n	8012d34 <_Z13doubles_equalddd+0x50>
        return false;
 8012d30:	2300      	movs	r3, #0
 8012d32:	e035      	b.n	8012da0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8012d34:	4b1d      	ldr	r3, [pc, #116]	; (8012dac <_Z13doubles_equalddd+0xc8>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	ed97 0b04 	vldr	d0, [r7, #16]
 8012d3c:	4798      	blx	r3
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d009      	beq.n	8012d58 <_Z13doubles_equalddd+0x74>
 8012d44:	4b19      	ldr	r3, [pc, #100]	; (8012dac <_Z13doubles_equalddd+0xc8>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	ed97 0b02 	vldr	d0, [r7, #8]
 8012d4c:	4798      	blx	r3
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <_Z13doubles_equalddd+0x74>
 8012d54:	2301      	movs	r3, #1
 8012d56:	e000      	b.n	8012d5a <_Z13doubles_equalddd+0x76>
 8012d58:	2300      	movs	r3, #0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d001      	beq.n	8012d62 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e01e      	b.n	8012da0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8012d62:	4b13      	ldr	r3, [pc, #76]	; (8012db0 <_Z13doubles_equalddd+0xcc>)
 8012d64:	681c      	ldr	r4, [r3, #0]
 8012d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8012d6e:	f7ed facb 	bl	8000308 <__aeabi_dsub>
 8012d72:	4602      	mov	r2, r0
 8012d74:	460b      	mov	r3, r1
 8012d76:	ec43 2b17 	vmov	d7, r2, r3
 8012d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8012d7e:	eef0 0a67 	vmov.f32	s1, s15
 8012d82:	47a0      	blx	r4
 8012d84:	ec53 2b10 	vmov	r2, r3, d0
 8012d88:	2101      	movs	r1, #1
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012d90:	f7ed fce6 	bl	8000760 <__aeabi_dcmpge>
 8012d94:	4603      	mov	r3, r0
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d101      	bne.n	8012d9e <_Z13doubles_equalddd+0xba>
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	461c      	mov	r4, r3
 8012d9e:	b2e3      	uxtb	r3, r4
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	371c      	adds	r7, #28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd90      	pop	{r4, r7, pc}
 8012da8:	200000e8 	.word	0x200000e8
 8012dac:	200000ec 	.word	0x200000ec
 8012db0:	200000dc 	.word	0x200000dc

08012db4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	332c      	adds	r3, #44	; 0x2c
    }
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
    {
 8012dd4:	4a0a      	ldr	r2, [pc, #40]	; (8012e00 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	332c      	adds	r3, #44	; 0x2c
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7ff fe00 	bl	80129e4 <_ZN10TestResultD1Ev>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	331c      	adds	r3, #28
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7f6 f815 	bl	8008e18 <_ZN17ConsoleTestOutputD1Ev>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	4618      	mov	r0, r3
 8012df2:	f000 f943 	bl	801307c <_ZN10UtestShellD1Ev>
    }
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	08028d08 	.word	0x08028d08

08012e04 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
    }
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7ff ffdd 	bl	8012dcc <_ZN22OutsideTestRunnerUTestD1Ev>
 8012e12:	2164      	movs	r1, #100	; 0x64
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f7f7 fd03 	bl	800a820 <_ZdlPvj>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3708      	adds	r7, #8
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af02      	add	r7, sp, #8
 8012e2a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	2300      	movs	r3, #0
 8012e30:	9300      	str	r3, [sp, #0]
 8012e32:	4b0d      	ldr	r3, [pc, #52]	; (8012e68 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8012e34:	4a0d      	ldr	r2, [pc, #52]	; (8012e6c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8012e36:	490e      	ldr	r1, [pc, #56]	; (8012e70 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8012e38:	f000 f8f8 	bl	801302c <_ZN10UtestShellC1EPKcS1_S1_j>
 8012e3c:	4a0d      	ldr	r2, [pc, #52]	; (8012e74 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	601a      	str	r2, [r3, #0]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	331c      	adds	r3, #28
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7f5 ffd4 	bl	8008df4 <_ZN17ConsoleTestOutputC1Ev>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	331c      	adds	r3, #28
 8012e56:	4619      	mov	r1, r3
 8012e58:	4610      	mov	r0, r2
 8012e5a:	f7ff fd8b 	bl	8012974 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4618      	mov	r0, r3
 8012e62:	3708      	adds	r7, #8
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	080252dc 	.word	0x080252dc
 8012e6c:	080252ec 	.word	0x080252ec
 8012e70:	0802532c 	.word	0x0802532c
 8012e74:	08028d08 	.word	0x08028d08

08012e78 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	4801      	ldr	r0, [pc, #4]	; (8012e84 <__tcf_0+0xc>)
 8012e7e:	f7ff ffa5 	bl	8012dcc <_ZN22OutsideTestRunnerUTestD1Ev>
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	20000ab4 	.word	0x20000ab4

08012e88 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8012e8c:	4b12      	ldr	r3, [pc, #72]	; (8012ed8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	f3bf 8f5b 	dmb	ish
 8012e94:	b2db      	uxtb	r3, r3
 8012e96:	f003 0301 	and.w	r3, r3, #1
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	bf0c      	ite	eq
 8012e9e:	2301      	moveq	r3, #1
 8012ea0:	2300      	movne	r3, #0
 8012ea2:	b2db      	uxtb	r3, r3
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d013      	beq.n	8012ed0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012ea8:	480b      	ldr	r0, [pc, #44]	; (8012ed8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012eaa:	f00c ff29 	bl	801fd00 <__cxa_guard_acquire>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	bf14      	ite	ne
 8012eb4:	2301      	movne	r3, #1
 8012eb6:	2300      	moveq	r3, #0
 8012eb8:	b2db      	uxtb	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d008      	beq.n	8012ed0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8012ebe:	4807      	ldr	r0, [pc, #28]	; (8012edc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8012ec0:	f7ff ffb0 	bl	8012e24 <_ZN22OutsideTestRunnerUTestC1Ev>
 8012ec4:	4804      	ldr	r0, [pc, #16]	; (8012ed8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8012ec6:	f00c ff27 	bl	801fd18 <__cxa_guard_release>
 8012eca:	4805      	ldr	r0, [pc, #20]	; (8012ee0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8012ecc:	f00c ff4b 	bl	801fd66 <atexit>
    return instance_;
 8012ed0:	4b02      	ldr	r3, [pc, #8]	; (8012edc <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	20000b18 	.word	0x20000b18
 8012edc:	20000ab4 	.word	0x20000ab4
 8012ee0:	08012e79 	.word	0x08012e79

08012ee4 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b082      	sub	sp, #8
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	330c      	adds	r3, #12
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	4798      	blx	r3
    }
 8012ef8:	bf00      	nop
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	3314      	adds	r3, #20
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	4798      	blx	r3
    }
 8012f14:	bf00      	nop
 8012f16:	3708      	adds	r7, #8
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	3310      	adds	r3, #16
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	4798      	blx	r3
    }
 8012f30:	bf00      	nop
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8012f38:	b480      	push	{r7}
 8012f3a:	b085      	sub	sp, #20
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
 8012f44:	603b      	str	r3, [r7, #0]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	68ba      	ldr	r2, [r7, #8]
 8012f4a:	601a      	str	r2, [r3, #0]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	605a      	str	r2, [r3, #4]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	683a      	ldr	r2, [r7, #0]
 8012f56:	609a      	str	r2, [r3, #8]
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3714      	adds	r7, #20
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b086      	sub	sp, #24
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	3394      	adds	r3, #148	; 0x94
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	68ba      	ldr	r2, [r7, #8]
 8012f8e:	68f9      	ldr	r1, [r7, #12]
 8012f90:	6938      	ldr	r0, [r7, #16]
 8012f92:	4798      	blx	r3
    }
 8012f94:	bf00      	nop
 8012f96:	3718      	adds	r7, #24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b086      	sub	sp, #24
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8012fba:	4b05      	ldr	r3, [pc, #20]	; (8012fd0 <helperDoRunOneTestSeperateProcess+0x34>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	68ba      	ldr	r2, [r7, #8]
 8012fc0:	68f9      	ldr	r1, [r7, #12]
 8012fc2:	6938      	ldr	r0, [r7, #16]
 8012fc4:	4798      	blx	r3
    }
 8012fc6:	bf00      	nop
 8012fc8:	3718      	adds	r7, #24
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	2000009c 	.word	0x2000009c

08012fd4 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8012fdc:	4a0f      	ldr	r2, [pc, #60]	; (801301c <_ZN10UtestShellC1Ev+0x48>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	601a      	str	r2, [r3, #0]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4a0e      	ldr	r2, [pc, #56]	; (8013020 <_ZN10UtestShellC1Ev+0x4c>)
 8012fe6:	605a      	str	r2, [r3, #4]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4a0e      	ldr	r2, [pc, #56]	; (8013024 <_ZN10UtestShellC1Ev+0x50>)
 8012fec:	609a      	str	r2, [r3, #8]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4a0d      	ldr	r2, [pc, #52]	; (8013028 <_ZN10UtestShellC1Ev+0x54>)
 8012ff2:	60da      	str	r2, [r3, #12]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	611a      	str	r2, [r3, #16]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	615a      	str	r2, [r3, #20]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2200      	movs	r2, #0
 8013004:	761a      	strb	r2, [r3, #24]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2200      	movs	r2, #0
 801300a:	765a      	strb	r2, [r3, #25]
{
}
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	4618      	mov	r0, r3
 8013010:	370c      	adds	r7, #12
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	08028dc8 	.word	0x08028dc8
 8013020:	08025378 	.word	0x08025378
 8013024:	0802538c 	.word	0x0802538c
 8013028:	0802539c 	.word	0x0802539c

0801302c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
 8013038:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801303a:	4a0f      	ldr	r2, [pc, #60]	; (8013078 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	601a      	str	r2, [r3, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	605a      	str	r2, [r3, #4]
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	609a      	str	r2, [r3, #8]
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	683a      	ldr	r2, [r7, #0]
 8013050:	60da      	str	r2, [r3, #12]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	69ba      	ldr	r2, [r7, #24]
 8013056:	611a      	str	r2, [r3, #16]
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2200      	movs	r2, #0
 801305c:	615a      	str	r2, [r3, #20]
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	761a      	strb	r2, [r3, #24]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2200      	movs	r2, #0
 8013068:	765a      	strb	r2, [r3, #25]
{
}
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	4618      	mov	r0, r3
 801306e:	3714      	adds	r7, #20
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr
 8013078:	08028dc8 	.word	0x08028dc8

0801307c <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	4a04      	ldr	r2, [pc, #16]	; (8013098 <_ZN10UtestShellD1Ev+0x1c>)
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	601a      	str	r2, [r3, #0]
{
}
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4618      	mov	r0, r3
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr
 8013098:	08028dc8 	.word	0x08028dc8

0801309c <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
}
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7ff ffe9 	bl	801307c <_ZN10UtestShellD1Ev>
 80130aa:	211c      	movs	r1, #28
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7f7 fbb7 	bl	800a820 <_ZdlPvj>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80130c2:	2300      	movs	r3, #0
 80130c4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	3310      	adds	r3, #16
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	4798      	blx	r3
}
 80130d2:	bf00      	nop
 80130d4:	3708      	adds	r7, #8
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
	...

080130dc <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80130e0:	4b02      	ldr	r3, [pc, #8]	; (80130ec <_ZN10UtestShell5crashEv+0x10>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4798      	blx	r3
}
 80130e6:	bf00      	nop
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	20000098 	.word	0x20000098

080130f0 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b088      	sub	sp, #32
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	2200      	movs	r2, #0
 8013100:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	3324      	adds	r3, #36	; 0x24
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801310e:	f107 0014 	add.w	r0, r7, #20
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	68ba      	ldr	r2, [r7, #8]
 8013116:	68f9      	ldr	r1, [r7, #12]
 8013118:	f7ff ff0e 	bl	8012f38 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	337c      	adds	r3, #124	; 0x7c
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	68f8      	ldr	r0, [r7, #12]
 8013126:	4798      	blx	r3
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d007      	beq.n	801313e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801312e:	4b09      	ldr	r3, [pc, #36]	; (8013154 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f107 0214 	add.w	r2, r7, #20
 8013136:	4611      	mov	r1, r2
 8013138:	4807      	ldr	r0, [pc, #28]	; (8013158 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801313a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 801313c:	e006      	b.n	801314c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801313e:	4b05      	ldr	r3, [pc, #20]	; (8013154 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f107 0214 	add.w	r2, r7, #20
 8013146:	4611      	mov	r1, r2
 8013148:	4804      	ldr	r0, [pc, #16]	; (801315c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801314a:	4798      	blx	r3
}
 801314c:	bf00      	nop
 801314e:	3720      	adds	r7, #32
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	200000a4 	.word	0x200000a4
 8013158:	08012f9d 	.word	0x08012f9d
 801315c:	08012f67 	.word	0x08012f67

08013160 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8013160:	b590      	push	{r4, r7, lr}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
    return new Utest();
 8013168:	22d3      	movs	r2, #211	; 0xd3
 801316a:	4906      	ldr	r1, [pc, #24]	; (8013184 <_ZN10UtestShell10createTestEv+0x24>)
 801316c:	2004      	movs	r0, #4
 801316e:	f7f7 fb43 	bl	800a7f8 <_ZnwjPKci>
 8013172:	4604      	mov	r4, r0
 8013174:	4620      	mov	r0, r4
 8013176:	f001 fb0f 	bl	8014798 <_ZN5UtestC1Ev>
 801317a:	4623      	mov	r3, r4
}
 801317c:	4618      	mov	r0, r3
 801317e:	370c      	adds	r7, #12
 8013180:	46bd      	mov	sp, r7
 8013182:	bd90      	pop	{r4, r7, pc}
 8013184:	080253ac 	.word	0x080253ac

08013188 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
    delete test;
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d004      	beq.n	80131a2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	3204      	adds	r2, #4
 801319c:	6812      	ldr	r2, [r2, #0]
 801319e:	4618      	mov	r0, r3
 80131a0:	4790      	blx	r2
}
 80131a2:	bf00      	nop
 80131a4:	3708      	adds	r7, #8
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
	...

080131ac <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b088      	sub	sp, #32
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	333c      	adds	r3, #60	; 0x3c
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4940      	ldr	r1, [pc, #256]	; (80132c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	3314      	adds	r3, #20
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	687a      	ldr	r2, [r7, #4]
 80131d0:	68f9      	ldr	r1, [r7, #12]
 80131d2:	68b8      	ldr	r0, [r7, #8]
 80131d4:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	333c      	adds	r3, #60	; 0x3c
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	493a      	ldr	r1, [pc, #232]	; (80132c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80131e4:	f001 faae 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80131e8:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f001 fa90 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80131f0:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 80131f2:	6879      	ldr	r1, [r7, #4]
 80131f4:	68f8      	ldr	r0, [r7, #12]
 80131f6:	f001 fa6b 	bl	80146d0 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 80131fa:	68f9      	ldr	r1, [r7, #12]
 80131fc:	68f8      	ldr	r0, [r7, #12]
 80131fe:	f001 fa77 	bl	80146f0 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	333c      	adds	r3, #60	; 0x3c
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4930      	ldr	r1, [pc, #192]	; (80132cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	3388      	adds	r3, #136	; 0x88
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	4798      	blx	r3
 801321c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	333c      	adds	r3, #60	; 0x3c
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	492a      	ldr	r1, [pc, #168]	; (80132d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	333c      	adds	r3, #60	; 0x3c
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	4927      	ldr	r1, [pc, #156]	; (80132d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	4798      	blx	r3
    testToRun->run();
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	3308      	adds	r3, #8
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	6978      	ldr	r0, [r7, #20]
 8013244:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	333c      	adds	r3, #60	; 0x3c
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	4922      	ldr	r1, [pc, #136]	; (80132d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8013254:	69f9      	ldr	r1, [r7, #28]
 8013256:	68f8      	ldr	r0, [r7, #12]
 8013258:	f001 fa4a 	bl	80146f0 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 801325c:	69b9      	ldr	r1, [r7, #24]
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f001 fa36 	bl	80146d0 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	333c      	adds	r3, #60	; 0x3c
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	491b      	ldr	r1, [pc, #108]	; (80132dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	4798      	blx	r3
    destroyTest(testToRun);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	338c      	adds	r3, #140	; 0x8c
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	6979      	ldr	r1, [r7, #20]
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	333c      	adds	r3, #60	; 0x3c
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4915      	ldr	r1, [pc, #84]	; (80132e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	333c      	adds	r3, #60	; 0x3c
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	4913      	ldr	r1, [pc, #76]	; (80132e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	3318      	adds	r3, #24
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	68f9      	ldr	r1, [r7, #12]
 80132a8:	68b8      	ldr	r0, [r7, #8]
 80132aa:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	333c      	adds	r3, #60	; 0x3c
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	490c      	ldr	r1, [pc, #48]	; (80132e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	4798      	blx	r3
}
 80132ba:	bf00      	nop
 80132bc:	3720      	adds	r7, #32
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	080253c0 	.word	0x080253c0
 80132c8:	080253e4 	.word	0x080253e4
 80132cc:	08025404 	.word	0x08025404
 80132d0:	08025420 	.word	0x08025420
 80132d4:	0802543c 	.word	0x0802543c
 80132d8:	08025458 	.word	0x08025458
 80132dc:	08025470 	.word	0x08025470
 80132e0:	0802548c 	.word	0x0802548c
 80132e4:	080254a8 	.word	0x080254a8
 80132e8:	080254cc 	.word	0x080254cc

080132ec <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
    return next_;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	695b      	ldr	r3, [r3, #20]
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
    next_ = test;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	615a      	str	r2, [r3, #20]
    return this;
 8013314:	687b      	ldr	r3, [r7, #4]
}
 8013316:	4618      	mov	r0, r3
 8013318:	370c      	adds	r7, #12
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr

08013322 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b082      	sub	sp, #8
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	695b      	ldr	r3, [r3, #20]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00b      	beq.n	801334a <_ZN10UtestShell10countTestsEv+0x28>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	695a      	ldr	r2, [r3, #20]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	695b      	ldr	r3, [r3, #20]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	3310      	adds	r3, #16
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4610      	mov	r0, r2
 8013342:	4798      	blx	r3
 8013344:	4603      	mov	r3, r0
 8013346:	3301      	adds	r3, #1
 8013348:	e000      	b.n	801334c <_ZN10UtestShell10countTestsEv+0x2a>
 801334a:	2301      	movs	r3, #1
}
 801334c:	4618      	mov	r0, r3
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	6039      	str	r1, [r7, #0]
    return "TEST";
 801335e:	4904      	ldr	r1, [pc, #16]	; (8013370 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7f9 fe0c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	080254f0 	.word	0x080254f0

08013374 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	4619      	mov	r1, r3
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7f9 fdfa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	3708      	adds	r7, #8
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b082      	sub	sp, #8
 8013396:	af00      	add	r7, sp, #0
 8013398:	6078      	str	r0, [r7, #4]
 801339a:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	4619      	mov	r1, r3
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f7f9 fdeb 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	33a0      	adds	r3, #160	; 0xa0
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	4610      	mov	r0, r2
 80133c8:	4798      	blx	r3
    formattedName += "(";
 80133ca:	490e      	ldr	r1, [pc, #56]	; (8013404 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f7fa fa1d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	4619      	mov	r1, r3
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7fa fa17 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80133de:	490a      	ldr	r1, [pc, #40]	; (8013408 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7fa fa13 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	689b      	ldr	r3, [r3, #8]
 80133ea:	4619      	mov	r1, r3
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7fa fa0d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80133f2:	4906      	ldr	r1, [pc, #24]	; (801340c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f7fa fa09 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 80133fa:	bf00      	nop
}
 80133fc:	6878      	ldr	r0, [r7, #4]
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	080254f8 	.word	0x080254f8
 8013408:	080254fc 	.word	0x080254fc
 801340c:	08025500 	.word	0x08025500

08013410 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	7e5b      	ldrb	r3, [r3, #25]
}
 801341c:	4618      	mov	r0, r3
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr

08013428 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f001 f96d 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013436:	4603      	mov	r3, r0
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	3228      	adds	r2, #40	; 0x28
 801343c:	6812      	ldr	r2, [r2, #0]
 801343e:	4618      	mov	r0, r3
 8013440:	4790      	blx	r2
}
 8013442:	bf00      	nop
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801344a:	b480      	push	{r7}
 801344c:	b083      	sub	sp, #12
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
    return true;
 8013452:	2301      	movs	r3, #1
}
 8013454:	4618      	mov	r0, r3
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	7e1b      	ldrb	r3, [r3, #24]
}
 801346c:	4618      	mov	r0, r3
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2201      	movs	r2, #1
 8013484:	761a      	strb	r2, [r3, #24]
}
 8013486:	bf00      	nop
 8013488:	370c      	adds	r7, #12
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr

08013492 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8013492:	b480      	push	{r7}
 8013494:	b083      	sub	sp, #12
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]

}
 801349a:	bf00      	nop
 801349c:	370c      	adds	r7, #12
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr

080134a6 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80134a6:	b480      	push	{r7}
 80134a8:	b083      	sub	sp, #12
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	60da      	str	r2, [r3, #12]
}
 80134b6:	bf00      	nop
 80134b8:	370c      	adds	r7, #12
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr

080134c2 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80134c2:	b480      	push	{r7}
 80134c4:	b083      	sub	sp, #12
 80134c6:	af00      	add	r7, sp, #0
 80134c8:	6078      	str	r0, [r7, #4]
 80134ca:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	611a      	str	r2, [r3, #16]
}
 80134d2:	bf00      	nop
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr

080134de <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
 80134e6:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	605a      	str	r2, [r3, #4]
}
 80134ee:	bf00      	nop
 80134f0:	370c      	adds	r7, #12
 80134f2:	46bd      	mov	sp, r7
 80134f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f8:	4770      	bx	lr

080134fa <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 80134fa:	b480      	push	{r7}
 80134fc:	b083      	sub	sp, #12
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
 8013502:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	683a      	ldr	r2, [r7, #0]
 8013508:	609a      	str	r2, [r3, #8]
}
 801350a:	bf00      	nop
 801350c:	370c      	adds	r7, #12
 801350e:	46bd      	mov	sp, r7
 8013510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013514:	4770      	bx	lr

08013516 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8013516:	b580      	push	{r7, lr}
 8013518:	b082      	sub	sp, #8
 801351a:	af00      	add	r7, sp, #0
 801351c:	6078      	str	r0, [r7, #4]
 801351e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	4619      	mov	r1, r3
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f7f9 fd29 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8013534:	b480      	push	{r7}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	691b      	ldr	r3, [r3, #16]
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 801354c:	b590      	push	{r4, r7, lr}
 801354e:	b087      	sub	sp, #28
 8013550:	af00      	add	r7, sp, #0
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801355e:	2301      	movs	r3, #1
 8013560:	e01f      	b.n	80135a2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d01b      	beq.n	80135a0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8013568:	f107 0310 	add.w	r3, r7, #16
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	4618      	mov	r0, r3
 8013570:	f7f9 fd05 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013574:	f107 0310 	add.w	r3, r7, #16
 8013578:	4619      	mov	r1, r3
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f00c fb93 	bl	801fca6 <_ZNK10TestFilter5matchERK12SimpleString>
 8013580:	4603      	mov	r3, r0
 8013582:	461c      	mov	r4, r3
 8013584:	f107 0310 	add.w	r3, r7, #16
 8013588:	4618      	mov	r0, r3
 801358a:	f7fa f8b0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801358e:	2c00      	cmp	r4, #0
 8013590:	d001      	beq.n	8013596 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8013592:	2301      	movs	r3, #1
 8013594:	e005      	b.n	80135a2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f00c fb5f 	bl	801fc5a <_ZNK10TestFilter7getNextEv>
 801359c:	6078      	str	r0, [r7, #4]
 801359e:	e7e0      	b.n	8013562 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80135a0:	2300      	movs	r3, #0
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	371c      	adds	r7, #28
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd90      	pop	{r4, r7, pc}

080135aa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b084      	sub	sp, #16
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	60f8      	str	r0, [r7, #12]
 80135b2:	60b9      	str	r1, [r7, #8]
 80135b4:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	4619      	mov	r1, r3
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f7ff ffc4 	bl	801354c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80135c4:	4603      	mov	r3, r0
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00b      	beq.n	80135e2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	4619      	mov	r1, r3
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f7ff ffba 	bl	801354c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d001      	beq.n	80135e2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80135de:	2301      	movs	r3, #1
 80135e0:	e000      	b.n	80135e4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80135e2:	2300      	movs	r3, #0
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}

080135ec <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80135ec:	b590      	push	{r4, r7, lr}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	339c      	adds	r3, #156	; 0x9c
 80135fc:	681c      	ldr	r4, [r3, #0]
 80135fe:	f001 f8b1 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8013602:	4603      	mov	r3, r0
 8013604:	461a      	mov	r2, r3
 8013606:	6839      	ldr	r1, [r7, #0]
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 801360c:	bf00      	nop
 801360e:	370c      	adds	r7, #12
 8013610:	46bd      	mov	sp, r7
 8013612:	bd90      	pop	{r4, r7, pc}

08013614 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2201      	movs	r2, #1
 8013624:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8013626:	68f8      	ldr	r0, [r7, #12]
 8013628:	f001 f872 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 801362c:	4603      	mov	r3, r0
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	3234      	adds	r2, #52	; 0x34
 8013632:	6812      	ldr	r2, [r2, #0]
 8013634:	68b9      	ldr	r1, [r7, #8]
 8013636:	4618      	mov	r0, r3
 8013638:	4790      	blx	r2
    terminator.exitCurrentTest();
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013644:	bf00      	nop
 8013646:	3710      	adds	r7, #16
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
 8013654:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	6838      	ldr	r0, [r7, #0]
 801365e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013668:	b590      	push	{r4, r7, lr}
 801366a:	b09d      	sub	sp, #116	; 0x74
 801366c:	af04      	add	r7, sp, #16
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	607a      	str	r2, [r7, #4]
 8013672:	603b      	str	r3, [r7, #0]
 8013674:	460b      	mov	r3, r1
 8013676:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f001 f849 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 801367e:	4603      	mov	r3, r0
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	3228      	adds	r2, #40	; 0x28
 8013684:	6812      	ldr	r2, [r2, #0]
 8013686:	4618      	mov	r0, r3
 8013688:	4790      	blx	r2
    if (!condition)
 801368a:	7afb      	ldrb	r3, [r7, #11]
 801368c:	f083 0301 	eor.w	r3, r3, #1
 8013690:	b2db      	uxtb	r3, r3
 8013692:	2b00      	cmp	r3, #0
 8013694:	d03f      	beq.n	8013716 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	339c      	adds	r3, #156	; 0x9c
 801369c:	681c      	ldr	r4, [r3, #0]
 801369e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7f9 fc6a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80136aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136ae:	6839      	ldr	r1, [r7, #0]
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f9 fc64 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80136b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f9 fc5e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80136c2:	f107 0014 	add.w	r0, r7, #20
 80136c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136ca:	9302      	str	r3, [sp, #8]
 80136cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80136d0:	9301      	str	r3, [sp, #4]
 80136d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80136d6:	9300      	str	r3, [sp, #0]
 80136d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80136dc:	68f9      	ldr	r1, [r7, #12]
 80136de:	f7fb ff6b 	bl	800f5b8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80136e2:	f107 0314 	add.w	r3, r7, #20
 80136e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80136e8:	4619      	mov	r1, r3
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	47a0      	blx	r4
 80136ee:	f107 0314 	add.w	r3, r7, #20
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7fc fdce 	bl	8010294 <_ZN12CheckFailureD1Ev>
 80136f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7f9 fff6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013702:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013706:	4618      	mov	r0, r3
 8013708:	f7f9 fff1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801370c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013710:	4618      	mov	r0, r3
 8013712:	f7f9 ffec 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8013716:	bf00      	nop
 8013718:	3764      	adds	r7, #100	; 0x64
 801371a:	46bd      	mov	sp, r7
 801371c:	bd90      	pop	{r4, r7, pc}

0801371e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801371e:	b590      	push	{r4, r7, lr}
 8013720:	b097      	sub	sp, #92	; 0x5c
 8013722:	af02      	add	r7, sp, #8
 8013724:	60f8      	str	r0, [r7, #12]
 8013726:	60b9      	str	r1, [r7, #8]
 8013728:	607a      	str	r2, [r7, #4]
 801372a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f000 ffef 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013732:	4603      	mov	r3, r0
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	3228      	adds	r2, #40	; 0x28
 8013738:	6812      	ldr	r2, [r2, #0]
 801373a:	4618      	mov	r0, r3
 801373c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	339c      	adds	r3, #156	; 0x9c
 8013744:	681c      	ldr	r4, [r3, #0]
 8013746:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801374a:	68b9      	ldr	r1, [r7, #8]
 801374c:	4618      	mov	r0, r3
 801374e:	f7f9 fc16 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013752:	f107 0014 	add.w	r0, r7, #20
 8013756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	68f9      	ldr	r1, [r7, #12]
 8013762:	f7fb ff71 	bl	800f648 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8013766:	f107 0314 	add.w	r3, r7, #20
 801376a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801376c:	4619      	mov	r1, r3
 801376e:	68f8      	ldr	r0, [r7, #12]
 8013770:	47a0      	blx	r4
 8013772:	f107 0314 	add.w	r3, r7, #20
 8013776:	4618      	mov	r0, r3
 8013778:	f7f7 fc16 	bl	800afa8 <_ZN11FailFailureD1Ev>
 801377c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013780:	4618      	mov	r0, r3
 8013782:	f7f9 ffb4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8013786:	bf00      	nop
 8013788:	3754      	adds	r7, #84	; 0x54
 801378a:	46bd      	mov	sp, r7
 801378c:	bd90      	pop	{r4, r7, pc}

0801378e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801378e:	b590      	push	{r4, r7, lr}
 8013790:	b0a7      	sub	sp, #156	; 0x9c
 8013792:	af04      	add	r7, sp, #16
 8013794:	60f8      	str	r0, [r7, #12]
 8013796:	60b9      	str	r1, [r7, #8]
 8013798:	607a      	str	r2, [r7, #4]
 801379a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801379c:	68f8      	ldr	r0, [r7, #12]
 801379e:	f000 ffb7 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80137a2:	4603      	mov	r3, r0
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	3228      	adds	r2, #40	; 0x28
 80137a8:	6812      	ldr	r2, [r2, #0]
 80137aa:	4618      	mov	r0, r3
 80137ac:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d102      	bne.n	80137ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d068      	beq.n	801388c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d002      	beq.n	80137c6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d12a      	bne.n	801381c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	339c      	adds	r3, #156	; 0x9c
 80137cc:	681c      	ldr	r4, [r3, #0]
 80137ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7f9 fbd2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80137da:	f107 0010 	add.w	r0, r7, #16
 80137de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80137e2:	9302      	str	r3, [sp, #8]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	9301      	str	r3, [sp, #4]
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80137f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80137f4:	68f9      	ldr	r1, [r7, #12]
 80137f6:	f7fc f9ad 	bl	800fb54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80137fa:	f107 0310 	add.w	r3, r7, #16
 80137fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013802:	4619      	mov	r1, r3
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	47a0      	blx	r4
 8013808:	f107 0310 	add.w	r3, r7, #16
 801380c:	4618      	mov	r0, r3
 801380e:	f7fc fcb9 	bl	8010184 <_ZN18StringEqualFailureD1Ev>
 8013812:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013816:	4618      	mov	r0, r3
 8013818:	f7f9 ff69 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 801381c:	6879      	ldr	r1, [r7, #4]
 801381e:	68b8      	ldr	r0, [r7, #8]
 8013820:	f7f9 f9ea 	bl	800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	bf14      	ite	ne
 801382a:	2301      	movne	r3, #1
 801382c:	2300      	moveq	r3, #0
 801382e:	b2db      	uxtb	r3, r3
 8013830:	2b00      	cmp	r3, #0
 8013832:	d02c      	beq.n	801388e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	339c      	adds	r3, #156	; 0x9c
 801383a:	681c      	ldr	r4, [r3, #0]
 801383c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013840:	6839      	ldr	r1, [r7, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	f7f9 fb9b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013848:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801384c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013850:	9302      	str	r3, [sp, #8]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	9301      	str	r3, [sp, #4]
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801385e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013862:	68f9      	ldr	r1, [r7, #12]
 8013864:	f7fc f976 	bl	800fb54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801386c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013870:	4619      	mov	r1, r3
 8013872:	68f8      	ldr	r0, [r7, #12]
 8013874:	47a0      	blx	r4
 8013876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801387a:	4618      	mov	r0, r3
 801387c:	f7fc fc82 	bl	8010184 <_ZN18StringEqualFailureD1Ev>
 8013880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013884:	4618      	mov	r0, r3
 8013886:	f7f9 ff32 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801388a:	e000      	b.n	801388e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801388c:	bf00      	nop
}
 801388e:	378c      	adds	r7, #140	; 0x8c
 8013890:	46bd      	mov	sp, r7
 8013892:	bd90      	pop	{r4, r7, pc}

08013894 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013894:	b590      	push	{r4, r7, lr}
 8013896:	b0a7      	sub	sp, #156	; 0x9c
 8013898:	af04      	add	r7, sp, #16
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	607a      	str	r2, [r7, #4]
 80138a0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f000 ff34 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80138a8:	4603      	mov	r3, r0
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	3228      	adds	r2, #40	; 0x28
 80138ae:	6812      	ldr	r2, [r2, #0]
 80138b0:	4618      	mov	r0, r3
 80138b2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d102      	bne.n	80138c0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d06b      	beq.n	8013998 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d002      	beq.n	80138cc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d12b      	bne.n	8013924 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	339c      	adds	r3, #156	; 0x9c
 80138d2:	681c      	ldr	r4, [r3, #0]
 80138d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138d8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f9 fb4e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80138e2:	f107 0010 	add.w	r0, r7, #16
 80138e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80138ea:	9302      	str	r3, [sp, #8]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80138fc:	68f9      	ldr	r1, [r7, #12]
 80138fe:	f7fc f929 	bl	800fb54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013902:	f107 0310 	add.w	r3, r7, #16
 8013906:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801390a:	4619      	mov	r1, r3
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	47a0      	blx	r4
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	4618      	mov	r0, r3
 8013916:	f7fc fc35 	bl	8010184 <_ZN18StringEqualFailureD1Ev>
 801391a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801391e:	4618      	mov	r0, r3
 8013920:	f7f9 fee5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	6879      	ldr	r1, [r7, #4]
 8013928:	68b8      	ldr	r0, [r7, #8]
 801392a:	f7f9 f9a4 	bl	800cc76 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	bf14      	ite	ne
 8013934:	2301      	movne	r3, #1
 8013936:	2300      	moveq	r3, #0
 8013938:	b2db      	uxtb	r3, r3
 801393a:	2b00      	cmp	r3, #0
 801393c:	d02d      	beq.n	801399a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	339c      	adds	r3, #156	; 0x9c
 8013944:	681c      	ldr	r4, [r3, #0]
 8013946:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801394a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801394e:	4618      	mov	r0, r3
 8013950:	f7f9 fb15 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013954:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013958:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801395c:	9302      	str	r3, [sp, #8]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	9301      	str	r3, [sp, #4]
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801396a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801396e:	68f9      	ldr	r1, [r7, #12]
 8013970:	f7fc f8f0 	bl	800fb54 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013978:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801397c:	4619      	mov	r1, r3
 801397e:	68f8      	ldr	r0, [r7, #12]
 8013980:	47a0      	blx	r4
 8013982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013986:	4618      	mov	r0, r3
 8013988:	f7fc fbfc 	bl	8010184 <_ZN18StringEqualFailureD1Ev>
 801398c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013990:	4618      	mov	r0, r3
 8013992:	f7f9 feac 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013996:	e000      	b.n	801399a <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013998:	bf00      	nop
}
 801399a:	378c      	adds	r7, #140	; 0x8c
 801399c:	46bd      	mov	sp, r7
 801399e:	bd90      	pop	{r4, r7, pc}

080139a0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80139a0:	b590      	push	{r4, r7, lr}
 80139a2:	b0ab      	sub	sp, #172	; 0xac
 80139a4:	af04      	add	r7, sp, #16
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	607a      	str	r2, [r7, #4]
 80139ac:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f000 feae 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80139b4:	4603      	mov	r3, r0
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	3228      	adds	r2, #40	; 0x28
 80139ba:	6812      	ldr	r2, [r2, #0]
 80139bc:	4618      	mov	r0, r3
 80139be:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d102      	bne.n	80139cc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80139c6:	68bb      	ldr	r3, [r7, #8]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d07c      	beq.n	8013ac6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d002      	beq.n	80139d8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d128      	bne.n	8013a2a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	3398      	adds	r3, #152	; 0x98
 80139de:	681c      	ldr	r4, [r3, #0]
 80139e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80139e4:	6839      	ldr	r1, [r7, #0]
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7f9 fac9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80139ec:	f107 0010 	add.w	r0, r7, #16
 80139f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80139f4:	9302      	str	r3, [sp, #8]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	9301      	str	r3, [sp, #4]
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013a06:	68f9      	ldr	r1, [r7, #12]
 8013a08:	f7fc f948 	bl	800fc9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013a0c:	f107 0310 	add.w	r3, r7, #16
 8013a10:	4619      	mov	r1, r3
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	47a0      	blx	r4
 8013a16:	f107 0310 	add.w	r3, r7, #16
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fc fb90 	bl	8010140 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013a20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f9 fe62 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8013a2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a2e:	68b9      	ldr	r1, [r7, #8]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f9 faa4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013a36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a3a:	6879      	ldr	r1, [r7, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7f9 fa9e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013a42:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013a46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f9 fe75 	bl	800d73c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8013a52:	4603      	mov	r3, r0
 8013a54:	f083 0301 	eor.w	r3, r3, #1
 8013a58:	b2dc      	uxtb	r4, r3
 8013a5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7f9 fe45 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f9 fe40 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013a6e:	2c00      	cmp	r4, #0
 8013a70:	d02a      	beq.n	8013ac8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	3398      	adds	r3, #152	; 0x98
 8013a78:	681c      	ldr	r4, [r3, #0]
 8013a7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013a7e:	6839      	ldr	r1, [r7, #0]
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f9 fa7c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013a86:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8013a8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013a8e:	9302      	str	r3, [sp, #8]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	9301      	str	r3, [sp, #4]
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013a9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013aa0:	68f9      	ldr	r1, [r7, #12]
 8013aa2:	f7fc f8fb 	bl	800fc9c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013aa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013aaa:	4619      	mov	r1, r3
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	47a0      	blx	r4
 8013ab0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fc fb43 	bl	8010140 <_ZN24StringEqualNoCaseFailureD1Ev>
 8013aba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7f9 fe15 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013ac4:	e000      	b.n	8013ac8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013ac6:	bf00      	nop
}
 8013ac8:	379c      	adds	r7, #156	; 0x9c
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd90      	pop	{r4, r7, pc}

08013ace <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013ace:	b590      	push	{r4, r7, lr}
 8013ad0:	b0b3      	sub	sp, #204	; 0xcc
 8013ad2:	af04      	add	r7, sp, #16
 8013ad4:	60f8      	str	r0, [r7, #12]
 8013ad6:	60b9      	str	r1, [r7, #8]
 8013ad8:	607a      	str	r2, [r7, #4]
 8013ada:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f000 fe17 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	3228      	adds	r2, #40	; 0x28
 8013ae8:	6812      	ldr	r2, [r2, #0]
 8013aea:	4618      	mov	r0, r3
 8013aec:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d103      	bne.n	8013afc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 80ad 	beq.w	8013c56 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d002      	beq.n	8013b08 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d140      	bne.n	8013b8a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	3398      	adds	r3, #152	; 0x98
 8013b0e:	681c      	ldr	r4, [r3, #0]
 8013b10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b14:	68b9      	ldr	r1, [r7, #8]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7f9 fa31 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b20:	6879      	ldr	r1, [r7, #4]
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7f9 fa2b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013b28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013b2c:	6839      	ldr	r1, [r7, #0]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7f9 fa25 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013b34:	f107 0010 	add.w	r0, r7, #16
 8013b38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013b3c:	9302      	str	r3, [sp, #8]
 8013b3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b48:	9300      	str	r3, [sp, #0]
 8013b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013b52:	68f9      	ldr	r1, [r7, #12]
 8013b54:	f7fb fce6 	bl	800f524 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013b58:	f107 0310 	add.w	r3, r7, #16
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	47a0      	blx	r4
 8013b62:	f107 0310 	add.w	r3, r7, #16
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fc fbb6 	bl	80102d8 <_ZN15ContainsFailureD1Ev>
 8013b6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7f9 fdbc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013b76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7f9 fdb7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013b80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7f9 fdb2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8013b8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013b8e:	6879      	ldr	r1, [r7, #4]
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f9 f9f4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013b96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013b9a:	68b9      	ldr	r1, [r7, #8]
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7f9 f9ee 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013ba2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013baa:	4611      	mov	r1, r2
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f9 fa64 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	f083 0301 	eor.w	r3, r3, #1
 8013bb8:	b2dc      	uxtb	r4, r3
 8013bba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7f9 fd95 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013bc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7f9 fd90 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013bce:	2c00      	cmp	r4, #0
 8013bd0:	d042      	beq.n	8013c58 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	3398      	adds	r3, #152	; 0x98
 8013bd8:	681c      	ldr	r4, [r3, #0]
 8013bda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7f9 f9cc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013be6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013bea:	6879      	ldr	r1, [r7, #4]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7f9 f9c6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013bf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013bf6:	6839      	ldr	r1, [r7, #0]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f9 f9c0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013bfe:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013c02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c06:	9302      	str	r3, [sp, #8]
 8013c08:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013c0c:	9301      	str	r3, [sp, #4]
 8013c0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013c18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013c1c:	68f9      	ldr	r1, [r7, #12]
 8013c1e:	f7fb fc81 	bl	800f524 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013c22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013c26:	4619      	mov	r1, r3
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	47a0      	blx	r4
 8013c2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fc fb51 	bl	80102d8 <_ZN15ContainsFailureD1Ev>
 8013c36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f9 fd57 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013c40:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7f9 fd52 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013c4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f9 fd4d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013c54:	e000      	b.n	8013c58 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013c56:	bf00      	nop
}
 8013c58:	37bc      	adds	r7, #188	; 0xbc
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd90      	pop	{r4, r7, pc}

08013c5e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8013c5e:	b590      	push	{r4, r7, lr}
 8013c60:	b0b3      	sub	sp, #204	; 0xcc
 8013c62:	af04      	add	r7, sp, #16
 8013c64:	60f8      	str	r0, [r7, #12]
 8013c66:	60b9      	str	r1, [r7, #8]
 8013c68:	607a      	str	r2, [r7, #4]
 8013c6a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013c6c:	68f8      	ldr	r0, [r7, #12]
 8013c6e:	f000 fd4f 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013c72:	4603      	mov	r3, r0
 8013c74:	681a      	ldr	r2, [r3, #0]
 8013c76:	3228      	adds	r2, #40	; 0x28
 8013c78:	6812      	ldr	r2, [r2, #0]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d103      	bne.n	8013c8c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f000 80ad 	beq.w	8013de6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d002      	beq.n	8013c98 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d140      	bne.n	8013d1a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3398      	adds	r3, #152	; 0x98
 8013c9e:	681c      	ldr	r4, [r3, #0]
 8013ca0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ca4:	68b9      	ldr	r1, [r7, #8]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f7f9 f969 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013cac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013cb0:	6879      	ldr	r1, [r7, #4]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7f9 f963 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013cbc:	6839      	ldr	r1, [r7, #0]
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7f9 f95d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013cc4:	f107 0010 	add.w	r0, r7, #16
 8013cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013ccc:	9302      	str	r3, [sp, #8]
 8013cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013cd2:	9301      	str	r3, [sp, #4]
 8013cd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013ce2:	68f9      	ldr	r1, [r7, #12]
 8013ce4:	f7fb fc1e 	bl	800f524 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013ce8:	f107 0310 	add.w	r3, r7, #16
 8013cec:	4619      	mov	r1, r3
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	47a0      	blx	r4
 8013cf2:	f107 0310 	add.w	r3, r7, #16
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fc faee 	bl	80102d8 <_ZN15ContainsFailureD1Ev>
 8013cfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7f9 fcf4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013d06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7f9 fcef 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013d10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7f9 fcea 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8013d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f9 f92c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013d26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d2a:	68b9      	ldr	r1, [r7, #8]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7f9 f926 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013d32:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d3a:	4611      	mov	r1, r2
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7f9 f9b7 	bl	800d0b0 <_ZNK12SimpleString14containsNoCaseERKS_>
 8013d42:	4603      	mov	r3, r0
 8013d44:	f083 0301 	eor.w	r3, r3, #1
 8013d48:	b2dc      	uxtb	r4, r3
 8013d4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f9 fccd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013d54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7f9 fcc8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013d5e:	2c00      	cmp	r4, #0
 8013d60:	d042      	beq.n	8013de8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	3398      	adds	r3, #152	; 0x98
 8013d68:	681c      	ldr	r4, [r3, #0]
 8013d6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013d6e:	68b9      	ldr	r1, [r7, #8]
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7f9 f904 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013d76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013d7a:	6879      	ldr	r1, [r7, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7f9 f8fe 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013d82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013d86:	6839      	ldr	r1, [r7, #0]
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7f9 f8f8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013d8e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8013d92:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013d96:	9302      	str	r3, [sp, #8]
 8013d98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013d9c:	9301      	str	r3, [sp, #4]
 8013d9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013da8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013dac:	68f9      	ldr	r1, [r7, #12]
 8013dae:	f7fb fbb9 	bl	800f524 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013db2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013db6:	4619      	mov	r1, r3
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	47a0      	blx	r4
 8013dbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fc fa89 	bl	80102d8 <_ZN15ContainsFailureD1Ev>
 8013dc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7f9 fc8f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013dd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7f9 fc8a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013dda:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7f9 fc85 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013de4:	e000      	b.n	8013de8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013de6:	bf00      	nop
}
 8013de8:	37bc      	adds	r7, #188	; 0xbc
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd90      	pop	{r4, r7, pc}

08013dee <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013dee:	b590      	push	{r4, r7, lr}
 8013df0:	b099      	sub	sp, #100	; 0x64
 8013df2:	af04      	add	r7, sp, #16
 8013df4:	60f8      	str	r0, [r7, #12]
 8013df6:	60b9      	str	r1, [r7, #8]
 8013df8:	607a      	str	r2, [r7, #4]
 8013dfa:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f000 fc87 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013e02:	4603      	mov	r3, r0
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	3228      	adds	r2, #40	; 0x28
 8013e08:	6812      	ldr	r2, [r2, #0]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	4790      	blx	r2
    if (expected != actual)
 8013e0e:	68ba      	ldr	r2, [r7, #8]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d027      	beq.n	8013e66 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	339c      	adds	r3, #156	; 0x9c
 8013e1c:	681c      	ldr	r4, [r3, #0]
 8013e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e22:	6839      	ldr	r1, [r7, #0]
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7f9 f8aa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013e2a:	f107 0014 	add.w	r0, r7, #20
 8013e2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e32:	9302      	str	r3, [sp, #8]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	68bb      	ldr	r3, [r7, #8]
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013e40:	68f9      	ldr	r1, [r7, #12]
 8013e42:	f7fb fc1f 	bl	800f684 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8013e46:	f107 0314 	add.w	r3, r7, #20
 8013e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	68f8      	ldr	r0, [r7, #12]
 8013e50:	47a0      	blx	r4
 8013e52:	f107 0314 	add.w	r3, r7, #20
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fc f9fa 	bl	8010250 <_ZN17LongsEqualFailureD1Ev>
 8013e5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7f9 fc44 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8013e66:	bf00      	nop
 8013e68:	3754      	adds	r7, #84	; 0x54
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd90      	pop	{r4, r7, pc}

08013e6e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e6e:	b590      	push	{r4, r7, lr}
 8013e70:	b099      	sub	sp, #100	; 0x64
 8013e72:	af04      	add	r7, sp, #16
 8013e74:	60f8      	str	r0, [r7, #12]
 8013e76:	60b9      	str	r1, [r7, #8]
 8013e78:	607a      	str	r2, [r7, #4]
 8013e7a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 fc47 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013e82:	4603      	mov	r3, r0
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	3228      	adds	r2, #40	; 0x28
 8013e88:	6812      	ldr	r2, [r2, #0]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	4790      	blx	r2
    if (expected != actual)
 8013e8e:	68ba      	ldr	r2, [r7, #8]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d027      	beq.n	8013ee6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	339c      	adds	r3, #156	; 0x9c
 8013e9c:	681c      	ldr	r4, [r3, #0]
 8013e9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ea2:	6839      	ldr	r1, [r7, #0]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7f9 f86a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013eaa:	f107 0014 	add.w	r0, r7, #20
 8013eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013eb2:	9302      	str	r3, [sp, #8]
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	9301      	str	r3, [sp, #4]
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	9300      	str	r3, [sp, #0]
 8013ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ec0:	68f9      	ldr	r1, [r7, #12]
 8013ec2:	f7fb fcab 	bl	800f81c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8013ec6:	f107 0314 	add.w	r3, r7, #20
 8013eca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ecc:	4619      	mov	r1, r3
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	47a0      	blx	r4
 8013ed2:	f107 0314 	add.w	r3, r7, #20
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fc f998 	bl	801020c <_ZN25UnsignedLongsEqualFailureD1Ev>
 8013edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f9 fc04 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8013ee6:	bf00      	nop
 8013ee8:	3754      	adds	r7, #84	; 0x54
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd90      	pop	{r4, r7, pc}
	...

08013ef0 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013ef0:	b082      	sub	sp, #8
 8013ef2:	b590      	push	{r4, r7, lr}
 8013ef4:	b099      	sub	sp, #100	; 0x64
 8013ef6:	af02      	add	r7, sp, #8
 8013ef8:	60f8      	str	r0, [r7, #12]
 8013efa:	1d38      	adds	r0, r7, #4
 8013efc:	e880 0006 	stmia.w	r0, {r1, r2}
 8013f00:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f000 fc04 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	3228      	adds	r2, #40	; 0x28
 8013f0e:	6812      	ldr	r2, [r2, #0]
 8013f10:	4618      	mov	r0, r3
 8013f12:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	339c      	adds	r3, #156	; 0x9c
 8013f1a:	681c      	ldr	r4, [r3, #0]
 8013f1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f20:	4919      	ldr	r1, [pc, #100]	; (8013f88 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7f9 f82b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013f28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7f9 f825 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013f34:	f107 0014 	add.w	r0, r7, #20
 8013f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f3c:	9301      	str	r3, [sp, #4]
 8013f3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013f46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013f48:	68f9      	ldr	r1, [r7, #12]
 8013f4a:	f7fc f84d 	bl	800ffe8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013f4e:	f107 0314 	add.w	r3, r7, #20
 8013f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013f56:	4619      	mov	r1, r3
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	47a0      	blx	r4
 8013f5c:	f107 0314 	add.w	r3, r7, #20
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fc f887 	bl	8010074 <_ZN25FeatureUnsupportedFailureD1Ev>
 8013f66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7f9 fbbf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8013f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f9 fbba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
#endif
}
 8013f7a:	bf00      	nop
 8013f7c:	375c      	adds	r7, #92	; 0x5c
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8013f84:	b002      	add	sp, #8
 8013f86:	4770      	bx	lr
 8013f88:	08025504 	.word	0x08025504

08013f8c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013f8c:	b082      	sub	sp, #8
 8013f8e:	b590      	push	{r4, r7, lr}
 8013f90:	b099      	sub	sp, #100	; 0x64
 8013f92:	af02      	add	r7, sp, #8
 8013f94:	60f8      	str	r0, [r7, #12]
 8013f96:	1d38      	adds	r0, r7, #4
 8013f98:	e880 0006 	stmia.w	r0, {r1, r2}
 8013f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8013f9e:	68f8      	ldr	r0, [r7, #12]
 8013fa0:	f000 fbb6 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	3228      	adds	r2, #40	; 0x28
 8013faa:	6812      	ldr	r2, [r2, #0]
 8013fac:	4618      	mov	r0, r3
 8013fae:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	339c      	adds	r3, #156	; 0x9c
 8013fb6:	681c      	ldr	r4, [r3, #0]
 8013fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013fbc:	4919      	ldr	r1, [pc, #100]	; (8014024 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7f8 ffdd 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013fc8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7f8 ffd7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8013fd0:	f107 0014 	add.w	r0, r7, #20
 8013fd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013fd8:	9301      	str	r3, [sp, #4]
 8013fda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013fde:	9300      	str	r3, [sp, #0]
 8013fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013fe2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013fe4:	68f9      	ldr	r1, [r7, #12]
 8013fe6:	f7fb ffff 	bl	800ffe8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8013fea:	f107 0314 	add.w	r3, r7, #20
 8013fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	47a0      	blx	r4
 8013ff8:	f107 0314 	add.w	r3, r7, #20
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fc f839 	bl	8010074 <_ZN25FeatureUnsupportedFailureD1Ev>
 8014002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014006:	4618      	mov	r0, r3
 8014008:	f7f9 fb71 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801400c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014010:	4618      	mov	r0, r3
 8014012:	f7f9 fb6c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
#endif
}
 8014016:	bf00      	nop
 8014018:	375c      	adds	r7, #92	; 0x5c
 801401a:	46bd      	mov	sp, r7
 801401c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014020:	b002      	add	sp, #8
 8014022:	4770      	bx	lr
 8014024:	08025504 	.word	0x08025504

08014028 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014028:	b590      	push	{r4, r7, lr}
 801402a:	b099      	sub	sp, #100	; 0x64
 801402c:	af04      	add	r7, sp, #16
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	607b      	str	r3, [r7, #4]
 8014032:	460b      	mov	r3, r1
 8014034:	72fb      	strb	r3, [r7, #11]
 8014036:	4613      	mov	r3, r2
 8014038:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801403a:	68f8      	ldr	r0, [r7, #12]
 801403c:	f000 fb68 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8014040:	4603      	mov	r3, r0
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	3228      	adds	r2, #40	; 0x28
 8014046:	6812      	ldr	r2, [r2, #0]
 8014048:	4618      	mov	r0, r3
 801404a:	4790      	blx	r2
    if (expected != actual)
 801404c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014050:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8014054:	429a      	cmp	r2, r3
 8014056:	d029      	beq.n	80140ac <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	339c      	adds	r3, #156	; 0x9c
 801405e:	681c      	ldr	r4, [r3, #0]
 8014060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014064:	6879      	ldr	r1, [r7, #4]
 8014066:	4618      	mov	r0, r3
 8014068:	f7f8 ff89 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801406c:	f107 0014 	add.w	r0, r7, #20
 8014070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014074:	9302      	str	r3, [sp, #8]
 8014076:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801407a:	9301      	str	r3, [sp, #4]
 801407c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014086:	68f9      	ldr	r1, [r7, #12]
 8014088:	f7fb fc94 	bl	800f9b4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 801408c:	f107 0314 	add.w	r3, r7, #20
 8014090:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014092:	4619      	mov	r1, r3
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	47a0      	blx	r4
 8014098:	f107 0314 	add.w	r3, r7, #20
 801409c:	4618      	mov	r0, r3
 801409e:	f7fc f893 	bl	80101c8 <_ZN23SignedBytesEqualFailureD1Ev>
 80140a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7f9 fb21 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80140ac:	bf00      	nop
 80140ae:	3754      	adds	r7, #84	; 0x54
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd90      	pop	{r4, r7, pc}

080140b4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80140b4:	b590      	push	{r4, r7, lr}
 80140b6:	b09d      	sub	sp, #116	; 0x74
 80140b8:	af04      	add	r7, sp, #16
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
 80140c0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f000 fb24 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80140c8:	4603      	mov	r3, r0
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	3228      	adds	r2, #40	; 0x28
 80140ce:	6812      	ldr	r2, [r2, #0]
 80140d0:	4618      	mov	r0, r3
 80140d2:	4790      	blx	r2
    if (expected != actual)
 80140d4:	68ba      	ldr	r2, [r7, #8]
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d03f      	beq.n	801415c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	339c      	adds	r3, #156	; 0x9c
 80140e2:	681c      	ldr	r4, [r3, #0]
 80140e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80140e8:	68b9      	ldr	r1, [r7, #8]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f9 fdea 	bl	800dcc4 <_Z10StringFromPKv>
 80140f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80140f4:	6879      	ldr	r1, [r7, #4]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f9 fde4 	bl	800dcc4 <_Z10StringFromPKv>
 80140fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014100:	6839      	ldr	r1, [r7, #0]
 8014102:	4618      	mov	r0, r3
 8014104:	f7f8 ff3b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014108:	f107 0014 	add.w	r0, r7, #20
 801410c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014110:	9302      	str	r3, [sp, #8]
 8014112:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014120:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014122:	68f9      	ldr	r1, [r7, #12]
 8014124:	f7fb f814 	bl	800f150 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014128:	f107 0314 	add.w	r3, r7, #20
 801412c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801412e:	4619      	mov	r1, r3
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	47a0      	blx	r4
 8014134:	f107 0314 	add.w	r3, r7, #20
 8014138:	4618      	mov	r0, r3
 801413a:	f7fc f955 	bl	80103e8 <_ZN13EqualsFailureD1Ev>
 801413e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014142:	4618      	mov	r0, r3
 8014144:	f7f9 fad3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8014148:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801414c:	4618      	mov	r0, r3
 801414e:	f7f9 face 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8014152:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014156:	4618      	mov	r0, r3
 8014158:	f7f9 fac9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801415c:	bf00      	nop
 801415e:	3764      	adds	r7, #100	; 0x64
 8014160:	46bd      	mov	sp, r7
 8014162:	bd90      	pop	{r4, r7, pc}

08014164 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014164:	b590      	push	{r4, r7, lr}
 8014166:	b09d      	sub	sp, #116	; 0x74
 8014168:	af04      	add	r7, sp, #16
 801416a:	60f8      	str	r0, [r7, #12]
 801416c:	60b9      	str	r1, [r7, #8]
 801416e:	607a      	str	r2, [r7, #4]
 8014170:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f000 facc 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8014178:	4603      	mov	r3, r0
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	3228      	adds	r2, #40	; 0x28
 801417e:	6812      	ldr	r2, [r2, #0]
 8014180:	4618      	mov	r0, r3
 8014182:	4790      	blx	r2
    if (expected != actual)
 8014184:	68ba      	ldr	r2, [r7, #8]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	429a      	cmp	r2, r3
 801418a:	d03f      	beq.n	801420c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	339c      	adds	r3, #156	; 0x9c
 8014192:	681c      	ldr	r4, [r3, #0]
 8014194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014198:	68b9      	ldr	r1, [r7, #8]
 801419a:	4618      	mov	r0, r3
 801419c:	f7f9 fdbc 	bl	800dd18 <_Z10StringFromPFvvE>
 80141a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80141a4:	6879      	ldr	r1, [r7, #4]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7f9 fdb6 	bl	800dd18 <_Z10StringFromPFvvE>
 80141ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80141b0:	6839      	ldr	r1, [r7, #0]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f8 fee3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80141b8:	f107 0014 	add.w	r0, r7, #20
 80141bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80141c0:	9302      	str	r3, [sp, #8]
 80141c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80141c6:	9301      	str	r3, [sp, #4]
 80141c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80141cc:	9300      	str	r3, [sp, #0]
 80141ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80141d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141d2:	68f9      	ldr	r1, [r7, #12]
 80141d4:	f7fa ffbc 	bl	800f150 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80141d8:	f107 0314 	add.w	r3, r7, #20
 80141dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80141de:	4619      	mov	r1, r3
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	47a0      	blx	r4
 80141e4:	f107 0314 	add.w	r3, r7, #20
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7fc f8fd 	bl	80103e8 <_ZN13EqualsFailureD1Ev>
 80141ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7f9 fa7b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80141f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7f9 fa76 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8014202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014206:	4618      	mov	r0, r3
 8014208:	f7f9 fa71 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801420c:	bf00      	nop
 801420e:	3764      	adds	r7, #100	; 0x64
 8014210:	46bd      	mov	sp, r7
 8014212:	bd90      	pop	{r4, r7, pc}

08014214 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014214:	b590      	push	{r4, r7, lr}
 8014216:	b09d      	sub	sp, #116	; 0x74
 8014218:	af02      	add	r7, sp, #8
 801421a:	6278      	str	r0, [r7, #36]	; 0x24
 801421c:	ed87 0b06 	vstr	d0, [r7, #24]
 8014220:	ed87 1b04 	vstr	d1, [r7, #16]
 8014224:	ed87 2b02 	vstr	d2, [r7, #8]
 8014228:	6239      	str	r1, [r7, #32]
 801422a:	607a      	str	r2, [r7, #4]
 801422c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801422e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014230:	f000 fa6e 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8014234:	4603      	mov	r3, r0
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	3228      	adds	r2, #40	; 0x28
 801423a:	6812      	ldr	r2, [r2, #0]
 801423c:	4618      	mov	r0, r3
 801423e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8014240:	ed97 2b02 	vldr	d2, [r7, #8]
 8014244:	ed97 1b04 	vldr	d1, [r7, #16]
 8014248:	ed97 0b06 	vldr	d0, [r7, #24]
 801424c:	f7fe fd4a 	bl	8012ce4 <_Z13doubles_equalddd>
 8014250:	4603      	mov	r3, r0
 8014252:	f083 0301 	eor.w	r3, r3, #1
 8014256:	b2db      	uxtb	r3, r3
 8014258:	2b00      	cmp	r3, #0
 801425a:	d029      	beq.n	80142b0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 801425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	339c      	adds	r3, #156	; 0x9c
 8014262:	681c      	ldr	r4, [r3, #0]
 8014264:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014268:	6a39      	ldr	r1, [r7, #32]
 801426a:	4618      	mov	r0, r3
 801426c:	f7f8 fe87 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014270:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014274:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	ed97 2b02 	vldr	d2, [r7, #8]
 801427e:	ed97 1b04 	vldr	d1, [r7, #16]
 8014282:	ed97 0b06 	vldr	d0, [r7, #24]
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801428c:	f7fa ffa2 	bl	800f1d4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8014290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014294:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014296:	4619      	mov	r1, r3
 8014298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801429a:	47a0      	blx	r4
 801429c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fc f87f 	bl	80103a4 <_ZN19DoublesEqualFailureD1Ev>
 80142a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7f9 fa1f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80142b0:	bf00      	nop
 80142b2:	376c      	adds	r7, #108	; 0x6c
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd90      	pop	{r4, r7, pc}

080142b8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80142b8:	b590      	push	{r4, r7, lr}
 80142ba:	b0a7      	sub	sp, #156	; 0x9c
 80142bc:	af04      	add	r7, sp, #16
 80142be:	60f8      	str	r0, [r7, #12]
 80142c0:	60b9      	str	r1, [r7, #8]
 80142c2:	607a      	str	r2, [r7, #4]
 80142c4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80142c6:	68f8      	ldr	r0, [r7, #12]
 80142c8:	f000 fa22 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80142cc:	4603      	mov	r3, r0
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	3228      	adds	r2, #40	; 0x28
 80142d2:	6812      	ldr	r2, [r2, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	4790      	blx	r2
	if (length == 0) return;
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d075      	beq.n	80143ca <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d102      	bne.n	80142ea <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d071      	beq.n	80143ce <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d12d      	bne.n	8014352 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	339c      	adds	r3, #156	; 0x9c
 80142fc:	681c      	ldr	r4, [r3, #0]
 80142fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014302:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014306:	4618      	mov	r0, r3
 8014308:	f7f8 fe39 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801430c:	f107 0010 	add.w	r0, r7, #16
 8014310:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014314:	9303      	str	r3, [sp, #12]
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	9302      	str	r3, [sp, #8]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	9301      	str	r3, [sp, #4]
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	9300      	str	r3, [sp, #0]
 8014322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014326:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801432a:	68f9      	ldr	r1, [r7, #12]
 801432c:	f7fb fd70 	bl	800fe10 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8014330:	f107 0310 	add.w	r3, r7, #16
 8014334:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014338:	4619      	mov	r1, r3
 801433a:	68f8      	ldr	r0, [r7, #12]
 801433c:	47a0      	blx	r4
 801433e:	f107 0310 	add.w	r3, r7, #16
 8014342:	4618      	mov	r0, r3
 8014344:	f7fb feda 	bl	80100fc <_ZN18BinaryEqualFailureD1Ev>
 8014348:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801434c:	4618      	mov	r0, r3
 801434e:	f7f9 f9ce 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8014352:	683a      	ldr	r2, [r7, #0]
 8014354:	6879      	ldr	r1, [r7, #4]
 8014356:	68b8      	ldr	r0, [r7, #8]
 8014358:	f7f8 fd30 	bl	800cdbc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	bf14      	ite	ne
 8014362:	2301      	movne	r3, #1
 8014364:	2300      	moveq	r3, #0
 8014366:	b2db      	uxtb	r3, r3
 8014368:	2b00      	cmp	r3, #0
 801436a:	d031      	beq.n	80143d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	339c      	adds	r3, #156	; 0x9c
 8014372:	681c      	ldr	r4, [r3, #0]
 8014374:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014378:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801437c:	4618      	mov	r0, r3
 801437e:	f7f8 fdfe 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014382:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014386:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801438a:	9303      	str	r3, [sp, #12]
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	9302      	str	r3, [sp, #8]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	9301      	str	r3, [sp, #4]
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	9300      	str	r3, [sp, #0]
 8014398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801439c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80143a0:	68f9      	ldr	r1, [r7, #12]
 80143a2:	f7fb fd35 	bl	800fe10 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80143a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80143aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80143ae:	4619      	mov	r1, r3
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	47a0      	blx	r4
 80143b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fb fe9f 	bl	80100fc <_ZN18BinaryEqualFailureD1Ev>
 80143be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7f9 f993 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80143c8:	e002      	b.n	80143d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80143ca:	bf00      	nop
 80143cc:	e000      	b.n	80143d0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80143ce:	bf00      	nop
}
 80143d0:	378c      	adds	r7, #140	; 0x8c
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd90      	pop	{r4, r7, pc}

080143d6 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80143d6:	b590      	push	{r4, r7, lr}
 80143d8:	b09b      	sub	sp, #108	; 0x6c
 80143da:	af06      	add	r7, sp, #24
 80143dc:	60f8      	str	r0, [r7, #12]
 80143de:	60b9      	str	r1, [r7, #8]
 80143e0:	607a      	str	r2, [r7, #4]
 80143e2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80143e4:	68f8      	ldr	r0, [r7, #12]
 80143e6:	f000 f993 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80143ea:	4603      	mov	r3, r0
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	3228      	adds	r2, #40	; 0x28
 80143f0:	6812      	ldr	r2, [r2, #0]
 80143f2:	4618      	mov	r0, r3
 80143f4:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80143f6:	68ba      	ldr	r2, [r7, #8]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	405a      	eors	r2, r3
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	4013      	ands	r3, r2
 8014400:	2b00      	cmp	r3, #0
 8014402:	d02b      	beq.n	801445c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	339c      	adds	r3, #156	; 0x9c
 801440a:	681c      	ldr	r4, [r3, #0]
 801440c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014410:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014412:	4618      	mov	r0, r3
 8014414:	f7f8 fdb3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014418:	f107 0014 	add.w	r0, r7, #20
 801441c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014420:	9304      	str	r3, [sp, #16]
 8014422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014424:	9303      	str	r3, [sp, #12]
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	9302      	str	r3, [sp, #8]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	9301      	str	r3, [sp, #4]
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	9300      	str	r3, [sp, #0]
 8014432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014434:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014436:	68f9      	ldr	r1, [r7, #12]
 8014438:	f7fb fd7a 	bl	800ff30 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 801443c:	f107 0314 	add.w	r3, r7, #20
 8014440:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014442:	4619      	mov	r1, r3
 8014444:	68f8      	ldr	r0, [r7, #12]
 8014446:	47a0      	blx	r4
 8014448:	f107 0314 	add.w	r3, r7, #20
 801444c:	4618      	mov	r0, r3
 801444e:	f7fb fe33 	bl	80100b8 <_ZN16BitsEqualFailureD1Ev>
 8014452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014456:	4618      	mov	r0, r3
 8014458:	f7f9 f949 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801445c:	bf00      	nop
 801445e:	3754      	adds	r7, #84	; 0x54
 8014460:	46bd      	mov	sp, r7
 8014462:	bd90      	pop	{r4, r7, pc}

08014464 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8014464:	b590      	push	{r4, r7, lr}
 8014466:	b09d      	sub	sp, #116	; 0x74
 8014468:	af04      	add	r7, sp, #16
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	607a      	str	r2, [r7, #4]
 801446e:	603b      	str	r3, [r7, #0]
 8014470:	460b      	mov	r3, r1
 8014472:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f000 f94b 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 801447a:	4603      	mov	r3, r0
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	3228      	adds	r2, #40	; 0x28
 8014480:	6812      	ldr	r2, [r2, #0]
 8014482:	4618      	mov	r0, r3
 8014484:	4790      	blx	r2
    if (failed)
 8014486:	7afb      	ldrb	r3, [r7, #11]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d03f      	beq.n	801450c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	339c      	adds	r3, #156	; 0x9c
 8014492:	681c      	ldr	r4, [r3, #0]
 8014494:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014498:	6879      	ldr	r1, [r7, #4]
 801449a:	4618      	mov	r0, r3
 801449c:	f7f8 fd6f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80144a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144a4:	6839      	ldr	r1, [r7, #0]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f8 fd69 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80144ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f8 fd63 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80144b8:	f107 0014 	add.w	r0, r7, #20
 80144bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144c0:	9302      	str	r3, [sp, #8]
 80144c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144c6:	9301      	str	r3, [sp, #4]
 80144c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80144d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80144d2:	68f9      	ldr	r1, [r7, #12]
 80144d4:	f7fa ff30 	bl	800f338 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80144d8:	f107 0314 	add.w	r3, r7, #20
 80144dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80144de:	4619      	mov	r1, r3
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	47a0      	blx	r4
 80144e4:	f107 0314 	add.w	r3, r7, #20
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fb ff39 	bl	8010360 <_ZN17CheckEqualFailureD1Ev>
 80144ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80144f2:	4618      	mov	r0, r3
 80144f4:	f7f9 f8fb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80144f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f9 f8f6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8014502:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014506:	4618      	mov	r0, r3
 8014508:	f7f9 f8f1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801450c:	bf00      	nop
 801450e:	3764      	adds	r7, #100	; 0x64
 8014510:	46bd      	mov	sp, r7
 8014512:	bd90      	pop	{r4, r7, pc}

08014514 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8014514:	b590      	push	{r4, r7, lr}
 8014516:	b09d      	sub	sp, #116	; 0x74
 8014518:	af04      	add	r7, sp, #16
 801451a:	60f8      	str	r0, [r7, #12]
 801451c:	607a      	str	r2, [r7, #4]
 801451e:	603b      	str	r3, [r7, #0]
 8014520:	460b      	mov	r3, r1
 8014522:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f000 f8f3 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 801452a:	4603      	mov	r3, r0
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	3228      	adds	r2, #40	; 0x28
 8014530:	6812      	ldr	r2, [r2, #0]
 8014532:	4618      	mov	r0, r3
 8014534:	4790      	blx	r2
    if (!comparison)
 8014536:	7afb      	ldrb	r3, [r7, #11]
 8014538:	f083 0301 	eor.w	r3, r3, #1
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	d03f      	beq.n	80145c2 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	339c      	adds	r3, #156	; 0x9c
 8014548:	681c      	ldr	r4, [r3, #0]
 801454a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801454e:	6879      	ldr	r1, [r7, #4]
 8014550:	4618      	mov	r0, r3
 8014552:	f7f8 fd14 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014556:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801455a:	6839      	ldr	r1, [r7, #0]
 801455c:	4618      	mov	r0, r3
 801455e:	f7f8 fd0e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014566:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014568:	4618      	mov	r0, r3
 801456a:	f7f8 fd08 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801456e:	f107 0014 	add.w	r0, r7, #20
 8014572:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014576:	9302      	str	r3, [sp, #8]
 8014578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801457c:	9301      	str	r3, [sp, #4]
 801457e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014582:	9300      	str	r3, [sp, #0]
 8014584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014588:	68f9      	ldr	r1, [r7, #12]
 801458a:	f7fa ff83 	bl	800f494 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801458e:	f107 0314 	add.w	r3, r7, #20
 8014592:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014594:	4619      	mov	r1, r3
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	47a0      	blx	r4
 801459a:	f107 0314 	add.w	r3, r7, #20
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fb febc 	bl	801031c <_ZN17ComparisonFailureD1Ev>
 80145a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f9 f8a0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80145ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7f9 f89b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80145b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80145bc:	4618      	mov	r0, r3
 80145be:	f7f9 f896 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80145c2:	bf00      	nop
 80145c4:	3764      	adds	r7, #100	; 0x64
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd90      	pop	{r4, r7, pc}
	...

080145cc <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80145cc:	b5b0      	push	{r4, r5, r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
 80145d8:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80145da:	f107 0310 	add.w	r3, r7, #16
 80145de:	4924      	ldr	r1, [pc, #144]	; (8014670 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7f8 fccc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80145e6:	f107 0310 	add.w	r3, r7, #16
 80145ea:	6879      	ldr	r1, [r7, #4]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7f9 f90d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80145f2:	f107 0310 	add.w	r3, r7, #16
 80145f6:	491f      	ldr	r1, [pc, #124]	; (8014674 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7f9 f907 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 80145fe:	f107 0318 	add.w	r3, r7, #24
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	4618      	mov	r0, r3
 8014606:	f7f9 fda1 	bl	800e14c <_Z10StringFromj>
 801460a:	f107 0218 	add.w	r2, r7, #24
 801460e:	f107 0310 	add.w	r3, r7, #16
 8014612:	4611      	mov	r1, r2
 8014614:	4618      	mov	r0, r3
 8014616:	f7f9 f8e7 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801461a:	f107 0318 	add.w	r3, r7, #24
 801461e:	4618      	mov	r0, r3
 8014620:	f7f9 f865 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8014624:	f107 0310 	add.w	r3, r7, #16
 8014628:	4913      	ldr	r1, [pc, #76]	; (8014678 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801462a:	4618      	mov	r0, r3
 801462c:	f7f9 f8ee 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8014630:	f107 0310 	add.w	r3, r7, #16
 8014634:	68b9      	ldr	r1, [r7, #8]
 8014636:	4618      	mov	r0, r3
 8014638:	f7f9 f8e8 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 801463c:	68f8      	ldr	r0, [r7, #12]
 801463e:	f000 f867 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 8014642:	4604      	mov	r4, r0
 8014644:	6823      	ldr	r3, [r4, #0]
 8014646:	3338      	adds	r3, #56	; 0x38
 8014648:	681d      	ldr	r5, [r3, #0]
 801464a:	f107 0310 	add.w	r3, r7, #16
 801464e:	4618      	mov	r0, r3
 8014650:	f7f9 f820 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8014654:	4603      	mov	r3, r0
 8014656:	4619      	mov	r1, r3
 8014658:	4620      	mov	r0, r4
 801465a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 801465c:	f107 0310 	add.w	r3, r7, #16
 8014660:	4618      	mov	r0, r3
 8014662:	f7f9 f844 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8014666:	bf00      	nop
 8014668:	3720      	adds	r7, #32
 801466a:	46bd      	mov	sp, r7
 801466c:	bdb0      	pop	{r4, r5, r7, pc}
 801466e:	bf00      	nop
 8014670:	0802551c 	.word	0x0802551c
 8014674:	08025520 	.word	0x08025520
 8014678:	08025524 	.word	0x08025524

0801467c <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 801467c:	b590      	push	{r4, r7, lr}
 801467e:	b085      	sub	sp, #20
 8014680:	af00      	add	r7, sp, #0
 8014682:	60f8      	str	r0, [r7, #12]
 8014684:	60b9      	str	r1, [r7, #8]
 8014686:	607a      	str	r2, [r7, #4]
 8014688:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	3370      	adds	r3, #112	; 0x70
 8014690:	681c      	ldr	r4, [r3, #0]
 8014692:	68b8      	ldr	r0, [r7, #8]
 8014694:	f7f8 fffe 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 8014698:	4601      	mov	r1, r0
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	68f8      	ldr	r0, [r7, #12]
 80146a0:	47a0      	blx	r4
}
 80146a2:	bf00      	nop
 80146a4:	3714      	adds	r7, #20
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd90      	pop	{r4, r7, pc}

080146aa <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80146aa:	b580      	push	{r7, lr}
 80146ac:	b082      	sub	sp, #8
 80146ae:	af00      	add	r7, sp, #0
 80146b0:	6078      	str	r0, [r7, #4]
 80146b2:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f000 f82b 	bl	8014710 <_ZN10UtestShell13getTestResultEv>
 80146ba:	4603      	mov	r3, r0
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	323c      	adds	r2, #60	; 0x3c
 80146c0:	6812      	ldr	r2, [r2, #0]
 80146c2:	6839      	ldr	r1, [r7, #0]
 80146c4:	4618      	mov	r0, r3
 80146c6:	4790      	blx	r2
}
 80146c8:	bf00      	nop
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b083      	sub	sp, #12
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 80146da:	4a04      	ldr	r2, [pc, #16]	; (80146ec <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	6013      	str	r3, [r2, #0]
}
 80146e0:	bf00      	nop
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr
 80146ec:	20000b1c 	.word	0x20000b1c

080146f0 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b083      	sub	sp, #12
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 80146fa:	4a04      	ldr	r2, [pc, #16]	; (801470c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	6013      	str	r3, [r2, #0]
}
 8014700:	bf00      	nop
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr
 801470c:	20000b20 	.word	0x20000b20

08014710 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8014718:	4b09      	ldr	r3, [pc, #36]	; (8014740 <_ZN10UtestShell13getTestResultEv+0x30>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d109      	bne.n	8014734 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8014720:	f7fe fbb2 	bl	8012e88 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014724:	4603      	mov	r3, r0
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	32a4      	adds	r2, #164	; 0xa4
 801472a:	6812      	ldr	r2, [r2, #0]
 801472c:	4618      	mov	r0, r3
 801472e:	4790      	blx	r2
 8014730:	4603      	mov	r3, r0
 8014732:	e001      	b.n	8014738 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8014734:	4b02      	ldr	r3, [pc, #8]	; (8014740 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014736:	681b      	ldr	r3, [r3, #0]
}
 8014738:	4618      	mov	r0, r3
 801473a:	3708      	adds	r7, #8
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}
 8014740:	20000b1c 	.word	0x20000b1c

08014744 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8014744:	b580      	push	{r7, lr}
 8014746:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8014748:	4b05      	ldr	r3, [pc, #20]	; (8014760 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d103      	bne.n	8014758 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8014750:	f7fe fb9a 	bl	8012e88 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014754:	4603      	mov	r3, r0
 8014756:	e001      	b.n	801475c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8014758:	4b01      	ldr	r3, [pc, #4]	; (8014760 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801475a:	681b      	ldr	r3, [r3, #0]
}
 801475c:	4618      	mov	r0, r3
 801475e:	bd80      	pop	{r7, pc}
 8014760:	20000b20 	.word	0x20000b20

08014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8014764:	b480      	push	{r7}
 8014766:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8014768:	4b03      	ldr	r3, [pc, #12]	; (8014778 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 801476a:	681b      	ldr	r3, [r3, #0]
}
 801476c:	4618      	mov	r0, r3
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	20000094 	.word	0x20000094

0801477c <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 801477c:	b480      	push	{r7}
 801477e:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8014780:	4b03      	ldr	r3, [pc, #12]	; (8014790 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8014782:	4a04      	ldr	r2, [pc, #16]	; (8014794 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8014784:	601a      	str	r2, [r3, #0]
}
 8014786:	bf00      	nop
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr
 8014790:	20000094 	.word	0x20000094
 8014794:	20000090 	.word	0x20000090

08014798 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	4a04      	ldr	r2, [pc, #16]	; (80147b4 <_ZN5UtestC1Ev+0x1c>)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	601a      	str	r2, [r3, #0]
{
}
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	4618      	mov	r0, r3
 80147aa:	370c      	adds	r7, #12
 80147ac:	46bd      	mov	sp, r7
 80147ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b2:	4770      	bx	lr
 80147b4:	08028ec4 	.word	0x08028ec4

080147b8 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	4a04      	ldr	r2, [pc, #16]	; (80147d4 <_ZN5UtestD1Ev+0x1c>)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	601a      	str	r2, [r3, #0]
{
}
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	4618      	mov	r0, r3
 80147ca:	370c      	adds	r7, #12
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	08028ec4 	.word	0x08028ec4

080147d8 <_ZN5UtestD0Ev>:
Utest::~Utest()
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
}
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7ff ffe9 	bl	80147b8 <_ZN5UtestD1Ev>
 80147e6:	2104      	movs	r1, #4
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7f6 f819 	bl	800a820 <_ZdlPvj>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	3708      	adds	r7, #8
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}

080147f8 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b082      	sub	sp, #8
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014800:	4b0d      	ldr	r3, [pc, #52]	; (8014838 <_ZN5Utest3runEv+0x40>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	480d      	ldr	r0, [pc, #52]	; (801483c <_ZN5Utest3runEv+0x44>)
 8014808:	4798      	blx	r3
 801480a:	4603      	mov	r3, r0
 801480c:	2b00      	cmp	r3, #0
 801480e:	bf14      	ite	ne
 8014810:	2301      	movne	r3, #1
 8014812:	2300      	moveq	r3, #0
 8014814:	b2db      	uxtb	r3, r3
 8014816:	2b00      	cmp	r3, #0
 8014818:	d004      	beq.n	8014824 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801481a:	4b07      	ldr	r3, [pc, #28]	; (8014838 <_ZN5Utest3runEv+0x40>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	4807      	ldr	r0, [pc, #28]	; (8014840 <_ZN5Utest3runEv+0x48>)
 8014822:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8014824:	4b04      	ldr	r3, [pc, #16]	; (8014838 <_ZN5Utest3runEv+0x40>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	6879      	ldr	r1, [r7, #4]
 801482a:	4806      	ldr	r0, [pc, #24]	; (8014844 <_ZN5Utest3runEv+0x4c>)
 801482c:	4798      	blx	r3
}
 801482e:	bf00      	nop
 8014830:	3708      	adds	r7, #8
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	bf00      	nop
 8014838:	200000a4 	.word	0x200000a4
 801483c:	08012ee5 	.word	0x08012ee5
 8014840:	08012f01 	.word	0x08012f01
 8014844:	08012f1d 	.word	0x08012f1d

08014848 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8014848:	b480      	push	{r7}
 801484a:	b083      	sub	sp, #12
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
}
 8014850:	bf00      	nop
 8014852:	370c      	adds	r7, #12
 8014854:	46bd      	mov	sp, r7
 8014856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485a:	4770      	bx	lr

0801485c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 801485c:	b480      	push	{r7}
 801485e:	b083      	sub	sp, #12
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
}
 8014864:	bf00      	nop
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8014870:	b480      	push	{r7}
 8014872:	b083      	sub	sp, #12
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
}
 8014878:	bf00      	nop
 801487a:	370c      	adds	r7, #12
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr

08014884 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	4a04      	ldr	r2, [pc, #16]	; (80148a0 <_ZN14TestTerminatorD1Ev+0x1c>)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	601a      	str	r2, [r3, #0]
{
}
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	4618      	mov	r0, r3
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr
 80148a0:	08028eb0 	.word	0x08028eb0

080148a4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80148ac:	2300      	movs	r3, #0
 80148ae:	60fb      	str	r3, [r7, #12]
 80148b0:	f107 030c 	add.w	r3, r7, #12
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7f6 f975 	bl	800aba4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80148ba:	f107 030c 	add.w	r3, r7, #12
 80148be:	4618      	mov	r0, r3
 80148c0:	f000 f82c 	bl	801491c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80148c4:	f107 030c 	add.w	r3, r7, #12
 80148c8:	4618      	mov	r0, r3
 80148ca:	f000 f835 	bl	8014938 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80148ce:	bf00      	nop
 80148d0:	3710      	adds	r7, #16
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
	...

080148d8 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	4a05      	ldr	r2, [pc, #20]	; (80148f8 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	601a      	str	r2, [r3, #0]
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7ff ffcb 	bl	8014884 <_ZN14TestTerminatorD1Ev>
{
}
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	08028e9c 	.word	0x08028e9c

080148fc <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
}
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff ffe7 	bl	80148d8 <_ZN20NormalTestTerminatorD1Ev>
 801490a:	2104      	movs	r1, #4
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f7f5 ff87 	bl	800a820 <_ZdlPvj>
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8014924:	4b03      	ldr	r3, [pc, #12]	; (8014934 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801492a:	bf00      	nop
 801492c:	3708      	adds	r7, #8
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	200000a0 	.word	0x200000a0

08014938 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
 8014940:	4a05      	ldr	r2, [pc, #20]	; (8014958 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	601a      	str	r2, [r3, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	f7ff ff9b 	bl	8014884 <_ZN14TestTerminatorD1Ev>
{
}
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	4618      	mov	r0, r3
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}
 8014958:	08028e88 	.word	0x08028e88

0801495c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801495c:	b580      	push	{r7, lr}
 801495e:	b082      	sub	sp, #8
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
}
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f7ff ffe7 	bl	8014938 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 801496a:	2104      	movs	r1, #4
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7f5 ff57 	bl	800a820 <_ZdlPvj>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4618      	mov	r0, r3
 8014976:	3708      	adds	r7, #8
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8014984:	f7fe fbaa 	bl	80130dc <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	4618      	mov	r0, r3
 801498c:	f7ff ff8a 	bl	80148a4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8014990:	bf00      	nop
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	4a05      	ldr	r2, [pc, #20]	; (80149b8 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	601a      	str	r2, [r3, #0]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7ff ff95 	bl	80148d8 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	08028e74 	.word	0x08028e74

080149bc <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
}
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7ff ffe7 	bl	8014998 <_ZN22CrashingTestTerminatorD1Ev>
 80149ca:	2104      	movs	r1, #4
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7f5 ff27 	bl	800a820 <_ZdlPvj>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	4618      	mov	r0, r3
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2200      	movs	r2, #0
 80149f0:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d007      	beq.n	8014a08 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	3310      	adds	r3, #16
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	6838      	ldr	r0, [r7, #0]
 8014a02:	4798      	blx	r3
 8014a04:	4603      	mov	r3, r0
 8014a06:	e000      	b.n	8014a0a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d02d      	beq.n	8014a72 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d201      	bcs.n	8014a26 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	e001      	b.n	8014a2a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8014a26:	f04f 33ff 	mov.w	r3, #4294967295
 8014a2a:	f240 3237 	movw	r2, #823	; 0x337
 8014a2e:	4914      	ldr	r1, [pc, #80]	; (8014a80 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7f5 ff05 	bl	800a840 <_ZnajPKci>
 8014a36:	4602      	mov	r2, r0
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014a40:	2300      	movs	r3, #0
 8014a42:	60bb      	str	r3, [r7, #8]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	68ba      	ldr	r2, [r7, #8]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d212      	bcs.n	8014a74 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	4413      	add	r3, r2
 8014a58:	68fa      	ldr	r2, [r7, #12]
 8014a5a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	330c      	adds	r3, #12
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	4798      	blx	r3
 8014a68:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	60bb      	str	r3, [r7, #8]
 8014a70:	e7e8      	b.n	8014a44 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8014a72:	bf00      	nop
    }
}
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	080253ac 	.word	0x080253ac

08014a84 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d004      	beq.n	8014a9e <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f5 fee5 	bl	800a868 <_ZdaPv>
}
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b087      	sub	sp, #28
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	60f8      	str	r0, [r7, #12]
 8014ab0:	60b9      	str	r1, [r7, #8]
 8014ab2:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	4413      	add	r3, r2
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	681a      	ldr	r2, [r3, #0]
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	4413      	add	r3, r2
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	4413      	add	r3, r2
 8014ada:	697a      	ldr	r2, [r7, #20]
 8014adc:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4413      	add	r3, r2
 8014ae8:	693a      	ldr	r2, [r7, #16]
 8014aea:	601a      	str	r2, [r3, #0]
}
 8014aec:	bf00      	nop
 8014aee:	371c      	adds	r7, #28
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d028      	beq.n	8014b5c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8014b0a:	4b17      	ldr	r3, [pc, #92]	; (8014b68 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	6838      	ldr	r0, [r7, #0]
 8014b10:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	3b01      	subs	r3, #1
 8014b18:	60fb      	str	r3, [r7, #12]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d019      	beq.n	8014b54 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d01b      	beq.n	8014b60 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8014b28:	4b10      	ldr	r3, [pc, #64]	; (8014b6c <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4798      	blx	r3
 8014b2e:	4603      	mov	r3, r0
 8014b30:	461a      	mov	r2, r3
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3301      	adds	r3, #1
 8014b36:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b3a:	fb03 f301 	mul.w	r3, r3, r1
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8014b42:	68ba      	ldr	r2, [r7, #8]
 8014b44:	68f9      	ldr	r1, [r7, #12]
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f7ff ffae 	bl	8014aa8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	3b01      	subs	r3, #1
 8014b50:	60fb      	str	r3, [r7, #12]
 8014b52:	e7e2      	b.n	8014b1a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f000 f834 	bl	8014bc2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014b5a:	e002      	b.n	8014b62 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8014b5c:	bf00      	nop
 8014b5e:	e000      	b.n	8014b62 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8014b60:	bf00      	nop
}
 8014b62:	3710      	adds	r7, #16
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	200000e0 	.word	0x200000e0
 8014b6c:	200000e4 	.word	0x200000e4

08014b70 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b086      	sub	sp, #24
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d01c      	beq.n	8014bba <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	085b      	lsrs	r3, r3, #1
 8014b86:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8014b88:	2300      	movs	r3, #0
 8014b8a:	617b      	str	r3, [r7, #20]
 8014b8c:	697a      	ldr	r2, [r7, #20]
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d20e      	bcs.n	8014bb2 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685a      	ldr	r2, [r3, #4]
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	3b01      	subs	r3, #1
 8014b9e:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	6979      	ldr	r1, [r7, #20]
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f7ff ff7f 	bl	8014aa8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	3301      	adds	r3, #1
 8014bae:	617b      	str	r3, [r7, #20]
 8014bb0:	e7ec      	b.n	8014b8c <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f000 f805 	bl	8014bc2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8014bb8:	e000      	b.n	8014bbc <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8014bba:	bf00      	nop
}
 8014bbc:	3718      	adds	r7, #24
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}

08014bc2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8014bc2:	b580      	push	{r7, lr}
 8014bc4:	b084      	sub	sp, #16
 8014bc6:	af00      	add	r7, sp, #0
 8014bc8:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014bce:	2300      	movs	r3, #0
 8014bd0:	60bb      	str	r3, [r7, #8]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	68ba      	ldr	r2, [r7, #8]
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d221      	bcs.n	8014c20 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681a      	ldr	r2, [r3, #0]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6859      	ldr	r1, [r3, #4]
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	1acb      	subs	r3, r1, r3
 8014be8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014bec:	3b01      	subs	r3, #1
 8014bee:	009b      	lsls	r3, r3, #2
 8014bf0:	4413      	add	r3, r2
 8014bf2:	6818      	ldr	r0, [r3, #0]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681a      	ldr	r2, [r3, #0]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6859      	ldr	r1, [r3, #4]
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	1acb      	subs	r3, r1, r3
 8014c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014c04:	3b01      	subs	r3, #1
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4413      	add	r3, r2
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	3308      	adds	r3, #8
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	68f9      	ldr	r1, [r7, #12]
 8014c14:	4798      	blx	r3
 8014c16:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	60bb      	str	r3, [r7, #8]
 8014c1e:	e7d8      	b.n	8014bd2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8014c20:	bf00      	nop
 8014c22:	3710      	adds	r7, #16
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b082      	sub	sp, #8
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
    return get(0);
 8014c30:	2100      	movs	r1, #0
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 f805 	bl	8014c42 <_ZNK22UtestShellPointerArray3getEj>
 8014c38:	4603      	mov	r3, r0
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3708      	adds	r7, #8
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}

08014c42 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8014c42:	b480      	push	{r7}
 8014c44:	b083      	sub	sp, #12
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	6078      	str	r0, [r7, #4]
 8014c4a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	683a      	ldr	r2, [r7, #0]
 8014c52:	429a      	cmp	r2, r3
 8014c54:	d301      	bcc.n	8014c5a <_ZNK22UtestShellPointerArray3getEj+0x18>
 8014c56:	2300      	movs	r3, #0
 8014c58:	e005      	b.n	8014c66 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	681b      	ldr	r3, [r3, #0]
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	370c      	adds	r7, #12
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr
	...

08014c74 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	607a      	str	r2, [r7, #4]
 8014c80:	603b      	str	r3, [r7, #0]
 8014c82:	4a10      	ldr	r2, [pc, #64]	; (8014cc4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8014c88:	6879      	ldr	r1, [r7, #4]
 8014c8a:	68b8      	ldr	r0, [r7, #8]
 8014c8c:	f7fe fc27 	bl	80134de <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8014c90:	6839      	ldr	r1, [r7, #0]
 8014c92:	68b8      	ldr	r0, [r7, #8]
 8014c94:	f7fe fc31 	bl	80134fa <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8014c98:	69b9      	ldr	r1, [r7, #24]
 8014c9a:	68b8      	ldr	r0, [r7, #8]
 8014c9c:	f7fe fc03 	bl	80134a6 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8014ca0:	69f9      	ldr	r1, [r7, #28]
 8014ca2:	68b8      	ldr	r0, [r7, #8]
 8014ca4:	f7fe fc0d 	bl	80134c2 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8014ca8:	f7fd fc20 	bl	80124ec <_ZN12TestRegistry18getCurrentRegistryEv>
 8014cac:	4603      	mov	r3, r0
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	3208      	adds	r2, #8
 8014cb2:	6812      	ldr	r2, [r2, #0]
 8014cb4:	68b9      	ldr	r1, [r7, #8]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	4790      	blx	r2
}
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3710      	adds	r7, #16
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	08028db8 	.word	0x08028db8

08014cc8 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	4a04      	ldr	r2, [pc, #16]	; (8014ce4 <_ZN13TestInstallerD1Ev+0x1c>)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	601a      	str	r2, [r3, #0]
{
}
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	4618      	mov	r0, r3
 8014cda:	370c      	adds	r7, #12
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr
 8014ce4:	08028db8 	.word	0x08028db8

08014ce8 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
}
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7ff ffe9 	bl	8014cc8 <_ZN13TestInstallerD1Ev>
 8014cf6:	2104      	movs	r1, #4
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7f5 fd91 	bl	800a820 <_ZdlPvj>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	4618      	mov	r0, r3
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d10a      	bne.n	8014d2e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d105      	bne.n	8014d2e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014d22:	4805      	ldr	r0, [pc, #20]	; (8014d38 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8014d24:	f7ff fe38 	bl	8014998 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8014d28:	4804      	ldr	r0, [pc, #16]	; (8014d3c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8014d2a:	f7ff fdd5 	bl	80148d8 <_ZN20NormalTestTerminatorD1Ev>
}
 8014d2e:	bf00      	nop
 8014d30:	3708      	adds	r7, #8
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	20000090 	.word	0x20000090
 8014d3c:	2000008c 	.word	0x2000008c

08014d40 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8014d40:	b580      	push	{r7, lr}
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d48:	2001      	movs	r0, #1
 8014d4a:	f7ff ffdd 	bl	8014d08 <_Z41__static_initialization_and_destruction_0ii>
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8014d50:	b580      	push	{r7, lr}
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d58:	2000      	movs	r0, #0
 8014d5a:	f7ff ffd5 	bl	8014d08 <_Z41__static_initialization_and_destruction_0ii>
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8014d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	ed87 0b00 	vstr	d0, [r7]
 8014d6a:	683c      	ldr	r4, [r7, #0]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8014d72:	2301      	movs	r3, #1
 8014d74:	461e      	mov	r6, r3
 8014d76:	f04f 32ff 	mov.w	r2, #4294967295
 8014d7a:	4b10      	ldr	r3, [pc, #64]	; (8014dbc <_ZSt5isinfd+0x5c>)
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	4629      	mov	r1, r5
 8014d80:	f7eb fd02 	bl	8000788 <__aeabi_dcmpun>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d10b      	bne.n	8014da2 <_ZSt5isinfd+0x42>
 8014d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8e:	4b0b      	ldr	r3, [pc, #44]	; (8014dbc <_ZSt5isinfd+0x5c>)
 8014d90:	4620      	mov	r0, r4
 8014d92:	4629      	mov	r1, r5
 8014d94:	f7eb fcda 	bl	800074c <__aeabi_dcmple>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d101      	bne.n	8014da2 <_ZSt5isinfd+0x42>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	461e      	mov	r6, r3
 8014da2:	b2f3      	uxtb	r3, r6
 8014da4:	f083 0301 	eor.w	r3, r3, #1
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	bf14      	ite	ne
 8014dae:	2301      	movne	r3, #1
 8014db0:	2300      	moveq	r3, #0
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	4618      	mov	r0, r3
 8014db6:	370c      	adds	r7, #12
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dbc:	7fefffff 	.word	0x7fefffff

08014dc0 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8014dc0:	b590      	push	{r4, r7, lr}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	ed87 0b00 	vstr	d0, [r7]
 8014dca:	2301      	movs	r3, #1
 8014dcc:	461c      	mov	r4, r3
 8014dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014dd6:	f7eb fcd7 	bl	8000788 <__aeabi_dcmpun>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <_ZSt5isnand+0x24>
 8014de0:	2300      	movs	r3, #0
 8014de2:	461c      	mov	r4, r3
 8014de4:	b2e3      	uxtb	r3, r4
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	bf14      	ite	ne
 8014dea:	2301      	movne	r3, #1
 8014dec:	2300      	moveq	r3, #0
 8014dee:	b2db      	uxtb	r3, r3
 8014df0:	4618      	mov	r0, r3
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd90      	pop	{r4, r7, pc}

08014df8 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8014df8:	b590      	push	{r4, r7, lr}
 8014dfa:	b095      	sub	sp, #84	; 0x54
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	60f8      	str	r0, [r7, #12]
 8014e00:	60b9      	str	r1, [r7, #8]
 8014e02:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	3334      	adds	r3, #52	; 0x34
 8014e0a:	681c      	ldr	r4, [r3, #0]
 8014e0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e10:	490f      	ldr	r1, [pc, #60]	; (8014e50 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7f8 f8b3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8014e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8014e1c:	f107 0314 	add.w	r3, r7, #20
 8014e20:	68f9      	ldr	r1, [r7, #12]
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7f9 ff0a 	bl	800ec3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8014e28:	f107 0314 	add.w	r3, r7, #20
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	47a0      	blx	r4
 8014e32:	f107 0314 	add.w	r3, r7, #20
 8014e36:	4618      	mov	r0, r3
 8014e38:	f7f9 ffc0 	bl	800edbc <_ZN11TestFailureD1Ev>
 8014e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7f8 fc54 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8014e46:	bf00      	nop
 8014e48:	3754      	adds	r7, #84	; 0x54
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd90      	pop	{r4, r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	08025534 	.word	0x08025534

08014e54 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8014e54:	b480      	push	{r7}
 8014e56:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8014e58:	2301      	movs	r3, #1
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr

08014e64 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
 8014e6c:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8014e6e:	4b13      	ldr	r3, [pc, #76]	; (8014ebc <PlatformSpecificSetJmpImplementation+0x58>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	225c      	movs	r2, #92	; 0x5c
 8014e74:	fb02 f303 	mul.w	r3, r2, r3
 8014e78:	4a11      	ldr	r2, [pc, #68]	; (8014ec0 <PlatformSpecificSetJmpImplementation+0x5c>)
 8014e7a:	4413      	add	r3, r2
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7eb f9cf 	bl	8000220 <setjmp>
 8014e82:	4603      	mov	r3, r0
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	bf0c      	ite	eq
 8014e88:	2301      	moveq	r3, #1
 8014e8a:	2300      	movne	r3, #0
 8014e8c:	b2db      	uxtb	r3, r3
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00e      	beq.n	8014eb0 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8014e92:	4b0a      	ldr	r3, [pc, #40]	; (8014ebc <PlatformSpecificSetJmpImplementation+0x58>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	3301      	adds	r3, #1
 8014e98:	4a08      	ldr	r2, [pc, #32]	; (8014ebc <PlatformSpecificSetJmpImplementation+0x58>)
 8014e9a:	6013      	str	r3, [r2, #0]
        function(data);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6838      	ldr	r0, [r7, #0]
 8014ea0:	4798      	blx	r3
        jmp_buf_index--;
 8014ea2:	4b06      	ldr	r3, [pc, #24]	; (8014ebc <PlatformSpecificSetJmpImplementation+0x58>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	4a04      	ldr	r2, [pc, #16]	; (8014ebc <PlatformSpecificSetJmpImplementation+0x58>)
 8014eaa:	6013      	str	r3, [r2, #0]
        return 1;
 8014eac:	2301      	movs	r3, #1
 8014eae:	e000      	b.n	8014eb2 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8014eb0:	2300      	movs	r3, #0
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3708      	adds	r7, #8
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	20000ebc 	.word	0x20000ebc
 8014ec0:	20000b24 	.word	0x20000b24

08014ec4 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8014ec8:	4b07      	ldr	r3, [pc, #28]	; (8014ee8 <PlatformSpecificLongJmpImplementation+0x24>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	4a06      	ldr	r2, [pc, #24]	; (8014ee8 <PlatformSpecificLongJmpImplementation+0x24>)
 8014ed0:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8014ed2:	4b05      	ldr	r3, [pc, #20]	; (8014ee8 <PlatformSpecificLongJmpImplementation+0x24>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	225c      	movs	r2, #92	; 0x5c
 8014ed8:	fb02 f303 	mul.w	r3, r2, r3
 8014edc:	4a03      	ldr	r2, [pc, #12]	; (8014eec <PlatformSpecificLongJmpImplementation+0x28>)
 8014ede:	4413      	add	r3, r2
 8014ee0:	2101      	movs	r1, #1
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7eb f9a2 	bl	800022c <longjmp>
 8014ee8:	20000ebc 	.word	0x20000ebc
 8014eec:	20000b24 	.word	0x20000b24

08014ef0 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8014ef4:	2300      	movs	r3, #0
#endif
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr

08014f00 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8014f06:	2000      	movs	r0, #0
 8014f08:	f00e ec4e 	blx	80237a8 <__time_veneer>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	460b      	mov	r3, r1
 8014f10:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8014f14:	463b      	mov	r3, r7
 8014f16:	4618      	mov	r0, r3
 8014f18:	f00b fb7a 	bl	8020610 <localtime>
 8014f1c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	4a04      	ldr	r2, [pc, #16]	; (8014f34 <TimeStringImplementation+0x34>)
 8014f22:	2150      	movs	r1, #80	; 0x50
 8014f24:	4804      	ldr	r0, [pc, #16]	; (8014f38 <TimeStringImplementation+0x38>)
 8014f26:	f00c fc7b 	bl	8021820 <strftime>
    return dateTime;
 8014f2a:	4b03      	ldr	r3, [pc, #12]	; (8014f38 <TimeStringImplementation+0x38>)
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3710      	adds	r7, #16
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}
 8014f34:	08025570 	.word	0x08025570
 8014f38:	20000ec0 	.word	0x20000ec0

08014f3c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8014f46:	6839      	ldr	r1, [r7, #0]
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f00b f997 	bl	802027c <fopen>
 8014f4e:	4603      	mov	r3, r0
#endif
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8014f62:	6839      	ldr	r1, [r7, #0]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f00b f9f7 	bl	8020358 <fputs>
}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f00a ff78 	bl	801fe70 <fclose>
}
 8014f80:	bf00      	nop
 8014f82:	3708      	adds	r7, #8
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}

08014f88 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  fflush(stdout);
 8014f8c:	4b03      	ldr	r3, [pc, #12]	; (8014f9c <PlatformSpecificFlushImplementation+0x14>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f00b f836 	bl	8020004 <fflush>
}
 8014f98:	bf00      	nop
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	20000108 	.word	0x20000108

08014fa0 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8014faa:	ed97 0b00 	vldr	d0, [r7]
 8014fae:	f7ff ff07 	bl	8014dc0 <_ZSt5isnand>
 8014fb2:	4603      	mov	r3, r0
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3708      	adds	r7, #8
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b082      	sub	sp, #8
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8014fc6:	ed97 0b00 	vldr	d0, [r7]
 8014fca:	f7ff fec9 	bl	8014d60 <_ZSt5isinfd>
 8014fce:	4603      	mov	r3, r0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3708      	adds	r7, #8
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8014fd8:	b480      	push	{r7}
 8014fda:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8014fdc:	2300      	movs	r3, #0
#endif

}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe6:	4770      	bx	lr

08014fe8 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b083      	sub	sp, #12
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
}
 8014ff0:	bf00      	nop
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	b083      	sub	sp, #12
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
}
 8015004:	bf00      	nop
 8015006:	370c      	adds	r7, #12
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
}
 8015018:	bf00      	nop
 801501a:	370c      	adds	r7, #12
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr

08015024 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	60b9      	str	r1, [r7, #8]
 801502e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8015030:	4a25      	ldr	r2, [pc, #148]	; (80150c8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	601a      	str	r2, [r3, #0]
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	68ba      	ldr	r2, [r7, #8]
 801503a:	605a      	str	r2, [r3, #4]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	609a      	str	r2, [r3, #8]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2200      	movs	r2, #0
 8015046:	731a      	strb	r2, [r3, #12]
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2200      	movs	r2, #0
 801504c:	735a      	strb	r2, [r3, #13]
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	2200      	movs	r2, #0
 8015052:	739a      	strb	r2, [r3, #14]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2200      	movs	r2, #0
 8015058:	73da      	strb	r2, [r3, #15]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2200      	movs	r2, #0
 801505e:	741a      	strb	r2, [r3, #16]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2200      	movs	r2, #0
 8015064:	745a      	strb	r2, [r3, #17]
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2200      	movs	r2, #0
 801506a:	749a      	strb	r2, [r3, #18]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2200      	movs	r2, #0
 8015070:	74da      	strb	r2, [r3, #19]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2200      	movs	r2, #0
 8015076:	751a      	strb	r2, [r3, #20]
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	2200      	movs	r2, #0
 801507c:	755a      	strb	r2, [r3, #21]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2200      	movs	r2, #0
 8015082:	759a      	strb	r2, [r3, #22]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	2200      	movs	r2, #0
 8015088:	75da      	strb	r2, [r3, #23]
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2200      	movs	r2, #0
 801508e:	761a      	strb	r2, [r3, #24]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2201      	movs	r2, #1
 8015094:	61da      	str	r2, [r3, #28]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	621a      	str	r2, [r3, #32]
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2200      	movs	r2, #0
 80150a0:	625a      	str	r2, [r3, #36]	; 0x24
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2200      	movs	r2, #0
 80150a6:	629a      	str	r2, [r3, #40]	; 0x28
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	2200      	movs	r2, #0
 80150ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	3330      	adds	r3, #48	; 0x30
 80150b4:	4905      	ldr	r1, [pc, #20]	; (80150cc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7f7 ff61 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
{
}
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	4618      	mov	r0, r3
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	08028ee4 	.word	0x08028ee4
 80150cc:	08025584 	.word	0x08025584

080150d0 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	4618      	mov	r0, r3
 80150dc:	f7f8 fb07 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	4618      	mov	r0, r3
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
	...

080150ec <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80150ec:	b590      	push	{r4, r7, lr}
 80150ee:	b085      	sub	sp, #20
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	4a20      	ldr	r2, [pc, #128]	; (8015178 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d015      	beq.n	801512e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015106:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801510c:	4618      	mov	r0, r3
 801510e:	f00a fda4 	bl	801fc5a <_ZNK10TestFilter7getNextEv>
 8015112:	4602      	mov	r2, r0
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8015118:	68fc      	ldr	r4, [r7, #12]
 801511a:	2c00      	cmp	r4, #0
 801511c:	d0ed      	beq.n	80150fa <_ZN20CommandLineArgumentsD1Ev+0xe>
 801511e:	4620      	mov	r0, r4
 8015120:	f7ff ffd6 	bl	80150d0 <_ZN10TestFilterD1Ev>
 8015124:	2110      	movs	r1, #16
 8015126:	4620      	mov	r0, r4
 8015128:	f7f5 fb7a 	bl	800a820 <_ZdlPvj>
    while(groupFilters_) {
 801512c:	e7e5      	b.n	80150fa <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015132:	2b00      	cmp	r3, #0
 8015134:	d015      	beq.n	8015162 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801513a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015140:	4618      	mov	r0, r3
 8015142:	f00a fd8a 	bl	801fc5a <_ZNK10TestFilter7getNextEv>
 8015146:	4602      	mov	r2, r0
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 801514c:	68bc      	ldr	r4, [r7, #8]
 801514e:	2c00      	cmp	r4, #0
 8015150:	d0ed      	beq.n	801512e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8015152:	4620      	mov	r0, r4
 8015154:	f7ff ffbc 	bl	80150d0 <_ZN10TestFilterD1Ev>
 8015158:	2110      	movs	r1, #16
 801515a:	4620      	mov	r0, r4
 801515c:	f7f5 fb60 	bl	800a820 <_ZdlPvj>
    while(nameFilters_) {
 8015160:	e7e5      	b.n	801512e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	3330      	adds	r3, #48	; 0x30
 8015166:	4618      	mov	r0, r3
 8015168:	f7f8 fac1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
}
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	3714      	adds	r7, #20
 8015172:	46bd      	mov	sp, r7
 8015174:	bd90      	pop	{r4, r7, pc}
 8015176:	bf00      	nop
 8015178:	08028ee4 	.word	0x08028ee4

0801517c <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
}
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f7ff ffb1 	bl	80150ec <_ZN20CommandLineArgumentsD1Ev>
 801518a:	2138      	movs	r1, #56	; 0x38
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7f5 fb47 	bl	800a820 <_ZdlPvj>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	4618      	mov	r0, r3
 8015196:	3708      	adds	r7, #8
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 801519c:	b5b0      	push	{r4, r5, r7, lr}
 801519e:	b0be      	sub	sp, #248	; 0xf8
 80151a0:	af02      	add	r7, sp, #8
 80151a2:	6078      	str	r0, [r7, #4]
 80151a4:	6039      	str	r1, [r7, #0]
 80151a6:	2400      	movs	r4, #0
    bool correctParameters = true;
 80151a8:	2301      	movs	r3, #1
 80151aa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80151ae:	2301      	movs	r3, #1
 80151b0:	613b      	str	r3, [r7, #16]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	685a      	ldr	r2, [r3, #4]
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	f340 83a4 	ble.w	8015906 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	689a      	ldr	r2, [r3, #8]
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	009b      	lsls	r3, r3, #2
 80151c6:	4413      	add	r3, r2
 80151c8:	681a      	ldr	r2, [r3, #0]
 80151ca:	f107 0308 	add.w	r3, r7, #8
 80151ce:	4611      	mov	r1, r2
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7f7 fed4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80151d6:	f107 0314 	add.w	r3, r7, #20
 80151da:	49c8      	ldr	r1, [pc, #800]	; (80154fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80151dc:	4618      	mov	r0, r3
 80151de:	f7f7 fece 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80151e2:	f107 0214 	add.w	r2, r7, #20
 80151e6:	f107 0308 	add.w	r3, r7, #8
 80151ea:	4611      	mov	r1, r2
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f8 fa8a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80151f2:	4603      	mov	r3, r0
 80151f4:	461d      	mov	r5, r3
 80151f6:	f107 0314 	add.w	r3, r7, #20
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7f8 fa77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015200:	2d00      	cmp	r5, #0
 8015202:	d006      	beq.n	8015212 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2201      	movs	r2, #1
 8015208:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 801520a:	2300      	movs	r3, #0
 801520c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015210:	e366      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8015212:	f107 031c 	add.w	r3, r7, #28
 8015216:	49ba      	ldr	r1, [pc, #744]	; (8015500 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8015218:	4618      	mov	r0, r3
 801521a:	f7f7 feb0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801521e:	f107 021c 	add.w	r2, r7, #28
 8015222:	f107 0308 	add.w	r3, r7, #8
 8015226:	4611      	mov	r1, r2
 8015228:	4618      	mov	r0, r3
 801522a:	f7f8 fa6c 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801522e:	4603      	mov	r3, r0
 8015230:	461d      	mov	r5, r3
 8015232:	f107 031c 	add.w	r3, r7, #28
 8015236:	4618      	mov	r0, r3
 8015238:	f7f8 fa59 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801523c:	2d00      	cmp	r5, #0
 801523e:	d003      	beq.n	8015248 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2201      	movs	r2, #1
 8015244:	735a      	strb	r2, [r3, #13]
 8015246:	e34b      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8015248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801524c:	49ad      	ldr	r1, [pc, #692]	; (8015504 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801524e:	4618      	mov	r0, r3
 8015250:	f7f7 fe95 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015254:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015258:	f107 0308 	add.w	r3, r7, #8
 801525c:	4611      	mov	r1, r2
 801525e:	4618      	mov	r0, r3
 8015260:	f7f8 fa51 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8015264:	4603      	mov	r3, r0
 8015266:	461d      	mov	r5, r3
 8015268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801526c:	4618      	mov	r0, r3
 801526e:	f7f8 fa3e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015272:	2d00      	cmp	r5, #0
 8015274:	d003      	beq.n	801527e <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2201      	movs	r2, #1
 801527a:	739a      	strb	r2, [r3, #14]
 801527c:	e330      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801527e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015282:	49a1      	ldr	r1, [pc, #644]	; (8015508 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8015284:	4618      	mov	r0, r3
 8015286:	f7f7 fe7a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801528a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801528e:	f107 0308 	add.w	r3, r7, #8
 8015292:	4611      	mov	r1, r2
 8015294:	4618      	mov	r0, r3
 8015296:	f7f8 fa36 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801529a:	4603      	mov	r3, r0
 801529c:	461d      	mov	r5, r3
 801529e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7f8 fa23 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80152a8:	2d00      	cmp	r5, #0
 80152aa:	d003      	beq.n	80152b4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2201      	movs	r2, #1
 80152b0:	73da      	strb	r2, [r3, #15]
 80152b2:	e315      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80152b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152b8:	4994      	ldr	r1, [pc, #592]	; (801550c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7f7 fe5f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80152c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80152c4:	f107 0308 	add.w	r3, r7, #8
 80152c8:	4611      	mov	r1, r2
 80152ca:	4618      	mov	r0, r3
 80152cc:	f7f8 fa1b 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80152d0:	4603      	mov	r3, r0
 80152d2:	461d      	mov	r5, r3
 80152d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152d8:	4618      	mov	r0, r3
 80152da:	f7f8 fa08 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80152de:	2d00      	cmp	r5, #0
 80152e0:	d003      	beq.n	80152ea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2201      	movs	r2, #1
 80152e6:	741a      	strb	r2, [r3, #16]
 80152e8:	e2fa      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80152ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80152ee:	4988      	ldr	r1, [pc, #544]	; (8015510 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7f7 fe44 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80152f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80152fa:	f107 0308 	add.w	r3, r7, #8
 80152fe:	4611      	mov	r1, r2
 8015300:	4618      	mov	r0, r3
 8015302:	f7f8 fa00 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8015306:	4603      	mov	r3, r0
 8015308:	461d      	mov	r5, r3
 801530a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801530e:	4618      	mov	r0, r3
 8015310:	f7f8 f9ed 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015314:	2d00      	cmp	r5, #0
 8015316:	d003      	beq.n	8015320 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2201      	movs	r2, #1
 801531c:	755a      	strb	r2, [r3, #21]
 801531e:	e2df      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8015320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015324:	497b      	ldr	r1, [pc, #492]	; (8015514 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8015326:	4618      	mov	r0, r3
 8015328:	f7f7 fe29 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801532c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015330:	f107 0308 	add.w	r3, r7, #8
 8015334:	4611      	mov	r1, r2
 8015336:	4618      	mov	r0, r3
 8015338:	f7f8 f9e5 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801533c:	4603      	mov	r3, r0
 801533e:	461d      	mov	r5, r3
 8015340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015344:	4618      	mov	r0, r3
 8015346:	f7f8 f9d2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801534a:	2d00      	cmp	r5, #0
 801534c:	d003      	beq.n	8015356 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2201      	movs	r2, #1
 8015352:	745a      	strb	r2, [r3, #17]
 8015354:	e2c4      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8015356:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801535a:	496f      	ldr	r1, [pc, #444]	; (8015518 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 801535c:	4618      	mov	r0, r3
 801535e:	f7f7 fe0e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015362:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015366:	f107 0308 	add.w	r3, r7, #8
 801536a:	4611      	mov	r1, r2
 801536c:	4618      	mov	r0, r3
 801536e:	f7f8 f9ca 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8015372:	4603      	mov	r3, r0
 8015374:	461d      	mov	r5, r3
 8015376:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801537a:	4618      	mov	r0, r3
 801537c:	f7f8 f9b7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015380:	2d00      	cmp	r5, #0
 8015382:	d003      	beq.n	801538c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2201      	movs	r2, #1
 8015388:	749a      	strb	r2, [r3, #18]
 801538a:	e2a9      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 801538c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015390:	4962      	ldr	r1, [pc, #392]	; (801551c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8015392:	4618      	mov	r0, r3
 8015394:	f7f7 fdf3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015398:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801539c:	f107 0308 	add.w	r3, r7, #8
 80153a0:	4611      	mov	r1, r2
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7f8 f9af 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80153a8:	4603      	mov	r3, r0
 80153aa:	461d      	mov	r5, r3
 80153ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7f8 f99c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80153b6:	2d00      	cmp	r5, #0
 80153b8:	d003      	beq.n	80153c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2201      	movs	r2, #1
 80153be:	74da      	strb	r2, [r3, #19]
 80153c0:	e28e      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80153c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80153c6:	4956      	ldr	r1, [pc, #344]	; (8015520 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7f7 fdd8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80153ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80153d2:	f107 0308 	add.w	r3, r7, #8
 80153d6:	4611      	mov	r1, r2
 80153d8:	4618      	mov	r0, r3
 80153da:	f7f8 f994 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80153de:	4603      	mov	r3, r0
 80153e0:	461d      	mov	r5, r3
 80153e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7f8 f981 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80153ec:	2d00      	cmp	r5, #0
 80153ee:	d003      	beq.n	80153f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2201      	movs	r2, #1
 80153f4:	751a      	strb	r2, [r3, #20]
 80153f6:	e273      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 80153f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80153fc:	4949      	ldr	r1, [pc, #292]	; (8015524 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 80153fe:	4618      	mov	r0, r3
 8015400:	f7f7 fdbd 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015404:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015408:	f107 0308 	add.w	r3, r7, #8
 801540c:	4611      	mov	r1, r2
 801540e:	4618      	mov	r0, r3
 8015410:	f7f8 f979 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8015414:	4603      	mov	r3, r0
 8015416:	461d      	mov	r5, r3
 8015418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801541c:	4618      	mov	r0, r3
 801541e:	f7f8 f966 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015422:	2d00      	cmp	r5, #0
 8015424:	d003      	beq.n	801542e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	2201      	movs	r2, #1
 801542a:	759a      	strb	r2, [r3, #22]
 801542c:	e258      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801542e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015432:	493d      	ldr	r1, [pc, #244]	; (8015528 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8015434:	4618      	mov	r0, r3
 8015436:	f7f7 fda2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801543a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801543e:	f107 0308 	add.w	r3, r7, #8
 8015442:	4611      	mov	r1, r2
 8015444:	4618      	mov	r0, r3
 8015446:	f7f7 fe5e 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 801544a:	4603      	mov	r3, r0
 801544c:	461d      	mov	r5, r3
 801544e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015452:	4618      	mov	r0, r3
 8015454:	f7f8 f94b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015458:	2d00      	cmp	r5, #0
 801545a:	d009      	beq.n	8015470 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6859      	ldr	r1, [r3, #4]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	689a      	ldr	r2, [r3, #8]
 8015464:	f107 0310 	add.w	r3, r7, #16
 8015468:	6878      	ldr	r0, [r7, #4]
 801546a:	f000 fb33 	bl	8015ad4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801546e:	e237      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8015470:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015474:	492d      	ldr	r1, [pc, #180]	; (801552c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8015476:	4618      	mov	r0, r3
 8015478:	f7f7 fd81 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801547c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8015480:	f107 0308 	add.w	r3, r7, #8
 8015484:	4611      	mov	r1, r2
 8015486:	4618      	mov	r0, r3
 8015488:	f7f7 fe3d 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 801548c:	4603      	mov	r3, r0
 801548e:	461d      	mov	r5, r3
 8015490:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015494:	4618      	mov	r0, r3
 8015496:	f7f8 f92a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801549a:	2d00      	cmp	r5, #0
 801549c:	d009      	beq.n	80154b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6859      	ldr	r1, [r3, #4]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	689a      	ldr	r2, [r3, #8]
 80154a6:	f107 0310 	add.w	r3, r7, #16
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f000 fc40 	bl	8015d30 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80154b0:	e216      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80154b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80154b6:	491e      	ldr	r1, [pc, #120]	; (8015530 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7f7 fd60 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80154be:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80154c2:	f107 0308 	add.w	r3, r7, #8
 80154c6:	4611      	mov	r1, r2
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7f7 fe1c 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80154ce:	4603      	mov	r3, r0
 80154d0:	461d      	mov	r5, r3
 80154d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7f8 f909 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80154dc:	2d00      	cmp	r5, #0
 80154de:	d029      	beq.n	8015534 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6859      	ldr	r1, [r3, #4]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	689a      	ldr	r2, [r3, #8]
 80154e8:	f107 0310 	add.w	r3, r7, #16
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f000 fc61 	bl	8015db4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80154f2:	4603      	mov	r3, r0
 80154f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80154f8:	e1f2      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 80154fa:	bf00      	nop
 80154fc:	08025588 	.word	0x08025588
 8015500:	0802558c 	.word	0x0802558c
 8015504:	08025590 	.word	0x08025590
 8015508:	08025594 	.word	0x08025594
 801550c:	08025598 	.word	0x08025598
 8015510:	0802559c 	.word	0x0802559c
 8015514:	080255a0 	.word	0x080255a0
 8015518:	080255a4 	.word	0x080255a4
 801551c:	080255a8 	.word	0x080255a8
 8015520:	080255ac 	.word	0x080255ac
 8015524:	080255b0 	.word	0x080255b0
 8015528:	080255b4 	.word	0x080255b4
 801552c:	080255b8 	.word	0x080255b8
 8015530:	080255bc 	.word	0x080255bc
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8015534:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015538:	49b9      	ldr	r1, [pc, #740]	; (8015820 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 801553a:	4618      	mov	r0, r3
 801553c:	f7f7 fd1f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015540:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8015544:	f107 0308 	add.w	r3, r7, #8
 8015548:	4611      	mov	r1, r2
 801554a:	4618      	mov	r0, r3
 801554c:	f7f7 fddb 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015550:	4603      	mov	r3, r0
 8015552:	461d      	mov	r5, r3
 8015554:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015558:	4618      	mov	r0, r3
 801555a:	f7f8 f8c8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801555e:	2d00      	cmp	r5, #0
 8015560:	d009      	beq.n	8015576 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6859      	ldr	r1, [r3, #4]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	689a      	ldr	r2, [r3, #8]
 801556a:	f107 0310 	add.w	r3, r7, #16
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f000 fccc 	bl	8015f0c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8015574:	e1b4      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8015576:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801557a:	49aa      	ldr	r1, [pc, #680]	; (8015824 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 801557c:	4618      	mov	r0, r3
 801557e:	f7f7 fcfe 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015582:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8015586:	f107 0308 	add.w	r3, r7, #8
 801558a:	4611      	mov	r1, r2
 801558c:	4618      	mov	r0, r3
 801558e:	f7f7 fdba 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015592:	4603      	mov	r3, r0
 8015594:	461d      	mov	r5, r3
 8015596:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801559a:	4618      	mov	r0, r3
 801559c:	f7f8 f8a7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80155a0:	2d00      	cmp	r5, #0
 80155a2:	d009      	beq.n	80155b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6859      	ldr	r1, [r3, #4]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	689a      	ldr	r2, [r3, #8]
 80155ac:	f107 0310 	add.w	r3, r7, #16
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f000 fcf1 	bl	8015f98 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80155b6:	e193      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80155b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80155bc:	499a      	ldr	r1, [pc, #616]	; (8015828 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80155be:	4618      	mov	r0, r3
 80155c0:	f7f7 fcdd 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80155c4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80155c8:	f107 0308 	add.w	r3, r7, #8
 80155cc:	4611      	mov	r1, r2
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7f7 fd99 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80155d4:	4603      	mov	r3, r0
 80155d6:	461d      	mov	r5, r3
 80155d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f8 f886 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80155e2:	2d00      	cmp	r5, #0
 80155e4:	d009      	beq.n	80155fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6859      	ldr	r1, [r3, #4]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	689a      	ldr	r2, [r3, #8]
 80155ee:	f107 0310 	add.w	r3, r7, #16
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f000 fd16 	bl	8016024 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 80155f8:	e172      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 80155fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80155fe:	498b      	ldr	r1, [pc, #556]	; (801582c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015600:	4618      	mov	r0, r3
 8015602:	f7f7 fcbc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015606:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801560a:	f107 0308 	add.w	r3, r7, #8
 801560e:	4611      	mov	r1, r2
 8015610:	4618      	mov	r0, r3
 8015612:	f7f7 fd78 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015616:	4603      	mov	r3, r0
 8015618:	461d      	mov	r5, r3
 801561a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801561e:	4618      	mov	r0, r3
 8015620:	f7f8 f865 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015624:	2d00      	cmp	r5, #0
 8015626:	d009      	beq.n	801563c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6859      	ldr	r1, [r3, #4]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	689a      	ldr	r2, [r3, #8]
 8015630:	f107 0310 	add.w	r3, r7, #16
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f000 fd3d 	bl	80160b4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801563a:	e151      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 801563c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015640:	497b      	ldr	r1, [pc, #492]	; (8015830 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8015642:	4618      	mov	r0, r3
 8015644:	f7f7 fc9b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015648:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801564c:	f107 0308 	add.w	r3, r7, #8
 8015650:	4611      	mov	r1, r2
 8015652:	4618      	mov	r0, r3
 8015654:	f7f7 fd57 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015658:	4603      	mov	r3, r0
 801565a:	461d      	mov	r5, r3
 801565c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015660:	4618      	mov	r0, r3
 8015662:	f7f8 f844 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015666:	2d00      	cmp	r5, #0
 8015668:	d009      	beq.n	801567e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6859      	ldr	r1, [r3, #4]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	689a      	ldr	r2, [r3, #8]
 8015672:	f107 0310 	add.w	r3, r7, #16
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f000 fd5e 	bl	8016138 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 801567c:	e130      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 801567e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015682:	496c      	ldr	r1, [pc, #432]	; (8015834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8015684:	4618      	mov	r0, r3
 8015686:	f7f7 fc7a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801568a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 801568e:	f107 0308 	add.w	r3, r7, #8
 8015692:	4611      	mov	r1, r2
 8015694:	4618      	mov	r0, r3
 8015696:	f7f7 fd36 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 801569a:	4603      	mov	r3, r0
 801569c:	461d      	mov	r5, r3
 801569e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f8 f823 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80156a8:	2d00      	cmp	r5, #0
 80156aa:	d009      	beq.n	80156c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	6859      	ldr	r1, [r3, #4]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	689a      	ldr	r2, [r3, #8]
 80156b4:	f107 0310 	add.w	r3, r7, #16
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f000 fd83 	bl	80161c4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80156be:	e10f      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80156c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80156c4:	495c      	ldr	r1, [pc, #368]	; (8015838 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7f7 fc59 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80156cc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80156d0:	f107 0308 	add.w	r3, r7, #8
 80156d4:	4611      	mov	r1, r2
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7f7 fd15 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80156dc:	4603      	mov	r3, r0
 80156de:	461d      	mov	r5, r3
 80156e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7f8 f802 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80156ea:	2d00      	cmp	r5, #0
 80156ec:	d009      	beq.n	8015702 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6859      	ldr	r1, [r3, #4]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	689a      	ldr	r2, [r3, #8]
 80156f6:	f107 0310 	add.w	r3, r7, #16
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f000 fda8 	bl	8016250 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015700:	e0ee      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8015702:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015706:	494d      	ldr	r1, [pc, #308]	; (801583c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8015708:	4618      	mov	r0, r3
 801570a:	f7f7 fc38 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801570e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8015712:	f107 0308 	add.w	r3, r7, #8
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7f7 fcf4 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 801571e:	4603      	mov	r3, r0
 8015720:	461d      	mov	r5, r3
 8015722:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015726:	4618      	mov	r0, r3
 8015728:	f7f7 ffe1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801572c:	2d00      	cmp	r5, #0
 801572e:	d00c      	beq.n	801574a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	6859      	ldr	r1, [r3, #4]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	689a      	ldr	r2, [r3, #8]
 8015738:	f107 0310 	add.w	r3, r7, #16
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f000 fa29 	bl	8015b94 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8015742:	4603      	mov	r3, r0
 8015744:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015748:	e0ca      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801574a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801574e:	493c      	ldr	r1, [pc, #240]	; (8015840 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015750:	4618      	mov	r0, r3
 8015752:	f7f7 fc14 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015756:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801575a:	f107 0308 	add.w	r3, r7, #8
 801575e:	4611      	mov	r1, r2
 8015760:	4618      	mov	r0, r3
 8015762:	f7f7 fcd0 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015766:	4603      	mov	r3, r0
 8015768:	461d      	mov	r5, r3
 801576a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801576e:	4618      	mov	r0, r3
 8015770:	f7f7 ffbd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015774:	2d00      	cmp	r5, #0
 8015776:	d00b      	beq.n	8015790 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6859      	ldr	r1, [r3, #4]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	689a      	ldr	r2, [r3, #8]
 8015780:	f107 0310 	add.w	r3, r7, #16
 8015784:	482e      	ldr	r0, [pc, #184]	; (8015840 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015786:	9000      	str	r0, [sp, #0]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f000 fda9 	bl	80162e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 801578e:	e0a7      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015794:	492b      	ldr	r1, [pc, #172]	; (8015844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015796:	4618      	mov	r0, r3
 8015798:	f7f7 fbf1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801579c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80157a0:	f107 0308 	add.w	r3, r7, #8
 80157a4:	4611      	mov	r1, r2
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7f7 fcad 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80157ac:	4603      	mov	r3, r0
 80157ae:	461d      	mov	r5, r3
 80157b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7f7 ff9a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80157ba:	2d00      	cmp	r5, #0
 80157bc:	d00b      	beq.n	80157d6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6859      	ldr	r1, [r3, #4]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	689a      	ldr	r2, [r3, #8]
 80157c6:	f107 0310 	add.w	r3, r7, #16
 80157ca:	481e      	ldr	r0, [pc, #120]	; (8015844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80157cc:	9000      	str	r0, [sp, #0]
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f000 fd86 	bl	80162e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80157d4:	e084      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80157d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80157da:	491b      	ldr	r1, [pc, #108]	; (8015848 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80157dc:	4618      	mov	r0, r3
 80157de:	f7f7 fbce 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80157e2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80157e6:	f107 0308 	add.w	r3, r7, #8
 80157ea:	4611      	mov	r1, r2
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7f7 fc8a 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80157f2:	4603      	mov	r3, r0
 80157f4:	461d      	mov	r5, r3
 80157f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7f7 ff77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015800:	2d00      	cmp	r5, #0
 8015802:	d023      	beq.n	801584c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6859      	ldr	r1, [r3, #4]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	689a      	ldr	r2, [r3, #8]
 801580c:	f107 0310 	add.w	r3, r7, #16
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f000 fe3b 	bl	801648c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8015816:	4603      	mov	r3, r0
 8015818:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801581c:	e060      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801581e:	bf00      	nop
 8015820:	080255c0 	.word	0x080255c0
 8015824:	080255c4 	.word	0x080255c4
 8015828:	080255c8 	.word	0x080255c8
 801582c:	080255d0 	.word	0x080255d0
 8015830:	080255d4 	.word	0x080255d4
 8015834:	080255d8 	.word	0x080255d8
 8015838:	080255dc 	.word	0x080255dc
 801583c:	080255e4 	.word	0x080255e4
 8015840:	080255e8 	.word	0x080255e8
 8015844:	080255f0 	.word	0x080255f0
 8015848:	08025600 	.word	0x08025600
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 801584c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015850:	4930      	ldr	r1, [pc, #192]	; (8015914 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8015852:	4618      	mov	r0, r3
 8015854:	f7f7 fb93 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015858:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801585c:	f107 0308 	add.w	r3, r7, #8
 8015860:	4611      	mov	r1, r2
 8015862:	4618      	mov	r0, r3
 8015864:	f7f7 fc4f 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 8015868:	4603      	mov	r3, r0
 801586a:	461d      	mov	r5, r3
 801586c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015870:	4618      	mov	r0, r3
 8015872:	f7f7 ff3c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015876:	2d00      	cmp	r5, #0
 8015878:	d00e      	beq.n	8015898 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	331c      	adds	r3, #28
 8015880:	681d      	ldr	r5, [r3, #0]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6859      	ldr	r1, [r3, #4]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	689a      	ldr	r2, [r3, #8]
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	6838      	ldr	r0, [r7, #0]
 801588e:	47a8      	blx	r5
 8015890:	4603      	mov	r3, r0
 8015892:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015896:	e023      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8015898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801589c:	491e      	ldr	r1, [pc, #120]	; (8015918 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 801589e:	4618      	mov	r0, r3
 80158a0:	f7f7 fb6d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80158a4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80158a8:	f107 0308 	add.w	r3, r7, #8
 80158ac:	4611      	mov	r1, r2
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f7 fc29 	bl	800d106 <_ZNK12SimpleString10startsWithERKS_>
 80158b4:	4603      	mov	r3, r0
 80158b6:	461d      	mov	r5, r3
 80158b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f7 ff16 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80158c2:	2d00      	cmp	r5, #0
 80158c4:	d009      	beq.n	80158da <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6859      	ldr	r1, [r3, #4]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	689a      	ldr	r2, [r3, #8]
 80158ce:	f107 0310 	add.w	r3, r7, #16
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 fd98 	bl	8016408 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80158d8:	e002      	b.n	80158e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80158da:	2300      	movs	r3, #0
 80158dc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80158e0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d102      	bne.n	80158ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80158e8:	2400      	movs	r4, #0
 80158ea:	2500      	movs	r5, #0
 80158ec:	e000      	b.n	80158f0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80158ee:	2501      	movs	r5, #1
 80158f0:	f107 0308 	add.w	r3, r7, #8
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7f7 fefa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80158fa:	2d01      	cmp	r5, #1
 80158fc:	d104      	bne.n	8015908 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	3301      	adds	r3, #1
 8015902:	613b      	str	r3, [r7, #16]
 8015904:	e455      	b.n	80151b2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8015906:	2401      	movs	r4, #1
 8015908:	4623      	mov	r3, r4
}
 801590a:	4618      	mov	r0, r3
 801590c:	37f0      	adds	r7, #240	; 0xf0
 801590e:	46bd      	mov	sp, r7
 8015910:	bdb0      	pop	{r4, r5, r7, pc}
 8015912:	bf00      	nop
 8015914:	08025598 	.word	0x08025598
 8015918:	08025604 	.word	0x08025604

0801591c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8015924:	4b03      	ldr	r3, [pc, #12]	; (8015934 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8015926:	4618      	mov	r0, r3
 8015928:	370c      	adds	r7, #12
 801592a:	46bd      	mov	sp, r7
 801592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	08025608 	.word	0x08025608

08015938 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8015938:	b480      	push	{r7}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8015940:	4b03      	ldr	r3, [pc, #12]	; (8015950 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8015942:	4618      	mov	r0, r3
 8015944:	370c      	adds	r7, #12
 8015946:	46bd      	mov	sp, r7
 8015948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop
 8015950:	08025738 	.word	0x08025738

08015954 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	7b1b      	ldrb	r3, [r3, #12]
}
 8015960:	4618      	mov	r0, r3
 8015962:	370c      	adds	r7, #12
 8015964:	46bd      	mov	sp, r7
 8015966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596a:	4770      	bx	lr

0801596c <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 801596c:	b480      	push	{r7}
 801596e:	b083      	sub	sp, #12
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
    return verbose_;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	7b5b      	ldrb	r3, [r3, #13]
}
 8015978:	4618      	mov	r0, r3
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr

08015984 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	7b9b      	ldrb	r3, [r3, #14]
}
 8015990:	4618      	mov	r0, r3
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599a:	4770      	bx	lr

0801599c <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
    return color_;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	7bdb      	ldrb	r3, [r3, #15]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	370c      	adds	r7, #12
 80159ac:	46bd      	mov	sp, r7
 80159ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b2:	4770      	bx	lr

080159b4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80159b4:	b480      	push	{r7}
 80159b6:	b083      	sub	sp, #12
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	7c5b      	ldrb	r3, [r3, #17]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	370c      	adds	r7, #12
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr

080159cc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80159cc:	b480      	push	{r7}
 80159ce:	b083      	sub	sp, #12
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	7c9b      	ldrb	r3, [r3, #18]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	370c      	adds	r7, #12
 80159dc:	46bd      	mov	sp, r7
 80159de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e2:	4770      	bx	lr

080159e4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80159e4:	b480      	push	{r7}
 80159e6:	b083      	sub	sp, #12
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	7cdb      	ldrb	r3, [r3, #19]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	7d1b      	ldrb	r3, [r3, #20]
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	370c      	adds	r7, #12
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a12:	4770      	bx	lr

08015a14 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	7c1b      	ldrb	r3, [r3, #16]
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
    return repeat_;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	69db      	ldr	r3, [r3, #28]
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	370c      	adds	r7, #12
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a42:	4770      	bx	lr

08015a44 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
    return reversing_;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	7d5b      	ldrb	r3, [r3, #21]
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr

08015a5c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	7d9b      	ldrb	r3, [r3, #22]
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	370c      	adds	r7, #12
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8015a74:	b480      	push	{r7}
 8015a76:	b083      	sub	sp, #12
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	7ddb      	ldrb	r3, [r3, #23]
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	370c      	adds	r7, #12
 8015a84:	46bd      	mov	sp, r7
 8015a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8a:	4770      	bx	lr

08015a8c <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6a1b      	ldr	r3, [r3, #32]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr

08015aa4 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	370c      	adds	r7, #12
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aba:	4770      	bx	lr

08015abc <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8015ac8:	4618      	mov	r0, r3
 8015aca:	370c      	adds	r7, #12
 8015acc:	46bd      	mov	sp, r7
 8015ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad2:	4770      	bx	lr

08015ad4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b086      	sub	sp, #24
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	4413      	add	r3, r2
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	f107 0310 	add.w	r3, r7, #16
 8015af8:	4611      	mov	r1, r2
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f7 fa3f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8015b00:	f107 0310 	add.w	r3, r7, #16
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f7 fdd1 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b02      	cmp	r3, #2
 8015b0e:	bf8c      	ite	hi
 8015b10:	2301      	movhi	r3, #1
 8015b12:	2300      	movls	r3, #0
 8015b14:	b2db      	uxtb	r3, r3
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d00e      	beq.n	8015b38 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	4413      	add	r3, r2
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	3302      	adds	r3, #2
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f7 f824 	bl	800cb76 <_ZN12SimpleString4AtoIEPKc>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	461a      	mov	r2, r3
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	61da      	str	r2, [r3, #28]
 8015b36:	e01c      	b.n	8015b72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	68ba      	ldr	r2, [r7, #8]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	dd16      	ble.n	8015b72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	3301      	adds	r3, #1
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	4413      	add	r3, r2
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7f7 f80f 	bl	800cb76 <_ZN12SimpleString4AtoIEPKc>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	69db      	ldr	r3, [r3, #28]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d004      	beq.n	8015b72 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	1c5a      	adds	r2, r3, #1
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	69db      	ldr	r3, [r3, #28]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d102      	bne.n	8015b80 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	2202      	movs	r2, #2
 8015b7e:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8015b80:	f107 0310 	add.w	r3, r7, #16
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f7 fdb2 	bl	800d6ee <_ZN12SimpleStringD1Ev>

}
 8015b8a:	bf00      	nop
 8015b8c:	3718      	adds	r7, #24
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
	...

08015b94 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8015b94:	b590      	push	{r4, r7, lr}
 8015b96:	b089      	sub	sp, #36	; 0x24
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	60b9      	str	r1, [r7, #8]
 8015b9e:	607a      	str	r2, [r7, #4]
 8015ba0:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2201      	movs	r2, #1
 8015ba6:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8015ba8:	4b34      	ldr	r3, [pc, #208]	; (8015c7c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4798      	blx	r3
 8015bae:	4603      	mov	r3, r0
 8015bb0:	461a      	mov	r2, r3
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	6a1b      	ldr	r3, [r3, #32]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d104      	bne.n	8015bc8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	6a1b      	ldr	r3, [r3, #32]
 8015bc2:	1c5a      	adds	r2, r3, #1
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	4413      	add	r3, r2
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	f107 0314 	add.w	r3, r7, #20
 8015bd8:	4611      	mov	r1, r2
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f7 f9cf 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8015be0:	f107 0314 	add.w	r3, r7, #20
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7f7 fd61 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b02      	cmp	r3, #2
 8015bee:	bf8c      	ite	hi
 8015bf0:	2301      	movhi	r3, #1
 8015bf2:	2300      	movls	r3, #0
 8015bf4:	b2db      	uxtb	r3, r3
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d010      	beq.n	8015c1c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	4413      	add	r3, r2
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	3302      	adds	r3, #2
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f6 ff78 	bl	800cb04 <_ZN12SimpleString4AtoUEPKc>
 8015c14:	4602      	mov	r2, r0
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	621a      	str	r2, [r3, #32]
 8015c1a:	e01e      	b.n	8015c5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	3301      	adds	r3, #1
 8015c22:	68ba      	ldr	r2, [r7, #8]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	dd18      	ble.n	8015c5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	3301      	adds	r3, #1
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	4413      	add	r3, r2
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f6 ff64 	bl	800cb04 <_ZN12SimpleString4AtoUEPKc>
 8015c3c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d00a      	beq.n	8015c5a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2201      	movs	r2, #1
 8015c48:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	69fa      	ldr	r2, [r7, #28]
 8015c4e:	621a      	str	r2, [r3, #32]
            i++;
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	1c5a      	adds	r2, r3, #1
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	6a1b      	ldr	r3, [r3, #32]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	bf14      	ite	ne
 8015c62:	2301      	movne	r3, #1
 8015c64:	2300      	moveq	r3, #0
 8015c66:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8015c68:	f107 0314 	add.w	r3, r7, #20
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7f7 fd3e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8015c72:	4623      	mov	r3, r4
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3724      	adds	r7, #36	; 0x24
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd90      	pop	{r4, r7, pc}
 8015c7c:	200000a8 	.word	0x200000a8

08015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b088      	sub	sp, #32
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	607a      	str	r2, [r7, #4]
 8015c8c:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8015c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c90:	f7f7 fd0c 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8015c94:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8015c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	4413      	add	r3, r2
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	f107 0314 	add.w	r3, r7, #20
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7f7 f968 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8015cae:	f107 0314 	add.w	r3, r7, #20
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7f7 fcfa 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8015cb8:	4602      	mov	r2, r0
 8015cba:	69fb      	ldr	r3, [r7, #28]
 8015cbc:	4293      	cmp	r3, r2
 8015cbe:	bf34      	ite	cc
 8015cc0:	2301      	movcc	r3, #1
 8015cc2:	2300      	movcs	r3, #0
 8015cc4:	b2db      	uxtb	r3, r3
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d00c      	beq.n	8015ce4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8015cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	009b      	lsls	r3, r3, #2
 8015cd0:	683a      	ldr	r2, [r7, #0]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	4413      	add	r3, r2
 8015cda:	4619      	mov	r1, r3
 8015cdc:	68f8      	ldr	r0, [r7, #12]
 8015cde:	f7f7 f94e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015ce2:	e019      	b.n	8015d18 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8015ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	3301      	adds	r3, #1
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	dd0f      	ble.n	8015d10 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8015cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	1c5a      	adds	r2, r3, #1
 8015cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf8:	601a      	str	r2, [r3, #0]
 8015cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	009b      	lsls	r3, r3, #2
 8015d00:	683a      	ldr	r2, [r7, #0]
 8015d02:	4413      	add	r3, r2
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4619      	mov	r1, r3
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f7f7 f938 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015d0e:	e003      	b.n	8015d18 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8015d10:	4906      	ldr	r1, [pc, #24]	; (8015d2c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8015d12:	68f8      	ldr	r0, [r7, #12]
 8015d14:	f7f7 f933 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8015d18:	f107 0314 	add.w	r3, r7, #20
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7f7 fce6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	3720      	adds	r7, #32
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	08025584 	.word	0x08025584

08015d30 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8015d30:	b5b0      	push	{r4, r5, r7, lr}
 8015d32:	b08c      	sub	sp, #48	; 0x30
 8015d34:	af02      	add	r7, sp, #8
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	607a      	str	r2, [r7, #4]
 8015d3c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8015d3e:	f107 031c 	add.w	r3, r7, #28
 8015d42:	491a      	ldr	r1, [pc, #104]	; (8015dac <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7f7 f91a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015d4a:	f107 0014 	add.w	r0, r7, #20
 8015d4e:	f107 031c 	add.w	r3, r7, #28
 8015d52:	9301      	str	r3, [sp, #4]
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	9300      	str	r3, [sp, #0]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	68f9      	ldr	r1, [r7, #12]
 8015d5e:	f7ff ff8f 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015d62:	f107 0514 	add.w	r5, r7, #20
 8015d66:	f44f 7289 	mov.w	r2, #274	; 0x112
 8015d6a:	4911      	ldr	r1, [pc, #68]	; (8015db0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8015d6c:	2010      	movs	r0, #16
 8015d6e:	f7f4 fd43 	bl	800a7f8 <_ZnwjPKci>
 8015d72:	4604      	mov	r4, r0
 8015d74:	4629      	mov	r1, r5
 8015d76:	4620      	mov	r0, r4
 8015d78:	f009 ff40 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8015d7c:	627c      	str	r4, [r7, #36]	; 0x24
 8015d7e:	f107 0314 	add.w	r3, r7, #20
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7f7 fcb3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015d88:	f107 031c 	add.w	r3, r7, #28
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7f7 fcae 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d96:	4619      	mov	r1, r3
 8015d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d9a:	f009 ff4f 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8015d9e:	4602      	mov	r2, r0
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015da4:	bf00      	nop
 8015da6:	3728      	adds	r7, #40	; 0x28
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bdb0      	pop	{r4, r5, r7, pc}
 8015dac:	080255b8 	.word	0x080255b8
 8015db0:	08025f4c 	.word	0x08025f4c

08015db4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8015db4:	b5b0      	push	{r4, r5, r7, lr}
 8015db6:	b092      	sub	sp, #72	; 0x48
 8015db8:	af02      	add	r7, sp, #8
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
 8015dc0:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015dc6:	494e      	ldr	r1, [pc, #312]	; (8015f00 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f7f7 f8d8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015dce:	f107 0020 	add.w	r0, r7, #32
 8015dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015dd6:	9301      	str	r3, [sp, #4]
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	9300      	str	r3, [sp, #0]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	68ba      	ldr	r2, [r7, #8]
 8015de0:	68f9      	ldr	r1, [r7, #12]
 8015de2:	f7ff ff4d 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f7 fc7f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8015df0:	f107 0310 	add.w	r3, r7, #16
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7f8 fb8f 	bl	800e518 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8015dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015dfe:	4941      	ldr	r1, [pc, #260]	; (8015f04 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8015e00:	4618      	mov	r0, r3
 8015e02:	f7f7 f8bc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015e06:	f107 0210 	add.w	r2, r7, #16
 8015e0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015e0e:	f107 0320 	add.w	r3, r7, #32
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7f7 fa1f 	bl	800d256 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8015e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7f7 fc66 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8015e22:	f107 0310 	add.w	r3, r7, #16
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7f8 fc1b 	bl	800e662 <_ZNK22SimpleStringCollection4sizeEv>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b02      	cmp	r3, #2
 8015e30:	bf14      	ite	ne
 8015e32:	2301      	movne	r3, #1
 8015e34:	2300      	moveq	r3, #0
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d001      	beq.n	8015e40 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8015e3c:	2400      	movs	r4, #0
 8015e3e:	e04f      	b.n	8015ee0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8015e40:	f107 0310 	add.w	r3, r7, #16
 8015e44:	2100      	movs	r1, #0
 8015e46:	4618      	mov	r0, r3
 8015e48:	f7f8 fc18 	bl	800e67c <_ZN22SimpleStringCollectionixEj>
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	f107 0310 	add.w	r3, r7, #16
 8015e52:	2100      	movs	r1, #0
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7f8 fc11 	bl	800e67c <_ZN22SimpleStringCollectionixEj>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7f7 fc25 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 8015e62:	4603      	mov	r3, r0
 8015e64:	3b01      	subs	r3, #1
 8015e66:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	4621      	mov	r1, r4
 8015e6e:	f7f7 fd47 	bl	800d900 <_ZNK12SimpleString9subStringEjj>
 8015e72:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8015e76:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015e7a:	4923      	ldr	r1, [pc, #140]	; (8015f08 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015e7c:	2010      	movs	r0, #16
 8015e7e:	f7f4 fcbb 	bl	800a7f8 <_ZnwjPKci>
 8015e82:	4604      	mov	r4, r0
 8015e84:	4629      	mov	r1, r5
 8015e86:	4620      	mov	r0, r4
 8015e88:	f009 feb8 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e90:	4619      	mov	r1, r3
 8015e92:	4620      	mov	r0, r4
 8015e94:	f009 fed2 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8015e98:	4602      	mov	r2, r0
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8015e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7f7 fc23 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8015ea8:	f107 0310 	add.w	r3, r7, #16
 8015eac:	2101      	movs	r1, #1
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7f8 fbe4 	bl	800e67c <_ZN22SimpleStringCollectionixEj>
 8015eb4:	4605      	mov	r5, r0
 8015eb6:	f240 121f 	movw	r2, #287	; 0x11f
 8015eba:	4913      	ldr	r1, [pc, #76]	; (8015f08 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8015ebc:	2010      	movs	r0, #16
 8015ebe:	f7f4 fc9b 	bl	800a7f8 <_ZnwjPKci>
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	4629      	mov	r1, r5
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	f009 fe98 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ed0:	4619      	mov	r1, r3
 8015ed2:	4620      	mov	r0, r4
 8015ed4:	f009 feb2 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8015ede:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8015ee0:	f107 0310 	add.w	r3, r7, #16
 8015ee4:	4618      	mov	r0, r3
 8015ee6:	f7f8 fb8b 	bl	800e600 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8015eea:	f107 0320 	add.w	r3, r7, #32
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7f7 fbfd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015ef4:	4623      	mov	r3, r4
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3740      	adds	r7, #64	; 0x40
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bdb0      	pop	{r4, r5, r7, pc}
 8015efe:	bf00      	nop
 8015f00:	080255bc 	.word	0x080255bc
 8015f04:	08025f6c 	.word	0x08025f6c
 8015f08:	08025f4c 	.word	0x08025f4c

08015f0c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8015f0c:	b5b0      	push	{r4, r5, r7, lr}
 8015f0e:	b08c      	sub	sp, #48	; 0x30
 8015f10:	af02      	add	r7, sp, #8
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
 8015f18:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8015f1a:	f107 031c 	add.w	r3, r7, #28
 8015f1e:	491c      	ldr	r1, [pc, #112]	; (8015f90 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f7 f82c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015f26:	f107 0014 	add.w	r0, r7, #20
 8015f2a:	f107 031c 	add.w	r3, r7, #28
 8015f2e:	9301      	str	r3, [sp, #4]
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	9300      	str	r3, [sp, #0]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	68ba      	ldr	r2, [r7, #8]
 8015f38:	68f9      	ldr	r1, [r7, #12]
 8015f3a:	f7ff fea1 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015f3e:	f107 0514 	add.w	r5, r7, #20
 8015f42:	f240 1225 	movw	r2, #293	; 0x125
 8015f46:	4913      	ldr	r1, [pc, #76]	; (8015f94 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8015f48:	2010      	movs	r0, #16
 8015f4a:	f7f4 fc55 	bl	800a7f8 <_ZnwjPKci>
 8015f4e:	4604      	mov	r4, r0
 8015f50:	4629      	mov	r1, r5
 8015f52:	4620      	mov	r0, r4
 8015f54:	f009 fe52 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8015f58:	627c      	str	r4, [r7, #36]	; 0x24
 8015f5a:	f107 0314 	add.w	r3, r7, #20
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7f7 fbc5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015f64:	f107 031c 	add.w	r3, r7, #28
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7f7 fbc0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8015f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f70:	f009 fe7f 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f78:	4619      	mov	r1, r3
 8015f7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f7c:	f009 fe5e 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8015f80:	4602      	mov	r2, r0
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015f86:	bf00      	nop
 8015f88:	3728      	adds	r7, #40	; 0x28
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	080255c0 	.word	0x080255c0
 8015f94:	08025f4c 	.word	0x08025f4c

08015f98 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8015f98:	b5b0      	push	{r4, r5, r7, lr}
 8015f9a:	b08c      	sub	sp, #48	; 0x30
 8015f9c:	af02      	add	r7, sp, #8
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	60b9      	str	r1, [r7, #8]
 8015fa2:	607a      	str	r2, [r7, #4]
 8015fa4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8015fa6:	f107 031c 	add.w	r3, r7, #28
 8015faa:	491c      	ldr	r1, [pc, #112]	; (801601c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7f6 ffe6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8015fb2:	f107 0014 	add.w	r0, r7, #20
 8015fb6:	f107 031c 	add.w	r3, r7, #28
 8015fba:	9301      	str	r3, [sp, #4]
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	68ba      	ldr	r2, [r7, #8]
 8015fc4:	68f9      	ldr	r1, [r7, #12]
 8015fc6:	f7ff fe5b 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8015fca:	f107 0514 	add.w	r5, r7, #20
 8015fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015fd2:	4913      	ldr	r1, [pc, #76]	; (8016020 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8015fd4:	2010      	movs	r0, #16
 8015fd6:	f7f4 fc0f 	bl	800a7f8 <_ZnwjPKci>
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4629      	mov	r1, r5
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f009 fe0c 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8015fe4:	627c      	str	r4, [r7, #36]	; 0x24
 8015fe6:	f107 0314 	add.w	r3, r7, #20
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7f7 fb7f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8015ff0:	f107 031c 	add.w	r3, r7, #28
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7f7 fb7a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8015ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ffc:	f009 fe46 	bl	801fc8c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016004:	4619      	mov	r1, r3
 8016006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016008:	f009 fe18 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 801600c:	4602      	mov	r2, r0
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016012:	bf00      	nop
 8016014:	3728      	adds	r7, #40	; 0x28
 8016016:	46bd      	mov	sp, r7
 8016018:	bdb0      	pop	{r4, r5, r7, pc}
 801601a:	bf00      	nop
 801601c:	080255c4 	.word	0x080255c4
 8016020:	08025f4c 	.word	0x08025f4c

08016024 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016024:	b5b0      	push	{r4, r5, r7, lr}
 8016026:	b08c      	sub	sp, #48	; 0x30
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
 8016030:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8016032:	f107 031c 	add.w	r3, r7, #28
 8016036:	491d      	ldr	r1, [pc, #116]	; (80160ac <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8016038:	4618      	mov	r0, r3
 801603a:	f7f6 ffa0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801603e:	f107 0014 	add.w	r0, r7, #20
 8016042:	f107 031c 	add.w	r3, r7, #28
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	68ba      	ldr	r2, [r7, #8]
 8016050:	68f9      	ldr	r1, [r7, #12]
 8016052:	f7ff fe15 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016056:	f107 0514 	add.w	r5, r7, #20
 801605a:	f240 1233 	movw	r2, #307	; 0x133
 801605e:	4914      	ldr	r1, [pc, #80]	; (80160b0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8016060:	2010      	movs	r0, #16
 8016062:	f7f4 fbc9 	bl	800a7f8 <_ZnwjPKci>
 8016066:	4604      	mov	r4, r0
 8016068:	4629      	mov	r1, r5
 801606a:	4620      	mov	r0, r4
 801606c:	f009 fdc6 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8016070:	627c      	str	r4, [r7, #36]	; 0x24
 8016072:	f107 0314 	add.w	r3, r7, #20
 8016076:	4618      	mov	r0, r3
 8016078:	f7f7 fb39 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801607c:	f107 031c 	add.w	r3, r7, #28
 8016080:	4618      	mov	r0, r3
 8016082:	f7f7 fb34 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016088:	f009 fdf3 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 801608c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801608e:	f009 fdfd 	bl	801fc8c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016096:	4619      	mov	r1, r3
 8016098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801609a:	f009 fdcf 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 801609e:	4602      	mov	r2, r0
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80160a4:	bf00      	nop
 80160a6:	3728      	adds	r7, #40	; 0x28
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bdb0      	pop	{r4, r5, r7, pc}
 80160ac:	080255c8 	.word	0x080255c8
 80160b0:	08025f4c 	.word	0x08025f4c

080160b4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80160b4:	b5b0      	push	{r4, r5, r7, lr}
 80160b6:	b08c      	sub	sp, #48	; 0x30
 80160b8:	af02      	add	r7, sp, #8
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80160c2:	f107 031c 	add.w	r3, r7, #28
 80160c6:	491a      	ldr	r1, [pc, #104]	; (8016130 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f6 ff58 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80160ce:	f107 0014 	add.w	r0, r7, #20
 80160d2:	f107 031c 	add.w	r3, r7, #28
 80160d6:	9301      	str	r3, [sp, #4]
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	68f9      	ldr	r1, [r7, #12]
 80160e2:	f7ff fdcd 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80160e6:	f107 0514 	add.w	r5, r7, #20
 80160ea:	f240 123b 	movw	r2, #315	; 0x13b
 80160ee:	4911      	ldr	r1, [pc, #68]	; (8016134 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80160f0:	2010      	movs	r0, #16
 80160f2:	f7f4 fb81 	bl	800a7f8 <_ZnwjPKci>
 80160f6:	4604      	mov	r4, r0
 80160f8:	4629      	mov	r1, r5
 80160fa:	4620      	mov	r0, r4
 80160fc:	f009 fd7e 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8016100:	627c      	str	r4, [r7, #36]	; 0x24
 8016102:	f107 0314 	add.w	r3, r7, #20
 8016106:	4618      	mov	r0, r3
 8016108:	f7f7 faf1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801610c:	f107 031c 	add.w	r3, r7, #28
 8016110:	4618      	mov	r0, r3
 8016112:	f7f7 faec 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801611a:	4619      	mov	r1, r3
 801611c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801611e:	f009 fd8d 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8016122:	4602      	mov	r2, r0
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016128:	bf00      	nop
 801612a:	3728      	adds	r7, #40	; 0x28
 801612c:	46bd      	mov	sp, r7
 801612e:	bdb0      	pop	{r4, r5, r7, pc}
 8016130:	080255d0 	.word	0x080255d0
 8016134:	08025f4c 	.word	0x08025f4c

08016138 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8016138:	b5b0      	push	{r4, r5, r7, lr}
 801613a:	b08c      	sub	sp, #48	; 0x30
 801613c:	af02      	add	r7, sp, #8
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	60b9      	str	r1, [r7, #8]
 8016142:	607a      	str	r2, [r7, #4]
 8016144:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8016146:	f107 031c 	add.w	r3, r7, #28
 801614a:	491c      	ldr	r1, [pc, #112]	; (80161bc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 801614c:	4618      	mov	r0, r3
 801614e:	f7f6 ff16 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8016152:	f107 0014 	add.w	r0, r7, #20
 8016156:	f107 031c 	add.w	r3, r7, #28
 801615a:	9301      	str	r3, [sp, #4]
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	68ba      	ldr	r2, [r7, #8]
 8016164:	68f9      	ldr	r1, [r7, #12]
 8016166:	f7ff fd8b 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801616a:	f107 0514 	add.w	r5, r7, #20
 801616e:	f240 1241 	movw	r2, #321	; 0x141
 8016172:	4913      	ldr	r1, [pc, #76]	; (80161c0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8016174:	2010      	movs	r0, #16
 8016176:	f7f4 fb3f 	bl	800a7f8 <_ZnwjPKci>
 801617a:	4604      	mov	r4, r0
 801617c:	4629      	mov	r1, r5
 801617e:	4620      	mov	r0, r4
 8016180:	f009 fd3c 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8016184:	627c      	str	r4, [r7, #36]	; 0x24
 8016186:	f107 0314 	add.w	r3, r7, #20
 801618a:	4618      	mov	r0, r3
 801618c:	f7f7 faaf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8016190:	f107 031c 	add.w	r3, r7, #28
 8016194:	4618      	mov	r0, r3
 8016196:	f7f7 faaa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 801619a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801619c:	f009 fd69 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161a4:	4619      	mov	r1, r3
 80161a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161a8:	f009 fd48 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 80161ac:	4602      	mov	r2, r0
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80161b2:	bf00      	nop
 80161b4:	3728      	adds	r7, #40	; 0x28
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bdb0      	pop	{r4, r5, r7, pc}
 80161ba:	bf00      	nop
 80161bc:	080255d4 	.word	0x080255d4
 80161c0:	08025f4c 	.word	0x08025f4c

080161c4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80161c4:	b5b0      	push	{r4, r5, r7, lr}
 80161c6:	b08c      	sub	sp, #48	; 0x30
 80161c8:	af02      	add	r7, sp, #8
 80161ca:	60f8      	str	r0, [r7, #12]
 80161cc:	60b9      	str	r1, [r7, #8]
 80161ce:	607a      	str	r2, [r7, #4]
 80161d0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80161d2:	f107 031c 	add.w	r3, r7, #28
 80161d6:	491c      	ldr	r1, [pc, #112]	; (8016248 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80161d8:	4618      	mov	r0, r3
 80161da:	f7f6 fed0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80161de:	f107 0014 	add.w	r0, r7, #20
 80161e2:	f107 031c 	add.w	r3, r7, #28
 80161e6:	9301      	str	r3, [sp, #4]
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	9300      	str	r3, [sp, #0]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	68ba      	ldr	r2, [r7, #8]
 80161f0:	68f9      	ldr	r1, [r7, #12]
 80161f2:	f7ff fd45 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80161f6:	f107 0514 	add.w	r5, r7, #20
 80161fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80161fe:	4913      	ldr	r1, [pc, #76]	; (801624c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8016200:	2010      	movs	r0, #16
 8016202:	f7f4 faf9 	bl	800a7f8 <_ZnwjPKci>
 8016206:	4604      	mov	r4, r0
 8016208:	4629      	mov	r1, r5
 801620a:	4620      	mov	r0, r4
 801620c:	f009 fcf6 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8016210:	627c      	str	r4, [r7, #36]	; 0x24
 8016212:	f107 0314 	add.w	r3, r7, #20
 8016216:	4618      	mov	r0, r3
 8016218:	f7f7 fa69 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801621c:	f107 031c 	add.w	r3, r7, #28
 8016220:	4618      	mov	r0, r3
 8016222:	f7f7 fa64 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8016226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016228:	f009 fd30 	bl	801fc8c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016230:	4619      	mov	r1, r3
 8016232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016234:	f009 fd02 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 8016238:	4602      	mov	r2, r0
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801623e:	bf00      	nop
 8016240:	3728      	adds	r7, #40	; 0x28
 8016242:	46bd      	mov	sp, r7
 8016244:	bdb0      	pop	{r4, r5, r7, pc}
 8016246:	bf00      	nop
 8016248:	080255d8 	.word	0x080255d8
 801624c:	08025f4c 	.word	0x08025f4c

08016250 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8016250:	b5b0      	push	{r4, r5, r7, lr}
 8016252:	b08c      	sub	sp, #48	; 0x30
 8016254:	af02      	add	r7, sp, #8
 8016256:	60f8      	str	r0, [r7, #12]
 8016258:	60b9      	str	r1, [r7, #8]
 801625a:	607a      	str	r2, [r7, #4]
 801625c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801625e:	f107 031c 	add.w	r3, r7, #28
 8016262:	491d      	ldr	r1, [pc, #116]	; (80162d8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8016264:	4618      	mov	r0, r3
 8016266:	f7f6 fe8a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801626a:	f107 0014 	add.w	r0, r7, #20
 801626e:	f107 031c 	add.w	r3, r7, #28
 8016272:	9301      	str	r3, [sp, #4]
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	9300      	str	r3, [sp, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	68ba      	ldr	r2, [r7, #8]
 801627c:	68f9      	ldr	r1, [r7, #12]
 801627e:	f7ff fcff 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016282:	f107 0514 	add.w	r5, r7, #20
 8016286:	f240 124f 	movw	r2, #335	; 0x14f
 801628a:	4914      	ldr	r1, [pc, #80]	; (80162dc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 801628c:	2010      	movs	r0, #16
 801628e:	f7f4 fab3 	bl	800a7f8 <_ZnwjPKci>
 8016292:	4604      	mov	r4, r0
 8016294:	4629      	mov	r1, r5
 8016296:	4620      	mov	r0, r4
 8016298:	f009 fcb0 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 801629c:	627c      	str	r4, [r7, #36]	; 0x24
 801629e:	f107 0314 	add.w	r3, r7, #20
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7f7 fa23 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80162a8:	f107 031c 	add.w	r3, r7, #28
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f7 fa1e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80162b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162b4:	f009 fcea 	bl	801fc8c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80162b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162ba:	f009 fcda 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162c2:	4619      	mov	r1, r3
 80162c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162c6:	f009 fcb9 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 80162ca:	4602      	mov	r2, r0
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80162d0:	bf00      	nop
 80162d2:	3728      	adds	r7, #40	; 0x28
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bdb0      	pop	{r4, r5, r7, pc}
 80162d8:	080255dc 	.word	0x080255dc
 80162dc:	08025f4c 	.word	0x08025f4c

080162e0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80162e0:	b5b0      	push	{r4, r5, r7, lr}
 80162e2:	b092      	sub	sp, #72	; 0x48
 80162e4:	af02      	add	r7, sp, #8
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
 80162ec:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80162ee:	f107 0320 	add.w	r3, r7, #32
 80162f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f6 fe42 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80162fa:	f107 0018 	add.w	r0, r7, #24
 80162fe:	f107 0320 	add.w	r3, r7, #32
 8016302:	9301      	str	r3, [sp, #4]
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	9300      	str	r3, [sp, #0]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	68ba      	ldr	r2, [r7, #8]
 801630c:	68f9      	ldr	r1, [r7, #12]
 801630e:	f7ff fcb7 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016312:	f107 0320 	add.w	r3, r7, #32
 8016316:	4618      	mov	r0, r3
 8016318:	f7f7 f9e9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801631c:	f107 0010 	add.w	r0, r7, #16
 8016320:	f107 0118 	add.w	r1, r7, #24
 8016324:	2329      	movs	r3, #41	; 0x29
 8016326:	222c      	movs	r2, #44	; 0x2c
 8016328:	f7f7 fb92 	bl	800da50 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 801632c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016330:	f107 0110 	add.w	r1, r7, #16
 8016334:	2202      	movs	r2, #2
 8016336:	4618      	mov	r0, r3
 8016338:	f7f7 fb2c 	bl	800d994 <_ZNK12SimpleString9subStringEj>
 801633c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016340:	f107 0310 	add.w	r3, r7, #16
 8016344:	4611      	mov	r1, r2
 8016346:	4618      	mov	r0, r3
 8016348:	f7f6 fe85 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801634c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016350:	4618      	mov	r0, r3
 8016352:	f7f7 f9cc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8016356:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801635a:	492a      	ldr	r1, [pc, #168]	; (8016404 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801635c:	2010      	movs	r0, #16
 801635e:	f7f4 fa4b 	bl	800a7f8 <_ZnwjPKci>
 8016362:	4604      	mov	r4, r0
 8016364:	f107 0310 	add.w	r3, r7, #16
 8016368:	4619      	mov	r1, r3
 801636a:	4620      	mov	r0, r4
 801636c:	f009 fc46 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 8016370:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8016372:	f107 0318 	add.w	r3, r7, #24
 8016376:	2100      	movs	r1, #0
 8016378:	4618      	mov	r0, r3
 801637a:	f7f7 fb1c 	bl	800d9b6 <_ZNK12SimpleString2atEj>
 801637e:	4603      	mov	r3, r0
 8016380:	461a      	mov	r2, r3
 8016382:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016386:	f107 0118 	add.w	r1, r7, #24
 801638a:	232c      	movs	r3, #44	; 0x2c
 801638c:	f7f7 fb60 	bl	800da50 <_ZNK12SimpleString17subStringFromTillEcc>
 8016390:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016394:	f240 125b 	movw	r2, #347	; 0x15b
 8016398:	491a      	ldr	r1, [pc, #104]	; (8016404 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801639a:	2010      	movs	r0, #16
 801639c:	f7f4 fa2c 	bl	800a7f8 <_ZnwjPKci>
 80163a0:	4604      	mov	r4, r0
 80163a2:	4629      	mov	r1, r5
 80163a4:	4620      	mov	r0, r4
 80163a6:	f009 fc29 	bl	801fbfc <_ZN10TestFilterC1ERK12SimpleString>
 80163aa:	63bc      	str	r4, [r7, #56]	; 0x38
 80163ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7f7 f99c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80163b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80163b8:	f009 fc5b 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80163bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163be:	f009 fc58 	bl	801fc72 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c6:	4619      	mov	r1, r3
 80163c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80163ca:	f009 fc37 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 80163ce:	4602      	mov	r2, r0
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163d8:	4619      	mov	r1, r3
 80163da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80163dc:	f009 fc2e 	bl	801fc3c <_ZN10TestFilter3addEPS_>
 80163e0:	4602      	mov	r2, r0
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80163e6:	f107 0310 	add.w	r3, r7, #16
 80163ea:	4618      	mov	r0, r3
 80163ec:	f7f7 f97f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80163f0:	f107 0318 	add.w	r3, r7, #24
 80163f4:	4618      	mov	r0, r3
 80163f6:	f7f7 f97a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 80163fa:	bf00      	nop
 80163fc:	3740      	adds	r7, #64	; 0x40
 80163fe:	46bd      	mov	sp, r7
 8016400:	bdb0      	pop	{r4, r5, r7, pc}
 8016402:	bf00      	nop
 8016404:	08025f4c 	.word	0x08025f4c

08016408 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8016408:	b590      	push	{r4, r7, lr}
 801640a:	b08b      	sub	sp, #44	; 0x2c
 801640c:	af02      	add	r7, sp, #8
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	60b9      	str	r1, [r7, #8]
 8016412:	607a      	str	r2, [r7, #4]
 8016414:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016416:	f107 0318 	add.w	r3, r7, #24
 801641a:	491b      	ldr	r1, [pc, #108]	; (8016488 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801641c:	4618      	mov	r0, r3
 801641e:	f7f6 fdae 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8016422:	f107 0010 	add.w	r0, r7, #16
 8016426:	f107 0318 	add.w	r3, r7, #24
 801642a:	9301      	str	r3, [sp, #4]
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	9300      	str	r3, [sp, #0]
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	68ba      	ldr	r2, [r7, #8]
 8016434:	68f9      	ldr	r1, [r7, #12]
 8016436:	f7ff fc23 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801643a:	f107 0318 	add.w	r3, r7, #24
 801643e:	4618      	mov	r0, r3
 8016440:	f7f7 f955 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8016444:	f107 0310 	add.w	r3, r7, #16
 8016448:	4618      	mov	r0, r3
 801644a:	f7f7 f92f 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 801644e:	4603      	mov	r3, r0
 8016450:	2b00      	cmp	r3, #0
 8016452:	bf0c      	ite	eq
 8016454:	2301      	moveq	r3, #1
 8016456:	2300      	movne	r3, #0
 8016458:	b2db      	uxtb	r3, r3
 801645a:	2b00      	cmp	r3, #0
 801645c:	d001      	beq.n	8016462 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801645e:	2400      	movs	r4, #0
 8016460:	e008      	b.n	8016474 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	3330      	adds	r3, #48	; 0x30
 8016466:	f107 0210 	add.w	r2, r7, #16
 801646a:	4611      	mov	r1, r2
 801646c:	4618      	mov	r0, r3
 801646e:	f7f6 fdf2 	bl	800d056 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016472:	2401      	movs	r4, #1
 8016474:	f107 0310 	add.w	r3, r7, #16
 8016478:	4618      	mov	r0, r3
 801647a:	f7f7 f938 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801647e:	2c01      	cmp	r4, #1
}
 8016480:	3724      	adds	r7, #36	; 0x24
 8016482:	46bd      	mov	sp, r7
 8016484:	bd90      	pop	{r4, r7, pc}
 8016486:	bf00      	nop
 8016488:	08025604 	.word	0x08025604

0801648c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 801648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801648e:	b093      	sub	sp, #76	; 0x4c
 8016490:	af02      	add	r7, sp, #8
 8016492:	60f8      	str	r0, [r7, #12]
 8016494:	60b9      	str	r1, [r7, #8]
 8016496:	607a      	str	r2, [r7, #4]
 8016498:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 801649a:	f107 0318 	add.w	r3, r7, #24
 801649e:	4953      	ldr	r1, [pc, #332]	; (80165ec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7f6 fd6c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80164a6:	f107 0010 	add.w	r0, r7, #16
 80164aa:	f107 0318 	add.w	r3, r7, #24
 80164ae:	9301      	str	r3, [sp, #4]
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	9300      	str	r3, [sp, #0]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	68f9      	ldr	r1, [r7, #12]
 80164ba:	f7ff fbe1 	bl	8015c80 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80164be:	f107 0318 	add.w	r3, r7, #24
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7f7 f913 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80164c8:	f107 0310 	add.w	r3, r7, #16
 80164cc:	4618      	mov	r0, r3
 80164ce:	f7f7 f8ed 	bl	800d6ac <_ZNK12SimpleString4sizeEv>
 80164d2:	4603      	mov	r3, r0
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	bf0c      	ite	eq
 80164d8:	2301      	moveq	r3, #1
 80164da:	2300      	movne	r3, #0
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d001      	beq.n	80164e6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80164e2:	2400      	movs	r4, #0
 80164e4:	e078      	b.n	80165d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80164e6:	2500      	movs	r5, #0
 80164e8:	f107 0320 	add.w	r3, r7, #32
 80164ec:	4940      	ldr	r1, [pc, #256]	; (80165f0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7f6 fd45 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80164f4:	2601      	movs	r6, #1
 80164f6:	f107 0220 	add.w	r2, r7, #32
 80164fa:	f107 0310 	add.w	r3, r7, #16
 80164fe:	4611      	mov	r1, r2
 8016500:	4618      	mov	r0, r3
 8016502:	f7f7 f900 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d111      	bne.n	8016530 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 801650c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016510:	4938      	ldr	r1, [pc, #224]	; (80165f4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8016512:	4618      	mov	r0, r3
 8016514:	f7f6 fd33 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8016518:	2501      	movs	r5, #1
 801651a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801651e:	f107 0310 	add.w	r3, r7, #16
 8016522:	4611      	mov	r1, r2
 8016524:	4618      	mov	r0, r3
 8016526:	f7f7 f8ee 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d001      	beq.n	8016534 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8016530:	2401      	movs	r4, #1
 8016532:	e000      	b.n	8016536 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8016534:	2400      	movs	r4, #0
 8016536:	2d00      	cmp	r5, #0
 8016538:	d004      	beq.n	8016544 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 801653a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801653e:	4618      	mov	r0, r3
 8016540:	f7f7 f8d5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8016544:	2e00      	cmp	r6, #0
 8016546:	d004      	beq.n	8016552 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8016548:	f107 0320 	add.w	r3, r7, #32
 801654c:	4618      	mov	r0, r3
 801654e:	f7f7 f8ce 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8016552:	2c00      	cmp	r4, #0
 8016554:	d005      	beq.n	8016562 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	2200      	movs	r2, #0
 801655a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801655e:	2401      	movs	r4, #1
 8016560:	e03a      	b.n	80165d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8016562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016566:	4924      	ldr	r1, [pc, #144]	; (80165f8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8016568:	4618      	mov	r0, r3
 801656a:	f7f6 fd08 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801656e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016572:	f107 0310 	add.w	r3, r7, #16
 8016576:	4611      	mov	r1, r2
 8016578:	4618      	mov	r0, r3
 801657a:	f7f7 f8c4 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801657e:	4603      	mov	r3, r0
 8016580:	461c      	mov	r4, r3
 8016582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016586:	4618      	mov	r0, r3
 8016588:	f7f7 f8b1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801658c:	2c00      	cmp	r4, #0
 801658e:	d005      	beq.n	801659c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2201      	movs	r2, #1
 8016594:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016598:	2401      	movs	r4, #1
 801659a:	e01d      	b.n	80165d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 801659c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80165a0:	4916      	ldr	r1, [pc, #88]	; (80165fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f6 fceb 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80165a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80165ac:	f107 0310 	add.w	r3, r7, #16
 80165b0:	4611      	mov	r1, r2
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7f7 f8a7 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 80165b8:	4603      	mov	r3, r0
 80165ba:	461c      	mov	r4, r3
 80165bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80165c0:	4618      	mov	r0, r3
 80165c2:	f7f7 f894 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80165c6:	2c00      	cmp	r4, #0
 80165c8:	d005      	beq.n	80165d6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2202      	movs	r2, #2
 80165ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80165d2:	2401      	movs	r4, #1
 80165d4:	e000      	b.n	80165d8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80165d6:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80165d8:	f107 0310 	add.w	r3, r7, #16
 80165dc:	4618      	mov	r0, r3
 80165de:	f7f7 f886 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80165e2:	4623      	mov	r3, r4
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3744      	adds	r7, #68	; 0x44
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ec:	08025600 	.word	0x08025600
 80165f0:	08025f70 	.word	0x08025f70
 80165f4:	08025f78 	.word	0x08025f78
 80165f8:	08025f80 	.word	0x08025f80
 80165fc:	08025f88 	.word	0x08025f88

08016600 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016600:	b480      	push	{r7}
 8016602:	b083      	sub	sp, #12
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801660e:	2b01      	cmp	r3, #1
 8016610:	bf0c      	ite	eq
 8016612:	2301      	moveq	r3, #1
 8016614:	2300      	movne	r3, #0
 8016616:	b2db      	uxtb	r3, r3
}
 8016618:	4618      	mov	r0, r3
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016632:	2b02      	cmp	r3, #2
 8016634:	bf0c      	ite	eq
 8016636:	2301      	moveq	r3, #1
 8016638:	2300      	movne	r3, #0
 801663a:	b2db      	uxtb	r3, r3
}
 801663c:	4618      	mov	r0, r3
 801663e:	370c      	adds	r7, #12
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8016648:	b480      	push	{r7}
 801664a:	b083      	sub	sp, #12
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	3330      	adds	r3, #48	; 0x30
}
 8016654:	4618      	mov	r0, r3
 8016656:	370c      	adds	r7, #12
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr

08016660 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2200      	movs	r2, #0
 801666c:	601a      	str	r2, [r3, #0]
    {}
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	4618      	mov	r0, r3
 8016672:	370c      	adds	r7, #12
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 801667c:	b480      	push	{r7}
 801667e:	b083      	sub	sp, #12
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801668a:	2200      	movs	r2, #0
 801668c:	601a      	str	r2, [r3, #0]
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016694:	3304      	adds	r3, #4
 8016696:	f640 72ff 	movw	r2, #4095	; 0xfff
 801669a:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	2200      	movs	r2, #0
 80166a0:	701a      	strb	r2, [r3, #0]
}
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	4618      	mov	r0, r3
 80166a6:	370c      	adds	r7, #12
 80166a8:	46bd      	mov	sp, r7
 80166aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ae:	4770      	bx	lr

080166b0 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80166b0:	b480      	push	{r7}
 80166b2:	b083      	sub	sp, #12
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166be:	2200      	movs	r2, #0
 80166c0:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2200      	movs	r2, #0
 80166c6:	701a      	strb	r2, [r3, #0]
}
 80166c8:	bf00      	nop
 80166ca:	370c      	adds	r7, #12
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr

080166d4 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80166d4:	b40e      	push	{r1, r2, r3}
 80166d6:	b590      	push	{r4, r7, lr}
 80166d8:	b086      	sub	sp, #24
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166e4:	3304      	adds	r3, #4
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	1ad3      	subs	r3, r2, r3
 80166f2:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d032      	beq.n	8016760 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 80166fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80166fe:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016700:	4b1b      	ldr	r3, [pc, #108]	; (8016770 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8016702:	681c      	ldr	r4, [r3, #0]
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	18d0      	adds	r0, r2, r3
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	1c59      	adds	r1, r3, #1
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016718:	47a0      	blx	r4
 801671a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	2b00      	cmp	r3, #0
 8016720:	dd09      	ble.n	8016736 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016728:	681a      	ldr	r2, [r3, #0]
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	441a      	add	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016734:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016744:	3304      	adds	r3, #4
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	429a      	cmp	r2, r3
 801674a:	d90a      	bls.n	8016762 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016752:	3304      	adds	r3, #4
 8016754:	681a      	ldr	r2, [r3, #0]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801675c:	601a      	str	r2, [r3, #0]
 801675e:	e000      	b.n	8016762 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8016760:	bf00      	nop
    va_end(arguments);
}
 8016762:	3718      	adds	r7, #24
 8016764:	46bd      	mov	sp, r7
 8016766:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801676a:	b003      	add	sp, #12
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop
 8016770:	200000b0 	.word	0x200000b0

08016774 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b08c      	sub	sp, #48	; 0x30
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8016784:	2310      	movs	r3, #16
 8016786:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8016788:	2300      	movs	r3, #0
 801678a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 801678c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	429a      	cmp	r2, r3
 8016792:	d273      	bcs.n	801687c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016796:	493b      	ldr	r1, [pc, #236]	; (8016884 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8016798:	68f8      	ldr	r0, [r7, #12]
 801679a:	f7ff ff9b 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80167a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a8:	2b10      	cmp	r3, #16
 80167aa:	d901      	bls.n	80167b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80167ac:	2310      	movs	r3, #16
 80167ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80167b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b2:	f1c3 0310 	rsb	r3, r3, #16
 80167b6:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80167b8:	2300      	movs	r3, #0
 80167ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80167bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d215      	bcs.n	80167f0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80167c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c8:	4413      	add	r3, r2
 80167ca:	69fa      	ldr	r2, [r7, #28]
 80167cc:	4413      	add	r3, r2
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	461a      	mov	r2, r3
 80167d2:	492d      	ldr	r1, [pc, #180]	; (8016888 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	f7ff ff7d 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80167da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167dc:	2b07      	cmp	r3, #7
 80167de:	d103      	bne.n	80167e8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80167e0:	492a      	ldr	r1, [pc, #168]	; (801688c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80167e2:	68f8      	ldr	r0, [r7, #12]
 80167e4:	f7ff ff76 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80167e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ea:	3301      	adds	r3, #1
 80167ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80167ee:	e7e5      	b.n	80167bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80167f0:	2300      	movs	r3, #0
 80167f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80167f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d207      	bcs.n	801680c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 80167fc:	4924      	ldr	r1, [pc, #144]	; (8016890 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 80167fe:	68f8      	ldr	r0, [r7, #12]
 8016800:	f7ff ff68 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8016804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016806:	3301      	adds	r3, #1
 8016808:	62bb      	str	r3, [r7, #40]	; 0x28
 801680a:	e7f3      	b.n	80167f4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	2b08      	cmp	r3, #8
 8016810:	d903      	bls.n	801681a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8016812:	491e      	ldr	r1, [pc, #120]	; (801688c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	f7ff ff5d 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801681a:	491e      	ldr	r1, [pc, #120]	; (8016894 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f7ff ff59 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016822:	2300      	movs	r3, #0
 8016824:	62bb      	str	r3, [r7, #40]	; 0x28
 8016826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682a:	429a      	cmp	r2, r3
 801682c:	d21d      	bcs.n	801686a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801682e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016832:	4413      	add	r3, r2
 8016834:	69fa      	ldr	r2, [r7, #28]
 8016836:	4413      	add	r3, r2
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801683e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016842:	2b1f      	cmp	r3, #31
 8016844:	d903      	bls.n	801684e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8016846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801684a:	2b7e      	cmp	r3, #126	; 0x7e
 801684c:	d902      	bls.n	8016854 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801684e:	232e      	movs	r3, #46	; 0x2e
 8016850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8016854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016858:	461a      	mov	r2, r3
 801685a:	490f      	ldr	r1, [pc, #60]	; (8016898 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	f7ff ff39 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016864:	3301      	adds	r3, #1
 8016866:	62bb      	str	r3, [r7, #40]	; 0x28
 8016868:	e7dd      	b.n	8016826 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801686a:	490c      	ldr	r1, [pc, #48]	; (801689c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f7ff ff31 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8016872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016876:	4413      	add	r3, r2
 8016878:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 801687a:	e787      	b.n	801678c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 801687c:	bf00      	nop
 801687e:	3730      	adds	r7, #48	; 0x30
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	08025fa0 	.word	0x08025fa0
 8016888:	08025fac 	.word	0x08025fac
 801688c:	08025fb4 	.word	0x08025fb4
 8016890:	08025fb8 	.word	0x08025fb8
 8016894:	08025fbc 	.word	0x08025fbc
 8016898:	08025fc0 	.word	0x08025fc0
 801689c:	08025fc4 	.word	0x08025fc4

080168a0 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80168a0:	b480      	push	{r7}
 80168a2:	b083      	sub	sp, #12
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
    return buffer_;
 80168a8:	687b      	ldr	r3, [r7, #4]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	370c      	adds	r7, #12
 80168ae:	46bd      	mov	sp, r7
 80168b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b4:	4770      	bx	lr

080168b6 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80168b6:	b480      	push	{r7}
 80168b8:	b083      	sub	sp, #12
 80168ba:	af00      	add	r7, sp, #0
 80168bc:	6078      	str	r0, [r7, #4]
 80168be:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168c6:	3304      	adds	r3, #4
 80168c8:	683a      	ldr	r2, [r7, #0]
 80168ca:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168d2:	3304      	adds	r3, #4
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80168da:	d306      	bcc.n	80168ea <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168e2:	3304      	adds	r3, #4
 80168e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80168e8:	601a      	str	r2, [r3, #0]
}
 80168ea:	bf00      	nop
 80168ec:	370c      	adds	r7, #12
 80168ee:	46bd      	mov	sp, r7
 80168f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f4:	4770      	bx	lr

080168f6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80168f6:	b480      	push	{r7}
 80168f8:	b083      	sub	sp, #12
 80168fa:	af00      	add	r7, sp, #0
 80168fc:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016904:	3304      	adds	r3, #4
 8016906:	f640 72ff 	movw	r2, #4095	; 0xfff
 801690a:	601a      	str	r2, [r3, #0]
}
 801690c:	bf00      	nop
 801690e:	370c      	adds	r7, #12
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801692e:	3304      	adds	r3, #4
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	429a      	cmp	r2, r3
 8016934:	bf2c      	ite	cs
 8016936:	2301      	movcs	r3, #1
 8016938:	2300      	movcc	r3, #0
 801693a:	b2db      	uxtb	r3, r3
}
 801693c:	4618      	mov	r0, r3
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	601a      	str	r2, [r3, #0]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2200      	movs	r2, #0
 801695a:	711a      	strb	r2, [r3, #4]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	3308      	adds	r3, #8
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff fe8b 	bl	801667c <_ZN18SimpleStringBufferC1Ev>
{
}
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4618      	mov	r0, r3
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8016970:	b5b0      	push	{r4, r5, r7, lr}
 8016972:	b086      	sub	sp, #24
 8016974:	af02      	add	r7, sp, #8
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
 801697c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	f103 0408 	add.w	r4, r3, #8
 8016984:	687d      	ldr	r5, [r7, #4]
 8016986:	6a3b      	ldr	r3, [r7, #32]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	3314      	adds	r3, #20
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	6a38      	ldr	r0, [r7, #32]
 8016990:	4798      	blx	r3
 8016992:	4603      	mov	r3, r0
 8016994:	9301      	str	r3, [sp, #4]
 8016996:	683b      	ldr	r3, [r7, #0]
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	462b      	mov	r3, r5
 801699c:	68ba      	ldr	r2, [r7, #8]
 801699e:	4904      	ldr	r1, [pc, #16]	; (80169b0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80169a0:	4620      	mov	r0, r4
 80169a2:	f7ff fe97 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80169a6:	bf00      	nop
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bdb0      	pop	{r4, r5, r7, pc}
 80169ae:	bf00      	nop
 80169b0:	08025fc8 	.word	0x08025fc8

080169b4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80169b4:	b5b0      	push	{r4, r5, r7, lr}
 80169b6:	b086      	sub	sp, #24
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	f103 0408 	add.w	r4, r3, #8
 80169c8:	687d      	ldr	r5, [r7, #4]
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	3318      	adds	r3, #24
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	6838      	ldr	r0, [r7, #0]
 80169d4:	4798      	blx	r3
 80169d6:	4603      	mov	r3, r0
 80169d8:	9300      	str	r3, [sp, #0]
 80169da:	462b      	mov	r3, r5
 80169dc:	68ba      	ldr	r2, [r7, #8]
 80169de:	4904      	ldr	r1, [pc, #16]	; (80169f0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80169e0:	4620      	mov	r0, r4
 80169e2:	f7ff fe77 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80169e6:	bf00      	nop
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bdb0      	pop	{r4, r5, r7, pc}
 80169ee:	bf00      	nop
 80169f0:	08026000 	.word	0x08026000

080169f4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	3308      	adds	r3, #8
 8016a00:	4903      	ldr	r1, [pc, #12]	; (8016a10 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7ff fe66 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016a08:	bf00      	nop
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	08026030 	.word	0x08026030

08016a14 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2200      	movs	r2, #0
 8016a26:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8016a28:	2367      	movs	r3, #103	; 0x67
 8016a2a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8016a32:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f103 0208 	add.w	r2, r3, #8
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8016a40:	4619      	mov	r1, r3
 8016a42:	4610      	mov	r0, r2
 8016a44:	f7ff ff37 	bl	80168b6 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8016a48:	bf00      	nop
 8016a4a:	3710      	adds	r7, #16
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8016a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a52:	b089      	sub	sp, #36	; 0x24
 8016a54:	af04      	add	r7, sp, #16
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d102      	bne.n	8016a68 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8016a62:	68f8      	ldr	r0, [r7, #12]
 8016a64:	f000 f882 	bl	8016b6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	1c5a      	adds	r2, r3, #1
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	f103 0508 	add.w	r5, r3, #8
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016a86:	68bb      	ldr	r3, [r7, #8]
 8016a88:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016a8a:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	695a      	ldr	r2, [r3, #20]
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	695b      	ldr	r3, [r3, #20]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	3314      	adds	r3, #20
 8016a98:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016a9a:	4610      	mov	r0, r2
 8016a9c:	4798      	blx	r3
 8016a9e:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8016aa4:	9303      	str	r3, [sp, #12]
 8016aa6:	9202      	str	r2, [sp, #8]
 8016aa8:	683a      	ldr	r2, [r7, #0]
 8016aaa:	9201      	str	r2, [sp, #4]
 8016aac:	9400      	str	r4, [sp, #0]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	4632      	mov	r2, r6
 8016ab2:	4915      	ldr	r1, [pc, #84]	; (8016b08 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8016ab4:	4628      	mov	r0, r5
 8016ab6:	f7ff fe0d 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	f103 0008 	add.w	r0, r3, #8
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	6899      	ldr	r1, [r3, #8]
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	461a      	mov	r2, r3
 8016aca:	f7ff fe53 	bl	8016774 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	695a      	ldr	r2, [r3, #20]
 8016ad2:	68bb      	ldr	r3, [r7, #8]
 8016ad4:	695b      	ldr	r3, [r3, #20]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	3314      	adds	r3, #20
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	4610      	mov	r0, r2
 8016ade:	4798      	blx	r3
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	490a      	ldr	r1, [pc, #40]	; (8016b0c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7f6 f887 	bl	800cbf8 <_ZN12SimpleString6StrCmpEPKcS1_>
 8016aea:	4603      	mov	r3, r0
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	bf0c      	ite	eq
 8016af0:	2301      	moveq	r3, #1
 8016af2:	2300      	movne	r3, #0
 8016af4:	b2db      	uxtb	r3, r3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	2201      	movs	r2, #1
 8016afe:	711a      	strb	r2, [r3, #4]
}
 8016b00:	bf00      	nop
 8016b02:	3714      	adds	r7, #20
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b08:	08026050 	.word	0x08026050
 8016b0c:	080260b0 	.word	0x080260b0

08016b10 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d103      	bne.n	8016b28 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8016b20:	6878      	ldr	r0, [r7, #4]
 8016b22:	f7ff ff67 	bl	80169f4 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8016b26:	e01e      	b.n	8016b66 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	3308      	adds	r3, #8
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7ff fef3 	bl	8016918 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8016b32:	4603      	mov	r3, r0
 8016b34:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	3308      	adds	r3, #8
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7ff fedb 	bl	80168f6 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8016b40:	7bfb      	ldrb	r3, [r7, #15]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d002      	beq.n	8016b4c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f000 f820 	bl	8016b8c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4619      	mov	r1, r3
 8016b52:	6878      	ldr	r0, [r7, #4]
 8016b54:	f000 f82a 	bl	8016bac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	791b      	ldrb	r3, [r3, #4]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d002      	beq.n	8016b66 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f000 f839 	bl	8016bd8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8016b66:	3710      	adds	r7, #16
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	3308      	adds	r3, #8
 8016b78:	4903      	ldr	r1, [pc, #12]	; (8016b88 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7ff fdaa 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016b80:	bf00      	nop
 8016b82:	3708      	adds	r7, #8
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	080260b8 	.word	0x080260b8

08016b8c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	3308      	adds	r3, #8
 8016b98:	4903      	ldr	r1, [pc, #12]	; (8016ba8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7ff fd9a 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016ba0:	bf00      	nop
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	080260d0 	.word	0x080260d0

08016bac <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f103 0008 	add.w	r0, r3, #8
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	4a04      	ldr	r2, [pc, #16]	; (8016bd0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8016bc0:	4904      	ldr	r1, [pc, #16]	; (8016bd4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8016bc2:	f7ff fd87 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016bc6:	bf00      	nop
 8016bc8:	3708      	adds	r7, #8
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	08026118 	.word	0x08026118
 8016bd4:	08026130 	.word	0x08026130

08016bd8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	3308      	adds	r3, #8
 8016be4:	4903      	ldr	r1, [pc, #12]	; (8016bf4 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7ff fd74 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8016bec:	bf00      	nop
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	08026138 	.word	0x08026138

08016bf8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b08a      	sub	sp, #40	; 0x28
 8016bfc:	af06      	add	r7, sp, #24
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
 8016c04:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8016c06:	f7f9 fe8d 	bl	8010924 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8016c0a:	4602      	mov	r2, r0
 8016c0c:	69bb      	ldr	r3, [r7, #24]
 8016c0e:	9305      	str	r3, [sp, #20]
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	9304      	str	r3, [sp, #16]
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	9303      	str	r3, [sp, #12]
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	9302      	str	r3, [sp, #8]
 8016c1c:	9201      	str	r2, [sp, #4]
 8016c1e:	2300      	movs	r3, #0
 8016c20:	9300      	str	r3, [sp, #0]
 8016c22:	2300      	movs	r3, #0
 8016c24:	4a04      	ldr	r2, [pc, #16]	; (8016c38 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8016c26:	4905      	ldr	r1, [pc, #20]	; (8016c3c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8016c28:	68f8      	ldr	r0, [r7, #12]
 8016c2a:	f000 f855 	bl	8016cd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016c2e:	bf00      	nop
 8016c30:	3710      	adds	r7, #16
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}
 8016c36:	bf00      	nop
 8016c38:	08025f94 	.word	0x08025f94
 8016c3c:	0802624c 	.word	0x0802624c

08016c40 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016c40:	b590      	push	{r4, r7, lr}
 8016c42:	b08b      	sub	sp, #44	; 0x2c
 8016c44:	af06      	add	r7, sp, #24
 8016c46:	60f8      	str	r0, [r7, #12]
 8016c48:	60b9      	str	r1, [r7, #8]
 8016c4a:	607a      	str	r2, [r7, #4]
 8016c4c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	68d8      	ldr	r0, [r3, #12]
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	691c      	ldr	r4, [r3, #16]
 8016c56:	68bb      	ldr	r3, [r7, #8]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	68ba      	ldr	r2, [r7, #8]
 8016c5c:	6952      	ldr	r2, [r2, #20]
 8016c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c60:	9105      	str	r1, [sp, #20]
 8016c62:	6a39      	ldr	r1, [r7, #32]
 8016c64:	9104      	str	r1, [sp, #16]
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	9103      	str	r1, [sp, #12]
 8016c6a:	6879      	ldr	r1, [r7, #4]
 8016c6c:	9102      	str	r1, [sp, #8]
 8016c6e:	9201      	str	r2, [sp, #4]
 8016c70:	9300      	str	r3, [sp, #0]
 8016c72:	4623      	mov	r3, r4
 8016c74:	4602      	mov	r2, r0
 8016c76:	4904      	ldr	r1, [pc, #16]	; (8016c88 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016c78:	68f8      	ldr	r0, [r7, #12]
 8016c7a:	f000 f82d 	bl	8016cd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016c7e:	bf00      	nop
 8016c80:	3714      	adds	r7, #20
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd90      	pop	{r4, r7, pc}
 8016c86:	bf00      	nop
 8016c88:	08026270 	.word	0x08026270

08016c8c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016c8c:	b590      	push	{r4, r7, lr}
 8016c8e:	b08b      	sub	sp, #44	; 0x2c
 8016c90:	af06      	add	r7, sp, #24
 8016c92:	60f8      	str	r0, [r7, #12]
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	607a      	str	r2, [r7, #4]
 8016c98:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	68d8      	ldr	r0, [r3, #12]
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	691c      	ldr	r4, [r3, #16]
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	68ba      	ldr	r2, [r7, #8]
 8016ca8:	6952      	ldr	r2, [r2, #20]
 8016caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cac:	9105      	str	r1, [sp, #20]
 8016cae:	6a39      	ldr	r1, [r7, #32]
 8016cb0:	9104      	str	r1, [sp, #16]
 8016cb2:	6839      	ldr	r1, [r7, #0]
 8016cb4:	9103      	str	r1, [sp, #12]
 8016cb6:	6879      	ldr	r1, [r7, #4]
 8016cb8:	9102      	str	r1, [sp, #8]
 8016cba:	9201      	str	r2, [sp, #4]
 8016cbc:	9300      	str	r3, [sp, #0]
 8016cbe:	4623      	mov	r3, r4
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	4904      	ldr	r1, [pc, #16]	; (8016cd4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8016cc4:	68f8      	ldr	r0, [r7, #12]
 8016cc6:	f000 f807 	bl	8016cd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8016cca:	bf00      	nop
 8016ccc:	3714      	adds	r7, #20
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd90      	pop	{r4, r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	08026298 	.word	0x08026298

08016cd8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8016cd8:	b590      	push	{r4, r7, lr}
 8016cda:	b087      	sub	sp, #28
 8016cdc:	af02      	add	r7, sp, #8
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	3308      	adds	r3, #8
 8016cea:	68ba      	ldr	r2, [r7, #8]
 8016cec:	4910      	ldr	r1, [pc, #64]	; (8016d30 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7ff fcf0 	bl	80166d4 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	6a3b      	ldr	r3, [r7, #32]
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	6879      	ldr	r1, [r7, #4]
 8016cfe:	68f8      	ldr	r0, [r7, #12]
 8016d00:	f7ff fe36 	bl	8016970 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8016d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d0a:	68f8      	ldr	r0, [r7, #12]
 8016d0c:	f7ff fe52 	bl	80169b4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8016d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	3308      	adds	r3, #8
 8016d16:	681c      	ldr	r4, [r3, #0]
 8016d18:	68f8      	ldr	r0, [r7, #12]
 8016d1a:	f000 f80b 	bl	8016d34 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	4619      	mov	r1, r3
 8016d22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016d24:	47a0      	blx	r4
}
 8016d26:	bf00      	nop
 8016d28:	3714      	adds	r7, #20
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd90      	pop	{r4, r7, pc}
 8016d2e:	bf00      	nop
 8016d30:	080262c4 	.word	0x080262c4

08016d34 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	3308      	adds	r3, #8
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff fdad 	bl	80168a0 <_ZN18SimpleStringBuffer8toStringEv>
 8016d46:	4603      	mov	r3, r0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	3308      	adds	r3, #8
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ff fca7 	bl	80166b0 <_ZN18SimpleStringBuffer5clearEv>
}
 8016d62:	bf00      	nop
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}

08016d6a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8016d6a:	b480      	push	{r7}
 8016d6c:	b085      	sub	sp, #20
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	60f8      	str	r0, [r7, #12]
 8016d72:	60b9      	str	r1, [r7, #8]
 8016d74:	607a      	str	r2, [r7, #4]
 8016d76:	603b      	str	r3, [r7, #0]
    number_ = number;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	68ba      	ldr	r2, [r7, #8]
 8016d82:	609a      	str	r2, [r3, #8]
    size_ = size;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	683a      	ldr	r2, [r7, #0]
 8016d88:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	69ba      	ldr	r2, [r7, #24]
 8016d8e:	615a      	str	r2, [r3, #20]
    period_ = period;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	7f3a      	ldrb	r2, [r7, #28]
 8016d94:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8016d9c:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016da2:	60da      	str	r2, [r3, #12]
    line_ = line;
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016da8:	611a      	str	r2, [r3, #16]
}
 8016daa:	bf00      	nop
 8016dac:	3714      	adds	r7, #20
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr

08016db6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016db6:	b480      	push	{r7}
 8016db8:	b085      	sub	sp, #20
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	60f8      	str	r0, [r7, #12]
 8016dbe:	60b9      	str	r1, [r7, #8]
 8016dc0:	4613      	mov	r3, r2
 8016dc2:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8016dc4:	79fb      	ldrb	r3, [r7, #7]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d00b      	beq.n	8016de2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	7e1b      	ldrb	r3, [r3, #24]
 8016dce:	79fa      	ldrb	r2, [r7, #7]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d006      	beq.n	8016de2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8016dd4:	68bb      	ldr	r3, [r7, #8]
 8016dd6:	7e1b      	ldrb	r3, [r3, #24]
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d004      	beq.n	8016de6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016ddc:	79fb      	ldrb	r3, [r7, #7]
 8016dde:	2b02      	cmp	r3, #2
 8016de0:	d101      	bne.n	8016de6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8016de2:	2301      	movs	r3, #1
 8016de4:	e000      	b.n	8016de8 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8016de6:	2300      	movs	r3, #0
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3714      	adds	r7, #20
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr

08016df4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8016df4:	b480      	push	{r7}
 8016df6:	b083      	sub	sp, #12
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	61da      	str	r2, [r3, #28]
    head_ = node;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	683a      	ldr	r2, [r7, #0]
 8016e0a:	601a      	str	r2, [r3, #0]
}
 8016e0c:	bf00      	nop
 8016e0e:	370c      	adds	r7, #12
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr

08016e18 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d019      	beq.n	8016e66 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	689b      	ldr	r3, [r3, #8]
 8016e36:	683a      	ldr	r2, [r7, #0]
 8016e38:	429a      	cmp	r2, r3
 8016e3a:	d10e      	bne.n	8016e5a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d005      	beq.n	8016e4e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	69da      	ldr	r2, [r3, #28]
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	61da      	str	r2, [r3, #28]
                return cur;
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	e00c      	b.n	8016e68 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	69da      	ldr	r2, [r3, #28]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	601a      	str	r2, [r3, #0]
                return cur;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	e006      	b.n	8016e68 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	69db      	ldr	r3, [r3, #28]
 8016e62:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8016e64:	e7e2      	b.n	8016e2c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8016e66:	2300      	movs	r3, #0
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3714      	adds	r7, #20
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr

08016e74 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8016e74:	b480      	push	{r7}
 8016e76:	b085      	sub	sp, #20
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d00a      	beq.n	8016ea0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	689b      	ldr	r3, [r3, #8]
 8016e8e:	683a      	ldr	r2, [r7, #0]
 8016e90:	429a      	cmp	r2, r3
 8016e92:	d101      	bne.n	8016e98 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	e004      	b.n	8016ea2 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	69db      	ldr	r3, [r3, #28]
 8016e9c:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8016e9e:	e7f1      	b.n	8016e84 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8016ea0:	2300      	movs	r3, #0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3714      	adds	r7, #20
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eac:	4770      	bx	lr

08016eae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b086      	sub	sp, #24
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	60f8      	str	r0, [r7, #12]
 8016eb6:	60b9      	str	r1, [r7, #8]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	617b      	str	r3, [r7, #20]
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d00e      	beq.n	8016ee4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8016ec6:	79fb      	ldrb	r3, [r7, #7]
 8016ec8:	461a      	mov	r2, r3
 8016eca:	6979      	ldr	r1, [r7, #20]
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f7ff ff72 	bl	8016db6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d001      	beq.n	8016edc <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	e004      	b.n	8016ee6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	69db      	ldr	r3, [r3, #28]
 8016ee0:	617b      	str	r3, [r7, #20]
 8016ee2:	e7ed      	b.n	8016ec0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8016ee4:	2300      	movs	r3, #0
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3718      	adds	r7, #24
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}

08016eee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8016eee:	b580      	push	{r7, lr}
 8016ef0:	b082      	sub	sp, #8
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	78fa      	ldrb	r2, [r7, #3]
 8016f00:	4619      	mov	r1, r3
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7ff ffd3 	bl	8016eae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016f08:	4603      	mov	r3, r0
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}

08016f12 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8016f12:	b580      	push	{r7, lr}
 8016f14:	b084      	sub	sp, #16
 8016f16:	af00      	add	r7, sp, #0
 8016f18:	60f8      	str	r0, [r7, #12]
 8016f1a:	60b9      	str	r1, [r7, #8]
 8016f1c:	4613      	mov	r3, r2
 8016f1e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	69db      	ldr	r3, [r3, #28]
 8016f24:	79fa      	ldrb	r2, [r7, #7]
 8016f26:	4619      	mov	r1, r3
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	f7ff ffc0 	bl	8016eae <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016f2e:	4603      	mov	r3, r0
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3710      	adds	r7, #16
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	460b      	mov	r3, r1
 8016f42:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8016f44:	2300      	movs	r3, #0
 8016f46:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	60bb      	str	r3, [r7, #8]
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d00f      	beq.n	8016f74 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8016f54:	78fb      	ldrb	r3, [r7, #3]
 8016f56:	461a      	mov	r2, r3
 8016f58:	68b9      	ldr	r1, [r7, #8]
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f7ff ff2b 	bl	8016db6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d002      	beq.n	8016f6c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	3301      	adds	r3, #1
 8016f6a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8016f6c:	68bb      	ldr	r3, [r7, #8]
 8016f6e:	69db      	ldr	r3, [r3, #28]
 8016f70:	60bb      	str	r3, [r7, #8]
 8016f72:	e7ec      	b.n	8016f4e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8016f74:	68fb      	ldr	r3, [r7, #12]
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3710      	adds	r7, #16
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
	...

08016f80 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8016f80:	b480      	push	{r7}
 8016f82:	b083      	sub	sp, #12
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8016f8a:	6839      	ldr	r1, [r7, #0]
 8016f8c:	4b09      	ldr	r3, [pc, #36]	; (8016fb4 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8016f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8016f92:	1aca      	subs	r2, r1, r3
 8016f94:	0852      	lsrs	r2, r2, #1
 8016f96:	4413      	add	r3, r2
 8016f98:	099a      	lsrs	r2, r3, #6
 8016f9a:	4613      	mov	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	4413      	add	r3, r2
 8016fa0:	00db      	lsls	r3, r3, #3
 8016fa2:	4413      	add	r3, r2
 8016fa4:	1aca      	subs	r2, r1, r3
 8016fa6:	4613      	mov	r3, r2
}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	370c      	adds	r7, #12
 8016fac:	46bd      	mov	sp, r7
 8016fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb2:	4770      	bx	lr
 8016fb4:	c0e07039 	.word	0xc0e07039

08016fb8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b082      	sub	sp, #8
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	689b      	ldr	r3, [r3, #8]
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f7ff ffd9 	bl	8016f80 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	009b      	lsls	r3, r3, #2
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	4413      	add	r3, r2
 8016fd6:	6839      	ldr	r1, [r7, #0]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7ff ff0b 	bl	8016df4 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8016fde:	bf00      	nop
 8016fe0:	3708      	adds	r7, #8
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}

08016fe6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8016fe6:	b580      	push	{r7, lr}
 8016fe8:	b082      	sub	sp, #8
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
 8016fee:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8016ff0:	6839      	ldr	r1, [r7, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f7ff ffc4 	bl	8016f80 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	009b      	lsls	r3, r3, #2
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	4413      	add	r3, r2
 8017000:	6839      	ldr	r1, [r7, #0]
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff ff08 	bl	8016e18 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8017008:	4603      	mov	r3, r0
}
 801700a:	4618      	mov	r0, r3
 801700c:	3708      	adds	r7, #8
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}

08017012 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8017012:	b580      	push	{r7, lr}
 8017014:	b082      	sub	sp, #8
 8017016:	af00      	add	r7, sp, #0
 8017018:	6078      	str	r0, [r7, #4]
 801701a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 801701c:	6839      	ldr	r1, [r7, #0]
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f7ff ffae 	bl	8016f80 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017024:	4603      	mov	r3, r0
 8017026:	009b      	lsls	r3, r3, #2
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	4413      	add	r3, r2
 801702c:	6839      	ldr	r1, [r7, #0]
 801702e:	4618      	mov	r0, r3
 8017030:	f7ff ff20 	bl	8016e74 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8017034:	4603      	mov	r3, r0
}
 8017036:	4618      	mov	r0, r3
 8017038:	3708      	adds	r7, #8
 801703a:	46bd      	mov	sp, r7
 801703c:	bd80      	pop	{r7, pc}

0801703e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801703e:	b580      	push	{r7, lr}
 8017040:	b084      	sub	sp, #16
 8017042:	af00      	add	r7, sp, #0
 8017044:	6078      	str	r0, [r7, #4]
 8017046:	460b      	mov	r3, r1
 8017048:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801704a:	2300      	movs	r3, #0
 801704c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801704e:	2300      	movs	r3, #0
 8017050:	60bb      	str	r3, [r7, #8]
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	2b48      	cmp	r3, #72	; 0x48
 8017056:	dc10      	bgt.n	801707a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	009b      	lsls	r3, r3, #2
 801705c:	687a      	ldr	r2, [r7, #4]
 801705e:	4413      	add	r3, r2
 8017060:	78fa      	ldrb	r2, [r7, #3]
 8017062:	4611      	mov	r1, r2
 8017064:	4618      	mov	r0, r3
 8017066:	f7ff ff67 	bl	8016f38 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801706a:	4602      	mov	r2, r0
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	4413      	add	r3, r2
 8017070:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	3301      	adds	r3, #1
 8017076:	60bb      	str	r3, [r7, #8]
 8017078:	e7eb      	b.n	8017052 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801707a:	68fb      	ldr	r3, [r7, #12]
}
 801707c:	4618      	mov	r0, r3
 801707e:	3710      	adds	r7, #16
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b084      	sub	sp, #16
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	460b      	mov	r3, r1
 801708e:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8017090:	2300      	movs	r3, #0
 8017092:	60fb      	str	r3, [r7, #12]
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	2b48      	cmp	r3, #72	; 0x48
 8017098:	dc12      	bgt.n	80170c0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	009b      	lsls	r3, r3, #2
 801709e:	687a      	ldr	r2, [r7, #4]
 80170a0:	4413      	add	r3, r2
 80170a2:	78fa      	ldrb	r2, [r7, #3]
 80170a4:	4611      	mov	r1, r2
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7ff ff21 	bl	8016eee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80170ac:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d001      	beq.n	80170b8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	e004      	b.n	80170c2 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	3301      	adds	r3, #1
 80170bc:	60fb      	str	r3, [r7, #12]
 80170be:	e7e9      	b.n	8017094 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80170c0:	2300      	movs	r3, #0
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}

080170ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80170ca:	b580      	push	{r7, lr}
 80170cc:	b086      	sub	sp, #24
 80170ce:	af00      	add	r7, sp, #0
 80170d0:	60f8      	str	r0, [r7, #12]
 80170d2:	60b9      	str	r1, [r7, #8]
 80170d4:	4613      	mov	r3, r2
 80170d6:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	689b      	ldr	r3, [r3, #8]
 80170dc:	4619      	mov	r1, r3
 80170de:	68f8      	ldr	r0, [r7, #12]
 80170e0:	f7ff ff4e 	bl	8016f80 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80170e4:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	68fa      	ldr	r2, [r7, #12]
 80170ec:	4413      	add	r3, r2
 80170ee:	79fa      	ldrb	r2, [r7, #7]
 80170f0:	68b9      	ldr	r1, [r7, #8]
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7ff ff0d 	bl	8016f12 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80170f8:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	e019      	b.n	8017138 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	3301      	adds	r3, #1
 8017108:	617b      	str	r3, [r7, #20]
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	2b48      	cmp	r3, #72	; 0x48
 801710e:	d812      	bhi.n	8017136 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	68fa      	ldr	r2, [r7, #12]
 8017116:	4413      	add	r3, r2
 8017118:	79fa      	ldrb	r2, [r7, #7]
 801711a:	4611      	mov	r1, r2
 801711c:	4618      	mov	r0, r3
 801711e:	f7ff fee6 	bl	8016eee <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8017122:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d001      	beq.n	801712e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	e004      	b.n	8017138 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	3301      	adds	r3, #1
 8017132:	617b      	str	r3, [r7, #20]
 8017134:	e7e9      	b.n	801710a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8017136:	2300      	movs	r3, #0
}
 8017138:	4618      	mov	r0, r3
 801713a:	3718      	adds	r7, #24
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}

08017140 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8017140:	b5b0      	push	{r4, r5, r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2448      	movs	r4, #72	; 0x48
 801714c:	461d      	mov	r5, r3
 801714e:	2c00      	cmp	r4, #0
 8017150:	db05      	blt.n	801715e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8017152:	4628      	mov	r0, r5
 8017154:	f7ff fa84 	bl	8016660 <_ZN22MemoryLeakDetectorListC1Ev>
 8017158:	3504      	adds	r5, #4
 801715a:	3c01      	subs	r4, #1
 801715c:	e7f7      	b.n	801714e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	4618      	mov	r0, r3
 8017162:	3708      	adds	r7, #8
 8017164:	46bd      	mov	sp, r7
 8017166:	bdb0      	pop	{r4, r5, r7, pc}

08017168 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8017168:	b590      	push	{r4, r7, lr}
 801716a:	b083      	sub	sp, #12
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	6039      	str	r1, [r7, #0]
 8017172:	4a1d      	ldr	r2, [pc, #116]	; (80171e8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	601a      	str	r2, [r3, #0]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	330c      	adds	r3, #12
 801717c:	4618      	mov	r0, r3
 801717e:	f7ff fbe3 	bl	8016948 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017188:	331c      	adds	r3, #28
 801718a:	4618      	mov	r0, r3
 801718c:	f7ff ffd8 	bl	8017140 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017196:	2201      	movs	r2, #1
 8017198:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80171a0:	3304      	adds	r3, #4
 80171a2:	2201      	movs	r2, #1
 80171a4:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2201      	movs	r2, #1
 80171aa:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80171b2:	3308      	adds	r3, #8
 80171b4:	2200      	movs	r2, #0
 80171b6:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	683a      	ldr	r2, [r7, #0]
 80171bc:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80171be:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80171c2:	490a      	ldr	r1, [pc, #40]	; (80171ec <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80171c4:	2004      	movs	r0, #4
 80171c6:	f7f3 fb17 	bl	800a7f8 <_ZnwjPKci>
 80171ca:	4604      	mov	r4, r0
 80171cc:	4620      	mov	r0, r4
 80171ce:	f7f5 fbe7 	bl	800c9a0 <_ZN11SimpleMutexC1Ev>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80171d8:	330c      	adds	r3, #12
 80171da:	601c      	str	r4, [r3, #0]
}
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	4618      	mov	r0, r3
 80171e0:	370c      	adds	r7, #12
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd90      	pop	{r4, r7, pc}
 80171e6:	bf00      	nop
 80171e8:	08028ef8 	.word	0x08028ef8
 80171ec:	080262c8 	.word	0x080262c8

080171f0 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80171f0:	b590      	push	{r4, r7, lr}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	4a0e      	ldr	r2, [pc, #56]	; (8017234 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017204:	330c      	adds	r3, #12
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d00d      	beq.n	8017228 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017212:	330c      	adds	r3, #12
 8017214:	681c      	ldr	r4, [r3, #0]
 8017216:	2c00      	cmp	r4, #0
 8017218:	d006      	beq.n	8017228 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801721a:	4620      	mov	r0, r4
 801721c:	f7f5 fbd2 	bl	800c9c4 <_ZN11SimpleMutexD1Ev>
 8017220:	2104      	movs	r1, #4
 8017222:	4620      	mov	r0, r4
 8017224:	f7f3 fafc 	bl	800a820 <_ZdlPvj>
    }
}
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	4618      	mov	r0, r3
 801722c:	370c      	adds	r7, #12
 801722e:	46bd      	mov	sp, r7
 8017230:	bd90      	pop	{r4, r7, pc}
 8017232:	bf00      	nop
 8017234:	08028ef8 	.word	0x08028ef8

08017238 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8017238:	b580      	push	{r7, lr}
 801723a:	b082      	sub	sp, #8
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
}
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f7ff ffd5 	bl	80171f0 <_ZN18MemoryLeakDetectorD1Ev>
 8017246:	f241 1150 	movw	r1, #4432	; 0x1150
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f7f3 fae8 	bl	800a820 <_ZdlPvj>
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	4618      	mov	r0, r3
 8017254:	3708      	adds	r7, #8
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}

0801725a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801725a:	b580      	push	{r7, lr}
 801725c:	b082      	sub	sp, #8
 801725e:	af00      	add	r7, sp, #0
 8017260:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	330c      	adds	r3, #12
 8017266:	4618      	mov	r0, r3
 8017268:	f7ff fd72 	bl	8016d50 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2203      	movs	r2, #3
 8017270:	721a      	strb	r2, [r3, #8]
}
 8017272:	bf00      	nop
 8017274:	3708      	adds	r7, #8
 8017276:	46bd      	mov	sp, r7
 8017278:	bd80      	pop	{r7, pc}

0801727a <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801727a:	b480      	push	{r7}
 801727c:	b083      	sub	sp, #12
 801727e:	af00      	add	r7, sp, #0
 8017280:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2202      	movs	r2, #2
 8017286:	721a      	strb	r2, [r3, #8]
}
 8017288:	bf00      	nop
 801728a:	370c      	adds	r7, #12
 801728c:	46bd      	mov	sp, r7
 801728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017292:	4770      	bx	lr

08017294 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8017294:	b480      	push	{r7}
 8017296:	b083      	sub	sp, #12
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2202      	movs	r2, #2
 80172a0:	721a      	strb	r2, [r3, #8]
}
 80172a2:	bf00      	nop
 80172a4:	370c      	adds	r7, #12
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr

080172ae <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80172ae:	b480      	push	{r7}
 80172b0:	b083      	sub	sp, #12
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	6078      	str	r0, [r7, #4]
    return mutex_;
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80172bc:	330c      	adds	r3, #12
 80172be:	681b      	ldr	r3, [r3, #0]
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	370c      	adds	r7, #12
 80172c4:	46bd      	mov	sp, r7
 80172c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ca:	4770      	bx	lr

080172cc <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80172cc:	b480      	push	{r7}
 80172ce:	b083      	sub	sp, #12
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f023 0303 	bic.w	r3, r3, #3
 80172da:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80172dc:	4618      	mov	r0, r3
 80172de:	370c      	adds	r7, #12
 80172e0:	46bd      	mov	sp, r7
 80172e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e6:	4770      	bx	lr

080172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b082      	sub	sp, #8
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	3303      	adds	r3, #3
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7ff ffe8 	bl	80172cc <_ZL31calculateVoidPointerAlignedSizej>
 80172fc:	4603      	mov	r3, r0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3708      	adds	r7, #8
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}

08017306 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8017306:	b580      	push	{r7, lr}
 8017308:	b084      	sub	sp, #16
 801730a:	af00      	add	r7, sp, #0
 801730c:	60f8      	str	r0, [r7, #12]
 801730e:	60b9      	str	r1, [r7, #8]
 8017310:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8017312:	6879      	ldr	r1, [r7, #4]
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7ff ffe7 	bl	80172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801731a:	4602      	mov	r2, r0
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	4413      	add	r3, r2
}
 8017320:	4618      	mov	r0, r3
 8017322:	3710      	adds	r7, #16
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}

08017328 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b08a      	sub	sp, #40	; 0x28
 801732c:	af06      	add	r7, sp, #24
 801732e:	60f8      	str	r0, [r7, #12]
 8017330:	60b9      	str	r1, [r7, #8]
 8017332:	607a      	str	r2, [r7, #4]
 8017334:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801733c:	3304      	adds	r3, #4
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	1c51      	adds	r1, r2, #1
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017348:	3304      	adds	r3, #4
 801734a:	6019      	str	r1, [r3, #0]
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	7a19      	ldrb	r1, [r3, #8]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017356:	3308      	adds	r3, #8
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	6a38      	ldr	r0, [r7, #32]
 801735c:	9004      	str	r0, [sp, #16]
 801735e:	69f8      	ldr	r0, [r7, #28]
 8017360:	9003      	str	r0, [sp, #12]
 8017362:	9302      	str	r3, [sp, #8]
 8017364:	9101      	str	r1, [sp, #4]
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	6879      	ldr	r1, [r7, #4]
 801736e:	68b8      	ldr	r0, [r7, #8]
 8017370:	f7ff fcfb 	bl	8016d6a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	689a      	ldr	r2, [r3, #8]
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	4413      	add	r3, r2
 801737e:	4619      	mov	r1, r3
 8017380:	68f8      	ldr	r0, [r7, #12]
 8017382:	f000 f861 	bl	8017448 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801738c:	331c      	adds	r3, #28
 801738e:	68b9      	ldr	r1, [r7, #8]
 8017390:	4618      	mov	r0, r3
 8017392:	f7ff fe11 	bl	8016fb8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017396:	bf00      	nop
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}

0801739e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801739e:	b580      	push	{r7, lr}
 80173a0:	b08a      	sub	sp, #40	; 0x28
 80173a2:	af04      	add	r7, sp, #16
 80173a4:	60f8      	str	r0, [r7, #12]
 80173a6:	60b9      	str	r1, [r7, #8]
 80173a8:	607a      	str	r2, [r7, #4]
 80173aa:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80173ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80173b0:	9302      	str	r3, [sp, #8]
 80173b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b4:	9301      	str	r3, [sp, #4]
 80173b6:	6a3b      	ldr	r3, [r7, #32]
 80173b8:	9300      	str	r3, [sp, #0]
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	687a      	ldr	r2, [r7, #4]
 80173be:	68b9      	ldr	r1, [r7, #8]
 80173c0:	68f8      	ldr	r0, [r7, #12]
 80173c2:	f000 f96f 	bl	80176a4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80173c6:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d101      	bne.n	80173d2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80173ce:	2300      	movs	r3, #0
 80173d0:	e017      	b.n	8017402 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80173d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80173d6:	9300      	str	r3, [sp, #0]
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	683a      	ldr	r2, [r7, #0]
 80173dc:	68b9      	ldr	r1, [r7, #8]
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f000 f98a 	bl	80176f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80173e4:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80173e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e8:	9302      	str	r3, [sp, #8]
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	9301      	str	r3, [sp, #4]
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	697a      	ldr	r2, [r7, #20]
 80173f6:	6939      	ldr	r1, [r7, #16]
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f7ff ff95 	bl	8017328 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80173fe:	693b      	ldr	r3, [r7, #16]
 8017400:	689b      	ldr	r3, [r3, #8]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3718      	adds	r7, #24
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
	...

0801740c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b084      	sub	sp, #16
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801741c:	331c      	adds	r3, #28
 801741e:	6839      	ldr	r1, [r7, #0]
 8017420:	4618      	mov	r0, r3
 8017422:	f7ff fdf6 	bl	8017012 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8017426:	60f8      	str	r0, [r7, #12]
  if (node)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d006      	beq.n	801743c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801742e:	4b05      	ldr	r3, [pc, #20]	; (8017444 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	6812      	ldr	r2, [r2, #0]
 8017436:	21cd      	movs	r1, #205	; 0xcd
 8017438:	6838      	ldr	r0, [r7, #0]
 801743a:	4798      	blx	r3
#endif
}
 801743c:	bf00      	nop
 801743e:	3710      	adds	r7, #16
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	200000d8 	.word	0x200000d8

08017448 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8017448:	b480      	push	{r7}
 801744a:	b085      	sub	sp, #20
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017452:	2300      	movs	r3, #0
 8017454:	60fb      	str	r3, [r7, #12]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2b02      	cmp	r3, #2
 801745a:	d812      	bhi.n	8017482 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 801745c:	68f9      	ldr	r1, [r7, #12]
 801745e:	4b0c      	ldr	r3, [pc, #48]	; (8017490 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8017460:	fba3 2301 	umull	r2, r3, r3, r1
 8017464:	085a      	lsrs	r2, r3, #1
 8017466:	4613      	mov	r3, r2
 8017468:	005b      	lsls	r3, r3, #1
 801746a:	4413      	add	r3, r2
 801746c:	1aca      	subs	r2, r1, r3
 801746e:	6839      	ldr	r1, [r7, #0]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	440b      	add	r3, r1
 8017474:	4907      	ldr	r1, [pc, #28]	; (8017494 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8017476:	5c8a      	ldrb	r2, [r1, r2]
 8017478:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	3301      	adds	r3, #1
 801747e:	60fb      	str	r3, [r7, #12]
 8017480:	e7e9      	b.n	8017456 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8017482:	bf00      	nop
 8017484:	3714      	adds	r7, #20
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	aaaaaaab 	.word	0xaaaaaaab
 8017494:	08028eec 	.word	0x08028eec

08017498 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8017498:	b480      	push	{r7}
 801749a:	b085      	sub	sp, #20
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80174a2:	2300      	movs	r3, #0
 80174a4:	60fb      	str	r3, [r7, #12]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2b02      	cmp	r3, #2
 80174aa:	d816      	bhi.n	80174da <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80174ac:	683a      	ldr	r2, [r7, #0]
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	4413      	add	r3, r2
 80174b2:	7818      	ldrb	r0, [r3, #0]
 80174b4:	68f9      	ldr	r1, [r7, #12]
 80174b6:	4b0c      	ldr	r3, [pc, #48]	; (80174e8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80174b8:	fba3 2301 	umull	r2, r3, r3, r1
 80174bc:	085a      	lsrs	r2, r3, #1
 80174be:	4613      	mov	r3, r2
 80174c0:	005b      	lsls	r3, r3, #1
 80174c2:	4413      	add	r3, r2
 80174c4:	1aca      	subs	r2, r1, r3
 80174c6:	4b09      	ldr	r3, [pc, #36]	; (80174ec <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80174c8:	5c9b      	ldrb	r3, [r3, r2]
 80174ca:	4298      	cmp	r0, r3
 80174cc:	d001      	beq.n	80174d2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80174ce:	2300      	movs	r3, #0
 80174d0:	e004      	b.n	80174dc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	3301      	adds	r3, #1
 80174d6:	60fb      	str	r3, [r7, #12]
 80174d8:	e7e5      	b.n	80174a6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80174da:	2301      	movs	r3, #1
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3714      	adds	r7, #20
 80174e0:	46bd      	mov	sp, r7
 80174e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e6:	4770      	bx	lr
 80174e8:	aaaaaaab 	.word	0xaaaaaaab
 80174ec:	08028eec 	.word	0x08028eec

080174f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	60f8      	str	r0, [r7, #12]
 80174f8:	60b9      	str	r1, [r7, #8]
 80174fa:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 80174fc:	68ba      	ldr	r2, [r7, #8]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	429a      	cmp	r2, r3
 8017502:	d101      	bne.n	8017508 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8017504:	2301      	movs	r3, #1
 8017506:	e013      	b.n	8017530 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	f083 0301 	eor.w	r3, r3, #1
 8017514:	b2db      	uxtb	r3, r3
 8017516:	2b00      	cmp	r3, #0
 8017518:	d001      	beq.n	801751e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801751a:	2301      	movs	r3, #1
 801751c:	e008      	b.n	8017530 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	331c      	adds	r3, #28
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	68b9      	ldr	r1, [r7, #8]
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	4798      	blx	r3
 801752c:	4603      	mov	r3, r0
 801752e:	bf00      	nop
}
 8017530:	4618      	mov	r0, r3
 8017532:	3710      	adds	r7, #16
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}

08017538 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8017538:	b590      	push	{r4, r7, lr}
 801753a:	b087      	sub	sp, #28
 801753c:	af02      	add	r7, sp, #8
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
 8017544:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	695a      	ldr	r2, [r3, #20]
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	695b      	ldr	r3, [r3, #20]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	3328      	adds	r3, #40	; 0x28
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	4610      	mov	r0, r2
 8017556:	4798      	blx	r3
 8017558:	4604      	mov	r4, r0
 801755a:	6a3b      	ldr	r3, [r7, #32]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	3328      	adds	r3, #40	; 0x28
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	6a38      	ldr	r0, [r7, #32]
 8017564:	4798      	blx	r3
 8017566:	4603      	mov	r3, r0
 8017568:	461a      	mov	r2, r3
 801756a:	4621      	mov	r1, r4
 801756c:	68f8      	ldr	r0, [r7, #12]
 801756e:	f7ff ffbf 	bl	80174f0 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8017572:	4603      	mov	r3, r0
 8017574:	f083 0301 	eor.w	r3, r3, #1
 8017578:	b2db      	uxtb	r3, r3
 801757a:	2b00      	cmp	r3, #0
 801757c:	d014      	beq.n	80175a8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	f103 040c 	add.w	r4, r3, #12
 8017584:	6a3b      	ldr	r3, [r7, #32]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	3328      	adds	r3, #40	; 0x28
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	6a38      	ldr	r0, [r7, #32]
 801758e:	4798      	blx	r3
 8017590:	4602      	mov	r2, r0
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	9301      	str	r3, [sp, #4]
 8017598:	9200      	str	r2, [sp, #0]
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	68b9      	ldr	r1, [r7, #8]
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7ff fb4d 	bl	8016c40 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80175a6:	e02e      	b.n	8017606 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	689a      	ldr	r2, [r3, #8]
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	4413      	add	r3, r2
 80175b2:	4619      	mov	r1, r3
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f7ff ff6f 	bl	8017498 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80175ba:	4603      	mov	r3, r0
 80175bc:	f083 0301 	eor.w	r3, r3, #1
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d014      	beq.n	80175f0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	f103 040c 	add.w	r4, r3, #12
 80175cc:	6a3b      	ldr	r3, [r7, #32]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	3328      	adds	r3, #40	; 0x28
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	6a38      	ldr	r0, [r7, #32]
 80175d6:	4798      	blx	r3
 80175d8:	4602      	mov	r2, r0
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	9301      	str	r3, [sp, #4]
 80175e0:	9200      	str	r2, [sp, #0]
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	68b9      	ldr	r1, [r7, #8]
 80175e8:	4620      	mov	r0, r4
 80175ea:	f7ff fb4f 	bl	8016c8c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80175ee:	e00a      	b.n	8017606 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80175f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d006      	beq.n	8017606 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 80175f8:	6a3b      	ldr	r3, [r7, #32]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	3324      	adds	r3, #36	; 0x24
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	68b9      	ldr	r1, [r7, #8]
 8017602:	6a38      	ldr	r0, [r7, #32]
 8017604:	4798      	blx	r3
}
 8017606:	bf00      	nop
 8017608:	3714      	adds	r7, #20
 801760a:	46bd      	mov	sp, r7
 801760c:	bd90      	pop	{r4, r7, pc}
	...

08017610 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b086      	sub	sp, #24
 8017614:	af02      	add	r7, sp, #8
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
 801761c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801761e:	4b08      	ldr	r3, [pc, #32]	; (8017640 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8017620:	681a      	ldr	r2, [r3, #0]
 8017622:	78fb      	ldrb	r3, [r7, #3]
 8017624:	9301      	str	r3, [sp, #4]
 8017626:	2300      	movs	r3, #0
 8017628:	9300      	str	r3, [sp, #0]
 801762a:	4613      	mov	r3, r2
 801762c:	687a      	ldr	r2, [r7, #4]
 801762e:	68b9      	ldr	r1, [r7, #8]
 8017630:	68f8      	ldr	r0, [r7, #12]
 8017632:	f000 f87f 	bl	8017734 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8017636:	4603      	mov	r3, r0
}
 8017638:	4618      	mov	r0, r3
 801763a:	3710      	adds	r7, #16
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}
 8017640:	20000100 	.word	0x20000100

08017644 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017644:	b590      	push	{r4, r7, lr}
 8017646:	b085      	sub	sp, #20
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	607a      	str	r2, [r7, #4]
 8017650:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8017652:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017656:	2b00      	cmp	r3, #0
 8017658:	d00e      	beq.n	8017678 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	3308      	adds	r3, #8
 8017660:	681c      	ldr	r4, [r3, #0]
 8017662:	6879      	ldr	r1, [r7, #4]
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f7ff fe3f 	bl	80172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801766a:	4601      	mov	r1, r0
 801766c:	6a3b      	ldr	r3, [r7, #32]
 801766e:	683a      	ldr	r2, [r7, #0]
 8017670:	68b8      	ldr	r0, [r7, #8]
 8017672:	47a0      	blx	r4
 8017674:	4603      	mov	r3, r0
 8017676:	e010      	b.n	801769a <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	3308      	adds	r3, #8
 801767e:	681c      	ldr	r4, [r3, #0]
 8017680:	6879      	ldr	r1, [r7, #4]
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f7ff fe30 	bl	80172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017688:	4603      	mov	r3, r0
 801768a:	f103 0120 	add.w	r1, r3, #32
 801768e:	6a3b      	ldr	r3, [r7, #32]
 8017690:	683a      	ldr	r2, [r7, #0]
 8017692:	68b8      	ldr	r0, [r7, #8]
 8017694:	47a0      	blx	r4
 8017696:	4603      	mov	r3, r0
 8017698:	bf00      	nop
}
 801769a:	4618      	mov	r0, r3
 801769c:	3714      	adds	r7, #20
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd90      	pop	{r4, r7, pc}
	...

080176a4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80176a4:	b590      	push	{r4, r7, lr}
 80176a6:	b085      	sub	sp, #20
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
 80176b0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80176b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d00b      	beq.n	80176d2 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80176ba:	4b0e      	ldr	r3, [pc, #56]	; (80176f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80176bc:	681c      	ldr	r4, [r3, #0]
 80176be:	6839      	ldr	r1, [r7, #0]
 80176c0:	68f8      	ldr	r0, [r7, #12]
 80176c2:	f7ff fe11 	bl	80172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80176c6:	4603      	mov	r3, r0
 80176c8:	4619      	mov	r1, r3
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	47a0      	blx	r4
 80176ce:	4603      	mov	r3, r0
 80176d0:	e00c      	b.n	80176ec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80176d2:	4b08      	ldr	r3, [pc, #32]	; (80176f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80176d4:	681c      	ldr	r4, [r3, #0]
 80176d6:	6839      	ldr	r1, [r7, #0]
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f7ff fe05 	bl	80172e8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80176de:	4603      	mov	r3, r0
 80176e0:	3320      	adds	r3, #32
 80176e2:	4619      	mov	r1, r3
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	47a0      	blx	r4
 80176e8:	4603      	mov	r3, r0
 80176ea:	bf00      	nop
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3714      	adds	r7, #20
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd90      	pop	{r4, r7, pc}
 80176f4:	200000cc 	.word	0x200000cc

080176f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	60f8      	str	r0, [r7, #12]
 8017700:	60b9      	str	r1, [r7, #8]
 8017702:	607a      	str	r2, [r7, #4]
 8017704:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8017706:	7e3b      	ldrb	r3, [r7, #24]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d008      	beq.n	801771e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	3320      	adds	r3, #32
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2120      	movs	r1, #32
 8017716:	68b8      	ldr	r0, [r7, #8]
 8017718:	4798      	blx	r3
 801771a:	4603      	mov	r3, r0
 801771c:	e006      	b.n	801772c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801771e:	687a      	ldr	r2, [r7, #4]
 8017720:	6839      	ldr	r1, [r7, #0]
 8017722:	68f8      	ldr	r0, [r7, #12]
 8017724:	f7ff fdef 	bl	8017306 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8017728:	4603      	mov	r3, r0
 801772a:	bf00      	nop
}
 801772c:	4618      	mov	r0, r3
 801772e:	3710      	adds	r7, #16
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}

08017734 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b08a      	sub	sp, #40	; 0x28
 8017738:	af04      	add	r7, sp, #16
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	60b9      	str	r1, [r7, #8]
 801773e:	607a      	str	r2, [r7, #4]
 8017740:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8017742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017746:	9301      	str	r3, [sp, #4]
 8017748:	6a3b      	ldr	r3, [r7, #32]
 801774a:	9300      	str	r3, [sp, #0]
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	687a      	ldr	r2, [r7, #4]
 8017750:	68b9      	ldr	r1, [r7, #8]
 8017752:	68f8      	ldr	r0, [r7, #12]
 8017754:	f7ff ff76 	bl	8017644 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8017758:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d101      	bne.n	8017764 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8017760:	2300      	movs	r3, #0
 8017762:	e017      	b.n	8017794 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8017764:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017768:	9300      	str	r3, [sp, #0]
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	68b9      	ldr	r1, [r7, #8]
 8017770:	68f8      	ldr	r0, [r7, #12]
 8017772:	f7ff ffc1 	bl	80176f8 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017776:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8017778:	6a3b      	ldr	r3, [r7, #32]
 801777a:	9302      	str	r3, [sp, #8]
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	9301      	str	r3, [sp, #4]
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	697a      	ldr	r2, [r7, #20]
 8017788:	6939      	ldr	r1, [r7, #16]
 801778a:	68f8      	ldr	r0, [r7, #12]
 801778c:	f7ff fdcc 	bl	8017328 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	689b      	ldr	r3, [r3, #8]
}
 8017794:	4618      	mov	r0, r3
 8017796:	3718      	adds	r7, #24
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}

0801779c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 801779c:	b590      	push	{r4, r7, lr}
 801779e:	b089      	sub	sp, #36	; 0x24
 80177a0:	af02      	add	r7, sp, #8
 80177a2:	60f8      	str	r0, [r7, #12]
 80177a4:	60b9      	str	r1, [r7, #8]
 80177a6:	607a      	str	r2, [r7, #4]
 80177a8:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d03a      	beq.n	8017826 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177b6:	331c      	adds	r3, #28
 80177b8:	6879      	ldr	r1, [r7, #4]
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7ff fc13 	bl	8016fe6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80177c0:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80177c2:	697b      	ldr	r3, [r7, #20]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d10b      	bne.n	80177e0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	f103 000c 	add.w	r0, r3, #12
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	9300      	str	r3, [sp, #0]
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177d8:	6839      	ldr	r1, [r7, #0]
 80177da:	f7ff fa0d 	bl	8016bf8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80177de:	e023      	b.n	8017828 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80177e0:	68b8      	ldr	r0, [r7, #8]
 80177e2:	f7f8 ff95 	bl	8010710 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80177e6:	4603      	mov	r3, r0
 80177e8:	f083 0301 	eor.w	r3, r3, #1
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d01a      	beq.n	8017828 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80177f2:	697b      	ldr	r3, [r7, #20]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80177f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80177fc:	9301      	str	r3, [sp, #4]
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	9300      	str	r3, [sp, #0]
 8017802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017804:	683a      	ldr	r2, [r7, #0]
 8017806:	6979      	ldr	r1, [r7, #20]
 8017808:	68f8      	ldr	r0, [r7, #12]
 801780a:	f7ff fe95 	bl	8017538 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	330c      	adds	r3, #12
 8017814:	681c      	ldr	r4, [r3, #0]
 8017816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017818:	9300      	str	r3, [sp, #0]
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	693a      	ldr	r2, [r7, #16]
 801781e:	6879      	ldr	r1, [r7, #4]
 8017820:	68b8      	ldr	r0, [r7, #8]
 8017822:	47a0      	blx	r4
 8017824:	e000      	b.n	8017828 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8017826:	bf00      	nop
    }
}
 8017828:	371c      	adds	r7, #28
 801782a:	46bd      	mov	sp, r7
 801782c:	bd90      	pop	{r4, r7, pc}
	...

08017830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af02      	add	r7, sp, #8
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	607a      	str	r2, [r7, #4]
 801783c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801783e:	4b08      	ldr	r3, [pc, #32]	; (8017860 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8017840:	681a      	ldr	r2, [r3, #0]
 8017842:	78fb      	ldrb	r3, [r7, #3]
 8017844:	9301      	str	r3, [sp, #4]
 8017846:	2300      	movs	r3, #0
 8017848:	9300      	str	r3, [sp, #0]
 801784a:	4613      	mov	r3, r2
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	68b9      	ldr	r1, [r7, #8]
 8017850:	68f8      	ldr	r0, [r7, #12]
 8017852:	f7ff ffa3 	bl	801779c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8017856:	bf00      	nop
 8017858:	3710      	adds	r7, #16
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}
 801785e:	bf00      	nop
 8017860:	20000100 	.word	0x20000100

08017864 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b08a      	sub	sp, #40	; 0x28
 8017868:	af04      	add	r7, sp, #16
 801786a:	60f8      	str	r0, [r7, #12]
 801786c:	60b9      	str	r1, [r7, #8]
 801786e:	607a      	str	r2, [r7, #4]
 8017870:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d023      	beq.n	80178c0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801787e:	331c      	adds	r3, #28
 8017880:	6879      	ldr	r1, [r7, #4]
 8017882:	4618      	mov	r0, r3
 8017884:	f7ff fbaf 	bl	8016fe6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017888:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d10c      	bne.n	80178aa <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	f103 000c 	add.w	r0, r3, #12
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	9300      	str	r3, [sp, #0]
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178a0:	6a39      	ldr	r1, [r7, #32]
 80178a2:	f7ff f9a9 	bl	8016bf8 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80178a6:	2300      	movs	r3, #0
 80178a8:	e019      	b.n	80178de <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80178aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	68bb      	ldr	r3, [r7, #8]
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b6:	6a3a      	ldr	r2, [r7, #32]
 80178b8:	6979      	ldr	r1, [r7, #20]
 80178ba:	68f8      	ldr	r0, [r7, #12]
 80178bc:	f7ff fe3c 	bl	8017538 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80178c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80178c4:	9302      	str	r3, [sp, #8]
 80178c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c8:	9301      	str	r3, [sp, #4]
 80178ca:	6a3b      	ldr	r3, [r7, #32]
 80178cc:	9300      	str	r3, [sp, #0]
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	687a      	ldr	r2, [r7, #4]
 80178d2:	68b9      	ldr	r1, [r7, #8]
 80178d4:	68f8      	ldr	r0, [r7, #12]
 80178d6:	f7ff fd62 	bl	801739e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80178da:	4603      	mov	r3, r0
 80178dc:	bf00      	nop
}
 80178de:	4618      	mov	r0, r3
 80178e0:	3718      	adds	r7, #24
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}

080178e6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b084      	sub	sp, #16
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
 80178ee:	460b      	mov	r3, r1
 80178f0:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178f8:	331c      	adds	r3, #28
 80178fa:	78fa      	ldrb	r2, [r7, #3]
 80178fc:	4611      	mov	r1, r2
 80178fe:	4618      	mov	r0, r3
 8017900:	f7ff fbc0 	bl	8017084 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017904:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	330c      	adds	r3, #12
 801790a:	4618      	mov	r0, r3
 801790c:	f7ff f882 	bl	8016a14 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d010      	beq.n	8017938 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	330c      	adds	r3, #12
 801791a:	68f9      	ldr	r1, [r7, #12]
 801791c:	4618      	mov	r0, r3
 801791e:	f7ff f897 	bl	8016a50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017928:	331c      	adds	r3, #28
 801792a:	78fa      	ldrb	r2, [r7, #3]
 801792c:	68f9      	ldr	r1, [r7, #12]
 801792e:	4618      	mov	r0, r3
 8017930:	f7ff fbcb 	bl	80170ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017934:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8017936:	e7eb      	b.n	8017910 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	330c      	adds	r3, #12
 801793c:	4618      	mov	r0, r3
 801793e:	f7ff f8e7 	bl	8016b10 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8017942:	bf00      	nop
 8017944:	3710      	adds	r7, #16
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b082      	sub	sp, #8
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	460b      	mov	r3, r1
 8017954:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8017956:	78fb      	ldrb	r3, [r7, #3]
 8017958:	4619      	mov	r1, r3
 801795a:	6878      	ldr	r0, [r7, #4]
 801795c:	f7ff ffc3 	bl	80178e6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	330c      	adds	r3, #12
 8017964:	4618      	mov	r0, r3
 8017966:	f7ff f9e5 	bl	8016d34 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801796a:	4603      	mov	r3, r0
}
 801796c:	4618      	mov	r0, r3
 801796e:	3708      	adds	r7, #8
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}

08017974 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017982:	331c      	adds	r3, #28
 8017984:	2103      	movs	r1, #3
 8017986:	4618      	mov	r0, r3
 8017988:	f7ff fb7c 	bl	8017084 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801798c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d011      	beq.n	80179b8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	7e1b      	ldrb	r3, [r3, #24]
 8017998:	2b03      	cmp	r3, #3
 801799a:	d102      	bne.n	80179a2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	2202      	movs	r2, #2
 80179a0:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179a8:	331c      	adds	r3, #28
 80179aa:	2203      	movs	r2, #3
 80179ac:	68f9      	ldr	r1, [r7, #12]
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7ff fb8b 	bl	80170ca <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80179b4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80179b6:	e7ea      	b.n	801798e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80179b8:	bf00      	nop
 80179ba:	3710      	adds	r7, #16
 80179bc:	46bd      	mov	sp, r7
 80179be:	bd80      	pop	{r7, pc}

080179c0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	460b      	mov	r3, r1
 80179ca:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80179d2:	331c      	adds	r3, #28
 80179d4:	78fa      	ldrb	r2, [r7, #3]
 80179d6:	4611      	mov	r1, r2
 80179d8:	4618      	mov	r0, r3
 80179da:	f7ff fb30 	bl	801703e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80179de:	4603      	mov	r3, r0
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}

080179e8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b084      	sub	sp, #16
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	60b9      	str	r1, [r7, #8]
 80179f2:	607a      	str	r2, [r7, #4]
 80179f4:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	68b9      	ldr	r1, [r7, #8]
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7f5 fb13 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	3308      	adds	r3, #8
 8017a04:	6879      	ldr	r1, [r7, #4]
 8017a06:	4618      	mov	r0, r3
 8017a08:	f7f5 fb0d 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	683a      	ldr	r2, [r7, #0]
 8017a10:	611a      	str	r2, [r3, #16]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	2200      	movs	r2, #0
 8017a16:	615a      	str	r2, [r3, #20]
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}

08017a22 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8017a22:	b480      	push	{r7}
 8017a24:	b083      	sub	sp, #12
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	6039      	str	r1, [r7, #0]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	4618      	mov	r0, r3
 8017a30:	370c      	adds	r7, #12
 8017a32:	46bd      	mov	sp, r7
 8017a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a38:	4770      	bx	lr

08017a3a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8017a3a:	b480      	push	{r7}
 8017a3c:	b083      	sub	sp, #12
 8017a3e:	af00      	add	r7, sp, #0
 8017a40:	6078      	str	r0, [r7, #4]
 8017a42:	6039      	str	r1, [r7, #0]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	4618      	mov	r0, r3
 8017a48:	370c      	adds	r7, #12
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr

08017a52 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017a52:	b480      	push	{r7}
 8017a54:	b085      	sub	sp, #20
 8017a56:	af00      	add	r7, sp, #0
 8017a58:	60f8      	str	r0, [r7, #12]
 8017a5a:	60b9      	str	r1, [r7, #8]
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	71fb      	strb	r3, [r7, #7]
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	4618      	mov	r0, r3
 8017a64:	3714      	adds	r7, #20
 8017a66:	46bd      	mov	sp, r7
 8017a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6c:	4770      	bx	lr

08017a6e <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8017a6e:	b480      	push	{r7}
 8017a70:	b085      	sub	sp, #20
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	60f8      	str	r0, [r7, #12]
 8017a76:	60b9      	str	r1, [r7, #8]
 8017a78:	607a      	str	r2, [r7, #4]
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3714      	adds	r7, #20
 8017a80:	46bd      	mov	sp, r7
 8017a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a86:	4770      	bx	lr

08017a88 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8017a88:	b480      	push	{r7}
 8017a8a:	b085      	sub	sp, #20
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	60f8      	str	r0, [r7, #12]
 8017a90:	60b9      	str	r1, [r7, #8]
 8017a92:	607a      	str	r2, [r7, #4]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	4618      	mov	r0, r3
 8017a98:	3714      	adds	r7, #20
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa0:	4770      	bx	lr

08017aa2 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8017aa2:	b480      	push	{r7}
 8017aa4:	b085      	sub	sp, #20
 8017aa6:	af00      	add	r7, sp, #0
 8017aa8:	60f8      	str	r0, [r7, #12]
 8017aaa:	60b9      	str	r1, [r7, #8]
 8017aac:	607a      	str	r2, [r7, #4]
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3714      	adds	r7, #20
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aba:	4770      	bx	lr

08017abc <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8017abc:	b480      	push	{r7}
 8017abe:	b085      	sub	sp, #20
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	60b9      	str	r1, [r7, #8]
 8017ac6:	607a      	str	r2, [r7, #4]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	4618      	mov	r0, r3
 8017acc:	3714      	adds	r7, #20
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr

08017ad6 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8017ad6:	b480      	push	{r7}
 8017ad8:	b085      	sub	sp, #20
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	60f8      	str	r0, [r7, #12]
 8017ade:	60b9      	str	r1, [r7, #8]
 8017ae0:	4639      	mov	r1, r7
 8017ae2:	e881 000c 	stmia.w	r1, {r2, r3}
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3714      	adds	r7, #20
 8017aec:	46bd      	mov	sp, r7
 8017aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af2:	4770      	bx	lr

08017af4 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8017af4:	b480      	push	{r7}
 8017af6:	b085      	sub	sp, #20
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	4639      	mov	r1, r7
 8017b00:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	4618      	mov	r0, r3
 8017b08:	3714      	adds	r7, #20
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr

08017b12 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017b12:	b480      	push	{r7}
 8017b14:	b085      	sub	sp, #20
 8017b16:	af00      	add	r7, sp, #0
 8017b18:	60f8      	str	r0, [r7, #12]
 8017b1a:	60b9      	str	r1, [r7, #8]
 8017b1c:	ed87 0b00 	vstr	d0, [r7]
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	4618      	mov	r0, r3
 8017b24:	3714      	adds	r7, #20
 8017b26:	46bd      	mov	sp, r7
 8017b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2c:	4770      	bx	lr

08017b2e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8017b2e:	b480      	push	{r7}
 8017b30:	b085      	sub	sp, #20
 8017b32:	af00      	add	r7, sp, #0
 8017b34:	60f8      	str	r0, [r7, #12]
 8017b36:	60b9      	str	r1, [r7, #8]
 8017b38:	607a      	str	r2, [r7, #4]
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3714      	adds	r7, #20
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr

08017b48 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017b48:	b480      	push	{r7}
 8017b4a:	b085      	sub	sp, #20
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	4618      	mov	r0, r3
 8017b58:	3714      	adds	r7, #20
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr

08017b62 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017b62:	b480      	push	{r7}
 8017b64:	b085      	sub	sp, #20
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	60f8      	str	r0, [r7, #12]
 8017b6a:	60b9      	str	r1, [r7, #8]
 8017b6c:	607a      	str	r2, [r7, #4]
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	4618      	mov	r0, r3
 8017b72:	3714      	adds	r7, #20
 8017b74:	46bd      	mov	sp, r7
 8017b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7a:	4770      	bx	lr

08017b7c <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8017b7c:	b480      	push	{r7}
 8017b7e:	b085      	sub	sp, #20
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	60f8      	str	r0, [r7, #12]
 8017b84:	60b9      	str	r1, [r7, #8]
 8017b86:	607a      	str	r2, [r7, #4]
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	4618      	mov	r0, r3
 8017b8c:	3714      	adds	r7, #20
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr

08017b96 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8017b96:	b480      	push	{r7}
 8017b98:	b085      	sub	sp, #20
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	60f8      	str	r0, [r7, #12]
 8017b9e:	60b9      	str	r1, [r7, #8]
 8017ba0:	607a      	str	r2, [r7, #4]
 8017ba2:	603b      	str	r3, [r7, #0]
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3714      	adds	r7, #20
 8017baa:	46bd      	mov	sp, r7
 8017bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb0:	4770      	bx	lr

08017bb2 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8017bb2:	b480      	push	{r7}
 8017bb4:	b085      	sub	sp, #20
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	60f8      	str	r0, [r7, #12]
 8017bba:	60b9      	str	r1, [r7, #8]
 8017bbc:	607a      	str	r2, [r7, #4]
 8017bbe:	603b      	str	r3, [r7, #0]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3714      	adds	r7, #20
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bcc:	4770      	bx	lr

08017bce <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8017bce:	b480      	push	{r7}
 8017bd0:	b085      	sub	sp, #20
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	60f8      	str	r0, [r7, #12]
 8017bd6:	60b9      	str	r1, [r7, #8]
 8017bd8:	607a      	str	r2, [r7, #4]
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3714      	adds	r7, #20
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr

08017be8 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8017be8:	b480      	push	{r7}
 8017bea:	b085      	sub	sp, #20
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	607a      	str	r2, [r7, #4]
 8017bf4:	603b      	str	r3, [r7, #0]
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3714      	adds	r7, #20
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c02:	4770      	bx	lr

08017c04 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8017c04:	b480      	push	{r7}
 8017c06:	b083      	sub	sp, #12
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	4618      	mov	r0, r3
 8017c10:	370c      	adds	r7, #12
 8017c12:	46bd      	mov	sp, r7
 8017c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c18:	4770      	bx	lr
	...

08017c1c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b084      	sub	sp, #16
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
 8017c24:	6039      	str	r1, [r7, #0]
 8017c26:	f107 0308 	add.w	r3, r7, #8
 8017c2a:	4909      	ldr	r1, [pc, #36]	; (8017c50 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7f5 f9a6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8017c32:	f107 0308 	add.w	r3, r7, #8
 8017c36:	4619      	mov	r1, r3
 8017c38:	6878      	ldr	r0, [r7, #4]
 8017c3a:	f005 fec5 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017c3e:	f107 0308 	add.w	r3, r7, #8
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7f5 fd53 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	3710      	adds	r7, #16
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	080262e8 	.word	0x080262e8

08017c54 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8017c54:	b480      	push	{r7}
 8017c56:	b083      	sub	sp, #12
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	460b      	mov	r3, r1
 8017c5e:	70fb      	strb	r3, [r7, #3]
 8017c60:	78fb      	ldrb	r3, [r7, #3]
 8017c62:	4618      	mov	r0, r3
 8017c64:	370c      	adds	r7, #12
 8017c66:	46bd      	mov	sp, r7
 8017c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6c:	4770      	bx	lr

08017c6e <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8017c6e:	b480      	push	{r7}
 8017c70:	b083      	sub	sp, #12
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]
 8017c76:	2300      	movs	r3, #0
 8017c78:	4618      	mov	r0, r3
 8017c7a:	370c      	adds	r7, #12
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c82:	4770      	bx	lr

08017c84 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8017c84:	b480      	push	{r7}
 8017c86:	b083      	sub	sp, #12
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	4618      	mov	r0, r3
 8017c90:	370c      	adds	r7, #12
 8017c92:	46bd      	mov	sp, r7
 8017c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c98:	4770      	bx	lr

08017c9a <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8017c9a:	b480      	push	{r7}
 8017c9c:	b083      	sub	sp, #12
 8017c9e:	af00      	add	r7, sp, #0
 8017ca0:	6078      	str	r0, [r7, #4]
 8017ca2:	6039      	str	r1, [r7, #0]
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	370c      	adds	r7, #12
 8017caa:	46bd      	mov	sp, r7
 8017cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb0:	4770      	bx	lr

08017cb2 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8017cb2:	b480      	push	{r7}
 8017cb4:	b083      	sub	sp, #12
 8017cb6:	af00      	add	r7, sp, #0
 8017cb8:	6078      	str	r0, [r7, #4]
 8017cba:	2300      	movs	r3, #0
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr

08017cc8 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8017cc8:	b480      	push	{r7}
 8017cca:	b083      	sub	sp, #12
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
 8017cd0:	6039      	str	r1, [r7, #0]
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	370c      	adds	r7, #12
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr

08017ce0 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8017ce0:	b480      	push	{r7}
 8017ce2:	b083      	sub	sp, #12
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
 8017ce8:	2300      	movs	r3, #0
 8017cea:	4618      	mov	r0, r3
 8017cec:	370c      	adds	r7, #12
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf4:	4770      	bx	lr

08017cf6 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8017cf6:	b480      	push	{r7}
 8017cf8:	b083      	sub	sp, #12
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	6078      	str	r0, [r7, #4]
 8017cfe:	6039      	str	r1, [r7, #0]
 8017d00:	683b      	ldr	r3, [r7, #0]
 8017d02:	4618      	mov	r0, r3
 8017d04:	370c      	adds	r7, #12
 8017d06:	46bd      	mov	sp, r7
 8017d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0c:	4770      	bx	lr

08017d0e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8017d0e:	b580      	push	{r7, lr}
 8017d10:	b082      	sub	sp, #8
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
 8017d16:	6039      	str	r1, [r7, #0]
 8017d18:	2100      	movs	r1, #0
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f7f3 f972 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
 8017d20:	6878      	ldr	r0, [r7, #4]
 8017d22:	3708      	adds	r7, #8
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}

08017d28 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8017d28:	b480      	push	{r7}
 8017d2a:	b085      	sub	sp, #20
 8017d2c:	af00      	add	r7, sp, #0
 8017d2e:	60f8      	str	r0, [r7, #12]
 8017d30:	60b9      	str	r1, [r7, #8]
 8017d32:	4639      	mov	r1, r7
 8017d34:	e881 000c 	stmia.w	r1, {r2, r3}
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	463b      	mov	r3, r7
 8017d3e:	cb03      	ldmia	r3!, {r0, r1}
 8017d40:	6010      	str	r0, [r2, #0]
 8017d42:	6051      	str	r1, [r2, #4]
 8017d44:	68f8      	ldr	r0, [r7, #12]
 8017d46:	3714      	adds	r7, #20
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4e:	4770      	bx	lr

08017d50 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b082      	sub	sp, #8
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	6878      	ldr	r0, [r7, #4]
 8017d5e:	f7f3 f945 	bl	800afec <_ZN17cpputest_longlongC1Ei>
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	3708      	adds	r7, #8
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}

08017d6a <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8017d6a:	b480      	push	{r7}
 8017d6c:	b085      	sub	sp, #20
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	60f8      	str	r0, [r7, #12]
 8017d72:	60b9      	str	r1, [r7, #8]
 8017d74:	4639      	mov	r1, r7
 8017d76:	e881 000c 	stmia.w	r1, {r2, r3}
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	461a      	mov	r2, r3
 8017d7e:	463b      	mov	r3, r7
 8017d80:	cb03      	ldmia	r3!, {r0, r1}
 8017d82:	6010      	str	r0, [r2, #0]
 8017d84:	6051      	str	r1, [r2, #4]
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	3714      	adds	r7, #20
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d90:	4770      	bx	lr

08017d92 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8017d92:	b480      	push	{r7}
 8017d94:	b083      	sub	sp, #12
 8017d96:	af00      	add	r7, sp, #0
 8017d98:	6078      	str	r0, [r7, #4]
 8017d9a:	2300      	movs	r3, #0
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	370c      	adds	r7, #12
 8017da0:	46bd      	mov	sp, r7
 8017da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da6:	4770      	bx	lr

08017da8 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8017da8:	b480      	push	{r7}
 8017daa:	b083      	sub	sp, #12
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
 8017db0:	6039      	str	r1, [r7, #0]
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	4618      	mov	r0, r3
 8017db6:	370c      	adds	r7, #12
 8017db8:	46bd      	mov	sp, r7
 8017dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbe:	4770      	bx	lr

08017dc0 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8017dc0:	b480      	push	{r7}
 8017dc2:	b083      	sub	sp, #12
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	f04f 0200 	mov.w	r2, #0
 8017dcc:	f04f 0300 	mov.w	r3, #0
 8017dd0:	ec43 2b17 	vmov	d7, r2, r3
 8017dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8017dd8:	eef0 0a67 	vmov.f32	s1, s15
 8017ddc:	370c      	adds	r7, #12
 8017dde:	46bd      	mov	sp, r7
 8017de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de4:	4770      	bx	lr

08017de6 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8017de6:	b480      	push	{r7}
 8017de8:	b085      	sub	sp, #20
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	60f8      	str	r0, [r7, #12]
 8017dee:	ed87 0b00 	vstr	d0, [r7]
 8017df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017df6:	ec43 2b17 	vmov	d7, r2, r3
 8017dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8017dfe:	eef0 0a67 	vmov.f32	s1, s15
 8017e02:	3714      	adds	r7, #20
 8017e04:	46bd      	mov	sp, r7
 8017e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0a:	4770      	bx	lr

08017e0c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	4b03      	ldr	r3, [pc, #12]	; (8017e24 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8017e16:	4618      	mov	r0, r3
 8017e18:	370c      	adds	r7, #12
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e20:	4770      	bx	lr
 8017e22:	bf00      	nop
 8017e24:	080262e8 	.word	0x080262e8

08017e28 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	6039      	str	r1, [r7, #0]
 8017e32:	683b      	ldr	r3, [r7, #0]
 8017e34:	4618      	mov	r0, r3
 8017e36:	370c      	adds	r7, #12
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	2300      	movs	r3, #0
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	370c      	adds	r7, #12
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e54:	4770      	bx	lr

08017e56 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8017e56:	b480      	push	{r7}
 8017e58:	b083      	sub	sp, #12
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	6078      	str	r0, [r7, #4]
 8017e5e:	6039      	str	r1, [r7, #0]
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	4618      	mov	r0, r3
 8017e64:	370c      	adds	r7, #12
 8017e66:	46bd      	mov	sp, r7
 8017e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6c:	4770      	bx	lr

08017e6e <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8017e6e:	b480      	push	{r7}
 8017e70:	b083      	sub	sp, #12
 8017e72:	af00      	add	r7, sp, #0
 8017e74:	6078      	str	r0, [r7, #4]
 8017e76:	2300      	movs	r3, #0
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8017e84:	b480      	push	{r7}
 8017e86:	b083      	sub	sp, #12
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
 8017e8e:	683b      	ldr	r3, [r7, #0]
 8017e90:	4618      	mov	r0, r3
 8017e92:	370c      	adds	r7, #12
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8017e9c:	b480      	push	{r7}
 8017e9e:	b083      	sub	sp, #12
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	370c      	adds	r7, #12
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8017eb2:	b480      	push	{r7}
 8017eb4:	b083      	sub	sp, #12
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
 8017eba:	6039      	str	r1, [r7, #0]
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr

08017eca <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8017eca:	b480      	push	{r7}
 8017ecc:	b083      	sub	sp, #12
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
 8017ed2:	6039      	str	r1, [r7, #0]
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	370c      	adds	r7, #12
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr
	...

08017ee4 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8017ee4:	b480      	push	{r7}
 8017ee6:	b083      	sub	sp, #12
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
 8017eec:	4a04      	ldr	r2, [pc, #16]	; (8017f00 <_ZN14MockActualCallC1Ev+0x1c>)
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	601a      	str	r2, [r3, #0]
{
}
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	370c      	adds	r7, #12
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efe:	4770      	bx	lr
 8017f00:	080292f0 	.word	0x080292f0

08017f04 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8017f04:	b480      	push	{r7}
 8017f06:	b083      	sub	sp, #12
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	4a04      	ldr	r2, [pc, #16]	; (8017f20 <_ZN14MockActualCallD1Ev+0x1c>)
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	601a      	str	r2, [r3, #0]
{
}
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	4618      	mov	r0, r3
 8017f16:	370c      	adds	r7, #12
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1e:	4770      	bx	lr
 8017f20:	080292f0 	.word	0x080292f0

08017f24 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	3304      	adds	r3, #4
 8017f32:	6839      	ldr	r1, [r7, #0]
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7f5 f88e 	bl	800d056 <_ZN12SimpleStringaSERKS_>
}
 8017f3a:	bf00      	nop
 8017f3c:	3708      	adds	r7, #8
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}

08017f42 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8017f42:	b580      	push	{r7, lr}
 8017f44:	b082      	sub	sp, #8
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	6078      	str	r0, [r7, #4]
 8017f4a:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	3304      	adds	r3, #4
 8017f50:	4619      	mov	r1, r3
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7f5 f867 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 8017f58:	6878      	ldr	r0, [r7, #4]
 8017f5a:	3708      	adds	r7, #8
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}

08017f60 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
 8017f6c:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7ff ffb7 	bl	8017ee4 <_ZN14MockActualCallC1Ev>
 8017f76:	4a17      	ldr	r2, [pc, #92]	; (8017fd4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	601a      	str	r2, [r3, #0]
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	3304      	adds	r3, #4
 8017f80:	4915      	ldr	r1, [pc, #84]	; (8017fd8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7f4 fffb 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	68ba      	ldr	r2, [r7, #8]
 8017f8c:	60da      	str	r2, [r3, #12]
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	687a      	ldr	r2, [r7, #4]
 8017f92:	611a      	str	r2, [r3, #16]
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	2202      	movs	r2, #2
 8017f98:	751a      	strb	r2, [r3, #20]
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	755a      	strb	r2, [r3, #21]
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	619a      	str	r2, [r3, #24]
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	331c      	adds	r3, #28
 8017faa:	4618      	mov	r0, r3
 8017fac:	f004 f814 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	683a      	ldr	r2, [r7, #0]
 8017fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	331c      	adds	r3, #28
 8017fc0:	6839      	ldr	r1, [r7, #0]
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f004 f986 	bl	801c2d4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3710      	adds	r7, #16
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	080291f0 	.word	0x080291f0
 8017fd8:	080262e8 	.word	0x080262e8

08017fdc <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b082      	sub	sp, #8
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
 8017fe4:	4a0c      	ldr	r2, [pc, #48]	; (8018018 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8017fea:	6878      	ldr	r0, [r7, #4]
 8017fec:	f001 fae4 	bl	80195b8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	331c      	adds	r3, #28
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f004 f803 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	3304      	adds	r3, #4
 8017ffe:	4618      	mov	r0, r3
 8018000:	f7f5 fb75 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	4618      	mov	r0, r3
 8018008:	f7ff ff7c 	bl	8017f04 <_ZN14MockActualCallD1Ev>
}
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	4618      	mov	r0, r3
 8018010:	3708      	adds	r7, #8
 8018012:	46bd      	mov	sp, r7
 8018014:	bd80      	pop	{r7, pc}
 8018016:	bf00      	nop
 8018018:	080291f0 	.word	0x080291f0

0801801c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 801801c:	b580      	push	{r7, lr}
 801801e:	b082      	sub	sp, #8
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
}
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f7ff ffd9 	bl	8017fdc <_ZN21MockCheckedActualCallD1Ev>
 801802a:	212c      	movs	r1, #44	; 0x2c
 801802c:	6878      	ldr	r0, [r7, #4]
 801802e:	f7f2 fbf7 	bl	800a820 <_ZdlPvj>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4618      	mov	r0, r3
 8018036:	3708      	adds	r7, #8
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}

0801803c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	683a      	ldr	r2, [r7, #0]
 801804a:	611a      	str	r2, [r3, #16]
}
 801804c:	bf00      	nop
 801804e:	370c      	adds	r7, #12
 8018050:	46bd      	mov	sp, r7
 8018052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018056:	4770      	bx	lr

08018058 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b082      	sub	sp, #8
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	691a      	ldr	r2, [r3, #16]
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	691b      	ldr	r3, [r3, #16]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	330c      	adds	r3, #12
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4610      	mov	r0, r2
 8018070:	4798      	blx	r3
 8018072:	4603      	mov	r3, r0
}
 8018074:	4618      	mov	r0, r3
 8018076:	3708      	adds	r7, #8
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}

0801807c <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
 8018084:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	33c0      	adds	r3, #192	; 0xc0
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	4798      	blx	r3
 8018092:	4603      	mov	r3, r0
 8018094:	f083 0301 	eor.w	r3, r3, #1
 8018098:	b2db      	uxtb	r3, r3
 801809a:	2b00      	cmp	r3, #0
 801809c:	d010      	beq.n	80180c0 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	33ec      	adds	r3, #236	; 0xec
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	2101      	movs	r1, #1
 80180a8:	6878      	ldr	r0, [r7, #4]
 80180aa:	4798      	blx	r3
        reporter_->failTest(failure);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	691a      	ldr	r2, [r3, #16]
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	691b      	ldr	r3, [r3, #16]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	3308      	adds	r3, #8
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	6839      	ldr	r1, [r7, #0]
 80180bc:	4610      	mov	r0, r2
 80180be:	4798      	blx	r3
    }
}
 80180c0:	bf00      	nop
 80180c2:	3708      	adds	r7, #8
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80180c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180cc:	b0bc      	sub	sp, #240	; 0xf0
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
 80180d2:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80180dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	f000 80f5 	beq.w	80182d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	339c      	adds	r3, #156	; 0x9c
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80180f2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80180f6:	6839      	ldr	r1, [r7, #0]
 80180f8:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80180fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80180fe:	4618      	mov	r0, r3
 8018100:	f006 fa6e 	bl	801e5e0 <_ZNK14MockNamedValue9getCopierEv>
 8018104:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8018108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801810c:	2b00      	cmp	r3, #0
 801810e:	d013      	beq.n	8018138 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8018110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	3308      	adds	r3, #8
 8018118:	681c      	ldr	r4, [r3, #0]
 801811a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801811e:	691d      	ldr	r5, [r3, #16]
 8018120:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018124:	4618      	mov	r0, r3
 8018126:	f006 fa2b 	bl	801e580 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801812a:	4603      	mov	r3, r0
 801812c:	461a      	mov	r2, r3
 801812e:	4629      	mov	r1, r5
 8018130:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8018134:	47a0      	blx	r4
 8018136:	e0c0      	b.n	80182ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8018138:	2500      	movs	r5, #0
 801813a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801813e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018142:	4611      	mov	r1, r2
 8018144:	4618      	mov	r0, r3
 8018146:	f005 ff0e 	bl	801df66 <_ZNK14MockNamedValue7getTypeEv>
 801814a:	2601      	movs	r6, #1
 801814c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8018150:	4962      	ldr	r1, [pc, #392]	; (80182dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8018152:	4618      	mov	r0, r3
 8018154:	f7f4 ff13 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8018158:	f04f 0801 	mov.w	r8, #1
 801815c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8018160:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018164:	4611      	mov	r1, r2
 8018166:	4618      	mov	r0, r3
 8018168:	f7f5 facd 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801816c:	4603      	mov	r3, r0
 801816e:	2b00      	cmp	r3, #0
 8018170:	d015      	beq.n	801819e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8018172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018176:	f103 0408 	add.w	r4, r3, #8
 801817a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801817e:	4958      	ldr	r1, [pc, #352]	; (80182e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8018180:	4618      	mov	r0, r3
 8018182:	f7f4 fefc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8018186:	2501      	movs	r5, #1
 8018188:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801818c:	4619      	mov	r1, r3
 801818e:	4620      	mov	r0, r4
 8018190:	f7f5 fab9 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 8018194:	4603      	mov	r3, r0
 8018196:	2b00      	cmp	r3, #0
 8018198:	d001      	beq.n	801819e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801819a:	2401      	movs	r4, #1
 801819c:	e000      	b.n	80181a0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801819e:	2400      	movs	r4, #0
 80181a0:	2d00      	cmp	r5, #0
 80181a2:	d004      	beq.n	80181ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80181a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7f5 faa0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80181ae:	f1b8 0f00 	cmp.w	r8, #0
 80181b2:	d004      	beq.n	80181be <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80181b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7f5 fa98 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80181be:	2e00      	cmp	r6, #0
 80181c0:	d004      	beq.n	80181cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80181c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80181c6:	4618      	mov	r0, r3
 80181c8:	f7f5 fa91 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80181cc:	2c00      	cmp	r4, #0
 80181ce:	d018      	beq.n	8018202 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80181d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181d4:	4618      	mov	r0, r3
 80181d6:	f006 f95b 	bl	801e490 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80181da:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80181de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80181e2:	4618      	mov	r0, r3
 80181e4:	f006 f9e4 	bl	801e5b0 <_ZNK14MockNamedValue7getSizeEv>
 80181e8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 80181ec:	4b3d      	ldr	r3, [pc, #244]	; (80182e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80181f4:	6910      	ldr	r0, [r2, #16]
 80181f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80181fa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80181fe:	4798      	blx	r3
 8018200:	e05b      	b.n	80182ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8018202:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018206:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801820a:	4611      	mov	r1, r2
 801820c:	4618      	mov	r0, r3
 801820e:	f005 fe9b 	bl	801df48 <_ZNK14MockNamedValue7getNameEv>
 8018212:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018216:	4934      	ldr	r1, [pc, #208]	; (80182e8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8018218:	4618      	mov	r0, r3
 801821a:	f7f4 feb0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801821e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8018222:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018226:	4611      	mov	r1, r2
 8018228:	4618      	mov	r0, r3
 801822a:	f7f5 fab1 	bl	800d790 <_ZneRK12SimpleStringS1_>
 801822e:	4603      	mov	r3, r0
 8018230:	461c      	mov	r4, r3
 8018232:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8018236:	4618      	mov	r0, r3
 8018238:	f7f5 fa59 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801823c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018240:	4618      	mov	r0, r3
 8018242:	f7f5 fa54 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8018246:	2c00      	cmp	r4, #0
 8018248:	d037      	beq.n	80182ba <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	339c      	adds	r3, #156	; 0x9c
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018256:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801825a:	6839      	ldr	r1, [r7, #0]
 801825c:	4798      	blx	r3
 801825e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018262:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8018266:	4611      	mov	r1, r2
 8018268:	4618      	mov	r0, r3
 801826a:	f005 fe7c 	bl	801df66 <_ZNK14MockNamedValue7getTypeEv>
 801826e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8018272:	4618      	mov	r0, r3
 8018274:	f005 fbd2 	bl	801da1c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	33cc      	adds	r3, #204	; 0xcc
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	4798      	blx	r3
 8018284:	4601      	mov	r1, r0
 8018286:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801828a:	f107 030c 	add.w	r3, r7, #12
 801828e:	4618      	mov	r0, r3
 8018290:	f005 faee 	bl	801d870 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	33dc      	adds	r3, #220	; 0xdc
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	f107 020c 	add.w	r2, r7, #12
 80182a0:	4611      	mov	r1, r2
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80182a6:	f107 030c 	add.w	r3, r7, #12
 80182aa:	4618      	mov	r0, r3
 80182ac:	f001 ffe2 	bl	801a274 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80182b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7f5 fa1a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80182ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80182be:	4618      	mov	r0, r3
 80182c0:	f005 fbac 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80182c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80182c8:	695b      	ldr	r3, [r3, #20]
 80182ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80182ce:	e705      	b.n	80180dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80182d0:	bf00      	nop
 80182d2:	37f0      	adds	r7, #240	; 0xf0
 80182d4:	46bd      	mov	sp, r7
 80182d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182da:	bf00      	nop
 80182dc:	080262ec 	.word	0x080262ec
 80182e0:	080262f8 	.word	0x080262f8
 80182e4:	200000d4 	.word	0x200000d4
 80182e8:	080262e8 	.word	0x080262e8

080182ec <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	331c      	adds	r3, #28
 80182f8:	4618      	mov	r0, r3
 80182fa:	f004 f9bb 	bl	801c674 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80182fe:	4602      	mov	r2, r0
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	699b      	ldr	r3, [r3, #24]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d00f      	beq.n	801832c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	33d4      	adds	r3, #212	; 0xd4
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	687a      	ldr	r2, [r7, #4]
 8018316:	6992      	ldr	r2, [r2, #24]
 8018318:	4611      	mov	r1, r2
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	4798      	blx	r3
        callHasSucceeded();
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	33d0      	adds	r3, #208	; 0xd0
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801832a:	e00f      	b.n	801834c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	331c      	adds	r3, #28
 8018330:	4618      	mov	r0, r3
 8018332:	f004 f9cc 	bl	801c6ce <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8018336:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d006      	beq.n	801834c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	33d4      	adds	r3, #212	; 0xd4
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	68f9      	ldr	r1, [r7, #12]
 8018348:	6878      	ldr	r0, [r7, #4]
 801834a:	4798      	blx	r3
}
 801834c:	bf00      	nop
 801834e:	3710      	adds	r7, #16
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}

08018354 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b082      	sub	sp, #8
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	33ec      	adds	r3, #236	; 0xec
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2102      	movs	r1, #2
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	4798      	blx	r3
}
 801836a:	bf00      	nop
 801836c:	3708      	adds	r7, #8
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}

08018372 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8018372:	b580      	push	{r7, lr}
 8018374:	b082      	sub	sp, #8
 8018376:	af00      	add	r7, sp, #0
 8018378:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	699b      	ldr	r3, [r3, #24]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d00b      	beq.n	801839a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	699a      	ldr	r2, [r3, #24]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	699b      	ldr	r3, [r3, #24]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	33ec      	adds	r3, #236	; 0xec
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4610      	mov	r0, r2
 8018392:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	2200      	movs	r2, #0
 8018398:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	331c      	adds	r3, #28
 801839e:	4618      	mov	r0, r3
 80183a0:	f004 f85c 	bl	801c45c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80183a4:	bf00      	nop
 80183a6:	3708      	adds	r7, #8
 80183a8:	46bd      	mov	sp, r7
 80183aa:	bd80      	pop	{r7, pc}

080183ac <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80183ac:	b590      	push	{r4, r7, lr}
 80183ae:	b091      	sub	sp, #68	; 0x44
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	6039      	str	r1, [r7, #0]
    setName(name);
 80183b6:	6839      	ldr	r1, [r7, #0]
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f7ff fdb3 	bl	8017f24 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	33ec      	adds	r3, #236	; 0xec
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	2100      	movs	r1, #0
 80183c8:	6878      	ldr	r0, [r7, #4]
 80183ca:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	331c      	adds	r3, #28
 80183d0:	6839      	ldr	r1, [r7, #0]
 80183d2:	4618      	mov	r0, r3
 80183d4:	f003 ffec 	bl	801c3b0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	331c      	adds	r3, #28
 80183dc:	4618      	mov	r0, r3
 80183de:	f003 fe7c 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 80183e2:	4603      	mov	r3, r0
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d01d      	beq.n	8018424 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	33cc      	adds	r3, #204	; 0xcc
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	6878      	ldr	r0, [r7, #4]
 80183f2:	4798      	blx	r3
 80183f4:	4601      	mov	r1, r0
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183fa:	f107 000c 	add.w	r0, r7, #12
 80183fe:	683a      	ldr	r2, [r7, #0]
 8018400:	f004 fe24 	bl	801d04c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	33dc      	adds	r3, #220	; 0xdc
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	f107 020c 	add.w	r2, r7, #12
 8018410:	4611      	mov	r1, r2
 8018412:	6878      	ldr	r0, [r7, #4]
 8018414:	4798      	blx	r3
        return *this;
 8018416:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018418:	f107 030c 	add.w	r3, r7, #12
 801841c:	4618      	mov	r0, r3
 801841e:	f001 ff4b 	bl	801a2b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018422:	e006      	b.n	8018432 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	33d8      	adds	r3, #216	; 0xd8
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	4798      	blx	r3

    return *this;
 8018430:	687c      	ldr	r4, [r7, #4]
 8018432:	4623      	mov	r3, r4
}
 8018434:	4618      	mov	r0, r3
 8018436:	3744      	adds	r7, #68	; 0x44
 8018438:	46bd      	mov	sp, r7
 801843a:	bd90      	pop	{r4, r7, pc}

0801843c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801843c:	b480      	push	{r7}
 801843e:	b083      	sub	sp, #12
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
 8018444:	6039      	str	r1, [r7, #0]
    return *this;
 8018446:	687b      	ldr	r3, [r7, #4]
}
 8018448:	4618      	mov	r0, r3
 801844a:	370c      	adds	r7, #12
 801844c:	46bd      	mov	sp, r7
 801844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018452:	4770      	bx	lr

08018454 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8018454:	b590      	push	{r4, r7, lr}
 8018456:	b097      	sub	sp, #92	; 0x5c
 8018458:	af02      	add	r7, sp, #8
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	33c0      	adds	r3, #192	; 0xc0
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	4798      	blx	r3
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d164      	bne.n	801853a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	33ec      	adds	r3, #236	; 0xec
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	2100      	movs	r1, #0
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	33e8      	adds	r3, #232	; 0xe8
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	6878      	ldr	r0, [r7, #4]
 8018488:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	331c      	adds	r3, #28
 801848e:	6839      	ldr	r1, [r7, #0]
 8018490:	4618      	mov	r0, r3
 8018492:	f004 f86b 	bl	801c56c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	331c      	adds	r3, #28
 801849a:	4618      	mov	r0, r3
 801849c:	f003 fe1d 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 80184a0:	4603      	mov	r3, r0
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d02b      	beq.n	80184fe <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	33cc      	adds	r3, #204	; 0xcc
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	4798      	blx	r3
 80184b2:	4604      	mov	r4, r0
 80184b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184b8:	6879      	ldr	r1, [r7, #4]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7ff fd41 	bl	8017f42 <_ZNK21MockCheckedActualCall7getNameEv>
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80184c8:	f107 000c 	add.w	r0, r7, #12
 80184cc:	9300      	str	r3, [sp, #0]
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	4621      	mov	r1, r4
 80184d2:	f004 fe7f 	bl	801d1d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80184d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80184da:	4618      	mov	r0, r3
 80184dc:	f7f5 f907 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	33dc      	adds	r3, #220	; 0xdc
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	f107 020c 	add.w	r2, r7, #12
 80184ec:	4611      	mov	r1, r2
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80184f2:	f107 030c 	add.w	r3, r7, #12
 80184f6:	4618      	mov	r0, r3
 80184f8:	f001 ff00 	bl	801a2fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 80184fc:	e01e      	b.n	801853c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f103 041c 	add.w	r4, r3, #28
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	335c      	adds	r3, #92	; 0x5c
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018510:	6839      	ldr	r1, [r7, #0]
 8018512:	4610      	mov	r0, r2
 8018514:	4798      	blx	r3
 8018516:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801851a:	4619      	mov	r1, r3
 801851c:	4620      	mov	r0, r4
 801851e:	f004 f9b8 	bl	801c892 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8018522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018526:	4618      	mov	r0, r3
 8018528:	f7f5 f8e1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	33d8      	adds	r3, #216	; 0xd8
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	4798      	blx	r3
 8018538:	e000      	b.n	801853c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801853a:	bf00      	nop
}
 801853c:	3754      	adds	r7, #84	; 0x54
 801853e:	46bd      	mov	sp, r7
 8018540:	bd90      	pop	{r4, r7, pc}

08018542 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8018542:	b590      	push	{r4, r7, lr}
 8018544:	b097      	sub	sp, #92	; 0x5c
 8018546:	af02      	add	r7, sp, #8
 8018548:	6078      	str	r0, [r7, #4]
 801854a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	33c0      	adds	r3, #192	; 0xc0
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	4798      	blx	r3
 8018558:	4603      	mov	r3, r0
 801855a:	2b00      	cmp	r3, #0
 801855c:	d164      	bne.n	8018628 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	33ec      	adds	r3, #236	; 0xec
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	2100      	movs	r1, #0
 8018568:	6878      	ldr	r0, [r7, #4]
 801856a:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	33e8      	adds	r3, #232	; 0xe8
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	331c      	adds	r3, #28
 801857c:	6839      	ldr	r1, [r7, #0]
 801857e:	4618      	mov	r0, r3
 8018580:	f004 f820 	bl	801c5c4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	331c      	adds	r3, #28
 8018588:	4618      	mov	r0, r3
 801858a:	f003 fda6 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d02b      	beq.n	80185ec <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	33cc      	adds	r3, #204	; 0xcc
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	4798      	blx	r3
 80185a0:	4604      	mov	r4, r0
 80185a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185a6:	6879      	ldr	r1, [r7, #4]
 80185a8:	4618      	mov	r0, r3
 80185aa:	f7ff fcca 	bl	8017f42 <_ZNK21MockCheckedActualCall7getNameEv>
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80185b6:	f107 000c 	add.w	r0, r7, #12
 80185ba:	9300      	str	r3, [sp, #0]
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	4621      	mov	r1, r4
 80185c0:	f004 ff6a 	bl	801d498 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80185c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7f5 f890 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	33dc      	adds	r3, #220	; 0xdc
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	f107 020c 	add.w	r2, r7, #12
 80185da:	4611      	mov	r1, r2
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80185e0:	f107 030c 	add.w	r3, r7, #12
 80185e4:	4618      	mov	r0, r3
 80185e6:	f001 feab 	bl	801a340 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80185ea:	e01e      	b.n	801862a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f103 041c 	add.w	r4, r3, #28
 80185f2:	683b      	ldr	r3, [r7, #0]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	335c      	adds	r3, #92	; 0x5c
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80185fe:	6839      	ldr	r1, [r7, #0]
 8018600:	4610      	mov	r0, r2
 8018602:	4798      	blx	r3
 8018604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018608:	4619      	mov	r1, r3
 801860a:	4620      	mov	r0, r4
 801860c:	f004 f95e 	bl	801c8cc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018614:	4618      	mov	r0, r3
 8018616:	f7f5 f86a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	33d8      	adds	r3, #216	; 0xd8
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	4798      	blx	r3
 8018626:	e000      	b.n	801862a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8018628:	bf00      	nop
}
 801862a:	3754      	adds	r7, #84	; 0x54
 801862c:	46bd      	mov	sp, r7
 801862e:	bd90      	pop	{r4, r7, pc}

08018630 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018630:	b590      	push	{r4, r7, lr}
 8018632:	b093      	sub	sp, #76	; 0x4c
 8018634:	af00      	add	r7, sp, #0
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	60b9      	str	r1, [r7, #8]
 801863a:	4613      	mov	r3, r2
 801863c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801863e:	f107 0310 	add.w	r3, r7, #16
 8018642:	68b9      	ldr	r1, [r7, #8]
 8018644:	4618      	mov	r0, r3
 8018646:	f005 f9bf 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801864a:	79fa      	ldrb	r2, [r7, #7]
 801864c:	f107 0310 	add.w	r3, r7, #16
 8018650:	4611      	mov	r1, r2
 8018652:	4618      	mov	r0, r3
 8018654:	f005 fa0a 	bl	801da6c <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	33e0      	adds	r3, #224	; 0xe0
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	f107 0210 	add.w	r2, r7, #16
 8018664:	4611      	mov	r1, r2
 8018666:	68f8      	ldr	r0, [r7, #12]
 8018668:	4798      	blx	r3
    return *this;
 801866a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801866c:	f107 0310 	add.w	r3, r7, #16
 8018670:	4618      	mov	r0, r3
 8018672:	f005 f9d3 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018676:	4623      	mov	r3, r4
}
 8018678:	4618      	mov	r0, r3
 801867a:	374c      	adds	r7, #76	; 0x4c
 801867c:	46bd      	mov	sp, r7
 801867e:	bd90      	pop	{r4, r7, pc}

08018680 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018680:	b590      	push	{r4, r7, lr}
 8018682:	b093      	sub	sp, #76	; 0x4c
 8018684:	af00      	add	r7, sp, #0
 8018686:	60f8      	str	r0, [r7, #12]
 8018688:	60b9      	str	r1, [r7, #8]
 801868a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801868c:	f107 0310 	add.w	r3, r7, #16
 8018690:	68b9      	ldr	r1, [r7, #8]
 8018692:	4618      	mov	r0, r3
 8018694:	f005 f998 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018698:	f107 0310 	add.w	r3, r7, #16
 801869c:	6879      	ldr	r1, [r7, #4]
 801869e:	4618      	mov	r0, r3
 80186a0:	f005 fa08 	bl	801dab4 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	33e0      	adds	r3, #224	; 0xe0
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	f107 0210 	add.w	r2, r7, #16
 80186b0:	4611      	mov	r1, r2
 80186b2:	68f8      	ldr	r0, [r7, #12]
 80186b4:	4798      	blx	r3
    return *this;
 80186b6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80186b8:	f107 0310 	add.w	r3, r7, #16
 80186bc:	4618      	mov	r0, r3
 80186be:	f005 f9ad 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80186c2:	4623      	mov	r3, r4
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	374c      	adds	r7, #76	; 0x4c
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd90      	pop	{r4, r7, pc}

080186cc <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b093      	sub	sp, #76	; 0x4c
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80186d8:	f107 0310 	add.w	r3, r7, #16
 80186dc:	68b9      	ldr	r1, [r7, #8]
 80186de:	4618      	mov	r0, r3
 80186e0:	f005 f972 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80186e4:	f107 0310 	add.w	r3, r7, #16
 80186e8:	6879      	ldr	r1, [r7, #4]
 80186ea:	4618      	mov	r0, r3
 80186ec:	f005 fa04 	bl	801daf8 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	33e0      	adds	r3, #224	; 0xe0
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f107 0210 	add.w	r2, r7, #16
 80186fc:	4611      	mov	r1, r2
 80186fe:	68f8      	ldr	r0, [r7, #12]
 8018700:	4798      	blx	r3
    return *this;
 8018702:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018704:	f107 0310 	add.w	r3, r7, #16
 8018708:	4618      	mov	r0, r3
 801870a:	f005 f987 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 801870e:	4623      	mov	r3, r4
}
 8018710:	4618      	mov	r0, r3
 8018712:	374c      	adds	r7, #76	; 0x4c
 8018714:	46bd      	mov	sp, r7
 8018716:	bd90      	pop	{r4, r7, pc}

08018718 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018718:	b590      	push	{r4, r7, lr}
 801871a:	b093      	sub	sp, #76	; 0x4c
 801871c:	af00      	add	r7, sp, #0
 801871e:	60f8      	str	r0, [r7, #12]
 8018720:	60b9      	str	r1, [r7, #8]
 8018722:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018724:	f107 0310 	add.w	r3, r7, #16
 8018728:	68b9      	ldr	r1, [r7, #8]
 801872a:	4618      	mov	r0, r3
 801872c:	f005 f94c 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018730:	f107 0310 	add.w	r3, r7, #16
 8018734:	6879      	ldr	r1, [r7, #4]
 8018736:	4618      	mov	r0, r3
 8018738:	f005 fa22 	bl	801db80 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	33e0      	adds	r3, #224	; 0xe0
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	f107 0210 	add.w	r2, r7, #16
 8018748:	4611      	mov	r1, r2
 801874a:	68f8      	ldr	r0, [r7, #12]
 801874c:	4798      	blx	r3
    return *this;
 801874e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018750:	f107 0310 	add.w	r3, r7, #16
 8018754:	4618      	mov	r0, r3
 8018756:	f005 f961 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 801875a:	4623      	mov	r3, r4
}
 801875c:	4618      	mov	r0, r3
 801875e:	374c      	adds	r7, #76	; 0x4c
 8018760:	46bd      	mov	sp, r7
 8018762:	bd90      	pop	{r4, r7, pc}

08018764 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018764:	b590      	push	{r4, r7, lr}
 8018766:	b093      	sub	sp, #76	; 0x4c
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018770:	f107 0310 	add.w	r3, r7, #16
 8018774:	68b9      	ldr	r1, [r7, #8]
 8018776:	4618      	mov	r0, r3
 8018778:	f005 f926 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801877c:	f107 0310 	add.w	r3, r7, #16
 8018780:	6879      	ldr	r1, [r7, #4]
 8018782:	4618      	mov	r0, r3
 8018784:	f005 f9da 	bl	801db3c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	33e0      	adds	r3, #224	; 0xe0
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f107 0210 	add.w	r2, r7, #16
 8018794:	4611      	mov	r1, r2
 8018796:	68f8      	ldr	r0, [r7, #12]
 8018798:	4798      	blx	r3
    return *this;
 801879a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801879c:	f107 0310 	add.w	r3, r7, #16
 80187a0:	4618      	mov	r0, r3
 80187a2:	f005 f93b 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80187a6:	4623      	mov	r3, r4
}
 80187a8:	4618      	mov	r0, r3
 80187aa:	374c      	adds	r7, #76	; 0x4c
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd90      	pop	{r4, r7, pc}

080187b0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80187b0:	b5b0      	push	{r4, r5, r7, lr}
 80187b2:	b086      	sub	sp, #24
 80187b4:	af02      	add	r7, sp, #8
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	4639      	mov	r1, r7
 80187bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80187c0:	f7fb ffc0 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80187c4:	4604      	mov	r4, r0
 80187c6:	6823      	ldr	r3, [r4, #0]
 80187c8:	3368      	adds	r3, #104	; 0x68
 80187ca:	681d      	ldr	r5, [r3, #0]
 80187cc:	f7fb ffca 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80187d0:	4603      	mov	r3, r0
 80187d2:	9300      	str	r3, [sp, #0]
 80187d4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80187d8:	4a04      	ldr	r2, [pc, #16]	; (80187ec <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80187da:	4905      	ldr	r1, [pc, #20]	; (80187f0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80187dc:	4620      	mov	r0, r4
 80187de:	47a8      	blx	r5
    return *this;
 80187e0:	68fb      	ldr	r3, [r7, #12]
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3710      	adds	r7, #16
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bdb0      	pop	{r4, r5, r7, pc}
 80187ea:	bf00      	nop
 80187ec:	08026300 	.word	0x08026300
 80187f0:	0802631c 	.word	0x0802631c

080187f4 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80187f4:	b5b0      	push	{r4, r5, r7, lr}
 80187f6:	b086      	sub	sp, #24
 80187f8:	af02      	add	r7, sp, #8
 80187fa:	60f8      	str	r0, [r7, #12]
 80187fc:	60b9      	str	r1, [r7, #8]
 80187fe:	4639      	mov	r1, r7
 8018800:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018804:	f7fb ff9e 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8018808:	4604      	mov	r4, r0
 801880a:	6823      	ldr	r3, [r4, #0]
 801880c:	3368      	adds	r3, #104	; 0x68
 801880e:	681d      	ldr	r5, [r3, #0]
 8018810:	f7fb ffa8 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018814:	4603      	mov	r3, r0
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	f44f 7388 	mov.w	r3, #272	; 0x110
 801881c:	4a04      	ldr	r2, [pc, #16]	; (8018830 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801881e:	4905      	ldr	r1, [pc, #20]	; (8018834 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018820:	4620      	mov	r0, r4
 8018822:	47a8      	blx	r5
    return *this;
 8018824:	68fb      	ldr	r3, [r7, #12]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bdb0      	pop	{r4, r5, r7, pc}
 801882e:	bf00      	nop
 8018830:	08026300 	.word	0x08026300
 8018834:	08026348 	.word	0x08026348

08018838 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8018838:	b590      	push	{r4, r7, lr}
 801883a:	b093      	sub	sp, #76	; 0x4c
 801883c:	af00      	add	r7, sp, #0
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	60b9      	str	r1, [r7, #8]
 8018842:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8018846:	f107 0310 	add.w	r3, r7, #16
 801884a:	68b9      	ldr	r1, [r7, #8]
 801884c:	4618      	mov	r0, r3
 801884e:	f005 f8bb 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018852:	f107 0310 	add.w	r3, r7, #16
 8018856:	ed97 0b00 	vldr	d0, [r7]
 801885a:	4618      	mov	r0, r3
 801885c:	f005 f9f0 	bl	801dc40 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	33e0      	adds	r3, #224	; 0xe0
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	f107 0210 	add.w	r2, r7, #16
 801886c:	4611      	mov	r1, r2
 801886e:	68f8      	ldr	r0, [r7, #12]
 8018870:	4798      	blx	r3
    return *this;
 8018872:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018874:	f107 0310 	add.w	r3, r7, #16
 8018878:	4618      	mov	r0, r3
 801887a:	f005 f8cf 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 801887e:	4623      	mov	r3, r4
}
 8018880:	4618      	mov	r0, r3
 8018882:	374c      	adds	r7, #76	; 0x4c
 8018884:	46bd      	mov	sp, r7
 8018886:	bd90      	pop	{r4, r7, pc}

08018888 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018888:	b590      	push	{r4, r7, lr}
 801888a:	b093      	sub	sp, #76	; 0x4c
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018894:	f107 0310 	add.w	r3, r7, #16
 8018898:	68b9      	ldr	r1, [r7, #8]
 801889a:	4618      	mov	r0, r3
 801889c:	f005 f894 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80188a0:	f107 0310 	add.w	r3, r7, #16
 80188a4:	6879      	ldr	r1, [r7, #4]
 80188a6:	4618      	mov	r0, r3
 80188a8:	f005 fa74 	bl	801dd94 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	33e0      	adds	r3, #224	; 0xe0
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	f107 0210 	add.w	r2, r7, #16
 80188b8:	4611      	mov	r1, r2
 80188ba:	68f8      	ldr	r0, [r7, #12]
 80188bc:	4798      	blx	r3
    return *this;
 80188be:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80188c0:	f107 0310 	add.w	r3, r7, #16
 80188c4:	4618      	mov	r0, r3
 80188c6:	f005 f8a9 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80188ca:	4623      	mov	r3, r4
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	374c      	adds	r7, #76	; 0x4c
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd90      	pop	{r4, r7, pc}

080188d4 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 80188d4:	b590      	push	{r4, r7, lr}
 80188d6:	b093      	sub	sp, #76	; 0x4c
 80188d8:	af00      	add	r7, sp, #0
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80188e0:	f107 0310 	add.w	r3, r7, #16
 80188e4:	68b9      	ldr	r1, [r7, #8]
 80188e6:	4618      	mov	r0, r3
 80188e8:	f005 f86e 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80188ec:	f107 0310 	add.w	r3, r7, #16
 80188f0:	6879      	ldr	r1, [r7, #4]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f005 f9e8 	bl	801dcc8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	33e0      	adds	r3, #224	; 0xe0
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	f107 0210 	add.w	r2, r7, #16
 8018904:	4611      	mov	r1, r2
 8018906:	68f8      	ldr	r0, [r7, #12]
 8018908:	4798      	blx	r3
    return *this;
 801890a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801890c:	f107 0310 	add.w	r3, r7, #16
 8018910:	4618      	mov	r0, r3
 8018912:	f005 f883 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018916:	4623      	mov	r3, r4
}
 8018918:	4618      	mov	r0, r3
 801891a:	374c      	adds	r7, #76	; 0x4c
 801891c:	46bd      	mov	sp, r7
 801891e:	bd90      	pop	{r4, r7, pc}

08018920 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8018920:	b590      	push	{r4, r7, lr}
 8018922:	b093      	sub	sp, #76	; 0x4c
 8018924:	af00      	add	r7, sp, #0
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	60b9      	str	r1, [r7, #8]
 801892a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801892c:	f107 0310 	add.w	r3, r7, #16
 8018930:	68b9      	ldr	r1, [r7, #8]
 8018932:	4618      	mov	r0, r3
 8018934:	f005 f848 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018938:	f107 0310 	add.w	r3, r7, #16
 801893c:	6879      	ldr	r1, [r7, #4]
 801893e:	4618      	mov	r0, r3
 8018940:	f005 f9e4 	bl	801dd0c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	33e0      	adds	r3, #224	; 0xe0
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	f107 0210 	add.w	r2, r7, #16
 8018950:	4611      	mov	r1, r2
 8018952:	68f8      	ldr	r0, [r7, #12]
 8018954:	4798      	blx	r3
    return *this;
 8018956:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018958:	f107 0310 	add.w	r3, r7, #16
 801895c:	4618      	mov	r0, r3
 801895e:	f005 f85d 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018962:	4623      	mov	r3, r4
}
 8018964:	4618      	mov	r0, r3
 8018966:	374c      	adds	r7, #76	; 0x4c
 8018968:	46bd      	mov	sp, r7
 801896a:	bd90      	pop	{r4, r7, pc}

0801896c <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801896c:	b590      	push	{r4, r7, lr}
 801896e:	b093      	sub	sp, #76	; 0x4c
 8018970:	af00      	add	r7, sp, #0
 8018972:	60f8      	str	r0, [r7, #12]
 8018974:	60b9      	str	r1, [r7, #8]
 8018976:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018978:	f107 0310 	add.w	r3, r7, #16
 801897c:	68b9      	ldr	r1, [r7, #8]
 801897e:	4618      	mov	r0, r3
 8018980:	f005 f822 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018984:	f107 0310 	add.w	r3, r7, #16
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f005 f9e0 	bl	801dd50 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	33e0      	adds	r3, #224	; 0xe0
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	f107 0210 	add.w	r2, r7, #16
 801899c:	4611      	mov	r1, r2
 801899e:	68f8      	ldr	r0, [r7, #12]
 80189a0:	4798      	blx	r3
    return *this;
 80189a2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80189a4:	f107 0310 	add.w	r3, r7, #16
 80189a8:	4618      	mov	r0, r3
 80189aa:	f005 f837 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80189ae:	4623      	mov	r3, r4
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	374c      	adds	r7, #76	; 0x4c
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd90      	pop	{r4, r7, pc}

080189b8 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80189b8:	b590      	push	{r4, r7, lr}
 80189ba:	b093      	sub	sp, #76	; 0x4c
 80189bc:	af00      	add	r7, sp, #0
 80189be:	60f8      	str	r0, [r7, #12]
 80189c0:	60b9      	str	r1, [r7, #8]
 80189c2:	607a      	str	r2, [r7, #4]
 80189c4:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80189c6:	f107 0310 	add.w	r3, r7, #16
 80189ca:	68b9      	ldr	r1, [r7, #8]
 80189cc:	4618      	mov	r0, r3
 80189ce:	f004 fffb 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80189d2:	f107 0310 	add.w	r3, r7, #16
 80189d6:	683a      	ldr	r2, [r7, #0]
 80189d8:	6879      	ldr	r1, [r7, #4]
 80189da:	4618      	mov	r0, r3
 80189dc:	f005 f9fc 	bl	801ddd8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	33e0      	adds	r3, #224	; 0xe0
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f107 0210 	add.w	r2, r7, #16
 80189ec:	4611      	mov	r1, r2
 80189ee:	68f8      	ldr	r0, [r7, #12]
 80189f0:	4798      	blx	r3
    return *this;
 80189f2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80189f4:	f107 0310 	add.w	r3, r7, #16
 80189f8:	4618      	mov	r0, r3
 80189fa:	f005 f80f 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 80189fe:	4623      	mov	r3, r4
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	374c      	adds	r7, #76	; 0x4c
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd90      	pop	{r4, r7, pc}

08018a08 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018a08:	b590      	push	{r4, r7, lr}
 8018a0a:	b0a1      	sub	sp, #132	; 0x84
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	60f8      	str	r0, [r7, #12]
 8018a10:	60b9      	str	r1, [r7, #8]
 8018a12:	607a      	str	r2, [r7, #4]
 8018a14:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8018a16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a1a:	6879      	ldr	r1, [r7, #4]
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f004 ffd3 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8018a22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a26:	683a      	ldr	r2, [r7, #0]
 8018a28:	68b9      	ldr	r1, [r7, #8]
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f005 f9fa 	bl	801de24 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8018a30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a34:	4618      	mov	r0, r3
 8018a36:	f005 fdc7 	bl	801e5c8 <_ZNK14MockNamedValue13getComparatorEv>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	bf0c      	ite	eq
 8018a40:	2301      	moveq	r3, #1
 8018a42:	2300      	movne	r3, #0
 8018a44:	b2db      	uxtb	r3, r3
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d01c      	beq.n	8018a84 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	33cc      	adds	r3, #204	; 0xcc
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	68f8      	ldr	r0, [r7, #12]
 8018a54:	4798      	blx	r3
 8018a56:	4601      	mov	r1, r0
 8018a58:	f107 0314 	add.w	r3, r7, #20
 8018a5c:	68ba      	ldr	r2, [r7, #8]
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f004 fed6 	bl	801d810 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	33dc      	adds	r3, #220	; 0xdc
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	f107 0214 	add.w	r2, r7, #20
 8018a70:	4611      	mov	r1, r2
 8018a72:	68f8      	ldr	r0, [r7, #12]
 8018a74:	4798      	blx	r3
        return *this;
 8018a76:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8018a78:	f107 0314 	add.w	r3, r7, #20
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f001 fc81 	bl	801a384 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018a82:	e009      	b.n	8018a98 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	33e0      	adds	r3, #224	; 0xe0
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018a90:	4611      	mov	r1, r2
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	4798      	blx	r3
    return *this;
 8018a96:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f004 ffbd 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8018aa2:	4623      	mov	r3, r4
}
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	3784      	adds	r7, #132	; 0x84
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd90      	pop	{r4, r7, pc}

08018aac <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8018aac:	b590      	push	{r4, r7, lr}
 8018aae:	b095      	sub	sp, #84	; 0x54
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	60b9      	str	r1, [r7, #8]
 8018ab6:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	33f0      	adds	r3, #240	; 0xf0
 8018abe:	681c      	ldr	r4, [r3, #0]
 8018ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018ac4:	4917      	ldr	r1, [pc, #92]	; (8018b24 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7f4 fa59 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8018acc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	68b9      	ldr	r1, [r7, #8]
 8018ad4:	68f8      	ldr	r0, [r7, #12]
 8018ad6:	47a0      	blx	r4
 8018ad8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018adc:	4618      	mov	r0, r3
 8018ade:	f7f4 fe06 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8018ae2:	f107 0310 	add.w	r3, r7, #16
 8018ae6:	68b9      	ldr	r1, [r7, #8]
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f004 ff6d 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8018aee:	f107 0310 	add.w	r3, r7, #16
 8018af2:	6879      	ldr	r1, [r7, #4]
 8018af4:	4618      	mov	r0, r3
 8018af6:	f005 f8e7 	bl	801dcc8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	33e4      	adds	r3, #228	; 0xe4
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	f107 0210 	add.w	r2, r7, #16
 8018b06:	4611      	mov	r1, r2
 8018b08:	68f8      	ldr	r0, [r7, #12]
 8018b0a:	4798      	blx	r3

    return *this;
 8018b0c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018b0e:	f107 0310 	add.w	r3, r7, #16
 8018b12:	4618      	mov	r0, r3
 8018b14:	f004 ff82 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018b18:	4623      	mov	r3, r4
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	3754      	adds	r7, #84	; 0x54
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bd90      	pop	{r4, r7, pc}
 8018b22:	bf00      	nop
 8018b24:	080262f8 	.word	0x080262f8

08018b28 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8018b28:	b590      	push	{r4, r7, lr}
 8018b2a:	b093      	sub	sp, #76	; 0x4c
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	60f8      	str	r0, [r7, #12]
 8018b30:	60b9      	str	r1, [r7, #8]
 8018b32:	607a      	str	r2, [r7, #4]
 8018b34:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	33f0      	adds	r3, #240	; 0xf0
 8018b3c:	681c      	ldr	r4, [r3, #0]
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	68ba      	ldr	r2, [r7, #8]
 8018b42:	6879      	ldr	r1, [r7, #4]
 8018b44:	68f8      	ldr	r0, [r7, #12]
 8018b46:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8018b48:	f107 0310 	add.w	r3, r7, #16
 8018b4c:	6879      	ldr	r1, [r7, #4]
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f004 ff3a 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8018b54:	f107 0310 	add.w	r3, r7, #16
 8018b58:	683a      	ldr	r2, [r7, #0]
 8018b5a:	68b9      	ldr	r1, [r7, #8]
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f005 f961 	bl	801de24 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	33e4      	adds	r3, #228	; 0xe4
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	f107 0210 	add.w	r2, r7, #16
 8018b6e:	4611      	mov	r1, r2
 8018b70:	68f8      	ldr	r0, [r7, #12]
 8018b72:	4798      	blx	r3

    return *this;
 8018b74:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8018b76:	f107 0310 	add.w	r3, r7, #16
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f004 ff4e 	bl	801da1c <_ZN14MockNamedValueD1Ev>
    return *this;
 8018b80:	4623      	mov	r3, r4
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	374c      	adds	r7, #76	; 0x4c
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd90      	pop	{r4, r7, pc}

08018b8a <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8018b8a:	b480      	push	{r7}
 8018b8c:	b083      	sub	sp, #12
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	7d1b      	ldrb	r3, [r3, #20]
 8018b96:	2b02      	cmp	r3, #2
 8018b98:	bf0c      	ite	eq
 8018b9a:	2301      	moveq	r3, #1
 8018b9c:	2300      	movne	r3, #0
 8018b9e:	b2db      	uxtb	r3, r3
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	370c      	adds	r7, #12
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr

08018bac <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8018bac:	b480      	push	{r7}
 8018bae:	b083      	sub	sp, #12
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	7d1b      	ldrb	r3, [r3, #20]
 8018bb8:	2b01      	cmp	r3, #1
 8018bba:	bf0c      	ite	eq
 8018bbc:	2301      	moveq	r3, #1
 8018bbe:	2300      	movne	r3, #0
 8018bc0:	b2db      	uxtb	r3, r3
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	370c      	adds	r7, #12
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bcc:	4770      	bx	lr
	...

08018bd0 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8018bd0:	b5b0      	push	{r4, r5, r7, lr}
 8018bd2:	b096      	sub	sp, #88	; 0x58
 8018bd4:	af02      	add	r7, sp, #8
 8018bd6:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	7d5b      	ldrb	r3, [r3, #21]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	f040 80bc 	bne.w	8018d5a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2201      	movs	r2, #1
 8018be6:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	7d1b      	ldrb	r3, [r3, #20]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d014      	beq.n	8018c1a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	7d1b      	ldrb	r3, [r3, #20]
 8018bf4:	2b02      	cmp	r3, #2
 8018bf6:	d10a      	bne.n	8018c0e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6998      	ldr	r0, [r3, #24]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	699b      	ldr	r3, [r3, #24]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	33d8      	adds	r3, #216	; 0xd8
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	687a      	ldr	r2, [r7, #4]
 8018c08:	68d2      	ldr	r2, [r2, #12]
 8018c0a:	4611      	mov	r1, r2
 8018c0c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	331c      	adds	r3, #28
 8018c12:	4618      	mov	r0, r3
 8018c14:	f003 fe07 	bl	801c826 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018c18:	e0a0      	b.n	8018d5c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	331c      	adds	r3, #28
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f003 fac3 	bl	801c1aa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8018c24:	4603      	mov	r3, r0
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d00f      	beq.n	8018c4a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8018c2a:	f7fb fd8b 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8018c2e:	4604      	mov	r4, r0
 8018c30:	6823      	ldr	r3, [r4, #0]
 8018c32:	3368      	adds	r3, #104	; 0x68
 8018c34:	681d      	ldr	r5, [r3, #0]
 8018c36:	f7fb fd95 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	f240 1385 	movw	r3, #389	; 0x185
 8018c42:	4a48      	ldr	r2, [pc, #288]	; (8018d64 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8018c44:	4948      	ldr	r1, [pc, #288]	; (8018d68 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8018c46:	4620      	mov	r0, r4
 8018c48:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	331c      	adds	r3, #28
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f003 fd5f 	bl	801c712 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8018c54:	4602      	mov	r2, r0
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	699b      	ldr	r3, [r3, #24]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d01f      	beq.n	8018ca2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	699a      	ldr	r2, [r3, #24]
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	699b      	ldr	r3, [r3, #24]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	33e4      	adds	r3, #228	; 0xe4
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	4610      	mov	r0, r2
 8018c72:	4798      	blx	r3
        callHasSucceeded();
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	33d0      	adds	r3, #208	; 0xd0
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6998      	ldr	r0, [r3, #24]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	699b      	ldr	r3, [r3, #24]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	33d8      	adds	r3, #216	; 0xd8
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	687a      	ldr	r2, [r7, #4]
 8018c90:	68d2      	ldr	r2, [r2, #12]
 8018c92:	4611      	mov	r1, r2
 8018c94:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	331c      	adds	r3, #28
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f003 fdc3 	bl	801c826 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8018ca0:	e05c      	b.n	8018d5c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	331c      	adds	r3, #28
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f003 ffc4 	bl	801cc34 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8018cac:	4603      	mov	r3, r0
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d029      	beq.n	8018d06 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	33cc      	adds	r3, #204	; 0xcc
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	4798      	blx	r3
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018cc4:	6879      	ldr	r1, [r7, #4]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ff f93b 	bl	8017f42 <_ZNK21MockCheckedActualCall7getNameEv>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018cd4:	f107 000c 	add.w	r0, r7, #12
 8018cd8:	4621      	mov	r1, r4
 8018cda:	f004 fd21 	bl	801d720 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018cde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7f4 fd03 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	33dc      	adds	r3, #220	; 0xdc
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	f107 020c 	add.w	r2, r7, #12
 8018cf4:	4611      	mov	r1, r2
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018cfa:	f107 030c 	add.w	r3, r7, #12
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f001 fb62 	bl	801a3c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018d04:	e02a      	b.n	8018d5c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	33cc      	adds	r3, #204	; 0xcc
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	4798      	blx	r3
 8018d12:	4604      	mov	r4, r0
 8018d14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d18:	6879      	ldr	r1, [r7, #4]
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7ff f911 	bl	8017f42 <_ZNK21MockCheckedActualCall7getNameEv>
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018d28:	f107 000c 	add.w	r0, r7, #12
 8018d2c:	4621      	mov	r1, r4
 8018d2e:	f004 fe05 	bl	801d93c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8018d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d36:	4618      	mov	r0, r3
 8018d38:	f7f4 fcd9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	33dc      	adds	r3, #220	; 0xdc
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f107 020c 	add.w	r2, r7, #12
 8018d48:	4611      	mov	r1, r2
 8018d4a:	6878      	ldr	r0, [r7, #4]
 8018d4c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8018d4e:	f107 030c 	add.w	r3, r7, #12
 8018d52:	4618      	mov	r0, r3
 8018d54:	f001 fb5a 	bl	801a40c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018d58:	e000      	b.n	8018d5c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8018d5a:	bf00      	nop
    }
}
 8018d5c:	3750      	adds	r7, #80	; 0x50
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bdb0      	pop	{r4, r5, r7, pc}
 8018d62:	bf00      	nop
 8018d64:	08026300 	.word	0x08026300
 8018d68:	08026368 	.word	0x08026368

08018d6c <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b083      	sub	sp, #12
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
 8018d74:	460b      	mov	r3, r1
 8018d76:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	78fa      	ldrb	r2, [r7, #3]
 8018d7c:	751a      	strb	r2, [r3, #20]
}
 8018d7e:	bf00      	nop
 8018d80:	370c      	adds	r7, #12
 8018d82:	46bd      	mov	sp, r7
 8018d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d88:	4770      	bx	lr
	...

08018d8c <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	33c4      	adds	r3, #196	; 0xc4
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	6838      	ldr	r0, [r7, #0]
 8018da0:	4798      	blx	r3
    if (matchingExpectation_)
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	699b      	ldr	r3, [r3, #24]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d00a      	beq.n	8018dc0 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	6999      	ldr	r1, [r3, #24]
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	699b      	ldr	r3, [r3, #24]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	3394      	adds	r3, #148	; 0x94
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	687a      	ldr	r2, [r7, #4]
 8018dba:	4610      	mov	r0, r2
 8018dbc:	4798      	blx	r3
 8018dbe:	e010      	b.n	8018de2 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8018dc0:	f107 0308 	add.w	r3, r7, #8
 8018dc4:	4909      	ldr	r1, [pc, #36]	; (8018dec <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	f7f4 f8d9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8018dcc:	f107 0308 	add.w	r3, r7, #8
 8018dd0:	4619      	mov	r1, r3
 8018dd2:	6878      	ldr	r0, [r7, #4]
 8018dd4:	f004 fdf8 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018dd8:	f107 0308 	add.w	r3, r7, #8
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f7f4 fc86 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	3710      	adds	r7, #16
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop
 8018dec:	080263e4 	.word	0x080263e4

08018df0 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	460b      	mov	r3, r1
 8018dfa:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	3350      	adds	r3, #80	; 0x50
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	4798      	blx	r3
 8018e08:	4603      	mov	r3, r0
 8018e0a:	f083 0301 	eor.w	r3, r3, #1
 8018e0e:	b2db      	uxtb	r3, r3
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d001      	beq.n	8018e18 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8018e14:	78fb      	ldrb	r3, [r7, #3]
 8018e16:	e007      	b.n	8018e28 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	335c      	adds	r3, #92	; 0x5c
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	4798      	blx	r3
 8018e24:	4603      	mov	r3, r0
 8018e26:	bf00      	nop
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8018e30:	b590      	push	{r4, r7, lr}
 8018e32:	b091      	sub	sp, #68	; 0x44
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	3354      	adds	r3, #84	; 0x54
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	f107 0208 	add.w	r2, r7, #8
 8018e44:	6879      	ldr	r1, [r7, #4]
 8018e46:	4610      	mov	r0, r2
 8018e48:	4798      	blx	r3
 8018e4a:	f107 0308 	add.w	r3, r7, #8
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f005 f898 	bl	801df84 <_ZNK14MockNamedValue12getBoolValueEv>
 8018e54:	4603      	mov	r3, r0
 8018e56:	461c      	mov	r4, r3
 8018e58:	bf00      	nop
 8018e5a:	f107 0308 	add.w	r3, r7, #8
 8018e5e:	4618      	mov	r0, r3
 8018e60:	f004 fddc 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8018e64:	4623      	mov	r3, r4
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3744      	adds	r7, #68	; 0x44
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd90      	pop	{r4, r7, pc}

08018e6e <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8018e6e:	b580      	push	{r7, lr}
 8018e70:	b082      	sub	sp, #8
 8018e72:	af00      	add	r7, sp, #0
 8018e74:	6078      	str	r0, [r7, #4]
 8018e76:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	3350      	adds	r3, #80	; 0x50
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	4798      	blx	r3
 8018e84:	4603      	mov	r3, r0
 8018e86:	f083 0301 	eor.w	r3, r3, #1
 8018e8a:	b2db      	uxtb	r3, r3
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d001      	beq.n	8018e94 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	e007      	b.n	8018ea4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	3364      	adds	r3, #100	; 0x64
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	4798      	blx	r3
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	bf00      	nop
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3708      	adds	r7, #8
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8018eac:	b590      	push	{r4, r7, lr}
 8018eae:	b091      	sub	sp, #68	; 0x44
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	3354      	adds	r3, #84	; 0x54
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f107 0208 	add.w	r2, r7, #8
 8018ec0:	6879      	ldr	r1, [r7, #4]
 8018ec2:	4610      	mov	r0, r2
 8018ec4:	4798      	blx	r3
 8018ec6:	f107 0308 	add.w	r3, r7, #8
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f005 f8d2 	bl	801e074 <_ZNK14MockNamedValue11getIntValueEv>
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	bf00      	nop
 8018ed4:	f107 0308 	add.w	r3, r7, #8
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f004 fd9f 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8018ede:	4623      	mov	r3, r4
}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3744      	adds	r7, #68	; 0x44
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd90      	pop	{r4, r7, pc}

08018ee8 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8018ee8:	b590      	push	{r4, r7, lr}
 8018eea:	b091      	sub	sp, #68	; 0x44
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	3354      	adds	r3, #84	; 0x54
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	f107 0208 	add.w	r2, r7, #8
 8018efc:	6879      	ldr	r1, [r7, #4]
 8018efe:	4610      	mov	r0, r2
 8018f00:	4798      	blx	r3
 8018f02:	f107 0308 	add.w	r3, r7, #8
 8018f06:	4618      	mov	r0, r3
 8018f08:	f005 f93e 	bl	801e188 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8018f0c:	4604      	mov	r4, r0
 8018f0e:	bf00      	nop
 8018f10:	f107 0308 	add.w	r3, r7, #8
 8018f14:	4618      	mov	r0, r3
 8018f16:	f004 fd81 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8018f1a:	4623      	mov	r3, r4
}
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	3744      	adds	r7, #68	; 0x44
 8018f20:	46bd      	mov	sp, r7
 8018f22:	bd90      	pop	{r4, r7, pc}

08018f24 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
 8018f2c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	3350      	adds	r3, #80	; 0x50
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	4798      	blx	r3
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	f083 0301 	eor.w	r3, r3, #1
 8018f40:	b2db      	uxtb	r3, r3
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d001      	beq.n	8018f4a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	e007      	b.n	8018f5a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	3368      	adds	r3, #104	; 0x68
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	4798      	blx	r3
 8018f56:	4603      	mov	r3, r0
 8018f58:	bf00      	nop
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	3708      	adds	r7, #8
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}

08018f62 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8018f62:	b590      	push	{r4, r7, lr}
 8018f64:	b091      	sub	sp, #68	; 0x44
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	3354      	adds	r3, #84	; 0x54
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	f107 0208 	add.w	r2, r7, #8
 8018f76:	6879      	ldr	r1, [r7, #4]
 8018f78:	4610      	mov	r0, r2
 8018f7a:	4798      	blx	r3
 8018f7c:	f107 0308 	add.w	r3, r7, #8
 8018f80:	4618      	mov	r0, r3
 8018f82:	f005 f89f 	bl	801e0c4 <_ZNK14MockNamedValue15getLongIntValueEv>
 8018f86:	4604      	mov	r4, r0
 8018f88:	bf00      	nop
 8018f8a:	f107 0308 	add.w	r3, r7, #8
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f004 fd44 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8018f94:	4623      	mov	r3, r4
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3744      	adds	r7, #68	; 0x44
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd90      	pop	{r4, r7, pc}

08018f9e <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b082      	sub	sp, #8
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
 8018fa6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	3350      	adds	r3, #80	; 0x50
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	6878      	ldr	r0, [r7, #4]
 8018fb2:	4798      	blx	r3
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	f083 0301 	eor.w	r3, r3, #1
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d001      	beq.n	8018fc4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	e007      	b.n	8018fd4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	3370      	adds	r3, #112	; 0x70
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	4798      	blx	r3
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	bf00      	nop
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3708      	adds	r7, #8
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8018fdc:	b5b0      	push	{r4, r5, r7, lr}
 8018fde:	b084      	sub	sp, #16
 8018fe0:	af02      	add	r7, sp, #8
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8018fe6:	f7fb fbad 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8018fea:	4604      	mov	r4, r0
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	3368      	adds	r3, #104	; 0x68
 8018ff0:	681d      	ldr	r5, [r3, #0]
 8018ff2:	f7fb fbb7 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	9300      	str	r3, [sp, #0]
 8018ffa:	f240 13fb 	movw	r3, #507	; 0x1fb
 8018ffe:	4a06      	ldr	r2, [pc, #24]	; (8019018 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8019000:	4906      	ldr	r1, [pc, #24]	; (801901c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8019002:	4620      	mov	r0, r4
 8019004:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019006:	2100      	movs	r1, #0
 8019008:	6878      	ldr	r0, [r7, #4]
 801900a:	f7f1 fffb 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
}
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	3708      	adds	r7, #8
 8019012:	46bd      	mov	sp, r7
 8019014:	bdb0      	pop	{r4, r5, r7, pc}
 8019016:	bf00      	nop
 8019018:	08026300 	.word	0x08026300
 801901c:	0802631c 	.word	0x0802631c

08019020 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8019020:	b5b0      	push	{r4, r5, r7, lr}
 8019022:	b086      	sub	sp, #24
 8019024:	af02      	add	r7, sp, #8
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	60b9      	str	r1, [r7, #8]
 801902a:	4639      	mov	r1, r7
 801902c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019030:	f7fb fb88 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019034:	4604      	mov	r4, r0
 8019036:	6823      	ldr	r3, [r4, #0]
 8019038:	3368      	adds	r3, #104	; 0x68
 801903a:	681d      	ldr	r5, [r3, #0]
 801903c:	f7fb fb92 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019040:	4603      	mov	r3, r0
 8019042:	9300      	str	r3, [sp, #0]
 8019044:	f240 2301 	movw	r3, #513	; 0x201
 8019048:	4a06      	ldr	r2, [pc, #24]	; (8019064 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801904a:	4907      	ldr	r1, [pc, #28]	; (8019068 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801904c:	4620      	mov	r0, r4
 801904e:	47a8      	blx	r5
    return default_value;
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	461a      	mov	r2, r3
 8019054:	463b      	mov	r3, r7
 8019056:	cb03      	ldmia	r3!, {r0, r1}
 8019058:	6010      	str	r0, [r2, #0]
 801905a:	6051      	str	r1, [r2, #4]
}
 801905c:	68f8      	ldr	r0, [r7, #12]
 801905e:	3710      	adds	r7, #16
 8019060:	46bd      	mov	sp, r7
 8019062:	bdb0      	pop	{r4, r5, r7, pc}
 8019064:	08026300 	.word	0x08026300
 8019068:	0802631c 	.word	0x0802631c

0801906c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801906c:	b5b0      	push	{r4, r5, r7, lr}
 801906e:	b084      	sub	sp, #16
 8019070:	af02      	add	r7, sp, #8
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019076:	f7fb fb65 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801907a:	4604      	mov	r4, r0
 801907c:	6823      	ldr	r3, [r4, #0]
 801907e:	3368      	adds	r3, #104	; 0x68
 8019080:	681d      	ldr	r5, [r3, #0]
 8019082:	f7fb fb6f 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019086:	4603      	mov	r3, r0
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	f240 2307 	movw	r3, #519	; 0x207
 801908e:	4a06      	ldr	r2, [pc, #24]	; (80190a8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8019090:	4906      	ldr	r1, [pc, #24]	; (80190ac <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8019092:	4620      	mov	r0, r4
 8019094:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019096:	2100      	movs	r1, #0
 8019098:	6878      	ldr	r0, [r7, #4]
 801909a:	f7f1 ffa7 	bl	800afec <_ZN17cpputest_longlongC1Ei>
}
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	3708      	adds	r7, #8
 80190a2:	46bd      	mov	sp, r7
 80190a4:	bdb0      	pop	{r4, r5, r7, pc}
 80190a6:	bf00      	nop
 80190a8:	08026300 	.word	0x08026300
 80190ac:	08026348 	.word	0x08026348

080190b0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80190b0:	b5b0      	push	{r4, r5, r7, lr}
 80190b2:	b086      	sub	sp, #24
 80190b4:	af02      	add	r7, sp, #8
 80190b6:	60f8      	str	r0, [r7, #12]
 80190b8:	60b9      	str	r1, [r7, #8]
 80190ba:	4639      	mov	r1, r7
 80190bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80190c0:	f7fb fb40 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 80190c4:	4604      	mov	r4, r0
 80190c6:	6823      	ldr	r3, [r4, #0]
 80190c8:	3368      	adds	r3, #104	; 0x68
 80190ca:	681d      	ldr	r5, [r3, #0]
 80190cc:	f7fb fb4a 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80190d0:	4603      	mov	r3, r0
 80190d2:	9300      	str	r3, [sp, #0]
 80190d4:	f240 230d 	movw	r3, #525	; 0x20d
 80190d8:	4a06      	ldr	r2, [pc, #24]	; (80190f4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80190da:	4907      	ldr	r1, [pc, #28]	; (80190f8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80190dc:	4620      	mov	r0, r4
 80190de:	47a8      	blx	r5
    return default_value;
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	461a      	mov	r2, r3
 80190e4:	463b      	mov	r3, r7
 80190e6:	cb03      	ldmia	r3!, {r0, r1}
 80190e8:	6010      	str	r0, [r2, #0]
 80190ea:	6051      	str	r1, [r2, #4]
}
 80190ec:	68f8      	ldr	r0, [r7, #12]
 80190ee:	3710      	adds	r7, #16
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bdb0      	pop	{r4, r5, r7, pc}
 80190f4:	08026300 	.word	0x08026300
 80190f8:	08026348 	.word	0x08026348

080190fc <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	ed2d 8b02 	vpush	{d8}
 8019102:	b090      	sub	sp, #64	; 0x40
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	3354      	adds	r3, #84	; 0x54
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f107 0208 	add.w	r2, r7, #8
 8019114:	6879      	ldr	r1, [r7, #4]
 8019116:	4610      	mov	r0, r2
 8019118:	4798      	blx	r3
 801911a:	f107 0308 	add.w	r3, r7, #8
 801911e:	4618      	mov	r0, r3
 8019120:	f005 f90a 	bl	801e338 <_ZNK14MockNamedValue14getDoubleValueEv>
 8019124:	eeb0 8a40 	vmov.f32	s16, s0
 8019128:	eef0 8a60 	vmov.f32	s17, s1
 801912c:	bf00      	nop
 801912e:	f107 0308 	add.w	r3, r7, #8
 8019132:	4618      	mov	r0, r3
 8019134:	f004 fc72 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8019138:	eeb0 7a48 	vmov.f32	s14, s16
 801913c:	eef0 7a68 	vmov.f32	s15, s17
}
 8019140:	eeb0 0a47 	vmov.f32	s0, s14
 8019144:	eef0 0a67 	vmov.f32	s1, s15
 8019148:	3740      	adds	r7, #64	; 0x40
 801914a:	46bd      	mov	sp, r7
 801914c:	ecbd 8b02 	vpop	{d8}
 8019150:	bd80      	pop	{r7, pc}

08019152 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8019152:	b580      	push	{r7, lr}
 8019154:	b084      	sub	sp, #16
 8019156:	af00      	add	r7, sp, #0
 8019158:	60f8      	str	r0, [r7, #12]
 801915a:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	3350      	adds	r3, #80	; 0x50
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	68f8      	ldr	r0, [r7, #12]
 8019168:	4798      	blx	r3
 801916a:	4603      	mov	r3, r0
 801916c:	f083 0301 	eor.w	r3, r3, #1
 8019170:	b2db      	uxtb	r3, r3
 8019172:	2b00      	cmp	r3, #0
 8019174:	d002      	beq.n	801917c <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 8019176:	ed97 7b00 	vldr	d7, [r7]
 801917a:	e00a      	b.n	8019192 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	3398      	adds	r3, #152	; 0x98
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	68f8      	ldr	r0, [r7, #12]
 8019186:	4798      	blx	r3
 8019188:	eeb0 7a40 	vmov.f32	s14, s0
 801918c:	eef0 7a60 	vmov.f32	s15, s1
 8019190:	bf00      	nop
}
 8019192:	eeb0 0a47 	vmov.f32	s0, s14
 8019196:	eef0 0a67 	vmov.f32	s1, s15
 801919a:	3710      	adds	r7, #16
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}

080191a0 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80191a0:	b590      	push	{r4, r7, lr}
 80191a2:	b091      	sub	sp, #68	; 0x44
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	3354      	adds	r3, #84	; 0x54
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f107 0208 	add.w	r2, r7, #8
 80191b4:	6879      	ldr	r1, [r7, #4]
 80191b6:	4610      	mov	r0, r2
 80191b8:	4798      	blx	r3
 80191ba:	f107 0308 	add.w	r3, r7, #8
 80191be:	4618      	mov	r0, r3
 80191c0:	f004 ff08 	bl	801dfd4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80191c4:	4604      	mov	r4, r0
 80191c6:	bf00      	nop
 80191c8:	f107 0308 	add.w	r3, r7, #8
 80191cc:	4618      	mov	r0, r3
 80191ce:	f004 fc25 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 80191d2:	4623      	mov	r3, r4
}
 80191d4:	4618      	mov	r0, r3
 80191d6:	3744      	adds	r7, #68	; 0x44
 80191d8:	46bd      	mov	sp, r7
 80191da:	bd90      	pop	{r4, r7, pc}

080191dc <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	3350      	adds	r3, #80	; 0x50
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	4798      	blx	r3
 80191f2:	4603      	mov	r3, r0
 80191f4:	f083 0301 	eor.w	r3, r3, #1
 80191f8:	b2db      	uxtb	r3, r3
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d001      	beq.n	8019202 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	e007      	b.n	8019212 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	3388      	adds	r3, #136	; 0x88
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	4798      	blx	r3
 801920e:	4603      	mov	r3, r0
 8019210:	bf00      	nop
}
 8019212:	4618      	mov	r0, r3
 8019214:	3708      	adds	r7, #8
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}

0801921a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801921a:	b580      	push	{r7, lr}
 801921c:	b082      	sub	sp, #8
 801921e:	af00      	add	r7, sp, #0
 8019220:	6078      	str	r0, [r7, #4]
 8019222:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	3350      	adds	r3, #80	; 0x50
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	6878      	ldr	r0, [r7, #4]
 801922e:	4798      	blx	r3
 8019230:	4603      	mov	r3, r0
 8019232:	f083 0301 	eor.w	r3, r3, #1
 8019236:	b2db      	uxtb	r3, r3
 8019238:	2b00      	cmp	r3, #0
 801923a:	d001      	beq.n	8019240 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	e007      	b.n	8019250 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	33a0      	adds	r3, #160	; 0xa0
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	4798      	blx	r3
 801924c:	4603      	mov	r3, r0
 801924e:	bf00      	nop
}
 8019250:	4618      	mov	r0, r3
 8019252:	3708      	adds	r7, #8
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}

08019258 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8019258:	b590      	push	{r4, r7, lr}
 801925a:	b091      	sub	sp, #68	; 0x44
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	3354      	adds	r3, #84	; 0x54
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	f107 0208 	add.w	r2, r7, #8
 801926c:	6879      	ldr	r1, [r7, #4]
 801926e:	4610      	mov	r0, r2
 8019270:	4798      	blx	r3
 8019272:	f107 0308 	add.w	r3, r7, #8
 8019276:	4618      	mov	r0, r3
 8019278:	f005 f8e2 	bl	801e440 <_ZNK14MockNamedValue15getPointerValueEv>
 801927c:	4604      	mov	r4, r0
 801927e:	bf00      	nop
 8019280:	f107 0308 	add.w	r3, r7, #8
 8019284:	4618      	mov	r0, r3
 8019286:	f004 fbc9 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 801928a:	4623      	mov	r3, r4
}
 801928c:	4618      	mov	r0, r3
 801928e:	3744      	adds	r7, #68	; 0x44
 8019290:	46bd      	mov	sp, r7
 8019292:	bd90      	pop	{r4, r7, pc}

08019294 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8019294:	b590      	push	{r4, r7, lr}
 8019296:	b091      	sub	sp, #68	; 0x44
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	3354      	adds	r3, #84	; 0x54
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	f107 0208 	add.w	r2, r7, #8
 80192a8:	6879      	ldr	r1, [r7, #4]
 80192aa:	4610      	mov	r0, r2
 80192ac:	4798      	blx	r3
 80192ae:	f107 0308 	add.w	r3, r7, #8
 80192b2:	4618      	mov	r0, r3
 80192b4:	f005 f8ec 	bl	801e490 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80192b8:	4604      	mov	r4, r0
 80192ba:	bf00      	nop
 80192bc:	f107 0308 	add.w	r3, r7, #8
 80192c0:	4618      	mov	r0, r3
 80192c2:	f004 fbab 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 80192c6:	4623      	mov	r3, r4
}
 80192c8:	4618      	mov	r0, r3
 80192ca:	3744      	adds	r7, #68	; 0x44
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd90      	pop	{r4, r7, pc}

080192d0 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
 80192d8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	3350      	adds	r3, #80	; 0x50
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	4798      	blx	r3
 80192e6:	4603      	mov	r3, r0
 80192e8:	f083 0301 	eor.w	r3, r3, #1
 80192ec:	b2db      	uxtb	r3, r3
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d001      	beq.n	80192f6 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	e007      	b.n	8019306 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	33a8      	adds	r3, #168	; 0xa8
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	4798      	blx	r3
 8019302:	4603      	mov	r3, r0
 8019304:	bf00      	nop
}
 8019306:	4618      	mov	r0, r3
 8019308:	3708      	adds	r7, #8
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}

0801930e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801930e:	b590      	push	{r4, r7, lr}
 8019310:	b091      	sub	sp, #68	; 0x44
 8019312:	af00      	add	r7, sp, #0
 8019314:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	3354      	adds	r3, #84	; 0x54
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	f107 0208 	add.w	r2, r7, #8
 8019322:	6879      	ldr	r1, [r7, #4]
 8019324:	4610      	mov	r0, r2
 8019326:	4798      	blx	r3
 8019328:	f107 0308 	add.w	r3, r7, #8
 801932c:	4618      	mov	r0, r3
 801932e:	f005 f8d7 	bl	801e4e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8019332:	4604      	mov	r4, r0
 8019334:	bf00      	nop
 8019336:	f107 0308 	add.w	r3, r7, #8
 801933a:	4618      	mov	r0, r3
 801933c:	f004 fb6e 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8019340:	4623      	mov	r3, r4
}
 8019342:	4618      	mov	r0, r3
 8019344:	3744      	adds	r7, #68	; 0x44
 8019346:	46bd      	mov	sp, r7
 8019348:	bd90      	pop	{r4, r7, pc}

0801934a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801934a:	b580      	push	{r7, lr}
 801934c:	b082      	sub	sp, #8
 801934e:	af00      	add	r7, sp, #0
 8019350:	6078      	str	r0, [r7, #4]
 8019352:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	3350      	adds	r3, #80	; 0x50
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	4798      	blx	r3
 8019360:	4603      	mov	r3, r0
 8019362:	f083 0301 	eor.w	r3, r3, #1
 8019366:	b2db      	uxtb	r3, r3
 8019368:	2b00      	cmp	r3, #0
 801936a:	d001      	beq.n	8019370 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801936c:	683b      	ldr	r3, [r7, #0]
 801936e:	e007      	b.n	8019380 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	33b0      	adds	r3, #176	; 0xb0
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	4798      	blx	r3
 801937c:	4603      	mov	r3, r0
 801937e:	bf00      	nop
}
 8019380:	4618      	mov	r0, r3
 8019382:	3708      	adds	r7, #8
 8019384:	46bd      	mov	sp, r7
 8019386:	bd80      	pop	{r7, pc}

08019388 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b082      	sub	sp, #8
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
 8019390:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	3350      	adds	r3, #80	; 0x50
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	4798      	blx	r3
 801939e:	4603      	mov	r3, r0
 80193a0:	f083 0301 	eor.w	r3, r3, #1
 80193a4:	b2db      	uxtb	r3, r3
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d001      	beq.n	80193ae <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	e007      	b.n	80193be <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	3394      	adds	r3, #148	; 0x94
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	6878      	ldr	r0, [r7, #4]
 80193b8:	4798      	blx	r3
 80193ba:	4603      	mov	r3, r0
 80193bc:	bf00      	nop
}
 80193be:	4618      	mov	r0, r3
 80193c0:	3708      	adds	r7, #8
 80193c2:	46bd      	mov	sp, r7
 80193c4:	bd80      	pop	{r7, pc}

080193c6 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 80193c6:	b590      	push	{r4, r7, lr}
 80193c8:	b091      	sub	sp, #68	; 0x44
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	3354      	adds	r3, #84	; 0x54
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	f107 0208 	add.w	r2, r7, #8
 80193da:	6879      	ldr	r1, [r7, #4]
 80193dc:	4610      	mov	r0, r2
 80193de:	4798      	blx	r3
 80193e0:	f107 0308 	add.w	r3, r7, #8
 80193e4:	4618      	mov	r0, r3
 80193e6:	f005 f803 	bl	801e3f0 <_ZNK14MockNamedValue14getStringValueEv>
 80193ea:	4604      	mov	r4, r0
 80193ec:	bf00      	nop
 80193ee:	f107 0308 	add.w	r3, r7, #8
 80193f2:	4618      	mov	r0, r3
 80193f4:	f004 fb12 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 80193f8:	4623      	mov	r3, r4
}
 80193fa:	4618      	mov	r0, r3
 80193fc:	3744      	adds	r7, #68	; 0x44
 80193fe:	46bd      	mov	sp, r7
 8019400:	bd90      	pop	{r4, r7, pc}

08019402 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8019402:	b590      	push	{r4, r7, lr}
 8019404:	b093      	sub	sp, #76	; 0x4c
 8019406:	af00      	add	r7, sp, #0
 8019408:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	3354      	adds	r3, #84	; 0x54
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f107 0210 	add.w	r2, r7, #16
 8019416:	6879      	ldr	r1, [r7, #4]
 8019418:	4610      	mov	r0, r2
 801941a:	4798      	blx	r3
 801941c:	f107 0308 	add.w	r3, r7, #8
 8019420:	f107 0210 	add.w	r2, r7, #16
 8019424:	4611      	mov	r1, r2
 8019426:	4618      	mov	r0, r3
 8019428:	f004 fd8e 	bl	801df48 <_ZNK14MockNamedValue7getNameEv>
 801942c:	f107 0308 	add.w	r3, r7, #8
 8019430:	4618      	mov	r0, r3
 8019432:	f7f4 f94b 	bl	800d6cc <_ZNK12SimpleString7isEmptyEv>
 8019436:	4603      	mov	r3, r0
 8019438:	f083 0301 	eor.w	r3, r3, #1
 801943c:	b2dc      	uxtb	r4, r3
 801943e:	f107 0308 	add.w	r3, r7, #8
 8019442:	4618      	mov	r0, r3
 8019444:	f7f4 f953 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019448:	f107 0310 	add.w	r3, r7, #16
 801944c:	4618      	mov	r0, r3
 801944e:	f004 fae5 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 8019452:	4623      	mov	r3, r4
}
 8019454:	4618      	mov	r0, r3
 8019456:	374c      	adds	r7, #76	; 0x4c
 8019458:	46bd      	mov	sp, r7
 801945a:	bd90      	pop	{r4, r7, pc}

0801945c <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801945c:	b590      	push	{r4, r7, lr}
 801945e:	b095      	sub	sp, #84	; 0x54
 8019460:	af02      	add	r7, sp, #8
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	33c0      	adds	r3, #192	; 0xc0
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	4798      	blx	r3
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d001      	beq.n	801947c <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8019478:	687c      	ldr	r4, [r7, #4]
 801947a:	e053      	b.n	8019524 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	331c      	adds	r3, #28
 8019480:	6839      	ldr	r1, [r7, #0]
 8019482:	4618      	mov	r0, r3
 8019484:	f003 f8ca 	bl	801c61c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	699b      	ldr	r3, [r3, #24]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d109      	bne.n	80194a4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	331c      	adds	r3, #28
 8019494:	4618      	mov	r0, r3
 8019496:	f002 fe20 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801949a:	4603      	mov	r3, r0
 801949c:	2b00      	cmp	r3, #0
 801949e:	d001      	beq.n	80194a4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80194a0:	2301      	movs	r3, #1
 80194a2:	e000      	b.n	80194a6 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80194a4:	2300      	movs	r3, #0
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d02c      	beq.n	8019504 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	33cc      	adds	r3, #204	; 0xcc
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	6878      	ldr	r0, [r7, #4]
 80194b4:	4798      	blx	r3
 80194b6:	4604      	mov	r4, r0
 80194b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194bc:	6879      	ldr	r1, [r7, #4]
 80194be:	4618      	mov	r0, r3
 80194c0:	f7fe fd3f 	bl	8017f42 <_ZNK21MockCheckedActualCall7getNameEv>
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194c8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80194cc:	f107 000c 	add.w	r0, r7, #12
 80194d0:	9300      	str	r3, [sp, #0]
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	4621      	mov	r1, r4
 80194d6:	f004 f9fb 	bl	801d8d0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 80194da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194de:	4618      	mov	r0, r3
 80194e0:	f7f4 f905 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	33dc      	adds	r3, #220	; 0xdc
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	f107 020c 	add.w	r2, r7, #12
 80194f0:	4611      	mov	r1, r2
 80194f2:	6878      	ldr	r0, [r7, #4]
 80194f4:	4798      	blx	r3
        return *this;
 80194f6:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80194f8:	f107 030c 	add.w	r3, r7, #12
 80194fc:	4618      	mov	r0, r3
 80194fe:	f000 ffa7 	bl	801a450 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019502:	e00f      	b.n	8019524 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	331c      	adds	r3, #28
 8019508:	4618      	mov	r0, r3
 801950a:	f003 f9a7 	bl	801c85c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	699b      	ldr	r3, [r3, #24]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d105      	bne.n	8019522 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	33d8      	adds	r3, #216	; 0xd8
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	4798      	blx	r3
    }

    return *this;
 8019522:	687c      	ldr	r4, [r7, #4]
 8019524:	4623      	mov	r3, r4
}
 8019526:	4618      	mov	r0, r3
 8019528:	374c      	adds	r7, #76	; 0x4c
 801952a:	46bd      	mov	sp, r7
 801952c:	bd90      	pop	{r4, r7, pc}
	...

08019530 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8019530:	b590      	push	{r4, r7, lr}
 8019532:	b087      	sub	sp, #28
 8019534:	af00      	add	r7, sp, #0
 8019536:	60f8      	str	r0, [r7, #12]
 8019538:	60b9      	str	r1, [r7, #8]
 801953a:	607a      	str	r2, [r7, #4]
 801953c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801953e:	f240 2282 	movw	r2, #642	; 0x282
 8019542:	4913      	ldr	r1, [pc, #76]	; (8019590 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8019544:	2018      	movs	r0, #24
 8019546:	f7f1 f957 	bl	800a7f8 <_ZnwjPKci>
 801954a:	4604      	mov	r4, r0
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	687a      	ldr	r2, [r7, #4]
 8019550:	68b9      	ldr	r1, [r7, #8]
 8019552:	4620      	mov	r0, r4
 8019554:	f7fe fa48 	bl	80179e8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8019558:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801955e:	2b00      	cmp	r3, #0
 8019560:	d103      	bne.n	801956a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	693a      	ldr	r2, [r7, #16]
 8019566:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8019568:	e00d      	b.n	8019586 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801956e:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8019570:	697b      	ldr	r3, [r7, #20]
 8019572:	695b      	ldr	r3, [r3, #20]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d003      	beq.n	8019580 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	695b      	ldr	r3, [r3, #20]
 801957c:	617b      	str	r3, [r7, #20]
 801957e:	e7f7      	b.n	8019570 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	693a      	ldr	r2, [r7, #16]
 8019584:	615a      	str	r2, [r3, #20]
}
 8019586:	bf00      	nop
 8019588:	371c      	adds	r7, #28
 801958a:	46bd      	mov	sp, r7
 801958c:	bd90      	pop	{r4, r7, pc}
 801958e:	bf00      	nop
 8019590:	08026300 	.word	0x08026300

08019594 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8019594:	b580      	push	{r7, lr}
 8019596:	b082      	sub	sp, #8
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	3308      	adds	r3, #8
 80195a0:	4618      	mov	r0, r3
 80195a2:	f7f4 f8a4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7f4 f8a0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	4618      	mov	r0, r3
 80195b2:	3708      	adds	r7, #8
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}

080195b8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 80195b8:	b590      	push	{r4, r7, lr}
 80195ba:	b085      	sub	sp, #20
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195c4:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 80195c6:	2300      	movs	r3, #0
 80195c8:	60bb      	str	r3, [r7, #8]

    while (current) {
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d012      	beq.n	80195f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	695b      	ldr	r3, [r3, #20]
 80195d8:	60fb      	str	r3, [r7, #12]
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	68fa      	ldr	r2, [r7, #12]
 80195de:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 80195e0:	68bc      	ldr	r4, [r7, #8]
 80195e2:	2c00      	cmp	r4, #0
 80195e4:	d0f1      	beq.n	80195ca <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 80195e6:	4620      	mov	r0, r4
 80195e8:	f7ff ffd4 	bl	8019594 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 80195ec:	2118      	movs	r1, #24
 80195ee:	4620      	mov	r0, r4
 80195f0:	f7f1 f916 	bl	800a820 <_ZdlPvj>
    while (current) {
 80195f4:	e7e9      	b.n	80195ca <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 80195f6:	bf00      	nop
 80195f8:	3714      	adds	r7, #20
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd90      	pop	{r4, r7, pc}
	...

08019600 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019600:	b580      	push	{r7, lr}
 8019602:	b082      	sub	sp, #8
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	4618      	mov	r0, r3
 801960c:	f7fe fc6a 	bl	8017ee4 <_ZN14MockActualCallC1Ev>
 8019610:	4a06      	ldr	r2, [pc, #24]	; (801962c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	601a      	str	r2, [r3, #0]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	3304      	adds	r3, #4
 801961a:	4905      	ldr	r1, [pc, #20]	; (8019630 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801961c:	4618      	mov	r0, r3
 801961e:	f7f3 fcae 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
{
}
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	4618      	mov	r0, r3
 8019626:	3708      	adds	r7, #8
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	0802912c 	.word	0x0802912c
 8019630:	080262e8 	.word	0x080262e8

08019634 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
 801963c:	4a08      	ldr	r2, [pc, #32]	; (8019660 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	601a      	str	r2, [r3, #0]
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	3304      	adds	r3, #4
 8019646:	4618      	mov	r0, r3
 8019648:	f7f4 f851 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	4618      	mov	r0, r3
 8019650:	f7fe fc58 	bl	8017f04 <_ZN14MockActualCallD1Ev>
{
}
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	4618      	mov	r0, r3
 8019658:	3708      	adds	r7, #8
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
 801965e:	bf00      	nop
 8019660:	0802912c 	.word	0x0802912c

08019664 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
}
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f7ff ffe1 	bl	8019634 <_ZN19MockActualCallTraceD1Ev>
 8019672:	210c      	movs	r1, #12
 8019674:	6878      	ldr	r0, [r7, #4]
 8019676:	f7f1 f8d3 	bl	800a820 <_ZdlPvj>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	4618      	mov	r0, r3
 801967e:	3708      	adds	r7, #8
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}

08019684 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
 801968c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	3304      	adds	r3, #4
 8019692:	4907      	ldr	r1, [pc, #28]	; (80196b0 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8019694:	4618      	mov	r0, r3
 8019696:	f7f4 f8b9 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	3304      	adds	r3, #4
 801969e:	6839      	ldr	r1, [r7, #0]
 80196a0:	4618      	mov	r0, r3
 80196a2:	f7f4 f8a1 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    return *this;
 80196a6:	687b      	ldr	r3, [r7, #4]
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	3708      	adds	r7, #8
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	080263f4 	.word	0x080263f4

080196b4 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 80196b4:	b590      	push	{r4, r7, lr}
 80196b6:	b085      	sub	sp, #20
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	3304      	adds	r3, #4
 80196c2:	490e      	ldr	r1, [pc, #56]	; (80196fc <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7f4 f8a1 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	1d1c      	adds	r4, r3, #4
 80196ce:	f107 0308 	add.w	r3, r7, #8
 80196d2:	6839      	ldr	r1, [r7, #0]
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7f4 fd39 	bl	800e14c <_Z10StringFromj>
 80196da:	f107 0308 	add.w	r3, r7, #8
 80196de:	4619      	mov	r1, r3
 80196e0:	4620      	mov	r0, r4
 80196e2:	f7f4 f881 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80196e6:	f107 0308 	add.w	r3, r7, #8
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f3 ffff 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 80196f0:	687b      	ldr	r3, [r7, #4]
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	3714      	adds	r7, #20
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bd90      	pop	{r4, r7, pc}
 80196fa:	bf00      	nop
 80196fc:	08026404 	.word	0x08026404

08019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
 8019708:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	3304      	adds	r3, #4
 801970e:	490a      	ldr	r1, [pc, #40]	; (8019738 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019710:	4618      	mov	r0, r3
 8019712:	f7f4 f87b 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	3304      	adds	r3, #4
 801971a:	6839      	ldr	r1, [r7, #0]
 801971c:	4618      	mov	r0, r3
 801971e:	f7f4 f863 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	3304      	adds	r3, #4
 8019726:	4905      	ldr	r1, [pc, #20]	; (801973c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8019728:	4618      	mov	r0, r3
 801972a:	f7f4 f86f 	bl	800d80c <_ZN12SimpleStringpLEPKc>
}
 801972e:	bf00      	nop
 8019730:	3708      	adds	r7, #8
 8019732:	46bd      	mov	sp, r7
 8019734:	bd80      	pop	{r7, pc}
 8019736:	bf00      	nop
 8019738:	08026414 	.word	0x08026414
 801973c:	08026418 	.word	0x08026418

08019740 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8019740:	b590      	push	{r4, r7, lr}
 8019742:	b087      	sub	sp, #28
 8019744:	af00      	add	r7, sp, #0
 8019746:	60f8      	str	r0, [r7, #12]
 8019748:	60b9      	str	r1, [r7, #8]
 801974a:	4613      	mov	r3, r2
 801974c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801974e:	68b9      	ldr	r1, [r7, #8]
 8019750:	68f8      	ldr	r0, [r7, #12]
 8019752:	f7ff ffd5 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	1d1c      	adds	r4, r3, #4
 801975a:	f107 0310 	add.w	r3, r7, #16
 801975e:	79fa      	ldrb	r2, [r7, #7]
 8019760:	4611      	mov	r1, r2
 8019762:	4618      	mov	r0, r3
 8019764:	f7f4 fa34 	bl	800dbd0 <_Z10StringFromb>
 8019768:	f107 0310 	add.w	r3, r7, #16
 801976c:	4619      	mov	r1, r3
 801976e:	4620      	mov	r0, r4
 8019770:	f7f4 f83a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019774:	f107 0310 	add.w	r3, r7, #16
 8019778:	4618      	mov	r0, r3
 801977a:	f7f3 ffb8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 801977e:	68fb      	ldr	r3, [r7, #12]
}
 8019780:	4618      	mov	r0, r3
 8019782:	371c      	adds	r7, #28
 8019784:	46bd      	mov	sp, r7
 8019786:	bd90      	pop	{r4, r7, pc}

08019788 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019788:	b590      	push	{r4, r7, lr}
 801978a:	b08f      	sub	sp, #60	; 0x3c
 801978c:	af00      	add	r7, sp, #0
 801978e:	60f8      	str	r0, [r7, #12]
 8019790:	60b9      	str	r1, [r7, #8]
 8019792:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019794:	68b9      	ldr	r1, [r7, #8]
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f7ff ffb2 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	1d1c      	adds	r4, r3, #4
 80197a0:	f107 0320 	add.w	r3, r7, #32
 80197a4:	6879      	ldr	r1, [r7, #4]
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7f4 fcd0 	bl	800e14c <_Z10StringFromj>
 80197ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80197b0:	491f      	ldr	r1, [pc, #124]	; (8019830 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7f3 fbe3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80197b8:	f107 0318 	add.w	r3, r7, #24
 80197bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80197c0:	f107 0120 	add.w	r1, r7, #32
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7f3 fff4 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 80197ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80197ce:	6879      	ldr	r1, [r7, #4]
 80197d0:	4618      	mov	r0, r3
 80197d2:	f7f4 fb5f 	bl	800de94 <_Z30BracketsFormattedHexStringFromj>
 80197d6:	f107 0310 	add.w	r3, r7, #16
 80197da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80197de:	f107 0118 	add.w	r1, r7, #24
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7f3 ffe5 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 80197e8:	f107 0310 	add.w	r3, r7, #16
 80197ec:	4619      	mov	r1, r3
 80197ee:	4620      	mov	r0, r4
 80197f0:	f7f3 fffa 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80197f4:	f107 0310 	add.w	r3, r7, #16
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7f3 ff78 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80197fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019802:	4618      	mov	r0, r3
 8019804:	f7f3 ff73 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019808:	f107 0318 	add.w	r3, r7, #24
 801980c:	4618      	mov	r0, r3
 801980e:	f7f3 ff6e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019816:	4618      	mov	r0, r3
 8019818:	f7f3 ff69 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801981c:	f107 0320 	add.w	r3, r7, #32
 8019820:	4618      	mov	r0, r3
 8019822:	f7f3 ff64 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019826:	68fb      	ldr	r3, [r7, #12]
}
 8019828:	4618      	mov	r0, r3
 801982a:	373c      	adds	r7, #60	; 0x3c
 801982c:	46bd      	mov	sp, r7
 801982e:	bd90      	pop	{r4, r7, pc}
 8019830:	08026414 	.word	0x08026414

08019834 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8019834:	b590      	push	{r4, r7, lr}
 8019836:	b08f      	sub	sp, #60	; 0x3c
 8019838:	af00      	add	r7, sp, #0
 801983a:	60f8      	str	r0, [r7, #12]
 801983c:	60b9      	str	r1, [r7, #8]
 801983e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019840:	68b9      	ldr	r1, [r7, #8]
 8019842:	68f8      	ldr	r0, [r7, #12]
 8019844:	f7ff ff5c 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	1d1c      	adds	r4, r3, #4
 801984c:	f107 0320 	add.w	r3, r7, #32
 8019850:	6879      	ldr	r1, [r7, #4]
 8019852:	4618      	mov	r0, r3
 8019854:	f7f4 fa12 	bl	800dc7c <_Z10StringFromi>
 8019858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801985c:	491f      	ldr	r1, [pc, #124]	; (80198dc <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801985e:	4618      	mov	r0, r3
 8019860:	f7f3 fb8d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8019864:	f107 0318 	add.w	r3, r7, #24
 8019868:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801986c:	f107 0120 	add.w	r1, r7, #32
 8019870:	4618      	mov	r0, r3
 8019872:	f7f3 ff9e 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 8019876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801987a:	6879      	ldr	r1, [r7, #4]
 801987c:	4618      	mov	r0, r3
 801987e:	f7f4 faed 	bl	800de5c <_Z30BracketsFormattedHexStringFromi>
 8019882:	f107 0310 	add.w	r3, r7, #16
 8019886:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801988a:	f107 0118 	add.w	r1, r7, #24
 801988e:	4618      	mov	r0, r3
 8019890:	f7f3 ff8f 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 8019894:	f107 0310 	add.w	r3, r7, #16
 8019898:	4619      	mov	r1, r3
 801989a:	4620      	mov	r0, r4
 801989c:	f7f3 ffa4 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80198a0:	f107 0310 	add.w	r3, r7, #16
 80198a4:	4618      	mov	r0, r3
 80198a6:	f7f3 ff22 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80198aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7f3 ff1d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80198b4:	f107 0318 	add.w	r3, r7, #24
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7f3 ff18 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80198be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80198c2:	4618      	mov	r0, r3
 80198c4:	f7f3 ff13 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 80198c8:	f107 0320 	add.w	r3, r7, #32
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7f3 ff0e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 80198d2:	68fb      	ldr	r3, [r7, #12]
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	373c      	adds	r7, #60	; 0x3c
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd90      	pop	{r4, r7, pc}
 80198dc:	08026414 	.word	0x08026414

080198e0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80198e0:	b590      	push	{r4, r7, lr}
 80198e2:	b08f      	sub	sp, #60	; 0x3c
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	60f8      	str	r0, [r7, #12]
 80198e8:	60b9      	str	r1, [r7, #8]
 80198ea:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80198ec:	68b9      	ldr	r1, [r7, #8]
 80198ee:	68f8      	ldr	r0, [r7, #12]
 80198f0:	f7ff ff06 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80198f4:	68fb      	ldr	r3, [r7, #12]
 80198f6:	1d1c      	adds	r4, r3, #4
 80198f8:	f107 0320 	add.w	r3, r7, #32
 80198fc:	6879      	ldr	r1, [r7, #4]
 80198fe:	4618      	mov	r0, r3
 8019900:	f7f4 fc36 	bl	800e170 <_Z10StringFromm>
 8019904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019908:	491f      	ldr	r1, [pc, #124]	; (8019988 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801990a:	4618      	mov	r0, r3
 801990c:	f7f3 fb37 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8019910:	f107 0318 	add.w	r3, r7, #24
 8019914:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019918:	f107 0120 	add.w	r1, r7, #32
 801991c:	4618      	mov	r0, r3
 801991e:	f7f3 ff48 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 8019922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	4618      	mov	r0, r3
 801992a:	f7f4 faeb 	bl	800df04 <_Z30BracketsFormattedHexStringFromm>
 801992e:	f107 0310 	add.w	r3, r7, #16
 8019932:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019936:	f107 0118 	add.w	r1, r7, #24
 801993a:	4618      	mov	r0, r3
 801993c:	f7f3 ff39 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 8019940:	f107 0310 	add.w	r3, r7, #16
 8019944:	4619      	mov	r1, r3
 8019946:	4620      	mov	r0, r4
 8019948:	f7f3 ff4e 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801994c:	f107 0310 	add.w	r3, r7, #16
 8019950:	4618      	mov	r0, r3
 8019952:	f7f3 fecc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801995a:	4618      	mov	r0, r3
 801995c:	f7f3 fec7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019960:	f107 0318 	add.w	r3, r7, #24
 8019964:	4618      	mov	r0, r3
 8019966:	f7f3 fec2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801996a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801996e:	4618      	mov	r0, r3
 8019970:	f7f3 febd 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019974:	f107 0320 	add.w	r3, r7, #32
 8019978:	4618      	mov	r0, r3
 801997a:	f7f3 feb8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 801997e:	68fb      	ldr	r3, [r7, #12]
}
 8019980:	4618      	mov	r0, r3
 8019982:	373c      	adds	r7, #60	; 0x3c
 8019984:	46bd      	mov	sp, r7
 8019986:	bd90      	pop	{r4, r7, pc}
 8019988:	08026414 	.word	0x08026414

0801998c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801998c:	b590      	push	{r4, r7, lr}
 801998e:	b08f      	sub	sp, #60	; 0x3c
 8019990:	af00      	add	r7, sp, #0
 8019992:	60f8      	str	r0, [r7, #12]
 8019994:	60b9      	str	r1, [r7, #8]
 8019996:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019998:	68b9      	ldr	r1, [r7, #8]
 801999a:	68f8      	ldr	r0, [r7, #12]
 801999c:	f7ff feb0 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	1d1c      	adds	r4, r3, #4
 80199a4:	f107 0320 	add.w	r3, r7, #32
 80199a8:	6879      	ldr	r1, [r7, #4]
 80199aa:	4618      	mov	r0, r3
 80199ac:	f7f4 f978 	bl	800dca0 <_Z10StringFroml>
 80199b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80199b4:	491f      	ldr	r1, [pc, #124]	; (8019a34 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80199b6:	4618      	mov	r0, r3
 80199b8:	f7f3 fae1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 80199bc:	f107 0318 	add.w	r3, r7, #24
 80199c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80199c4:	f107 0120 	add.w	r1, r7, #32
 80199c8:	4618      	mov	r0, r3
 80199ca:	f7f3 fef2 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 80199ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80199d2:	6879      	ldr	r1, [r7, #4]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f4 fa79 	bl	800decc <_Z30BracketsFormattedHexStringFroml>
 80199da:	f107 0310 	add.w	r3, r7, #16
 80199de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80199e2:	f107 0118 	add.w	r1, r7, #24
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7f3 fee3 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 80199ec:	f107 0310 	add.w	r3, r7, #16
 80199f0:	4619      	mov	r1, r3
 80199f2:	4620      	mov	r0, r4
 80199f4:	f7f3 fef8 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 80199f8:	f107 0310 	add.w	r3, r7, #16
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7f3 fe76 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7f3 fe71 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019a0c:	f107 0318 	add.w	r3, r7, #24
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7f3 fe6c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7f3 fe67 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 8019a20:	f107 0320 	add.w	r3, r7, #32
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7f3 fe62 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
}
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	373c      	adds	r7, #60	; 0x3c
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd90      	pop	{r4, r7, pc}
 8019a34:	08026414 	.word	0x08026414

08019a38 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8019a38:	b5b0      	push	{r4, r5, r7, lr}
 8019a3a:	b086      	sub	sp, #24
 8019a3c:	af02      	add	r7, sp, #8
 8019a3e:	60f8      	str	r0, [r7, #12]
 8019a40:	60b9      	str	r1, [r7, #8]
 8019a42:	4639      	mov	r1, r7
 8019a44:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019a48:	f7fa fe7c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019a4c:	4604      	mov	r4, r0
 8019a4e:	6823      	ldr	r3, [r4, #0]
 8019a50:	3368      	adds	r3, #104	; 0x68
 8019a52:	681d      	ldr	r5, [r3, #0]
 8019a54:	f7fa fe86 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019a58:	4603      	mov	r3, r0
 8019a5a:	9300      	str	r3, [sp, #0]
 8019a5c:	f240 23ee 	movw	r3, #750	; 0x2ee
 8019a60:	4a04      	ldr	r2, [pc, #16]	; (8019a74 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8019a62:	4905      	ldr	r1, [pc, #20]	; (8019a78 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8019a64:	4620      	mov	r0, r4
 8019a66:	47a8      	blx	r5
    return *this;
 8019a68:	68fb      	ldr	r3, [r7, #12]
}
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	3710      	adds	r7, #16
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bdb0      	pop	{r4, r5, r7, pc}
 8019a72:	bf00      	nop
 8019a74:	08026300 	.word	0x08026300
 8019a78:	0802631c 	.word	0x0802631c

08019a7c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019a7c:	b5b0      	push	{r4, r5, r7, lr}
 8019a7e:	b086      	sub	sp, #24
 8019a80:	af02      	add	r7, sp, #8
 8019a82:	60f8      	str	r0, [r7, #12]
 8019a84:	60b9      	str	r1, [r7, #8]
 8019a86:	4639      	mov	r1, r7
 8019a88:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019a8c:	f7fa fe5a 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019a90:	4604      	mov	r4, r0
 8019a92:	6823      	ldr	r3, [r4, #0]
 8019a94:	3368      	adds	r3, #104	; 0x68
 8019a96:	681d      	ldr	r5, [r3, #0]
 8019a98:	f7fa fe64 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	9300      	str	r3, [sp, #0]
 8019aa0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8019aa4:	4a04      	ldr	r2, [pc, #16]	; (8019ab8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8019aa6:	4905      	ldr	r1, [pc, #20]	; (8019abc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	47a8      	blx	r5
    return *this;
 8019aac:	68fb      	ldr	r3, [r7, #12]
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	3710      	adds	r7, #16
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	08026300 	.word	0x08026300
 8019abc:	08026348 	.word	0x08026348

08019ac0 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8019ac0:	b590      	push	{r4, r7, lr}
 8019ac2:	b087      	sub	sp, #28
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	60f8      	str	r0, [r7, #12]
 8019ac8:	60b9      	str	r1, [r7, #8]
 8019aca:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8019ace:	68b9      	ldr	r1, [r7, #8]
 8019ad0:	68f8      	ldr	r0, [r7, #12]
 8019ad2:	f7ff fe15 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	1d1c      	adds	r4, r3, #4
 8019ada:	f107 0310 	add.w	r3, r7, #16
 8019ade:	2106      	movs	r1, #6
 8019ae0:	ed97 0b00 	vldr	d0, [r7]
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f4 fac7 	bl	800e078 <_Z10StringFromdi>
 8019aea:	f107 0310 	add.w	r3, r7, #16
 8019aee:	4619      	mov	r1, r3
 8019af0:	4620      	mov	r0, r4
 8019af2:	f7f3 fe79 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019af6:	f107 0310 	add.w	r3, r7, #16
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7f3 fdf7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019b00:	68fb      	ldr	r3, [r7, #12]
}
 8019b02:	4618      	mov	r0, r3
 8019b04:	371c      	adds	r7, #28
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd90      	pop	{r4, r7, pc}

08019b0a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8019b0a:	b590      	push	{r4, r7, lr}
 8019b0c:	b087      	sub	sp, #28
 8019b0e:	af00      	add	r7, sp, #0
 8019b10:	60f8      	str	r0, [r7, #12]
 8019b12:	60b9      	str	r1, [r7, #8]
 8019b14:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019b16:	68b9      	ldr	r1, [r7, #8]
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f7ff fdf1 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	1d1c      	adds	r4, r3, #4
 8019b22:	f107 0310 	add.w	r3, r7, #16
 8019b26:	6879      	ldr	r1, [r7, #4]
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f7f4 f86d 	bl	800dc08 <_Z10StringFromPKc>
 8019b2e:	f107 0310 	add.w	r3, r7, #16
 8019b32:	4619      	mov	r1, r3
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7f3 fe57 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019b3a:	f107 0310 	add.w	r3, r7, #16
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7f3 fdd5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019b44:	68fb      	ldr	r3, [r7, #12]
}
 8019b46:	4618      	mov	r0, r3
 8019b48:	371c      	adds	r7, #28
 8019b4a:	46bd      	mov	sp, r7
 8019b4c:	bd90      	pop	{r4, r7, pc}

08019b4e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8019b4e:	b590      	push	{r4, r7, lr}
 8019b50:	b087      	sub	sp, #28
 8019b52:	af00      	add	r7, sp, #0
 8019b54:	60f8      	str	r0, [r7, #12]
 8019b56:	60b9      	str	r1, [r7, #8]
 8019b58:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019b5a:	68b9      	ldr	r1, [r7, #8]
 8019b5c:	68f8      	ldr	r0, [r7, #12]
 8019b5e:	f7ff fdcf 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	1d1c      	adds	r4, r3, #4
 8019b66:	f107 0310 	add.w	r3, r7, #16
 8019b6a:	6879      	ldr	r1, [r7, #4]
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	f7f4 f8a9 	bl	800dcc4 <_Z10StringFromPKv>
 8019b72:	f107 0310 	add.w	r3, r7, #16
 8019b76:	4619      	mov	r1, r3
 8019b78:	4620      	mov	r0, r4
 8019b7a:	f7f3 fe35 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019b7e:	f107 0310 	add.w	r3, r7, #16
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7f3 fdb3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019b88:	68fb      	ldr	r3, [r7, #12]
}
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	371c      	adds	r7, #28
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bd90      	pop	{r4, r7, pc}

08019b92 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019b92:	b590      	push	{r4, r7, lr}
 8019b94:	b087      	sub	sp, #28
 8019b96:	af00      	add	r7, sp, #0
 8019b98:	60f8      	str	r0, [r7, #12]
 8019b9a:	60b9      	str	r1, [r7, #8]
 8019b9c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019b9e:	68b9      	ldr	r1, [r7, #8]
 8019ba0:	68f8      	ldr	r0, [r7, #12]
 8019ba2:	f7ff fdad 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	1d1c      	adds	r4, r3, #4
 8019baa:	f107 0310 	add.w	r3, r7, #16
 8019bae:	6879      	ldr	r1, [r7, #4]
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	f7f4 f887 	bl	800dcc4 <_Z10StringFromPKv>
 8019bb6:	f107 0310 	add.w	r3, r7, #16
 8019bba:	4619      	mov	r1, r3
 8019bbc:	4620      	mov	r0, r4
 8019bbe:	f7f3 fe13 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019bc2:	f107 0310 	add.w	r3, r7, #16
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7f3 fd91 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	371c      	adds	r7, #28
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd90      	pop	{r4, r7, pc}

08019bd6 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019bd6:	b590      	push	{r4, r7, lr}
 8019bd8:	b087      	sub	sp, #28
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	60f8      	str	r0, [r7, #12]
 8019bde:	60b9      	str	r1, [r7, #8]
 8019be0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019be2:	68b9      	ldr	r1, [r7, #8]
 8019be4:	68f8      	ldr	r0, [r7, #12]
 8019be6:	f7ff fd8b 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	1d1c      	adds	r4, r3, #4
 8019bee:	f107 0310 	add.w	r3, r7, #16
 8019bf2:	6879      	ldr	r1, [r7, #4]
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f7f4 f88f 	bl	800dd18 <_Z10StringFromPFvvE>
 8019bfa:	f107 0310 	add.w	r3, r7, #16
 8019bfe:	4619      	mov	r1, r3
 8019c00:	4620      	mov	r0, r4
 8019c02:	f7f3 fdf1 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019c06:	f107 0310 	add.w	r3, r7, #16
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f7f3 fd6f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019c10:	68fb      	ldr	r3, [r7, #12]
}
 8019c12:	4618      	mov	r0, r3
 8019c14:	371c      	adds	r7, #28
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd90      	pop	{r4, r7, pc}

08019c1a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8019c1a:	b590      	push	{r4, r7, lr}
 8019c1c:	b087      	sub	sp, #28
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	60f8      	str	r0, [r7, #12]
 8019c22:	60b9      	str	r1, [r7, #8]
 8019c24:	607a      	str	r2, [r7, #4]
 8019c26:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8019c28:	68b9      	ldr	r1, [r7, #8]
 8019c2a:	68f8      	ldr	r0, [r7, #12]
 8019c2c:	f7ff fd68 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	1d1c      	adds	r4, r3, #4
 8019c34:	f107 0310 	add.w	r3, r7, #16
 8019c38:	683a      	ldr	r2, [r7, #0]
 8019c3a:	6879      	ldr	r1, [r7, #4]
 8019c3c:	4618      	mov	r0, r3
 8019c3e:	f7f4 fbaf 	bl	800e3a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8019c42:	f107 0310 	add.w	r3, r7, #16
 8019c46:	4619      	mov	r1, r3
 8019c48:	4620      	mov	r0, r4
 8019c4a:	f7f3 fdcd 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019c4e:	f107 0310 	add.w	r3, r7, #16
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7f3 fd4b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019c58:	68fb      	ldr	r3, [r7, #12]
}
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	371c      	adds	r7, #28
 8019c5e:	46bd      	mov	sp, r7
 8019c60:	bd90      	pop	{r4, r7, pc}
	...

08019c64 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8019c64:	b590      	push	{r4, r7, lr}
 8019c66:	b087      	sub	sp, #28
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	607a      	str	r2, [r7, #4]
 8019c70:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	3304      	adds	r3, #4
 8019c76:	4913      	ldr	r1, [pc, #76]	; (8019cc4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f7f3 fdc7 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	3304      	adds	r3, #4
 8019c82:	68b9      	ldr	r1, [r7, #8]
 8019c84:	4618      	mov	r0, r3
 8019c86:	f7f3 fdaf 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019c8a:	6879      	ldr	r1, [r7, #4]
 8019c8c:	68f8      	ldr	r0, [r7, #12]
 8019c8e:	f7ff fd37 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	1d1c      	adds	r4, r3, #4
 8019c96:	f107 0310 	add.w	r3, r7, #16
 8019c9a:	6839      	ldr	r1, [r7, #0]
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7f4 f811 	bl	800dcc4 <_Z10StringFromPKv>
 8019ca2:	f107 0310 	add.w	r3, r7, #16
 8019ca6:	4619      	mov	r1, r3
 8019ca8:	4620      	mov	r0, r4
 8019caa:	f7f3 fd9d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019cae:	f107 0310 	add.w	r3, r7, #16
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7f3 fd1b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019cb8:	68fb      	ldr	r3, [r7, #12]
}
 8019cba:	4618      	mov	r0, r3
 8019cbc:	371c      	adds	r7, #28
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	bd90      	pop	{r4, r7, pc}
 8019cc2:	bf00      	nop
 8019cc4:	08026414 	.word	0x08026414

08019cc8 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8019cc8:	b590      	push	{r4, r7, lr}
 8019cca:	b087      	sub	sp, #28
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	60f8      	str	r0, [r7, #12]
 8019cd0:	60b9      	str	r1, [r7, #8]
 8019cd2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019cd4:	68b9      	ldr	r1, [r7, #8]
 8019cd6:	68f8      	ldr	r0, [r7, #12]
 8019cd8:	f7ff fd12 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	1d1c      	adds	r4, r3, #4
 8019ce0:	f107 0310 	add.w	r3, r7, #16
 8019ce4:	6879      	ldr	r1, [r7, #4]
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7f3 ffec 	bl	800dcc4 <_Z10StringFromPKv>
 8019cec:	f107 0310 	add.w	r3, r7, #16
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f7f3 fd78 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019cf8:	f107 0310 	add.w	r3, r7, #16
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f7f3 fcf6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019d02:	68fb      	ldr	r3, [r7, #12]
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	371c      	adds	r7, #28
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd90      	pop	{r4, r7, pc}

08019d0c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8019d0c:	b590      	push	{r4, r7, lr}
 8019d0e:	b087      	sub	sp, #28
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	60b9      	str	r1, [r7, #8]
 8019d16:	607a      	str	r2, [r7, #4]
 8019d18:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	3304      	adds	r3, #4
 8019d1e:	4913      	ldr	r1, [pc, #76]	; (8019d6c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7f3 fd73 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	3304      	adds	r3, #4
 8019d2a:	68b9      	ldr	r1, [r7, #8]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f7f3 fd5b 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8019d32:	6879      	ldr	r1, [r7, #4]
 8019d34:	68f8      	ldr	r0, [r7, #12]
 8019d36:	f7ff fce3 	bl	8019700 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	1d1c      	adds	r4, r3, #4
 8019d3e:	f107 0310 	add.w	r3, r7, #16
 8019d42:	6839      	ldr	r1, [r7, #0]
 8019d44:	4618      	mov	r0, r3
 8019d46:	f7f3 ffbd 	bl	800dcc4 <_Z10StringFromPKv>
 8019d4a:	f107 0310 	add.w	r3, r7, #16
 8019d4e:	4619      	mov	r1, r3
 8019d50:	4620      	mov	r0, r4
 8019d52:	f7f3 fd49 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 8019d56:	f107 0310 	add.w	r3, r7, #16
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f7f3 fcc7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 8019d60:	68fb      	ldr	r3, [r7, #12]
}
 8019d62:	4618      	mov	r0, r3
 8019d64:	371c      	adds	r7, #28
 8019d66:	46bd      	mov	sp, r7
 8019d68:	bd90      	pop	{r4, r7, pc}
 8019d6a:	bf00      	nop
 8019d6c:	08026414 	.word	0x08026414

08019d70 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8019d70:	b480      	push	{r7}
 8019d72:	b083      	sub	sp, #12
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
    return false;
 8019d78:	2300      	movs	r3, #0
}
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	370c      	adds	r7, #12
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d84:	4770      	bx	lr
	...

08019d88 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b084      	sub	sp, #16
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
 8019d90:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8019d92:	f107 0308 	add.w	r3, r7, #8
 8019d96:	4909      	ldr	r1, [pc, #36]	; (8019dbc <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7f3 f8f0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 8019d9e:	f107 0308 	add.w	r3, r7, #8
 8019da2:	4619      	mov	r1, r3
 8019da4:	6878      	ldr	r0, [r7, #4]
 8019da6:	f003 fe0f 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019daa:	f107 0308 	add.w	r3, r7, #8
 8019dae:	4618      	mov	r0, r3
 8019db0:	f7f3 fc9d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	3710      	adds	r7, #16
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	080262e8 	.word	0x080262e8

08019dc0 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8019dc0:	b480      	push	{r7}
 8019dc2:	b083      	sub	sp, #12
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	6078      	str	r0, [r7, #4]
    return 0;
 8019dc8:	2300      	movs	r3, #0
}
 8019dca:	4618      	mov	r0, r3
 8019dcc:	370c      	adds	r7, #12
 8019dce:	46bd      	mov	sp, r7
 8019dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd4:	4770      	bx	lr

08019dd6 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8019dd6:	b480      	push	{r7}
 8019dd8:	b083      	sub	sp, #12
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	6078      	str	r0, [r7, #4]
    return 0;
 8019dde:	2300      	movs	r3, #0
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	370c      	adds	r7, #12
 8019de4:	46bd      	mov	sp, r7
 8019de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dea:	4770      	bx	lr

08019dec <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8019dec:	b480      	push	{r7}
 8019dee:	b083      	sub	sp, #12
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	6039      	str	r1, [r7, #0]
    return 0;
 8019df6:	2300      	movs	r3, #0
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	370c      	adds	r7, #12
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e02:	4770      	bx	lr

08019e04 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8019e04:	b480      	push	{r7}
 8019e06:	b083      	sub	sp, #12
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
    return 0;
 8019e0e:	2300      	movs	r3, #0
}
 8019e10:	4618      	mov	r0, r3
 8019e12:	370c      	adds	r7, #12
 8019e14:	46bd      	mov	sp, r7
 8019e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1a:	4770      	bx	lr

08019e1c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8019e1c:	b5b0      	push	{r4, r5, r7, lr}
 8019e1e:	b084      	sub	sp, #16
 8019e20:	af02      	add	r7, sp, #8
 8019e22:	6078      	str	r0, [r7, #4]
 8019e24:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8019e26:	f7fa fc8d 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019e2a:	4604      	mov	r4, r0
 8019e2c:	6823      	ldr	r3, [r4, #0]
 8019e2e:	3368      	adds	r3, #104	; 0x68
 8019e30:	681d      	ldr	r5, [r3, #0]
 8019e32:	f7fa fc97 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019e36:	4603      	mov	r3, r0
 8019e38:	9300      	str	r3, [sp, #0]
 8019e3a:	f240 3375 	movw	r3, #885	; 0x375
 8019e3e:	4a06      	ldr	r2, [pc, #24]	; (8019e58 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8019e40:	4906      	ldr	r1, [pc, #24]	; (8019e5c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8019e42:	4620      	mov	r0, r4
 8019e44:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019e46:	2100      	movs	r1, #0
 8019e48:	6878      	ldr	r0, [r7, #4]
 8019e4a:	f7f1 f8cf 	bl	800afec <_ZN17cpputest_longlongC1Ei>
}
 8019e4e:	6878      	ldr	r0, [r7, #4]
 8019e50:	3708      	adds	r7, #8
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bdb0      	pop	{r4, r5, r7, pc}
 8019e56:	bf00      	nop
 8019e58:	08026300 	.word	0x08026300
 8019e5c:	08026348 	.word	0x08026348

08019e60 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8019e60:	b5b0      	push	{r4, r5, r7, lr}
 8019e62:	b084      	sub	sp, #16
 8019e64:	af02      	add	r7, sp, #8
 8019e66:	6078      	str	r0, [r7, #4]
 8019e68:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019e6a:	f7fa fc6b 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019e6e:	4604      	mov	r4, r0
 8019e70:	6823      	ldr	r3, [r4, #0]
 8019e72:	3368      	adds	r3, #104	; 0x68
 8019e74:	681d      	ldr	r5, [r3, #0]
 8019e76:	f7fa fc75 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	f240 337b 	movw	r3, #891	; 0x37b
 8019e82:	4a06      	ldr	r2, [pc, #24]	; (8019e9c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 8019e84:	4906      	ldr	r1, [pc, #24]	; (8019ea0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 8019e86:	4620      	mov	r0, r4
 8019e88:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019e8a:	2100      	movs	r1, #0
 8019e8c:	6878      	ldr	r0, [r7, #4]
 8019e8e:	f7f1 f8b9 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
}
 8019e92:	6878      	ldr	r0, [r7, #4]
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bdb0      	pop	{r4, r5, r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	08026300 	.word	0x08026300
 8019ea0:	0802631c 	.word	0x0802631c

08019ea4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 8019ea4:	b5b0      	push	{r4, r5, r7, lr}
 8019ea6:	b086      	sub	sp, #24
 8019ea8:	af02      	add	r7, sp, #8
 8019eaa:	60f8      	str	r0, [r7, #12]
 8019eac:	60b9      	str	r1, [r7, #8]
 8019eae:	4639      	mov	r1, r7
 8019eb0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019eb4:	f7fa fc46 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019eb8:	4604      	mov	r4, r0
 8019eba:	6823      	ldr	r3, [r4, #0]
 8019ebc:	3368      	adds	r3, #104	; 0x68
 8019ebe:	681d      	ldr	r5, [r3, #0]
 8019ec0:	f7fa fc50 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019ec4:	4603      	mov	r3, r0
 8019ec6:	9300      	str	r3, [sp, #0]
 8019ec8:	f240 3381 	movw	r3, #897	; 0x381
 8019ecc:	4a05      	ldr	r2, [pc, #20]	; (8019ee4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8019ece:	4906      	ldr	r1, [pc, #24]	; (8019ee8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8019ed4:	2100      	movs	r1, #0
 8019ed6:	68f8      	ldr	r0, [r7, #12]
 8019ed8:	f7f1 f894 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
}
 8019edc:	68f8      	ldr	r0, [r7, #12]
 8019ede:	3710      	adds	r7, #16
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8019ee4:	08026300 	.word	0x08026300
 8019ee8:	0802631c 	.word	0x0802631c

08019eec <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8019eec:	b5b0      	push	{r4, r5, r7, lr}
 8019eee:	b086      	sub	sp, #24
 8019ef0:	af02      	add	r7, sp, #8
 8019ef2:	60f8      	str	r0, [r7, #12]
 8019ef4:	60b9      	str	r1, [r7, #8]
 8019ef6:	4639      	mov	r1, r7
 8019ef8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019efc:	f7fa fc22 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 8019f00:	4604      	mov	r4, r0
 8019f02:	6823      	ldr	r3, [r4, #0]
 8019f04:	3368      	adds	r3, #104	; 0x68
 8019f06:	681d      	ldr	r5, [r3, #0]
 8019f08:	f7fa fc2c 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	9300      	str	r3, [sp, #0]
 8019f10:	f240 3387 	movw	r3, #903	; 0x387
 8019f14:	4a05      	ldr	r2, [pc, #20]	; (8019f2c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8019f16:	4906      	ldr	r1, [pc, #24]	; (8019f30 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8019f18:	4620      	mov	r0, r4
 8019f1a:	47a8      	blx	r5
    return cpputest_longlong(0);
 8019f1c:	2100      	movs	r1, #0
 8019f1e:	68f8      	ldr	r0, [r7, #12]
 8019f20:	f7f1 f864 	bl	800afec <_ZN17cpputest_longlongC1Ei>
}
 8019f24:	68f8      	ldr	r0, [r7, #12]
 8019f26:	3710      	adds	r7, #16
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f2c:	08026300 	.word	0x08026300
 8019f30:	08026348 	.word	0x08026348

08019f34 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8019f34:	b480      	push	{r7}
 8019f36:	b083      	sub	sp, #12
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
    return false;
 8019f3c:	2300      	movs	r3, #0
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	370c      	adds	r7, #12
 8019f42:	46bd      	mov	sp, r7
 8019f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f48:	4770      	bx	lr

08019f4a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 8019f4a:	b480      	push	{r7}
 8019f4c:	b083      	sub	sp, #12
 8019f4e:	af00      	add	r7, sp, #0
 8019f50:	6078      	str	r0, [r7, #4]
 8019f52:	460b      	mov	r3, r1
 8019f54:	70fb      	strb	r3, [r7, #3]
    return false;
 8019f56:	2300      	movs	r3, #0
}
 8019f58:	4618      	mov	r0, r3
 8019f5a:	370c      	adds	r7, #12
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr

08019f64 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8019f64:	b480      	push	{r7}
 8019f66:	b083      	sub	sp, #12
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
    return 0;
 8019f6c:	2300      	movs	r3, #0
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	370c      	adds	r7, #12
 8019f72:	46bd      	mov	sp, r7
 8019f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f78:	4770      	bx	lr

08019f7a <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 8019f7a:	b480      	push	{r7}
 8019f7c:	b083      	sub	sp, #12
 8019f7e:	af00      	add	r7, sp, #0
 8019f80:	6078      	str	r0, [r7, #4]
    return 0.0;
 8019f82:	f04f 0200 	mov.w	r2, #0
 8019f86:	f04f 0300 	mov.w	r3, #0
 8019f8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8019f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8019f92:	eef0 0a67 	vmov.f32	s1, s15
 8019f96:	370c      	adds	r7, #12
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr

08019fa0 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b084      	sub	sp, #16
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	60f8      	str	r0, [r7, #12]
 8019fa8:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 8019fac:	68fb      	ldr	r3, [r7, #12]
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	3398      	adds	r3, #152	; 0x98
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	68f8      	ldr	r0, [r7, #12]
 8019fb6:	4798      	blx	r3
 8019fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8019fbc:	eef0 7a60 	vmov.f32	s15, s1
}
 8019fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8019fc4:	eef0 0a67 	vmov.f32	s1, s15
 8019fc8:	3710      	adds	r7, #16
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}

08019fce <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8019fce:	b480      	push	{r7}
 8019fd0:	b083      	sub	sp, #12
 8019fd2:	af00      	add	r7, sp, #0
 8019fd4:	6078      	str	r0, [r7, #4]
    return 0;
 8019fd6:	2300      	movs	r3, #0
}
 8019fd8:	4618      	mov	r0, r3
 8019fda:	370c      	adds	r7, #12
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe2:	4770      	bx	lr

08019fe4 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8019fe4:	b480      	push	{r7}
 8019fe6:	b083      	sub	sp, #12
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8019fec:	2300      	movs	r3, #0
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	370c      	adds	r7, #12
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff8:	4770      	bx	lr

08019ffa <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 8019ffa:	b480      	push	{r7}
 8019ffc:	b083      	sub	sp, #12
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a002:	2300      	movs	r3, #0
}
 801a004:	4618      	mov	r0, r3
 801a006:	370c      	adds	r7, #12
 801a008:	46bd      	mov	sp, r7
 801a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a00e:	4770      	bx	lr

0801a010 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801a010:	b480      	push	{r7}
 801a012:	b083      	sub	sp, #12
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a018:	2300      	movs	r3, #0
}
 801a01a:	4618      	mov	r0, r3
 801a01c:	370c      	adds	r7, #12
 801a01e:	46bd      	mov	sp, r7
 801a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a024:	4770      	bx	lr

0801a026 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801a026:	b580      	push	{r7, lr}
 801a028:	b082      	sub	sp, #8
 801a02a:	af00      	add	r7, sp, #0
 801a02c:	6078      	str	r0, [r7, #4]
 801a02e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	33a8      	adds	r3, #168	; 0xa8
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	4798      	blx	r3
 801a03c:	4603      	mov	r3, r0
}
 801a03e:	4618      	mov	r0, r3
 801a040:	3708      	adds	r7, #8
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}

0801a046 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801a046:	b580      	push	{r7, lr}
 801a048:	b082      	sub	sp, #8
 801a04a:	af00      	add	r7, sp, #0
 801a04c:	6078      	str	r0, [r7, #4]
 801a04e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	33a0      	adds	r3, #160	; 0xa0
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	4798      	blx	r3
 801a05c:	4603      	mov	r3, r0
}
 801a05e:	4618      	mov	r0, r3
 801a060:	3708      	adds	r7, #8
 801a062:	46bd      	mov	sp, r7
 801a064:	bd80      	pop	{r7, pc}

0801a066 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801a066:	b580      	push	{r7, lr}
 801a068:	b082      	sub	sp, #8
 801a06a:	af00      	add	r7, sp, #0
 801a06c:	6078      	str	r0, [r7, #4]
 801a06e:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	33b0      	adds	r3, #176	; 0xb0
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	4798      	blx	r3
 801a07c:	4603      	mov	r3, r0
}
 801a07e:	4618      	mov	r0, r3
 801a080:	3708      	adds	r7, #8
 801a082:	46bd      	mov	sp, r7
 801a084:	bd80      	pop	{r7, pc}
	...

0801a088 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801a088:	b480      	push	{r7}
 801a08a:	b083      	sub	sp, #12
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
    return "";
 801a090:	4b03      	ldr	r3, [pc, #12]	; (801a0a0 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801a092:	4618      	mov	r0, r3
 801a094:	370c      	adds	r7, #12
 801a096:	46bd      	mov	sp, r7
 801a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09c:	4770      	bx	lr
 801a09e:	bf00      	nop
 801a0a0:	080262e8 	.word	0x080262e8

0801a0a4 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b082      	sub	sp, #8
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3394      	adds	r3, #148	; 0x94
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	6878      	ldr	r0, [r7, #4]
 801a0b8:	4798      	blx	r3
 801a0ba:	4603      	mov	r3, r0
}
 801a0bc:	4618      	mov	r0, r3
 801a0be:	3708      	adds	r7, #8
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	bd80      	pop	{r7, pc}

0801a0c4 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801a0c4:	b480      	push	{r7}
 801a0c6:	b083      	sub	sp, #12
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	6039      	str	r1, [r7, #0]
    return 0;
 801a0ce:	2300      	movs	r3, #0
}
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	370c      	adds	r7, #12
 801a0d4:	46bd      	mov	sp, r7
 801a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0da:	4770      	bx	lr

0801a0dc <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b082      	sub	sp, #8
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
 801a0e4:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	3388      	adds	r3, #136	; 0x88
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	4798      	blx	r3
 801a0f2:	4603      	mov	r3, r0
}
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	3708      	adds	r7, #8
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801a0fc:	b590      	push	{r4, r7, lr}
 801a0fe:	b085      	sub	sp, #20
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	3304      	adds	r3, #4
 801a10a:	490e      	ldr	r1, [pc, #56]	; (801a144 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7f3 fb7d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	1d1c      	adds	r4, r3, #4
 801a116:	f107 0308 	add.w	r3, r7, #8
 801a11a:	6839      	ldr	r1, [r7, #0]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7f3 fdd1 	bl	800dcc4 <_Z10StringFromPKv>
 801a122:	f107 0308 	add.w	r3, r7, #8
 801a126:	4619      	mov	r1, r3
 801a128:	4620      	mov	r0, r4
 801a12a:	f7f3 fb5d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801a12e:	f107 0308 	add.w	r3, r7, #8
 801a132:	4618      	mov	r0, r3
 801a134:	f7f3 fadb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return *this;
 801a138:	687b      	ldr	r3, [r7, #4]
}
 801a13a:	4618      	mov	r0, r3
 801a13c:	3714      	adds	r7, #20
 801a13e:	46bd      	mov	sp, r7
 801a140:	bd90      	pop	{r4, r7, pc}
 801a142:	bf00      	nop
 801a144:	0802641c 	.word	0x0802641c

0801a148 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801a148:	b598      	push	{r3, r4, r7, lr}
 801a14a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801a14c:	4b09      	ldr	r3, [pc, #36]	; (801a174 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d10b      	bne.n	801a16c <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801a154:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801a158:	4907      	ldr	r1, [pc, #28]	; (801a178 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801a15a:	200c      	movs	r0, #12
 801a15c:	f7f0 fb4c 	bl	800a7f8 <_ZnwjPKci>
 801a160:	4604      	mov	r4, r0
 801a162:	4620      	mov	r0, r4
 801a164:	f7ff fa4c 	bl	8019600 <_ZN19MockActualCallTraceC1Ev>
 801a168:	4b02      	ldr	r3, [pc, #8]	; (801a174 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a16a:	601c      	str	r4, [r3, #0]
    return *instance_;
 801a16c:	4b01      	ldr	r3, [pc, #4]	; (801a174 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a16e:	681b      	ldr	r3, [r3, #0]
}
 801a170:	4618      	mov	r0, r3
 801a172:	bd98      	pop	{r3, r4, r7, pc}
 801a174:	20000f10 	.word	0x20000f10
 801a178:	08026300 	.word	0x08026300

0801a17c <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	af00      	add	r7, sp, #0
    delete instance_;
 801a180:	4b06      	ldr	r3, [pc, #24]	; (801a19c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d004      	beq.n	801a192 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801a188:	681a      	ldr	r2, [r3, #0]
 801a18a:	3204      	adds	r2, #4
 801a18c:	6812      	ldr	r2, [r2, #0]
 801a18e:	4618      	mov	r0, r3
 801a190:	4790      	blx	r2
    instance_ = NULLPTR;
 801a192:	4b02      	ldr	r3, [pc, #8]	; (801a19c <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a194:	2200      	movs	r2, #0
 801a196:	601a      	str	r2, [r3, #0]
}
 801a198:	bf00      	nop
 801a19a:	bd80      	pop	{r7, pc}
 801a19c:	20000f10 	.word	0x20000f10

0801a1a0 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b082      	sub	sp, #8
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f7fd fe9a 	bl	8017ee4 <_ZN14MockActualCallC1Ev>
 801a1b0:	4a03      	ldr	r2, [pc, #12]	; (801a1c0 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	601a      	str	r2, [r3, #0]
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3708      	adds	r7, #8
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}
 801a1c0:	08029068 	.word	0x08029068

0801a1c4 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	af00      	add	r7, sp, #0
 801a1c8:	4801      	ldr	r0, [pc, #4]	; (801a1d0 <__tcf_0+0xc>)
 801a1ca:	f000 f831 	bl	801a230 <_ZN21MockIgnoredActualCallD1Ev>
 801a1ce:	bd80      	pop	{r7, pc}
 801a1d0:	20000f14 	.word	0x20000f14

0801a1d4 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801a1d8:	4b12      	ldr	r3, [pc, #72]	; (801a224 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a1da:	781b      	ldrb	r3, [r3, #0]
 801a1dc:	f3bf 8f5b 	dmb	ish
 801a1e0:	b2db      	uxtb	r3, r3
 801a1e2:	f003 0301 	and.w	r3, r3, #1
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	bf0c      	ite	eq
 801a1ea:	2301      	moveq	r3, #1
 801a1ec:	2300      	movne	r3, #0
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d013      	beq.n	801a21c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a1f4:	480b      	ldr	r0, [pc, #44]	; (801a224 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a1f6:	f005 fd83 	bl	801fd00 <__cxa_guard_acquire>
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	bf14      	ite	ne
 801a200:	2301      	movne	r3, #1
 801a202:	2300      	moveq	r3, #0
 801a204:	b2db      	uxtb	r3, r3
 801a206:	2b00      	cmp	r3, #0
 801a208:	d008      	beq.n	801a21c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a20a:	4807      	ldr	r0, [pc, #28]	; (801a228 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801a20c:	f7ff ffc8 	bl	801a1a0 <_ZN21MockIgnoredActualCallC1Ev>
 801a210:	4804      	ldr	r0, [pc, #16]	; (801a224 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a212:	f005 fd81 	bl	801fd18 <__cxa_guard_release>
 801a216:	4805      	ldr	r0, [pc, #20]	; (801a22c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801a218:	f005 fda5 	bl	801fd66 <atexit>
    return call;
 801a21c:	4b02      	ldr	r3, [pc, #8]	; (801a228 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801a21e:	4618      	mov	r0, r3
 801a220:	bd80      	pop	{r7, pc}
 801a222:	bf00      	nop
 801a224:	20000f18 	.word	0x20000f18
 801a228:	20000f14 	.word	0x20000f14
 801a22c:	0801a1c5 	.word	0x0801a1c5

0801a230 <_ZN21MockIgnoredActualCallD1Ev>:
 801a230:	b580      	push	{r7, lr}
 801a232:	b082      	sub	sp, #8
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	4a05      	ldr	r2, [pc, #20]	; (801a250 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	601a      	str	r2, [r3, #0]
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	4618      	mov	r0, r3
 801a242:	f7fd fe5f 	bl	8017f04 <_ZN14MockActualCallD1Ev>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	4618      	mov	r0, r3
 801a24a:	3708      	adds	r7, #8
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	08029068 	.word	0x08029068

0801a254 <_ZN21MockIgnoredActualCallD0Ev>:
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6878      	ldr	r0, [r7, #4]
 801a25e:	f7ff ffe7 	bl	801a230 <_ZN21MockIgnoredActualCallD1Ev>
 801a262:	2104      	movs	r1, #4
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f7f0 fadb 	bl	800a820 <_ZdlPvj>
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	4618      	mov	r0, r3
 801a26e:	3708      	adds	r7, #8
 801a270:	46bd      	mov	sp, r7
 801a272:	bd80      	pop	{r7, pc}

0801a274 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801a274:	b580      	push	{r7, lr}
 801a276:	b082      	sub	sp, #8
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
 801a27c:	4a05      	ldr	r2, [pc, #20]	; (801a294 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	601a      	str	r2, [r3, #0]
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	f7f0 fefd 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	4618      	mov	r0, r3
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}
 801a294:	08028f60 	.word	0x08028f60

0801a298 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801a298:	b580      	push	{r7, lr}
 801a29a:	b082      	sub	sp, #8
 801a29c:	af00      	add	r7, sp, #0
 801a29e:	6078      	str	r0, [r7, #4]
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	f7ff ffe7 	bl	801a274 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801a2a6:	2134      	movs	r1, #52	; 0x34
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f7f0 fab9 	bl	800a820 <_ZdlPvj>
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3708      	adds	r7, #8
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b082      	sub	sp, #8
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	6078      	str	r0, [r7, #4]
 801a2c0:	4a05      	ldr	r2, [pc, #20]	; (801a2d8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	601a      	str	r2, [r3, #0]
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f7f0 fedb 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3708      	adds	r7, #8
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}
 801a2d8:	0802903c 	.word	0x0802903c

0801a2dc <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b082      	sub	sp, #8
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f7ff ffe7 	bl	801a2b8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a2ea:	2134      	movs	r1, #52	; 0x34
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f7f0 fa97 	bl	800a820 <_ZdlPvj>
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	4a05      	ldr	r2, [pc, #20]	; (801a31c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	601a      	str	r2, [r3, #0]
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	4618      	mov	r0, r3
 801a30e:	f7f0 feb9 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	4618      	mov	r0, r3
 801a316:	3708      	adds	r7, #8
 801a318:	46bd      	mov	sp, r7
 801a31a:	bd80      	pop	{r7, pc}
 801a31c:	08029010 	.word	0x08029010

0801a320 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801a320:	b580      	push	{r7, lr}
 801a322:	b082      	sub	sp, #8
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
 801a328:	6878      	ldr	r0, [r7, #4]
 801a32a:	f7ff ffe7 	bl	801a2fc <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a32e:	2134      	movs	r1, #52	; 0x34
 801a330:	6878      	ldr	r0, [r7, #4]
 801a332:	f7f0 fa75 	bl	800a820 <_ZdlPvj>
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	4618      	mov	r0, r3
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801a340:	b580      	push	{r7, lr}
 801a342:	b082      	sub	sp, #8
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]
 801a348:	4a05      	ldr	r2, [pc, #20]	; (801a360 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	601a      	str	r2, [r3, #0]
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	4618      	mov	r0, r3
 801a352:	f7f0 fe97 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	4618      	mov	r0, r3
 801a35a:	3708      	adds	r7, #8
 801a35c:	46bd      	mov	sp, r7
 801a35e:	bd80      	pop	{r7, pc}
 801a360:	08028fe4 	.word	0x08028fe4

0801a364 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
 801a36c:	6878      	ldr	r0, [r7, #4]
 801a36e:	f7ff ffe7 	bl	801a340 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a372:	2134      	movs	r1, #52	; 0x34
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	f7f0 fa53 	bl	800a820 <_ZdlPvj>
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	4618      	mov	r0, r3
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}

0801a384 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801a384:	b580      	push	{r7, lr}
 801a386:	b082      	sub	sp, #8
 801a388:	af00      	add	r7, sp, #0
 801a38a:	6078      	str	r0, [r7, #4]
 801a38c:	4a05      	ldr	r2, [pc, #20]	; (801a3a4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	601a      	str	r2, [r3, #0]
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	4618      	mov	r0, r3
 801a396:	f7f0 fe75 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	4618      	mov	r0, r3
 801a39e:	3708      	adds	r7, #8
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}
 801a3a4:	08028f8c 	.word	0x08028f8c

0801a3a8 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b082      	sub	sp, #8
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f7ff ffe7 	bl	801a384 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a3b6:	2134      	movs	r1, #52	; 0x34
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f7f0 fa31 	bl	800a820 <_ZdlPvj>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	3708      	adds	r7, #8
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	bd80      	pop	{r7, pc}

0801a3c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b082      	sub	sp, #8
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
 801a3d0:	4a05      	ldr	r2, [pc, #20]	; (801a3e8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	601a      	str	r2, [r3, #0]
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f7f0 fe53 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	3708      	adds	r7, #8
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	bd80      	pop	{r7, pc}
 801a3e8:	08028fb8 	.word	0x08028fb8

0801a3ec <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b082      	sub	sp, #8
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6878      	ldr	r0, [r7, #4]
 801a3f6:	f7ff ffe7 	bl	801a3c8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801a3fa:	2134      	movs	r1, #52	; 0x34
 801a3fc:	6878      	ldr	r0, [r7, #4]
 801a3fe:	f7f0 fa0f 	bl	800a820 <_ZdlPvj>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	4618      	mov	r0, r3
 801a406:	3708      	adds	r7, #8
 801a408:	46bd      	mov	sp, r7
 801a40a:	bd80      	pop	{r7, pc}

0801a40c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b082      	sub	sp, #8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
 801a414:	4a05      	ldr	r2, [pc, #20]	; (801a42c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	601a      	str	r2, [r3, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	4618      	mov	r0, r3
 801a41e:	f7f0 fe31 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	4618      	mov	r0, r3
 801a426:	3708      	adds	r7, #8
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd80      	pop	{r7, pc}
 801a42c:	08028f08 	.word	0x08028f08

0801a430 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
 801a438:	6878      	ldr	r0, [r7, #4]
 801a43a:	f7ff ffe7 	bl	801a40c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801a43e:	2134      	movs	r1, #52	; 0x34
 801a440:	6878      	ldr	r0, [r7, #4]
 801a442:	f7f0 f9ed 	bl	800a820 <_ZdlPvj>
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	4618      	mov	r0, r3
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	4a05      	ldr	r2, [pc, #20]	; (801a470 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	601a      	str	r2, [r3, #0]
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	4618      	mov	r0, r3
 801a462:	f7f0 fe0f 	bl	800b084 <_ZN11MockFailureD1Ev>
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	4618      	mov	r0, r3
 801a46a:	3708      	adds	r7, #8
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bd80      	pop	{r7, pc}
 801a470:	08028f34 	.word	0x08028f34

0801a474 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801a474:	b580      	push	{r7, lr}
 801a476:	b082      	sub	sp, #8
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	f7ff ffe7 	bl	801a450 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a482:	2134      	movs	r1, #52	; 0x34
 801a484:	6878      	ldr	r0, [r7, #4]
 801a486:	f7f0 f9cb 	bl	800a820 <_ZdlPvj>
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	4618      	mov	r0, r3
 801a48e:	3708      	adds	r7, #8
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}

0801a494 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801a494:	b580      	push	{r7, lr}
 801a496:	b082      	sub	sp, #8
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	6039      	str	r1, [r7, #0]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	3310      	adds	r3, #16
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	683a      	ldr	r2, [r7, #0]
 801a4a8:	6839      	ldr	r1, [r7, #0]
 801a4aa:	6878      	ldr	r0, [r7, #4]
 801a4ac:	4798      	blx	r3
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	3708      	adds	r7, #8
 801a4b4:	46bd      	mov	sp, r7
 801a4b6:	bd80      	pop	{r7, pc}

0801a4b8 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801a4b8:	b480      	push	{r7}
 801a4ba:	b083      	sub	sp, #12
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	370c      	adds	r7, #12
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ce:	4770      	bx	lr

0801a4d0 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801a4d0:	b480      	push	{r7}
 801a4d2:	b083      	sub	sp, #12
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
 801a4d8:	6039      	str	r1, [r7, #0]
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	4618      	mov	r0, r3
 801a4de:	370c      	adds	r7, #12
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e6:	4770      	bx	lr

0801a4e8 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801a4e8:	b480      	push	{r7}
 801a4ea:	b085      	sub	sp, #20
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	60f8      	str	r0, [r7, #12]
 801a4f0:	60b9      	str	r1, [r7, #8]
 801a4f2:	607a      	str	r2, [r7, #4]
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	3714      	adds	r7, #20
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a500:	4770      	bx	lr

0801a502 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801a502:	b480      	push	{r7}
 801a504:	b085      	sub	sp, #20
 801a506:	af00      	add	r7, sp, #0
 801a508:	60f8      	str	r0, [r7, #12]
 801a50a:	60b9      	str	r1, [r7, #8]
 801a50c:	4613      	mov	r3, r2
 801a50e:	71fb      	strb	r3, [r7, #7]
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	4618      	mov	r0, r3
 801a514:	3714      	adds	r7, #20
 801a516:	46bd      	mov	sp, r7
 801a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a51c:	4770      	bx	lr

0801a51e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801a51e:	b480      	push	{r7}
 801a520:	b085      	sub	sp, #20
 801a522:	af00      	add	r7, sp, #0
 801a524:	60f8      	str	r0, [r7, #12]
 801a526:	60b9      	str	r1, [r7, #8]
 801a528:	607a      	str	r2, [r7, #4]
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	4618      	mov	r0, r3
 801a52e:	3714      	adds	r7, #20
 801a530:	46bd      	mov	sp, r7
 801a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a536:	4770      	bx	lr

0801a538 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801a538:	b480      	push	{r7}
 801a53a:	b085      	sub	sp, #20
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	60f8      	str	r0, [r7, #12]
 801a540:	60b9      	str	r1, [r7, #8]
 801a542:	607a      	str	r2, [r7, #4]
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	4618      	mov	r0, r3
 801a548:	3714      	adds	r7, #20
 801a54a:	46bd      	mov	sp, r7
 801a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a550:	4770      	bx	lr

0801a552 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801a552:	b480      	push	{r7}
 801a554:	b085      	sub	sp, #20
 801a556:	af00      	add	r7, sp, #0
 801a558:	60f8      	str	r0, [r7, #12]
 801a55a:	60b9      	str	r1, [r7, #8]
 801a55c:	607a      	str	r2, [r7, #4]
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	4618      	mov	r0, r3
 801a562:	3714      	adds	r7, #20
 801a564:	46bd      	mov	sp, r7
 801a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56a:	4770      	bx	lr

0801a56c <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801a56c:	b480      	push	{r7}
 801a56e:	b085      	sub	sp, #20
 801a570:	af00      	add	r7, sp, #0
 801a572:	60f8      	str	r0, [r7, #12]
 801a574:	60b9      	str	r1, [r7, #8]
 801a576:	607a      	str	r2, [r7, #4]
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	4618      	mov	r0, r3
 801a57c:	3714      	adds	r7, #20
 801a57e:	46bd      	mov	sp, r7
 801a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a584:	4770      	bx	lr

0801a586 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801a586:	b480      	push	{r7}
 801a588:	b085      	sub	sp, #20
 801a58a:	af00      	add	r7, sp, #0
 801a58c:	60f8      	str	r0, [r7, #12]
 801a58e:	60b9      	str	r1, [r7, #8]
 801a590:	4639      	mov	r1, r7
 801a592:	e881 000c 	stmia.w	r1, {r2, r3}
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	4618      	mov	r0, r3
 801a59a:	3714      	adds	r7, #20
 801a59c:	46bd      	mov	sp, r7
 801a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a2:	4770      	bx	lr

0801a5a4 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801a5a4:	b480      	push	{r7}
 801a5a6:	b085      	sub	sp, #20
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	60b9      	str	r1, [r7, #8]
 801a5ae:	4639      	mov	r1, r7
 801a5b0:	e881 000c 	stmia.w	r1, {r2, r3}
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3714      	adds	r7, #20
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c0:	4770      	bx	lr

0801a5c2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801a5c2:	b480      	push	{r7}
 801a5c4:	b085      	sub	sp, #20
 801a5c6:	af00      	add	r7, sp, #0
 801a5c8:	60f8      	str	r0, [r7, #12]
 801a5ca:	60b9      	str	r1, [r7, #8]
 801a5cc:	ed87 0b00 	vstr	d0, [r7]
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	3714      	adds	r7, #20
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5dc:	4770      	bx	lr

0801a5de <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801a5de:	b480      	push	{r7}
 801a5e0:	b087      	sub	sp, #28
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	6178      	str	r0, [r7, #20]
 801a5e6:	6139      	str	r1, [r7, #16]
 801a5e8:	ed87 0b02 	vstr	d0, [r7, #8]
 801a5ec:	ed87 1b00 	vstr	d1, [r7]
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	371c      	adds	r7, #28
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fc:	4770      	bx	lr

0801a5fe <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801a5fe:	b480      	push	{r7}
 801a600:	b085      	sub	sp, #20
 801a602:	af00      	add	r7, sp, #0
 801a604:	60f8      	str	r0, [r7, #12]
 801a606:	60b9      	str	r1, [r7, #8]
 801a608:	607a      	str	r2, [r7, #4]
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	4618      	mov	r0, r3
 801a60e:	3714      	adds	r7, #20
 801a610:	46bd      	mov	sp, r7
 801a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a616:	4770      	bx	lr

0801a618 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801a618:	b480      	push	{r7}
 801a61a:	b085      	sub	sp, #20
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	60f8      	str	r0, [r7, #12]
 801a620:	60b9      	str	r1, [r7, #8]
 801a622:	607a      	str	r2, [r7, #4]
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	4618      	mov	r0, r3
 801a628:	3714      	adds	r7, #20
 801a62a:	46bd      	mov	sp, r7
 801a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a630:	4770      	bx	lr

0801a632 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801a632:	b480      	push	{r7}
 801a634:	b085      	sub	sp, #20
 801a636:	af00      	add	r7, sp, #0
 801a638:	60f8      	str	r0, [r7, #12]
 801a63a:	60b9      	str	r1, [r7, #8]
 801a63c:	607a      	str	r2, [r7, #4]
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	4618      	mov	r0, r3
 801a642:	3714      	adds	r7, #20
 801a644:	46bd      	mov	sp, r7
 801a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64a:	4770      	bx	lr

0801a64c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801a64c:	b480      	push	{r7}
 801a64e:	b085      	sub	sp, #20
 801a650:	af00      	add	r7, sp, #0
 801a652:	60f8      	str	r0, [r7, #12]
 801a654:	60b9      	str	r1, [r7, #8]
 801a656:	607a      	str	r2, [r7, #4]
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	4618      	mov	r0, r3
 801a65c:	3714      	adds	r7, #20
 801a65e:	46bd      	mov	sp, r7
 801a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a664:	4770      	bx	lr

0801a666 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801a666:	b480      	push	{r7}
 801a668:	b085      	sub	sp, #20
 801a66a:	af00      	add	r7, sp, #0
 801a66c:	60f8      	str	r0, [r7, #12]
 801a66e:	60b9      	str	r1, [r7, #8]
 801a670:	607a      	str	r2, [r7, #4]
 801a672:	603b      	str	r3, [r7, #0]
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	4618      	mov	r0, r3
 801a678:	3714      	adds	r7, #20
 801a67a:	46bd      	mov	sp, r7
 801a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a680:	4770      	bx	lr

0801a682 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a682:	b480      	push	{r7}
 801a684:	b085      	sub	sp, #20
 801a686:	af00      	add	r7, sp, #0
 801a688:	60f8      	str	r0, [r7, #12]
 801a68a:	60b9      	str	r1, [r7, #8]
 801a68c:	607a      	str	r2, [r7, #4]
 801a68e:	603b      	str	r3, [r7, #0]
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	4618      	mov	r0, r3
 801a694:	3714      	adds	r7, #20
 801a696:	46bd      	mov	sp, r7
 801a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69c:	4770      	bx	lr

0801a69e <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801a69e:	b480      	push	{r7}
 801a6a0:	b085      	sub	sp, #20
 801a6a2:	af00      	add	r7, sp, #0
 801a6a4:	60f8      	str	r0, [r7, #12]
 801a6a6:	60b9      	str	r1, [r7, #8]
 801a6a8:	607a      	str	r2, [r7, #4]
 801a6aa:	603b      	str	r3, [r7, #0]
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	3714      	adds	r7, #20
 801a6b2:	46bd      	mov	sp, r7
 801a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b8:	4770      	bx	lr

0801a6ba <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801a6ba:	b480      	push	{r7}
 801a6bc:	b085      	sub	sp, #20
 801a6be:	af00      	add	r7, sp, #0
 801a6c0:	60f8      	str	r0, [r7, #12]
 801a6c2:	60b9      	str	r1, [r7, #8]
 801a6c4:	607a      	str	r2, [r7, #4]
 801a6c6:	603b      	str	r3, [r7, #0]
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	3714      	adds	r7, #20
 801a6ce:	46bd      	mov	sp, r7
 801a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d4:	4770      	bx	lr

0801a6d6 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801a6d6:	b480      	push	{r7}
 801a6d8:	b083      	sub	sp, #12
 801a6da:	af00      	add	r7, sp, #0
 801a6dc:	6078      	str	r0, [r7, #4]
 801a6de:	6039      	str	r1, [r7, #0]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	370c      	adds	r7, #12
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ec:	4770      	bx	lr

0801a6ee <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801a6ee:	b480      	push	{r7}
 801a6f0:	b083      	sub	sp, #12
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	370c      	adds	r7, #12
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a702:	4770      	bx	lr

0801a704 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801a704:	b480      	push	{r7}
 801a706:	b083      	sub	sp, #12
 801a708:	af00      	add	r7, sp, #0
 801a70a:	6078      	str	r0, [r7, #4]
 801a70c:	460b      	mov	r3, r1
 801a70e:	70fb      	strb	r3, [r7, #3]
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	4618      	mov	r0, r3
 801a714:	370c      	adds	r7, #12
 801a716:	46bd      	mov	sp, r7
 801a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71c:	4770      	bx	lr

0801a71e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801a71e:	b480      	push	{r7}
 801a720:	b083      	sub	sp, #12
 801a722:	af00      	add	r7, sp, #0
 801a724:	6078      	str	r0, [r7, #4]
 801a726:	6039      	str	r1, [r7, #0]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	4618      	mov	r0, r3
 801a72c:	370c      	adds	r7, #12
 801a72e:	46bd      	mov	sp, r7
 801a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a734:	4770      	bx	lr

0801a736 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801a736:	b480      	push	{r7}
 801a738:	b083      	sub	sp, #12
 801a73a:	af00      	add	r7, sp, #0
 801a73c:	6078      	str	r0, [r7, #4]
 801a73e:	6039      	str	r1, [r7, #0]
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	4618      	mov	r0, r3
 801a744:	370c      	adds	r7, #12
 801a746:	46bd      	mov	sp, r7
 801a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a74c:	4770      	bx	lr

0801a74e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801a74e:	b480      	push	{r7}
 801a750:	b083      	sub	sp, #12
 801a752:	af00      	add	r7, sp, #0
 801a754:	6078      	str	r0, [r7, #4]
 801a756:	6039      	str	r1, [r7, #0]
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	4618      	mov	r0, r3
 801a75c:	370c      	adds	r7, #12
 801a75e:	46bd      	mov	sp, r7
 801a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a764:	4770      	bx	lr

0801a766 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801a766:	b480      	push	{r7}
 801a768:	b083      	sub	sp, #12
 801a76a:	af00      	add	r7, sp, #0
 801a76c:	6078      	str	r0, [r7, #4]
 801a76e:	6039      	str	r1, [r7, #0]
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	4618      	mov	r0, r3
 801a774:	370c      	adds	r7, #12
 801a776:	46bd      	mov	sp, r7
 801a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a77c:	4770      	bx	lr

0801a77e <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801a77e:	b480      	push	{r7}
 801a780:	b085      	sub	sp, #20
 801a782:	af00      	add	r7, sp, #0
 801a784:	60f8      	str	r0, [r7, #12]
 801a786:	1d3b      	adds	r3, r7, #4
 801a788:	e883 0006 	stmia.w	r3, {r1, r2}
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	4618      	mov	r0, r3
 801a790:	3714      	adds	r7, #20
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801a79a:	b480      	push	{r7}
 801a79c:	b085      	sub	sp, #20
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	60f8      	str	r0, [r7, #12]
 801a7a2:	1d3b      	adds	r3, r7, #4
 801a7a4:	e883 0006 	stmia.w	r3, {r1, r2}
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	3714      	adds	r7, #20
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b4:	4770      	bx	lr

0801a7b6 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801a7b6:	b480      	push	{r7}
 801a7b8:	b085      	sub	sp, #20
 801a7ba:	af00      	add	r7, sp, #0
 801a7bc:	60f8      	str	r0, [r7, #12]
 801a7be:	ed87 0b00 	vstr	d0, [r7]
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	3714      	adds	r7, #20
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801a7d0:	b480      	push	{r7}
 801a7d2:	b083      	sub	sp, #12
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	4618      	mov	r0, r3
 801a7de:	370c      	adds	r7, #12
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e6:	4770      	bx	lr

0801a7e8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801a7e8:	b480      	push	{r7}
 801a7ea:	b083      	sub	sp, #12
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
 801a7f0:	6039      	str	r1, [r7, #0]
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	370c      	adds	r7, #12
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fe:	4770      	bx	lr

0801a800 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801a800:	b480      	push	{r7}
 801a802:	b083      	sub	sp, #12
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	6039      	str	r1, [r7, #0]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	4618      	mov	r0, r3
 801a80e:	370c      	adds	r7, #12
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr

0801a818 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801a818:	b480      	push	{r7}
 801a81a:	b083      	sub	sp, #12
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	4618      	mov	r0, r3
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr

0801a830 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801a830:	b480      	push	{r7}
 801a832:	b083      	sub	sp, #12
 801a834:	af00      	add	r7, sp, #0
 801a836:	6078      	str	r0, [r7, #4]
 801a838:	6039      	str	r1, [r7, #0]
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	4618      	mov	r0, r3
 801a83e:	370c      	adds	r7, #12
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr

0801a848 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801a848:	b480      	push	{r7}
 801a84a:	b083      	sub	sp, #12
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
 801a850:	4a04      	ldr	r2, [pc, #16]	; (801a864 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	601a      	str	r2, [r3, #0]
{
}
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	4618      	mov	r0, r3
 801a85a:	370c      	adds	r7, #12
 801a85c:	46bd      	mov	sp, r7
 801a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a862:	4770      	bx	lr
 801a864:	0802960c 	.word	0x0802960c

0801a868 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801a868:	b480      	push	{r7}
 801a86a:	b083      	sub	sp, #12
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	6078      	str	r0, [r7, #4]
 801a870:	4a04      	ldr	r2, [pc, #16]	; (801a884 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	601a      	str	r2, [r3, #0]
{
}
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	4618      	mov	r0, r3
 801a87a:	370c      	adds	r7, #12
 801a87c:	46bd      	mov	sp, r7
 801a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a882:	4770      	bx	lr
 801a884:	0802960c 	.word	0x0802960c

0801a888 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b082      	sub	sp, #8
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
 801a890:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	3358      	adds	r3, #88	; 0x58
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	687a      	ldr	r2, [r7, #4]
 801a89c:	6839      	ldr	r1, [r7, #0]
 801a89e:	4610      	mov	r0, r2
 801a8a0:	4798      	blx	r3
}
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	3708      	adds	r7, #8
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}

0801a8aa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801a8aa:	b580      	push	{r7, lr}
 801a8ac:	b082      	sub	sp, #8
 801a8ae:	af00      	add	r7, sp, #0
 801a8b0:	6078      	str	r0, [r7, #4]
 801a8b2:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	3304      	adds	r3, #4
 801a8b8:	6839      	ldr	r1, [r7, #0]
 801a8ba:	4618      	mov	r0, r3
 801a8bc:	f7f2 fbcb 	bl	800d056 <_ZN12SimpleStringaSERKS_>
}
 801a8c0:	bf00      	nop
 801a8c2:	3708      	adds	r7, #8
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}

0801a8c8 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b082      	sub	sp, #8
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	6078      	str	r0, [r7, #4]
 801a8d0:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	3304      	adds	r3, #4
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f7f2 fba4 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 801a8de:	6878      	ldr	r0, [r7, #4]
 801a8e0:	3708      	adds	r7, #8
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
	...

0801a8e8 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801a8e8:	b590      	push	{r4, r7, lr}
 801a8ea:	b085      	sub	sp, #20
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f7ff ffa7 	bl	801a848 <_ZN16MockExpectedCallC1Ev>
 801a8fa:	4a2c      	ldr	r2, [pc, #176]	; (801a9ac <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	601a      	str	r2, [r3, #0]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	3304      	adds	r3, #4
 801a904:	492a      	ldr	r1, [pc, #168]	; (801a9b0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a906:	4618      	mov	r0, r3
 801a908:	f7f2 fb39 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2200      	movs	r2, #0
 801a910:	731a      	strb	r2, [r3, #12]
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2200      	movs	r2, #0
 801a916:	735a      	strb	r2, [r3, #13]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	2200      	movs	r2, #0
 801a91c:	611a      	str	r2, [r3, #16]
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2200      	movs	r2, #0
 801a922:	615a      	str	r2, [r3, #20]
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2200      	movs	r2, #0
 801a928:	761a      	strb	r2, [r3, #24]
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801a930:	f107 0308 	add.w	r3, r7, #8
 801a934:	491e      	ldr	r1, [pc, #120]	; (801a9b0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801a936:	4618      	mov	r0, r3
 801a938:	f7f2 fb21 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801a93c:	f107 0308 	add.w	r3, r7, #8
 801a940:	4619      	mov	r1, r3
 801a942:	4620      	mov	r0, r4
 801a944:	f003 f840 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a948:	f107 0308 	add.w	r3, r7, #8
 801a94c:	4618      	mov	r0, r3
 801a94e:	f7f2 fece 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	2200      	movs	r2, #0
 801a956:	661a      	str	r2, [r3, #96]	; 0x60
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2200      	movs	r2, #0
 801a95c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	2201      	movs	r2, #1
 801a964:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2200      	movs	r2, #0
 801a96c:	669a      	str	r2, [r3, #104]	; 0x68
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	683a      	ldr	r2, [r7, #0]
 801a972:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801a974:	2246      	movs	r2, #70	; 0x46
 801a976:	490f      	ldr	r1, [pc, #60]	; (801a9b4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a978:	2004      	movs	r0, #4
 801a97a:	f7ef ff3d 	bl	800a7f8 <_ZnwjPKci>
 801a97e:	4604      	mov	r4, r0
 801a980:	4620      	mov	r0, r4
 801a982:	f004 ff36 	bl	801f7f2 <_ZN18MockNamedValueListC1Ev>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801a98a:	2247      	movs	r2, #71	; 0x47
 801a98c:	4909      	ldr	r1, [pc, #36]	; (801a9b4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801a98e:	2004      	movs	r0, #4
 801a990:	f7ef ff32 	bl	800a7f8 <_ZnwjPKci>
 801a994:	4604      	mov	r4, r0
 801a996:	4620      	mov	r0, r4
 801a998:	f004 ff2b 	bl	801f7f2 <_ZN18MockNamedValueListC1Ev>
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	621c      	str	r4, [r3, #32]
}
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3714      	adds	r7, #20
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd90      	pop	{r4, r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	08029450 	.word	0x08029450
 801a9b0:	08026428 	.word	0x08026428
 801a9b4:	0802642c 	.word	0x0802642c

0801a9b8 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
 801a9c0:	4a17      	ldr	r2, [pc, #92]	; (801aa20 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	69db      	ldr	r3, [r3, #28]
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f004 ff1f 	bl	801f80e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	69db      	ldr	r3, [r3, #28]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d003      	beq.n	801a9e0 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801a9d8:	2104      	movs	r1, #4
 801a9da:	4618      	mov	r0, r3
 801a9dc:	f7ef ff20 	bl	800a820 <_ZdlPvj>
    outputParameters_->clear();
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	6a1b      	ldr	r3, [r3, #32]
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f004 ff12 	bl	801f80e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	6a1b      	ldr	r3, [r3, #32]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d003      	beq.n	801a9fa <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801a9f2:	2104      	movs	r1, #4
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f7ef ff13 	bl	800a820 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	3328      	adds	r3, #40	; 0x28
 801a9fe:	4618      	mov	r0, r3
 801aa00:	f003 f80c 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	3304      	adds	r3, #4
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f7f2 fe70 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	4618      	mov	r0, r3
 801aa12:	f7ff ff29 	bl	801a868 <_ZN16MockExpectedCallD1Ev>
}
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3708      	adds	r7, #8
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	08029450 	.word	0x08029450

0801aa24 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
}
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f7ff ffc3 	bl	801a9b8 <_ZN23MockCheckedExpectedCallD1Ev>
 801aa32:	2170      	movs	r1, #112	; 0x70
 801aa34:	6878      	ldr	r0, [r7, #4]
 801aa36:	f7ef fef3 	bl	800a820 <_ZdlPvj>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	3708      	adds	r7, #8
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd80      	pop	{r7, pc}

0801aa44 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
    setName(name);
 801aa4e:	6839      	ldr	r1, [r7, #0]
 801aa50:	6878      	ldr	r0, [r7, #4]
 801aa52:	f7ff ff2a 	bl	801a8aa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801aa56:	687b      	ldr	r3, [r7, #4]
}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3708      	adds	r7, #8
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801aa60:	b590      	push	{r4, r7, lr}
 801aa62:	b087      	sub	sp, #28
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	60f8      	str	r0, [r7, #12]
 801aa68:	60b9      	str	r1, [r7, #8]
 801aa6a:	4613      	mov	r3, r2
 801aa6c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aa6e:	225a      	movs	r2, #90	; 0x5a
 801aa70:	490e      	ldr	r1, [pc, #56]	; (801aaac <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801aa72:	2038      	movs	r0, #56	; 0x38
 801aa74:	f7ef fec0 	bl	800a7f8 <_ZnwjPKci>
 801aa78:	4604      	mov	r4, r0
 801aa7a:	68b9      	ldr	r1, [r7, #8]
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	f001 f851 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aa82:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	69db      	ldr	r3, [r3, #28]
 801aa88:	6979      	ldr	r1, [r7, #20]
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f004 fee2 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	681b      	ldr	r3, [r3, #0]
 801aa94:	3308      	adds	r3, #8
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	79fa      	ldrb	r2, [r7, #7]
 801aa9a:	4611      	mov	r1, r2
 801aa9c:	6978      	ldr	r0, [r7, #20]
 801aa9e:	4798      	blx	r3
    return *this;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
}
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	371c      	adds	r7, #28
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd90      	pop	{r4, r7, pc}
 801aaaa:	bf00      	nop
 801aaac:	0802642c 	.word	0x0802642c

0801aab0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801aab0:	b590      	push	{r4, r7, lr}
 801aab2:	b087      	sub	sp, #28
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	60f8      	str	r0, [r7, #12]
 801aab8:	60b9      	str	r1, [r7, #8]
 801aaba:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aabc:	2262      	movs	r2, #98	; 0x62
 801aabe:	490e      	ldr	r1, [pc, #56]	; (801aaf8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801aac0:	2038      	movs	r0, #56	; 0x38
 801aac2:	f7ef fe99 	bl	800a7f8 <_ZnwjPKci>
 801aac6:	4604      	mov	r4, r0
 801aac8:	68b9      	ldr	r1, [r7, #8]
 801aaca:	4620      	mov	r0, r4
 801aacc:	f001 f82a 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aad0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	69db      	ldr	r3, [r3, #28]
 801aad6:	6979      	ldr	r1, [r7, #20]
 801aad8:	4618      	mov	r0, r3
 801aada:	f004 febb 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801aade:	697b      	ldr	r3, [r7, #20]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	3310      	adds	r3, #16
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	6879      	ldr	r1, [r7, #4]
 801aae8:	6978      	ldr	r0, [r7, #20]
 801aaea:	4798      	blx	r3
    return *this;
 801aaec:	68fb      	ldr	r3, [r7, #12]
}
 801aaee:	4618      	mov	r0, r3
 801aaf0:	371c      	adds	r7, #28
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	bd90      	pop	{r4, r7, pc}
 801aaf6:	bf00      	nop
 801aaf8:	0802642c 	.word	0x0802642c

0801aafc <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801aafc:	b590      	push	{r4, r7, lr}
 801aafe:	b087      	sub	sp, #28
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	60f8      	str	r0, [r7, #12]
 801ab04:	60b9      	str	r1, [r7, #8]
 801ab06:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab08:	226a      	movs	r2, #106	; 0x6a
 801ab0a:	490e      	ldr	r1, [pc, #56]	; (801ab44 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801ab0c:	2038      	movs	r0, #56	; 0x38
 801ab0e:	f7ef fe73 	bl	800a7f8 <_ZnwjPKci>
 801ab12:	4604      	mov	r4, r0
 801ab14:	68b9      	ldr	r1, [r7, #8]
 801ab16:	4620      	mov	r0, r4
 801ab18:	f001 f804 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab1c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	69db      	ldr	r3, [r3, #28]
 801ab22:	6979      	ldr	r1, [r7, #20]
 801ab24:	4618      	mov	r0, r3
 801ab26:	f004 fe95 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab2a:	697b      	ldr	r3, [r7, #20]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	330c      	adds	r3, #12
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	6879      	ldr	r1, [r7, #4]
 801ab34:	6978      	ldr	r0, [r7, #20]
 801ab36:	4798      	blx	r3
    return *this;
 801ab38:	68fb      	ldr	r3, [r7, #12]
}
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	371c      	adds	r7, #28
 801ab3e:	46bd      	mov	sp, r7
 801ab40:	bd90      	pop	{r4, r7, pc}
 801ab42:	bf00      	nop
 801ab44:	0802642c 	.word	0x0802642c

0801ab48 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801ab48:	b590      	push	{r4, r7, lr}
 801ab4a:	b087      	sub	sp, #28
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	60f8      	str	r0, [r7, #12]
 801ab50:	60b9      	str	r1, [r7, #8]
 801ab52:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ab54:	2272      	movs	r2, #114	; 0x72
 801ab56:	490e      	ldr	r1, [pc, #56]	; (801ab90 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801ab58:	2038      	movs	r0, #56	; 0x38
 801ab5a:	f7ef fe4d 	bl	800a7f8 <_ZnwjPKci>
 801ab5e:	4604      	mov	r4, r0
 801ab60:	68b9      	ldr	r1, [r7, #8]
 801ab62:	4620      	mov	r0, r4
 801ab64:	f000 ffde 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ab68:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	69db      	ldr	r3, [r3, #28]
 801ab6e:	6979      	ldr	r1, [r7, #20]
 801ab70:	4618      	mov	r0, r3
 801ab72:	f004 fe6f 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ab76:	697b      	ldr	r3, [r7, #20]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	3314      	adds	r3, #20
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	6879      	ldr	r1, [r7, #4]
 801ab80:	6978      	ldr	r0, [r7, #20]
 801ab82:	4798      	blx	r3
    return *this;
 801ab84:	68fb      	ldr	r3, [r7, #12]
}
 801ab86:	4618      	mov	r0, r3
 801ab88:	371c      	adds	r7, #28
 801ab8a:	46bd      	mov	sp, r7
 801ab8c:	bd90      	pop	{r4, r7, pc}
 801ab8e:	bf00      	nop
 801ab90:	0802642c 	.word	0x0802642c

0801ab94 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801ab94:	b590      	push	{r4, r7, lr}
 801ab96:	b087      	sub	sp, #28
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	60f8      	str	r0, [r7, #12]
 801ab9c:	60b9      	str	r1, [r7, #8]
 801ab9e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aba0:	227a      	movs	r2, #122	; 0x7a
 801aba2:	490e      	ldr	r1, [pc, #56]	; (801abdc <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801aba4:	2038      	movs	r0, #56	; 0x38
 801aba6:	f7ef fe27 	bl	800a7f8 <_ZnwjPKci>
 801abaa:	4604      	mov	r4, r0
 801abac:	68b9      	ldr	r1, [r7, #8]
 801abae:	4620      	mov	r0, r4
 801abb0:	f000 ffb8 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801abb4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	69db      	ldr	r3, [r3, #28]
 801abba:	6979      	ldr	r1, [r7, #20]
 801abbc:	4618      	mov	r0, r3
 801abbe:	f004 fe49 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801abc2:	697b      	ldr	r3, [r7, #20]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	3318      	adds	r3, #24
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	6879      	ldr	r1, [r7, #4]
 801abcc:	6978      	ldr	r0, [r7, #20]
 801abce:	4798      	blx	r3
    return *this;
 801abd0:	68fb      	ldr	r3, [r7, #12]
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	371c      	adds	r7, #28
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd90      	pop	{r4, r7, pc}
 801abda:	bf00      	nop
 801abdc:	0802642c 	.word	0x0802642c

0801abe0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801abe0:	b5b0      	push	{r4, r5, r7, lr}
 801abe2:	b086      	sub	sp, #24
 801abe4:	af02      	add	r7, sp, #8
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	4639      	mov	r1, r7
 801abec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801abf0:	f7f9 fda8 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801abf4:	4604      	mov	r4, r0
 801abf6:	6823      	ldr	r3, [r4, #0]
 801abf8:	3368      	adds	r3, #104	; 0x68
 801abfa:	681d      	ldr	r5, [r3, #0]
 801abfc:	f7f9 fdb2 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac00:	4603      	mov	r3, r0
 801ac02:	9300      	str	r3, [sp, #0]
 801ac04:	2396      	movs	r3, #150	; 0x96
 801ac06:	4a04      	ldr	r2, [pc, #16]	; (801ac18 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801ac08:	4904      	ldr	r1, [pc, #16]	; (801ac1c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	47a8      	blx	r5
    return *this;
 801ac0e:	68fb      	ldr	r3, [r7, #12]
}
 801ac10:	4618      	mov	r0, r3
 801ac12:	3710      	adds	r7, #16
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bdb0      	pop	{r4, r5, r7, pc}
 801ac18:	0802642c 	.word	0x0802642c
 801ac1c:	08026448 	.word	0x08026448

0801ac20 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801ac20:	b5b0      	push	{r4, r5, r7, lr}
 801ac22:	b086      	sub	sp, #24
 801ac24:	af02      	add	r7, sp, #8
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	4639      	mov	r1, r7
 801ac2c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801ac30:	f7f9 fd88 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801ac34:	4604      	mov	r4, r0
 801ac36:	6823      	ldr	r3, [r4, #0]
 801ac38:	3368      	adds	r3, #104	; 0x68
 801ac3a:	681d      	ldr	r5, [r3, #0]
 801ac3c:	f7f9 fd92 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac40:	4603      	mov	r3, r0
 801ac42:	9300      	str	r3, [sp, #0]
 801ac44:	239c      	movs	r3, #156	; 0x9c
 801ac46:	4a04      	ldr	r2, [pc, #16]	; (801ac58 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801ac48:	4904      	ldr	r1, [pc, #16]	; (801ac5c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801ac4a:	4620      	mov	r0, r4
 801ac4c:	47a8      	blx	r5
    return *this;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3710      	adds	r7, #16
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bdb0      	pop	{r4, r5, r7, pc}
 801ac58:	0802642c 	.word	0x0802642c
 801ac5c:	08026468 	.word	0x08026468

0801ac60 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801ac60:	b590      	push	{r4, r7, lr}
 801ac62:	b087      	sub	sp, #28
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	60f8      	str	r0, [r7, #12]
 801ac68:	60b9      	str	r1, [r7, #8]
 801ac6a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ac6e:	22a4      	movs	r2, #164	; 0xa4
 801ac70:	490e      	ldr	r1, [pc, #56]	; (801acac <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801ac72:	2038      	movs	r0, #56	; 0x38
 801ac74:	f7ef fdc0 	bl	800a7f8 <_ZnwjPKci>
 801ac78:	4604      	mov	r4, r0
 801ac7a:	68b9      	ldr	r1, [r7, #8]
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f000 ff51 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ac82:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	69db      	ldr	r3, [r3, #28]
 801ac88:	6979      	ldr	r1, [r7, #20]
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	f004 fde2 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ac90:	697b      	ldr	r3, [r7, #20]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	3324      	adds	r3, #36	; 0x24
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	ed97 0b00 	vldr	d0, [r7]
 801ac9c:	6978      	ldr	r0, [r7, #20]
 801ac9e:	4798      	blx	r3
    return *this;
 801aca0:	68fb      	ldr	r3, [r7, #12]
}
 801aca2:	4618      	mov	r0, r3
 801aca4:	371c      	adds	r7, #28
 801aca6:	46bd      	mov	sp, r7
 801aca8:	bd90      	pop	{r4, r7, pc}
 801acaa:	bf00      	nop
 801acac:	0802642c 	.word	0x0802642c

0801acb0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801acb0:	b590      	push	{r4, r7, lr}
 801acb2:	b089      	sub	sp, #36	; 0x24
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6178      	str	r0, [r7, #20]
 801acb8:	6139      	str	r1, [r7, #16]
 801acba:	ed87 0b02 	vstr	d0, [r7, #8]
 801acbe:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801acc2:	22ac      	movs	r2, #172	; 0xac
 801acc4:	490f      	ldr	r1, [pc, #60]	; (801ad04 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801acc6:	2038      	movs	r0, #56	; 0x38
 801acc8:	f7ef fd96 	bl	800a7f8 <_ZnwjPKci>
 801accc:	4604      	mov	r4, r0
 801acce:	6939      	ldr	r1, [r7, #16]
 801acd0:	4620      	mov	r0, r4
 801acd2:	f000 ff27 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801acd6:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	69db      	ldr	r3, [r3, #28]
 801acdc:	69f9      	ldr	r1, [r7, #28]
 801acde:	4618      	mov	r0, r3
 801ace0:	f004 fdb8 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801ace4:	69fb      	ldr	r3, [r7, #28]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	3328      	adds	r3, #40	; 0x28
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	ed97 1b00 	vldr	d1, [r7]
 801acf0:	ed97 0b02 	vldr	d0, [r7, #8]
 801acf4:	69f8      	ldr	r0, [r7, #28]
 801acf6:	4798      	blx	r3
    return *this;
 801acf8:	697b      	ldr	r3, [r7, #20]
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	3724      	adds	r7, #36	; 0x24
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd90      	pop	{r4, r7, pc}
 801ad02:	bf00      	nop
 801ad04:	0802642c 	.word	0x0802642c

0801ad08 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801ad08:	b590      	push	{r4, r7, lr}
 801ad0a:	b087      	sub	sp, #28
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	60f8      	str	r0, [r7, #12]
 801ad10:	60b9      	str	r1, [r7, #8]
 801ad12:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ad14:	22b4      	movs	r2, #180	; 0xb4
 801ad16:	490e      	ldr	r1, [pc, #56]	; (801ad50 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801ad18:	2038      	movs	r0, #56	; 0x38
 801ad1a:	f7ef fd6d 	bl	800a7f8 <_ZnwjPKci>
 801ad1e:	4604      	mov	r4, r0
 801ad20:	68b9      	ldr	r1, [r7, #8]
 801ad22:	4620      	mov	r0, r4
 801ad24:	f000 fefe 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ad28:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	69db      	ldr	r3, [r3, #28]
 801ad2e:	6979      	ldr	r1, [r7, #20]
 801ad30:	4618      	mov	r0, r3
 801ad32:	f004 fd8f 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ad36:	697b      	ldr	r3, [r7, #20]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	3338      	adds	r3, #56	; 0x38
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	6879      	ldr	r1, [r7, #4]
 801ad40:	6978      	ldr	r0, [r7, #20]
 801ad42:	4798      	blx	r3
    return *this;
 801ad44:	68fb      	ldr	r3, [r7, #12]
}
 801ad46:	4618      	mov	r0, r3
 801ad48:	371c      	adds	r7, #28
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd90      	pop	{r4, r7, pc}
 801ad4e:	bf00      	nop
 801ad50:	0802642c 	.word	0x0802642c

0801ad54 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801ad54:	b590      	push	{r4, r7, lr}
 801ad56:	b087      	sub	sp, #28
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	60f8      	str	r0, [r7, #12]
 801ad5c:	60b9      	str	r1, [r7, #8]
 801ad5e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ad60:	22bc      	movs	r2, #188	; 0xbc
 801ad62:	490e      	ldr	r1, [pc, #56]	; (801ad9c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801ad64:	2038      	movs	r0, #56	; 0x38
 801ad66:	f7ef fd47 	bl	800a7f8 <_ZnwjPKci>
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	68b9      	ldr	r1, [r7, #8]
 801ad6e:	4620      	mov	r0, r4
 801ad70:	f000 fed8 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ad74:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	69db      	ldr	r3, [r3, #28]
 801ad7a:	6979      	ldr	r1, [r7, #20]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f004 fd69 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	332c      	adds	r3, #44	; 0x2c
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	6879      	ldr	r1, [r7, #4]
 801ad8c:	6978      	ldr	r0, [r7, #20]
 801ad8e:	4798      	blx	r3
    return *this;
 801ad90:	68fb      	ldr	r3, [r7, #12]
}
 801ad92:	4618      	mov	r0, r3
 801ad94:	371c      	adds	r7, #28
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd90      	pop	{r4, r7, pc}
 801ad9a:	bf00      	nop
 801ad9c:	0802642c 	.word	0x0802642c

0801ada0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801ada0:	b590      	push	{r4, r7, lr}
 801ada2:	b087      	sub	sp, #28
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	60f8      	str	r0, [r7, #12]
 801ada8:	60b9      	str	r1, [r7, #8]
 801adaa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801adac:	22c4      	movs	r2, #196	; 0xc4
 801adae:	490e      	ldr	r1, [pc, #56]	; (801ade8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801adb0:	2038      	movs	r0, #56	; 0x38
 801adb2:	f7ef fd21 	bl	800a7f8 <_ZnwjPKci>
 801adb6:	4604      	mov	r4, r0
 801adb8:	68b9      	ldr	r1, [r7, #8]
 801adba:	4620      	mov	r0, r4
 801adbc:	f000 feb2 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801adc0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	69db      	ldr	r3, [r3, #28]
 801adc6:	6979      	ldr	r1, [r7, #20]
 801adc8:	4618      	mov	r0, r3
 801adca:	f004 fd43 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801adce:	697b      	ldr	r3, [r7, #20]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	3330      	adds	r3, #48	; 0x30
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	6879      	ldr	r1, [r7, #4]
 801add8:	6978      	ldr	r0, [r7, #20]
 801adda:	4798      	blx	r3
    return *this;
 801addc:	68fb      	ldr	r3, [r7, #12]
}
 801adde:	4618      	mov	r0, r3
 801ade0:	371c      	adds	r7, #28
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd90      	pop	{r4, r7, pc}
 801ade6:	bf00      	nop
 801ade8:	0802642c 	.word	0x0802642c

0801adec <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801adec:	b590      	push	{r4, r7, lr}
 801adee:	b087      	sub	sp, #28
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	60b9      	str	r1, [r7, #8]
 801adf6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801adf8:	22cc      	movs	r2, #204	; 0xcc
 801adfa:	490e      	ldr	r1, [pc, #56]	; (801ae34 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801adfc:	2038      	movs	r0, #56	; 0x38
 801adfe:	f7ef fcfb 	bl	800a7f8 <_ZnwjPKci>
 801ae02:	4604      	mov	r4, r0
 801ae04:	68b9      	ldr	r1, [r7, #8]
 801ae06:	4620      	mov	r0, r4
 801ae08:	f000 fe8c 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ae0c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	69db      	ldr	r3, [r3, #28]
 801ae12:	6979      	ldr	r1, [r7, #20]
 801ae14:	4618      	mov	r0, r3
 801ae16:	f004 fd1d 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	681b      	ldr	r3, [r3, #0]
 801ae1e:	3334      	adds	r3, #52	; 0x34
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	6879      	ldr	r1, [r7, #4]
 801ae24:	6978      	ldr	r0, [r7, #20]
 801ae26:	4798      	blx	r3
    return *this;
 801ae28:	68fb      	ldr	r3, [r7, #12]
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	371c      	adds	r7, #28
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd90      	pop	{r4, r7, pc}
 801ae32:	bf00      	nop
 801ae34:	0802642c 	.word	0x0802642c

0801ae38 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801ae38:	b590      	push	{r4, r7, lr}
 801ae3a:	b087      	sub	sp, #28
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	607a      	str	r2, [r7, #4]
 801ae44:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ae46:	22d4      	movs	r2, #212	; 0xd4
 801ae48:	490e      	ldr	r1, [pc, #56]	; (801ae84 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801ae4a:	2038      	movs	r0, #56	; 0x38
 801ae4c:	f7ef fcd4 	bl	800a7f8 <_ZnwjPKci>
 801ae50:	4604      	mov	r4, r0
 801ae52:	68b9      	ldr	r1, [r7, #8]
 801ae54:	4620      	mov	r0, r4
 801ae56:	f000 fe65 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ae5a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	69db      	ldr	r3, [r3, #28]
 801ae60:	6979      	ldr	r1, [r7, #20]
 801ae62:	4618      	mov	r0, r3
 801ae64:	f004 fcf6 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	333c      	adds	r3, #60	; 0x3c
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	683a      	ldr	r2, [r7, #0]
 801ae72:	6879      	ldr	r1, [r7, #4]
 801ae74:	6978      	ldr	r0, [r7, #20]
 801ae76:	4798      	blx	r3
    return *this;
 801ae78:	68fb      	ldr	r3, [r7, #12]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	371c      	adds	r7, #28
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd90      	pop	{r4, r7, pc}
 801ae82:	bf00      	nop
 801ae84:	0802642c 	.word	0x0802642c

0801ae88 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801ae88:	b590      	push	{r4, r7, lr}
 801ae8a:	b087      	sub	sp, #28
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	60f8      	str	r0, [r7, #12]
 801ae90:	60b9      	str	r1, [r7, #8]
 801ae92:	607a      	str	r2, [r7, #4]
 801ae94:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ae96:	22dc      	movs	r2, #220	; 0xdc
 801ae98:	490e      	ldr	r1, [pc, #56]	; (801aed4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801ae9a:	2038      	movs	r0, #56	; 0x38
 801ae9c:	f7ef fcac 	bl	800a7f8 <_ZnwjPKci>
 801aea0:	4604      	mov	r4, r0
 801aea2:	6879      	ldr	r1, [r7, #4]
 801aea4:	4620      	mov	r0, r4
 801aea6:	f000 fe3d 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aeaa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	69db      	ldr	r3, [r3, #28]
 801aeb0:	6979      	ldr	r1, [r7, #20]
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f004 fcce 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801aeb8:	697b      	ldr	r3, [r7, #20]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	3340      	adds	r3, #64	; 0x40
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	683a      	ldr	r2, [r7, #0]
 801aec2:	68b9      	ldr	r1, [r7, #8]
 801aec4:	6978      	ldr	r0, [r7, #20]
 801aec6:	4798      	blx	r3
    return *this;
 801aec8:	68fb      	ldr	r3, [r7, #12]
}
 801aeca:	4618      	mov	r0, r3
 801aecc:	371c      	adds	r7, #28
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd90      	pop	{r4, r7, pc}
 801aed2:	bf00      	nop
 801aed4:	0802642c 	.word	0x0802642c

0801aed8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801aed8:	b590      	push	{r4, r7, lr}
 801aeda:	b087      	sub	sp, #28
 801aedc:	af00      	add	r7, sp, #0
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801aee6:	22e4      	movs	r2, #228	; 0xe4
 801aee8:	4911      	ldr	r1, [pc, #68]	; (801af30 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801aeea:	2038      	movs	r0, #56	; 0x38
 801aeec:	f7ef fc84 	bl	800a7f8 <_ZnwjPKci>
 801aef0:	4604      	mov	r4, r0
 801aef2:	68b9      	ldr	r1, [r7, #8]
 801aef4:	4620      	mov	r0, r4
 801aef6:	f000 fe15 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801aefa:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	6a1b      	ldr	r3, [r3, #32]
 801af00:	6979      	ldr	r1, [r7, #20]
 801af02:	4618      	mov	r0, r3
 801af04:	f004 fca6 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801af08:	697b      	ldr	r3, [r7, #20]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	3330      	adds	r3, #48	; 0x30
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	6879      	ldr	r1, [r7, #4]
 801af12:	6978      	ldr	r0, [r7, #20]
 801af14:	4798      	blx	r3
    newParameter->setSize(size);
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	3348      	adds	r3, #72	; 0x48
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	6839      	ldr	r1, [r7, #0]
 801af20:	6978      	ldr	r0, [r7, #20]
 801af22:	4798      	blx	r3
    return *this;
 801af24:	68fb      	ldr	r3, [r7, #12]
}
 801af26:	4618      	mov	r0, r3
 801af28:	371c      	adds	r7, #28
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd90      	pop	{r4, r7, pc}
 801af2e:	bf00      	nop
 801af30:	0802642c 	.word	0x0802642c

0801af34 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801af34:	b590      	push	{r4, r7, lr}
 801af36:	b087      	sub	sp, #28
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
 801af40:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801af42:	22ed      	movs	r2, #237	; 0xed
 801af44:	490e      	ldr	r1, [pc, #56]	; (801af80 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801af46:	2038      	movs	r0, #56	; 0x38
 801af48:	f7ef fc56 	bl	800a7f8 <_ZnwjPKci>
 801af4c:	4604      	mov	r4, r0
 801af4e:	6879      	ldr	r1, [r7, #4]
 801af50:	4620      	mov	r0, r4
 801af52:	f000 fde7 	bl	801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801af56:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	6a1b      	ldr	r3, [r3, #32]
 801af5c:	6979      	ldr	r1, [r7, #20]
 801af5e:	4618      	mov	r0, r3
 801af60:	f004 fc78 	bl	801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801af64:	697b      	ldr	r3, [r7, #20]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	3340      	adds	r3, #64	; 0x40
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	683a      	ldr	r2, [r7, #0]
 801af6e:	68b9      	ldr	r1, [r7, #8]
 801af70:	6978      	ldr	r0, [r7, #20]
 801af72:	4798      	blx	r3
    return *this;
 801af74:	68fb      	ldr	r3, [r7, #12]
}
 801af76:	4618      	mov	r0, r3
 801af78:	371c      	adds	r7, #28
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bd90      	pop	{r4, r7, pc}
 801af7e:	bf00      	nop
 801af80:	0802642c 	.word	0x0802642c

0801af84 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801af84:	b590      	push	{r4, r7, lr}
 801af86:	b083      	sub	sp, #12
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
 801af8c:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	3318      	adds	r3, #24
 801af94:	681c      	ldr	r4, [r3, #0]
 801af96:	2300      	movs	r3, #0
 801af98:	2200      	movs	r2, #0
 801af9a:	6839      	ldr	r1, [r7, #0]
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	47a0      	blx	r4
 801afa0:	4603      	mov	r3, r0
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	370c      	adds	r7, #12
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bd90      	pop	{r4, r7, pc}
	...

0801afac <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b086      	sub	sp, #24
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	60f8      	str	r0, [r7, #12]
 801afb4:	60b9      	str	r1, [r7, #8]
 801afb6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801afb8:	68bb      	ldr	r3, [r7, #8]
 801afba:	69db      	ldr	r3, [r3, #28]
 801afbc:	6879      	ldr	r1, [r7, #4]
 801afbe:	4618      	mov	r0, r3
 801afc0:	f004 fc7e 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801afc4:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d008      	beq.n	801afde <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801afcc:	697b      	ldr	r3, [r7, #20]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	3360      	adds	r3, #96	; 0x60
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	68fa      	ldr	r2, [r7, #12]
 801afd6:	6979      	ldr	r1, [r7, #20]
 801afd8:	4610      	mov	r0, r2
 801afda:	4798      	blx	r3
 801afdc:	e004      	b.n	801afe8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	4903      	ldr	r1, [pc, #12]	; (801aff0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801afe2:	4618      	mov	r0, r3
 801afe4:	f7f2 fe10 	bl	800dc08 <_Z10StringFromPKc>
}
 801afe8:	68f8      	ldr	r0, [r7, #12]
 801afea:	3718      	adds	r7, #24
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}
 801aff0:	08026428 	.word	0x08026428

0801aff4 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b084      	sub	sp, #16
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	69db      	ldr	r3, [r3, #28]
 801b002:	6839      	ldr	r1, [r7, #0]
 801b004:	4618      	mov	r0, r3
 801b006:	f004 fc5b 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b00a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	bf14      	ite	ne
 801b012:	2301      	movne	r3, #1
 801b014:	2300      	moveq	r3, #0
 801b016:	b2db      	uxtb	r3, r3
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b084      	sub	sp, #16
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	6a1b      	ldr	r3, [r3, #32]
 801b02e:	6839      	ldr	r1, [r7, #0]
 801b030:	4618      	mov	r0, r3
 801b032:	f004 fc45 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b036:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	bf14      	ite	ne
 801b03e:	2301      	movne	r3, #1
 801b040:	2300      	moveq	r3, #0
 801b042:	b2db      	uxtb	r3, r3
}
 801b044:	4618      	mov	r0, r3
 801b046:	3710      	adds	r7, #16
 801b048:	46bd      	mov	sp, r7
 801b04a:	bd80      	pop	{r7, pc}

0801b04c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801b04c:	b590      	push	{r4, r7, lr}
 801b04e:	b089      	sub	sp, #36	; 0x24
 801b050:	af00      	add	r7, sp, #0
 801b052:	60f8      	str	r0, [r7, #12]
 801b054:	60b9      	str	r1, [r7, #8]
 801b056:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	69db      	ldr	r3, [r3, #28]
 801b05c:	6879      	ldr	r1, [r7, #4]
 801b05e:	4618      	mov	r0, r3
 801b060:	f004 fc2e 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b064:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b066:	2400      	movs	r4, #0
 801b068:	69fb      	ldr	r3, [r7, #28]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d004      	beq.n	801b078 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801b06e:	69f9      	ldr	r1, [r7, #28]
 801b070:	68f8      	ldr	r0, [r7, #12]
 801b072:	f7f0 f829 	bl	800b0c8 <_ZN14MockNamedValueC1ERKS_>
 801b076:	e00c      	b.n	801b092 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801b078:	f107 0314 	add.w	r3, r7, #20
 801b07c:	490a      	ldr	r1, [pc, #40]	; (801b0a8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801b07e:	4618      	mov	r0, r3
 801b080:	f7f1 ff7d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801b084:	2401      	movs	r4, #1
 801b086:	f107 0314 	add.w	r3, r7, #20
 801b08a:	4619      	mov	r1, r3
 801b08c:	68f8      	ldr	r0, [r7, #12]
 801b08e:	f002 fc9b 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b092:	2c00      	cmp	r4, #0
 801b094:	d004      	beq.n	801b0a0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801b096:	f107 0314 	add.w	r3, r7, #20
 801b09a:	4618      	mov	r0, r3
 801b09c:	f7f2 fb27 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801b0a0:	68f8      	ldr	r0, [r7, #12]
 801b0a2:	3724      	adds	r7, #36	; 0x24
 801b0a4:	46bd      	mov	sp, r7
 801b0a6:	bd90      	pop	{r4, r7, pc}
 801b0a8:	08026428 	.word	0x08026428

0801b0ac <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801b0ac:	b590      	push	{r4, r7, lr}
 801b0ae:	b089      	sub	sp, #36	; 0x24
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	60f8      	str	r0, [r7, #12]
 801b0b4:	60b9      	str	r1, [r7, #8]
 801b0b6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b0b8:	68bb      	ldr	r3, [r7, #8]
 801b0ba:	6a1b      	ldr	r3, [r3, #32]
 801b0bc:	6879      	ldr	r1, [r7, #4]
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f004 fbfe 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b0c4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b0c6:	2400      	movs	r4, #0
 801b0c8:	69fb      	ldr	r3, [r7, #28]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d004      	beq.n	801b0d8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801b0ce:	69f9      	ldr	r1, [r7, #28]
 801b0d0:	68f8      	ldr	r0, [r7, #12]
 801b0d2:	f7ef fff9 	bl	800b0c8 <_ZN14MockNamedValueC1ERKS_>
 801b0d6:	e00c      	b.n	801b0f2 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801b0d8:	f107 0314 	add.w	r3, r7, #20
 801b0dc:	490a      	ldr	r1, [pc, #40]	; (801b108 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f7f1 ff4d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801b0e4:	2401      	movs	r4, #1
 801b0e6:	f107 0314 	add.w	r3, r7, #20
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	68f8      	ldr	r0, [r7, #12]
 801b0ee:	f002 fc6b 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b0f2:	2c00      	cmp	r4, #0
 801b0f4:	d004      	beq.n	801b100 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801b0f6:	f107 0314 	add.w	r3, r7, #20
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	f7f2 faf7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801b100:	68f8      	ldr	r0, [r7, #12]
 801b102:	3724      	adds	r7, #36	; 0x24
 801b104:	46bd      	mov	sp, r7
 801b106:	bd90      	pop	{r4, r7, pc}
 801b108:	08026428 	.word	0x08026428

0801b10c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	b084      	sub	sp, #16
 801b110:	af00      	add	r7, sp, #0
 801b112:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	69db      	ldr	r3, [r3, #28]
 801b118:	4618      	mov	r0, r3
 801b11a:	f004 fc00 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b11e:	60f8      	str	r0, [r7, #12]
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d014      	beq.n	801b150 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801b126:	68f9      	ldr	r1, [r7, #12]
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f000 fced 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b12e:	4603      	mov	r3, r0
 801b130:	4618      	mov	r0, r3
 801b132:	f000 fd1f 	bl	801bb74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b136:	4603      	mov	r3, r0
 801b138:	f083 0301 	eor.w	r3, r3, #1
 801b13c:	b2db      	uxtb	r3, r3
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d001      	beq.n	801b146 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801b142:	2300      	movs	r3, #0
 801b144:	e023      	b.n	801b18e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b146:	68f8      	ldr	r0, [r7, #12]
 801b148:	f004 faf2 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b14c:	60f8      	str	r0, [r7, #12]
 801b14e:	e7e7      	b.n	801b120 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6a1b      	ldr	r3, [r3, #32]
 801b154:	4618      	mov	r0, r3
 801b156:	f004 fbe2 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b15a:	60f8      	str	r0, [r7, #12]
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d014      	beq.n	801b18c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801b162:	68f9      	ldr	r1, [r7, #12]
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f000 fccf 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b16a:	4603      	mov	r3, r0
 801b16c:	4618      	mov	r0, r3
 801b16e:	f000 fd01 	bl	801bb74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b172:	4603      	mov	r3, r0
 801b174:	f083 0301 	eor.w	r3, r3, #1
 801b178:	b2db      	uxtb	r3, r3
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d001      	beq.n	801b182 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801b17e:	2300      	movs	r3, #0
 801b180:	e005      	b.n	801b18e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b182:	68f8      	ldr	r0, [r7, #12]
 801b184:	f004 fad4 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b188:	60f8      	str	r0, [r7, #12]
 801b18a:	e7e7      	b.n	801b15c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801b18c:	2301      	movs	r3, #1
}
 801b18e:	4618      	mov	r0, r3
 801b190:	3710      	adds	r7, #16
 801b192:	46bd      	mov	sp, r7
 801b194:	bd80      	pop	{r7, pc}

0801b196 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801b196:	b480      	push	{r7}
 801b198:	b083      	sub	sp, #12
 801b19a:	af00      	add	r7, sp, #0
 801b19c:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	2201      	movs	r2, #1
 801b1a2:	731a      	strb	r2, [r3, #12]
    return *this;
 801b1a4:	687b      	ldr	r3, [r7, #4]
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	370c      	adds	r7, #12
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b0:	4770      	bx	lr

0801b1b2 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801b1b2:	b480      	push	{r7}
 801b1b4:	b083      	sub	sp, #12
 801b1b6:	af00      	add	r7, sp, #0
 801b1b8:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	bf0c      	ite	eq
 801b1c6:	2301      	moveq	r3, #1
 801b1c8:	2300      	movne	r3, #0
 801b1ca:	b2db      	uxtb	r3, r3
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	370c      	adds	r7, #12
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d6:	4770      	bx	lr

0801b1d8 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801b1d8:	b480      	push	{r7}
 801b1da:	b083      	sub	sp, #12
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	bf34      	ite	cc
 801b1ec:	2301      	movcc	r3, #1
 801b1ee:	2300      	movcs	r3, #0
 801b1f0:	b2db      	uxtb	r3, r3
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	370c      	adds	r7, #12
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1fc:	4770      	bx	lr

0801b1fe <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801b1fe:	b580      	push	{r7, lr}
 801b200:	b082      	sub	sp, #8
 801b202:	af00      	add	r7, sp, #0
 801b204:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	33cc      	adds	r3, #204	; 0xcc
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	6878      	ldr	r0, [r7, #4]
 801b210:	4798      	blx	r3
 801b212:	4603      	mov	r3, r0
 801b214:	2b00      	cmp	r3, #0
 801b216:	d00c      	beq.n	801b232 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	7b1b      	ldrb	r3, [r3, #12]
 801b21c:	f083 0301 	eor.w	r3, r3, #1
 801b220:	b2db      	uxtb	r3, r3
 801b222:	2b00      	cmp	r3, #0
 801b224:	d103      	bne.n	801b22e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	7b5b      	ldrb	r3, [r3, #13]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d001      	beq.n	801b232 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b22e:	2301      	movs	r3, #1
 801b230:	e000      	b.n	801b234 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801b232:	2300      	movs	r3, #0
}
 801b234:	4618      	mov	r0, r3
 801b236:	3708      	adds	r7, #8
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}

0801b23c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801b23c:	b580      	push	{r7, lr}
 801b23e:	b082      	sub	sp, #8
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	33d0      	adds	r3, #208	; 0xd0
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	6878      	ldr	r0, [r7, #4]
 801b24e:	4798      	blx	r3
 801b250:	4603      	mov	r3, r0
 801b252:	2b00      	cmp	r3, #0
 801b254:	d006      	beq.n	801b264 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d001      	beq.n	801b264 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b260:	2301      	movs	r3, #1
 801b262:	e000      	b.n	801b266 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801b264:	2300      	movs	r3, #0
}
 801b266:	4618      	mov	r0, r3
 801b268:	3708      	adds	r7, #8
 801b26a:	46bd      	mov	sp, r7
 801b26c:	bd80      	pop	{r7, pc}

0801b26e <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801b26e:	b580      	push	{r7, lr}
 801b270:	b082      	sub	sp, #8
 801b272:	af00      	add	r7, sp, #0
 801b274:	6078      	str	r0, [r7, #4]
 801b276:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b27c:	1c5a      	adds	r2, r3, #1
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	691b      	ldr	r3, [r3, #16]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d00c      	beq.n	801b2a4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b28e:	683a      	ldr	r2, [r7, #0]
 801b290:	429a      	cmp	r2, r3
 801b292:	d304      	bcc.n	801b29e <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	695b      	ldr	r3, [r3, #20]
 801b298:	683a      	ldr	r2, [r7, #0]
 801b29a:	429a      	cmp	r2, r3
 801b29c:	d902      	bls.n	801b2a4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	2201      	movs	r2, #1
 801b2a2:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	33ec      	adds	r3, #236	; 0xec
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	6878      	ldr	r0, [r7, #4]
 801b2ae:	4798      	blx	r3
}
 801b2b0:	bf00      	nop
 801b2b2:	3708      	adds	r7, #8
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bd80      	pop	{r7, pc}

0801b2b8 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801b2b8:	b480      	push	{r7}
 801b2ba:	b083      	sub	sp, #12
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	2201      	movs	r2, #1
 801b2c4:	735a      	strb	r2, [r3, #13]
}
 801b2c6:	bf00      	nop
 801b2c8:	370c      	adds	r7, #12
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d0:	4770      	bx	lr

0801b2d2 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801b2d2:	b480      	push	{r7}
 801b2d4:	b083      	sub	sp, #12
 801b2d6:	af00      	add	r7, sp, #0
 801b2d8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2201      	movs	r2, #1
 801b2de:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801b2e2:	bf00      	nop
 801b2e4:	370c      	adds	r7, #12
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ec:	4770      	bx	lr

0801b2ee <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801b2ee:	b580      	push	{r7, lr}
 801b2f0:	b084      	sub	sp, #16
 801b2f2:	af00      	add	r7, sp, #0
 801b2f4:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b2fc:	f083 0301 	eor.w	r3, r3, #1
 801b300:	b2da      	uxtb	r2, r3
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	2200      	movs	r2, #0
 801b30c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	69db      	ldr	r3, [r3, #28]
 801b312:	4618      	mov	r0, r3
 801b314:	f004 fb03 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b318:	60f8      	str	r0, [r7, #12]
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d00d      	beq.n	801b33c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801b320:	68f9      	ldr	r1, [r7, #12]
 801b322:	6878      	ldr	r0, [r7, #4]
 801b324:	f000 fbf0 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b328:	4603      	mov	r3, r0
 801b32a:	2100      	movs	r1, #0
 801b32c:	4618      	mov	r0, r3
 801b32e:	f000 fc11 	bl	801bb54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b332:	68f8      	ldr	r0, [r7, #12]
 801b334:	f004 f9fc 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b338:	60f8      	str	r0, [r7, #12]
 801b33a:	e7ee      	b.n	801b31a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	6a1b      	ldr	r3, [r3, #32]
 801b340:	4618      	mov	r0, r3
 801b342:	f004 faec 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b346:	60f8      	str	r0, [r7, #12]
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d00d      	beq.n	801b36a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801b34e:	68f9      	ldr	r1, [r7, #12]
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	f000 fbd9 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b356:	4603      	mov	r3, r0
 801b358:	2100      	movs	r1, #0
 801b35a:	4618      	mov	r0, r3
 801b35c:	f000 fbfa 	bl	801bb54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b360:	68f8      	ldr	r0, [r7, #12]
 801b362:	f004 f9e5 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b366:	60f8      	str	r0, [r7, #12]
 801b368:	e7ee      	b.n	801b348 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801b36a:	bf00      	nop
 801b36c:	3710      	adds	r7, #16
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}

0801b372 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801b372:	b590      	push	{r4, r7, lr}
 801b374:	b087      	sub	sp, #28
 801b376:	af00      	add	r7, sp, #0
 801b378:	6078      	str	r0, [r7, #4]
 801b37a:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	69db      	ldr	r3, [r3, #28]
 801b380:	4618      	mov	r0, r3
 801b382:	f004 facc 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b386:	6178      	str	r0, [r7, #20]
 801b388:	697b      	ldr	r3, [r7, #20]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d022      	beq.n	801b3d4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b38e:	f107 030c 	add.w	r3, r7, #12
 801b392:	6979      	ldr	r1, [r7, #20]
 801b394:	4618      	mov	r0, r3
 801b396:	f004 fa06 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b39a:	f107 030c 	add.w	r3, r7, #12
 801b39e:	6839      	ldr	r1, [r7, #0]
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	f7f2 f9b0 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	461c      	mov	r4, r3
 801b3aa:	f107 030c 	add.w	r3, r7, #12
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7f2 f99d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b3b4:	2c00      	cmp	r4, #0
 801b3b6:	d008      	beq.n	801b3ca <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b3b8:	6979      	ldr	r1, [r7, #20]
 801b3ba:	6878      	ldr	r0, [r7, #4]
 801b3bc:	f000 fba4 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	2101      	movs	r1, #1
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f000 fbc5 	bl	801bb54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801b3ca:	6978      	ldr	r0, [r7, #20]
 801b3cc:	f004 f9b0 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b3d0:	6178      	str	r0, [r7, #20]
 801b3d2:	e7d9      	b.n	801b388 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b3d4:	bf00      	nop
 801b3d6:	371c      	adds	r7, #28
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd90      	pop	{r4, r7, pc}

0801b3dc <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801b3dc:	b590      	push	{r4, r7, lr}
 801b3de:	b087      	sub	sp, #28
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6a1b      	ldr	r3, [r3, #32]
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	f004 fa97 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b3f0:	6178      	str	r0, [r7, #20]
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d022      	beq.n	801b43e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801b3f8:	f107 030c 	add.w	r3, r7, #12
 801b3fc:	6979      	ldr	r1, [r7, #20]
 801b3fe:	4618      	mov	r0, r3
 801b400:	f004 f9d1 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b404:	f107 030c 	add.w	r3, r7, #12
 801b408:	6839      	ldr	r1, [r7, #0]
 801b40a:	4618      	mov	r0, r3
 801b40c:	f7f2 f97b 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801b410:	4603      	mov	r3, r0
 801b412:	461c      	mov	r4, r3
 801b414:	f107 030c 	add.w	r3, r7, #12
 801b418:	4618      	mov	r0, r3
 801b41a:	f7f2 f968 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b41e:	2c00      	cmp	r4, #0
 801b420:	d008      	beq.n	801b434 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801b422:	6979      	ldr	r1, [r7, #20]
 801b424:	6878      	ldr	r0, [r7, #4]
 801b426:	f000 fb6f 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b42a:	4603      	mov	r3, r0
 801b42c:	2101      	movs	r1, #1
 801b42e:	4618      	mov	r0, r3
 801b430:	f000 fb90 	bl	801bb54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801b434:	6978      	ldr	r0, [r7, #20]
 801b436:	f004 f97b 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b43a:	6178      	str	r0, [r7, #20]
 801b43c:	e7d9      	b.n	801b3f2 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801b43e:	bf00      	nop
 801b440:	371c      	adds	r7, #28
 801b442:	46bd      	mov	sp, r7
 801b444:	bd90      	pop	{r4, r7, pc}
	...

0801b448 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b086      	sub	sp, #24
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	60f8      	str	r0, [r7, #12]
 801b450:	60b9      	str	r1, [r7, #8]
 801b452:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b454:	68bb      	ldr	r3, [r7, #8]
 801b456:	69db      	ldr	r3, [r3, #28]
 801b458:	6879      	ldr	r1, [r7, #4]
 801b45a:	4618      	mov	r0, r3
 801b45c:	f004 fa30 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b460:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801b462:	697b      	ldr	r3, [r7, #20]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d005      	beq.n	801b474 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	6979      	ldr	r1, [r7, #20]
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7ff fa0b 	bl	801a888 <_Z10StringFromRK14MockNamedValue>
 801b472:	e003      	b.n	801b47c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801b474:	4903      	ldr	r1, [pc, #12]	; (801b484 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801b476:	68f8      	ldr	r0, [r7, #12]
 801b478:	f7f1 fd81 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
}
 801b47c:	68f8      	ldr	r0, [r7, #12]
 801b47e:	3718      	adds	r7, #24
 801b480:	46bd      	mov	sp, r7
 801b482:	bd80      	pop	{r7, pc}
 801b484:	08026494 	.word	0x08026494

0801b488 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801b488:	b590      	push	{r4, r7, lr}
 801b48a:	b087      	sub	sp, #28
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	69dc      	ldr	r4, [r3, #28]
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	335c      	adds	r3, #92	; 0x5c
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	f107 020c 	add.w	r2, r7, #12
 801b4a2:	6839      	ldr	r1, [r7, #0]
 801b4a4:	4610      	mov	r0, r2
 801b4a6:	4798      	blx	r3
 801b4a8:	f107 030c 	add.w	r3, r7, #12
 801b4ac:	4619      	mov	r1, r3
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f004 fa06 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b4b4:	6178      	str	r0, [r7, #20]
 801b4b6:	f107 030c 	add.w	r3, r7, #12
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7f2 f917 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d00d      	beq.n	801b4e2 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	3350      	adds	r3, #80	; 0x50
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	6839      	ldr	r1, [r7, #0]
 801b4d0:	6978      	ldr	r0, [r7, #20]
 801b4d2:	4798      	blx	r3
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	bf14      	ite	ne
 801b4da:	2301      	movne	r3, #1
 801b4dc:	2300      	moveq	r3, #0
 801b4de:	b2db      	uxtb	r3, r3
 801b4e0:	e006      	b.n	801b4f0 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	7b1b      	ldrb	r3, [r3, #12]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	bf14      	ite	ne
 801b4ea:	2301      	movne	r3, #1
 801b4ec:	2300      	moveq	r3, #0
 801b4ee:	b2db      	uxtb	r3, r3
}
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	371c      	adds	r7, #28
 801b4f4:	46bd      	mov	sp, r7
 801b4f6:	bd90      	pop	{r4, r7, pc}

0801b4f8 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801b4f8:	b590      	push	{r4, r7, lr}
 801b4fa:	b087      	sub	sp, #28
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	6078      	str	r0, [r7, #4]
 801b500:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6a1c      	ldr	r4, [r3, #32]
 801b506:	683b      	ldr	r3, [r7, #0]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	335c      	adds	r3, #92	; 0x5c
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f107 020c 	add.w	r2, r7, #12
 801b512:	6839      	ldr	r1, [r7, #0]
 801b514:	4610      	mov	r0, r2
 801b516:	4798      	blx	r3
 801b518:	f107 030c 	add.w	r3, r7, #12
 801b51c:	4619      	mov	r1, r3
 801b51e:	4620      	mov	r0, r4
 801b520:	f004 f9ce 	bl	801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b524:	6178      	str	r0, [r7, #20]
 801b526:	f107 030c 	add.w	r3, r7, #12
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7f2 f8df 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801b530:	697b      	ldr	r3, [r7, #20]
 801b532:	2b00      	cmp	r3, #0
 801b534:	d00d      	beq.n	801b552 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801b536:	697b      	ldr	r3, [r7, #20]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	3354      	adds	r3, #84	; 0x54
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	6839      	ldr	r1, [r7, #0]
 801b540:	6978      	ldr	r0, [r7, #20]
 801b542:	4798      	blx	r3
 801b544:	4603      	mov	r3, r0
 801b546:	2b00      	cmp	r3, #0
 801b548:	bf14      	ite	ne
 801b54a:	2301      	movne	r3, #1
 801b54c:	2300      	moveq	r3, #0
 801b54e:	b2db      	uxtb	r3, r3
 801b550:	e006      	b.n	801b560 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	7b1b      	ldrb	r3, [r3, #12]
 801b556:	2b00      	cmp	r3, #0
 801b558:	bf14      	ite	ne
 801b55a:	2301      	movne	r3, #1
 801b55c:	2300      	moveq	r3, #0
 801b55e:	b2db      	uxtb	r3, r3
}
 801b560:	4618      	mov	r0, r3
 801b562:	371c      	adds	r7, #28
 801b564:	46bd      	mov	sp, r7
 801b566:	bd90      	pop	{r4, r7, pc}

0801b568 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801b568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b56a:	b0a1      	sub	sp, #132	; 0x84
 801b56c:	af02      	add	r7, sp, #8
 801b56e:	6078      	str	r0, [r7, #4]
 801b570:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b572:	49bc      	ldr	r1, [pc, #752]	; (801b864 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f7f1 fd02 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801b57a:	683b      	ldr	r3, [r7, #0]
 801b57c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b580:	2b00      	cmp	r3, #0
 801b582:	d012      	beq.n	801b5aa <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801b588:	f107 030c 	add.w	r3, r7, #12
 801b58c:	49b6      	ldr	r1, [pc, #728]	; (801b868 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801b58e:	4618      	mov	r0, r3
 801b590:	f7f2 fdb4 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b594:	f107 030c 	add.w	r3, r7, #12
 801b598:	4619      	mov	r1, r3
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f7f1 fd5b 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801b5a0:	f107 030c 	add.w	r3, r7, #12
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	f7f2 f8a2 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    str += getName();
 801b5aa:	f107 0314 	add.w	r3, r7, #20
 801b5ae:	6839      	ldr	r1, [r7, #0]
 801b5b0:	4618      	mov	r0, r3
 801b5b2:	f7ff f989 	bl	801a8c8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801b5b6:	f107 0314 	add.w	r3, r7, #20
 801b5ba:	4619      	mov	r1, r3
 801b5bc:	6878      	ldr	r0, [r7, #4]
 801b5be:	f7f2 f913 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b5c2:	f107 0314 	add.w	r3, r7, #20
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7f2 f891 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801b5cc:	49a7      	ldr	r1, [pc, #668]	; (801b86c <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	f7f2 f91c 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	691b      	ldr	r3, [r3, #16]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d02d      	beq.n	801b638 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	691a      	ldr	r2, [r3, #16]
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	695b      	ldr	r3, [r3, #20]
 801b5e4:	429a      	cmp	r2, r3
 801b5e6:	d113      	bne.n	801b610 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	691a      	ldr	r2, [r3, #16]
 801b5ec:	f107 031c 	add.w	r3, r7, #28
 801b5f0:	499f      	ldr	r1, [pc, #636]	; (801b870 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	f7f2 fd82 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b5f8:	f107 031c 	add.w	r3, r7, #28
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	f7f2 f8f2 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b604:	f107 031c 	add.w	r3, r7, #28
 801b608:	4618      	mov	r0, r3
 801b60a:	f7f2 f870 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b60e:	e013      	b.n	801b638 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	691a      	ldr	r2, [r3, #16]
 801b614:	683b      	ldr	r3, [r7, #0]
 801b616:	695b      	ldr	r3, [r3, #20]
 801b618:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b61c:	4995      	ldr	r1, [pc, #596]	; (801b874 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801b61e:	f7f2 fd6d 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b626:	4619      	mov	r1, r3
 801b628:	6878      	ldr	r0, [r7, #4]
 801b62a:	f7f2 f8dd 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b62e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b632:	4618      	mov	r0, r3
 801b634:	f7f2 f85b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	69db      	ldr	r3, [r3, #28]
 801b63c:	4618      	mov	r0, r3
 801b63e:	f004 f96e 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b642:	4603      	mov	r3, r0
 801b644:	2b00      	cmp	r3, #0
 801b646:	d109      	bne.n	801b65c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b648:	683b      	ldr	r3, [r7, #0]
 801b64a:	6a1b      	ldr	r3, [r3, #32]
 801b64c:	4618      	mov	r0, r3
 801b64e:	f004 f966 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b652:	4603      	mov	r3, r0
 801b654:	2b00      	cmp	r3, #0
 801b656:	d101      	bne.n	801b65c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801b658:	2301      	movs	r3, #1
 801b65a:	e000      	b.n	801b65e <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801b65c:	2300      	movs	r3, #0
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d00b      	beq.n	801b67a <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	7b1b      	ldrb	r3, [r3, #12]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d001      	beq.n	801b66e <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801b66a:	4b83      	ldr	r3, [pc, #524]	; (801b878 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801b66c:	e000      	b.n	801b670 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801b66e:	4b83      	ldr	r3, [pc, #524]	; (801b87c <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801b670:	4619      	mov	r1, r3
 801b672:	6878      	ldr	r0, [r7, #4]
 801b674:	f7f2 f8ca 	bl	800d80c <_ZN12SimpleStringpLEPKc>
 801b678:	e0e3      	b.n	801b842 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b67a:	683b      	ldr	r3, [r7, #0]
 801b67c:	69db      	ldr	r3, [r3, #28]
 801b67e:	4618      	mov	r0, r3
 801b680:	f004 f94d 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b684:	6778      	str	r0, [r7, #116]	; 0x74
 801b686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d069      	beq.n	801b760 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801b68c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b690:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b692:	4618      	mov	r0, r3
 801b694:	f004 f89a 	bl	801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>
 801b698:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b69c:	4618      	mov	r0, r3
 801b69e:	f7f1 fff9 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b6a2:	4605      	mov	r5, r0
 801b6a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b6a8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f004 f87b 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b6b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	f7f1 ffed 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b6ba:	4606      	mov	r6, r0
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	33a4      	adds	r3, #164	; 0xa4
 801b6c2:	681c      	ldr	r4, [r3, #0]
 801b6c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b6c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f004 f86b 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b6d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6d4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b6d8:	6839      	ldr	r1, [r7, #0]
 801b6da:	4618      	mov	r0, r3
 801b6dc:	47a0      	blx	r4
 801b6de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7f1 ffd6 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b6e8:	4603      	mov	r3, r0
 801b6ea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b6ee:	9300      	str	r3, [sp, #0]
 801b6f0:	4633      	mov	r3, r6
 801b6f2:	462a      	mov	r2, r5
 801b6f4:	4962      	ldr	r1, [pc, #392]	; (801b880 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801b6f6:	f7f2 fd01 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b6fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b6fe:	4619      	mov	r1, r3
 801b700:	6878      	ldr	r0, [r7, #4]
 801b702:	f7f2 f871 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f1 ffef 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b710:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801b714:	4618      	mov	r0, r3
 801b716:	f7f1 ffea 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b71a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b71e:	4618      	mov	r0, r3
 801b720:	f7f1 ffe5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b724:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801b728:	4618      	mov	r0, r3
 801b72a:	f7f1 ffe0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b72e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b732:	4618      	mov	r0, r3
 801b734:	f7f1 ffdb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b738:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b73a:	f003 fff9 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b73e:	4603      	mov	r3, r0
 801b740:	2b00      	cmp	r3, #0
 801b742:	bf14      	ite	ne
 801b744:	2301      	movne	r3, #1
 801b746:	2300      	moveq	r3, #0
 801b748:	b2db      	uxtb	r3, r3
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d003      	beq.n	801b756 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801b74e:	494d      	ldr	r1, [pc, #308]	; (801b884 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f7f2 f85b 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801b756:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b758:	f003 ffea 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b75c:	6778      	str	r0, [r7, #116]	; 0x74
 801b75e:	e792      	b.n	801b686 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	69db      	ldr	r3, [r3, #28]
 801b764:	4618      	mov	r0, r3
 801b766:	f004 f8da 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b76a:	4603      	mov	r3, r0
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d009      	beq.n	801b784 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	6a1b      	ldr	r3, [r3, #32]
 801b774:	4618      	mov	r0, r3
 801b776:	f004 f8d2 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d001      	beq.n	801b784 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801b780:	2301      	movs	r3, #1
 801b782:	e000      	b.n	801b786 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801b784:	2300      	movs	r3, #0
 801b786:	2b00      	cmp	r3, #0
 801b788:	d003      	beq.n	801b792 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801b78a:	493e      	ldr	r1, [pc, #248]	; (801b884 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f7f2 f83d 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b792:	683b      	ldr	r3, [r7, #0]
 801b794:	6a1b      	ldr	r3, [r3, #32]
 801b796:	4618      	mov	r0, r3
 801b798:	f004 f8c1 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b79c:	6778      	str	r0, [r7, #116]	; 0x74
 801b79e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d046      	beq.n	801b832 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801b7a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b7a8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	f004 f80e 	bl	801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>
 801b7b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f7f1 ff6d 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b7ba:	4604      	mov	r4, r0
 801b7bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b7c0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f003 ffef 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b7c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7f1 ff61 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801b7d8:	4622      	mov	r2, r4
 801b7da:	492b      	ldr	r1, [pc, #172]	; (801b888 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801b7dc:	f7f2 fc8e 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b7e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b7e4:	4619      	mov	r1, r3
 801b7e6:	6878      	ldr	r0, [r7, #4]
 801b7e8:	f7f1 fffe 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b7ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7f1 ff7c 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b7f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7f1 ff77 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b800:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801b804:	4618      	mov	r0, r3
 801b806:	f7f1 ff72 	bl	800d6ee <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801b80a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b80c:	f003 ff90 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b810:	4603      	mov	r3, r0
 801b812:	2b00      	cmp	r3, #0
 801b814:	bf14      	ite	ne
 801b816:	2301      	movne	r3, #1
 801b818:	2300      	moveq	r3, #0
 801b81a:	b2db      	uxtb	r3, r3
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d003      	beq.n	801b828 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801b820:	4918      	ldr	r1, [pc, #96]	; (801b884 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801b822:	6878      	ldr	r0, [r7, #4]
 801b824:	f7f1 fff2 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801b828:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b82a:	f003 ff81 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b82e:	6778      	str	r0, [r7, #116]	; 0x74
 801b830:	e7b5      	b.n	801b79e <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	7b1b      	ldrb	r3, [r3, #12]
 801b836:	2b00      	cmp	r3, #0
 801b838:	d003      	beq.n	801b842 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801b83a:	4914      	ldr	r1, [pc, #80]	; (801b88c <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801b83c:	6878      	ldr	r0, [r7, #4]
 801b83e:	f7f1 ffe5 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b842:	683b      	ldr	r3, [r7, #0]
 801b844:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b846:	683b      	ldr	r3, [r7, #0]
 801b848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b84a:	2b01      	cmp	r3, #1
 801b84c:	d101      	bne.n	801b852 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801b84e:	4c05      	ldr	r4, [pc, #20]	; (801b864 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b850:	e000      	b.n	801b854 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801b852:	4c0f      	ldr	r4, [pc, #60]	; (801b890 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b858:	683a      	ldr	r2, [r7, #0]
 801b85a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801b85c:	2a01      	cmp	r2, #1
 801b85e:	d119      	bne.n	801b894 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801b860:	4a00      	ldr	r2, [pc, #0]	; (801b864 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801b862:	e018      	b.n	801b896 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801b864:	08026428 	.word	0x08026428
 801b868:	0802649c 	.word	0x0802649c
 801b86c:	080264b4 	.word	0x080264b4
 801b870:	080264bc 	.word	0x080264bc
 801b874:	080264dc 	.word	0x080264dc
 801b878:	08026500 	.word	0x08026500
 801b87c:	08026518 	.word	0x08026518
 801b880:	08026528 	.word	0x08026528
 801b884:	08026534 	.word	0x08026534
 801b888:	08026538 	.word	0x08026538
 801b88c:	08026548 	.word	0x08026548
 801b890:	08026568 	.word	0x08026568
 801b894:	4a0c      	ldr	r2, [pc, #48]	; (801b8c8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801b896:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801b89a:	9201      	str	r2, [sp, #4]
 801b89c:	9300      	str	r3, [sp, #0]
 801b89e:	4623      	mov	r3, r4
 801b8a0:	460a      	mov	r2, r1
 801b8a2:	490a      	ldr	r1, [pc, #40]	; (801b8cc <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801b8a4:	f7f2 fc2a 	bl	800e0fc <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801b8a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b8ac:	4619      	mov	r1, r3
 801b8ae:	6878      	ldr	r0, [r7, #4]
 801b8b0:	f7f1 ff9a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b8b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f7f1 ff18 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    return str;
 801b8be:	bf00      	nop
}
 801b8c0:	6878      	ldr	r0, [r7, #4]
 801b8c2:	377c      	adds	r7, #124	; 0x7c
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8c8:	08026568 	.word	0x08026568
 801b8cc:	0802656c 	.word	0x0802656c

0801b8d0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801b8d0:	b590      	push	{r4, r7, lr}
 801b8d2:	b095      	sub	sp, #84	; 0x54
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
 801b8d8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b8da:	496c      	ldr	r1, [pc, #432]	; (801ba8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b8dc:	6878      	ldr	r0, [r7, #4]
 801b8de:	f7f1 fb4e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	69db      	ldr	r3, [r3, #28]
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	f004 f819 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b8ec:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d05e      	beq.n	801b9b2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801b8f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b8f6:	6838      	ldr	r0, [r7, #0]
 801b8f8:	f000 f906 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	4618      	mov	r0, r3
 801b900:	f000 f938 	bl	801bb74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b904:	4603      	mov	r3, r0
 801b906:	f083 0301 	eor.w	r3, r3, #1
 801b90a:	b2db      	uxtb	r3, r3
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d04b      	beq.n	801b9a8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801b910:	f107 030c 	add.w	r3, r7, #12
 801b914:	495d      	ldr	r1, [pc, #372]	; (801ba8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b916:	4618      	mov	r0, r3
 801b918:	f7f1 fb31 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801b91c:	f107 030c 	add.w	r3, r7, #12
 801b920:	4619      	mov	r1, r3
 801b922:	6878      	ldr	r0, [r7, #4]
 801b924:	f7f1 ff34 	bl	800d790 <_ZneRK12SimpleStringS1_>
 801b928:	4603      	mov	r3, r0
 801b92a:	461c      	mov	r4, r3
 801b92c:	f107 030c 	add.w	r3, r7, #12
 801b930:	4618      	mov	r0, r3
 801b932:	f7f1 fedc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b936:	2c00      	cmp	r4, #0
 801b938:	d003      	beq.n	801b942 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801b93a:	4955      	ldr	r1, [pc, #340]	; (801ba90 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801b93c:	6878      	ldr	r0, [r7, #4]
 801b93e:	f7f1 ff65 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801b942:	f107 031c 	add.w	r3, r7, #28
 801b946:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b948:	4618      	mov	r0, r3
 801b94a:	f003 ff3f 	bl	801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>
 801b94e:	f107 031c 	add.w	r3, r7, #28
 801b952:	4618      	mov	r0, r3
 801b954:	f7f1 fe9e 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b958:	4604      	mov	r4, r0
 801b95a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b95e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b960:	4618      	mov	r0, r3
 801b962:	f003 ff20 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801b966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b96a:	4618      	mov	r0, r3
 801b96c:	f7f1 fe92 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801b970:	4603      	mov	r3, r0
 801b972:	f107 0014 	add.w	r0, r7, #20
 801b976:	4622      	mov	r2, r4
 801b978:	4946      	ldr	r1, [pc, #280]	; (801ba94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801b97a:	f7f2 fbbf 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801b97e:	f107 0314 	add.w	r3, r7, #20
 801b982:	4619      	mov	r1, r3
 801b984:	6878      	ldr	r0, [r7, #4]
 801b986:	f7f1 ff2f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801b98a:	f107 0314 	add.w	r3, r7, #20
 801b98e:	4618      	mov	r0, r3
 801b990:	f7f1 fead 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b998:	4618      	mov	r0, r3
 801b99a:	f7f1 fea8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801b99e:	f107 031c 	add.w	r3, r7, #28
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	f7f1 fea3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801b9a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b9aa:	f003 fec1 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801b9ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b9b0:	e79d      	b.n	801b8ee <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801b9b2:	683b      	ldr	r3, [r7, #0]
 801b9b4:	6a1b      	ldr	r3, [r3, #32]
 801b9b6:	4618      	mov	r0, r3
 801b9b8:	f003 ffb1 	bl	801f91e <_ZN18MockNamedValueList5beginEv>
 801b9bc:	64f8      	str	r0, [r7, #76]	; 0x4c
 801b9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d05e      	beq.n	801ba82 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801b9c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801b9c6:	6838      	ldr	r0, [r7, #0]
 801b9c8:	f000 f89e 	bl	801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	4618      	mov	r0, r3
 801b9d0:	f000 f8d0 	bl	801bb74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b9d4:	4603      	mov	r3, r0
 801b9d6:	f083 0301 	eor.w	r3, r3, #1
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d04b      	beq.n	801ba78 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801b9e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b9e4:	4929      	ldr	r1, [pc, #164]	; (801ba8c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801b9e6:	4618      	mov	r0, r3
 801b9e8:	f7f1 fac9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801b9ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b9f0:	4619      	mov	r1, r3
 801b9f2:	6878      	ldr	r0, [r7, #4]
 801b9f4:	f7f1 fecc 	bl	800d790 <_ZneRK12SimpleStringS1_>
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	461c      	mov	r4, r3
 801b9fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f1 fe74 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ba06:	2c00      	cmp	r4, #0
 801ba08:	d003      	beq.n	801ba12 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801ba0a:	4921      	ldr	r1, [pc, #132]	; (801ba90 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801ba0c:	6878      	ldr	r0, [r7, #4]
 801ba0e:	f7f1 fefd 	bl	800d80c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801ba12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f003 fed7 	bl	801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>
 801ba1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba22:	4618      	mov	r0, r3
 801ba24:	f7f1 fe36 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801ba28:	4604      	mov	r4, r0
 801ba2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ba2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ba30:	4618      	mov	r0, r3
 801ba32:	f003 feb8 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801ba36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f7f1 fe2a 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801ba40:	4603      	mov	r3, r0
 801ba42:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801ba46:	4622      	mov	r2, r4
 801ba48:	4912      	ldr	r1, [pc, #72]	; (801ba94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801ba4a:	f7f2 fb57 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801ba4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ba52:	4619      	mov	r1, r3
 801ba54:	6878      	ldr	r0, [r7, #4]
 801ba56:	f7f1 fec7 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801ba5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ba5e:	4618      	mov	r0, r3
 801ba60:	f7f1 fe45 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ba64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ba68:	4618      	mov	r0, r3
 801ba6a:	f7f1 fe40 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ba6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7f1 fe3b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801ba78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ba7a:	f003 fe59 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801ba7e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ba80:	e79d      	b.n	801b9be <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801ba82:	bf00      	nop
}
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	3754      	adds	r7, #84	; 0x54
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd90      	pop	{r4, r7, pc}
 801ba8c:	08026428 	.word	0x08026428
 801ba90:	08026534 	.word	0x08026534
 801ba94:	08026594 	.word	0x08026594

0801ba98 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801ba98:	b590      	push	{r4, r7, lr}
 801ba9a:	b085      	sub	sp, #20
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
 801baa0:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801baa2:	f107 0308 	add.w	r3, r7, #8
 801baa6:	6879      	ldr	r1, [r7, #4]
 801baa8:	4618      	mov	r0, r3
 801baaa:	f7fe ff0d 	bl	801a8c8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801baae:	f107 0308 	add.w	r3, r7, #8
 801bab2:	4619      	mov	r1, r3
 801bab4:	6838      	ldr	r0, [r7, #0]
 801bab6:	f7f1 fe26 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801baba:	4603      	mov	r3, r0
 801babc:	461c      	mov	r4, r3
 801babe:	f107 0308 	add.w	r3, r7, #8
 801bac2:	4618      	mov	r0, r3
 801bac4:	f7f1 fe13 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801bac8:	4623      	mov	r3, r4
}
 801baca:	4618      	mov	r0, r3
 801bacc:	3714      	adds	r7, #20
 801bace:	46bd      	mov	sp, r7
 801bad0:	bd90      	pop	{r4, r7, pc}

0801bad2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801bad2:	b480      	push	{r7}
 801bad4:	b083      	sub	sp, #12
 801bad6:	af00      	add	r7, sp, #0
 801bad8:	6078      	str	r0, [r7, #4]
 801bada:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801bae2:	f083 0301 	eor.w	r3, r3, #1
 801bae6:	b2db      	uxtb	r3, r3
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d104      	bne.n	801baf6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801baf0:	683a      	ldr	r2, [r7, #0]
 801baf2:	429a      	cmp	r2, r3
 801baf4:	d101      	bne.n	801bafa <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801baf6:	2301      	movs	r3, #1
 801baf8:	e000      	b.n	801bafc <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801bafa:	2300      	movs	r3, #0
}
 801bafc:	4618      	mov	r0, r3
 801bafe:	370c      	adds	r7, #12
 801bb00:	46bd      	mov	sp, r7
 801bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb06:	4770      	bx	lr

0801bb08 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b082      	sub	sp, #8
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
 801bb10:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801bb12:	6838      	ldr	r0, [r7, #0]
 801bb14:	f003 fe18 	bl	801f748 <_ZN22MockNamedValueListNode4itemEv>
 801bb18:	4603      	mov	r3, r0
}
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	3708      	adds	r7, #8
 801bb1e:	46bd      	mov	sp, r7
 801bb20:	bd80      	pop	{r7, pc}
	...

0801bb24 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b082      	sub	sp, #8
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
 801bb2c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	6839      	ldr	r1, [r7, #0]
 801bb32:	4618      	mov	r0, r3
 801bb34:	f001 ff48 	bl	801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801bb38:	4a05      	ldr	r2, [pc, #20]	; (801bb50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	601a      	str	r2, [r3, #0]
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	2200      	movs	r2, #0
 801bb42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	4618      	mov	r0, r3
 801bb4a:	3708      	adds	r7, #8
 801bb4c:	46bd      	mov	sp, r7
 801bb4e:	bd80      	pop	{r7, pc}
 801bb50:	08029554 	.word	0x08029554

0801bb54 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801bb54:	b480      	push	{r7}
 801bb56:	b083      	sub	sp, #12
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	6078      	str	r0, [r7, #4]
 801bb5c:	460b      	mov	r3, r1
 801bb5e:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	78fa      	ldrb	r2, [r7, #3]
 801bb64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801bb68:	bf00      	nop
 801bb6a:	370c      	adds	r7, #12
 801bb6c:	46bd      	mov	sp, r7
 801bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb72:	4770      	bx	lr

0801bb74 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801bb74:	b480      	push	{r7}
 801bb76:	b083      	sub	sp, #12
 801bb78:	af00      	add	r7, sp, #0
 801bb7a:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801bb82:	4618      	mov	r0, r3
 801bb84:	370c      	adds	r7, #12
 801bb86:	46bd      	mov	sp, r7
 801bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb8c:	4770      	bx	lr
	...

0801bb90 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b082      	sub	sp, #8
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
 801bb98:	460b      	mov	r3, r1
 801bb9a:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	3328      	adds	r3, #40	; 0x28
 801bba0:	4907      	ldr	r1, [pc, #28]	; (801bbc0 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801bba2:	4618      	mov	r0, r3
 801bba4:	f002 f9b4 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	3328      	adds	r3, #40	; 0x28
 801bbac:	78fa      	ldrb	r2, [r7, #3]
 801bbae:	4611      	mov	r1, r2
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f001 ff5b 	bl	801da6c <_ZN14MockNamedValue8setValueEb>
    return *this;
 801bbb6:	687b      	ldr	r3, [r7, #4]
}
 801bbb8:	4618      	mov	r0, r3
 801bbba:	3708      	adds	r7, #8
 801bbbc:	46bd      	mov	sp, r7
 801bbbe:	bd80      	pop	{r7, pc}
 801bbc0:	0802659c 	.word	0x0802659c

0801bbc4 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b082      	sub	sp, #8
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
 801bbcc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	3328      	adds	r3, #40	; 0x28
 801bbd2:	4907      	ldr	r1, [pc, #28]	; (801bbf0 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f002 f99b 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	3328      	adds	r3, #40	; 0x28
 801bbde:	6839      	ldr	r1, [r7, #0]
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f001 ff67 	bl	801dab4 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801bbe6:	687b      	ldr	r3, [r7, #4]
}
 801bbe8:	4618      	mov	r0, r3
 801bbea:	3708      	adds	r7, #8
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}
 801bbf0:	0802659c 	.word	0x0802659c

0801bbf4 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	6078      	str	r0, [r7, #4]
 801bbfc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	3328      	adds	r3, #40	; 0x28
 801bc02:	4907      	ldr	r1, [pc, #28]	; (801bc20 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801bc04:	4618      	mov	r0, r3
 801bc06:	f002 f983 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	3328      	adds	r3, #40	; 0x28
 801bc0e:	6839      	ldr	r1, [r7, #0]
 801bc10:	4618      	mov	r0, r3
 801bc12:	f001 ff71 	bl	801daf8 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801bc16:	687b      	ldr	r3, [r7, #4]
}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	3708      	adds	r7, #8
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}
 801bc20:	0802659c 	.word	0x0802659c

0801bc24 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801bc24:	b580      	push	{r7, lr}
 801bc26:	b082      	sub	sp, #8
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]
 801bc2c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	3328      	adds	r3, #40	; 0x28
 801bc32:	4907      	ldr	r1, [pc, #28]	; (801bc50 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801bc34:	4618      	mov	r0, r3
 801bc36:	f002 f96b 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	3328      	adds	r3, #40	; 0x28
 801bc3e:	6839      	ldr	r1, [r7, #0]
 801bc40:	4618      	mov	r0, r3
 801bc42:	f001 ff7b 	bl	801db3c <_ZN14MockNamedValue8setValueEl>
    return *this;
 801bc46:	687b      	ldr	r3, [r7, #4]
}
 801bc48:	4618      	mov	r0, r3
 801bc4a:	3708      	adds	r7, #8
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}
 801bc50:	0802659c 	.word	0x0802659c

0801bc54 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b082      	sub	sp, #8
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
 801bc5c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	3328      	adds	r3, #40	; 0x28
 801bc62:	4907      	ldr	r1, [pc, #28]	; (801bc80 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801bc64:	4618      	mov	r0, r3
 801bc66:	f002 f953 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	3328      	adds	r3, #40	; 0x28
 801bc6e:	6839      	ldr	r1, [r7, #0]
 801bc70:	4618      	mov	r0, r3
 801bc72:	f001 ff85 	bl	801db80 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801bc76:	687b      	ldr	r3, [r7, #4]
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3708      	adds	r7, #8
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}
 801bc80:	0802659c 	.word	0x0802659c

0801bc84 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801bc84:	b5b0      	push	{r4, r5, r7, lr}
 801bc86:	b086      	sub	sp, #24
 801bc88:	af02      	add	r7, sp, #8
 801bc8a:	60f8      	str	r0, [r7, #12]
 801bc8c:	1d3b      	adds	r3, r7, #4
 801bc8e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801bc92:	f7f8 fd57 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801bc96:	4604      	mov	r4, r0
 801bc98:	6823      	ldr	r3, [r4, #0]
 801bc9a:	3368      	adds	r3, #104	; 0x68
 801bc9c:	681d      	ldr	r5, [r3, #0]
 801bc9e:	f7f8 fd61 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bca2:	4603      	mov	r3, r0
 801bca4:	9300      	str	r3, [sp, #0]
 801bca6:	f240 2319 	movw	r3, #537	; 0x219
 801bcaa:	4a04      	ldr	r2, [pc, #16]	; (801bcbc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801bcac:	4904      	ldr	r1, [pc, #16]	; (801bcc0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801bcae:	4620      	mov	r0, r4
 801bcb0:	47a8      	blx	r5
    return *this;
 801bcb2:	68fb      	ldr	r3, [r7, #12]
}
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	3710      	adds	r7, #16
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bdb0      	pop	{r4, r5, r7, pc}
 801bcbc:	0802642c 	.word	0x0802642c
 801bcc0:	08026448 	.word	0x08026448

0801bcc4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801bcc4:	b5b0      	push	{r4, r5, r7, lr}
 801bcc6:	b086      	sub	sp, #24
 801bcc8:	af02      	add	r7, sp, #8
 801bcca:	60f8      	str	r0, [r7, #12]
 801bccc:	1d3b      	adds	r3, r7, #4
 801bcce:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801bcd2:	f7f8 fd37 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801bcd6:	4604      	mov	r4, r0
 801bcd8:	6823      	ldr	r3, [r4, #0]
 801bcda:	3368      	adds	r3, #104	; 0x68
 801bcdc:	681d      	ldr	r5, [r3, #0]
 801bcde:	f7f8 fd41 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bce2:	4603      	mov	r3, r0
 801bce4:	9300      	str	r3, [sp, #0]
 801bce6:	f240 231f 	movw	r3, #543	; 0x21f
 801bcea:	4a04      	ldr	r2, [pc, #16]	; (801bcfc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801bcec:	4904      	ldr	r1, [pc, #16]	; (801bd00 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801bcee:	4620      	mov	r0, r4
 801bcf0:	47a8      	blx	r5
    return *this;
 801bcf2:	68fb      	ldr	r3, [r7, #12]
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	3710      	adds	r7, #16
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	bdb0      	pop	{r4, r5, r7, pc}
 801bcfc:	0802642c 	.word	0x0802642c
 801bd00:	08026468 	.word	0x08026468

0801bd04 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
 801bd0c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	3328      	adds	r3, #40	; 0x28
 801bd12:	4907      	ldr	r1, [pc, #28]	; (801bd30 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801bd14:	4618      	mov	r0, r3
 801bd16:	f002 f8fb 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	3328      	adds	r3, #40	; 0x28
 801bd1e:	6839      	ldr	r1, [r7, #0]
 801bd20:	4618      	mov	r0, r3
 801bd22:	f002 f837 	bl	801dd94 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801bd26:	687b      	ldr	r3, [r7, #4]
}
 801bd28:	4618      	mov	r0, r3
 801bd2a:	3708      	adds	r7, #8
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bd80      	pop	{r7, pc}
 801bd30:	0802659c 	.word	0x0802659c

0801bd34 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b084      	sub	sp, #16
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	60f8      	str	r0, [r7, #12]
 801bd3c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	3328      	adds	r3, #40	; 0x28
 801bd44:	4907      	ldr	r1, [pc, #28]	; (801bd64 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801bd46:	4618      	mov	r0, r3
 801bd48:	f002 f8e2 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	3328      	adds	r3, #40	; 0x28
 801bd50:	ed97 0b00 	vldr	d0, [r7]
 801bd54:	4618      	mov	r0, r3
 801bd56:	f001 ff73 	bl	801dc40 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801bd5a:	68fb      	ldr	r3, [r7, #12]
}
 801bd5c:	4618      	mov	r0, r3
 801bd5e:	3710      	adds	r7, #16
 801bd60:	46bd      	mov	sp, r7
 801bd62:	bd80      	pop	{r7, pc}
 801bd64:	0802659c 	.word	0x0802659c

0801bd68 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b082      	sub	sp, #8
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
 801bd70:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	3328      	adds	r3, #40	; 0x28
 801bd76:	4907      	ldr	r1, [pc, #28]	; (801bd94 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801bd78:	4618      	mov	r0, r3
 801bd7a:	f002 f8c9 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	3328      	adds	r3, #40	; 0x28
 801bd82:	6839      	ldr	r1, [r7, #0]
 801bd84:	4618      	mov	r0, r3
 801bd86:	f001 ff9f 	bl	801dcc8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801bd8a:	687b      	ldr	r3, [r7, #4]
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}
 801bd94:	0802659c 	.word	0x0802659c

0801bd98 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
 801bda0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	3328      	adds	r3, #40	; 0x28
 801bda6:	4907      	ldr	r1, [pc, #28]	; (801bdc4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f002 f8b1 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	3328      	adds	r3, #40	; 0x28
 801bdb2:	6839      	ldr	r1, [r7, #0]
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f001 ffa9 	bl	801dd0c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801bdba:	687b      	ldr	r3, [r7, #4]
}
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	3708      	adds	r7, #8
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	bd80      	pop	{r7, pc}
 801bdc4:	0802659c 	.word	0x0802659c

0801bdc8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	3328      	adds	r3, #40	; 0x28
 801bdd6:	4907      	ldr	r1, [pc, #28]	; (801bdf4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f002 f899 	bl	801df10 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	3328      	adds	r3, #40	; 0x28
 801bde2:	6839      	ldr	r1, [r7, #0]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f001 ffb3 	bl	801dd50 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801bdea:	687b      	ldr	r3, [r7, #4]
}
 801bdec:	4618      	mov	r0, r3
 801bdee:	3708      	adds	r7, #8
 801bdf0:	46bd      	mov	sp, r7
 801bdf2:	bd80      	pop	{r7, pc}
 801bdf4:	0802659c 	.word	0x0802659c

0801bdf8 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801bdf8:	b480      	push	{r7}
 801bdfa:	b083      	sub	sp, #12
 801bdfc:	af00      	add	r7, sp, #0
 801bdfe:	6078      	str	r0, [r7, #4]
 801be00:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2201      	movs	r2, #1
 801be06:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2200      	movs	r2, #0
 801be0e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	683a      	ldr	r2, [r7, #0]
 801be16:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801be18:	687b      	ldr	r3, [r7, #4]
}
 801be1a:	4618      	mov	r0, r3
 801be1c:	370c      	adds	r7, #12
 801be1e:	46bd      	mov	sp, r7
 801be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be24:	4770      	bx	lr

0801be26 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801be26:	b580      	push	{r7, lr}
 801be28:	b082      	sub	sp, #8
 801be2a:	af00      	add	r7, sp, #0
 801be2c:	6078      	str	r0, [r7, #4]
 801be2e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	3328      	adds	r3, #40	; 0x28
 801be34:	4619      	mov	r1, r3
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7ef f946 	bl	800b0c8 <_ZN14MockNamedValueC1ERKS_>
}
 801be3c:	6878      	ldr	r0, [r7, #4]
 801be3e:	3708      	adds	r7, #8
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}

0801be44 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801be44:	b480      	push	{r7}
 801be46:	b085      	sub	sp, #20
 801be48:	af00      	add	r7, sp, #0
 801be4a:	60f8      	str	r0, [r7, #12]
 801be4c:	60b9      	str	r1, [r7, #8]
 801be4e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	68ba      	ldr	r2, [r7, #8]
 801be54:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	687a      	ldr	r2, [r7, #4]
 801be5a:	615a      	str	r2, [r3, #20]
    return *this;
 801be5c:	68fb      	ldr	r3, [r7, #12]
}
 801be5e:	4618      	mov	r0, r3
 801be60:	3714      	adds	r7, #20
 801be62:	46bd      	mov	sp, r7
 801be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be68:	4770      	bx	lr

0801be6a <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801be6a:	b480      	push	{r7}
 801be6c:	b083      	sub	sp, #12
 801be6e:	af00      	add	r7, sp, #0
 801be70:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	7e1b      	ldrb	r3, [r3, #24]
}
 801be76:	4618      	mov	r0, r3
 801be78:	370c      	adds	r7, #12
 801be7a:	46bd      	mov	sp, r7
 801be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be80:	4770      	bx	lr

0801be82 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801be82:	b480      	push	{r7}
 801be84:	b083      	sub	sp, #12
 801be86:	af00      	add	r7, sp, #0
 801be88:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801be8e:	4618      	mov	r0, r3
 801be90:	370c      	adds	r7, #12
 801be92:	46bd      	mov	sp, r7
 801be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be98:	4770      	bx	lr
	...

0801be9c <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b082      	sub	sp, #8
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	4618      	mov	r0, r3
 801bea8:	f7fe fcce 	bl	801a848 <_ZN16MockExpectedCallC1Ev>
 801beac:	4a03      	ldr	r2, [pc, #12]	; (801bebc <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	601a      	str	r2, [r3, #0]
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	4618      	mov	r0, r3
 801beb6:	3708      	adds	r7, #8
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd80      	pop	{r7, pc}
 801bebc:	080293b4 	.word	0x080293b4

0801bec0 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801bec0:	b580      	push	{r7, lr}
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	4801      	ldr	r0, [pc, #4]	; (801becc <__tcf_0+0xc>)
 801bec6:	f000 f831 	bl	801bf2c <_ZN23MockIgnoredExpectedCallD1Ev>
 801beca:	bd80      	pop	{r7, pc}
 801becc:	20000f1c 	.word	0x20000f1c

0801bed0 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801bed4:	4b12      	ldr	r3, [pc, #72]	; (801bf20 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bed6:	781b      	ldrb	r3, [r3, #0]
 801bed8:	f3bf 8f5b 	dmb	ish
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	f003 0301 	and.w	r3, r3, #1
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	bf0c      	ite	eq
 801bee6:	2301      	moveq	r3, #1
 801bee8:	2300      	movne	r3, #0
 801beea:	b2db      	uxtb	r3, r3
 801beec:	2b00      	cmp	r3, #0
 801beee:	d013      	beq.n	801bf18 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bef0:	480b      	ldr	r0, [pc, #44]	; (801bf20 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bef2:	f003 ff05 	bl	801fd00 <__cxa_guard_acquire>
 801bef6:	4603      	mov	r3, r0
 801bef8:	2b00      	cmp	r3, #0
 801befa:	bf14      	ite	ne
 801befc:	2301      	movne	r3, #1
 801befe:	2300      	moveq	r3, #0
 801bf00:	b2db      	uxtb	r3, r3
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d008      	beq.n	801bf18 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801bf06:	4807      	ldr	r0, [pc, #28]	; (801bf24 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801bf08:	f7ff ffc8 	bl	801be9c <_ZN23MockIgnoredExpectedCallC1Ev>
 801bf0c:	4804      	ldr	r0, [pc, #16]	; (801bf20 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801bf0e:	f003 ff03 	bl	801fd18 <__cxa_guard_release>
 801bf12:	4805      	ldr	r0, [pc, #20]	; (801bf28 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801bf14:	f003 ff27 	bl	801fd66 <atexit>
    return call;
 801bf18:	4b02      	ldr	r3, [pc, #8]	; (801bf24 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	bd80      	pop	{r7, pc}
 801bf1e:	bf00      	nop
 801bf20:	20000f20 	.word	0x20000f20
 801bf24:	20000f1c 	.word	0x20000f1c
 801bf28:	0801bec1 	.word	0x0801bec1

0801bf2c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b082      	sub	sp, #8
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]
 801bf34:	4a05      	ldr	r2, [pc, #20]	; (801bf4c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	601a      	str	r2, [r3, #0]
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	4618      	mov	r0, r3
 801bf3e:	f7fe fc93 	bl	801a868 <_ZN16MockExpectedCallD1Ev>
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	4618      	mov	r0, r3
 801bf46:	3708      	adds	r7, #8
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd80      	pop	{r7, pc}
 801bf4c:	080293b4 	.word	0x080293b4

0801bf50 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801bf50:	b580      	push	{r7, lr}
 801bf52:	b082      	sub	sp, #8
 801bf54:	af00      	add	r7, sp, #0
 801bf56:	6078      	str	r0, [r7, #4]
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7ff ffe7 	bl	801bf2c <_ZN23MockIgnoredExpectedCallD1Ev>
 801bf5e:	2104      	movs	r1, #4
 801bf60:	6878      	ldr	r0, [r7, #4]
 801bf62:	f7ee fc5d 	bl	800a820 <_ZdlPvj>
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3708      	adds	r7, #8
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}

0801bf70 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b082      	sub	sp, #8
 801bf74:	af00      	add	r7, sp, #0
 801bf76:	6078      	str	r0, [r7, #4]
 801bf78:	4a05      	ldr	r2, [pc, #20]	; (801bf90 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	601a      	str	r2, [r3, #0]
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	4618      	mov	r0, r3
 801bf82:	f001 fd4b 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	4618      	mov	r0, r3
 801bf8a:	3708      	adds	r7, #8
 801bf8c:	46bd      	mov	sp, r7
 801bf8e:	bd80      	pop	{r7, pc}
 801bf90:	08029554 	.word	0x08029554

0801bf94 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b082      	sub	sp, #8
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	6078      	str	r0, [r7, #4]
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f7ff ffe7 	bl	801bf70 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801bfa2:	2138      	movs	r1, #56	; 0x38
 801bfa4:	6878      	ldr	r0, [r7, #4]
 801bfa6:	f7ee fc3b 	bl	800a820 <_ZdlPvj>
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	4618      	mov	r0, r3
 801bfae:	3708      	adds	r7, #8
 801bfb0:	46bd      	mov	sp, r7
 801bfb2:	bd80      	pop	{r7, pc}

0801bfb4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801bfb4:	b480      	push	{r7}
 801bfb6:	b083      	sub	sp, #12
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
 801bfbc:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	683a      	ldr	r2, [r7, #0]
 801bfc2:	601a      	str	r2, [r3, #0]
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	605a      	str	r2, [r3, #4]
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	4618      	mov	r0, r3
 801bfce:	370c      	adds	r7, #12
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd6:	4770      	bx	lr

0801bfd8 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
 801bfe0:	4a06      	ldr	r2, [pc, #24]	; (801bffc <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	601a      	str	r2, [r3, #0]
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	605a      	str	r2, [r3, #4]
{
}
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	4618      	mov	r0, r3
 801bff0:	370c      	adds	r7, #12
 801bff2:	46bd      	mov	sp, r7
 801bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff8:	4770      	bx	lr
 801bffa:	bf00      	nop
 801bffc:	080296a8 	.word	0x080296a8

0801c000 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801c000:	b580      	push	{r7, lr}
 801c002:	b084      	sub	sp, #16
 801c004:	af00      	add	r7, sp, #0
 801c006:	6078      	str	r0, [r7, #4]
 801c008:	4a0d      	ldr	r2, [pc, #52]	; (801c040 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	685b      	ldr	r3, [r3, #4]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d00f      	beq.n	801c036 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	685b      	ldr	r3, [r3, #4]
 801c01a:	685b      	ldr	r3, [r3, #4]
 801c01c:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	685b      	ldr	r3, [r3, #4]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d003      	beq.n	801c02e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801c026:	2108      	movs	r1, #8
 801c028:	4618      	mov	r0, r3
 801c02a:	f7ee fbf9 	bl	800a820 <_ZdlPvj>
        head_ = next;
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	68fa      	ldr	r2, [r7, #12]
 801c032:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c034:	e7eb      	b.n	801c00e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	4618      	mov	r0, r3
 801c03a:	3710      	adds	r7, #16
 801c03c:	46bd      	mov	sp, r7
 801c03e:	bd80      	pop	{r7, pc}
 801c040:	080296a8 	.word	0x080296a8

0801c044 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801c044:	b580      	push	{r7, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	af00      	add	r7, sp, #0
 801c04a:	6078      	str	r0, [r7, #4]
}
 801c04c:	6878      	ldr	r0, [r7, #4]
 801c04e:	f7ff ffd7 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
 801c052:	2108      	movs	r1, #8
 801c054:	6878      	ldr	r0, [r7, #4]
 801c056:	f7ee fbe3 	bl	800a820 <_ZdlPvj>
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	4618      	mov	r0, r3
 801c05e:	3708      	adds	r7, #8
 801c060:	46bd      	mov	sp, r7
 801c062:	bd80      	pop	{r7, pc}

0801c064 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b084      	sub	sp, #16
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	60fb      	str	r3, [r7, #12]
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d011      	beq.n	801c09c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	681a      	ldr	r2, [r3, #0]
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	33d4      	adds	r3, #212	; 0xd4
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	4610      	mov	r0, r2
 801c088:	4798      	blx	r3
 801c08a:	4603      	mov	r3, r0
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d001      	beq.n	801c094 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801c090:	2301      	movs	r3, #1
 801c092:	e004      	b.n	801c09e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	685b      	ldr	r3, [r3, #4]
 801c098:	60fb      	str	r3, [r7, #12]
 801c09a:	e7ea      	b.n	801c072 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801c09c:	2300      	movs	r3, #0
}
 801c09e:	4618      	mov	r0, r3
 801c0a0:	3710      	adds	r7, #16
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	bd80      	pop	{r7, pc}

0801c0a6 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801c0a6:	b480      	push	{r7}
 801c0a8:	b085      	sub	sp, #20
 801c0aa:	af00      	add	r7, sp, #0
 801c0ac:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c0ae:	2300      	movs	r3, #0
 801c0b0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	685b      	ldr	r3, [r3, #4]
 801c0b6:	60bb      	str	r3, [r7, #8]
 801c0b8:	68bb      	ldr	r3, [r7, #8]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d006      	beq.n	801c0cc <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	3301      	adds	r3, #1
 801c0c2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	685b      	ldr	r3, [r3, #4]
 801c0c8:	60bb      	str	r3, [r7, #8]
 801c0ca:	e7f5      	b.n	801c0b8 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801c0cc:	68fb      	ldr	r3, [r7, #12]
}
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	3714      	adds	r7, #20
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d8:	4770      	bx	lr

0801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801c0da:	b480      	push	{r7}
 801c0dc:	b083      	sub	sp, #12
 801c0de:	af00      	add	r7, sp, #0
 801c0e0:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	685b      	ldr	r3, [r3, #4]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	bf0c      	ite	eq
 801c0ea:	2301      	moveq	r3, #1
 801c0ec:	2300      	movne	r3, #0
 801c0ee:	b2db      	uxtb	r3, r3
}
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	370c      	adds	r7, #12
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0fa:	4770      	bx	lr

0801c0fc <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801c0fc:	b580      	push	{r7, lr}
 801c0fe:	b084      	sub	sp, #16
 801c100:	af00      	add	r7, sp, #0
 801c102:	6078      	str	r0, [r7, #4]
 801c104:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801c106:	2300      	movs	r3, #0
 801c108:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	685b      	ldr	r3, [r3, #4]
 801c10e:	60bb      	str	r3, [r7, #8]
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	2b00      	cmp	r3, #0
 801c114:	d01d      	beq.n	801c152 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	681a      	ldr	r2, [r3, #0]
 801c11a:	68bb      	ldr	r3, [r7, #8]
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	33b8      	adds	r3, #184	; 0xb8
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	6839      	ldr	r1, [r7, #0]
 801c126:	4610      	mov	r0, r2
 801c128:	4798      	blx	r3
 801c12a:	4603      	mov	r3, r0
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d00c      	beq.n	801c14a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801c130:	68bb      	ldr	r3, [r7, #8]
 801c132:	681a      	ldr	r2, [r3, #0]
 801c134:	68bb      	ldr	r3, [r7, #8]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	33f8      	adds	r3, #248	; 0xf8
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	4610      	mov	r0, r2
 801c140:	4798      	blx	r3
 801c142:	4602      	mov	r2, r0
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	4413      	add	r3, r2
 801c148:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c14a:	68bb      	ldr	r3, [r7, #8]
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	60bb      	str	r3, [r7, #8]
 801c150:	e7de      	b.n	801c110 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801c152:	68fb      	ldr	r3, [r7, #12]
}
 801c154:	4618      	mov	r0, r3
 801c156:	3710      	adds	r7, #16
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}

0801c15c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b084      	sub	sp, #16
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c164:	2300      	movs	r3, #0
 801c166:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	60bb      	str	r3, [r7, #8]
 801c16e:	68bb      	ldr	r3, [r7, #8]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d015      	beq.n	801c1a0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801c174:	68bb      	ldr	r3, [r7, #8]
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	33c0      	adds	r3, #192	; 0xc0
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	4610      	mov	r0, r2
 801c184:	4798      	blx	r3
 801c186:	4603      	mov	r3, r0
 801c188:	f083 0301 	eor.w	r3, r3, #1
 801c18c:	b2db      	uxtb	r3, r3
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d002      	beq.n	801c198 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	3301      	adds	r3, #1
 801c196:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c198:	68bb      	ldr	r3, [r7, #8]
 801c19a:	685b      	ldr	r3, [r3, #4]
 801c19c:	60bb      	str	r3, [r7, #8]
 801c19e:	e7e6      	b.n	801c16e <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801c1a0:	68fb      	ldr	r3, [r7, #12]
}
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	3710      	adds	r7, #16
 801c1a6:	46bd      	mov	sp, r7
 801c1a8:	bd80      	pop	{r7, pc}

0801c1aa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801c1aa:	b580      	push	{r7, lr}
 801c1ac:	b084      	sub	sp, #16
 801c1ae:	af00      	add	r7, sp, #0
 801c1b0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	685b      	ldr	r3, [r3, #4]
 801c1b6:	60fb      	str	r3, [r7, #12]
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d011      	beq.n	801c1e2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	681a      	ldr	r2, [r3, #0]
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	33c8      	adds	r3, #200	; 0xc8
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	4610      	mov	r0, r2
 801c1ce:	4798      	blx	r3
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d001      	beq.n	801c1da <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801c1d6:	2301      	movs	r3, #1
 801c1d8:	e004      	b.n	801c1e4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	60fb      	str	r3, [r7, #12]
 801c1e0:	e7ea      	b.n	801c1b8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801c1e2:	2300      	movs	r3, #0
}
 801c1e4:	4618      	mov	r0, r3
 801c1e6:	3710      	adds	r7, #16
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	bd80      	pop	{r7, pc}

0801c1ec <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b084      	sub	sp, #16
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	685b      	ldr	r3, [r3, #4]
 801c1f8:	60fb      	str	r3, [r7, #12]
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d014      	beq.n	801c22a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	681a      	ldr	r2, [r3, #0]
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	681b      	ldr	r3, [r3, #0]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	33c0      	adds	r3, #192	; 0xc0
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	4610      	mov	r0, r2
 801c210:	4798      	blx	r3
 801c212:	4603      	mov	r3, r0
 801c214:	f083 0301 	eor.w	r3, r3, #1
 801c218:	b2db      	uxtb	r3, r3
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d001      	beq.n	801c222 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801c21e:	2301      	movs	r3, #1
 801c220:	e004      	b.n	801c22c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	685b      	ldr	r3, [r3, #4]
 801c226:	60fb      	str	r3, [r7, #12]
 801c228:	e7e7      	b.n	801c1fa <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801c22a:	2300      	movs	r3, #0
}
 801c22c:	4618      	mov	r0, r3
 801c22e:	3710      	adds	r7, #16
 801c230:	46bd      	mov	sp, r7
 801c232:	bd80      	pop	{r7, pc}

0801c234 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b084      	sub	sp, #16
 801c238:	af00      	add	r7, sp, #0
 801c23a:	6078      	str	r0, [r7, #4]
 801c23c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	685b      	ldr	r3, [r3, #4]
 801c242:	60fb      	str	r3, [r7, #12]
 801c244:	68fb      	ldr	r3, [r7, #12]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d012      	beq.n	801c270 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	681a      	ldr	r2, [r3, #0]
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	33b8      	adds	r3, #184	; 0xb8
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	6839      	ldr	r1, [r7, #0]
 801c25a:	4610      	mov	r0, r2
 801c25c:	4798      	blx	r3
 801c25e:	4603      	mov	r3, r0
 801c260:	2b00      	cmp	r3, #0
 801c262:	d001      	beq.n	801c268 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801c264:	2301      	movs	r3, #1
 801c266:	e004      	b.n	801c272 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	685b      	ldr	r3, [r3, #4]
 801c26c:	60fb      	str	r3, [r7, #12]
 801c26e:	e7e9      	b.n	801c244 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801c270:	2300      	movs	r3, #0
}
 801c272:	4618      	mov	r0, r3
 801c274:	3710      	adds	r7, #16
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}
	...

0801c27c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801c27c:	b590      	push	{r4, r7, lr}
 801c27e:	b085      	sub	sp, #20
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
 801c284:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801c286:	2273      	movs	r2, #115	; 0x73
 801c288:	4911      	ldr	r1, [pc, #68]	; (801c2d0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801c28a:	2008      	movs	r0, #8
 801c28c:	f7ee fab4 	bl	800a7f8 <_ZnwjPKci>
 801c290:	4604      	mov	r4, r0
 801c292:	6839      	ldr	r1, [r7, #0]
 801c294:	4620      	mov	r0, r4
 801c296:	f7ff fe8d 	bl	801bfb4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801c29a:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	d103      	bne.n	801c2ac <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	68ba      	ldr	r2, [r7, #8]
 801c2a8:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801c2aa:	e00d      	b.n	801c2c8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	685b      	ldr	r3, [r3, #4]
 801c2b0:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
 801c2b4:	685b      	ldr	r3, [r3, #4]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d003      	beq.n	801c2c2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	60fb      	str	r3, [r7, #12]
 801c2c0:	e7f7      	b.n	801c2b2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	68ba      	ldr	r2, [r7, #8]
 801c2c6:	605a      	str	r2, [r3, #4]
}
 801c2c8:	bf00      	nop
 801c2ca:	3714      	adds	r7, #20
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd90      	pop	{r4, r7, pc}
 801c2d0:	080265a8 	.word	0x080265a8

0801c2d4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b084      	sub	sp, #16
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
 801c2dc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	685b      	ldr	r3, [r3, #4]
 801c2e2:	60fb      	str	r3, [r7, #12]
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d018      	beq.n	801c31c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	681a      	ldr	r2, [r3, #0]
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	33c4      	adds	r3, #196	; 0xc4
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	4610      	mov	r0, r2
 801c2fa:	4798      	blx	r3
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d008      	beq.n	801c314 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	3330      	adds	r3, #48	; 0x30
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	68fa      	ldr	r2, [r7, #12]
 801c30c:	6812      	ldr	r2, [r2, #0]
 801c30e:	4611      	mov	r1, r2
 801c310:	6878      	ldr	r0, [r7, #4]
 801c312:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	685b      	ldr	r3, [r3, #4]
 801c318:	60fb      	str	r3, [r7, #12]
 801c31a:	e7e3      	b.n	801c2e4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801c31c:	bf00      	nop
 801c31e:	3710      	adds	r7, #16
 801c320:	46bd      	mov	sp, r7
 801c322:	bd80      	pop	{r7, pc}

0801c324 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801c324:	b580      	push	{r7, lr}
 801c326:	b086      	sub	sp, #24
 801c328:	af00      	add	r7, sp, #0
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	60b9      	str	r1, [r7, #8]
 801c32e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	685b      	ldr	r3, [r3, #4]
 801c334:	617b      	str	r3, [r7, #20]
 801c336:	697b      	ldr	r3, [r7, #20]
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d019      	beq.n	801c370 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801c33c:	697b      	ldr	r3, [r7, #20]
 801c33e:	681a      	ldr	r2, [r3, #0]
 801c340:	697b      	ldr	r3, [r7, #20]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	33b8      	adds	r3, #184	; 0xb8
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	68b9      	ldr	r1, [r7, #8]
 801c34c:	4610      	mov	r0, r2
 801c34e:	4798      	blx	r3
 801c350:	4603      	mov	r3, r0
 801c352:	2b00      	cmp	r3, #0
 801c354:	d008      	beq.n	801c368 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	3330      	adds	r3, #48	; 0x30
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	697a      	ldr	r2, [r7, #20]
 801c360:	6812      	ldr	r2, [r2, #0]
 801c362:	4611      	mov	r1, r2
 801c364:	68f8      	ldr	r0, [r7, #12]
 801c366:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c368:	697b      	ldr	r3, [r7, #20]
 801c36a:	685b      	ldr	r3, [r3, #4]
 801c36c:	617b      	str	r3, [r7, #20]
 801c36e:	e7e2      	b.n	801c336 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801c370:	bf00      	nop
 801c372:	3718      	adds	r7, #24
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}

0801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	b084      	sub	sp, #16
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
 801c380:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	685b      	ldr	r3, [r3, #4]
 801c386:	60fb      	str	r3, [r7, #12]
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d00c      	beq.n	801c3a8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	3330      	adds	r3, #48	; 0x30
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	68fa      	ldr	r2, [r7, #12]
 801c398:	6812      	ldr	r2, [r2, #0]
 801c39a:	4611      	mov	r1, r2
 801c39c:	6878      	ldr	r0, [r7, #4]
 801c39e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	685b      	ldr	r3, [r3, #4]
 801c3a4:	60fb      	str	r3, [r7, #12]
 801c3a6:	e7ef      	b.n	801c388 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801c3a8:	bf00      	nop
 801c3aa:	3710      	adds	r7, #16
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bd80      	pop	{r7, pc}

0801c3b0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b084      	sub	sp, #16
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	685b      	ldr	r3, [r3, #4]
 801c3be:	60fb      	str	r3, [r7, #12]
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d016      	beq.n	801c3f4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	681a      	ldr	r2, [r3, #0]
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	33b8      	adds	r3, #184	; 0xb8
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	6839      	ldr	r1, [r7, #0]
 801c3d6:	4610      	mov	r0, r2
 801c3d8:	4798      	blx	r3
 801c3da:	4603      	mov	r3, r0
 801c3dc:	f083 0301 	eor.w	r3, r3, #1
 801c3e0:	b2db      	uxtb	r3, r3
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d002      	beq.n	801c3ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	685b      	ldr	r3, [r3, #4]
 801c3f0:	60fb      	str	r3, [r7, #12]
 801c3f2:	e7e5      	b.n	801c3c0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	3388      	adds	r3, #136	; 0x88
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	6878      	ldr	r0, [r7, #4]
 801c3fe:	4798      	blx	r3
}
 801c400:	bf00      	nop
 801c402:	3710      	adds	r7, #16
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}

0801c408 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b084      	sub	sp, #16
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	60fb      	str	r3, [r7, #12]
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d015      	beq.n	801c448 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	681a      	ldr	r2, [r3, #0]
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	33d4      	adds	r3, #212	; 0xd4
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	4610      	mov	r0, r2
 801c42c:	4798      	blx	r3
 801c42e:	4603      	mov	r3, r0
 801c430:	f083 0301 	eor.w	r3, r3, #1
 801c434:	b2db      	uxtb	r3, r3
 801c436:	2b00      	cmp	r3, #0
 801c438:	d002      	beq.n	801c440 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	2200      	movs	r2, #0
 801c43e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	60fb      	str	r3, [r7, #12]
 801c446:	e7e6      	b.n	801c416 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	3388      	adds	r3, #136	; 0x88
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	4798      	blx	r3
}
 801c454:	bf00      	nop
 801c456:	3710      	adds	r7, #16
 801c458:	46bd      	mov	sp, r7
 801c45a:	bd80      	pop	{r7, pc}

0801c45c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	685b      	ldr	r3, [r3, #4]
 801c468:	60fb      	str	r3, [r7, #12]
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d01b      	beq.n	801c4a8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	33c8      	adds	r3, #200	; 0xc8
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	4610      	mov	r0, r2
 801c480:	4798      	blx	r3
 801c482:	4603      	mov	r3, r0
 801c484:	2b00      	cmp	r3, #0
 801c486:	d00b      	beq.n	801c4a0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	681a      	ldr	r2, [r3, #0]
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	33ec      	adds	r3, #236	; 0xec
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	4610      	mov	r0, r2
 801c498:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	2200      	movs	r2, #0
 801c49e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	685b      	ldr	r3, [r3, #4]
 801c4a4:	60fb      	str	r3, [r7, #12]
 801c4a6:	e7e0      	b.n	801c46a <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	3388      	adds	r3, #136	; 0x88
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	6878      	ldr	r0, [r7, #4]
 801c4b2:	4798      	blx	r3
}
 801c4b4:	bf00      	nop
 801c4b6:	3710      	adds	r7, #16
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	bd80      	pop	{r7, pc}

0801c4bc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b084      	sub	sp, #16
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
 801c4c4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	685b      	ldr	r3, [r3, #4]
 801c4ca:	60fb      	str	r3, [r7, #12]
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d016      	beq.n	801c500 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	681a      	ldr	r2, [r3, #0]
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	33a8      	adds	r3, #168	; 0xa8
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	6839      	ldr	r1, [r7, #0]
 801c4e2:	4610      	mov	r0, r2
 801c4e4:	4798      	blx	r3
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	f083 0301 	eor.w	r3, r3, #1
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d002      	beq.n	801c4f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	2200      	movs	r2, #0
 801c4f6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c4f8:	68fb      	ldr	r3, [r7, #12]
 801c4fa:	685b      	ldr	r3, [r3, #4]
 801c4fc:	60fb      	str	r3, [r7, #12]
 801c4fe:	e7e5      	b.n	801c4cc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	3388      	adds	r3, #136	; 0x88
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	6878      	ldr	r0, [r7, #4]
 801c50a:	4798      	blx	r3
}
 801c50c:	bf00      	nop
 801c50e:	3710      	adds	r7, #16
 801c510:	46bd      	mov	sp, r7
 801c512:	bd80      	pop	{r7, pc}

0801c514 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b084      	sub	sp, #16
 801c518:	af00      	add	r7, sp, #0
 801c51a:	6078      	str	r0, [r7, #4]
 801c51c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	60fb      	str	r3, [r7, #12]
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d016      	beq.n	801c558 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	681a      	ldr	r2, [r3, #0]
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	33b0      	adds	r3, #176	; 0xb0
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	6839      	ldr	r1, [r7, #0]
 801c53a:	4610      	mov	r0, r2
 801c53c:	4798      	blx	r3
 801c53e:	4603      	mov	r3, r0
 801c540:	f083 0301 	eor.w	r3, r3, #1
 801c544:	b2db      	uxtb	r3, r3
 801c546:	2b00      	cmp	r3, #0
 801c548:	d002      	beq.n	801c550 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	2200      	movs	r2, #0
 801c54e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	685b      	ldr	r3, [r3, #4]
 801c554:	60fb      	str	r3, [r7, #12]
 801c556:	e7e5      	b.n	801c524 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	3388      	adds	r3, #136	; 0x88
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	6878      	ldr	r0, [r7, #4]
 801c562:	4798      	blx	r3
}
 801c564:	bf00      	nop
 801c566:	3710      	adds	r7, #16
 801c568:	46bd      	mov	sp, r7
 801c56a:	bd80      	pop	{r7, pc}

0801c56c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b084      	sub	sp, #16
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	685b      	ldr	r3, [r3, #4]
 801c57a:	60fb      	str	r3, [r7, #12]
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d016      	beq.n	801c5b0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	681a      	ldr	r2, [r3, #0]
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	33ac      	adds	r3, #172	; 0xac
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	6839      	ldr	r1, [r7, #0]
 801c592:	4610      	mov	r0, r2
 801c594:	4798      	blx	r3
 801c596:	4603      	mov	r3, r0
 801c598:	f083 0301 	eor.w	r3, r3, #1
 801c59c:	b2db      	uxtb	r3, r3
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d002      	beq.n	801c5a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	685b      	ldr	r3, [r3, #4]
 801c5ac:	60fb      	str	r3, [r7, #12]
 801c5ae:	e7e5      	b.n	801c57c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	3388      	adds	r3, #136	; 0x88
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	6878      	ldr	r0, [r7, #4]
 801c5ba:	4798      	blx	r3
}
 801c5bc:	bf00      	nop
 801c5be:	3710      	adds	r7, #16
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}

0801c5c4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b084      	sub	sp, #16
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
 801c5cc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	685b      	ldr	r3, [r3, #4]
 801c5d2:	60fb      	str	r3, [r7, #12]
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d016      	beq.n	801c608 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	681a      	ldr	r2, [r3, #0]
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	33b4      	adds	r3, #180	; 0xb4
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	6839      	ldr	r1, [r7, #0]
 801c5ea:	4610      	mov	r0, r2
 801c5ec:	4798      	blx	r3
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	f083 0301 	eor.w	r3, r3, #1
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d002      	beq.n	801c600 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	685b      	ldr	r3, [r3, #4]
 801c604:	60fb      	str	r3, [r7, #12]
 801c606:	e7e5      	b.n	801c5d4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	3388      	adds	r3, #136	; 0x88
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	6878      	ldr	r0, [r7, #4]
 801c612:	4798      	blx	r3
}
 801c614:	bf00      	nop
 801c616:	3710      	adds	r7, #16
 801c618:	46bd      	mov	sp, r7
 801c61a:	bd80      	pop	{r7, pc}

0801c61c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b084      	sub	sp, #16
 801c620:	af00      	add	r7, sp, #0
 801c622:	6078      	str	r0, [r7, #4]
 801c624:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	685b      	ldr	r3, [r3, #4]
 801c62a:	60fb      	str	r3, [r7, #12]
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d016      	beq.n	801c660 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	681a      	ldr	r2, [r3, #0]
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	33bc      	adds	r3, #188	; 0xbc
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	6839      	ldr	r1, [r7, #0]
 801c642:	4610      	mov	r0, r2
 801c644:	4798      	blx	r3
 801c646:	4603      	mov	r3, r0
 801c648:	f083 0301 	eor.w	r3, r3, #1
 801c64c:	b2db      	uxtb	r3, r3
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d002      	beq.n	801c658 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	2200      	movs	r2, #0
 801c656:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	685b      	ldr	r3, [r3, #4]
 801c65c:	60fb      	str	r3, [r7, #12]
 801c65e:	e7e5      	b.n	801c62c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	3388      	adds	r3, #136	; 0x88
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	4798      	blx	r3
}
 801c66c:	bf00      	nop
 801c66e:	3710      	adds	r7, #16
 801c670:	46bd      	mov	sp, r7
 801c672:	bd80      	pop	{r7, pc}

0801c674 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801c674:	b580      	push	{r7, lr}
 801c676:	b084      	sub	sp, #16
 801c678:	af00      	add	r7, sp, #0
 801c67a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	685b      	ldr	r3, [r3, #4]
 801c680:	60fb      	str	r3, [r7, #12]
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	2b00      	cmp	r3, #0
 801c686:	d01d      	beq.n	801c6c4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c688:	68fb      	ldr	r3, [r7, #12]
 801c68a:	681a      	ldr	r2, [r3, #0]
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	33c8      	adds	r3, #200	; 0xc8
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	4610      	mov	r0, r2
 801c698:	4798      	blx	r3
 801c69a:	4603      	mov	r3, r0
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d00d      	beq.n	801c6bc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c6a6:	68fb      	ldr	r3, [r7, #12]
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	3388      	adds	r3, #136	; 0x88
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	6878      	ldr	r0, [r7, #4]
 801c6b6:	4798      	blx	r3
            return matchingCall;
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	e004      	b.n	801c6c6 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	685b      	ldr	r3, [r3, #4]
 801c6c0:	60fb      	str	r3, [r7, #12]
 801c6c2:	e7de      	b.n	801c682 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c6c4:	2300      	movs	r3, #0
}
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	3710      	adds	r7, #16
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}

0801c6ce <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801c6ce:	b580      	push	{r7, lr}
 801c6d0:	b084      	sub	sp, #16
 801c6d2:	af00      	add	r7, sp, #0
 801c6d4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	685b      	ldr	r3, [r3, #4]
 801c6da:	60fb      	str	r3, [r7, #12]
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d012      	beq.n	801c708 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	681a      	ldr	r2, [r3, #0]
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	33cc      	adds	r3, #204	; 0xcc
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	4610      	mov	r0, r2
 801c6f2:	4798      	blx	r3
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d002      	beq.n	801c700 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	e004      	b.n	801c70a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	685b      	ldr	r3, [r3, #4]
 801c704:	60fb      	str	r3, [r7, #12]
 801c706:	e7e9      	b.n	801c6dc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c708:	2300      	movs	r3, #0
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3710      	adds	r7, #16
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}

0801c712 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801c712:	b580      	push	{r7, lr}
 801c714:	b084      	sub	sp, #16
 801c716:	af00      	add	r7, sp, #0
 801c718:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	685b      	ldr	r3, [r3, #4]
 801c71e:	60fb      	str	r3, [r7, #12]
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d01d      	beq.n	801c762 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	681a      	ldr	r2, [r3, #0]
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	33cc      	adds	r3, #204	; 0xcc
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	4610      	mov	r0, r2
 801c736:	4798      	blx	r3
 801c738:	4603      	mov	r3, r0
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d00d      	beq.n	801c75a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801c744:	68fb      	ldr	r3, [r7, #12]
 801c746:	2200      	movs	r2, #0
 801c748:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	3388      	adds	r3, #136	; 0x88
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	4798      	blx	r3
            return matchingCall;
 801c756:	68bb      	ldr	r3, [r7, #8]
 801c758:	e004      	b.n	801c764 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	685b      	ldr	r3, [r3, #4]
 801c75e:	60fb      	str	r3, [r7, #12]
 801c760:	e7de      	b.n	801c720 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801c762:	2300      	movs	r3, #0
}
 801c764:	4618      	mov	r0, r3
 801c766:	3710      	adds	r7, #16
 801c768:	46bd      	mov	sp, r7
 801c76a:	bd80      	pop	{r7, pc}

0801c76c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b086      	sub	sp, #24
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801c774:	687b      	ldr	r3, [r7, #4]
 801c776:	685b      	ldr	r3, [r3, #4]
 801c778:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801c77a:	2300      	movs	r3, #0
 801c77c:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801c77e:	2300      	movs	r3, #0
 801c780:	60fb      	str	r3, [r7, #12]

    while (current) {
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	2b00      	cmp	r3, #0
 801c786:	d024      	beq.n	801c7d2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d11a      	bne.n	801c7c6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801c794:	693b      	ldr	r3, [r7, #16]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d106      	bne.n	801c7a8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801c79a:	697b      	ldr	r3, [r7, #20]
 801c79c:	685b      	ldr	r3, [r3, #4]
 801c79e:	617b      	str	r3, [r7, #20]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	697a      	ldr	r2, [r7, #20]
 801c7a4:	605a      	str	r2, [r3, #4]
 801c7a6:	e006      	b.n	801c7b6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801c7a8:	697b      	ldr	r3, [r7, #20]
 801c7aa:	685a      	ldr	r2, [r3, #4]
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	605a      	str	r2, [r3, #4]
 801c7b0:	693b      	ldr	r3, [r7, #16]
 801c7b2:	685b      	ldr	r3, [r3, #4]
 801c7b4:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d0e2      	beq.n	801c782 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801c7bc:	2108      	movs	r1, #8
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f7ee f82e 	bl	800a820 <_ZdlPvj>
 801c7c4:	e7dd      	b.n	801c782 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801c7c6:	697b      	ldr	r3, [r7, #20]
 801c7c8:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801c7ca:	697b      	ldr	r3, [r7, #20]
 801c7cc:	685b      	ldr	r3, [r3, #4]
 801c7ce:	617b      	str	r3, [r7, #20]
    while (current) {
 801c7d0:	e7d7      	b.n	801c782 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801c7d2:	bf00      	nop
 801c7d4:	3718      	adds	r7, #24
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	bd80      	pop	{r7, pc}

0801c7da <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801c7da:	b580      	push	{r7, lr}
 801c7dc:	b084      	sub	sp, #16
 801c7de:	af00      	add	r7, sp, #0
 801c7e0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	685b      	ldr	r3, [r3, #4]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d019      	beq.n	801c81e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	685b      	ldr	r3, [r3, #4]
 801c7ee:	685b      	ldr	r3, [r3, #4]
 801c7f0:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	685b      	ldr	r3, [r3, #4]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d004      	beq.n	801c806 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801c7fc:	681a      	ldr	r2, [r3, #0]
 801c7fe:	3204      	adds	r2, #4
 801c800:	6812      	ldr	r2, [r2, #0]
 801c802:	4618      	mov	r0, r3
 801c804:	4790      	blx	r2
        delete head_;
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	685b      	ldr	r3, [r3, #4]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d003      	beq.n	801c816 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801c80e:	2108      	movs	r1, #8
 801c810:	4618      	mov	r0, r3
 801c812:	f7ee f805 	bl	800a820 <_ZdlPvj>
        head_ = next;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	68fa      	ldr	r2, [r7, #12]
 801c81a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c81c:	e7e1      	b.n	801c7e2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801c81e:	bf00      	nop
 801c820:	3710      	adds	r7, #16
 801c822:	46bd      	mov	sp, r7
 801c824:	bd80      	pop	{r7, pc}

0801c826 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801c826:	b580      	push	{r7, lr}
 801c828:	b084      	sub	sp, #16
 801c82a:	af00      	add	r7, sp, #0
 801c82c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	685b      	ldr	r3, [r3, #4]
 801c832:	60fb      	str	r3, [r7, #12]
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	2b00      	cmp	r3, #0
 801c838:	d00c      	beq.n	801c854 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	681a      	ldr	r2, [r3, #0]
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	33ec      	adds	r3, #236	; 0xec
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	4610      	mov	r0, r2
 801c84a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	685b      	ldr	r3, [r3, #4]
 801c850:	60fb      	str	r3, [r7, #12]
 801c852:	e7ef      	b.n	801c834 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801c854:	bf00      	nop
 801c856:	3710      	adds	r7, #16
 801c858:	46bd      	mov	sp, r7
 801c85a:	bd80      	pop	{r7, pc}

0801c85c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b084      	sub	sp, #16
 801c860:	af00      	add	r7, sp, #0
 801c862:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	685b      	ldr	r3, [r3, #4]
 801c868:	60fb      	str	r3, [r7, #12]
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d00c      	beq.n	801c88a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	681a      	ldr	r2, [r3, #0]
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	33e8      	adds	r3, #232	; 0xe8
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	4610      	mov	r0, r2
 801c880:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	685b      	ldr	r3, [r3, #4]
 801c886:	60fb      	str	r3, [r7, #12]
 801c888:	e7ef      	b.n	801c86a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801c88a:	bf00      	nop
 801c88c:	3710      	adds	r7, #16
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}

0801c892 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801c892:	b580      	push	{r7, lr}
 801c894:	b084      	sub	sp, #16
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
 801c89a:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	685b      	ldr	r3, [r3, #4]
 801c8a0:	60fb      	str	r3, [r7, #12]
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d00d      	beq.n	801c8c4 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	681a      	ldr	r2, [r3, #0]
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	33dc      	adds	r3, #220	; 0xdc
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	6839      	ldr	r1, [r7, #0]
 801c8b8:	4610      	mov	r0, r2
 801c8ba:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	685b      	ldr	r3, [r3, #4]
 801c8c0:	60fb      	str	r3, [r7, #12]
 801c8c2:	e7ee      	b.n	801c8a2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801c8c4:	bf00      	nop
 801c8c6:	3710      	adds	r7, #16
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	bd80      	pop	{r7, pc}

0801c8cc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b084      	sub	sp, #16
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	685b      	ldr	r3, [r3, #4]
 801c8da:	60fb      	str	r3, [r7, #12]
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d00d      	beq.n	801c8fe <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	33e0      	adds	r3, #224	; 0xe0
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	6839      	ldr	r1, [r7, #0]
 801c8f2:	4610      	mov	r0, r2
 801c8f4:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	685b      	ldr	r3, [r3, #4]
 801c8fa:	60fb      	str	r3, [r7, #12]
 801c8fc:	e7ee      	b.n	801c8dc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801c8fe:	bf00      	nop
 801c900:	3710      	adds	r7, #16
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}
	...

0801c908 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801c908:	b590      	push	{r4, r7, lr}
 801c90a:	b087      	sub	sp, #28
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	60f8      	str	r0, [r7, #12]
 801c910:	60b9      	str	r1, [r7, #8]
 801c912:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801c914:	68b9      	ldr	r1, [r7, #8]
 801c916:	68f8      	ldr	r0, [r7, #12]
 801c918:	f7f0 fb85 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801c91c:	f107 0310 	add.w	r3, r7, #16
 801c920:	490f      	ldr	r1, [pc, #60]	; (801c960 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801c922:	4618      	mov	r0, r3
 801c924:	f7f0 fb2b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801c928:	f107 0310 	add.w	r3, r7, #16
 801c92c:	4619      	mov	r1, r3
 801c92e:	68f8      	ldr	r0, [r7, #12]
 801c930:	f7f0 fee9 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801c934:	4603      	mov	r3, r0
 801c936:	461c      	mov	r4, r3
 801c938:	f107 0310 	add.w	r3, r7, #16
 801c93c:	4618      	mov	r0, r3
 801c93e:	f7f0 fed6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801c942:	2c00      	cmp	r4, #0
 801c944:	d007      	beq.n	801c956 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801c946:	6879      	ldr	r1, [r7, #4]
 801c948:	68f8      	ldr	r0, [r7, #12]
 801c94a:	f7f0 ff4d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801c94e:	4905      	ldr	r1, [pc, #20]	; (801c964 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801c950:	68f8      	ldr	r0, [r7, #12]
 801c952:	f7f0 ff5b 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801c956:	bf00      	nop
}
 801c958:	68f8      	ldr	r0, [r7, #12]
 801c95a:	371c      	adds	r7, #28
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd90      	pop	{r4, r7, pc}
 801c960:	080265cc 	.word	0x080265cc
 801c964:	080265d0 	.word	0x080265d0

0801c968 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801c968:	b590      	push	{r4, r7, lr}
 801c96a:	b087      	sub	sp, #28
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	60f8      	str	r0, [r7, #12]
 801c970:	60b9      	str	r1, [r7, #8]
 801c972:	607a      	str	r2, [r7, #4]
 801c974:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801c976:	68b9      	ldr	r1, [r7, #8]
 801c978:	68f8      	ldr	r0, [r7, #12]
 801c97a:	f7f0 fb54 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801c97e:	f107 0310 	add.w	r3, r7, #16
 801c982:	4912      	ldr	r1, [pc, #72]	; (801c9cc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801c984:	4618      	mov	r0, r3
 801c986:	f7f0 fafa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801c98a:	f107 0310 	add.w	r3, r7, #16
 801c98e:	4619      	mov	r1, r3
 801c990:	68f8      	ldr	r0, [r7, #12]
 801c992:	f7f0 fefd 	bl	800d790 <_ZneRK12SimpleStringS1_>
 801c996:	4603      	mov	r3, r0
 801c998:	461c      	mov	r4, r3
 801c99a:	f107 0310 	add.w	r3, r7, #16
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7f0 fea5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801c9a4:	2c00      	cmp	r4, #0
 801c9a6:	d003      	beq.n	801c9b0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801c9a8:	4909      	ldr	r1, [pc, #36]	; (801c9d0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801c9aa:	68f8      	ldr	r0, [r7, #12]
 801c9ac:	f7f0 ff2e 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801c9b0:	6879      	ldr	r1, [r7, #4]
 801c9b2:	68f8      	ldr	r0, [r7, #12]
 801c9b4:	f7f0 ff18 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801c9b8:	6839      	ldr	r1, [r7, #0]
 801c9ba:	68f8      	ldr	r0, [r7, #12]
 801c9bc:	f7f0 ff14 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    return str;
 801c9c0:	bf00      	nop
}
 801c9c2:	68f8      	ldr	r0, [r7, #12]
 801c9c4:	371c      	adds	r7, #28
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	bd90      	pop	{r4, r7, pc}
 801c9ca:	bf00      	nop
 801c9cc:	080265cc 	.word	0x080265cc
 801c9d0:	080265d8 	.word	0x080265d8

0801c9d4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801c9d4:	b580      	push	{r7, lr}
 801c9d6:	b08c      	sub	sp, #48	; 0x30
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	60f8      	str	r0, [r7, #12]
 801c9dc:	60b9      	str	r1, [r7, #8]
 801c9de:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801c9e0:	f107 0314 	add.w	r3, r7, #20
 801c9e4:	4929      	ldr	r1, [pc, #164]	; (801ca8c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	f7f0 fac9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c9ec:	68bb      	ldr	r3, [r7, #8]
 801c9ee:	685b      	ldr	r3, [r3, #4]
 801c9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d038      	beq.n	801ca6a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9fa:	681a      	ldr	r2, [r3, #0]
 801c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	33c0      	adds	r3, #192	; 0xc0
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	4610      	mov	r0, r2
 801ca08:	4798      	blx	r3
 801ca0a:	4603      	mov	r3, r0
 801ca0c:	f083 0301 	eor.w	r3, r3, #1
 801ca10:	b2db      	uxtb	r3, r3
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d025      	beq.n	801ca62 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca18:	6819      	ldr	r1, [r3, #0]
 801ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	33f0      	adds	r3, #240	; 0xf0
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ca28:	4610      	mov	r0, r2
 801ca2a:	4798      	blx	r3
 801ca2c:	f107 001c 	add.w	r0, r7, #28
 801ca30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ca34:	f107 0114 	add.w	r1, r7, #20
 801ca38:	687a      	ldr	r2, [r7, #4]
 801ca3a:	f7ff ff95 	bl	801c968 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801ca3e:	f107 021c 	add.w	r2, r7, #28
 801ca42:	f107 0314 	add.w	r3, r7, #20
 801ca46:	4611      	mov	r1, r2
 801ca48:	4618      	mov	r0, r3
 801ca4a:	f7f0 fb04 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801ca4e:	f107 031c 	add.w	r3, r7, #28
 801ca52:	4618      	mov	r0, r3
 801ca54:	f7f0 fe4b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ca58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ca5c:	4618      	mov	r0, r3
 801ca5e:	f7f0 fe46 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ca62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca64:	685b      	ldr	r3, [r3, #4]
 801ca66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca68:	e7c3      	b.n	801c9f2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	f107 0114 	add.w	r1, r7, #20
 801ca70:	687a      	ldr	r2, [r7, #4]
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7ff ff48 	bl	801c908 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ca78:	f107 0314 	add.w	r3, r7, #20
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	f7f0 fe36 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ca82:	bf00      	nop
}
 801ca84:	68f8      	ldr	r0, [r7, #12]
 801ca86:	3730      	adds	r7, #48	; 0x30
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}
 801ca8c:	080265cc 	.word	0x080265cc

0801ca90 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b08c      	sub	sp, #48	; 0x30
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	60f8      	str	r0, [r7, #12]
 801ca98:	60b9      	str	r1, [r7, #8]
 801ca9a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801ca9c:	f107 0314 	add.w	r3, r7, #20
 801caa0:	4928      	ldr	r1, [pc, #160]	; (801cb44 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801caa2:	4618      	mov	r0, r3
 801caa4:	f7f0 fa6b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801caa8:	68bb      	ldr	r3, [r7, #8]
 801caaa:	685b      	ldr	r3, [r3, #4]
 801caac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d035      	beq.n	801cb20 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cab6:	681a      	ldr	r2, [r3, #0]
 801cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	33c0      	adds	r3, #192	; 0xc0
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	4610      	mov	r0, r2
 801cac4:	4798      	blx	r3
 801cac6:	4603      	mov	r3, r0
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d025      	beq.n	801cb18 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cace:	6819      	ldr	r1, [r3, #0]
 801cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	33f0      	adds	r3, #240	; 0xf0
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801cade:	4610      	mov	r0, r2
 801cae0:	4798      	blx	r3
 801cae2:	f107 001c 	add.w	r0, r7, #28
 801cae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801caea:	f107 0114 	add.w	r1, r7, #20
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	f7ff ff3a 	bl	801c968 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801caf4:	f107 021c 	add.w	r2, r7, #28
 801caf8:	f107 0314 	add.w	r3, r7, #20
 801cafc:	4611      	mov	r1, r2
 801cafe:	4618      	mov	r0, r3
 801cb00:	f7f0 faa9 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801cb04:	f107 031c 	add.w	r3, r7, #28
 801cb08:	4618      	mov	r0, r3
 801cb0a:	f7f0 fdf0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cb0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7f0 fdeb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb1a:	685b      	ldr	r3, [r3, #4]
 801cb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cb1e:	e7c6      	b.n	801caae <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	f107 0114 	add.w	r1, r7, #20
 801cb26:	687a      	ldr	r2, [r7, #4]
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f7ff feed 	bl	801c908 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801cb2e:	f107 0314 	add.w	r3, r7, #20
 801cb32:	4618      	mov	r0, r3
 801cb34:	f7f0 fddb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801cb38:	bf00      	nop
}
 801cb3a:	68f8      	ldr	r0, [r7, #12]
 801cb3c:	3730      	adds	r7, #48	; 0x30
 801cb3e:	46bd      	mov	sp, r7
 801cb40:	bd80      	pop	{r7, pc}
 801cb42:	bf00      	nop
 801cb44:	080265cc 	.word	0x080265cc

0801cb48 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b08e      	sub	sp, #56	; 0x38
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
 801cb50:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801cb52:	f107 030c 	add.w	r3, r7, #12
 801cb56:	4936      	ldr	r1, [pc, #216]	; (801cc30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f7f0 fa10 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	685b      	ldr	r3, [r3, #4]
 801cb62:	637b      	str	r3, [r7, #52]	; 0x34
 801cb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d044      	beq.n	801cbf4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801cb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb6c:	681a      	ldr	r2, [r3, #0]
 801cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	33cc      	adds	r3, #204	; 0xcc
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	4610      	mov	r0, r2
 801cb7a:	4798      	blx	r3
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	f083 0301 	eor.w	r3, r3, #1
 801cb82:	b2db      	uxtb	r3, r3
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d031      	beq.n	801cbec <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801cb88:	f107 031c 	add.w	r3, r7, #28
 801cb8c:	4928      	ldr	r1, [pc, #160]	; (801cc30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801cb8e:	4618      	mov	r0, r3
 801cb90:	f7f0 f9f5 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801cb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb96:	6819      	ldr	r1, [r3, #0]
 801cb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	33f4      	adds	r3, #244	; 0xf4
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801cba6:	4610      	mov	r0, r2
 801cba8:	4798      	blx	r3
 801cbaa:	f107 0014 	add.w	r0, r7, #20
 801cbae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cbb2:	f107 021c 	add.w	r2, r7, #28
 801cbb6:	f107 010c 	add.w	r1, r7, #12
 801cbba:	f7ff fed5 	bl	801c968 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801cbbe:	f107 0214 	add.w	r2, r7, #20
 801cbc2:	f107 030c 	add.w	r3, r7, #12
 801cbc6:	4611      	mov	r1, r2
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7f0 fa44 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801cbce:	f107 0314 	add.w	r3, r7, #20
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7f0 fd8b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cbd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f7f0 fd86 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cbe2:	f107 031c 	add.w	r3, r7, #28
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7f0 fd81 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cbee:	685b      	ldr	r3, [r3, #4]
 801cbf0:	637b      	str	r3, [r7, #52]	; 0x34
 801cbf2:	e7b7      	b.n	801cb64 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801cbf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cbf8:	490d      	ldr	r1, [pc, #52]	; (801cc30 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7f0 f9bf 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801cc06:	f107 010c 	add.w	r1, r7, #12
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f7ff fe7c 	bl	801c908 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801cc10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cc14:	4618      	mov	r0, r3
 801cc16:	f7f0 fd6a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801cc1a:	f107 030c 	add.w	r3, r7, #12
 801cc1e:	4618      	mov	r0, r3
 801cc20:	f7f0 fd65 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801cc24:	bf00      	nop
}
 801cc26:	6878      	ldr	r0, [r7, #4]
 801cc28:	3738      	adds	r7, #56	; 0x38
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	080265cc 	.word	0x080265cc

0801cc34 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b084      	sub	sp, #16
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	685b      	ldr	r3, [r3, #4]
 801cc40:	60fb      	str	r3, [r7, #12]
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d014      	beq.n	801cc72 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681a      	ldr	r2, [r3, #0]
 801cc4c:	68fb      	ldr	r3, [r7, #12]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	33d0      	adds	r3, #208	; 0xd0
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	4610      	mov	r0, r2
 801cc58:	4798      	blx	r3
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	f083 0301 	eor.w	r3, r3, #1
 801cc60:	b2db      	uxtb	r3, r3
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d001      	beq.n	801cc6a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801cc66:	2301      	movs	r3, #1
 801cc68:	e004      	b.n	801cc74 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	685b      	ldr	r3, [r3, #4]
 801cc6e:	60fb      	str	r3, [r7, #12]
 801cc70:	e7e7      	b.n	801cc42 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801cc72:	2300      	movs	r3, #0
}
 801cc74:	4618      	mov	r0, r3
 801cc76:	3710      	adds	r7, #16
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd80      	pop	{r7, pc}

0801cc7c <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801cc7c:	b480      	push	{r7}
 801cc7e:	b083      	sub	sp, #12
 801cc80:	af00      	add	r7, sp, #0
 801cc82:	6078      	str	r0, [r7, #4]
 801cc84:	460b      	mov	r3, r1
 801cc86:	70fb      	strb	r3, [r7, #3]
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	78fa      	ldrb	r2, [r7, #3]
 801cc8c:	711a      	strb	r2, [r3, #4]
 801cc8e:	bf00      	nop
 801cc90:	370c      	adds	r7, #12
 801cc92:	46bd      	mov	sp, r7
 801cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc98:	4770      	bx	lr
	...

0801cc9c <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
 801cca4:	460b      	mov	r3, r1
 801cca6:	70fb      	strb	r3, [r7, #3]
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	4618      	mov	r0, r3
 801ccac:	f7ed ff6a 	bl	800ab84 <_ZN14TestTerminatorC1Ev>
 801ccb0:	4a05      	ldr	r2, [pc, #20]	; (801ccc8 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	601a      	str	r2, [r3, #0]
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	78fa      	ldrb	r2, [r7, #3]
 801ccba:	711a      	strb	r2, [r3, #4]
    {
    }
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	3708      	adds	r7, #8
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bd80      	pop	{r7, pc}
 801ccc6:	bf00      	nop
 801ccc8:	0802973c 	.word	0x0802973c

0801cccc <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b082      	sub	sp, #8
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	791b      	ldrb	r3, [r3, #4]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d001      	beq.n	801cce0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801ccdc:	f7f6 f9fe 	bl	80130dc <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801cce0:	f7f7 fd40 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cce4:	4603      	mov	r3, r0
 801cce6:	681a      	ldr	r2, [r3, #0]
 801cce8:	6812      	ldr	r2, [r2, #0]
 801ccea:	4618      	mov	r0, r3
 801ccec:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801ccee:	bf00      	nop
 801ccf0:	3708      	adds	r7, #8
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	bd80      	pop	{r7, pc}
	...

0801ccf8 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b082      	sub	sp, #8
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
    {
 801cd00:	4a05      	ldr	r2, [pc, #20]	; (801cd18 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	601a      	str	r2, [r3, #0]
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	4618      	mov	r0, r3
 801cd0a:	f7f7 fdbb 	bl	8014884 <_ZN14TestTerminatorD1Ev>
    }
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	4618      	mov	r0, r3
 801cd12:	3708      	adds	r7, #8
 801cd14:	46bd      	mov	sp, r7
 801cd16:	bd80      	pop	{r7, pc}
 801cd18:	0802973c 	.word	0x0802973c

0801cd1c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b082      	sub	sp, #8
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
    }
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	f7ff ffe7 	bl	801ccf8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801cd2a:	2108      	movs	r1, #8
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	f7ed fd77 	bl	800a820 <_ZdlPvj>
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	4618      	mov	r0, r3
 801cd36:	3708      	adds	r7, #8
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	bd80      	pop	{r7, pc}

0801cd3c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801cd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd3e:	b085      	sub	sp, #20
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	6078      	str	r0, [r7, #4]
 801cd44:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	330c      	adds	r3, #12
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	6878      	ldr	r0, [r7, #4]
 801cd50:	4798      	blx	r3
 801cd52:	4603      	mov	r3, r0
 801cd54:	681a      	ldr	r2, [r3, #0]
 801cd56:	321c      	adds	r2, #28
 801cd58:	6812      	ldr	r2, [r2, #0]
 801cd5a:	4618      	mov	r0, r3
 801cd5c:	4790      	blx	r2
 801cd5e:	4603      	mov	r3, r0
 801cd60:	f083 0301 	eor.w	r3, r3, #1
 801cd64:	b2db      	uxtb	r3, r3
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d01d      	beq.n	801cda6 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	330c      	adds	r3, #12
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	6878      	ldr	r0, [r7, #4]
 801cd74:	4798      	blx	r3
 801cd76:	4604      	mov	r4, r0
 801cd78:	6823      	ldr	r3, [r4, #0]
 801cd7a:	339c      	adds	r3, #156	; 0x9c
 801cd7c:	681d      	ldr	r5, [r3, #0]
 801cd7e:	683e      	ldr	r6, [r7, #0]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	791a      	ldrb	r2, [r3, #4]
 801cd84:	f107 0308 	add.w	r3, r7, #8
 801cd88:	4611      	mov	r1, r2
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7ff ff86 	bl	801cc9c <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801cd90:	f107 0308 	add.w	r3, r7, #8
 801cd94:	461a      	mov	r2, r3
 801cd96:	4631      	mov	r1, r6
 801cd98:	4620      	mov	r0, r4
 801cd9a:	47a8      	blx	r5
 801cd9c:	f107 0308 	add.w	r3, r7, #8
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7ff ffa9 	bl	801ccf8 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801cda6:	bf00      	nop
 801cda8:	3714      	adds	r7, #20
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cdae <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801cdae:	b580      	push	{r7, lr}
 801cdb0:	b082      	sub	sp, #8
 801cdb2:	af00      	add	r7, sp, #0
 801cdb4:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801cdb6:	f7f7 fcc5 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801cdba:	4603      	mov	r3, r0
}
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	3708      	adds	r7, #8
 801cdc0:	46bd      	mov	sp, r7
 801cdc2:	bd80      	pop	{r7, pc}

0801cdc4 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801cdc4:	b590      	push	{r4, r7, lr}
 801cdc6:	b085      	sub	sp, #20
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	6078      	str	r0, [r7, #4]
 801cdcc:	6039      	str	r1, [r7, #0]
 801cdce:	687c      	ldr	r4, [r7, #4]
 801cdd0:	f107 0308 	add.w	r3, r7, #8
 801cdd4:	490b      	ldr	r1, [pc, #44]	; (801ce04 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801cdd6:	4618      	mov	r0, r3
 801cdd8:	f7f0 f8d1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801cddc:	f107 0308 	add.w	r3, r7, #8
 801cde0:	461a      	mov	r2, r3
 801cde2:	6839      	ldr	r1, [r7, #0]
 801cde4:	4620      	mov	r0, r4
 801cde6:	f7f1 ff29 	bl	800ec3c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801cdea:	f107 0308 	add.w	r3, r7, #8
 801cdee:	4618      	mov	r0, r3
 801cdf0:	f7f0 fc7d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cdf4:	4a04      	ldr	r2, [pc, #16]	; (801ce08 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	601a      	str	r2, [r3, #0]
{
}
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	3714      	adds	r7, #20
 801ce00:	46bd      	mov	sp, r7
 801ce02:	bd90      	pop	{r4, r7, pc}
 801ce04:	080265dc 	.word	0x080265dc
 801ce08:	080286c8 	.word	0x080286c8

0801ce0c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801ce0c:	b5b0      	push	{r4, r5, r7, lr}
 801ce0e:	b08a      	sub	sp, #40	; 0x28
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	6078      	str	r0, [r7, #4]
 801ce14:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	332c      	adds	r3, #44	; 0x2c
 801ce1a:	492b      	ldr	r1, [pc, #172]	; (801cec8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f7f0 fcf5 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ce28:	683b      	ldr	r3, [r7, #0]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	337c      	adds	r3, #124	; 0x7c
 801ce2e:	681c      	ldr	r4, [r3, #0]
 801ce30:	f107 0310 	add.w	r3, r7, #16
 801ce34:	4925      	ldr	r1, [pc, #148]	; (801cecc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ce36:	4618      	mov	r0, r3
 801ce38:	f7f0 f8a1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ce3c:	f107 0308 	add.w	r3, r7, #8
 801ce40:	f107 0210 	add.w	r2, r7, #16
 801ce44:	6839      	ldr	r1, [r7, #0]
 801ce46:	4618      	mov	r0, r3
 801ce48:	47a0      	blx	r4
 801ce4a:	f107 0308 	add.w	r3, r7, #8
 801ce4e:	4619      	mov	r1, r3
 801ce50:	4628      	mov	r0, r5
 801ce52:	f7f0 fcc9 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801ce56:	f107 0308 	add.w	r3, r7, #8
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	f7f0 fc47 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ce60:	f107 0310 	add.w	r3, r7, #16
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7f0 fc42 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	332c      	adds	r3, #44	; 0x2c
 801ce6e:	4918      	ldr	r1, [pc, #96]	; (801ced0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7f0 fccb 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	3380      	adds	r3, #128	; 0x80
 801ce82:	681c      	ldr	r4, [r3, #0]
 801ce84:	f107 0320 	add.w	r3, r7, #32
 801ce88:	4910      	ldr	r1, [pc, #64]	; (801cecc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f7f0 f877 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ce90:	f107 0318 	add.w	r3, r7, #24
 801ce94:	f107 0220 	add.w	r2, r7, #32
 801ce98:	6839      	ldr	r1, [r7, #0]
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	47a0      	blx	r4
 801ce9e:	f107 0318 	add.w	r3, r7, #24
 801cea2:	4619      	mov	r1, r3
 801cea4:	4628      	mov	r0, r5
 801cea6:	f7f0 fc9f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801ceaa:	f107 0318 	add.w	r3, r7, #24
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f7f0 fc1d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ceb4:	f107 0320 	add.w	r3, r7, #32
 801ceb8:	4618      	mov	r0, r3
 801ceba:	f7f0 fc18 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801cebe:	bf00      	nop
 801cec0:	3728      	adds	r7, #40	; 0x28
 801cec2:	46bd      	mov	sp, r7
 801cec4:	bdb0      	pop	{r4, r5, r7, pc}
 801cec6:	bf00      	nop
 801cec8:	0802662c 	.word	0x0802662c
 801cecc:	08026658 	.word	0x08026658
 801ced0:	0802665c 	.word	0x0802665c

0801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801ced4:	b590      	push	{r4, r7, lr}
 801ced6:	b08f      	sub	sp, #60	; 0x3c
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	60f8      	str	r0, [r7, #12]
 801cedc:	60b9      	str	r1, [r7, #8]
 801cede:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801cee0:	f107 0310 	add.w	r3, r7, #16
 801cee4:	4618      	mov	r0, r3
 801cee6:	f7ff f877 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801ceea:	f107 0310 	add.w	r3, r7, #16
 801ceee:	687a      	ldr	r2, [r7, #4]
 801cef0:	68b9      	ldr	r1, [r7, #8]
 801cef2:	4618      	mov	r0, r3
 801cef4:	f7ff fa16 	bl	801c324 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	332c      	adds	r3, #44	; 0x2c
 801cefc:	4937      	ldr	r1, [pc, #220]	; (801cfdc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801cefe:	4618      	mov	r0, r3
 801cf00:	f7f0 fc84 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	332c      	adds	r3, #44	; 0x2c
 801cf08:	68b9      	ldr	r1, [r7, #8]
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7f0 fc6c 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	332c      	adds	r3, #44	; 0x2c
 801cf14:	4932      	ldr	r1, [pc, #200]	; (801cfe0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7f0 fc78 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf22:	f107 0320 	add.w	r3, r7, #32
 801cf26:	492f      	ldr	r1, [pc, #188]	; (801cfe4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f7f0 f828 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801cf2e:	f107 0318 	add.w	r3, r7, #24
 801cf32:	f107 0220 	add.w	r2, r7, #32
 801cf36:	f107 0110 	add.w	r1, r7, #16
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7ff fd4a 	bl	801c9d4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801cf40:	f107 0318 	add.w	r3, r7, #24
 801cf44:	4619      	mov	r1, r3
 801cf46:	4620      	mov	r0, r4
 801cf48:	f7f0 fc4e 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801cf4c:	f107 0318 	add.w	r3, r7, #24
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7f0 fbcc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cf56:	f107 0320 	add.w	r3, r7, #32
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	f7f0 fbc7 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	332c      	adds	r3, #44	; 0x2c
 801cf64:	4920      	ldr	r1, [pc, #128]	; (801cfe8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801cf66:	4618      	mov	r0, r3
 801cf68:	f7f0 fc50 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	332c      	adds	r3, #44	; 0x2c
 801cf70:	68b9      	ldr	r1, [r7, #8]
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7f0 fc38 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	332c      	adds	r3, #44	; 0x2c
 801cf7c:	4918      	ldr	r1, [pc, #96]	; (801cfe0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801cf7e:	4618      	mov	r0, r3
 801cf80:	f7f0 fc44 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801cf8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf8e:	4915      	ldr	r1, [pc, #84]	; (801cfe4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801cf90:	4618      	mov	r0, r3
 801cf92:	f7ef fff4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801cf96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801cf9e:	f107 0110 	add.w	r1, r7, #16
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	f7ff fd74 	bl	801ca90 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801cfa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cfac:	4619      	mov	r1, r3
 801cfae:	4620      	mov	r0, r4
 801cfb0:	f7f0 fc1a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801cfb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f7f0 fb98 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801cfbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f7f0 fb93 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801cfc8:	f107 0310 	add.w	r3, r7, #16
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f7ff f817 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 801cfd2:	bf00      	nop
 801cfd4:	373c      	adds	r7, #60	; 0x3c
 801cfd6:	46bd      	mov	sp, r7
 801cfd8:	bd90      	pop	{r4, r7, pc}
 801cfda:	bf00      	nop
 801cfdc:	08026684 	.word	0x08026684
 801cfe0:	080266c4 	.word	0x080266c4
 801cfe4:	08026658 	.word	0x08026658
 801cfe8:	080266c8 	.word	0x080266c8

0801cfec <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801cfec:	b590      	push	{r4, r7, lr}
 801cfee:	b087      	sub	sp, #28
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	60f8      	str	r0, [r7, #12]
 801cff4:	60b9      	str	r1, [r7, #8]
 801cff6:	607a      	str	r2, [r7, #4]
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	68b9      	ldr	r1, [r7, #8]
 801cffc:	4618      	mov	r0, r3
 801cffe:	f7ff fee1 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d002:	4a10      	ldr	r2, [pc, #64]	; (801d044 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d00e:	f107 0310 	add.w	r3, r7, #16
 801d012:	490d      	ldr	r1, [pc, #52]	; (801d048 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801d014:	4618      	mov	r0, r3
 801d016:	f7ef ffb2 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d01a:	f107 0310 	add.w	r3, r7, #16
 801d01e:	4619      	mov	r1, r3
 801d020:	4620      	mov	r0, r4
 801d022:	f7f0 f818 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d026:	f107 0310 	add.w	r3, r7, #16
 801d02a:	4618      	mov	r0, r3
 801d02c:	f7f0 fb5f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	6879      	ldr	r1, [r7, #4]
 801d034:	4618      	mov	r0, r3
 801d036:	f7ff fee9 	bl	801ce0c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	4618      	mov	r0, r3
 801d03e:	371c      	adds	r7, #28
 801d040:	46bd      	mov	sp, r7
 801d042:	bd90      	pop	{r4, r7, pc}
 801d044:	0802869c 	.word	0x0802869c
 801d048:	08026704 	.word	0x08026704

0801d04c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d04c:	b590      	push	{r4, r7, lr}
 801d04e:	b08d      	sub	sp, #52	; 0x34
 801d050:	af00      	add	r7, sp, #0
 801d052:	60f8      	str	r0, [r7, #12]
 801d054:	60b9      	str	r1, [r7, #8]
 801d056:	607a      	str	r2, [r7, #4]
 801d058:	603b      	str	r3, [r7, #0]
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	68b9      	ldr	r1, [r7, #8]
 801d05e:	4618      	mov	r0, r3
 801d060:	f7ff feb0 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d064:	4a2f      	ldr	r2, [pc, #188]	; (801d124 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801d06a:	683b      	ldr	r3, [r7, #0]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	3310      	adds	r3, #16
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	6879      	ldr	r1, [r7, #4]
 801d074:	6838      	ldr	r0, [r7, #0]
 801d076:	4798      	blx	r3
 801d078:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d027      	beq.n	801d0d0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d082:	1c5a      	adds	r2, r3, #1
 801d084:	f107 0314 	add.w	r3, r7, #20
 801d088:	4611      	mov	r1, r2
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f1 fa00 	bl	800e490 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d096:	f107 0314 	add.w	r3, r7, #20
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7f0 fafa 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801d0a0:	4602      	mov	r2, r0
 801d0a2:	f107 031c 	add.w	r3, r7, #28
 801d0a6:	4920      	ldr	r1, [pc, #128]	; (801d128 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	f7f1 f827 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801d0ae:	f107 031c 	add.w	r3, r7, #28
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7ef ffce 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d0ba:	f107 031c 	add.w	r3, r7, #28
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f7f0 fb15 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d0c4:	f107 0314 	add.w	r3, r7, #20
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7f0 fb10 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801d0ce:	e013      	b.n	801d0f8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801d0d0:	68fb      	ldr	r3, [r7, #12]
 801d0d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d0da:	4914      	ldr	r1, [pc, #80]	; (801d12c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f7ef ff4e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d0e6:	4619      	mov	r1, r3
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f7ef ffb4 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f7f0 fafb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801d0f8:	68fb      	ldr	r3, [r7, #12]
 801d0fa:	332c      	adds	r3, #44	; 0x2c
 801d0fc:	6879      	ldr	r1, [r7, #4]
 801d0fe:	4618      	mov	r0, r3
 801d100:	f7f0 fb72 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	332c      	adds	r3, #44	; 0x2c
 801d108:	4909      	ldr	r1, [pc, #36]	; (801d130 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7f0 fb7e 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	6839      	ldr	r1, [r7, #0]
 801d114:	4618      	mov	r0, r3
 801d116:	f7ff fe79 	bl	801ce0c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	4618      	mov	r0, r3
 801d11e:	3734      	adds	r7, #52	; 0x34
 801d120:	46bd      	mov	sp, r7
 801d122:	bd90      	pop	{r4, r7, pc}
 801d124:	0802903c 	.word	0x0802903c
 801d128:	08026734 	.word	0x08026734
 801d12c:	08026770 	.word	0x08026770
 801d130:	080266c4 	.word	0x080266c4

0801d134 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d134:	b590      	push	{r4, r7, lr}
 801d136:	b089      	sub	sp, #36	; 0x24
 801d138:	af00      	add	r7, sp, #0
 801d13a:	60f8      	str	r0, [r7, #12]
 801d13c:	60b9      	str	r1, [r7, #8]
 801d13e:	607a      	str	r2, [r7, #4]
 801d140:	68fb      	ldr	r3, [r7, #12]
 801d142:	68b9      	ldr	r1, [r7, #8]
 801d144:	4618      	mov	r0, r3
 801d146:	f7ff fe3d 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d14a:	4a1f      	ldr	r2, [pc, #124]	; (801d1c8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801d150:	f107 0310 	add.w	r3, r7, #16
 801d154:	4618      	mov	r0, r3
 801d156:	f7fe ff3f 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801d15a:	f107 0310 	add.w	r3, r7, #16
 801d15e:	6879      	ldr	r1, [r7, #4]
 801d160:	4618      	mov	r0, r3
 801d162:	f7ff f909 	bl	801c378 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801d166:	f107 0310 	add.w	r3, r7, #16
 801d16a:	4618      	mov	r0, r3
 801d16c:	f7ff f94c 	bl	801c408 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d176:	f107 0318 	add.w	r3, r7, #24
 801d17a:	4914      	ldr	r1, [pc, #80]	; (801d1cc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ef fefe 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d182:	f107 0318 	add.w	r3, r7, #24
 801d186:	4619      	mov	r1, r3
 801d188:	4620      	mov	r0, r4
 801d18a:	f7ef ff64 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d18e:	f107 0318 	add.w	r3, r7, #24
 801d192:	4618      	mov	r0, r3
 801d194:	f7f0 faab 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	332c      	adds	r3, #44	; 0x2c
 801d19c:	490c      	ldr	r1, [pc, #48]	; (801d1d0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801d19e:	4618      	mov	r0, r3
 801d1a0:	f7f0 fb34 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	f107 0210 	add.w	r2, r7, #16
 801d1aa:	4611      	mov	r1, r2
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	f7ff fe2d 	bl	801ce0c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801d1b2:	f107 0310 	add.w	r3, r7, #16
 801d1b6:	4618      	mov	r0, r3
 801d1b8:	f7fe ff22 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	4618      	mov	r0, r3
 801d1c0:	3724      	adds	r7, #36	; 0x24
 801d1c2:	46bd      	mov	sp, r7
 801d1c4:	bd90      	pop	{r4, r7, pc}
 801d1c6:	bf00      	nop
 801d1c8:	08028670 	.word	0x08028670
 801d1cc:	0802679c 	.word	0x0802679c
 801d1d0:	080266c4 	.word	0x080266c4

0801d1d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d1d4:	b590      	push	{r4, r7, lr}
 801d1d6:	b099      	sub	sp, #100	; 0x64
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	60f8      	str	r0, [r7, #12]
 801d1dc:	60b9      	str	r1, [r7, #8]
 801d1de:	607a      	str	r2, [r7, #4]
 801d1e0:	603b      	str	r3, [r7, #0]
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	68b9      	ldr	r1, [r7, #8]
 801d1e6:	4618      	mov	r0, r3
 801d1e8:	f7ff fdec 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d1ec:	4a9e      	ldr	r2, [pc, #632]	; (801d468 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d1f2:	f107 0310 	add.w	r3, r7, #16
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7fe feee 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d1fc:	f107 0310 	add.w	r3, r7, #16
 801d200:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d202:	6879      	ldr	r1, [r7, #4]
 801d204:	4618      	mov	r0, r3
 801d206:	f7ff f88d 	bl	801c324 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	335c      	adds	r3, #92	; 0x5c
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	f107 0218 	add.w	r2, r7, #24
 801d216:	6839      	ldr	r1, [r7, #0]
 801d218:	4610      	mov	r0, r2
 801d21a:	4798      	blx	r3
 801d21c:	f107 0218 	add.w	r2, r7, #24
 801d220:	f107 0310 	add.w	r3, r7, #16
 801d224:	4611      	mov	r1, r2
 801d226:	4618      	mov	r0, r3
 801d228:	f7ff f948 	bl	801c4bc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801d22c:	f107 0318 	add.w	r3, r7, #24
 801d230:	4618      	mov	r0, r3
 801d232:	f7f0 fa5c 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d236:	f107 0310 	add.w	r3, r7, #16
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7fe ff4d 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d240:	4603      	mov	r3, r0
 801d242:	2b00      	cmp	r3, #0
 801d244:	d037      	beq.n	801d2b6 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d24c:	f107 0320 	add.w	r3, r7, #32
 801d250:	4986      	ldr	r1, [pc, #536]	; (801d46c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801d252:	4618      	mov	r0, r3
 801d254:	f7ef fe93 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d258:	f107 0320 	add.w	r3, r7, #32
 801d25c:	4619      	mov	r1, r3
 801d25e:	4620      	mov	r0, r4
 801d260:	f7ef fef9 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d264:	f107 0320 	add.w	r3, r7, #32
 801d268:	4618      	mov	r0, r3
 801d26a:	f7f0 fa40 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	332c      	adds	r3, #44	; 0x2c
 801d272:	6879      	ldr	r1, [r7, #4]
 801d274:	4618      	mov	r0, r3
 801d276:	f7f0 fab7 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	332c      	adds	r3, #44	; 0x2c
 801d27e:	497c      	ldr	r1, [pc, #496]	; (801d470 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801d280:	4618      	mov	r0, r3
 801d282:	f7f0 fac3 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d28c:	683b      	ldr	r3, [r7, #0]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	335c      	adds	r3, #92	; 0x5c
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d298:	6839      	ldr	r1, [r7, #0]
 801d29a:	4610      	mov	r0, r2
 801d29c:	4798      	blx	r3
 801d29e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2a2:	4619      	mov	r1, r3
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	f7f0 fa9f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d2aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2ae:	4618      	mov	r0, r3
 801d2b0:	f7f0 fa1d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801d2b4:	e056      	b.n	801d364 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2c0:	496c      	ldr	r1, [pc, #432]	; (801d474 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801d2c2:	4618      	mov	r0, r3
 801d2c4:	f7ef fe5b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d2c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2cc:	4619      	mov	r1, r3
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	f7ef fec1 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d2d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f7f0 fa08 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	335c      	adds	r3, #92	; 0x5c
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d2f0:	6839      	ldr	r1, [r7, #0]
 801d2f2:	4610      	mov	r0, r2
 801d2f4:	4798      	blx	r3
 801d2f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d2fa:	4619      	mov	r1, r3
 801d2fc:	4620      	mov	r0, r4
 801d2fe:	f7f0 fa73 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d302:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d306:	4618      	mov	r0, r3
 801d308:	f7f0 f9f1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	332c      	adds	r3, #44	; 0x2c
 801d310:	4959      	ldr	r1, [pc, #356]	; (801d478 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801d312:	4618      	mov	r0, r3
 801d314:	f7f0 fa7a 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	332c      	adds	r3, #44	; 0x2c
 801d31c:	6879      	ldr	r1, [r7, #4]
 801d31e:	4618      	mov	r0, r3
 801d320:	f7f0 fa62 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	332c      	adds	r3, #44	; 0x2c
 801d328:	4954      	ldr	r1, [pc, #336]	; (801d47c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7f0 fa6e 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d336:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d33a:	6839      	ldr	r1, [r7, #0]
 801d33c:	4618      	mov	r0, r3
 801d33e:	f7fd faa3 	bl	801a888 <_Z10StringFromRK14MockNamedValue>
 801d342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d346:	4619      	mov	r1, r3
 801d348:	4620      	mov	r0, r4
 801d34a:	f7f0 fa4d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d34e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d352:	4618      	mov	r0, r3
 801d354:	f7f0 f9cb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	332c      	adds	r3, #44	; 0x2c
 801d35c:	4948      	ldr	r1, [pc, #288]	; (801d480 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d35e:	4618      	mov	r0, r3
 801d360:	f7f0 fa54 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	332c      	adds	r3, #44	; 0x2c
 801d368:	4946      	ldr	r1, [pc, #280]	; (801d484 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d36a:	4618      	mov	r0, r3
 801d36c:	f7f0 fa4e 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d374:	6879      	ldr	r1, [r7, #4]
 801d376:	4618      	mov	r0, r3
 801d378:	f7ff fdac 	bl	801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	332c      	adds	r3, #44	; 0x2c
 801d380:	4941      	ldr	r1, [pc, #260]	; (801d488 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801d382:	4618      	mov	r0, r3
 801d384:	f7f0 fa42 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	332c      	adds	r3, #44	; 0x2c
 801d38c:	6879      	ldr	r1, [r7, #4]
 801d38e:	4618      	mov	r0, r3
 801d390:	f7f0 fa2a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	332c      	adds	r3, #44	; 0x2c
 801d398:	493a      	ldr	r1, [pc, #232]	; (801d484 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801d39a:	4618      	mov	r0, r3
 801d39c:	f7f0 fa36 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	332c      	adds	r3, #44	; 0x2c
 801d3a4:	4939      	ldr	r1, [pc, #228]	; (801d48c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7f0 fa30 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d3b2:	683b      	ldr	r3, [r7, #0]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	3360      	adds	r3, #96	; 0x60
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d3be:	6839      	ldr	r1, [r7, #0]
 801d3c0:	4610      	mov	r0, r2
 801d3c2:	4798      	blx	r3
 801d3c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d3c8:	4619      	mov	r1, r3
 801d3ca:	4620      	mov	r0, r4
 801d3cc:	f7f0 fa0c 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d3d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	f7f0 f98a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	332c      	adds	r3, #44	; 0x2c
 801d3de:	492c      	ldr	r1, [pc, #176]	; (801d490 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	f7f0 fa13 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d3ec:	683b      	ldr	r3, [r7, #0]
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	335c      	adds	r3, #92	; 0x5c
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d3f8:	6839      	ldr	r1, [r7, #0]
 801d3fa:	4610      	mov	r0, r2
 801d3fc:	4798      	blx	r3
 801d3fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d402:	4619      	mov	r1, r3
 801d404:	4620      	mov	r0, r4
 801d406:	f7f0 f9ef 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d40a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d40e:	4618      	mov	r0, r3
 801d410:	f7f0 f96d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	332c      	adds	r3, #44	; 0x2c
 801d418:	491e      	ldr	r1, [pc, #120]	; (801d494 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801d41a:	4618      	mov	r0, r3
 801d41c:	f7f0 f9f6 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d42a:	6839      	ldr	r1, [r7, #0]
 801d42c:	4618      	mov	r0, r3
 801d42e:	f7fd fa2b 	bl	801a888 <_Z10StringFromRK14MockNamedValue>
 801d432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d436:	4619      	mov	r1, r3
 801d438:	4620      	mov	r0, r4
 801d43a:	f7f0 f9d5 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d43e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d442:	4618      	mov	r0, r3
 801d444:	f7f0 f953 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	332c      	adds	r3, #44	; 0x2c
 801d44c:	490c      	ldr	r1, [pc, #48]	; (801d480 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801d44e:	4618      	mov	r0, r3
 801d450:	f7f0 f9dc 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d454:	f107 0310 	add.w	r3, r7, #16
 801d458:	4618      	mov	r0, r3
 801d45a:	f7fe fdd1 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	4618      	mov	r0, r3
 801d462:	3764      	adds	r7, #100	; 0x64
 801d464:	46bd      	mov	sp, r7
 801d466:	bd90      	pop	{r4, r7, pc}
 801d468:	08029010 	.word	0x08029010
 801d46c:	080267c0 	.word	0x080267c0
 801d470:	080267f8 	.word	0x080267f8
 801d474:	080267fc 	.word	0x080267fc
 801d478:	08026834 	.word	0x08026834
 801d47c:	08026844 	.word	0x08026844
 801d480:	0802684c 	.word	0x0802684c
 801d484:	080266c4 	.word	0x080266c4
 801d488:	08026850 	.word	0x08026850
 801d48c:	08026658 	.word	0x08026658
 801d490:	08026884 	.word	0x08026884
 801d494:	08026888 	.word	0x08026888

0801d498 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d498:	b590      	push	{r4, r7, lr}
 801d49a:	b097      	sub	sp, #92	; 0x5c
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	60f8      	str	r0, [r7, #12]
 801d4a0:	60b9      	str	r1, [r7, #8]
 801d4a2:	607a      	str	r2, [r7, #4]
 801d4a4:	603b      	str	r3, [r7, #0]
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	68b9      	ldr	r1, [r7, #8]
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	f7ff fc8a 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d4b0:	4a90      	ldr	r2, [pc, #576]	; (801d6f4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d4b6:	f107 0310 	add.w	r3, r7, #16
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7fe fd8c 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d4c0:	f107 0310 	add.w	r3, r7, #16
 801d4c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d4c6:	6879      	ldr	r1, [r7, #4]
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f7fe ff2b 	bl	801c324 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801d4ce:	683b      	ldr	r3, [r7, #0]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	335c      	adds	r3, #92	; 0x5c
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	f107 0218 	add.w	r2, r7, #24
 801d4da:	6839      	ldr	r1, [r7, #0]
 801d4dc:	4610      	mov	r0, r2
 801d4de:	4798      	blx	r3
 801d4e0:	f107 0218 	add.w	r2, r7, #24
 801d4e4:	f107 0310 	add.w	r3, r7, #16
 801d4e8:	4611      	mov	r1, r2
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	f7ff f812 	bl	801c514 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801d4f0:	f107 0318 	add.w	r3, r7, #24
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	f7f0 f8fa 	bl	800d6ee <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d4fa:	f107 0310 	add.w	r3, r7, #16
 801d4fe:	4618      	mov	r0, r3
 801d500:	f7fe fdeb 	bl	801c0da <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d504:	4603      	mov	r3, r0
 801d506:	2b00      	cmp	r3, #0
 801d508:	d037      	beq.n	801d57a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d510:	f107 0320 	add.w	r3, r7, #32
 801d514:	4978      	ldr	r1, [pc, #480]	; (801d6f8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801d516:	4618      	mov	r0, r3
 801d518:	f7ef fd31 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d51c:	f107 0320 	add.w	r3, r7, #32
 801d520:	4619      	mov	r1, r3
 801d522:	4620      	mov	r0, r4
 801d524:	f7ef fd97 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d528:	f107 0320 	add.w	r3, r7, #32
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7f0 f8de 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	332c      	adds	r3, #44	; 0x2c
 801d536:	6879      	ldr	r1, [r7, #4]
 801d538:	4618      	mov	r0, r3
 801d53a:	f7f0 f955 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	332c      	adds	r3, #44	; 0x2c
 801d542:	496e      	ldr	r1, [pc, #440]	; (801d6fc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801d544:	4618      	mov	r0, r3
 801d546:	f7f0 f961 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d54a:	68fb      	ldr	r3, [r7, #12]
 801d54c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	335c      	adds	r3, #92	; 0x5c
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d55c:	6839      	ldr	r1, [r7, #0]
 801d55e:	4610      	mov	r0, r2
 801d560:	4798      	blx	r3
 801d562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d566:	4619      	mov	r1, r3
 801d568:	4620      	mov	r0, r4
 801d56a:	f7f0 f93d 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d56e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d572:	4618      	mov	r0, r3
 801d574:	f7f0 f8bb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801d578:	e059      	b.n	801d62e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d584:	495e      	ldr	r1, [pc, #376]	; (801d700 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801d586:	4618      	mov	r0, r3
 801d588:	f7ef fcf9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d58c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d590:	4619      	mov	r1, r3
 801d592:	4620      	mov	r0, r4
 801d594:	f7ef fd5f 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d59c:	4618      	mov	r0, r3
 801d59e:	f7f0 f8a6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5a8:	683b      	ldr	r3, [r7, #0]
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	3360      	adds	r3, #96	; 0x60
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d5b4:	6839      	ldr	r1, [r7, #0]
 801d5b6:	4610      	mov	r0, r2
 801d5b8:	4798      	blx	r3
 801d5ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d5be:	4619      	mov	r1, r3
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f7f0 f911 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d5c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7f0 f88f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	332c      	adds	r3, #44	; 0x2c
 801d5d4:	494b      	ldr	r1, [pc, #300]	; (801d704 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	f7f0 f918 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d5e2:	683b      	ldr	r3, [r7, #0]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	335c      	adds	r3, #92	; 0x5c
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801d5ee:	6839      	ldr	r1, [r7, #0]
 801d5f0:	4610      	mov	r0, r2
 801d5f2:	4798      	blx	r3
 801d5f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5f8:	4619      	mov	r1, r3
 801d5fa:	4620      	mov	r0, r4
 801d5fc:	f7f0 f8f4 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d604:	4618      	mov	r0, r3
 801d606:	f7f0 f872 	bl	800d6ee <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	332c      	adds	r3, #44	; 0x2c
 801d60e:	493e      	ldr	r1, [pc, #248]	; (801d708 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801d610:	4618      	mov	r0, r3
 801d612:	f7f0 f8fb 	bl	800d80c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	332c      	adds	r3, #44	; 0x2c
 801d61a:	6879      	ldr	r1, [r7, #4]
 801d61c:	4618      	mov	r0, r3
 801d61e:	f7f0 f8e3 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	332c      	adds	r3, #44	; 0x2c
 801d626:	4939      	ldr	r1, [pc, #228]	; (801d70c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801d628:	4618      	mov	r0, r3
 801d62a:	f7f0 f8ef 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	332c      	adds	r3, #44	; 0x2c
 801d632:	4937      	ldr	r1, [pc, #220]	; (801d710 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d634:	4618      	mov	r0, r3
 801d636:	f7f0 f8e9 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d63e:	6879      	ldr	r1, [r7, #4]
 801d640:	4618      	mov	r0, r3
 801d642:	f7ff fc47 	bl	801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	332c      	adds	r3, #44	; 0x2c
 801d64a:	4932      	ldr	r1, [pc, #200]	; (801d714 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801d64c:	4618      	mov	r0, r3
 801d64e:	f7f0 f8dd 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	332c      	adds	r3, #44	; 0x2c
 801d656:	6879      	ldr	r1, [r7, #4]
 801d658:	4618      	mov	r0, r3
 801d65a:	f7f0 f8c5 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	332c      	adds	r3, #44	; 0x2c
 801d662:	492b      	ldr	r1, [pc, #172]	; (801d710 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801d664:	4618      	mov	r0, r3
 801d666:	f7f0 f8d1 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	332c      	adds	r3, #44	; 0x2c
 801d66e:	492a      	ldr	r1, [pc, #168]	; (801d718 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801d670:	4618      	mov	r0, r3
 801d672:	f7f0 f8cb 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d67c:	683b      	ldr	r3, [r7, #0]
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	3360      	adds	r3, #96	; 0x60
 801d682:	681b      	ldr	r3, [r3, #0]
 801d684:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801d688:	6839      	ldr	r1, [r7, #0]
 801d68a:	4610      	mov	r0, r2
 801d68c:	4798      	blx	r3
 801d68e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d692:	4619      	mov	r1, r3
 801d694:	4620      	mov	r0, r4
 801d696:	f7f0 f8a7 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d69a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f7f0 f825 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	332c      	adds	r3, #44	; 0x2c
 801d6a8:	491c      	ldr	r1, [pc, #112]	; (801d71c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f7f0 f8ae 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d6b6:	683b      	ldr	r3, [r7, #0]
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	335c      	adds	r3, #92	; 0x5c
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801d6c2:	6839      	ldr	r1, [r7, #0]
 801d6c4:	4610      	mov	r0, r2
 801d6c6:	4798      	blx	r3
 801d6c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d6cc:	4619      	mov	r1, r3
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f7f0 f88a 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d6d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d6d8:	4618      	mov	r0, r3
 801d6da:	f7f0 f808 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d6de:	f107 0310 	add.w	r3, r7, #16
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f7fe fc8c 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	375c      	adds	r7, #92	; 0x5c
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd90      	pop	{r4, r7, pc}
 801d6f2:	bf00      	nop
 801d6f4:	08028fe4 	.word	0x08028fe4
 801d6f8:	0802688c 	.word	0x0802688c
 801d6fc:	080267f8 	.word	0x080267f8
 801d700:	080268cc 	.word	0x080268cc
 801d704:	080268f8 	.word	0x080268f8
 801d708:	08026834 	.word	0x08026834
 801d70c:	08026910 	.word	0x08026910
 801d710:	080266c4 	.word	0x080266c4
 801d714:	08026914 	.word	0x08026914
 801d718:	08026658 	.word	0x08026658
 801d71c:	08026884 	.word	0x08026884

0801d720 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d720:	b590      	push	{r4, r7, lr}
 801d722:	b08b      	sub	sp, #44	; 0x2c
 801d724:	af00      	add	r7, sp, #0
 801d726:	60f8      	str	r0, [r7, #12]
 801d728:	60b9      	str	r1, [r7, #8]
 801d72a:	607a      	str	r2, [r7, #4]
 801d72c:	603b      	str	r3, [r7, #0]
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	68b9      	ldr	r1, [r7, #8]
 801d732:	4618      	mov	r0, r3
 801d734:	f7ff fb46 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d738:	4a30      	ldr	r2, [pc, #192]	; (801d7fc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801d73e:	f107 0310 	add.w	r3, r7, #16
 801d742:	4618      	mov	r0, r3
 801d744:	f7fe fc48 	bl	801bfd8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801d748:	f107 0310 	add.w	r3, r7, #16
 801d74c:	683a      	ldr	r2, [r7, #0]
 801d74e:	6879      	ldr	r1, [r7, #4]
 801d750:	4618      	mov	r0, r3
 801d752:	f7fe fde7 	bl	801c324 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d75c:	f107 0318 	add.w	r3, r7, #24
 801d760:	4927      	ldr	r1, [pc, #156]	; (801d800 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d762:	4618      	mov	r0, r3
 801d764:	f7ef fc0b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d768:	f107 0318 	add.w	r3, r7, #24
 801d76c:	4619      	mov	r1, r3
 801d76e:	4620      	mov	r0, r4
 801d770:	f7ef fc71 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d774:	f107 0318 	add.w	r3, r7, #24
 801d778:	4618      	mov	r0, r3
 801d77a:	f7ef ffb8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	332c      	adds	r3, #44	; 0x2c
 801d782:	6879      	ldr	r1, [r7, #4]
 801d784:	4618      	mov	r0, r3
 801d786:	f7f0 f82f 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	332c      	adds	r3, #44	; 0x2c
 801d78e:	491d      	ldr	r1, [pc, #116]	; (801d804 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d790:	4618      	mov	r0, r3
 801d792:	f7f0 f83b 	bl	800d80c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	683a      	ldr	r2, [r7, #0]
 801d79a:	6879      	ldr	r1, [r7, #4]
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7ff fb99 	bl	801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	332c      	adds	r3, #44	; 0x2c
 801d7a6:	4918      	ldr	r1, [pc, #96]	; (801d808 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f7f0 f82f 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	332c      	adds	r3, #44	; 0x2c
 801d7b2:	4916      	ldr	r1, [pc, #88]	; (801d80c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801d7b4:	4618      	mov	r0, r3
 801d7b6:	f7f0 f829 	bl	800d80c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d7c0:	f107 0320 	add.w	r3, r7, #32
 801d7c4:	f107 0210 	add.w	r2, r7, #16
 801d7c8:	4611      	mov	r1, r2
 801d7ca:	4618      	mov	r0, r3
 801d7cc:	f7ff f9bc 	bl	801cb48 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801d7d0:	f107 0320 	add.w	r3, r7, #32
 801d7d4:	4619      	mov	r1, r3
 801d7d6:	4620      	mov	r0, r4
 801d7d8:	f7f0 f806 	bl	800d7e8 <_ZN12SimpleStringpLERKS_>
 801d7dc:	f107 0320 	add.w	r3, r7, #32
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	f7ef ff84 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d7e6:	f107 0310 	add.w	r3, r7, #16
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f7fe fc08 	bl	801c000 <_ZN21MockExpectedCallsListD1Ev>
}
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	372c      	adds	r7, #44	; 0x2c
 801d7f6:	46bd      	mov	sp, r7
 801d7f8:	bd90      	pop	{r4, r7, pc}
 801d7fa:	bf00      	nop
 801d7fc:	08028fb8 	.word	0x08028fb8
 801d800:	08026950 	.word	0x08026950
 801d804:	08026980 	.word	0x08026980
 801d808:	08026994 	.word	0x08026994
 801d80c:	08026658 	.word	0x08026658

0801d810 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d810:	b590      	push	{r4, r7, lr}
 801d812:	b087      	sub	sp, #28
 801d814:	af00      	add	r7, sp, #0
 801d816:	60f8      	str	r0, [r7, #12]
 801d818:	60b9      	str	r1, [r7, #8]
 801d81a:	607a      	str	r2, [r7, #4]
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	68b9      	ldr	r1, [r7, #8]
 801d820:	4618      	mov	r0, r3
 801d822:	f7ff facf 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d826:	4a10      	ldr	r2, [pc, #64]	; (801d868 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7ef ff2e 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801d838:	4602      	mov	r2, r0
 801d83a:	f107 0310 	add.w	r3, r7, #16
 801d83e:	490b      	ldr	r1, [pc, #44]	; (801d86c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d840:	4618      	mov	r0, r3
 801d842:	f7f0 fc5b 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801d846:	f107 0310 	add.w	r3, r7, #16
 801d84a:	4619      	mov	r1, r3
 801d84c:	4620      	mov	r0, r4
 801d84e:	f7ef fc02 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d852:	f107 0310 	add.w	r3, r7, #16
 801d856:	4618      	mov	r0, r3
 801d858:	f7ef ff49 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	4618      	mov	r0, r3
 801d860:	371c      	adds	r7, #28
 801d862:	46bd      	mov	sp, r7
 801d864:	bd90      	pop	{r4, r7, pc}
 801d866:	bf00      	nop
 801d868:	08028f8c 	.word	0x08028f8c
 801d86c:	080269c0 	.word	0x080269c0

0801d870 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801d870:	b590      	push	{r4, r7, lr}
 801d872:	b087      	sub	sp, #28
 801d874:	af00      	add	r7, sp, #0
 801d876:	60f8      	str	r0, [r7, #12]
 801d878:	60b9      	str	r1, [r7, #8]
 801d87a:	607a      	str	r2, [r7, #4]
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	68b9      	ldr	r1, [r7, #8]
 801d880:	4618      	mov	r0, r3
 801d882:	f7ff fa9f 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d886:	4a10      	ldr	r2, [pc, #64]	; (801d8c8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d892:	6878      	ldr	r0, [r7, #4]
 801d894:	f7ef fefe 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801d898:	4602      	mov	r2, r0
 801d89a:	f107 0310 	add.w	r3, r7, #16
 801d89e:	490b      	ldr	r1, [pc, #44]	; (801d8cc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	f7f0 fc2b 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801d8a6:	f107 0310 	add.w	r3, r7, #16
 801d8aa:	4619      	mov	r1, r3
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f7ef fbd2 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d8b2:	f107 0310 	add.w	r3, r7, #16
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f7ef ff19 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	4618      	mov	r0, r3
 801d8c0:	371c      	adds	r7, #28
 801d8c2:	46bd      	mov	sp, r7
 801d8c4:	bd90      	pop	{r4, r7, pc}
 801d8c6:	bf00      	nop
 801d8c8:	08028f60 	.word	0x08028f60
 801d8cc:	08026a18 	.word	0x08026a18

0801d8d0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d8d0:	b590      	push	{r4, r7, lr}
 801d8d2:	b087      	sub	sp, #28
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	60f8      	str	r0, [r7, #12]
 801d8d8:	60b9      	str	r1, [r7, #8]
 801d8da:	607a      	str	r2, [r7, #4]
 801d8dc:	603b      	str	r3, [r7, #0]
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	68b9      	ldr	r1, [r7, #8]
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f7ff fa6e 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d8e8:	4a12      	ldr	r2, [pc, #72]	; (801d934 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801d8f4:	6878      	ldr	r0, [r7, #4]
 801d8f6:	f7ef fecd 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801d8fa:	4602      	mov	r2, r0
 801d8fc:	f107 0010 	add.w	r0, r7, #16
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	490d      	ldr	r1, [pc, #52]	; (801d938 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801d904:	f7f0 fbfa 	bl	800e0fc <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801d908:	f107 0310 	add.w	r3, r7, #16
 801d90c:	4619      	mov	r1, r3
 801d90e:	4620      	mov	r0, r4
 801d910:	f7ef fba1 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d914:	f107 0310 	add.w	r3, r7, #16
 801d918:	4618      	mov	r0, r3
 801d91a:	f7ef fee8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d922:	6879      	ldr	r1, [r7, #4]
 801d924:	4618      	mov	r0, r3
 801d926:	f7ff fad5 	bl	801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	4618      	mov	r0, r3
 801d92e:	371c      	adds	r7, #28
 801d930:	46bd      	mov	sp, r7
 801d932:	bd90      	pop	{r4, r7, pc}
 801d934:	08028f34 	.word	0x08028f34
 801d938:	08026a68 	.word	0x08026a68

0801d93c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d93c:	b590      	push	{r4, r7, lr}
 801d93e:	b087      	sub	sp, #28
 801d940:	af00      	add	r7, sp, #0
 801d942:	60f8      	str	r0, [r7, #12]
 801d944:	60b9      	str	r1, [r7, #8]
 801d946:	607a      	str	r2, [r7, #4]
 801d948:	603b      	str	r3, [r7, #0]
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	68b9      	ldr	r1, [r7, #8]
 801d94e:	4618      	mov	r0, r3
 801d950:	f7ff fa38 	bl	801cdc4 <_ZN11MockFailureC1EP10UtestShell>
 801d954:	4a12      	ldr	r2, [pc, #72]	; (801d9a0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d960:	6878      	ldr	r0, [r7, #4]
 801d962:	f7ef fe97 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801d966:	4602      	mov	r2, r0
 801d968:	f107 0310 	add.w	r3, r7, #16
 801d96c:	490d      	ldr	r1, [pc, #52]	; (801d9a4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801d96e:	4618      	mov	r0, r3
 801d970:	f7f0 fbc4 	bl	800e0fc <_Z16StringFromFormatPKcz>
 801d974:	f107 0310 	add.w	r3, r7, #16
 801d978:	4619      	mov	r1, r3
 801d97a:	4620      	mov	r0, r4
 801d97c:	f7ef fb6b 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801d980:	f107 0310 	add.w	r3, r7, #16
 801d984:	4618      	mov	r0, r3
 801d986:	f7ef feb2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	683a      	ldr	r2, [r7, #0]
 801d98e:	6879      	ldr	r1, [r7, #4]
 801d990:	4618      	mov	r0, r3
 801d992:	f7ff fa9f 	bl	801ced4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	4618      	mov	r0, r3
 801d99a:	371c      	adds	r7, #28
 801d99c:	46bd      	mov	sp, r7
 801d99e:	bd90      	pop	{r4, r7, pc}
 801d9a0:	08028f08 	.word	0x08028f08
 801d9a4:	08026acc 	.word	0x08026acc

0801d9a8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801d9a8:	b480      	push	{r7}
 801d9aa:	b083      	sub	sp, #12
 801d9ac:	af00      	add	r7, sp, #0
 801d9ae:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801d9b0:	4a04      	ldr	r2, [pc, #16]	; (801d9c4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6013      	str	r3, [r2, #0]
}
 801d9b6:	bf00      	nop
 801d9b8:	370c      	adds	r7, #12
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9c0:	4770      	bx	lr
 801d9c2:	bf00      	nop
 801d9c4:	20000f24 	.word	0x20000f24

0801d9c8 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801d9c8:	b580      	push	{r7, lr}
 801d9ca:	b082      	sub	sp, #8
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
 801d9d0:	6039      	str	r1, [r7, #0]
 801d9d2:	4a10      	ldr	r2, [pc, #64]	; (801da14 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	601a      	str	r2, [r3, #0]
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	3304      	adds	r3, #4
 801d9dc:	6839      	ldr	r1, [r7, #0]
 801d9de:	4618      	mov	r0, r3
 801d9e0:	f7ef fb21 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	330c      	adds	r3, #12
 801d9e8:	490b      	ldr	r1, [pc, #44]	; (801da18 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7ef fac7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	2200      	movs	r2, #0
 801d9f4:	629a      	str	r2, [r3, #40]	; 0x28
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	62da      	str	r2, [r3, #44]	; 0x2c
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	2200      	movs	r2, #0
 801da00:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801da02:	687b      	ldr	r3, [r7, #4]
 801da04:	2200      	movs	r2, #0
 801da06:	619a      	str	r2, [r3, #24]
}
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	4618      	mov	r0, r3
 801da0c:	3708      	adds	r7, #8
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}
 801da12:	bf00      	nop
 801da14:	08029790 	.word	0x08029790
 801da18:	08026b1c 	.word	0x08026b1c

0801da1c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b082      	sub	sp, #8
 801da20:	af00      	add	r7, sp, #0
 801da22:	6078      	str	r0, [r7, #4]
 801da24:	4a08      	ldr	r2, [pc, #32]	; (801da48 <_ZN14MockNamedValueD1Ev+0x2c>)
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	601a      	str	r2, [r3, #0]
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	330c      	adds	r3, #12
 801da2e:	4618      	mov	r0, r3
 801da30:	f7ef fe5d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	3304      	adds	r3, #4
 801da38:	4618      	mov	r0, r3
 801da3a:	f7ef fe58 	bl	800d6ee <_ZN12SimpleStringD1Ev>
{
}
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	4618      	mov	r0, r3
 801da42:	3708      	adds	r7, #8
 801da44:	46bd      	mov	sp, r7
 801da46:	bd80      	pop	{r7, pc}
 801da48:	08029790 	.word	0x08029790

0801da4c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801da4c:	b580      	push	{r7, lr}
 801da4e:	b082      	sub	sp, #8
 801da50:	af00      	add	r7, sp, #0
 801da52:	6078      	str	r0, [r7, #4]
}
 801da54:	6878      	ldr	r0, [r7, #4]
 801da56:	f7ff ffe1 	bl	801da1c <_ZN14MockNamedValueD1Ev>
 801da5a:	2138      	movs	r1, #56	; 0x38
 801da5c:	6878      	ldr	r0, [r7, #4]
 801da5e:	f7ec fedf 	bl	800a820 <_ZdlPvj>
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	4618      	mov	r0, r3
 801da66:	3708      	adds	r7, #8
 801da68:	46bd      	mov	sp, r7
 801da6a:	bd80      	pop	{r7, pc}

0801da6c <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801da6c:	b590      	push	{r4, r7, lr}
 801da6e:	b085      	sub	sp, #20
 801da70:	af00      	add	r7, sp, #0
 801da72:	6078      	str	r0, [r7, #4]
 801da74:	460b      	mov	r3, r1
 801da76:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	f103 040c 	add.w	r4, r3, #12
 801da7e:	f107 0308 	add.w	r3, r7, #8
 801da82:	490b      	ldr	r1, [pc, #44]	; (801dab0 <_ZN14MockNamedValue8setValueEb+0x44>)
 801da84:	4618      	mov	r0, r3
 801da86:	f7ef fa7a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801da8a:	f107 0308 	add.w	r3, r7, #8
 801da8e:	4619      	mov	r1, r3
 801da90:	4620      	mov	r0, r4
 801da92:	f7ef fae0 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801da96:	f107 0308 	add.w	r3, r7, #8
 801da9a:	4618      	mov	r0, r3
 801da9c:	f7ef fe27 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	78fa      	ldrb	r2, [r7, #3]
 801daa4:	761a      	strb	r2, [r3, #24]
}
 801daa6:	bf00      	nop
 801daa8:	3714      	adds	r7, #20
 801daaa:	46bd      	mov	sp, r7
 801daac:	bd90      	pop	{r4, r7, pc}
 801daae:	bf00      	nop
 801dab0:	08026b20 	.word	0x08026b20

0801dab4 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801dab4:	b590      	push	{r4, r7, lr}
 801dab6:	b085      	sub	sp, #20
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
 801dabc:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	f103 040c 	add.w	r4, r3, #12
 801dac4:	f107 0308 	add.w	r3, r7, #8
 801dac8:	490a      	ldr	r1, [pc, #40]	; (801daf4 <_ZN14MockNamedValue8setValueEj+0x40>)
 801daca:	4618      	mov	r0, r3
 801dacc:	f7ef fa57 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dad0:	f107 0308 	add.w	r3, r7, #8
 801dad4:	4619      	mov	r1, r3
 801dad6:	4620      	mov	r0, r4
 801dad8:	f7ef fabd 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dadc:	f107 0308 	add.w	r3, r7, #8
 801dae0:	4618      	mov	r0, r3
 801dae2:	f7ef fe04 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	683a      	ldr	r2, [r7, #0]
 801daea:	619a      	str	r2, [r3, #24]
}
 801daec:	bf00      	nop
 801daee:	3714      	adds	r7, #20
 801daf0:	46bd      	mov	sp, r7
 801daf2:	bd90      	pop	{r4, r7, pc}
 801daf4:	08026b28 	.word	0x08026b28

0801daf8 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801daf8:	b590      	push	{r4, r7, lr}
 801dafa:	b085      	sub	sp, #20
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
 801db00:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801db02:	687b      	ldr	r3, [r7, #4]
 801db04:	f103 040c 	add.w	r4, r3, #12
 801db08:	f107 0308 	add.w	r3, r7, #8
 801db0c:	490a      	ldr	r1, [pc, #40]	; (801db38 <_ZN14MockNamedValue8setValueEi+0x40>)
 801db0e:	4618      	mov	r0, r3
 801db10:	f7ef fa35 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801db14:	f107 0308 	add.w	r3, r7, #8
 801db18:	4619      	mov	r1, r3
 801db1a:	4620      	mov	r0, r4
 801db1c:	f7ef fa9b 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801db20:	f107 0308 	add.w	r3, r7, #8
 801db24:	4618      	mov	r0, r3
 801db26:	f7ef fde2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	683a      	ldr	r2, [r7, #0]
 801db2e:	619a      	str	r2, [r3, #24]
}
 801db30:	bf00      	nop
 801db32:	3714      	adds	r7, #20
 801db34:	46bd      	mov	sp, r7
 801db36:	bd90      	pop	{r4, r7, pc}
 801db38:	08026b1c 	.word	0x08026b1c

0801db3c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801db3c:	b590      	push	{r4, r7, lr}
 801db3e:	b085      	sub	sp, #20
 801db40:	af00      	add	r7, sp, #0
 801db42:	6078      	str	r0, [r7, #4]
 801db44:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	f103 040c 	add.w	r4, r3, #12
 801db4c:	f107 0308 	add.w	r3, r7, #8
 801db50:	490a      	ldr	r1, [pc, #40]	; (801db7c <_ZN14MockNamedValue8setValueEl+0x40>)
 801db52:	4618      	mov	r0, r3
 801db54:	f7ef fa13 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801db58:	f107 0308 	add.w	r3, r7, #8
 801db5c:	4619      	mov	r1, r3
 801db5e:	4620      	mov	r0, r4
 801db60:	f7ef fa79 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801db64:	f107 0308 	add.w	r3, r7, #8
 801db68:	4618      	mov	r0, r3
 801db6a:	f7ef fdc0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	683a      	ldr	r2, [r7, #0]
 801db72:	619a      	str	r2, [r3, #24]
}
 801db74:	bf00      	nop
 801db76:	3714      	adds	r7, #20
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd90      	pop	{r4, r7, pc}
 801db7c:	08026b38 	.word	0x08026b38

0801db80 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801db80:	b590      	push	{r4, r7, lr}
 801db82:	b085      	sub	sp, #20
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	f103 040c 	add.w	r4, r3, #12
 801db90:	f107 0308 	add.w	r3, r7, #8
 801db94:	490a      	ldr	r1, [pc, #40]	; (801dbc0 <_ZN14MockNamedValue8setValueEm+0x40>)
 801db96:	4618      	mov	r0, r3
 801db98:	f7ef f9f1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801db9c:	f107 0308 	add.w	r3, r7, #8
 801dba0:	4619      	mov	r1, r3
 801dba2:	4620      	mov	r0, r4
 801dba4:	f7ef fa57 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dba8:	f107 0308 	add.w	r3, r7, #8
 801dbac:	4618      	mov	r0, r3
 801dbae:	f7ef fd9e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	683a      	ldr	r2, [r7, #0]
 801dbb6:	619a      	str	r2, [r3, #24]
}
 801dbb8:	bf00      	nop
 801dbba:	3714      	adds	r7, #20
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	bd90      	pop	{r4, r7, pc}
 801dbc0:	08026b44 	.word	0x08026b44

0801dbc4 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801dbc4:	b5b0      	push	{r4, r5, r7, lr}
 801dbc6:	b086      	sub	sp, #24
 801dbc8:	af02      	add	r7, sp, #8
 801dbca:	60f8      	str	r0, [r7, #12]
 801dbcc:	1d3b      	adds	r3, r7, #4
 801dbce:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801dbd2:	f7f6 fdb7 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801dbd6:	4604      	mov	r4, r0
 801dbd8:	6823      	ldr	r3, [r4, #0]
 801dbda:	3368      	adds	r3, #104	; 0x68
 801dbdc:	681d      	ldr	r5, [r3, #0]
 801dbde:	f7f6 fdc1 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	9300      	str	r3, [sp, #0]
 801dbe6:	2367      	movs	r3, #103	; 0x67
 801dbe8:	4a03      	ldr	r2, [pc, #12]	; (801dbf8 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801dbea:	4904      	ldr	r1, [pc, #16]	; (801dbfc <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801dbec:	4620      	mov	r0, r4
 801dbee:	47a8      	blx	r5
}
 801dbf0:	bf00      	nop
 801dbf2:	3710      	adds	r7, #16
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bdb0      	pop	{r4, r5, r7, pc}
 801dbf8:	08026b58 	.word	0x08026b58
 801dbfc:	08026b74 	.word	0x08026b74

0801dc00 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801dc00:	b5b0      	push	{r4, r5, r7, lr}
 801dc02:	b086      	sub	sp, #24
 801dc04:	af02      	add	r7, sp, #8
 801dc06:	60f8      	str	r0, [r7, #12]
 801dc08:	1d3b      	adds	r3, r7, #4
 801dc0a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801dc0e:	f7f6 fd99 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801dc12:	4604      	mov	r4, r0
 801dc14:	6823      	ldr	r3, [r4, #0]
 801dc16:	3368      	adds	r3, #104	; 0x68
 801dc18:	681d      	ldr	r5, [r3, #0]
 801dc1a:	f7f6 fda3 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	9300      	str	r3, [sp, #0]
 801dc22:	236c      	movs	r3, #108	; 0x6c
 801dc24:	4a03      	ldr	r2, [pc, #12]	; (801dc34 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801dc26:	4904      	ldr	r1, [pc, #16]	; (801dc38 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801dc28:	4620      	mov	r0, r4
 801dc2a:	47a8      	blx	r5
}
 801dc2c:	bf00      	nop
 801dc2e:	3710      	adds	r7, #16
 801dc30:	46bd      	mov	sp, r7
 801dc32:	bdb0      	pop	{r4, r5, r7, pc}
 801dc34:	08026b58 	.word	0x08026b58
 801dc38:	08026b94 	.word	0x08026b94
 801dc3c:	00000000 	.word	0x00000000

0801dc40 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b084      	sub	sp, #16
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	60f8      	str	r0, [r7, #12]
 801dc48:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	3328      	adds	r3, #40	; 0x28
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801dc68 <_ZN14MockNamedValue8setValueEd+0x28>
 801dc58:	ed97 0b00 	vldr	d0, [r7]
 801dc5c:	68f8      	ldr	r0, [r7, #12]
 801dc5e:	4798      	blx	r3
}
 801dc60:	bf00      	nop
 801dc62:	3710      	adds	r7, #16
 801dc64:	46bd      	mov	sp, r7
 801dc66:	bd80      	pop	{r7, pc}
 801dc68:	47ae147b 	.word	0x47ae147b
 801dc6c:	3f747ae1 	.word	0x3f747ae1

0801dc70 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801dc70:	b590      	push	{r4, r7, lr}
 801dc72:	b089      	sub	sp, #36	; 0x24
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6178      	str	r0, [r7, #20]
 801dc78:	ed87 0b02 	vstr	d0, [r7, #8]
 801dc7c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801dc80:	697b      	ldr	r3, [r7, #20]
 801dc82:	f103 040c 	add.w	r4, r3, #12
 801dc86:	f107 0318 	add.w	r3, r7, #24
 801dc8a:	490e      	ldr	r1, [pc, #56]	; (801dcc4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	f7ef f976 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dc92:	f107 0318 	add.w	r3, r7, #24
 801dc96:	4619      	mov	r1, r3
 801dc98:	4620      	mov	r0, r4
 801dc9a:	f7ef f9dc 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dc9e:	f107 0318 	add.w	r3, r7, #24
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7ef fd23 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801dca8:	6979      	ldr	r1, [r7, #20]
 801dcaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801dcae:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801dcb2:	6979      	ldr	r1, [r7, #20]
 801dcb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dcb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801dcbc:	bf00      	nop
 801dcbe:	3724      	adds	r7, #36	; 0x24
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd90      	pop	{r4, r7, pc}
 801dcc4:	08026bc0 	.word	0x08026bc0

0801dcc8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801dcc8:	b590      	push	{r4, r7, lr}
 801dcca:	b085      	sub	sp, #20
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	f103 040c 	add.w	r4, r3, #12
 801dcd8:	f107 0308 	add.w	r3, r7, #8
 801dcdc:	490a      	ldr	r1, [pc, #40]	; (801dd08 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801dcde:	4618      	mov	r0, r3
 801dce0:	f7ef f94d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dce4:	f107 0308 	add.w	r3, r7, #8
 801dce8:	4619      	mov	r1, r3
 801dcea:	4620      	mov	r0, r4
 801dcec:	f7ef f9b3 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dcf0:	f107 0308 	add.w	r3, r7, #8
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	f7ef fcfa 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	683a      	ldr	r2, [r7, #0]
 801dcfe:	619a      	str	r2, [r3, #24]
}
 801dd00:	bf00      	nop
 801dd02:	3714      	adds	r7, #20
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd90      	pop	{r4, r7, pc}
 801dd08:	08026bc8 	.word	0x08026bc8

0801dd0c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801dd0c:	b590      	push	{r4, r7, lr}
 801dd0e:	b085      	sub	sp, #20
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
 801dd14:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	f103 040c 	add.w	r4, r3, #12
 801dd1c:	f107 0308 	add.w	r3, r7, #8
 801dd20:	490a      	ldr	r1, [pc, #40]	; (801dd4c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801dd22:	4618      	mov	r0, r3
 801dd24:	f7ef f92b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dd28:	f107 0308 	add.w	r3, r7, #8
 801dd2c:	4619      	mov	r1, r3
 801dd2e:	4620      	mov	r0, r4
 801dd30:	f7ef f991 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dd34:	f107 0308 	add.w	r3, r7, #8
 801dd38:	4618      	mov	r0, r3
 801dd3a:	f7ef fcd8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	683a      	ldr	r2, [r7, #0]
 801dd42:	619a      	str	r2, [r3, #24]
}
 801dd44:	bf00      	nop
 801dd46:	3714      	adds	r7, #20
 801dd48:	46bd      	mov	sp, r7
 801dd4a:	bd90      	pop	{r4, r7, pc}
 801dd4c:	08026bd0 	.word	0x08026bd0

0801dd50 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801dd50:	b590      	push	{r4, r7, lr}
 801dd52:	b085      	sub	sp, #20
 801dd54:	af00      	add	r7, sp, #0
 801dd56:	6078      	str	r0, [r7, #4]
 801dd58:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	f103 040c 	add.w	r4, r3, #12
 801dd60:	f107 0308 	add.w	r3, r7, #8
 801dd64:	490a      	ldr	r1, [pc, #40]	; (801dd90 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801dd66:	4618      	mov	r0, r3
 801dd68:	f7ef f909 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dd6c:	f107 0308 	add.w	r3, r7, #8
 801dd70:	4619      	mov	r1, r3
 801dd72:	4620      	mov	r0, r4
 801dd74:	f7ef f96f 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801dd78:	f107 0308 	add.w	r3, r7, #8
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f7ef fcb6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	683a      	ldr	r2, [r7, #0]
 801dd86:	619a      	str	r2, [r3, #24]
}
 801dd88:	bf00      	nop
 801dd8a:	3714      	adds	r7, #20
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd90      	pop	{r4, r7, pc}
 801dd90:	08026bdc 	.word	0x08026bdc

0801dd94 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801dd94:	b590      	push	{r4, r7, lr}
 801dd96:	b085      	sub	sp, #20
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	6078      	str	r0, [r7, #4]
 801dd9c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	f103 040c 	add.w	r4, r3, #12
 801dda4:	f107 0308 	add.w	r3, r7, #8
 801dda8:	490a      	ldr	r1, [pc, #40]	; (801ddd4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801ddaa:	4618      	mov	r0, r3
 801ddac:	f7ef f8e7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ddb0:	f107 0308 	add.w	r3, r7, #8
 801ddb4:	4619      	mov	r1, r3
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	f7ef f94d 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801ddbc:	f107 0308 	add.w	r3, r7, #8
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	f7ef fc94 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	683a      	ldr	r2, [r7, #0]
 801ddca:	619a      	str	r2, [r3, #24]
}
 801ddcc:	bf00      	nop
 801ddce:	3714      	adds	r7, #20
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	bd90      	pop	{r4, r7, pc}
 801ddd4:	08026be8 	.word	0x08026be8

0801ddd8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801ddd8:	b590      	push	{r4, r7, lr}
 801ddda:	b087      	sub	sp, #28
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	60f8      	str	r0, [r7, #12]
 801dde0:	60b9      	str	r1, [r7, #8]
 801dde2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	f103 040c 	add.w	r4, r3, #12
 801ddea:	f107 0310 	add.w	r3, r7, #16
 801ddee:	490c      	ldr	r1, [pc, #48]	; (801de20 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f7ef f8c4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ddf6:	f107 0310 	add.w	r3, r7, #16
 801ddfa:	4619      	mov	r1, r3
 801ddfc:	4620      	mov	r0, r4
 801ddfe:	f7ef f92a 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801de02:	f107 0310 	add.w	r3, r7, #16
 801de06:	4618      	mov	r0, r3
 801de08:	f7ef fc71 	bl	800d6ee <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	68ba      	ldr	r2, [r7, #8]
 801de10:	619a      	str	r2, [r3, #24]
    size_ = size;
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	687a      	ldr	r2, [r7, #4]
 801de16:	629a      	str	r2, [r3, #40]	; 0x28
}
 801de18:	bf00      	nop
 801de1a:	371c      	adds	r7, #28
 801de1c:	46bd      	mov	sp, r7
 801de1e:	bd90      	pop	{r4, r7, pc}
 801de20:	08026bf4 	.word	0x08026bf4

0801de24 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801de24:	b580      	push	{r7, lr}
 801de26:	b084      	sub	sp, #16
 801de28:	af00      	add	r7, sp, #0
 801de2a:	60f8      	str	r0, [r7, #12]
 801de2c:	60b9      	str	r1, [r7, #8]
 801de2e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	330c      	adds	r3, #12
 801de34:	68b9      	ldr	r1, [r7, #8]
 801de36:	4618      	mov	r0, r3
 801de38:	f7ef f90d 	bl	800d056 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	687a      	ldr	r2, [r7, #4]
 801de40:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801de42:	4b11      	ldr	r3, [pc, #68]	; (801de88 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	2b00      	cmp	r3, #0
 801de48:	d019      	beq.n	801de7e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801de4a:	4b0f      	ldr	r3, [pc, #60]	; (801de88 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801de4c:	681a      	ldr	r2, [r3, #0]
 801de4e:	4b0e      	ldr	r3, [pc, #56]	; (801de88 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	3314      	adds	r3, #20
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	68b9      	ldr	r1, [r7, #8]
 801de5a:	4610      	mov	r0, r2
 801de5c:	4798      	blx	r3
 801de5e:	4602      	mov	r2, r0
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801de64:	4b08      	ldr	r3, [pc, #32]	; (801de88 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801de66:	681a      	ldr	r2, [r3, #0]
 801de68:	4b07      	ldr	r3, [pc, #28]	; (801de88 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	3318      	adds	r3, #24
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	68b9      	ldr	r1, [r7, #8]
 801de74:	4610      	mov	r0, r2
 801de76:	4798      	blx	r3
 801de78:	4602      	mov	r2, r0
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801de7e:	bf00      	nop
 801de80:	3710      	adds	r7, #16
 801de82:	46bd      	mov	sp, r7
 801de84:	bd80      	pop	{r7, pc}
 801de86:	bf00      	nop
 801de88:	20000f24 	.word	0x20000f24

0801de8c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801de8c:	b580      	push	{r7, lr}
 801de8e:	b084      	sub	sp, #16
 801de90:	af00      	add	r7, sp, #0
 801de92:	60f8      	str	r0, [r7, #12]
 801de94:	60b9      	str	r1, [r7, #8]
 801de96:	607a      	str	r2, [r7, #4]
    type_ = type;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	330c      	adds	r3, #12
 801de9c:	68b9      	ldr	r1, [r7, #8]
 801de9e:	4618      	mov	r0, r3
 801dea0:	f7ef f8d9 	bl	800d056 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	687a      	ldr	r2, [r7, #4]
 801dea8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801deaa:	4b11      	ldr	r3, [pc, #68]	; (801def0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d019      	beq.n	801dee6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801deb2:	4b0f      	ldr	r3, [pc, #60]	; (801def0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801deb4:	681a      	ldr	r2, [r3, #0]
 801deb6:	4b0e      	ldr	r3, [pc, #56]	; (801def0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	3314      	adds	r3, #20
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	68b9      	ldr	r1, [r7, #8]
 801dec2:	4610      	mov	r0, r2
 801dec4:	4798      	blx	r3
 801dec6:	4602      	mov	r2, r0
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801decc:	4b08      	ldr	r3, [pc, #32]	; (801def0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801dece:	681a      	ldr	r2, [r3, #0]
 801ded0:	4b07      	ldr	r3, [pc, #28]	; (801def0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	3318      	adds	r3, #24
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	68b9      	ldr	r1, [r7, #8]
 801dedc:	4610      	mov	r0, r2
 801dede:	4798      	blx	r3
 801dee0:	4602      	mov	r2, r0
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801dee6:	bf00      	nop
 801dee8:	3710      	adds	r7, #16
 801deea:	46bd      	mov	sp, r7
 801deec:	bd80      	pop	{r7, pc}
 801deee:	bf00      	nop
 801def0:	20000f24 	.word	0x20000f24

0801def4 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801def4:	b480      	push	{r7}
 801def6:	b083      	sub	sp, #12
 801def8:	af00      	add	r7, sp, #0
 801defa:	6078      	str	r0, [r7, #4]
 801defc:	6039      	str	r1, [r7, #0]
    size_ = size;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	683a      	ldr	r2, [r7, #0]
 801df02:	629a      	str	r2, [r3, #40]	; 0x28
}
 801df04:	bf00      	nop
 801df06:	370c      	adds	r7, #12
 801df08:	46bd      	mov	sp, r7
 801df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df0e:	4770      	bx	lr

0801df10 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801df10:	b590      	push	{r4, r7, lr}
 801df12:	b085      	sub	sp, #20
 801df14:	af00      	add	r7, sp, #0
 801df16:	6078      	str	r0, [r7, #4]
 801df18:	6039      	str	r1, [r7, #0]
    name_ = name;
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	1d1c      	adds	r4, r3, #4
 801df1e:	f107 0308 	add.w	r3, r7, #8
 801df22:	6839      	ldr	r1, [r7, #0]
 801df24:	4618      	mov	r0, r3
 801df26:	f7ef f82a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801df2a:	f107 0308 	add.w	r3, r7, #8
 801df2e:	4619      	mov	r1, r3
 801df30:	4620      	mov	r0, r4
 801df32:	f7ef f890 	bl	800d056 <_ZN12SimpleStringaSERKS_>
 801df36:	f107 0308 	add.w	r3, r7, #8
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7ef fbd7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
}
 801df40:	bf00      	nop
 801df42:	3714      	adds	r7, #20
 801df44:	46bd      	mov	sp, r7
 801df46:	bd90      	pop	{r4, r7, pc}

0801df48 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801df48:	b580      	push	{r7, lr}
 801df4a:	b082      	sub	sp, #8
 801df4c:	af00      	add	r7, sp, #0
 801df4e:	6078      	str	r0, [r7, #4]
 801df50:	6039      	str	r1, [r7, #0]
    return name_;
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	3304      	adds	r3, #4
 801df56:	4619      	mov	r1, r3
 801df58:	6878      	ldr	r0, [r7, #4]
 801df5a:	f7ef f864 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 801df5e:	6878      	ldr	r0, [r7, #4]
 801df60:	3708      	adds	r7, #8
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}

0801df66 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801df66:	b580      	push	{r7, lr}
 801df68:	b082      	sub	sp, #8
 801df6a:	af00      	add	r7, sp, #0
 801df6c:	6078      	str	r0, [r7, #4]
 801df6e:	6039      	str	r1, [r7, #0]
    return type_;
 801df70:	683b      	ldr	r3, [r7, #0]
 801df72:	330c      	adds	r3, #12
 801df74:	4619      	mov	r1, r3
 801df76:	6878      	ldr	r0, [r7, #4]
 801df78:	f7ef f855 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
}
 801df7c:	6878      	ldr	r0, [r7, #4]
 801df7e:	3708      	adds	r7, #8
 801df80:	46bd      	mov	sp, r7
 801df82:	bd80      	pop	{r7, pc}

0801df84 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801df84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df86:	b087      	sub	sp, #28
 801df88:	af04      	add	r7, sp, #16
 801df8a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801df8c:	f7f6 fbda 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801df90:	4604      	mov	r4, r0
 801df92:	6823      	ldr	r3, [r4, #0]
 801df94:	3324      	adds	r3, #36	; 0x24
 801df96:	681d      	ldr	r5, [r3, #0]
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	330c      	adds	r3, #12
 801df9c:	4618      	mov	r0, r3
 801df9e:	f7ef fb79 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801dfa2:	4606      	mov	r6, r0
 801dfa4:	f7f6 fbde 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	9302      	str	r3, [sp, #8]
 801dfac:	23c8      	movs	r3, #200	; 0xc8
 801dfae:	9301      	str	r3, [sp, #4]
 801dfb0:	4b06      	ldr	r3, [pc, #24]	; (801dfcc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801dfb2:	9300      	str	r3, [sp, #0]
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	4632      	mov	r2, r6
 801dfb8:	4905      	ldr	r1, [pc, #20]	; (801dfd0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801dfba:	4620      	mov	r0, r4
 801dfbc:	47a8      	blx	r5
    return value_.boolValue_;
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	7e1b      	ldrb	r3, [r3, #24]
}
 801dfc2:	4618      	mov	r0, r3
 801dfc4:	370c      	adds	r7, #12
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfca:	bf00      	nop
 801dfcc:	08026b58 	.word	0x08026b58
 801dfd0:	08026b20 	.word	0x08026b20

0801dfd4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801dfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfd6:	b089      	sub	sp, #36	; 0x24
 801dfd8:	af04      	add	r7, sp, #16
 801dfda:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	f103 040c 	add.w	r4, r3, #12
 801dfe2:	f107 0308 	add.w	r3, r7, #8
 801dfe6:	4920      	ldr	r1, [pc, #128]	; (801e068 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801dfe8:	4618      	mov	r0, r3
 801dfea:	f7ee ffc8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801dfee:	2501      	movs	r5, #1
 801dff0:	f107 0308 	add.w	r3, r7, #8
 801dff4:	4619      	mov	r1, r3
 801dff6:	4620      	mov	r0, r4
 801dff8:	f7ef fb85 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801dffc:	4603      	mov	r3, r0
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d005      	beq.n	801e00e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	699b      	ldr	r3, [r3, #24]
 801e006:	2b00      	cmp	r3, #0
 801e008:	db01      	blt.n	801e00e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e00a:	2401      	movs	r4, #1
 801e00c:	e000      	b.n	801e010 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801e00e:	2400      	movs	r4, #0
 801e010:	2d00      	cmp	r5, #0
 801e012:	d004      	beq.n	801e01e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801e014:	f107 0308 	add.w	r3, r7, #8
 801e018:	4618      	mov	r0, r3
 801e01a:	f7ef fb68 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e01e:	2c00      	cmp	r4, #0
 801e020:	d002      	beq.n	801e028 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	699b      	ldr	r3, [r3, #24]
 801e026:	e01a      	b.n	801e05e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801e028:	f7f6 fb8c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e02c:	4604      	mov	r4, r0
 801e02e:	6823      	ldr	r3, [r4, #0]
 801e030:	3324      	adds	r3, #36	; 0x24
 801e032:	681d      	ldr	r5, [r3, #0]
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	330c      	adds	r3, #12
 801e038:	4618      	mov	r0, r3
 801e03a:	f7ef fb2b 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e03e:	4606      	mov	r6, r0
 801e040:	f7f6 fb90 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e044:	4603      	mov	r3, r0
 801e046:	9302      	str	r3, [sp, #8]
 801e048:	23d2      	movs	r3, #210	; 0xd2
 801e04a:	9301      	str	r3, [sp, #4]
 801e04c:	4b07      	ldr	r3, [pc, #28]	; (801e06c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801e04e:	9300      	str	r3, [sp, #0]
 801e050:	2300      	movs	r3, #0
 801e052:	4632      	mov	r2, r6
 801e054:	4906      	ldr	r1, [pc, #24]	; (801e070 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801e056:	4620      	mov	r0, r4
 801e058:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e05e:	4618      	mov	r0, r3
 801e060:	3714      	adds	r7, #20
 801e062:	46bd      	mov	sp, r7
 801e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e066:	bf00      	nop
 801e068:	08026b1c 	.word	0x08026b1c
 801e06c:	08026b58 	.word	0x08026b58
 801e070:	08026b28 	.word	0x08026b28

0801e074 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801e074:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e076:	b087      	sub	sp, #28
 801e078:	af04      	add	r7, sp, #16
 801e07a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801e07c:	f7f6 fb62 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e080:	4604      	mov	r4, r0
 801e082:	6823      	ldr	r3, [r4, #0]
 801e084:	3324      	adds	r3, #36	; 0x24
 801e086:	681d      	ldr	r5, [r3, #0]
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	330c      	adds	r3, #12
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ef fb01 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e092:	4606      	mov	r6, r0
 801e094:	f7f6 fb66 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e098:	4603      	mov	r3, r0
 801e09a:	9302      	str	r3, [sp, #8]
 801e09c:	23d9      	movs	r3, #217	; 0xd9
 801e09e:	9301      	str	r3, [sp, #4]
 801e0a0:	4b06      	ldr	r3, [pc, #24]	; (801e0bc <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801e0a2:	9300      	str	r3, [sp, #0]
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	4632      	mov	r2, r6
 801e0a8:	4905      	ldr	r1, [pc, #20]	; (801e0c0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801e0aa:	4620      	mov	r0, r4
 801e0ac:	47a8      	blx	r5
    return value_.intValue_;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	699b      	ldr	r3, [r3, #24]
}
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	370c      	adds	r7, #12
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0ba:	bf00      	nop
 801e0bc:	08026b58 	.word	0x08026b58
 801e0c0:	08026b1c 	.word	0x08026b1c

0801e0c4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801e0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0c6:	b08b      	sub	sp, #44	; 0x2c
 801e0c8:	af04      	add	r7, sp, #16
 801e0ca:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f103 040c 	add.w	r4, r3, #12
 801e0d2:	f107 0308 	add.w	r3, r7, #8
 801e0d6:	4928      	ldr	r1, [pc, #160]	; (801e178 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7ee ff50 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e0de:	f107 0308 	add.w	r3, r7, #8
 801e0e2:	4619      	mov	r1, r3
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f7ef fb0e 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e0ea:	4603      	mov	r3, r0
 801e0ec:	461c      	mov	r4, r3
 801e0ee:	f107 0308 	add.w	r3, r7, #8
 801e0f2:	4618      	mov	r0, r3
 801e0f4:	f7ef fafb 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e0f8:	2c00      	cmp	r4, #0
 801e0fa:	d002      	beq.n	801e102 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	699b      	ldr	r3, [r3, #24]
 801e100:	e035      	b.n	801e16e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f103 040c 	add.w	r4, r3, #12
 801e108:	f107 0310 	add.w	r3, r7, #16
 801e10c:	491b      	ldr	r1, [pc, #108]	; (801e17c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801e10e:	4618      	mov	r0, r3
 801e110:	f7ee ff35 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e114:	f107 0310 	add.w	r3, r7, #16
 801e118:	4619      	mov	r1, r3
 801e11a:	4620      	mov	r0, r4
 801e11c:	f7ef faf3 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e120:	4603      	mov	r3, r0
 801e122:	461c      	mov	r4, r3
 801e124:	f107 0310 	add.w	r3, r7, #16
 801e128:	4618      	mov	r0, r3
 801e12a:	f7ef fae0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e12e:	2c00      	cmp	r4, #0
 801e130:	d002      	beq.n	801e138 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	699b      	ldr	r3, [r3, #24]
 801e136:	e01a      	b.n	801e16e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801e138:	f7f6 fb04 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e13c:	4604      	mov	r4, r0
 801e13e:	6823      	ldr	r3, [r4, #0]
 801e140:	3324      	adds	r3, #36	; 0x24
 801e142:	681d      	ldr	r5, [r3, #0]
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	330c      	adds	r3, #12
 801e148:	4618      	mov	r0, r3
 801e14a:	f7ef faa3 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e14e:	4606      	mov	r6, r0
 801e150:	f7f6 fb08 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e154:	4603      	mov	r3, r0
 801e156:	9302      	str	r3, [sp, #8]
 801e158:	23e5      	movs	r3, #229	; 0xe5
 801e15a:	9301      	str	r3, [sp, #4]
 801e15c:	4b08      	ldr	r3, [pc, #32]	; (801e180 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801e15e:	9300      	str	r3, [sp, #0]
 801e160:	2300      	movs	r3, #0
 801e162:	4632      	mov	r2, r6
 801e164:	4907      	ldr	r1, [pc, #28]	; (801e184 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801e166:	4620      	mov	r0, r4
 801e168:	47a8      	blx	r5
        return value_.longIntValue_;
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e16e:	4618      	mov	r0, r3
 801e170:	371c      	adds	r7, #28
 801e172:	46bd      	mov	sp, r7
 801e174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e176:	bf00      	nop
 801e178:	08026b1c 	.word	0x08026b1c
 801e17c:	08026b28 	.word	0x08026b28
 801e180:	08026b58 	.word	0x08026b58
 801e184:	08026b38 	.word	0x08026b38

0801e188 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801e188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e18a:	b08d      	sub	sp, #52	; 0x34
 801e18c:	af04      	add	r7, sp, #16
 801e18e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	f103 040c 	add.w	r4, r3, #12
 801e196:	f107 0308 	add.w	r3, r7, #8
 801e19a:	4940      	ldr	r1, [pc, #256]	; (801e29c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801e19c:	4618      	mov	r0, r3
 801e19e:	f7ee feee 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e1a2:	f107 0308 	add.w	r3, r7, #8
 801e1a6:	4619      	mov	r1, r3
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	f7ef faac 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	461c      	mov	r4, r3
 801e1b2:	f107 0308 	add.w	r3, r7, #8
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f7ef fa99 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e1bc:	2c00      	cmp	r4, #0
 801e1be:	d002      	beq.n	801e1c6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	699b      	ldr	r3, [r3, #24]
 801e1c4:	e066      	b.n	801e294 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	f103 040c 	add.w	r4, r3, #12
 801e1cc:	f107 0310 	add.w	r3, r7, #16
 801e1d0:	4933      	ldr	r1, [pc, #204]	; (801e2a0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	f7ee fed3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e1d8:	2501      	movs	r5, #1
 801e1da:	f107 0310 	add.w	r3, r7, #16
 801e1de:	4619      	mov	r1, r3
 801e1e0:	4620      	mov	r0, r4
 801e1e2:	f7ef fa90 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e1e6:	4603      	mov	r3, r0
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d005      	beq.n	801e1f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	699b      	ldr	r3, [r3, #24]
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	db01      	blt.n	801e1f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e1f4:	2401      	movs	r4, #1
 801e1f6:	e000      	b.n	801e1fa <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801e1f8:	2400      	movs	r4, #0
 801e1fa:	2d00      	cmp	r5, #0
 801e1fc:	d004      	beq.n	801e208 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801e1fe:	f107 0310 	add.w	r3, r7, #16
 801e202:	4618      	mov	r0, r3
 801e204:	f7ef fa73 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e208:	2c00      	cmp	r4, #0
 801e20a:	d002      	beq.n	801e212 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	699b      	ldr	r3, [r3, #24]
 801e210:	e040      	b.n	801e294 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	f103 040c 	add.w	r4, r3, #12
 801e218:	f107 0318 	add.w	r3, r7, #24
 801e21c:	4921      	ldr	r1, [pc, #132]	; (801e2a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801e21e:	4618      	mov	r0, r3
 801e220:	f7ee fead 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e224:	2501      	movs	r5, #1
 801e226:	f107 0318 	add.w	r3, r7, #24
 801e22a:	4619      	mov	r1, r3
 801e22c:	4620      	mov	r0, r4
 801e22e:	f7ef fa6a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e232:	4603      	mov	r3, r0
 801e234:	2b00      	cmp	r3, #0
 801e236:	d005      	beq.n	801e244 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	699b      	ldr	r3, [r3, #24]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	db01      	blt.n	801e244 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e240:	2401      	movs	r4, #1
 801e242:	e000      	b.n	801e246 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801e244:	2400      	movs	r4, #0
 801e246:	2d00      	cmp	r5, #0
 801e248:	d004      	beq.n	801e254 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801e24a:	f107 0318 	add.w	r3, r7, #24
 801e24e:	4618      	mov	r0, r3
 801e250:	f7ef fa4d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e254:	2c00      	cmp	r4, #0
 801e256:	d002      	beq.n	801e25e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	699b      	ldr	r3, [r3, #24]
 801e25c:	e01a      	b.n	801e294 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801e25e:	f7f6 fa71 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e262:	4604      	mov	r4, r0
 801e264:	6823      	ldr	r3, [r4, #0]
 801e266:	3324      	adds	r3, #36	; 0x24
 801e268:	681d      	ldr	r5, [r3, #0]
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	330c      	adds	r3, #12
 801e26e:	4618      	mov	r0, r3
 801e270:	f7ef fa10 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e274:	4606      	mov	r6, r0
 801e276:	f7f6 fa75 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e27a:	4603      	mov	r3, r0
 801e27c:	9302      	str	r3, [sp, #8]
 801e27e:	23f4      	movs	r3, #244	; 0xf4
 801e280:	9301      	str	r3, [sp, #4]
 801e282:	4b09      	ldr	r3, [pc, #36]	; (801e2a8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801e284:	9300      	str	r3, [sp, #0]
 801e286:	2300      	movs	r3, #0
 801e288:	4632      	mov	r2, r6
 801e28a:	4908      	ldr	r1, [pc, #32]	; (801e2ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801e28c:	4620      	mov	r0, r4
 801e28e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	699b      	ldr	r3, [r3, #24]
    }
}
 801e294:	4618      	mov	r0, r3
 801e296:	3724      	adds	r7, #36	; 0x24
 801e298:	46bd      	mov	sp, r7
 801e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e29c:	08026b28 	.word	0x08026b28
 801e2a0:	08026b1c 	.word	0x08026b1c
 801e2a4:	08026b38 	.word	0x08026b38
 801e2a8:	08026b58 	.word	0x08026b58
 801e2ac:	08026b44 	.word	0x08026b44

0801e2b0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801e2b0:	b5b0      	push	{r4, r5, r7, lr}
 801e2b2:	b084      	sub	sp, #16
 801e2b4:	af02      	add	r7, sp, #8
 801e2b6:	6078      	str	r0, [r7, #4]
 801e2b8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801e2ba:	f7f6 fa43 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e2be:	4604      	mov	r4, r0
 801e2c0:	6823      	ldr	r3, [r4, #0]
 801e2c2:	3368      	adds	r3, #104	; 0x68
 801e2c4:	681d      	ldr	r5, [r3, #0]
 801e2c6:	f7f6 fa4d 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	9300      	str	r3, [sp, #0]
 801e2ce:	f240 1323 	movw	r3, #291	; 0x123
 801e2d2:	4a06      	ldr	r2, [pc, #24]	; (801e2ec <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801e2d4:	4906      	ldr	r1, [pc, #24]	; (801e2f0 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801e2da:	2100      	movs	r1, #0
 801e2dc:	6878      	ldr	r0, [r7, #4]
 801e2de:	f7ec fe85 	bl	800afec <_ZN17cpputest_longlongC1Ei>
}
 801e2e2:	6878      	ldr	r0, [r7, #4]
 801e2e4:	3708      	adds	r7, #8
 801e2e6:	46bd      	mov	sp, r7
 801e2e8:	bdb0      	pop	{r4, r5, r7, pc}
 801e2ea:	bf00      	nop
 801e2ec:	08026b58 	.word	0x08026b58
 801e2f0:	08026b74 	.word	0x08026b74

0801e2f4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801e2f4:	b5b0      	push	{r4, r5, r7, lr}
 801e2f6:	b084      	sub	sp, #16
 801e2f8:	af02      	add	r7, sp, #8
 801e2fa:	6078      	str	r0, [r7, #4]
 801e2fc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801e2fe:	f7f6 fa21 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e302:	4604      	mov	r4, r0
 801e304:	6823      	ldr	r3, [r4, #0]
 801e306:	3368      	adds	r3, #104	; 0x68
 801e308:	681d      	ldr	r5, [r3, #0]
 801e30a:	f7f6 fa2b 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e30e:	4603      	mov	r3, r0
 801e310:	9300      	str	r3, [sp, #0]
 801e312:	f240 1329 	movw	r3, #297	; 0x129
 801e316:	4a06      	ldr	r2, [pc, #24]	; (801e330 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801e318:	4906      	ldr	r1, [pc, #24]	; (801e334 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801e31a:	4620      	mov	r0, r4
 801e31c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801e31e:	2100      	movs	r1, #0
 801e320:	6878      	ldr	r0, [r7, #4]
 801e322:	f7ec fe6f 	bl	800b004 <_ZN18cpputest_ulonglongC1Ei>
}
 801e326:	6878      	ldr	r0, [r7, #4]
 801e328:	3708      	adds	r7, #8
 801e32a:	46bd      	mov	sp, r7
 801e32c:	bdb0      	pop	{r4, r5, r7, pc}
 801e32e:	bf00      	nop
 801e330:	08026b58 	.word	0x08026b58
 801e334:	08026b94 	.word	0x08026b94

0801e338 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e33a:	b087      	sub	sp, #28
 801e33c:	af04      	add	r7, sp, #16
 801e33e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e340:	f7f6 fa00 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e344:	4604      	mov	r4, r0
 801e346:	6823      	ldr	r3, [r4, #0]
 801e348:	3324      	adds	r3, #36	; 0x24
 801e34a:	681d      	ldr	r5, [r3, #0]
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	330c      	adds	r3, #12
 801e350:	4618      	mov	r0, r3
 801e352:	f7ef f99f 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e356:	4606      	mov	r6, r0
 801e358:	f7f6 fa04 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e35c:	4603      	mov	r3, r0
 801e35e:	9302      	str	r3, [sp, #8]
 801e360:	f240 1331 	movw	r3, #305	; 0x131
 801e364:	9301      	str	r3, [sp, #4]
 801e366:	4b09      	ldr	r3, [pc, #36]	; (801e38c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801e368:	9300      	str	r3, [sp, #0]
 801e36a:	2300      	movs	r3, #0
 801e36c:	4632      	mov	r2, r6
 801e36e:	4908      	ldr	r1, [pc, #32]	; (801e390 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801e370:	4620      	mov	r0, r4
 801e372:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801e37a:	ec43 2b17 	vmov	d7, r2, r3
}
 801e37e:	eeb0 0a47 	vmov.f32	s0, s14
 801e382:	eef0 0a67 	vmov.f32	s1, s15
 801e386:	370c      	adds	r7, #12
 801e388:	46bd      	mov	sp, r7
 801e38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e38c:	08026b58 	.word	0x08026b58
 801e390:	08026bc0 	.word	0x08026bc0

0801e394 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801e394:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e396:	b087      	sub	sp, #28
 801e398:	af04      	add	r7, sp, #16
 801e39a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801e39c:	f7f6 f9d2 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e3a0:	4604      	mov	r4, r0
 801e3a2:	6823      	ldr	r3, [r4, #0]
 801e3a4:	3324      	adds	r3, #36	; 0x24
 801e3a6:	681d      	ldr	r5, [r3, #0]
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	330c      	adds	r3, #12
 801e3ac:	4618      	mov	r0, r3
 801e3ae:	f7ef f971 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e3b2:	4606      	mov	r6, r0
 801e3b4:	f7f6 f9d6 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e3b8:	4603      	mov	r3, r0
 801e3ba:	9302      	str	r3, [sp, #8]
 801e3bc:	f240 1337 	movw	r3, #311	; 0x137
 801e3c0:	9301      	str	r3, [sp, #4]
 801e3c2:	4b09      	ldr	r3, [pc, #36]	; (801e3e8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801e3c4:	9300      	str	r3, [sp, #0]
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	4632      	mov	r2, r6
 801e3ca:	4908      	ldr	r1, [pc, #32]	; (801e3ec <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e3d6:	ec43 2b17 	vmov	d7, r2, r3
}
 801e3da:	eeb0 0a47 	vmov.f32	s0, s14
 801e3de:	eef0 0a67 	vmov.f32	s1, s15
 801e3e2:	370c      	adds	r7, #12
 801e3e4:	46bd      	mov	sp, r7
 801e3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3e8:	08026b58 	.word	0x08026b58
 801e3ec:	08026bc0 	.word	0x08026bc0

0801e3f0 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3f2:	b087      	sub	sp, #28
 801e3f4:	af04      	add	r7, sp, #16
 801e3f6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801e3f8:	f7f6 f9a4 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e3fc:	4604      	mov	r4, r0
 801e3fe:	6823      	ldr	r3, [r4, #0]
 801e400:	3324      	adds	r3, #36	; 0x24
 801e402:	681d      	ldr	r5, [r3, #0]
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	330c      	adds	r3, #12
 801e408:	4618      	mov	r0, r3
 801e40a:	f7ef f943 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e40e:	4606      	mov	r6, r0
 801e410:	f7f6 f9a8 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e414:	4603      	mov	r3, r0
 801e416:	9302      	str	r3, [sp, #8]
 801e418:	f240 133d 	movw	r3, #317	; 0x13d
 801e41c:	9301      	str	r3, [sp, #4]
 801e41e:	4b06      	ldr	r3, [pc, #24]	; (801e438 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801e420:	9300      	str	r3, [sp, #0]
 801e422:	2300      	movs	r3, #0
 801e424:	4632      	mov	r2, r6
 801e426:	4905      	ldr	r1, [pc, #20]	; (801e43c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801e428:	4620      	mov	r0, r4
 801e42a:	47a8      	blx	r5
    return value_.stringValue_;
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	699b      	ldr	r3, [r3, #24]
}
 801e430:	4618      	mov	r0, r3
 801e432:	370c      	adds	r7, #12
 801e434:	46bd      	mov	sp, r7
 801e436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e438:	08026b58 	.word	0x08026b58
 801e43c:	08026be8 	.word	0x08026be8

0801e440 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801e440:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e442:	b087      	sub	sp, #28
 801e444:	af04      	add	r7, sp, #16
 801e446:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801e448:	f7f6 f97c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e44c:	4604      	mov	r4, r0
 801e44e:	6823      	ldr	r3, [r4, #0]
 801e450:	3324      	adds	r3, #36	; 0x24
 801e452:	681d      	ldr	r5, [r3, #0]
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	330c      	adds	r3, #12
 801e458:	4618      	mov	r0, r3
 801e45a:	f7ef f91b 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e45e:	4606      	mov	r6, r0
 801e460:	f7f6 f980 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e464:	4603      	mov	r3, r0
 801e466:	9302      	str	r3, [sp, #8]
 801e468:	f240 1343 	movw	r3, #323	; 0x143
 801e46c:	9301      	str	r3, [sp, #4]
 801e46e:	4b06      	ldr	r3, [pc, #24]	; (801e488 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801e470:	9300      	str	r3, [sp, #0]
 801e472:	2300      	movs	r3, #0
 801e474:	4632      	mov	r2, r6
 801e476:	4905      	ldr	r1, [pc, #20]	; (801e48c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801e478:	4620      	mov	r0, r4
 801e47a:	47a8      	blx	r5
    return value_.pointerValue_;
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	699b      	ldr	r3, [r3, #24]
}
 801e480:	4618      	mov	r0, r3
 801e482:	370c      	adds	r7, #12
 801e484:	46bd      	mov	sp, r7
 801e486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e488:	08026b58 	.word	0x08026b58
 801e48c:	08026bc8 	.word	0x08026bc8

0801e490 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e492:	b087      	sub	sp, #28
 801e494:	af04      	add	r7, sp, #16
 801e496:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801e498:	f7f6 f954 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e49c:	4604      	mov	r4, r0
 801e49e:	6823      	ldr	r3, [r4, #0]
 801e4a0:	3324      	adds	r3, #36	; 0x24
 801e4a2:	681d      	ldr	r5, [r3, #0]
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	330c      	adds	r3, #12
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	f7ef f8f3 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e4ae:	4606      	mov	r6, r0
 801e4b0:	f7f6 f958 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e4b4:	4603      	mov	r3, r0
 801e4b6:	9302      	str	r3, [sp, #8]
 801e4b8:	f240 1349 	movw	r3, #329	; 0x149
 801e4bc:	9301      	str	r3, [sp, #4]
 801e4be:	4b06      	ldr	r3, [pc, #24]	; (801e4d8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801e4c0:	9300      	str	r3, [sp, #0]
 801e4c2:	2300      	movs	r3, #0
 801e4c4:	4632      	mov	r2, r6
 801e4c6:	4905      	ldr	r1, [pc, #20]	; (801e4dc <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	47a8      	blx	r5
    return value_.pointerValue_;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	699b      	ldr	r3, [r3, #24]
}
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	370c      	adds	r7, #12
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4d8:	08026b58 	.word	0x08026b58
 801e4dc:	08026bd0 	.word	0x08026bd0

0801e4e0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4e2:	b087      	sub	sp, #28
 801e4e4:	af04      	add	r7, sp, #16
 801e4e6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801e4e8:	f7f6 f92c 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e4ec:	4604      	mov	r4, r0
 801e4ee:	6823      	ldr	r3, [r4, #0]
 801e4f0:	3324      	adds	r3, #36	; 0x24
 801e4f2:	681d      	ldr	r5, [r3, #0]
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	330c      	adds	r3, #12
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7ef f8cb 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e4fe:	4606      	mov	r6, r0
 801e500:	f7f6 f930 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e504:	4603      	mov	r3, r0
 801e506:	9302      	str	r3, [sp, #8]
 801e508:	f240 134f 	movw	r3, #335	; 0x14f
 801e50c:	9301      	str	r3, [sp, #4]
 801e50e:	4b06      	ldr	r3, [pc, #24]	; (801e528 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801e510:	9300      	str	r3, [sp, #0]
 801e512:	2300      	movs	r3, #0
 801e514:	4632      	mov	r2, r6
 801e516:	4905      	ldr	r1, [pc, #20]	; (801e52c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801e518:	4620      	mov	r0, r4
 801e51a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	699b      	ldr	r3, [r3, #24]
}
 801e520:	4618      	mov	r0, r3
 801e522:	370c      	adds	r7, #12
 801e524:	46bd      	mov	sp, r7
 801e526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e528:	08026b58 	.word	0x08026b58
 801e52c:	08026bdc 	.word	0x08026bdc

0801e530 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801e530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e532:	b087      	sub	sp, #28
 801e534:	af04      	add	r7, sp, #16
 801e536:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801e538:	f7f6 f904 	bl	8014744 <_ZN10UtestShell10getCurrentEv>
 801e53c:	4604      	mov	r4, r0
 801e53e:	6823      	ldr	r3, [r4, #0]
 801e540:	3324      	adds	r3, #36	; 0x24
 801e542:	681d      	ldr	r5, [r3, #0]
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	330c      	adds	r3, #12
 801e548:	4618      	mov	r0, r3
 801e54a:	f7ef f8a3 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801e54e:	4606      	mov	r6, r0
 801e550:	f7f6 f908 	bl	8014764 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e554:	4603      	mov	r3, r0
 801e556:	9302      	str	r3, [sp, #8]
 801e558:	f240 1355 	movw	r3, #341	; 0x155
 801e55c:	9301      	str	r3, [sp, #4]
 801e55e:	4b06      	ldr	r3, [pc, #24]	; (801e578 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801e560:	9300      	str	r3, [sp, #0]
 801e562:	2300      	movs	r3, #0
 801e564:	4632      	mov	r2, r6
 801e566:	4905      	ldr	r1, [pc, #20]	; (801e57c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801e568:	4620      	mov	r0, r4
 801e56a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	699b      	ldr	r3, [r3, #24]
}
 801e570:	4618      	mov	r0, r3
 801e572:	370c      	adds	r7, #12
 801e574:	46bd      	mov	sp, r7
 801e576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e578:	08026b58 	.word	0x08026b58
 801e57c:	08026bf4 	.word	0x08026bf4

0801e580 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801e580:	b480      	push	{r7}
 801e582:	b083      	sub	sp, #12
 801e584:	af00      	add	r7, sp, #0
 801e586:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	699b      	ldr	r3, [r3, #24]
}
 801e58c:	4618      	mov	r0, r3
 801e58e:	370c      	adds	r7, #12
 801e590:	46bd      	mov	sp, r7
 801e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e596:	4770      	bx	lr

0801e598 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801e598:	b480      	push	{r7}
 801e59a:	b083      	sub	sp, #12
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	699b      	ldr	r3, [r3, #24]
}
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	370c      	adds	r7, #12
 801e5a8:	46bd      	mov	sp, r7
 801e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ae:	4770      	bx	lr

0801e5b0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801e5b0:	b480      	push	{r7}
 801e5b2:	b083      	sub	sp, #12
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	6078      	str	r0, [r7, #4]
    return size_;
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801e5bc:	4618      	mov	r0, r3
 801e5be:	370c      	adds	r7, #12
 801e5c0:	46bd      	mov	sp, r7
 801e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5c6:	4770      	bx	lr

0801e5c8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801e5c8:	b480      	push	{r7}
 801e5ca:	b083      	sub	sp, #12
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	6078      	str	r0, [r7, #4]
    return comparator_;
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801e5d4:	4618      	mov	r0, r3
 801e5d6:	370c      	adds	r7, #12
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5de:	4770      	bx	lr

0801e5e0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801e5e0:	b480      	push	{r7}
 801e5e2:	b083      	sub	sp, #12
 801e5e4:	af00      	add	r7, sp, #0
 801e5e6:	6078      	str	r0, [r7, #4]
    return copier_;
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	370c      	adds	r7, #12
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5f6:	4770      	bx	lr

0801e5f8 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5fa:	b0cd      	sub	sp, #308	; 0x134
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	1d3b      	adds	r3, r7, #4
 801e600:	6018      	str	r0, [r3, #0]
 801e602:	463b      	mov	r3, r7
 801e604:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801e606:	2500      	movs	r5, #0
 801e608:	1d3b      	adds	r3, r7, #4
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	f103 040c 	add.w	r4, r3, #12
 801e610:	f107 0308 	add.w	r3, r7, #8
 801e614:	49bb      	ldr	r1, [pc, #748]	; (801e904 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e616:	4618      	mov	r0, r3
 801e618:	f7ee fcb1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e61c:	2601      	movs	r6, #1
 801e61e:	f107 0308 	add.w	r3, r7, #8
 801e622:	4619      	mov	r1, r3
 801e624:	4620      	mov	r0, r4
 801e626:	f7ef f86e 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d015      	beq.n	801e65c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e630:	463b      	mov	r3, r7
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	f103 040c 	add.w	r4, r3, #12
 801e638:	f107 0310 	add.w	r3, r7, #16
 801e63c:	49b2      	ldr	r1, [pc, #712]	; (801e908 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e63e:	4618      	mov	r0, r3
 801e640:	f7ee fc9d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e644:	2501      	movs	r5, #1
 801e646:	f107 0310 	add.w	r3, r7, #16
 801e64a:	4619      	mov	r1, r3
 801e64c:	4620      	mov	r0, r4
 801e64e:	f7ef f85a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e652:	4603      	mov	r3, r0
 801e654:	2b00      	cmp	r3, #0
 801e656:	d001      	beq.n	801e65c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801e658:	2401      	movs	r4, #1
 801e65a:	e000      	b.n	801e65e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801e65c:	2400      	movs	r4, #0
 801e65e:	2d00      	cmp	r5, #0
 801e660:	d004      	beq.n	801e66c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801e662:	f107 0310 	add.w	r3, r7, #16
 801e666:	4618      	mov	r0, r3
 801e668:	f7ef f841 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e66c:	2e00      	cmp	r6, #0
 801e66e:	d004      	beq.n	801e67a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801e670:	f107 0308 	add.w	r3, r7, #8
 801e674:	4618      	mov	r0, r3
 801e676:	f7ef f83a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e67a:	2c00      	cmp	r4, #0
 801e67c:	d00c      	beq.n	801e698 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801e67e:	1d3b      	adds	r3, r7, #4
 801e680:	681b      	ldr	r3, [r3, #0]
 801e682:	699a      	ldr	r2, [r3, #24]
 801e684:	463b      	mov	r3, r7
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	699b      	ldr	r3, [r3, #24]
 801e68a:	429a      	cmp	r2, r3
 801e68c:	bf0c      	ite	eq
 801e68e:	2301      	moveq	r3, #1
 801e690:	2300      	movne	r3, #0
 801e692:	b2dc      	uxtb	r4, r3
 801e694:	f000 bd60 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801e698:	2500      	movs	r5, #0
 801e69a:	1d3b      	adds	r3, r7, #4
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	f103 040c 	add.w	r4, r3, #12
 801e6a2:	f107 0318 	add.w	r3, r7, #24
 801e6a6:	4998      	ldr	r1, [pc, #608]	; (801e908 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e6a8:	4618      	mov	r0, r3
 801e6aa:	f7ee fc68 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e6ae:	2601      	movs	r6, #1
 801e6b0:	f107 0318 	add.w	r3, r7, #24
 801e6b4:	4619      	mov	r1, r3
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	f7ef f825 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e6bc:	4603      	mov	r3, r0
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d015      	beq.n	801e6ee <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e6c2:	463b      	mov	r3, r7
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	f103 040c 	add.w	r4, r3, #12
 801e6ca:	f107 0320 	add.w	r3, r7, #32
 801e6ce:	498d      	ldr	r1, [pc, #564]	; (801e904 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	f7ee fc54 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e6d6:	2501      	movs	r5, #1
 801e6d8:	f107 0320 	add.w	r3, r7, #32
 801e6dc:	4619      	mov	r1, r3
 801e6de:	4620      	mov	r0, r4
 801e6e0:	f7ef f811 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d001      	beq.n	801e6ee <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801e6ea:	2401      	movs	r4, #1
 801e6ec:	e000      	b.n	801e6f0 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801e6ee:	2400      	movs	r4, #0
 801e6f0:	2d00      	cmp	r5, #0
 801e6f2:	d004      	beq.n	801e6fe <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801e6f4:	f107 0320 	add.w	r3, r7, #32
 801e6f8:	4618      	mov	r0, r3
 801e6fa:	f7ee fff8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e6fe:	2e00      	cmp	r6, #0
 801e700:	d004      	beq.n	801e70c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801e702:	f107 0318 	add.w	r3, r7, #24
 801e706:	4618      	mov	r0, r3
 801e708:	f7ee fff1 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e70c:	2c00      	cmp	r4, #0
 801e70e:	d00c      	beq.n	801e72a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801e710:	1d3b      	adds	r3, r7, #4
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	699a      	ldr	r2, [r3, #24]
 801e716:	463b      	mov	r3, r7
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	699b      	ldr	r3, [r3, #24]
 801e71c:	429a      	cmp	r2, r3
 801e71e:	bf0c      	ite	eq
 801e720:	2301      	moveq	r3, #1
 801e722:	2300      	movne	r3, #0
 801e724:	b2dc      	uxtb	r4, r3
 801e726:	f000 bd17 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801e72a:	2500      	movs	r5, #0
 801e72c:	1d3b      	adds	r3, r7, #4
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	f103 040c 	add.w	r4, r3, #12
 801e734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e738:	4974      	ldr	r1, [pc, #464]	; (801e90c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e73a:	4618      	mov	r0, r3
 801e73c:	f7ee fc1f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e740:	2601      	movs	r6, #1
 801e742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e746:	4619      	mov	r1, r3
 801e748:	4620      	mov	r0, r4
 801e74a:	f7ee ffdc 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e74e:	4603      	mov	r3, r0
 801e750:	2b00      	cmp	r3, #0
 801e752:	d015      	beq.n	801e780 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e754:	463b      	mov	r3, r7
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	f103 040c 	add.w	r4, r3, #12
 801e75c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e760:	4969      	ldr	r1, [pc, #420]	; (801e908 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e762:	4618      	mov	r0, r3
 801e764:	f7ee fc0b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e768:	2501      	movs	r5, #1
 801e76a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e76e:	4619      	mov	r1, r3
 801e770:	4620      	mov	r0, r4
 801e772:	f7ee ffc8 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e776:	4603      	mov	r3, r0
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d001      	beq.n	801e780 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801e77c:	2401      	movs	r4, #1
 801e77e:	e000      	b.n	801e782 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801e780:	2400      	movs	r4, #0
 801e782:	2d00      	cmp	r5, #0
 801e784:	d004      	beq.n	801e790 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801e786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e78a:	4618      	mov	r0, r3
 801e78c:	f7ee ffaf 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e790:	2e00      	cmp	r6, #0
 801e792:	d004      	beq.n	801e79e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801e794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e798:	4618      	mov	r0, r3
 801e79a:	f7ee ffa8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e79e:	2c00      	cmp	r4, #0
 801e7a0:	d012      	beq.n	801e7c8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801e7a2:	463b      	mov	r3, r7
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	699b      	ldr	r3, [r3, #24]
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	db0a      	blt.n	801e7c2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e7ac:	1d3b      	adds	r3, r7, #4
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	699b      	ldr	r3, [r3, #24]
 801e7b2:	463a      	mov	r2, r7
 801e7b4:	6812      	ldr	r2, [r2, #0]
 801e7b6:	6992      	ldr	r2, [r2, #24]
 801e7b8:	4293      	cmp	r3, r2
 801e7ba:	d102      	bne.n	801e7c2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801e7bc:	2401      	movs	r4, #1
 801e7be:	f000 bccb 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e7c2:	2400      	movs	r4, #0
 801e7c4:	f000 bcc8 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801e7c8:	2500      	movs	r5, #0
 801e7ca:	1d3b      	adds	r3, r7, #4
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	f103 040c 	add.w	r4, r3, #12
 801e7d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e7d6:	494c      	ldr	r1, [pc, #304]	; (801e908 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e7d8:	4618      	mov	r0, r3
 801e7da:	f7ee fbd0 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e7de:	2601      	movs	r6, #1
 801e7e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e7e4:	4619      	mov	r1, r3
 801e7e6:	4620      	mov	r0, r4
 801e7e8:	f7ee ff8d 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d015      	beq.n	801e81e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e7f2:	463b      	mov	r3, r7
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	f103 040c 	add.w	r4, r3, #12
 801e7fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e7fe:	4943      	ldr	r1, [pc, #268]	; (801e90c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801e800:	4618      	mov	r0, r3
 801e802:	f7ee fbbc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e806:	2501      	movs	r5, #1
 801e808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e80c:	4619      	mov	r1, r3
 801e80e:	4620      	mov	r0, r4
 801e810:	f7ee ff79 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e814:	4603      	mov	r3, r0
 801e816:	2b00      	cmp	r3, #0
 801e818:	d001      	beq.n	801e81e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801e81a:	2401      	movs	r4, #1
 801e81c:	e000      	b.n	801e820 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801e81e:	2400      	movs	r4, #0
 801e820:	2d00      	cmp	r5, #0
 801e822:	d004      	beq.n	801e82e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801e824:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e828:	4618      	mov	r0, r3
 801e82a:	f7ee ff60 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e82e:	2e00      	cmp	r6, #0
 801e830:	d004      	beq.n	801e83c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801e832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e836:	4618      	mov	r0, r3
 801e838:	f7ee ff59 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e83c:	2c00      	cmp	r4, #0
 801e83e:	d012      	beq.n	801e866 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801e840:	1d3b      	adds	r3, r7, #4
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	699b      	ldr	r3, [r3, #24]
 801e846:	2b00      	cmp	r3, #0
 801e848:	db0a      	blt.n	801e860 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e84a:	1d3b      	adds	r3, r7, #4
 801e84c:	681b      	ldr	r3, [r3, #0]
 801e84e:	699b      	ldr	r3, [r3, #24]
 801e850:	463a      	mov	r2, r7
 801e852:	6812      	ldr	r2, [r2, #0]
 801e854:	6992      	ldr	r2, [r2, #24]
 801e856:	4293      	cmp	r3, r2
 801e858:	d102      	bne.n	801e860 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801e85a:	2401      	movs	r4, #1
 801e85c:	f000 bc7c 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e860:	2400      	movs	r4, #0
 801e862:	f000 bc79 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801e866:	2500      	movs	r5, #0
 801e868:	1d3b      	adds	r3, r7, #4
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	f103 040c 	add.w	r4, r3, #12
 801e870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e874:	4926      	ldr	r1, [pc, #152]	; (801e910 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801e876:	4618      	mov	r0, r3
 801e878:	f7ee fb81 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e87c:	2601      	movs	r6, #1
 801e87e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e882:	4619      	mov	r1, r3
 801e884:	4620      	mov	r0, r4
 801e886:	f7ee ff3e 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e88a:	4603      	mov	r3, r0
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d015      	beq.n	801e8bc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e890:	463b      	mov	r3, r7
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	f103 040c 	add.w	r4, r3, #12
 801e898:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e89c:	491a      	ldr	r1, [pc, #104]	; (801e908 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801e89e:	4618      	mov	r0, r3
 801e8a0:	f7ee fb6d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e8a4:	2501      	movs	r5, #1
 801e8a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e8aa:	4619      	mov	r1, r3
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f7ee ff2a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e8b2:	4603      	mov	r3, r0
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d001      	beq.n	801e8bc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801e8b8:	2401      	movs	r4, #1
 801e8ba:	e000      	b.n	801e8be <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801e8bc:	2400      	movs	r4, #0
 801e8be:	2d00      	cmp	r5, #0
 801e8c0:	d004      	beq.n	801e8cc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801e8c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e8c6:	4618      	mov	r0, r3
 801e8c8:	f7ee ff11 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e8cc:	2e00      	cmp	r6, #0
 801e8ce:	d004      	beq.n	801e8da <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801e8d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e8d4:	4618      	mov	r0, r3
 801e8d6:	f7ee ff0a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e8da:	2c00      	cmp	r4, #0
 801e8dc:	d01a      	beq.n	801e914 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801e8de:	463b      	mov	r3, r7
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	699b      	ldr	r3, [r3, #24]
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	db0a      	blt.n	801e8fe <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e8e8:	1d3b      	adds	r3, r7, #4
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	699b      	ldr	r3, [r3, #24]
 801e8ee:	463a      	mov	r2, r7
 801e8f0:	6812      	ldr	r2, [r2, #0]
 801e8f2:	6992      	ldr	r2, [r2, #24]
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	d102      	bne.n	801e8fe <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801e8f8:	2401      	movs	r4, #1
 801e8fa:	f000 bc2d 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e8fe:	2400      	movs	r4, #0
 801e900:	f000 bc2a 	b.w	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e904:	08026b38 	.word	0x08026b38
 801e908:	08026b1c 	.word	0x08026b1c
 801e90c:	08026b28 	.word	0x08026b28
 801e910:	08026b44 	.word	0x08026b44
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801e914:	2500      	movs	r5, #0
 801e916:	1d3b      	adds	r3, r7, #4
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	f103 040c 	add.w	r4, r3, #12
 801e91e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e922:	49b8      	ldr	r1, [pc, #736]	; (801ec04 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801e924:	4618      	mov	r0, r3
 801e926:	f7ee fb2a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e92a:	2601      	movs	r6, #1
 801e92c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e930:	4619      	mov	r1, r3
 801e932:	4620      	mov	r0, r4
 801e934:	f7ee fee7 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e938:	4603      	mov	r3, r0
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d015      	beq.n	801e96a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e93e:	463b      	mov	r3, r7
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	f103 040c 	add.w	r4, r3, #12
 801e946:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e94a:	49af      	ldr	r1, [pc, #700]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801e94c:	4618      	mov	r0, r3
 801e94e:	f7ee fb16 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e952:	2501      	movs	r5, #1
 801e954:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e958:	4619      	mov	r1, r3
 801e95a:	4620      	mov	r0, r4
 801e95c:	f7ee fed3 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e960:	4603      	mov	r3, r0
 801e962:	2b00      	cmp	r3, #0
 801e964:	d001      	beq.n	801e96a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801e966:	2401      	movs	r4, #1
 801e968:	e000      	b.n	801e96c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801e96a:	2400      	movs	r4, #0
 801e96c:	2d00      	cmp	r5, #0
 801e96e:	d004      	beq.n	801e97a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801e970:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e974:	4618      	mov	r0, r3
 801e976:	f7ee feba 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e97a:	2e00      	cmp	r6, #0
 801e97c:	d004      	beq.n	801e988 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801e97e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e982:	4618      	mov	r0, r3
 801e984:	f7ee feb3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801e988:	2c00      	cmp	r4, #0
 801e98a:	d010      	beq.n	801e9ae <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801e98c:	1d3b      	adds	r3, r7, #4
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	699b      	ldr	r3, [r3, #24]
 801e992:	2b00      	cmp	r3, #0
 801e994:	db09      	blt.n	801e9aa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e996:	1d3b      	adds	r3, r7, #4
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	699b      	ldr	r3, [r3, #24]
 801e99c:	463a      	mov	r2, r7
 801e99e:	6812      	ldr	r2, [r2, #0]
 801e9a0:	6992      	ldr	r2, [r2, #24]
 801e9a2:	4293      	cmp	r3, r2
 801e9a4:	d101      	bne.n	801e9aa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801e9a6:	2401      	movs	r4, #1
 801e9a8:	e3d6      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801e9aa:	2400      	movs	r4, #0
 801e9ac:	e3d4      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801e9ae:	2500      	movs	r5, #0
 801e9b0:	1d3b      	adds	r3, r7, #4
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	f103 040c 	add.w	r4, r3, #12
 801e9b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e9bc:	4993      	ldr	r1, [pc, #588]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801e9be:	4618      	mov	r0, r3
 801e9c0:	f7ee fadd 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e9c4:	2601      	movs	r6, #1
 801e9c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e9ca:	4619      	mov	r1, r3
 801e9cc:	4620      	mov	r0, r4
 801e9ce:	f7ee fe9a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d015      	beq.n	801ea04 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801e9d8:	463b      	mov	r3, r7
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	f103 040c 	add.w	r4, r3, #12
 801e9e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e9e4:	498a      	ldr	r1, [pc, #552]	; (801ec10 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7ee fac9 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801e9ec:	2501      	movs	r5, #1
 801e9ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e9f2:	4619      	mov	r1, r3
 801e9f4:	4620      	mov	r0, r4
 801e9f6:	f7ee fe86 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801e9fa:	4603      	mov	r3, r0
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d001      	beq.n	801ea04 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801ea00:	2401      	movs	r4, #1
 801ea02:	e000      	b.n	801ea06 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801ea04:	2400      	movs	r4, #0
 801ea06:	2d00      	cmp	r5, #0
 801ea08:	d004      	beq.n	801ea14 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801ea0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801ea0e:	4618      	mov	r0, r3
 801ea10:	f7ee fe6d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ea14:	2e00      	cmp	r6, #0
 801ea16:	d004      	beq.n	801ea22 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801ea18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7ee fe66 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ea22:	2c00      	cmp	r4, #0
 801ea24:	d010      	beq.n	801ea48 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801ea26:	463b      	mov	r3, r7
 801ea28:	681b      	ldr	r3, [r3, #0]
 801ea2a:	699b      	ldr	r3, [r3, #24]
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	db09      	blt.n	801ea44 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ea30:	1d3b      	adds	r3, r7, #4
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	699b      	ldr	r3, [r3, #24]
 801ea36:	463a      	mov	r2, r7
 801ea38:	6812      	ldr	r2, [r2, #0]
 801ea3a:	6992      	ldr	r2, [r2, #24]
 801ea3c:	4293      	cmp	r3, r2
 801ea3e:	d101      	bne.n	801ea44 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801ea40:	2401      	movs	r4, #1
 801ea42:	e389      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ea44:	2400      	movs	r4, #0
 801ea46:	e387      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801ea48:	2500      	movs	r5, #0
 801ea4a:	1d3b      	adds	r3, r7, #4
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	f103 040c 	add.w	r4, r3, #12
 801ea52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ea56:	496e      	ldr	r1, [pc, #440]	; (801ec10 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801ea58:	4618      	mov	r0, r3
 801ea5a:	f7ee fa90 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ea5e:	2601      	movs	r6, #1
 801ea60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801ea64:	4619      	mov	r1, r3
 801ea66:	4620      	mov	r0, r4
 801ea68:	f7ee fe4d 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ea6c:	4603      	mov	r3, r0
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d015      	beq.n	801ea9e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ea72:	463b      	mov	r3, r7
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	f103 040c 	add.w	r4, r3, #12
 801ea7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ea7e:	4963      	ldr	r1, [pc, #396]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ea80:	4618      	mov	r0, r3
 801ea82:	f7ee fa7c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ea86:	2501      	movs	r5, #1
 801ea88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801ea8c:	4619      	mov	r1, r3
 801ea8e:	4620      	mov	r0, r4
 801ea90:	f7ee fe39 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ea94:	4603      	mov	r3, r0
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d001      	beq.n	801ea9e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801ea9a:	2401      	movs	r4, #1
 801ea9c:	e000      	b.n	801eaa0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801ea9e:	2400      	movs	r4, #0
 801eaa0:	2d00      	cmp	r5, #0
 801eaa2:	d004      	beq.n	801eaae <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801eaa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801eaa8:	4618      	mov	r0, r3
 801eaaa:	f7ee fe20 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801eaae:	2e00      	cmp	r6, #0
 801eab0:	d004      	beq.n	801eabc <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801eab2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801eab6:	4618      	mov	r0, r3
 801eab8:	f7ee fe19 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801eabc:	2c00      	cmp	r4, #0
 801eabe:	d010      	beq.n	801eae2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801eac0:	1d3b      	adds	r3, r7, #4
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	699b      	ldr	r3, [r3, #24]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	db09      	blt.n	801eade <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801eaca:	1d3b      	adds	r3, r7, #4
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	699b      	ldr	r3, [r3, #24]
 801ead0:	463a      	mov	r2, r7
 801ead2:	6812      	ldr	r2, [r2, #0]
 801ead4:	6992      	ldr	r2, [r2, #24]
 801ead6:	4293      	cmp	r3, r2
 801ead8:	d101      	bne.n	801eade <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801eada:	2401      	movs	r4, #1
 801eadc:	e33c      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eade:	2400      	movs	r4, #0
 801eae0:	e33a      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801eae2:	2500      	movs	r5, #0
 801eae4:	1d3b      	adds	r3, r7, #4
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	f103 040c 	add.w	r4, r3, #12
 801eaec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eaf0:	4946      	ldr	r1, [pc, #280]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7ee fa43 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801eaf8:	2601      	movs	r6, #1
 801eafa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eafe:	4619      	mov	r1, r3
 801eb00:	4620      	mov	r0, r4
 801eb02:	f7ee fe00 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801eb06:	4603      	mov	r3, r0
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d015      	beq.n	801eb38 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801eb0c:	463b      	mov	r3, r7
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	f103 040c 	add.w	r4, r3, #12
 801eb14:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801eb18:	493b      	ldr	r1, [pc, #236]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	f7ee fa2f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801eb20:	2501      	movs	r5, #1
 801eb22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801eb26:	4619      	mov	r1, r3
 801eb28:	4620      	mov	r0, r4
 801eb2a:	f7ee fdec 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801eb2e:	4603      	mov	r3, r0
 801eb30:	2b00      	cmp	r3, #0
 801eb32:	d001      	beq.n	801eb38 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801eb34:	2401      	movs	r4, #1
 801eb36:	e000      	b.n	801eb3a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801eb38:	2400      	movs	r4, #0
 801eb3a:	2d00      	cmp	r5, #0
 801eb3c:	d004      	beq.n	801eb48 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801eb3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801eb42:	4618      	mov	r0, r3
 801eb44:	f7ee fdd3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801eb48:	2e00      	cmp	r6, #0
 801eb4a:	d004      	beq.n	801eb56 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801eb4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801eb50:	4618      	mov	r0, r3
 801eb52:	f7ee fdcc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801eb56:	2c00      	cmp	r4, #0
 801eb58:	d00b      	beq.n	801eb72 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801eb5a:	1d3b      	adds	r3, r7, #4
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	699a      	ldr	r2, [r3, #24]
 801eb60:	463b      	mov	r3, r7
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	699b      	ldr	r3, [r3, #24]
 801eb66:	429a      	cmp	r2, r3
 801eb68:	bf0c      	ite	eq
 801eb6a:	2301      	moveq	r3, #1
 801eb6c:	2300      	movne	r3, #0
 801eb6e:	b2dc      	uxtb	r4, r3
 801eb70:	e2f2      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801eb72:	2500      	movs	r5, #0
 801eb74:	1d3b      	adds	r3, r7, #4
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	f103 040c 	add.w	r4, r3, #12
 801eb7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801eb80:	4921      	ldr	r1, [pc, #132]	; (801ec08 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801eb82:	4618      	mov	r0, r3
 801eb84:	f7ee f9fb 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801eb88:	2601      	movs	r6, #1
 801eb8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801eb8e:	4619      	mov	r1, r3
 801eb90:	4620      	mov	r0, r4
 801eb92:	f7ee fdb8 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801eb96:	4603      	mov	r3, r0
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d015      	beq.n	801ebc8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801eb9c:	463b      	mov	r3, r7
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	f103 040c 	add.w	r4, r3, #12
 801eba4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801eba8:	4918      	ldr	r1, [pc, #96]	; (801ec0c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801ebaa:	4618      	mov	r0, r3
 801ebac:	f7ee f9e7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ebb0:	2501      	movs	r5, #1
 801ebb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ebb6:	4619      	mov	r1, r3
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f7ee fda4 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ebbe:	4603      	mov	r3, r0
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d001      	beq.n	801ebc8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801ebc4:	2401      	movs	r4, #1
 801ebc6:	e000      	b.n	801ebca <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801ebc8:	2400      	movs	r4, #0
 801ebca:	2d00      	cmp	r5, #0
 801ebcc:	d004      	beq.n	801ebd8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801ebce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801ebd2:	4618      	mov	r0, r3
 801ebd4:	f7ee fd8b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ebd8:	2e00      	cmp	r6, #0
 801ebda:	d004      	beq.n	801ebe6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801ebdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801ebe0:	4618      	mov	r0, r3
 801ebe2:	f7ee fd84 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ebe6:	2c00      	cmp	r4, #0
 801ebe8:	d014      	beq.n	801ec14 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801ebea:	1d3b      	adds	r3, r7, #4
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	699a      	ldr	r2, [r3, #24]
 801ebf0:	463b      	mov	r3, r7
 801ebf2:	681b      	ldr	r3, [r3, #0]
 801ebf4:	699b      	ldr	r3, [r3, #24]
 801ebf6:	429a      	cmp	r2, r3
 801ebf8:	bf0c      	ite	eq
 801ebfa:	2301      	moveq	r3, #1
 801ebfc:	2300      	movne	r3, #0
 801ebfe:	b2dc      	uxtb	r4, r3
 801ec00:	e2aa      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ec02:	bf00      	nop
 801ec04:	08026b1c 	.word	0x08026b1c
 801ec08:	08026b44 	.word	0x08026b44
 801ec0c:	08026b28 	.word	0x08026b28
 801ec10:	08026b38 	.word	0x08026b38
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801ec14:	2500      	movs	r5, #0
 801ec16:	1d3b      	adds	r3, r7, #4
 801ec18:	681b      	ldr	r3, [r3, #0]
 801ec1a:	f103 040c 	add.w	r4, r3, #12
 801ec1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ec22:	49ae      	ldr	r1, [pc, #696]	; (801eedc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ec24:	4618      	mov	r0, r3
 801ec26:	f7ee f9aa 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ec2a:	2601      	movs	r6, #1
 801ec2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ec30:	4619      	mov	r1, r3
 801ec32:	4620      	mov	r0, r4
 801ec34:	f7ee fd67 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ec38:	4603      	mov	r3, r0
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d015      	beq.n	801ec6a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ec3e:	463b      	mov	r3, r7
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	f103 040c 	add.w	r4, r3, #12
 801ec46:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ec4a:	49a5      	ldr	r1, [pc, #660]	; (801eee0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ec4c:	4618      	mov	r0, r3
 801ec4e:	f7ee f996 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ec52:	2501      	movs	r5, #1
 801ec54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ec58:	4619      	mov	r1, r3
 801ec5a:	4620      	mov	r0, r4
 801ec5c:	f7ee fd53 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ec60:	4603      	mov	r3, r0
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d001      	beq.n	801ec6a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801ec66:	2401      	movs	r4, #1
 801ec68:	e000      	b.n	801ec6c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801ec6a:	2400      	movs	r4, #0
 801ec6c:	2d00      	cmp	r5, #0
 801ec6e:	d004      	beq.n	801ec7a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801ec70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ec74:	4618      	mov	r0, r3
 801ec76:	f7ee fd3a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ec7a:	2e00      	cmp	r6, #0
 801ec7c:	d004      	beq.n	801ec88 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801ec7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7ee fd33 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ec88:	2c00      	cmp	r4, #0
 801ec8a:	d010      	beq.n	801ecae <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801ec8c:	1d3b      	adds	r3, r7, #4
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	699b      	ldr	r3, [r3, #24]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	db09      	blt.n	801ecaa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801ec96:	1d3b      	adds	r3, r7, #4
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	699b      	ldr	r3, [r3, #24]
 801ec9c:	463a      	mov	r2, r7
 801ec9e:	6812      	ldr	r2, [r2, #0]
 801eca0:	6992      	ldr	r2, [r2, #24]
 801eca2:	4293      	cmp	r3, r2
 801eca4:	d101      	bne.n	801ecaa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801eca6:	2401      	movs	r4, #1
 801eca8:	e256      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ecaa:	2400      	movs	r4, #0
 801ecac:	e254      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801ecae:	2500      	movs	r5, #0
 801ecb0:	1d3b      	adds	r3, r7, #4
 801ecb2:	681b      	ldr	r3, [r3, #0]
 801ecb4:	f103 040c 	add.w	r4, r3, #12
 801ecb8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ecbc:	4988      	ldr	r1, [pc, #544]	; (801eee0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	f7ee f95d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ecc4:	2601      	movs	r6, #1
 801ecc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ecca:	4619      	mov	r1, r3
 801eccc:	4620      	mov	r0, r4
 801ecce:	f7ee fd1a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d015      	beq.n	801ed04 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ecd8:	463b      	mov	r3, r7
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	f103 040c 	add.w	r4, r3, #12
 801ece0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ece4:	497d      	ldr	r1, [pc, #500]	; (801eedc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ece6:	4618      	mov	r0, r3
 801ece8:	f7ee f949 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ecec:	2501      	movs	r5, #1
 801ecee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ecf2:	4619      	mov	r1, r3
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	f7ee fd06 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d001      	beq.n	801ed04 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801ed00:	2401      	movs	r4, #1
 801ed02:	e000      	b.n	801ed06 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801ed04:	2400      	movs	r4, #0
 801ed06:	2d00      	cmp	r5, #0
 801ed08:	d004      	beq.n	801ed14 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801ed0a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ed0e:	4618      	mov	r0, r3
 801ed10:	f7ee fced 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ed14:	2e00      	cmp	r6, #0
 801ed16:	d004      	beq.n	801ed22 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801ed18:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ed1c:	4618      	mov	r0, r3
 801ed1e:	f7ee fce6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ed22:	2c00      	cmp	r4, #0
 801ed24:	d010      	beq.n	801ed48 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801ed26:	463b      	mov	r3, r7
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	699b      	ldr	r3, [r3, #24]
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	db09      	blt.n	801ed44 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801ed30:	1d3b      	adds	r3, r7, #4
 801ed32:	681b      	ldr	r3, [r3, #0]
 801ed34:	699b      	ldr	r3, [r3, #24]
 801ed36:	463a      	mov	r2, r7
 801ed38:	6812      	ldr	r2, [r2, #0]
 801ed3a:	6992      	ldr	r2, [r2, #24]
 801ed3c:	4293      	cmp	r3, r2
 801ed3e:	d101      	bne.n	801ed44 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801ed40:	2401      	movs	r4, #1
 801ed42:	e209      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ed44:	2400      	movs	r4, #0
 801ed46:	e207      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801ed48:	1d3b      	adds	r3, r7, #4
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	f103 020c 	add.w	r2, r3, #12
 801ed50:	463b      	mov	r3, r7
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	330c      	adds	r3, #12
 801ed56:	4619      	mov	r1, r3
 801ed58:	4610      	mov	r0, r2
 801ed5a:	f7ee fd19 	bl	800d790 <_ZneRK12SimpleStringS1_>
 801ed5e:	4603      	mov	r3, r0
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d001      	beq.n	801ed68 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801ed64:	2400      	movs	r4, #0
 801ed66:	e1f7      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801ed68:	1d3b      	adds	r3, r7, #4
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	f103 040c 	add.w	r4, r3, #12
 801ed70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ed74:	495b      	ldr	r1, [pc, #364]	; (801eee4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801ed76:	4618      	mov	r0, r3
 801ed78:	f7ee f901 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ed7c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ed80:	4619      	mov	r1, r3
 801ed82:	4620      	mov	r0, r4
 801ed84:	f7ee fcbf 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ed88:	4603      	mov	r3, r0
 801ed8a:	461c      	mov	r4, r3
 801ed8c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7ee fcac 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ed96:	2c00      	cmp	r4, #0
 801ed98:	d00b      	beq.n	801edb2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801ed9a:	1d3b      	adds	r3, r7, #4
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	7e1a      	ldrb	r2, [r3, #24]
 801eda0:	463b      	mov	r3, r7
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	7e1b      	ldrb	r3, [r3, #24]
 801eda6:	429a      	cmp	r2, r3
 801eda8:	bf0c      	ite	eq
 801edaa:	2301      	moveq	r3, #1
 801edac:	2300      	movne	r3, #0
 801edae:	b2dc      	uxtb	r4, r3
 801edb0:	e1d2      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801edb2:	1d3b      	adds	r3, r7, #4
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	f103 040c 	add.w	r4, r3, #12
 801edba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801edbe:	494a      	ldr	r1, [pc, #296]	; (801eee8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801edc0:	4618      	mov	r0, r3
 801edc2:	f7ee f8dc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801edc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801edca:	4619      	mov	r1, r3
 801edcc:	4620      	mov	r0, r4
 801edce:	f7ee fc9a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801edd2:	4603      	mov	r3, r0
 801edd4:	461c      	mov	r4, r3
 801edd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801edda:	4618      	mov	r0, r3
 801eddc:	f7ee fc87 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ede0:	2c00      	cmp	r4, #0
 801ede2:	d00b      	beq.n	801edfc <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801ede4:	1d3b      	adds	r3, r7, #4
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	699a      	ldr	r2, [r3, #24]
 801edea:	463b      	mov	r3, r7
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	699b      	ldr	r3, [r3, #24]
 801edf0:	429a      	cmp	r2, r3
 801edf2:	bf0c      	ite	eq
 801edf4:	2301      	moveq	r3, #1
 801edf6:	2300      	movne	r3, #0
 801edf8:	b2dc      	uxtb	r4, r3
 801edfa:	e1ad      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801edfc:	1d3b      	adds	r3, r7, #4
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	f103 040c 	add.w	r4, r3, #12
 801ee04:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ee08:	4938      	ldr	r1, [pc, #224]	; (801eeec <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	f7ee f8b7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ee10:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ee14:	4619      	mov	r1, r3
 801ee16:	4620      	mov	r0, r4
 801ee18:	f7ee fc75 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ee1c:	4603      	mov	r3, r0
 801ee1e:	461c      	mov	r4, r3
 801ee20:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ee24:	4618      	mov	r0, r3
 801ee26:	f7ee fc62 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ee2a:	2c00      	cmp	r4, #0
 801ee2c:	d00b      	beq.n	801ee46 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801ee2e:	1d3b      	adds	r3, r7, #4
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	699a      	ldr	r2, [r3, #24]
 801ee34:	463b      	mov	r3, r7
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	699b      	ldr	r3, [r3, #24]
 801ee3a:	429a      	cmp	r2, r3
 801ee3c:	bf0c      	ite	eq
 801ee3e:	2301      	moveq	r3, #1
 801ee40:	2300      	movne	r3, #0
 801ee42:	b2dc      	uxtb	r4, r3
 801ee44:	e188      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801ee46:	1d3b      	adds	r3, r7, #4
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	f103 040c 	add.w	r4, r3, #12
 801ee4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ee52:	4922      	ldr	r1, [pc, #136]	; (801eedc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801ee54:	4618      	mov	r0, r3
 801ee56:	f7ee f892 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ee5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ee5e:	4619      	mov	r1, r3
 801ee60:	4620      	mov	r0, r4
 801ee62:	f7ee fc50 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ee66:	4603      	mov	r3, r0
 801ee68:	461c      	mov	r4, r3
 801ee6a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801ee6e:	4618      	mov	r0, r3
 801ee70:	f7ee fc3d 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ee74:	2c00      	cmp	r4, #0
 801ee76:	d00b      	beq.n	801ee90 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801ee78:	1d3b      	adds	r3, r7, #4
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	699a      	ldr	r2, [r3, #24]
 801ee7e:	463b      	mov	r3, r7
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	699b      	ldr	r3, [r3, #24]
 801ee84:	429a      	cmp	r2, r3
 801ee86:	bf0c      	ite	eq
 801ee88:	2301      	moveq	r3, #1
 801ee8a:	2300      	movne	r3, #0
 801ee8c:	b2dc      	uxtb	r4, r3
 801ee8e:	e163      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801ee90:	1d3b      	adds	r3, r7, #4
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	f103 040c 	add.w	r4, r3, #12
 801ee98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ee9c:	4910      	ldr	r1, [pc, #64]	; (801eee0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7ee f86d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801eea4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801eea8:	4619      	mov	r1, r3
 801eeaa:	4620      	mov	r0, r4
 801eeac:	f7ee fc2b 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801eeb0:	4603      	mov	r3, r0
 801eeb2:	461c      	mov	r4, r3
 801eeb4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801eeb8:	4618      	mov	r0, r3
 801eeba:	f7ee fc18 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801eebe:	2c00      	cmp	r4, #0
 801eec0:	d016      	beq.n	801eef0 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801eec2:	1d3b      	adds	r3, r7, #4
 801eec4:	681b      	ldr	r3, [r3, #0]
 801eec6:	699a      	ldr	r2, [r3, #24]
 801eec8:	463b      	mov	r3, r7
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	699b      	ldr	r3, [r3, #24]
 801eece:	429a      	cmp	r2, r3
 801eed0:	bf0c      	ite	eq
 801eed2:	2301      	moveq	r3, #1
 801eed4:	2300      	movne	r3, #0
 801eed6:	b2dc      	uxtb	r4, r3
 801eed8:	e13e      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eeda:	bf00      	nop
 801eedc:	08026b38 	.word	0x08026b38
 801eee0:	08026b44 	.word	0x08026b44
 801eee4:	08026b20 	.word	0x08026b20
 801eee8:	08026b1c 	.word	0x08026b1c
 801eeec:	08026b28 	.word	0x08026b28
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801eef0:	1d3b      	adds	r3, r7, #4
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	f103 040c 	add.w	r4, r3, #12
 801eef8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801eefc:	4999      	ldr	r1, [pc, #612]	; (801f164 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801eefe:	4618      	mov	r0, r3
 801ef00:	f7ee f83d 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ef04:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ef08:	4619      	mov	r1, r3
 801ef0a:	4620      	mov	r0, r4
 801ef0c:	f7ee fbfb 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ef10:	4603      	mov	r3, r0
 801ef12:	461c      	mov	r4, r3
 801ef14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f7ee fbe8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ef1e:	2c00      	cmp	r4, #0
 801ef20:	d026      	beq.n	801ef70 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801ef22:	1d3b      	adds	r3, r7, #4
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	699a      	ldr	r2, [r3, #24]
 801ef28:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ef2c:	4611      	mov	r1, r2
 801ef2e:	4618      	mov	r0, r3
 801ef30:	f7ee f825 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ef34:	463b      	mov	r3, r7
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	699a      	ldr	r2, [r3, #24]
 801ef3a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ef3e:	4611      	mov	r1, r2
 801ef40:	4618      	mov	r0, r3
 801ef42:	f7ee f81c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ef46:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ef4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ef4e:	4611      	mov	r1, r2
 801ef50:	4618      	mov	r0, r3
 801ef52:	f7ee fbd8 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ef56:	4603      	mov	r3, r0
 801ef58:	461c      	mov	r4, r3
 801ef5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ef5e:	4618      	mov	r0, r3
 801ef60:	f7ee fbc5 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ef64:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f7ee fbc0 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ef6e:	e0f3      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801ef70:	1d3b      	adds	r3, r7, #4
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f103 040c 	add.w	r4, r3, #12
 801ef78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ef7c:	497a      	ldr	r1, [pc, #488]	; (801f168 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ef7e:	4618      	mov	r0, r3
 801ef80:	f7ed fffd 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801ef84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ef88:	4619      	mov	r1, r3
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	f7ee fbbb 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801ef90:	4603      	mov	r3, r0
 801ef92:	461c      	mov	r4, r3
 801ef94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ef98:	4618      	mov	r0, r3
 801ef9a:	f7ee fba8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801ef9e:	2c00      	cmp	r4, #0
 801efa0:	d00b      	beq.n	801efba <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801efa2:	1d3b      	adds	r3, r7, #4
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	699a      	ldr	r2, [r3, #24]
 801efa8:	463b      	mov	r3, r7
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	699b      	ldr	r3, [r3, #24]
 801efae:	429a      	cmp	r2, r3
 801efb0:	bf0c      	ite	eq
 801efb2:	2301      	moveq	r3, #1
 801efb4:	2300      	movne	r3, #0
 801efb6:	b2dc      	uxtb	r4, r3
 801efb8:	e0ce      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801efba:	1d3b      	adds	r3, r7, #4
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	f103 040c 	add.w	r4, r3, #12
 801efc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801efc6:	4969      	ldr	r1, [pc, #420]	; (801f16c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801efc8:	4618      	mov	r0, r3
 801efca:	f7ed ffd8 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801efce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801efd2:	4619      	mov	r1, r3
 801efd4:	4620      	mov	r0, r4
 801efd6:	f7ee fb96 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801efda:	4603      	mov	r3, r0
 801efdc:	461c      	mov	r4, r3
 801efde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801efe2:	4618      	mov	r0, r3
 801efe4:	f7ee fb83 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801efe8:	2c00      	cmp	r4, #0
 801efea:	d00b      	beq.n	801f004 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801efec:	1d3b      	adds	r3, r7, #4
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	699a      	ldr	r2, [r3, #24]
 801eff2:	463b      	mov	r3, r7
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	699b      	ldr	r3, [r3, #24]
 801eff8:	429a      	cmp	r2, r3
 801effa:	bf0c      	ite	eq
 801effc:	2301      	moveq	r3, #1
 801effe:	2300      	movne	r3, #0
 801f000:	b2dc      	uxtb	r4, r3
 801f002:	e0a9      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801f004:	1d3b      	adds	r3, r7, #4
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	f103 040c 	add.w	r4, r3, #12
 801f00c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f010:	4957      	ldr	r1, [pc, #348]	; (801f170 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801f012:	4618      	mov	r0, r3
 801f014:	f7ed ffb3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f018:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f01c:	4619      	mov	r1, r3
 801f01e:	4620      	mov	r0, r4
 801f020:	f7ee fb71 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f024:	4603      	mov	r3, r0
 801f026:	461c      	mov	r4, r3
 801f028:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f02c:	4618      	mov	r0, r3
 801f02e:	f7ee fb5e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f032:	2c00      	cmp	r4, #0
 801f034:	d00b      	beq.n	801f04e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801f036:	1d3b      	adds	r3, r7, #4
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	699a      	ldr	r2, [r3, #24]
 801f03c:	463b      	mov	r3, r7
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	699b      	ldr	r3, [r3, #24]
 801f042:	429a      	cmp	r2, r3
 801f044:	bf0c      	ite	eq
 801f046:	2301      	moveq	r3, #1
 801f048:	2300      	movne	r3, #0
 801f04a:	b2dc      	uxtb	r4, r3
 801f04c:	e084      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801f04e:	1d3b      	adds	r3, r7, #4
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	f103 040c 	add.w	r4, r3, #12
 801f056:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f05a:	4946      	ldr	r1, [pc, #280]	; (801f174 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801f05c:	4618      	mov	r0, r3
 801f05e:	f7ed ff8e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f062:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f066:	4619      	mov	r1, r3
 801f068:	4620      	mov	r0, r4
 801f06a:	f7ee fb4c 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f06e:	4603      	mov	r3, r0
 801f070:	461c      	mov	r4, r3
 801f072:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f076:	4618      	mov	r0, r3
 801f078:	f7ee fb39 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f07c:	2c00      	cmp	r4, #0
 801f07e:	d01c      	beq.n	801f0ba <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801f080:	1d3b      	adds	r3, r7, #4
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	ed93 7b06 	vldr	d7, [r3, #24]
 801f088:	463b      	mov	r3, r7
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	ed93 6b06 	vldr	d6, [r3, #24]
 801f090:	1d3b      	adds	r3, r7, #4
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	ed93 5b08 	vldr	d5, [r3, #32]
 801f098:	eeb0 2a45 	vmov.f32	s4, s10
 801f09c:	eef0 2a65 	vmov.f32	s5, s11
 801f0a0:	eeb0 1a46 	vmov.f32	s2, s12
 801f0a4:	eef0 1a66 	vmov.f32	s3, s13
 801f0a8:	eeb0 0a47 	vmov.f32	s0, s14
 801f0ac:	eef0 0a67 	vmov.f32	s1, s15
 801f0b0:	f7f3 fe18 	bl	8012ce4 <_Z13doubles_equalddd>
 801f0b4:	4603      	mov	r3, r0
 801f0b6:	461c      	mov	r4, r3
 801f0b8:	e04e      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801f0ba:	1d3b      	adds	r3, r7, #4
 801f0bc:	681b      	ldr	r3, [r3, #0]
 801f0be:	f103 040c 	add.w	r4, r3, #12
 801f0c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f0c6:	492c      	ldr	r1, [pc, #176]	; (801f178 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801f0c8:	4618      	mov	r0, r3
 801f0ca:	f7ed ff58 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f0ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f0d2:	4619      	mov	r1, r3
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	f7ee fb16 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f0da:	4603      	mov	r3, r0
 801f0dc:	461c      	mov	r4, r3
 801f0de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f7ee fb03 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f0e8:	2c00      	cmp	r4, #0
 801f0ea:	d01c      	beq.n	801f126 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801f0ec:	1d3b      	adds	r3, r7, #4
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f0f2:	463b      	mov	r3, r7
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f0f8:	429a      	cmp	r2, r3
 801f0fa:	d001      	beq.n	801f100 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801f0fc:	2400      	movs	r4, #0
 801f0fe:	e02b      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801f100:	1d3b      	adds	r3, r7, #4
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	6998      	ldr	r0, [r3, #24]
 801f106:	463b      	mov	r3, r7
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	6999      	ldr	r1, [r3, #24]
 801f10c:	1d3b      	adds	r3, r7, #4
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f112:	461a      	mov	r2, r3
 801f114:	f7ed fe52 	bl	800cdbc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801f118:	4603      	mov	r3, r0
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	bf0c      	ite	eq
 801f11e:	2301      	moveq	r3, #1
 801f120:	2300      	movne	r3, #0
 801f122:	b2dc      	uxtb	r4, r3
 801f124:	e018      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801f126:	1d3b      	adds	r3, r7, #4
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d012      	beq.n	801f156 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801f130:	1d3b      	adds	r3, r7, #4
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801f136:	1d3b      	adds	r3, r7, #4
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	3308      	adds	r3, #8
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	1d3a      	adds	r2, r7, #4
 801f144:	6812      	ldr	r2, [r2, #0]
 801f146:	6991      	ldr	r1, [r2, #24]
 801f148:	463a      	mov	r2, r7
 801f14a:	6812      	ldr	r2, [r2, #0]
 801f14c:	6992      	ldr	r2, [r2, #24]
 801f14e:	4798      	blx	r3
 801f150:	4603      	mov	r3, r0
 801f152:	461c      	mov	r4, r3
 801f154:	e000      	b.n	801f158 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801f156:	2400      	movs	r4, #0
 801f158:	4623      	mov	r3, r4
}
 801f15a:	4618      	mov	r0, r3
 801f15c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801f160:	46bd      	mov	sp, r7
 801f162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f164:	08026be8 	.word	0x08026be8
 801f168:	08026bc8 	.word	0x08026bc8
 801f16c:	08026bd0 	.word	0x08026bd0
 801f170:	08026bdc 	.word	0x08026bdc
 801f174:	08026bc0 	.word	0x08026bc0
 801f178:	08026bf4 	.word	0x08026bf4

0801f17c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801f17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f17e:	b087      	sub	sp, #28
 801f180:	af00      	add	r7, sp, #0
 801f182:	6078      	str	r0, [r7, #4]
 801f184:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	f103 020c 	add.w	r2, r3, #12
 801f18c:	683b      	ldr	r3, [r7, #0]
 801f18e:	330c      	adds	r3, #12
 801f190:	4619      	mov	r1, r3
 801f192:	4610      	mov	r0, r2
 801f194:	f7ee fab7 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f198:	4603      	mov	r3, r0
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d001      	beq.n	801f1a2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801f19e:	2301      	movs	r3, #1
 801f1a0:	e03c      	b.n	801f21c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801f1a2:	2500      	movs	r5, #0
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	f103 040c 	add.w	r4, r3, #12
 801f1aa:	f107 0308 	add.w	r3, r7, #8
 801f1ae:	491d      	ldr	r1, [pc, #116]	; (801f224 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	f7ed fee4 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f1b6:	2601      	movs	r6, #1
 801f1b8:	f107 0308 	add.w	r3, r7, #8
 801f1bc:	4619      	mov	r1, r3
 801f1be:	4620      	mov	r0, r4
 801f1c0:	f7ee faa1 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d014      	beq.n	801f1f4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f1ca:	683b      	ldr	r3, [r7, #0]
 801f1cc:	f103 040c 	add.w	r4, r3, #12
 801f1d0:	f107 0310 	add.w	r3, r7, #16
 801f1d4:	4914      	ldr	r1, [pc, #80]	; (801f228 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f7ed fed1 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f1dc:	2501      	movs	r5, #1
 801f1de:	f107 0310 	add.w	r3, r7, #16
 801f1e2:	4619      	mov	r1, r3
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	f7ee fa8e 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f1ea:	4603      	mov	r3, r0
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d001      	beq.n	801f1f4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f1f0:	2401      	movs	r4, #1
 801f1f2:	e000      	b.n	801f1f6 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801f1f4:	2400      	movs	r4, #0
 801f1f6:	2d00      	cmp	r5, #0
 801f1f8:	d004      	beq.n	801f204 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801f1fa:	f107 0310 	add.w	r3, r7, #16
 801f1fe:	4618      	mov	r0, r3
 801f200:	f7ee fa75 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f204:	2e00      	cmp	r6, #0
 801f206:	d004      	beq.n	801f212 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801f208:	f107 0308 	add.w	r3, r7, #8
 801f20c:	4618      	mov	r0, r3
 801f20e:	f7ee fa6e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f212:	2c00      	cmp	r4, #0
 801f214:	d001      	beq.n	801f21a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801f216:	2301      	movs	r3, #1
 801f218:	e000      	b.n	801f21c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801f21a:	2300      	movs	r3, #0
}
 801f21c:	4618      	mov	r0, r3
 801f21e:	371c      	adds	r7, #28
 801f220:	46bd      	mov	sp, r7
 801f222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f224:	08026bd0 	.word	0x08026bd0
 801f228:	08026bc8 	.word	0x08026bc8

0801f22c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801f22c:	b590      	push	{r4, r7, lr}
 801f22e:	b0b9      	sub	sp, #228	; 0xe4
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
 801f234:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	f103 040c 	add.w	r4, r3, #12
 801f23c:	f107 0308 	add.w	r3, r7, #8
 801f240:	49d4      	ldr	r1, [pc, #848]	; (801f594 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801f242:	4618      	mov	r0, r3
 801f244:	f7ed fe9b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f248:	f107 0308 	add.w	r3, r7, #8
 801f24c:	4619      	mov	r1, r3
 801f24e:	4620      	mov	r0, r4
 801f250:	f7ee fa59 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f254:	4603      	mov	r3, r0
 801f256:	461c      	mov	r4, r3
 801f258:	f107 0308 	add.w	r3, r7, #8
 801f25c:	4618      	mov	r0, r3
 801f25e:	f7ee fa46 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f262:	2c00      	cmp	r4, #0
 801f264:	d007      	beq.n	801f276 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801f266:	683b      	ldr	r3, [r7, #0]
 801f268:	7e1a      	ldrb	r2, [r3, #24]
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	4611      	mov	r1, r2
 801f26e:	4618      	mov	r0, r3
 801f270:	f7ee fcae 	bl	800dbd0 <_Z10StringFromb>
 801f274:	e23f      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801f276:	683b      	ldr	r3, [r7, #0]
 801f278:	f103 040c 	add.w	r4, r3, #12
 801f27c:	f107 0310 	add.w	r3, r7, #16
 801f280:	49c5      	ldr	r1, [pc, #788]	; (801f598 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801f282:	4618      	mov	r0, r3
 801f284:	f7ed fe7b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f288:	f107 0310 	add.w	r3, r7, #16
 801f28c:	4619      	mov	r1, r3
 801f28e:	4620      	mov	r0, r4
 801f290:	f7ee fa39 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f294:	4603      	mov	r3, r0
 801f296:	461c      	mov	r4, r3
 801f298:	f107 0310 	add.w	r3, r7, #16
 801f29c:	4618      	mov	r0, r3
 801f29e:	f7ee fa26 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f2a2:	2c00      	cmp	r4, #0
 801f2a4:	d03b      	beq.n	801f31e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801f2a6:	683b      	ldr	r3, [r7, #0]
 801f2a8:	699a      	ldr	r2, [r3, #24]
 801f2aa:	f107 0320 	add.w	r3, r7, #32
 801f2ae:	4611      	mov	r1, r2
 801f2b0:	4618      	mov	r0, r3
 801f2b2:	f7ee fce3 	bl	800dc7c <_Z10StringFromi>
 801f2b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f2ba:	49b8      	ldr	r1, [pc, #736]	; (801f59c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f2bc:	4618      	mov	r0, r3
 801f2be:	f7ed fe5e 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f2c2:	f107 0318 	add.w	r3, r7, #24
 801f2c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f2ca:	f107 0120 	add.w	r1, r7, #32
 801f2ce:	4618      	mov	r0, r3
 801f2d0:	f7ee fa6f 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	699a      	ldr	r2, [r3, #24]
 801f2d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f2dc:	4611      	mov	r1, r2
 801f2de:	4618      	mov	r0, r3
 801f2e0:	f7ee fdbc 	bl	800de5c <_Z30BracketsFormattedHexStringFromi>
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f2ea:	f107 0118 	add.w	r1, r7, #24
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	f7ee fa5f 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f2f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f2f8:	4618      	mov	r0, r3
 801f2fa:	f7ee f9f8 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f2fe:	f107 0318 	add.w	r3, r7, #24
 801f302:	4618      	mov	r0, r3
 801f304:	f7ee f9f3 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f30c:	4618      	mov	r0, r3
 801f30e:	f7ee f9ee 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f312:	f107 0320 	add.w	r3, r7, #32
 801f316:	4618      	mov	r0, r3
 801f318:	f7ee f9e9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f31c:	e1eb      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	f103 040c 	add.w	r4, r3, #12
 801f324:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f328:	499d      	ldr	r1, [pc, #628]	; (801f5a0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801f32a:	4618      	mov	r0, r3
 801f32c:	f7ed fe27 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f334:	4619      	mov	r1, r3
 801f336:	4620      	mov	r0, r4
 801f338:	f7ee f9e5 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f33c:	4603      	mov	r3, r0
 801f33e:	461c      	mov	r4, r3
 801f340:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f344:	4618      	mov	r0, r3
 801f346:	f7ee f9d2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f34a:	2c00      	cmp	r4, #0
 801f34c:	d03b      	beq.n	801f3c6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801f34e:	683b      	ldr	r3, [r7, #0]
 801f350:	699a      	ldr	r2, [r3, #24]
 801f352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f356:	4611      	mov	r1, r2
 801f358:	4618      	mov	r0, r3
 801f35a:	f7ee fef7 	bl	800e14c <_Z10StringFromj>
 801f35e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f362:	498e      	ldr	r1, [pc, #568]	; (801f59c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f364:	4618      	mov	r0, r3
 801f366:	f7ed fe0a 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f36a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f36e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f372:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801f376:	4618      	mov	r0, r3
 801f378:	f7ee fa1b 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f37c:	683b      	ldr	r3, [r7, #0]
 801f37e:	699a      	ldr	r2, [r3, #24]
 801f380:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f384:	4611      	mov	r1, r2
 801f386:	4618      	mov	r0, r3
 801f388:	f7ee fd84 	bl	800de94 <_Z30BracketsFormattedHexStringFromj>
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801f392:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801f396:	4618      	mov	r0, r3
 801f398:	f7ee fa0b 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f39c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	f7ee f9a4 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f3a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	f7ee f99f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f3b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	f7ee f99a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f3ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f3be:	4618      	mov	r0, r3
 801f3c0:	f7ee f995 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f3c4:	e197      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801f3c6:	683b      	ldr	r3, [r7, #0]
 801f3c8:	f103 040c 	add.w	r4, r3, #12
 801f3cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f3d0:	4974      	ldr	r1, [pc, #464]	; (801f5a4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	f7ed fdd3 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f3d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f3dc:	4619      	mov	r1, r3
 801f3de:	4620      	mov	r0, r4
 801f3e0:	f7ee f991 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f3e4:	4603      	mov	r3, r0
 801f3e6:	461c      	mov	r4, r3
 801f3e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f3ec:	4618      	mov	r0, r3
 801f3ee:	f7ee f97e 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f3f2:	2c00      	cmp	r4, #0
 801f3f4:	d03b      	beq.n	801f46e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801f3f6:	683b      	ldr	r3, [r7, #0]
 801f3f8:	699a      	ldr	r2, [r3, #24]
 801f3fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f3fe:	4611      	mov	r1, r2
 801f400:	4618      	mov	r0, r3
 801f402:	f7ee fc4d 	bl	800dca0 <_Z10StringFroml>
 801f406:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f40a:	4964      	ldr	r1, [pc, #400]	; (801f59c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f40c:	4618      	mov	r0, r3
 801f40e:	f7ed fdb6 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f412:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f416:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801f41a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801f41e:	4618      	mov	r0, r3
 801f420:	f7ee f9c7 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f424:	683b      	ldr	r3, [r7, #0]
 801f426:	699a      	ldr	r2, [r3, #24]
 801f428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f42c:	4611      	mov	r1, r2
 801f42e:	4618      	mov	r0, r3
 801f430:	f7ee fd4c 	bl	800decc <_Z30BracketsFormattedHexStringFroml>
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801f43a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801f43e:	4618      	mov	r0, r3
 801f440:	f7ee f9b7 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f444:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f448:	4618      	mov	r0, r3
 801f44a:	f7ee f950 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f44e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f452:	4618      	mov	r0, r3
 801f454:	f7ee f94b 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f458:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7ee f946 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f466:	4618      	mov	r0, r3
 801f468:	f7ee f941 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f46c:	e143      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801f46e:	683b      	ldr	r3, [r7, #0]
 801f470:	f103 040c 	add.w	r4, r3, #12
 801f474:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f478:	494b      	ldr	r1, [pc, #300]	; (801f5a8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801f47a:	4618      	mov	r0, r3
 801f47c:	f7ed fd7f 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f480:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f484:	4619      	mov	r1, r3
 801f486:	4620      	mov	r0, r4
 801f488:	f7ee f93d 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f48c:	4603      	mov	r3, r0
 801f48e:	461c      	mov	r4, r3
 801f490:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f494:	4618      	mov	r0, r3
 801f496:	f7ee f92a 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f49a:	2c00      	cmp	r4, #0
 801f49c:	d03b      	beq.n	801f516 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801f49e:	683b      	ldr	r3, [r7, #0]
 801f4a0:	699a      	ldr	r2, [r3, #24]
 801f4a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f4a6:	4611      	mov	r1, r2
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	f7ee fe61 	bl	800e170 <_Z10StringFromm>
 801f4ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f4b2:	493a      	ldr	r1, [pc, #232]	; (801f59c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	f7ed fd62 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f4ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f4be:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801f4c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801f4c6:	4618      	mov	r0, r3
 801f4c8:	f7ee f973 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f4cc:	683b      	ldr	r3, [r7, #0]
 801f4ce:	699a      	ldr	r2, [r3, #24]
 801f4d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f4d4:	4611      	mov	r1, r2
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	f7ee fd14 	bl	800df04 <_Z30BracketsFormattedHexStringFromm>
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801f4e2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	f7ee f963 	bl	800d7b2 <_ZNK12SimpleStringplERKS_>
 801f4ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f4f0:	4618      	mov	r0, r3
 801f4f2:	f7ee f8fc 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f4f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f4fa:	4618      	mov	r0, r3
 801f4fc:	f7ee f8f7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f500:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f504:	4618      	mov	r0, r3
 801f506:	f7ee f8f2 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f50a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f50e:	4618      	mov	r0, r3
 801f510:	f7ee f8ed 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f514:	e0ef      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801f516:	683b      	ldr	r3, [r7, #0]
 801f518:	f103 040c 	add.w	r4, r3, #12
 801f51c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f520:	4922      	ldr	r1, [pc, #136]	; (801f5ac <_ZNK14MockNamedValue8toStringEv+0x380>)
 801f522:	4618      	mov	r0, r3
 801f524:	f7ed fd2b 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f528:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f52c:	4619      	mov	r1, r3
 801f52e:	4620      	mov	r0, r4
 801f530:	f7ee f8e9 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f534:	4603      	mov	r3, r0
 801f536:	461c      	mov	r4, r3
 801f538:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f53c:	4618      	mov	r0, r3
 801f53e:	f7ee f8d6 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f542:	2c00      	cmp	r4, #0
 801f544:	d006      	beq.n	801f554 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801f546:	683b      	ldr	r3, [r7, #0]
 801f548:	699b      	ldr	r3, [r3, #24]
 801f54a:	4619      	mov	r1, r3
 801f54c:	6878      	ldr	r0, [r7, #4]
 801f54e:	f7ed fd16 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f552:	e0d0      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801f554:	683b      	ldr	r3, [r7, #0]
 801f556:	f103 040c 	add.w	r4, r3, #12
 801f55a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f55e:	4914      	ldr	r1, [pc, #80]	; (801f5b0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801f560:	4618      	mov	r0, r3
 801f562:	f7ed fd0c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f566:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f56a:	4619      	mov	r1, r3
 801f56c:	4620      	mov	r0, r4
 801f56e:	f7ee f8ca 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f572:	4603      	mov	r3, r0
 801f574:	461c      	mov	r4, r3
 801f576:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7ee f8b7 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f580:	2c00      	cmp	r4, #0
 801f582:	d017      	beq.n	801f5b4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801f584:	683b      	ldr	r3, [r7, #0]
 801f586:	699a      	ldr	r2, [r3, #24]
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	4611      	mov	r1, r2
 801f58c:	4618      	mov	r0, r3
 801f58e:	f7ee fb99 	bl	800dcc4 <_Z10StringFromPKv>
 801f592:	e0b0      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801f594:	08026b20 	.word	0x08026b20
 801f598:	08026b1c 	.word	0x08026b1c
 801f59c:	08026c0c 	.word	0x08026c0c
 801f5a0:	08026b28 	.word	0x08026b28
 801f5a4:	08026b38 	.word	0x08026b38
 801f5a8:	08026b44 	.word	0x08026b44
 801f5ac:	08026be8 	.word	0x08026be8
 801f5b0:	08026bc8 	.word	0x08026bc8
    else if (type_ == "void (*)()")
 801f5b4:	683b      	ldr	r3, [r7, #0]
 801f5b6:	f103 040c 	add.w	r4, r3, #12
 801f5ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f5be:	4950      	ldr	r1, [pc, #320]	; (801f700 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801f5c0:	4618      	mov	r0, r3
 801f5c2:	f7ed fcdc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f5c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f5ca:	4619      	mov	r1, r3
 801f5cc:	4620      	mov	r0, r4
 801f5ce:	f7ee f89a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f5d2:	4603      	mov	r3, r0
 801f5d4:	461c      	mov	r4, r3
 801f5d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7ee f887 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f5e0:	2c00      	cmp	r4, #0
 801f5e2:	d007      	beq.n	801f5f4 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	699a      	ldr	r2, [r3, #24]
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	4611      	mov	r1, r2
 801f5ec:	4618      	mov	r0, r3
 801f5ee:	f7ee fb93 	bl	800dd18 <_Z10StringFromPFvvE>
 801f5f2:	e080      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801f5f4:	683b      	ldr	r3, [r7, #0]
 801f5f6:	f103 040c 	add.w	r4, r3, #12
 801f5fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f5fe:	4941      	ldr	r1, [pc, #260]	; (801f704 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801f600:	4618      	mov	r0, r3
 801f602:	f7ed fcbc 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f606:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f60a:	4619      	mov	r1, r3
 801f60c:	4620      	mov	r0, r4
 801f60e:	f7ee f87a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f612:	4603      	mov	r3, r0
 801f614:	461c      	mov	r4, r3
 801f616:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f61a:	4618      	mov	r0, r3
 801f61c:	f7ee f867 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f620:	2c00      	cmp	r4, #0
 801f622:	d007      	beq.n	801f634 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801f624:	683b      	ldr	r3, [r7, #0]
 801f626:	699a      	ldr	r2, [r3, #24]
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	4611      	mov	r1, r2
 801f62c:	4618      	mov	r0, r3
 801f62e:	f7ee fb49 	bl	800dcc4 <_Z10StringFromPKv>
 801f632:	e060      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801f634:	683b      	ldr	r3, [r7, #0]
 801f636:	f103 040c 	add.w	r4, r3, #12
 801f63a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f63e:	4932      	ldr	r1, [pc, #200]	; (801f708 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801f640:	4618      	mov	r0, r3
 801f642:	f7ed fc9c 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f646:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f64a:	4619      	mov	r1, r3
 801f64c:	4620      	mov	r0, r4
 801f64e:	f7ee f85a 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f652:	4603      	mov	r3, r0
 801f654:	461c      	mov	r4, r3
 801f656:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f65a:	4618      	mov	r0, r3
 801f65c:	f7ee f847 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f660:	2c00      	cmp	r4, #0
 801f662:	d00c      	beq.n	801f67e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801f664:	683b      	ldr	r3, [r7, #0]
 801f666:	ed93 7b06 	vldr	d7, [r3, #24]
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	2106      	movs	r1, #6
 801f66e:	eeb0 0a47 	vmov.f32	s0, s14
 801f672:	eef0 0a67 	vmov.f32	s1, s15
 801f676:	4618      	mov	r0, r3
 801f678:	f7ee fcfe 	bl	800e078 <_Z10StringFromdi>
 801f67c:	e03b      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801f67e:	683b      	ldr	r3, [r7, #0]
 801f680:	f103 040c 	add.w	r4, r3, #12
 801f684:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f688:	4920      	ldr	r1, [pc, #128]	; (801f70c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801f68a:	4618      	mov	r0, r3
 801f68c:	f7ed fc77 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801f690:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f694:	4619      	mov	r1, r3
 801f696:	4620      	mov	r0, r4
 801f698:	f7ee f835 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f69c:	4603      	mov	r3, r0
 801f69e:	461c      	mov	r4, r3
 801f6a0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f7ee f822 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f6aa:	2c00      	cmp	r4, #0
 801f6ac:	d008      	beq.n	801f6c0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801f6ae:	683b      	ldr	r3, [r7, #0]
 801f6b0:	6999      	ldr	r1, [r3, #24]
 801f6b2:	683b      	ldr	r3, [r7, #0]
 801f6b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	f7ee fe71 	bl	800e3a0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801f6be:	e01a      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801f6c0:	683b      	ldr	r3, [r7, #0]
 801f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d00b      	beq.n	801f6e0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801f6c8:	683b      	ldr	r3, [r7, #0]
 801f6ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801f6cc:	683b      	ldr	r3, [r7, #0]
 801f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	330c      	adds	r3, #12
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	683a      	ldr	r2, [r7, #0]
 801f6d8:	6992      	ldr	r2, [r2, #24]
 801f6da:	6878      	ldr	r0, [r7, #4]
 801f6dc:	4798      	blx	r3
 801f6de:	e00a      	b.n	801f6f6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801f6e0:	683b      	ldr	r3, [r7, #0]
 801f6e2:	330c      	adds	r3, #12
 801f6e4:	4618      	mov	r0, r3
 801f6e6:	f7ed ffd5 	bl	800d694 <_ZNK12SimpleString12asCharStringEv>
 801f6ea:	4602      	mov	r2, r0
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	4908      	ldr	r1, [pc, #32]	; (801f710 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801f6f0:	4618      	mov	r0, r3
 801f6f2:	f7ee fd03 	bl	800e0fc <_Z16StringFromFormatPKcz>

}
 801f6f6:	6878      	ldr	r0, [r7, #4]
 801f6f8:	37e4      	adds	r7, #228	; 0xe4
 801f6fa:	46bd      	mov	sp, r7
 801f6fc:	bd90      	pop	{r4, r7, pc}
 801f6fe:	bf00      	nop
 801f700:	08026bdc 	.word	0x08026bdc
 801f704:	08026bd0 	.word	0x08026bd0
 801f708:	08026bc0 	.word	0x08026bc0
 801f70c:	08026bf4 	.word	0x08026bf4
 801f710:	08026c10 	.word	0x08026c10

0801f714 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801f714:	b480      	push	{r7}
 801f716:	b083      	sub	sp, #12
 801f718:	af00      	add	r7, sp, #0
 801f71a:	6078      	str	r0, [r7, #4]
 801f71c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	683a      	ldr	r2, [r7, #0]
 801f722:	605a      	str	r2, [r3, #4]
}
 801f724:	bf00      	nop
 801f726:	370c      	adds	r7, #12
 801f728:	46bd      	mov	sp, r7
 801f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72e:	4770      	bx	lr

0801f730 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801f730:	b480      	push	{r7}
 801f732:	b083      	sub	sp, #12
 801f734:	af00      	add	r7, sp, #0
 801f736:	6078      	str	r0, [r7, #4]
    return next_;
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	685b      	ldr	r3, [r3, #4]
}
 801f73c:	4618      	mov	r0, r3
 801f73e:	370c      	adds	r7, #12
 801f740:	46bd      	mov	sp, r7
 801f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f746:	4770      	bx	lr

0801f748 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801f748:	b480      	push	{r7}
 801f74a:	b083      	sub	sp, #12
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	6078      	str	r0, [r7, #4]
    return data_;
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	681b      	ldr	r3, [r3, #0]
}
 801f754:	4618      	mov	r0, r3
 801f756:	370c      	adds	r7, #12
 801f758:	46bd      	mov	sp, r7
 801f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f75e:	4770      	bx	lr

0801f760 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801f760:	b580      	push	{r7, lr}
 801f762:	b082      	sub	sp, #8
 801f764:	af00      	add	r7, sp, #0
 801f766:	6078      	str	r0, [r7, #4]
    delete data_;
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	681b      	ldr	r3, [r3, #0]
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d004      	beq.n	801f77a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801f770:	681a      	ldr	r2, [r3, #0]
 801f772:	3204      	adds	r2, #4
 801f774:	6812      	ldr	r2, [r2, #0]
 801f776:	4618      	mov	r0, r3
 801f778:	4790      	blx	r2
}
 801f77a:	bf00      	nop
 801f77c:	3708      	adds	r7, #8
 801f77e:	46bd      	mov	sp, r7
 801f780:	bd80      	pop	{r7, pc}

0801f782 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801f782:	b480      	push	{r7}
 801f784:	b083      	sub	sp, #12
 801f786:	af00      	add	r7, sp, #0
 801f788:	6078      	str	r0, [r7, #4]
 801f78a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	683a      	ldr	r2, [r7, #0]
 801f790:	601a      	str	r2, [r3, #0]
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	2200      	movs	r2, #0
 801f796:	605a      	str	r2, [r3, #4]
{
}
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	4618      	mov	r0, r3
 801f79c:	370c      	adds	r7, #12
 801f79e:	46bd      	mov	sp, r7
 801f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7a4:	4770      	bx	lr

0801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801f7a6:	b580      	push	{r7, lr}
 801f7a8:	b082      	sub	sp, #8
 801f7aa:	af00      	add	r7, sp, #0
 801f7ac:	6078      	str	r0, [r7, #4]
 801f7ae:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801f7b0:	683b      	ldr	r3, [r7, #0]
 801f7b2:	6819      	ldr	r1, [r3, #0]
 801f7b4:	683b      	ldr	r3, [r7, #0]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	335c      	adds	r3, #92	; 0x5c
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	687a      	ldr	r2, [r7, #4]
 801f7c0:	4610      	mov	r0, r2
 801f7c2:	4798      	blx	r3
}
 801f7c4:	6878      	ldr	r0, [r7, #4]
 801f7c6:	3708      	adds	r7, #8
 801f7c8:	46bd      	mov	sp, r7
 801f7ca:	bd80      	pop	{r7, pc}

0801f7cc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b082      	sub	sp, #8
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	6078      	str	r0, [r7, #4]
 801f7d4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801f7d6:	683b      	ldr	r3, [r7, #0]
 801f7d8:	6819      	ldr	r1, [r3, #0]
 801f7da:	683b      	ldr	r3, [r7, #0]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	3360      	adds	r3, #96	; 0x60
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	687a      	ldr	r2, [r7, #4]
 801f7e6:	4610      	mov	r0, r2
 801f7e8:	4798      	blx	r3
}
 801f7ea:	6878      	ldr	r0, [r7, #4]
 801f7ec:	3708      	adds	r7, #8
 801f7ee:	46bd      	mov	sp, r7
 801f7f0:	bd80      	pop	{r7, pc}

0801f7f2 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801f7f2:	b480      	push	{r7}
 801f7f4:	b083      	sub	sp, #12
 801f7f6:	af00      	add	r7, sp, #0
 801f7f8:	6078      	str	r0, [r7, #4]
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	2200      	movs	r2, #0
 801f7fe:	601a      	str	r2, [r3, #0]
{
}
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	4618      	mov	r0, r3
 801f804:	370c      	adds	r7, #12
 801f806:	46bd      	mov	sp, r7
 801f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f80c:	4770      	bx	lr

0801f80e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801f80e:	b580      	push	{r7, lr}
 801f810:	b084      	sub	sp, #16
 801f812:	af00      	add	r7, sp, #0
 801f814:	6078      	str	r0, [r7, #4]
    while (head_) {
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d016      	beq.n	801f84c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	4618      	mov	r0, r3
 801f824:	f7ff ff84 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801f828:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	4618      	mov	r0, r3
 801f830:	f7ff ff96 	bl	801f760 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d003      	beq.n	801f844 <_ZN18MockNamedValueList5clearEv+0x36>
 801f83c:	2108      	movs	r1, #8
 801f83e:	4618      	mov	r0, r3
 801f840:	f7ea ffee 	bl	800a820 <_ZdlPvj>
        head_ = n;
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	68fa      	ldr	r2, [r7, #12]
 801f848:	601a      	str	r2, [r3, #0]
    while (head_) {
 801f84a:	e7e4      	b.n	801f816 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801f84c:	bf00      	nop
 801f84e:	3710      	adds	r7, #16
 801f850:	46bd      	mov	sp, r7
 801f852:	bd80      	pop	{r7, pc}

0801f854 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801f854:	b590      	push	{r4, r7, lr}
 801f856:	b085      	sub	sp, #20
 801f858:	af00      	add	r7, sp, #0
 801f85a:	6078      	str	r0, [r7, #4]
 801f85c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801f85e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801f862:	4916      	ldr	r1, [pc, #88]	; (801f8bc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801f864:	2008      	movs	r0, #8
 801f866:	f7ea ffc7 	bl	800a7f8 <_ZnwjPKci>
 801f86a:	4604      	mov	r4, r0
 801f86c:	6839      	ldr	r1, [r7, #0]
 801f86e:	4620      	mov	r0, r4
 801f870:	f7ff ff87 	bl	801f782 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801f874:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d103      	bne.n	801f886 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	68ba      	ldr	r2, [r7, #8]
 801f882:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801f884:	e016      	b.n	801f8b4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801f88c:	68f8      	ldr	r0, [r7, #12]
 801f88e:	f7ff ff4f 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801f892:	4603      	mov	r3, r0
 801f894:	2b00      	cmp	r3, #0
 801f896:	bf14      	ite	ne
 801f898:	2301      	movne	r3, #1
 801f89a:	2300      	moveq	r3, #0
 801f89c:	b2db      	uxtb	r3, r3
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d004      	beq.n	801f8ac <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801f8a2:	68f8      	ldr	r0, [r7, #12]
 801f8a4:	f7ff ff44 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801f8a8:	60f8      	str	r0, [r7, #12]
 801f8aa:	e7ef      	b.n	801f88c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801f8ac:	68b9      	ldr	r1, [r7, #8]
 801f8ae:	68f8      	ldr	r0, [r7, #12]
 801f8b0:	f7ff ff30 	bl	801f714 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801f8b4:	bf00      	nop
 801f8b6:	3714      	adds	r7, #20
 801f8b8:	46bd      	mov	sp, r7
 801f8ba:	bd90      	pop	{r4, r7, pc}
 801f8bc:	08026b58 	.word	0x08026b58

0801f8c0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801f8c0:	b590      	push	{r4, r7, lr}
 801f8c2:	b087      	sub	sp, #28
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
 801f8c8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	617b      	str	r3, [r7, #20]
 801f8d0:	697b      	ldr	r3, [r7, #20]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d01e      	beq.n	801f914 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801f8d6:	f107 030c 	add.w	r3, r7, #12
 801f8da:	6979      	ldr	r1, [r7, #20]
 801f8dc:	4618      	mov	r0, r3
 801f8de:	f7ff ff62 	bl	801f7a6 <_ZNK22MockNamedValueListNode7getNameEv>
 801f8e2:	f107 030c 	add.w	r3, r7, #12
 801f8e6:	6839      	ldr	r1, [r7, #0]
 801f8e8:	4618      	mov	r0, r3
 801f8ea:	f7ed ff0c 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801f8ee:	4603      	mov	r3, r0
 801f8f0:	461c      	mov	r4, r3
 801f8f2:	f107 030c 	add.w	r3, r7, #12
 801f8f6:	4618      	mov	r0, r3
 801f8f8:	f7ed fef9 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801f8fc:	2c00      	cmp	r4, #0
 801f8fe:	d004      	beq.n	801f90a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801f900:	6978      	ldr	r0, [r7, #20]
 801f902:	f7ff ff21 	bl	801f748 <_ZN22MockNamedValueListNode4itemEv>
 801f906:	4603      	mov	r3, r0
 801f908:	e005      	b.n	801f916 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801f90a:	6978      	ldr	r0, [r7, #20]
 801f90c:	f7ff ff10 	bl	801f730 <_ZN22MockNamedValueListNode4nextEv>
 801f910:	6178      	str	r0, [r7, #20]
 801f912:	e7dd      	b.n	801f8d0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801f914:	2300      	movs	r3, #0
}
 801f916:	4618      	mov	r0, r3
 801f918:	371c      	adds	r7, #28
 801f91a:	46bd      	mov	sp, r7
 801f91c:	bd90      	pop	{r4, r7, pc}

0801f91e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801f91e:	b480      	push	{r7}
 801f920:	b083      	sub	sp, #12
 801f922:	af00      	add	r7, sp, #0
 801f924:	6078      	str	r0, [r7, #4]
    return head_;
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	681b      	ldr	r3, [r3, #0]
}
 801f92a:	4618      	mov	r0, r3
 801f92c:	370c      	adds	r7, #12
 801f92e:	46bd      	mov	sp, r7
 801f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f934:	4770      	bx	lr

0801f936 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f936:	b580      	push	{r7, lr}
 801f938:	b084      	sub	sp, #16
 801f93a:	af00      	add	r7, sp, #0
 801f93c:	60f8      	str	r0, [r7, #12]
 801f93e:	60b9      	str	r1, [r7, #8]
 801f940:	607a      	str	r2, [r7, #4]
 801f942:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801f944:	68fb      	ldr	r3, [r7, #12]
 801f946:	68b9      	ldr	r1, [r7, #8]
 801f948:	4618      	mov	r0, r3
 801f94a:	f7ed fb6c 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	687a      	ldr	r2, [r7, #4]
 801f952:	609a      	str	r2, [r3, #8]
 801f954:	68fb      	ldr	r3, [r7, #12]
 801f956:	2200      	movs	r2, #0
 801f958:	60da      	str	r2, [r3, #12]
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	683a      	ldr	r2, [r7, #0]
 801f95e:	611a      	str	r2, [r3, #16]
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	4618      	mov	r0, r3
 801f964:	3710      	adds	r7, #16
 801f966:	46bd      	mov	sp, r7
 801f968:	bd80      	pop	{r7, pc}

0801f96a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f96a:	b580      	push	{r7, lr}
 801f96c:	b084      	sub	sp, #16
 801f96e:	af00      	add	r7, sp, #0
 801f970:	60f8      	str	r0, [r7, #12]
 801f972:	60b9      	str	r1, [r7, #8]
 801f974:	607a      	str	r2, [r7, #4]
 801f976:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	68b9      	ldr	r1, [r7, #8]
 801f97c:	4618      	mov	r0, r3
 801f97e:	f7ed fb52 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	2200      	movs	r2, #0
 801f986:	609a      	str	r2, [r3, #8]
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	687a      	ldr	r2, [r7, #4]
 801f98c:	60da      	str	r2, [r3, #12]
 801f98e:	68fb      	ldr	r3, [r7, #12]
 801f990:	683a      	ldr	r2, [r7, #0]
 801f992:	611a      	str	r2, [r3, #16]
 801f994:	68fb      	ldr	r3, [r7, #12]
 801f996:	4618      	mov	r0, r3
 801f998:	3710      	adds	r7, #16
 801f99a:	46bd      	mov	sp, r7
 801f99c:	bd80      	pop	{r7, pc}

0801f99e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801f99e:	b580      	push	{r7, lr}
 801f9a0:	b084      	sub	sp, #16
 801f9a2:	af00      	add	r7, sp, #0
 801f9a4:	60f8      	str	r0, [r7, #12]
 801f9a6:	60b9      	str	r1, [r7, #8]
 801f9a8:	607a      	str	r2, [r7, #4]
 801f9aa:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	68b9      	ldr	r1, [r7, #8]
 801f9b0:	4618      	mov	r0, r3
 801f9b2:	f7ed fb38 	bl	800d026 <_ZN12SimpleStringC1ERKS_>
 801f9b6:	68fb      	ldr	r3, [r7, #12]
 801f9b8:	687a      	ldr	r2, [r7, #4]
 801f9ba:	609a      	str	r2, [r3, #8]
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	683a      	ldr	r2, [r7, #0]
 801f9c0:	60da      	str	r2, [r3, #12]
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	69ba      	ldr	r2, [r7, #24]
 801f9c6:	611a      	str	r2, [r3, #16]
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	3710      	adds	r7, #16
 801f9ce:	46bd      	mov	sp, r7
 801f9d0:	bd80      	pop	{r7, pc}
	...

0801f9d4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801f9d4:	b480      	push	{r7}
 801f9d6:	b083      	sub	sp, #12
 801f9d8:	af00      	add	r7, sp, #0
 801f9da:	6078      	str	r0, [r7, #4]
 801f9dc:	4a06      	ldr	r2, [pc, #24]	; (801f9f8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	601a      	str	r2, [r3, #0]
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	2200      	movs	r2, #0
 801f9e6:	605a      	str	r2, [r3, #4]
{

}
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	4618      	mov	r0, r3
 801f9ec:	370c      	adds	r7, #12
 801f9ee:	46bd      	mov	sp, r7
 801f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f4:	4770      	bx	lr
 801f9f6:	bf00      	nop
 801f9f8:	0802976c 	.word	0x0802976c

0801f9fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801f9fc:	b580      	push	{r7, lr}
 801f9fe:	b082      	sub	sp, #8
 801fa00:	af00      	add	r7, sp, #0
 801fa02:	6078      	str	r0, [r7, #4]
 801fa04:	4a05      	ldr	r2, [pc, #20]	; (801fa1c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	601a      	str	r2, [r3, #0]
{
    clear();
 801fa0a:	6878      	ldr	r0, [r7, #4]
 801fa0c:	f000 f825 	bl	801fa5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	4618      	mov	r0, r3
 801fa14:	3708      	adds	r7, #8
 801fa16:	46bd      	mov	sp, r7
 801fa18:	bd80      	pop	{r7, pc}
 801fa1a:	bf00      	nop
 801fa1c:	0802976c 	.word	0x0802976c

0801fa20 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801fa20:	b580      	push	{r7, lr}
 801fa22:	b082      	sub	sp, #8
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	6078      	str	r0, [r7, #4]
}
 801fa28:	6878      	ldr	r0, [r7, #4]
 801fa2a:	f7ff ffe7 	bl	801f9fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801fa2e:	2108      	movs	r1, #8
 801fa30:	6878      	ldr	r0, [r7, #4]
 801fa32:	f7ea fef5 	bl	800a820 <_ZdlPvj>
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	4618      	mov	r0, r3
 801fa3a:	3708      	adds	r7, #8
 801fa3c:	46bd      	mov	sp, r7
 801fa3e:	bd80      	pop	{r7, pc}

0801fa40 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801fa40:	b580      	push	{r7, lr}
 801fa42:	b082      	sub	sp, #8
 801fa44:	af00      	add	r7, sp, #0
 801fa46:	6078      	str	r0, [r7, #4]
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	4618      	mov	r0, r3
 801fa4c:	f7ed fe4f 	bl	800d6ee <_ZN12SimpleStringD1Ev>
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	4618      	mov	r0, r3
 801fa54:	3708      	adds	r7, #8
 801fa56:	46bd      	mov	sp, r7
 801fa58:	bd80      	pop	{r7, pc}

0801fa5a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801fa5a:	b590      	push	{r4, r7, lr}
 801fa5c:	b085      	sub	sp, #20
 801fa5e:	af00      	add	r7, sp, #0
 801fa60:	6078      	str	r0, [r7, #4]
    while (head_) {
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	685b      	ldr	r3, [r3, #4]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d012      	beq.n	801fa90 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	685b      	ldr	r3, [r3, #4]
 801fa6e:	691b      	ldr	r3, [r3, #16]
 801fa70:	60fb      	str	r3, [r7, #12]
        delete head_;
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	685c      	ldr	r4, [r3, #4]
 801fa76:	2c00      	cmp	r4, #0
 801fa78:	d006      	beq.n	801fa88 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801fa7a:	4620      	mov	r0, r4
 801fa7c:	f7ff ffe0 	bl	801fa40 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801fa80:	2114      	movs	r1, #20
 801fa82:	4620      	mov	r0, r4
 801fa84:	f7ea fecc 	bl	800a820 <_ZdlPvj>
        head_ = next;
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	68fa      	ldr	r2, [r7, #12]
 801fa8c:	605a      	str	r2, [r3, #4]
    while (head_) {
 801fa8e:	e7e8      	b.n	801fa62 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801fa90:	bf00      	nop
 801fa92:	3714      	adds	r7, #20
 801fa94:	46bd      	mov	sp, r7
 801fa96:	bd90      	pop	{r4, r7, pc}

0801fa98 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801fa98:	b590      	push	{r4, r7, lr}
 801fa9a:	b085      	sub	sp, #20
 801fa9c:	af00      	add	r7, sp, #0
 801fa9e:	60f8      	str	r0, [r7, #12]
 801faa0:	60b9      	str	r1, [r7, #8]
 801faa2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801faa4:	f240 227a 	movw	r2, #634	; 0x27a
 801faa8:	4908      	ldr	r1, [pc, #32]	; (801facc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801faaa:	2014      	movs	r0, #20
 801faac:	f7ea fea4 	bl	800a7f8 <_ZnwjPKci>
 801fab0:	4604      	mov	r4, r0
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	685b      	ldr	r3, [r3, #4]
 801fab6:	687a      	ldr	r2, [r7, #4]
 801fab8:	68b9      	ldr	r1, [r7, #8]
 801faba:	4620      	mov	r0, r4
 801fabc:	f7ff ff3b 	bl	801f936 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	605c      	str	r4, [r3, #4]
}
 801fac4:	bf00      	nop
 801fac6:	3714      	adds	r7, #20
 801fac8:	46bd      	mov	sp, r7
 801faca:	bd90      	pop	{r4, r7, pc}
 801facc:	08026b58 	.word	0x08026b58

0801fad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801fad0:	b590      	push	{r4, r7, lr}
 801fad2:	b085      	sub	sp, #20
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	60f8      	str	r0, [r7, #12]
 801fad8:	60b9      	str	r1, [r7, #8]
 801fada:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801fadc:	f240 227f 	movw	r2, #639	; 0x27f
 801fae0:	4908      	ldr	r1, [pc, #32]	; (801fb04 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801fae2:	2014      	movs	r0, #20
 801fae4:	f7ea fe88 	bl	800a7f8 <_ZnwjPKci>
 801fae8:	4604      	mov	r4, r0
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	685b      	ldr	r3, [r3, #4]
 801faee:	687a      	ldr	r2, [r7, #4]
 801faf0:	68b9      	ldr	r1, [r7, #8]
 801faf2:	4620      	mov	r0, r4
 801faf4:	f7ff ff39 	bl	801f96a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801faf8:	68fb      	ldr	r3, [r7, #12]
 801fafa:	605c      	str	r4, [r3, #4]
}
 801fafc:	bf00      	nop
 801fafe:	3714      	adds	r7, #20
 801fb00:	46bd      	mov	sp, r7
 801fb02:	bd90      	pop	{r4, r7, pc}
 801fb04:	08026b58 	.word	0x08026b58

0801fb08 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801fb08:	b580      	push	{r7, lr}
 801fb0a:	b084      	sub	sp, #16
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
 801fb10:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	685b      	ldr	r3, [r3, #4]
 801fb16:	60fb      	str	r3, [r7, #12]
 801fb18:	68fb      	ldr	r3, [r7, #12]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d017      	beq.n	801fb4e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	6839      	ldr	r1, [r7, #0]
 801fb22:	4618      	mov	r0, r3
 801fb24:	f7ed fdef 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801fb28:	4603      	mov	r3, r0
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	d005      	beq.n	801fb3a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801fb2e:	68fb      	ldr	r3, [r7, #12]
 801fb30:	689b      	ldr	r3, [r3, #8]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d001      	beq.n	801fb3a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801fb36:	2301      	movs	r3, #1
 801fb38:	e000      	b.n	801fb3c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801fb3a:	2300      	movs	r3, #0
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d002      	beq.n	801fb46 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	689b      	ldr	r3, [r3, #8]
 801fb44:	e004      	b.n	801fb50 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	691b      	ldr	r3, [r3, #16]
 801fb4a:	60fb      	str	r3, [r7, #12]
 801fb4c:	e7e4      	b.n	801fb18 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801fb4e:	2300      	movs	r3, #0
}
 801fb50:	4618      	mov	r0, r3
 801fb52:	3710      	adds	r7, #16
 801fb54:	46bd      	mov	sp, r7
 801fb56:	bd80      	pop	{r7, pc}

0801fb58 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801fb58:	b580      	push	{r7, lr}
 801fb5a:	b084      	sub	sp, #16
 801fb5c:	af00      	add	r7, sp, #0
 801fb5e:	6078      	str	r0, [r7, #4]
 801fb60:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	685b      	ldr	r3, [r3, #4]
 801fb66:	60fb      	str	r3, [r7, #12]
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	d017      	beq.n	801fb9e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801fb6e:	68fb      	ldr	r3, [r7, #12]
 801fb70:	6839      	ldr	r1, [r7, #0]
 801fb72:	4618      	mov	r0, r3
 801fb74:	f7ed fdc7 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801fb78:	4603      	mov	r3, r0
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d005      	beq.n	801fb8a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801fb7e:	68fb      	ldr	r3, [r7, #12]
 801fb80:	68db      	ldr	r3, [r3, #12]
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d001      	beq.n	801fb8a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801fb86:	2301      	movs	r3, #1
 801fb88:	e000      	b.n	801fb8c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	d002      	beq.n	801fb96 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	68db      	ldr	r3, [r3, #12]
 801fb94:	e004      	b.n	801fba0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	691b      	ldr	r3, [r3, #16]
 801fb9a:	60fb      	str	r3, [r7, #12]
 801fb9c:	e7e4      	b.n	801fb68 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801fb9e:	2300      	movs	r3, #0
}
 801fba0:	4618      	mov	r0, r3
 801fba2:	3710      	adds	r7, #16
 801fba4:	46bd      	mov	sp, r7
 801fba6:	bd80      	pop	{r7, pc}

0801fba8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801fba8:	b590      	push	{r4, r7, lr}
 801fbaa:	b087      	sub	sp, #28
 801fbac:	af02      	add	r7, sp, #8
 801fbae:	6078      	str	r0, [r7, #4]
 801fbb0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801fbb2:	683b      	ldr	r3, [r7, #0]
 801fbb4:	685b      	ldr	r3, [r3, #4]
 801fbb6:	60fb      	str	r3, [r7, #12]
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d018      	beq.n	801fbf0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801fbbe:	f240 2293 	movw	r2, #659	; 0x293
 801fbc2:	490d      	ldr	r1, [pc, #52]	; (801fbf8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801fbc4:	2014      	movs	r0, #20
 801fbc6:	f7ea fe17 	bl	800a7f8 <_ZnwjPKci>
 801fbca:	4604      	mov	r4, r0
 801fbcc:	68f9      	ldr	r1, [r7, #12]
 801fbce:	68fb      	ldr	r3, [r7, #12]
 801fbd0:	689a      	ldr	r2, [r3, #8]
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	68d8      	ldr	r0, [r3, #12]
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	685b      	ldr	r3, [r3, #4]
 801fbda:	9300      	str	r3, [sp, #0]
 801fbdc:	4603      	mov	r3, r0
 801fbde:	4620      	mov	r0, r4
 801fbe0:	f7ff fedd 	bl	801f99e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801fbe8:	68fb      	ldr	r3, [r7, #12]
 801fbea:	691b      	ldr	r3, [r3, #16]
 801fbec:	60fb      	str	r3, [r7, #12]
 801fbee:	e7e3      	b.n	801fbb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801fbf0:	bf00      	nop
 801fbf2:	3714      	adds	r7, #20
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd90      	pop	{r4, r7, pc}
 801fbf8:	08026b58 	.word	0x08026b58

0801fbfc <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801fbfc:	b580      	push	{r7, lr}
 801fbfe:	b082      	sub	sp, #8
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	6078      	str	r0, [r7, #4]
 801fc04:	6039      	str	r1, [r7, #0]
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	490b      	ldr	r1, [pc, #44]	; (801fc38 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801fc0a:	4618      	mov	r0, r3
 801fc0c:	f7ed f9b7 	bl	800cf7e <_ZN12SimpleStringC1EPKc>
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	2200      	movs	r2, #0
 801fc14:	721a      	strb	r2, [r3, #8]
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	2200      	movs	r2, #0
 801fc1a:	725a      	strb	r2, [r3, #9]
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	2200      	movs	r2, #0
 801fc20:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	6839      	ldr	r1, [r7, #0]
 801fc26:	4618      	mov	r0, r3
 801fc28:	f7ed fa15 	bl	800d056 <_ZN12SimpleStringaSERKS_>
}
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	4618      	mov	r0, r3
 801fc30:	3708      	adds	r7, #8
 801fc32:	46bd      	mov	sp, r7
 801fc34:	bd80      	pop	{r7, pc}
 801fc36:	bf00      	nop
 801fc38:	08026c34 	.word	0x08026c34

0801fc3c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801fc3c:	b480      	push	{r7}
 801fc3e:	b083      	sub	sp, #12
 801fc40:	af00      	add	r7, sp, #0
 801fc42:	6078      	str	r0, [r7, #4]
 801fc44:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	683a      	ldr	r2, [r7, #0]
 801fc4a:	60da      	str	r2, [r3, #12]
    return this;
 801fc4c:	687b      	ldr	r3, [r7, #4]
}
 801fc4e:	4618      	mov	r0, r3
 801fc50:	370c      	adds	r7, #12
 801fc52:	46bd      	mov	sp, r7
 801fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc58:	4770      	bx	lr

0801fc5a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801fc5a:	b480      	push	{r7}
 801fc5c:	b083      	sub	sp, #12
 801fc5e:	af00      	add	r7, sp, #0
 801fc60:	6078      	str	r0, [r7, #4]
    return next_;
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	68db      	ldr	r3, [r3, #12]
}
 801fc66:	4618      	mov	r0, r3
 801fc68:	370c      	adds	r7, #12
 801fc6a:	46bd      	mov	sp, r7
 801fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc70:	4770      	bx	lr

0801fc72 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801fc72:	b480      	push	{r7}
 801fc74:	b083      	sub	sp, #12
 801fc76:	af00      	add	r7, sp, #0
 801fc78:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	2201      	movs	r2, #1
 801fc7e:	721a      	strb	r2, [r3, #8]
}
 801fc80:	bf00      	nop
 801fc82:	370c      	adds	r7, #12
 801fc84:	46bd      	mov	sp, r7
 801fc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc8a:	4770      	bx	lr

0801fc8c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801fc8c:	b480      	push	{r7}
 801fc8e:	b083      	sub	sp, #12
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	2201      	movs	r2, #1
 801fc98:	725a      	strb	r2, [r3, #9]
}
 801fc9a:	bf00      	nop
 801fc9c:	370c      	adds	r7, #12
 801fc9e:	46bd      	mov	sp, r7
 801fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fca4:	4770      	bx	lr

0801fca6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801fca6:	b580      	push	{r7, lr}
 801fca8:	b084      	sub	sp, #16
 801fcaa:	af00      	add	r7, sp, #0
 801fcac:	6078      	str	r0, [r7, #4]
 801fcae:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801fcb0:	2300      	movs	r3, #0
 801fcb2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	7a1b      	ldrb	r3, [r3, #8]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d007      	beq.n	801fccc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	4619      	mov	r1, r3
 801fcc0:	6838      	ldr	r0, [r7, #0]
 801fcc2:	f7ed fd20 	bl	800d706 <_ZeqRK12SimpleStringS1_>
 801fcc6:	4603      	mov	r3, r0
 801fcc8:	73fb      	strb	r3, [r7, #15]
 801fcca:	e006      	b.n	801fcda <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	4619      	mov	r1, r3
 801fcd0:	6838      	ldr	r0, [r7, #0]
 801fcd2:	f7ed f9d2 	bl	800d07a <_ZNK12SimpleString8containsERKS_>
 801fcd6:	4603      	mov	r3, r0
 801fcd8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	7a5b      	ldrb	r3, [r3, #9]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d004      	beq.n	801fcec <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801fce2:	7bfb      	ldrb	r3, [r7, #15]
 801fce4:	f083 0301 	eor.w	r3, r3, #1
 801fce8:	b2db      	uxtb	r3, r3
 801fcea:	e005      	b.n	801fcf8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801fcec:	7bfb      	ldrb	r3, [r7, #15]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	bf14      	ite	ne
 801fcf2:	2301      	movne	r3, #1
 801fcf4:	2300      	moveq	r3, #0
 801fcf6:	b2db      	uxtb	r3, r3
}
 801fcf8:	4618      	mov	r0, r3
 801fcfa:	3710      	adds	r7, #16
 801fcfc:	46bd      	mov	sp, r7
 801fcfe:	bd80      	pop	{r7, pc}

0801fd00 <__cxa_guard_acquire>:
 801fd00:	6803      	ldr	r3, [r0, #0]
 801fd02:	07db      	lsls	r3, r3, #31
 801fd04:	d406      	bmi.n	801fd14 <__cxa_guard_acquire+0x14>
 801fd06:	7843      	ldrb	r3, [r0, #1]
 801fd08:	b103      	cbz	r3, 801fd0c <__cxa_guard_acquire+0xc>
 801fd0a:	deff      	udf	#255	; 0xff
 801fd0c:	2301      	movs	r3, #1
 801fd0e:	7043      	strb	r3, [r0, #1]
 801fd10:	4618      	mov	r0, r3
 801fd12:	4770      	bx	lr
 801fd14:	2000      	movs	r0, #0
 801fd16:	4770      	bx	lr

0801fd18 <__cxa_guard_release>:
 801fd18:	2301      	movs	r3, #1
 801fd1a:	6003      	str	r3, [r0, #0]
 801fd1c:	4770      	bx	lr

0801fd1e <__cxa_pure_virtual>:
 801fd1e:	b508      	push	{r3, lr}
 801fd20:	f000 f80c 	bl	801fd3c <_ZSt9terminatev>

0801fd24 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801fd24:	b508      	push	{r3, lr}
 801fd26:	4780      	blx	r0
 801fd28:	f000 f816 	bl	801fd58 <abort>

0801fd2c <_ZSt13get_terminatev>:
 801fd2c:	4b02      	ldr	r3, [pc, #8]	; (801fd38 <_ZSt13get_terminatev+0xc>)
 801fd2e:	6818      	ldr	r0, [r3, #0]
 801fd30:	f3bf 8f5b 	dmb	ish
 801fd34:	4770      	bx	lr
 801fd36:	bf00      	nop
 801fd38:	20000104 	.word	0x20000104

0801fd3c <_ZSt9terminatev>:
 801fd3c:	b508      	push	{r3, lr}
 801fd3e:	f7ff fff5 	bl	801fd2c <_ZSt13get_terminatev>
 801fd42:	f7ff ffef 	bl	801fd24 <_ZN10__cxxabiv111__terminateEPFvvE>

0801fd46 <fabs>:
 801fd46:	ec51 0b10 	vmov	r0, r1, d0
 801fd4a:	ee10 2a10 	vmov	r2, s0
 801fd4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801fd52:	ec43 2b10 	vmov	d0, r2, r3
 801fd56:	4770      	bx	lr

0801fd58 <abort>:
 801fd58:	b508      	push	{r3, lr}
 801fd5a:	2006      	movs	r0, #6
 801fd5c:	f000 ff8c 	bl	8020c78 <raise>
 801fd60:	2001      	movs	r0, #1
 801fd62:	f7e1 f846 	bl	8000df2 <_exit>

0801fd66 <atexit>:
 801fd66:	2300      	movs	r3, #0
 801fd68:	4601      	mov	r1, r0
 801fd6a:	461a      	mov	r2, r3
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	f002 b9d3 	b.w	8022118 <__register_exitproc>

0801fd72 <atoi>:
 801fd72:	220a      	movs	r2, #10
 801fd74:	2100      	movs	r1, #0
 801fd76:	f001 bdfb 	b.w	8021970 <strtol>
	...

0801fd7c <calloc>:
 801fd7c:	4b02      	ldr	r3, [pc, #8]	; (801fd88 <calloc+0xc>)
 801fd7e:	460a      	mov	r2, r1
 801fd80:	4601      	mov	r1, r0
 801fd82:	6818      	ldr	r0, [r3, #0]
 801fd84:	f000 bde8 	b.w	8020958 <_calloc_r>
 801fd88:	20000108 	.word	0x20000108

0801fd8c <__errno>:
 801fd8c:	4b01      	ldr	r3, [pc, #4]	; (801fd94 <__errno+0x8>)
 801fd8e:	6818      	ldr	r0, [r3, #0]
 801fd90:	4770      	bx	lr
 801fd92:	bf00      	nop
 801fd94:	20000108 	.word	0x20000108

0801fd98 <_fclose_r>:
 801fd98:	b570      	push	{r4, r5, r6, lr}
 801fd9a:	4605      	mov	r5, r0
 801fd9c:	460c      	mov	r4, r1
 801fd9e:	b911      	cbnz	r1, 801fda6 <_fclose_r+0xe>
 801fda0:	2600      	movs	r6, #0
 801fda2:	4630      	mov	r0, r6
 801fda4:	bd70      	pop	{r4, r5, r6, pc}
 801fda6:	b118      	cbz	r0, 801fdb0 <_fclose_r+0x18>
 801fda8:	6983      	ldr	r3, [r0, #24]
 801fdaa:	b90b      	cbnz	r3, 801fdb0 <_fclose_r+0x18>
 801fdac:	f000 f994 	bl	80200d8 <__sinit>
 801fdb0:	4b2c      	ldr	r3, [pc, #176]	; (801fe64 <_fclose_r+0xcc>)
 801fdb2:	429c      	cmp	r4, r3
 801fdb4:	d114      	bne.n	801fde0 <_fclose_r+0x48>
 801fdb6:	686c      	ldr	r4, [r5, #4]
 801fdb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fdba:	07d8      	lsls	r0, r3, #31
 801fdbc:	d405      	bmi.n	801fdca <_fclose_r+0x32>
 801fdbe:	89a3      	ldrh	r3, [r4, #12]
 801fdc0:	0599      	lsls	r1, r3, #22
 801fdc2:	d402      	bmi.n	801fdca <_fclose_r+0x32>
 801fdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fdc6:	f000 fd3a 	bl	802083e <__retarget_lock_acquire_recursive>
 801fdca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdce:	b98b      	cbnz	r3, 801fdf4 <_fclose_r+0x5c>
 801fdd0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801fdd2:	f016 0601 	ands.w	r6, r6, #1
 801fdd6:	d1e3      	bne.n	801fda0 <_fclose_r+0x8>
 801fdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fdda:	f000 fd32 	bl	8020842 <__retarget_lock_release_recursive>
 801fdde:	e7e0      	b.n	801fda2 <_fclose_r+0xa>
 801fde0:	4b21      	ldr	r3, [pc, #132]	; (801fe68 <_fclose_r+0xd0>)
 801fde2:	429c      	cmp	r4, r3
 801fde4:	d101      	bne.n	801fdea <_fclose_r+0x52>
 801fde6:	68ac      	ldr	r4, [r5, #8]
 801fde8:	e7e6      	b.n	801fdb8 <_fclose_r+0x20>
 801fdea:	4b20      	ldr	r3, [pc, #128]	; (801fe6c <_fclose_r+0xd4>)
 801fdec:	429c      	cmp	r4, r3
 801fdee:	bf08      	it	eq
 801fdf0:	68ec      	ldreq	r4, [r5, #12]
 801fdf2:	e7e1      	b.n	801fdb8 <_fclose_r+0x20>
 801fdf4:	4621      	mov	r1, r4
 801fdf6:	4628      	mov	r0, r5
 801fdf8:	f000 f842 	bl	801fe80 <__sflush_r>
 801fdfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fdfe:	4606      	mov	r6, r0
 801fe00:	b133      	cbz	r3, 801fe10 <_fclose_r+0x78>
 801fe02:	6a21      	ldr	r1, [r4, #32]
 801fe04:	4628      	mov	r0, r5
 801fe06:	4798      	blx	r3
 801fe08:	2800      	cmp	r0, #0
 801fe0a:	bfb8      	it	lt
 801fe0c:	f04f 36ff 	movlt.w	r6, #4294967295
 801fe10:	89a3      	ldrh	r3, [r4, #12]
 801fe12:	061a      	lsls	r2, r3, #24
 801fe14:	d503      	bpl.n	801fe1e <_fclose_r+0x86>
 801fe16:	6921      	ldr	r1, [r4, #16]
 801fe18:	4628      	mov	r0, r5
 801fe1a:	f000 fdad 	bl	8020978 <_free_r>
 801fe1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fe20:	b141      	cbz	r1, 801fe34 <_fclose_r+0x9c>
 801fe22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe26:	4299      	cmp	r1, r3
 801fe28:	d002      	beq.n	801fe30 <_fclose_r+0x98>
 801fe2a:	4628      	mov	r0, r5
 801fe2c:	f000 fda4 	bl	8020978 <_free_r>
 801fe30:	2300      	movs	r3, #0
 801fe32:	6363      	str	r3, [r4, #52]	; 0x34
 801fe34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fe36:	b121      	cbz	r1, 801fe42 <_fclose_r+0xaa>
 801fe38:	4628      	mov	r0, r5
 801fe3a:	f000 fd9d 	bl	8020978 <_free_r>
 801fe3e:	2300      	movs	r3, #0
 801fe40:	64a3      	str	r3, [r4, #72]	; 0x48
 801fe42:	f000 f931 	bl	80200a8 <__sfp_lock_acquire>
 801fe46:	2300      	movs	r3, #0
 801fe48:	81a3      	strh	r3, [r4, #12]
 801fe4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fe4c:	07db      	lsls	r3, r3, #31
 801fe4e:	d402      	bmi.n	801fe56 <_fclose_r+0xbe>
 801fe50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe52:	f000 fcf6 	bl	8020842 <__retarget_lock_release_recursive>
 801fe56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fe58:	f000 fcef 	bl	802083a <__retarget_lock_close_recursive>
 801fe5c:	f000 f92a 	bl	80200b4 <__sfp_lock_release>
 801fe60:	e79f      	b.n	801fda2 <_fclose_r+0xa>
 801fe62:	bf00      	nop
 801fe64:	08029860 	.word	0x08029860
 801fe68:	08029880 	.word	0x08029880
 801fe6c:	08029840 	.word	0x08029840

0801fe70 <fclose>:
 801fe70:	4b02      	ldr	r3, [pc, #8]	; (801fe7c <fclose+0xc>)
 801fe72:	4601      	mov	r1, r0
 801fe74:	6818      	ldr	r0, [r3, #0]
 801fe76:	f7ff bf8f 	b.w	801fd98 <_fclose_r>
 801fe7a:	bf00      	nop
 801fe7c:	20000108 	.word	0x20000108

0801fe80 <__sflush_r>:
 801fe80:	898a      	ldrh	r2, [r1, #12]
 801fe82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe86:	4605      	mov	r5, r0
 801fe88:	0710      	lsls	r0, r2, #28
 801fe8a:	460c      	mov	r4, r1
 801fe8c:	d458      	bmi.n	801ff40 <__sflush_r+0xc0>
 801fe8e:	684b      	ldr	r3, [r1, #4]
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	dc05      	bgt.n	801fea0 <__sflush_r+0x20>
 801fe94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	dc02      	bgt.n	801fea0 <__sflush_r+0x20>
 801fe9a:	2000      	movs	r0, #0
 801fe9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fea2:	2e00      	cmp	r6, #0
 801fea4:	d0f9      	beq.n	801fe9a <__sflush_r+0x1a>
 801fea6:	2300      	movs	r3, #0
 801fea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801feac:	682f      	ldr	r7, [r5, #0]
 801feae:	602b      	str	r3, [r5, #0]
 801feb0:	d032      	beq.n	801ff18 <__sflush_r+0x98>
 801feb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801feb4:	89a3      	ldrh	r3, [r4, #12]
 801feb6:	075a      	lsls	r2, r3, #29
 801feb8:	d505      	bpl.n	801fec6 <__sflush_r+0x46>
 801feba:	6863      	ldr	r3, [r4, #4]
 801febc:	1ac0      	subs	r0, r0, r3
 801febe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fec0:	b10b      	cbz	r3, 801fec6 <__sflush_r+0x46>
 801fec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fec4:	1ac0      	subs	r0, r0, r3
 801fec6:	2300      	movs	r3, #0
 801fec8:	4602      	mov	r2, r0
 801feca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fecc:	6a21      	ldr	r1, [r4, #32]
 801fece:	4628      	mov	r0, r5
 801fed0:	47b0      	blx	r6
 801fed2:	1c43      	adds	r3, r0, #1
 801fed4:	89a3      	ldrh	r3, [r4, #12]
 801fed6:	d106      	bne.n	801fee6 <__sflush_r+0x66>
 801fed8:	6829      	ldr	r1, [r5, #0]
 801feda:	291d      	cmp	r1, #29
 801fedc:	d82c      	bhi.n	801ff38 <__sflush_r+0xb8>
 801fede:	4a2a      	ldr	r2, [pc, #168]	; (801ff88 <__sflush_r+0x108>)
 801fee0:	40ca      	lsrs	r2, r1
 801fee2:	07d6      	lsls	r6, r2, #31
 801fee4:	d528      	bpl.n	801ff38 <__sflush_r+0xb8>
 801fee6:	2200      	movs	r2, #0
 801fee8:	6062      	str	r2, [r4, #4]
 801feea:	04d9      	lsls	r1, r3, #19
 801feec:	6922      	ldr	r2, [r4, #16]
 801feee:	6022      	str	r2, [r4, #0]
 801fef0:	d504      	bpl.n	801fefc <__sflush_r+0x7c>
 801fef2:	1c42      	adds	r2, r0, #1
 801fef4:	d101      	bne.n	801fefa <__sflush_r+0x7a>
 801fef6:	682b      	ldr	r3, [r5, #0]
 801fef8:	b903      	cbnz	r3, 801fefc <__sflush_r+0x7c>
 801fefa:	6560      	str	r0, [r4, #84]	; 0x54
 801fefc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fefe:	602f      	str	r7, [r5, #0]
 801ff00:	2900      	cmp	r1, #0
 801ff02:	d0ca      	beq.n	801fe9a <__sflush_r+0x1a>
 801ff04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ff08:	4299      	cmp	r1, r3
 801ff0a:	d002      	beq.n	801ff12 <__sflush_r+0x92>
 801ff0c:	4628      	mov	r0, r5
 801ff0e:	f000 fd33 	bl	8020978 <_free_r>
 801ff12:	2000      	movs	r0, #0
 801ff14:	6360      	str	r0, [r4, #52]	; 0x34
 801ff16:	e7c1      	b.n	801fe9c <__sflush_r+0x1c>
 801ff18:	6a21      	ldr	r1, [r4, #32]
 801ff1a:	2301      	movs	r3, #1
 801ff1c:	4628      	mov	r0, r5
 801ff1e:	47b0      	blx	r6
 801ff20:	1c41      	adds	r1, r0, #1
 801ff22:	d1c7      	bne.n	801feb4 <__sflush_r+0x34>
 801ff24:	682b      	ldr	r3, [r5, #0]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d0c4      	beq.n	801feb4 <__sflush_r+0x34>
 801ff2a:	2b1d      	cmp	r3, #29
 801ff2c:	d001      	beq.n	801ff32 <__sflush_r+0xb2>
 801ff2e:	2b16      	cmp	r3, #22
 801ff30:	d101      	bne.n	801ff36 <__sflush_r+0xb6>
 801ff32:	602f      	str	r7, [r5, #0]
 801ff34:	e7b1      	b.n	801fe9a <__sflush_r+0x1a>
 801ff36:	89a3      	ldrh	r3, [r4, #12]
 801ff38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff3c:	81a3      	strh	r3, [r4, #12]
 801ff3e:	e7ad      	b.n	801fe9c <__sflush_r+0x1c>
 801ff40:	690f      	ldr	r7, [r1, #16]
 801ff42:	2f00      	cmp	r7, #0
 801ff44:	d0a9      	beq.n	801fe9a <__sflush_r+0x1a>
 801ff46:	0793      	lsls	r3, r2, #30
 801ff48:	680e      	ldr	r6, [r1, #0]
 801ff4a:	bf08      	it	eq
 801ff4c:	694b      	ldreq	r3, [r1, #20]
 801ff4e:	600f      	str	r7, [r1, #0]
 801ff50:	bf18      	it	ne
 801ff52:	2300      	movne	r3, #0
 801ff54:	eba6 0807 	sub.w	r8, r6, r7
 801ff58:	608b      	str	r3, [r1, #8]
 801ff5a:	f1b8 0f00 	cmp.w	r8, #0
 801ff5e:	dd9c      	ble.n	801fe9a <__sflush_r+0x1a>
 801ff60:	6a21      	ldr	r1, [r4, #32]
 801ff62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ff64:	4643      	mov	r3, r8
 801ff66:	463a      	mov	r2, r7
 801ff68:	4628      	mov	r0, r5
 801ff6a:	47b0      	blx	r6
 801ff6c:	2800      	cmp	r0, #0
 801ff6e:	dc06      	bgt.n	801ff7e <__sflush_r+0xfe>
 801ff70:	89a3      	ldrh	r3, [r4, #12]
 801ff72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff76:	81a3      	strh	r3, [r4, #12]
 801ff78:	f04f 30ff 	mov.w	r0, #4294967295
 801ff7c:	e78e      	b.n	801fe9c <__sflush_r+0x1c>
 801ff7e:	4407      	add	r7, r0
 801ff80:	eba8 0800 	sub.w	r8, r8, r0
 801ff84:	e7e9      	b.n	801ff5a <__sflush_r+0xda>
 801ff86:	bf00      	nop
 801ff88:	20400001 	.word	0x20400001

0801ff8c <_fflush_r>:
 801ff8c:	b538      	push	{r3, r4, r5, lr}
 801ff8e:	690b      	ldr	r3, [r1, #16]
 801ff90:	4605      	mov	r5, r0
 801ff92:	460c      	mov	r4, r1
 801ff94:	b913      	cbnz	r3, 801ff9c <_fflush_r+0x10>
 801ff96:	2500      	movs	r5, #0
 801ff98:	4628      	mov	r0, r5
 801ff9a:	bd38      	pop	{r3, r4, r5, pc}
 801ff9c:	b118      	cbz	r0, 801ffa6 <_fflush_r+0x1a>
 801ff9e:	6983      	ldr	r3, [r0, #24]
 801ffa0:	b90b      	cbnz	r3, 801ffa6 <_fflush_r+0x1a>
 801ffa2:	f000 f899 	bl	80200d8 <__sinit>
 801ffa6:	4b14      	ldr	r3, [pc, #80]	; (801fff8 <_fflush_r+0x6c>)
 801ffa8:	429c      	cmp	r4, r3
 801ffaa:	d11b      	bne.n	801ffe4 <_fflush_r+0x58>
 801ffac:	686c      	ldr	r4, [r5, #4]
 801ffae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d0ef      	beq.n	801ff96 <_fflush_r+0xa>
 801ffb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ffb8:	07d0      	lsls	r0, r2, #31
 801ffba:	d404      	bmi.n	801ffc6 <_fflush_r+0x3a>
 801ffbc:	0599      	lsls	r1, r3, #22
 801ffbe:	d402      	bmi.n	801ffc6 <_fflush_r+0x3a>
 801ffc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffc2:	f000 fc3c 	bl	802083e <__retarget_lock_acquire_recursive>
 801ffc6:	4628      	mov	r0, r5
 801ffc8:	4621      	mov	r1, r4
 801ffca:	f7ff ff59 	bl	801fe80 <__sflush_r>
 801ffce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ffd0:	07da      	lsls	r2, r3, #31
 801ffd2:	4605      	mov	r5, r0
 801ffd4:	d4e0      	bmi.n	801ff98 <_fflush_r+0xc>
 801ffd6:	89a3      	ldrh	r3, [r4, #12]
 801ffd8:	059b      	lsls	r3, r3, #22
 801ffda:	d4dd      	bmi.n	801ff98 <_fflush_r+0xc>
 801ffdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ffde:	f000 fc30 	bl	8020842 <__retarget_lock_release_recursive>
 801ffe2:	e7d9      	b.n	801ff98 <_fflush_r+0xc>
 801ffe4:	4b05      	ldr	r3, [pc, #20]	; (801fffc <_fflush_r+0x70>)
 801ffe6:	429c      	cmp	r4, r3
 801ffe8:	d101      	bne.n	801ffee <_fflush_r+0x62>
 801ffea:	68ac      	ldr	r4, [r5, #8]
 801ffec:	e7df      	b.n	801ffae <_fflush_r+0x22>
 801ffee:	4b04      	ldr	r3, [pc, #16]	; (8020000 <_fflush_r+0x74>)
 801fff0:	429c      	cmp	r4, r3
 801fff2:	bf08      	it	eq
 801fff4:	68ec      	ldreq	r4, [r5, #12]
 801fff6:	e7da      	b.n	801ffae <_fflush_r+0x22>
 801fff8:	08029860 	.word	0x08029860
 801fffc:	08029880 	.word	0x08029880
 8020000:	08029840 	.word	0x08029840

08020004 <fflush>:
 8020004:	4601      	mov	r1, r0
 8020006:	b920      	cbnz	r0, 8020012 <fflush+0xe>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <fflush+0x18>)
 802000a:	4905      	ldr	r1, [pc, #20]	; (8020020 <fflush+0x1c>)
 802000c:	6818      	ldr	r0, [r3, #0]
 802000e:	f000 babb 	b.w	8020588 <_fwalk_reent>
 8020012:	4b04      	ldr	r3, [pc, #16]	; (8020024 <fflush+0x20>)
 8020014:	6818      	ldr	r0, [r3, #0]
 8020016:	f7ff bfb9 	b.w	801ff8c <_fflush_r>
 802001a:	bf00      	nop
 802001c:	080298a0 	.word	0x080298a0
 8020020:	0801ff8d 	.word	0x0801ff8d
 8020024:	20000108 	.word	0x20000108

08020028 <std>:
 8020028:	2300      	movs	r3, #0
 802002a:	b510      	push	{r4, lr}
 802002c:	4604      	mov	r4, r0
 802002e:	e9c0 3300 	strd	r3, r3, [r0]
 8020032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020036:	6083      	str	r3, [r0, #8]
 8020038:	8181      	strh	r1, [r0, #12]
 802003a:	6643      	str	r3, [r0, #100]	; 0x64
 802003c:	81c2      	strh	r2, [r0, #14]
 802003e:	6183      	str	r3, [r0, #24]
 8020040:	4619      	mov	r1, r3
 8020042:	2208      	movs	r2, #8
 8020044:	305c      	adds	r0, #92	; 0x5c
 8020046:	f000 fc7f 	bl	8020948 <memset>
 802004a:	4b05      	ldr	r3, [pc, #20]	; (8020060 <std+0x38>)
 802004c:	6263      	str	r3, [r4, #36]	; 0x24
 802004e:	4b05      	ldr	r3, [pc, #20]	; (8020064 <std+0x3c>)
 8020050:	62a3      	str	r3, [r4, #40]	; 0x28
 8020052:	4b05      	ldr	r3, [pc, #20]	; (8020068 <std+0x40>)
 8020054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020056:	4b05      	ldr	r3, [pc, #20]	; (802006c <std+0x44>)
 8020058:	6224      	str	r4, [r4, #32]
 802005a:	6323      	str	r3, [r4, #48]	; 0x30
 802005c:	bd10      	pop	{r4, pc}
 802005e:	bf00      	nop
 8020060:	08020cf1 	.word	0x08020cf1
 8020064:	08020d17 	.word	0x08020d17
 8020068:	08020d4f 	.word	0x08020d4f
 802006c:	08020d73 	.word	0x08020d73

08020070 <_cleanup_r>:
 8020070:	4901      	ldr	r1, [pc, #4]	; (8020078 <_cleanup_r+0x8>)
 8020072:	f000 ba89 	b.w	8020588 <_fwalk_reent>
 8020076:	bf00      	nop
 8020078:	0801ff8d 	.word	0x0801ff8d

0802007c <__sfmoreglue>:
 802007c:	b570      	push	{r4, r5, r6, lr}
 802007e:	1e4a      	subs	r2, r1, #1
 8020080:	2568      	movs	r5, #104	; 0x68
 8020082:	4355      	muls	r5, r2
 8020084:	460e      	mov	r6, r1
 8020086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802008a:	f000 fcc5 	bl	8020a18 <_malloc_r>
 802008e:	4604      	mov	r4, r0
 8020090:	b140      	cbz	r0, 80200a4 <__sfmoreglue+0x28>
 8020092:	2100      	movs	r1, #0
 8020094:	e9c0 1600 	strd	r1, r6, [r0]
 8020098:	300c      	adds	r0, #12
 802009a:	60a0      	str	r0, [r4, #8]
 802009c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80200a0:	f000 fc52 	bl	8020948 <memset>
 80200a4:	4620      	mov	r0, r4
 80200a6:	bd70      	pop	{r4, r5, r6, pc}

080200a8 <__sfp_lock_acquire>:
 80200a8:	4801      	ldr	r0, [pc, #4]	; (80200b0 <__sfp_lock_acquire+0x8>)
 80200aa:	f000 bbc8 	b.w	802083e <__retarget_lock_acquire_recursive>
 80200ae:	bf00      	nop
 80200b0:	20000ff0 	.word	0x20000ff0

080200b4 <__sfp_lock_release>:
 80200b4:	4801      	ldr	r0, [pc, #4]	; (80200bc <__sfp_lock_release+0x8>)
 80200b6:	f000 bbc4 	b.w	8020842 <__retarget_lock_release_recursive>
 80200ba:	bf00      	nop
 80200bc:	20000ff0 	.word	0x20000ff0

080200c0 <__sinit_lock_acquire>:
 80200c0:	4801      	ldr	r0, [pc, #4]	; (80200c8 <__sinit_lock_acquire+0x8>)
 80200c2:	f000 bbbc 	b.w	802083e <__retarget_lock_acquire_recursive>
 80200c6:	bf00      	nop
 80200c8:	20000feb 	.word	0x20000feb

080200cc <__sinit_lock_release>:
 80200cc:	4801      	ldr	r0, [pc, #4]	; (80200d4 <__sinit_lock_release+0x8>)
 80200ce:	f000 bbb8 	b.w	8020842 <__retarget_lock_release_recursive>
 80200d2:	bf00      	nop
 80200d4:	20000feb 	.word	0x20000feb

080200d8 <__sinit>:
 80200d8:	b510      	push	{r4, lr}
 80200da:	4604      	mov	r4, r0
 80200dc:	f7ff fff0 	bl	80200c0 <__sinit_lock_acquire>
 80200e0:	69a3      	ldr	r3, [r4, #24]
 80200e2:	b11b      	cbz	r3, 80200ec <__sinit+0x14>
 80200e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200e8:	f7ff bff0 	b.w	80200cc <__sinit_lock_release>
 80200ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80200f0:	6523      	str	r3, [r4, #80]	; 0x50
 80200f2:	4b13      	ldr	r3, [pc, #76]	; (8020140 <__sinit+0x68>)
 80200f4:	4a13      	ldr	r2, [pc, #76]	; (8020144 <__sinit+0x6c>)
 80200f6:	681b      	ldr	r3, [r3, #0]
 80200f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80200fa:	42a3      	cmp	r3, r4
 80200fc:	bf04      	itt	eq
 80200fe:	2301      	moveq	r3, #1
 8020100:	61a3      	streq	r3, [r4, #24]
 8020102:	4620      	mov	r0, r4
 8020104:	f000 f820 	bl	8020148 <__sfp>
 8020108:	6060      	str	r0, [r4, #4]
 802010a:	4620      	mov	r0, r4
 802010c:	f000 f81c 	bl	8020148 <__sfp>
 8020110:	60a0      	str	r0, [r4, #8]
 8020112:	4620      	mov	r0, r4
 8020114:	f000 f818 	bl	8020148 <__sfp>
 8020118:	2200      	movs	r2, #0
 802011a:	60e0      	str	r0, [r4, #12]
 802011c:	2104      	movs	r1, #4
 802011e:	6860      	ldr	r0, [r4, #4]
 8020120:	f7ff ff82 	bl	8020028 <std>
 8020124:	68a0      	ldr	r0, [r4, #8]
 8020126:	2201      	movs	r2, #1
 8020128:	2109      	movs	r1, #9
 802012a:	f7ff ff7d 	bl	8020028 <std>
 802012e:	68e0      	ldr	r0, [r4, #12]
 8020130:	2202      	movs	r2, #2
 8020132:	2112      	movs	r1, #18
 8020134:	f7ff ff78 	bl	8020028 <std>
 8020138:	2301      	movs	r3, #1
 802013a:	61a3      	str	r3, [r4, #24]
 802013c:	e7d2      	b.n	80200e4 <__sinit+0xc>
 802013e:	bf00      	nop
 8020140:	080298a0 	.word	0x080298a0
 8020144:	08020071 	.word	0x08020071

08020148 <__sfp>:
 8020148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802014a:	4607      	mov	r7, r0
 802014c:	f7ff ffac 	bl	80200a8 <__sfp_lock_acquire>
 8020150:	4b1e      	ldr	r3, [pc, #120]	; (80201cc <__sfp+0x84>)
 8020152:	681e      	ldr	r6, [r3, #0]
 8020154:	69b3      	ldr	r3, [r6, #24]
 8020156:	b913      	cbnz	r3, 802015e <__sfp+0x16>
 8020158:	4630      	mov	r0, r6
 802015a:	f7ff ffbd 	bl	80200d8 <__sinit>
 802015e:	3648      	adds	r6, #72	; 0x48
 8020160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020164:	3b01      	subs	r3, #1
 8020166:	d503      	bpl.n	8020170 <__sfp+0x28>
 8020168:	6833      	ldr	r3, [r6, #0]
 802016a:	b30b      	cbz	r3, 80201b0 <__sfp+0x68>
 802016c:	6836      	ldr	r6, [r6, #0]
 802016e:	e7f7      	b.n	8020160 <__sfp+0x18>
 8020170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020174:	b9d5      	cbnz	r5, 80201ac <__sfp+0x64>
 8020176:	4b16      	ldr	r3, [pc, #88]	; (80201d0 <__sfp+0x88>)
 8020178:	60e3      	str	r3, [r4, #12]
 802017a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802017e:	6665      	str	r5, [r4, #100]	; 0x64
 8020180:	f000 fb5a 	bl	8020838 <__retarget_lock_init_recursive>
 8020184:	f7ff ff96 	bl	80200b4 <__sfp_lock_release>
 8020188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802018c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020190:	6025      	str	r5, [r4, #0]
 8020192:	61a5      	str	r5, [r4, #24]
 8020194:	2208      	movs	r2, #8
 8020196:	4629      	mov	r1, r5
 8020198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802019c:	f000 fbd4 	bl	8020948 <memset>
 80201a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80201a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80201a8:	4620      	mov	r0, r4
 80201aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201ac:	3468      	adds	r4, #104	; 0x68
 80201ae:	e7d9      	b.n	8020164 <__sfp+0x1c>
 80201b0:	2104      	movs	r1, #4
 80201b2:	4638      	mov	r0, r7
 80201b4:	f7ff ff62 	bl	802007c <__sfmoreglue>
 80201b8:	4604      	mov	r4, r0
 80201ba:	6030      	str	r0, [r6, #0]
 80201bc:	2800      	cmp	r0, #0
 80201be:	d1d5      	bne.n	802016c <__sfp+0x24>
 80201c0:	f7ff ff78 	bl	80200b4 <__sfp_lock_release>
 80201c4:	230c      	movs	r3, #12
 80201c6:	603b      	str	r3, [r7, #0]
 80201c8:	e7ee      	b.n	80201a8 <__sfp+0x60>
 80201ca:	bf00      	nop
 80201cc:	080298a0 	.word	0x080298a0
 80201d0:	ffff0001 	.word	0xffff0001

080201d4 <_fopen_r>:
 80201d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80201d6:	460f      	mov	r7, r1
 80201d8:	4611      	mov	r1, r2
 80201da:	aa01      	add	r2, sp, #4
 80201dc:	4605      	mov	r5, r0
 80201de:	f002 f82f 	bl	8022240 <__sflags>
 80201e2:	4606      	mov	r6, r0
 80201e4:	b918      	cbnz	r0, 80201ee <_fopen_r+0x1a>
 80201e6:	2400      	movs	r4, #0
 80201e8:	4620      	mov	r0, r4
 80201ea:	b003      	add	sp, #12
 80201ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201ee:	4628      	mov	r0, r5
 80201f0:	f7ff ffaa 	bl	8020148 <__sfp>
 80201f4:	4604      	mov	r4, r0
 80201f6:	2800      	cmp	r0, #0
 80201f8:	d0f5      	beq.n	80201e6 <_fopen_r+0x12>
 80201fa:	4639      	mov	r1, r7
 80201fc:	9a01      	ldr	r2, [sp, #4]
 80201fe:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8020202:	4628      	mov	r0, r5
 8020204:	f000 fc62 	bl	8020acc <_open_r>
 8020208:	1e07      	subs	r7, r0, #0
 802020a:	da09      	bge.n	8020220 <_fopen_r+0x4c>
 802020c:	2500      	movs	r5, #0
 802020e:	f7ff ff4b 	bl	80200a8 <__sfp_lock_acquire>
 8020212:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020214:	81a5      	strh	r5, [r4, #12]
 8020216:	f000 fb10 	bl	802083a <__retarget_lock_close_recursive>
 802021a:	f7ff ff4b 	bl	80200b4 <__sfp_lock_release>
 802021e:	e7e2      	b.n	80201e6 <_fopen_r+0x12>
 8020220:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020222:	07db      	lsls	r3, r3, #31
 8020224:	d405      	bmi.n	8020232 <_fopen_r+0x5e>
 8020226:	89a3      	ldrh	r3, [r4, #12]
 8020228:	0598      	lsls	r0, r3, #22
 802022a:	d402      	bmi.n	8020232 <_fopen_r+0x5e>
 802022c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802022e:	f000 fb06 	bl	802083e <__retarget_lock_acquire_recursive>
 8020232:	4b0e      	ldr	r3, [pc, #56]	; (802026c <_fopen_r+0x98>)
 8020234:	6263      	str	r3, [r4, #36]	; 0x24
 8020236:	4b0e      	ldr	r3, [pc, #56]	; (8020270 <_fopen_r+0x9c>)
 8020238:	62a3      	str	r3, [r4, #40]	; 0x28
 802023a:	4b0e      	ldr	r3, [pc, #56]	; (8020274 <_fopen_r+0xa0>)
 802023c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802023e:	05f1      	lsls	r1, r6, #23
 8020240:	4b0d      	ldr	r3, [pc, #52]	; (8020278 <_fopen_r+0xa4>)
 8020242:	81e7      	strh	r7, [r4, #14]
 8020244:	81a6      	strh	r6, [r4, #12]
 8020246:	6224      	str	r4, [r4, #32]
 8020248:	6323      	str	r3, [r4, #48]	; 0x30
 802024a:	d505      	bpl.n	8020258 <_fopen_r+0x84>
 802024c:	2302      	movs	r3, #2
 802024e:	2200      	movs	r2, #0
 8020250:	4621      	mov	r1, r4
 8020252:	4628      	mov	r0, r5
 8020254:	f000 f888 	bl	8020368 <_fseek_r>
 8020258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802025a:	07da      	lsls	r2, r3, #31
 802025c:	d4c4      	bmi.n	80201e8 <_fopen_r+0x14>
 802025e:	89a3      	ldrh	r3, [r4, #12]
 8020260:	059b      	lsls	r3, r3, #22
 8020262:	d4c1      	bmi.n	80201e8 <_fopen_r+0x14>
 8020264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020266:	f000 faec 	bl	8020842 <__retarget_lock_release_recursive>
 802026a:	e7bd      	b.n	80201e8 <_fopen_r+0x14>
 802026c:	08020cf1 	.word	0x08020cf1
 8020270:	08020d17 	.word	0x08020d17
 8020274:	08020d4f 	.word	0x08020d4f
 8020278:	08020d73 	.word	0x08020d73

0802027c <fopen>:
 802027c:	4b02      	ldr	r3, [pc, #8]	; (8020288 <fopen+0xc>)
 802027e:	460a      	mov	r2, r1
 8020280:	4601      	mov	r1, r0
 8020282:	6818      	ldr	r0, [r3, #0]
 8020284:	f7ff bfa6 	b.w	80201d4 <_fopen_r>
 8020288:	20000108 	.word	0x20000108

0802028c <_fputs_r>:
 802028c:	b570      	push	{r4, r5, r6, lr}
 802028e:	460e      	mov	r6, r1
 8020290:	4614      	mov	r4, r2
 8020292:	4605      	mov	r5, r0
 8020294:	b118      	cbz	r0, 802029e <_fputs_r+0x12>
 8020296:	6983      	ldr	r3, [r0, #24]
 8020298:	b90b      	cbnz	r3, 802029e <_fputs_r+0x12>
 802029a:	f7ff ff1d 	bl	80200d8 <__sinit>
 802029e:	4b2b      	ldr	r3, [pc, #172]	; (802034c <_fputs_r+0xc0>)
 80202a0:	429c      	cmp	r4, r3
 80202a2:	d11e      	bne.n	80202e2 <_fputs_r+0x56>
 80202a4:	686c      	ldr	r4, [r5, #4]
 80202a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202a8:	07da      	lsls	r2, r3, #31
 80202aa:	d405      	bmi.n	80202b8 <_fputs_r+0x2c>
 80202ac:	89a3      	ldrh	r3, [r4, #12]
 80202ae:	059b      	lsls	r3, r3, #22
 80202b0:	d402      	bmi.n	80202b8 <_fputs_r+0x2c>
 80202b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202b4:	f000 fac3 	bl	802083e <__retarget_lock_acquire_recursive>
 80202b8:	89a3      	ldrh	r3, [r4, #12]
 80202ba:	0718      	lsls	r0, r3, #28
 80202bc:	d51b      	bpl.n	80202f6 <_fputs_r+0x6a>
 80202be:	6923      	ldr	r3, [r4, #16]
 80202c0:	b1cb      	cbz	r3, 80202f6 <_fputs_r+0x6a>
 80202c2:	3e01      	subs	r6, #1
 80202c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80202c8:	bb39      	cbnz	r1, 802031a <_fputs_r+0x8e>
 80202ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80202cc:	f015 0501 	ands.w	r5, r5, #1
 80202d0:	d139      	bne.n	8020346 <_fputs_r+0xba>
 80202d2:	89a3      	ldrh	r3, [r4, #12]
 80202d4:	0599      	lsls	r1, r3, #22
 80202d6:	d402      	bmi.n	80202de <_fputs_r+0x52>
 80202d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202da:	f000 fab2 	bl	8020842 <__retarget_lock_release_recursive>
 80202de:	4628      	mov	r0, r5
 80202e0:	bd70      	pop	{r4, r5, r6, pc}
 80202e2:	4b1b      	ldr	r3, [pc, #108]	; (8020350 <_fputs_r+0xc4>)
 80202e4:	429c      	cmp	r4, r3
 80202e6:	d101      	bne.n	80202ec <_fputs_r+0x60>
 80202e8:	68ac      	ldr	r4, [r5, #8]
 80202ea:	e7dc      	b.n	80202a6 <_fputs_r+0x1a>
 80202ec:	4b19      	ldr	r3, [pc, #100]	; (8020354 <_fputs_r+0xc8>)
 80202ee:	429c      	cmp	r4, r3
 80202f0:	bf08      	it	eq
 80202f2:	68ec      	ldreq	r4, [r5, #12]
 80202f4:	e7d7      	b.n	80202a6 <_fputs_r+0x1a>
 80202f6:	4621      	mov	r1, r4
 80202f8:	4628      	mov	r0, r5
 80202fa:	f001 fe9f 	bl	802203c <__swsetup_r>
 80202fe:	2800      	cmp	r0, #0
 8020300:	d0df      	beq.n	80202c2 <_fputs_r+0x36>
 8020302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020304:	07da      	lsls	r2, r3, #31
 8020306:	d405      	bmi.n	8020314 <_fputs_r+0x88>
 8020308:	89a3      	ldrh	r3, [r4, #12]
 802030a:	059b      	lsls	r3, r3, #22
 802030c:	d402      	bmi.n	8020314 <_fputs_r+0x88>
 802030e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020310:	f000 fa97 	bl	8020842 <__retarget_lock_release_recursive>
 8020314:	f04f 35ff 	mov.w	r5, #4294967295
 8020318:	e7e1      	b.n	80202de <_fputs_r+0x52>
 802031a:	68a3      	ldr	r3, [r4, #8]
 802031c:	3b01      	subs	r3, #1
 802031e:	2b00      	cmp	r3, #0
 8020320:	60a3      	str	r3, [r4, #8]
 8020322:	da04      	bge.n	802032e <_fputs_r+0xa2>
 8020324:	69a2      	ldr	r2, [r4, #24]
 8020326:	4293      	cmp	r3, r2
 8020328:	db06      	blt.n	8020338 <_fputs_r+0xac>
 802032a:	290a      	cmp	r1, #10
 802032c:	d004      	beq.n	8020338 <_fputs_r+0xac>
 802032e:	6823      	ldr	r3, [r4, #0]
 8020330:	1c5a      	adds	r2, r3, #1
 8020332:	6022      	str	r2, [r4, #0]
 8020334:	7019      	strb	r1, [r3, #0]
 8020336:	e7c5      	b.n	80202c4 <_fputs_r+0x38>
 8020338:	4622      	mov	r2, r4
 802033a:	4628      	mov	r0, r5
 802033c:	f001 fe1a 	bl	8021f74 <__swbuf_r>
 8020340:	3001      	adds	r0, #1
 8020342:	d1bf      	bne.n	80202c4 <_fputs_r+0x38>
 8020344:	e7dd      	b.n	8020302 <_fputs_r+0x76>
 8020346:	460d      	mov	r5, r1
 8020348:	e7c9      	b.n	80202de <_fputs_r+0x52>
 802034a:	bf00      	nop
 802034c:	08029860 	.word	0x08029860
 8020350:	08029880 	.word	0x08029880
 8020354:	08029840 	.word	0x08029840

08020358 <fputs>:
 8020358:	4b02      	ldr	r3, [pc, #8]	; (8020364 <fputs+0xc>)
 802035a:	460a      	mov	r2, r1
 802035c:	4601      	mov	r1, r0
 802035e:	6818      	ldr	r0, [r3, #0]
 8020360:	f7ff bf94 	b.w	802028c <_fputs_r>
 8020364:	20000108 	.word	0x20000108

08020368 <_fseek_r>:
 8020368:	f000 b800 	b.w	802036c <_fseeko_r>

0802036c <_fseeko_r>:
 802036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020370:	460c      	mov	r4, r1
 8020372:	4617      	mov	r7, r2
 8020374:	461e      	mov	r6, r3
 8020376:	4605      	mov	r5, r0
 8020378:	b118      	cbz	r0, 8020382 <_fseeko_r+0x16>
 802037a:	6983      	ldr	r3, [r0, #24]
 802037c:	b90b      	cbnz	r3, 8020382 <_fseeko_r+0x16>
 802037e:	f7ff feab 	bl	80200d8 <__sinit>
 8020382:	4b44      	ldr	r3, [pc, #272]	; (8020494 <_fseeko_r+0x128>)
 8020384:	429c      	cmp	r4, r3
 8020386:	d122      	bne.n	80203ce <_fseeko_r+0x62>
 8020388:	686c      	ldr	r4, [r5, #4]
 802038a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802038c:	07d9      	lsls	r1, r3, #31
 802038e:	d405      	bmi.n	802039c <_fseeko_r+0x30>
 8020390:	89a3      	ldrh	r3, [r4, #12]
 8020392:	059a      	lsls	r2, r3, #22
 8020394:	d402      	bmi.n	802039c <_fseeko_r+0x30>
 8020396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020398:	f000 fa51 	bl	802083e <__retarget_lock_acquire_recursive>
 802039c:	89a3      	ldrh	r3, [r4, #12]
 802039e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80203a2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80203a6:	d103      	bne.n	80203b0 <_fseeko_r+0x44>
 80203a8:	4621      	mov	r1, r4
 80203aa:	4628      	mov	r0, r5
 80203ac:	f7ff fdee 	bl	801ff8c <_fflush_r>
 80203b0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80203b4:	f1b8 0f00 	cmp.w	r8, #0
 80203b8:	d113      	bne.n	80203e2 <_fseeko_r+0x76>
 80203ba:	231d      	movs	r3, #29
 80203bc:	602b      	str	r3, [r5, #0]
 80203be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80203c0:	07d9      	lsls	r1, r3, #31
 80203c2:	d55d      	bpl.n	8020480 <_fseeko_r+0x114>
 80203c4:	f04f 36ff 	mov.w	r6, #4294967295
 80203c8:	4630      	mov	r0, r6
 80203ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203ce:	4b32      	ldr	r3, [pc, #200]	; (8020498 <_fseeko_r+0x12c>)
 80203d0:	429c      	cmp	r4, r3
 80203d2:	d101      	bne.n	80203d8 <_fseeko_r+0x6c>
 80203d4:	68ac      	ldr	r4, [r5, #8]
 80203d6:	e7d8      	b.n	802038a <_fseeko_r+0x1e>
 80203d8:	4b30      	ldr	r3, [pc, #192]	; (802049c <_fseeko_r+0x130>)
 80203da:	429c      	cmp	r4, r3
 80203dc:	bf08      	it	eq
 80203de:	68ec      	ldreq	r4, [r5, #12]
 80203e0:	e7d3      	b.n	802038a <_fseeko_r+0x1e>
 80203e2:	2e01      	cmp	r6, #1
 80203e4:	d036      	beq.n	8020454 <_fseeko_r+0xe8>
 80203e6:	f036 0302 	bics.w	r3, r6, #2
 80203ea:	d147      	bne.n	802047c <_fseeko_r+0x110>
 80203ec:	6923      	ldr	r3, [r4, #16]
 80203ee:	b91b      	cbnz	r3, 80203f8 <_fseeko_r+0x8c>
 80203f0:	4621      	mov	r1, r4
 80203f2:	4628      	mov	r0, r5
 80203f4:	f000 fa4a 	bl	802088c <__smakebuf_r>
 80203f8:	4621      	mov	r1, r4
 80203fa:	4628      	mov	r0, r5
 80203fc:	f7ff fdc6 	bl	801ff8c <_fflush_r>
 8020400:	2800      	cmp	r0, #0
 8020402:	d1dc      	bne.n	80203be <_fseeko_r+0x52>
 8020404:	6a21      	ldr	r1, [r4, #32]
 8020406:	4633      	mov	r3, r6
 8020408:	463a      	mov	r2, r7
 802040a:	4628      	mov	r0, r5
 802040c:	47c0      	blx	r8
 802040e:	3001      	adds	r0, #1
 8020410:	d0d5      	beq.n	80203be <_fseeko_r+0x52>
 8020412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020414:	b141      	cbz	r1, 8020428 <_fseeko_r+0xbc>
 8020416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802041a:	4299      	cmp	r1, r3
 802041c:	d002      	beq.n	8020424 <_fseeko_r+0xb8>
 802041e:	4628      	mov	r0, r5
 8020420:	f000 faaa 	bl	8020978 <_free_r>
 8020424:	2300      	movs	r3, #0
 8020426:	6363      	str	r3, [r4, #52]	; 0x34
 8020428:	6923      	ldr	r3, [r4, #16]
 802042a:	6023      	str	r3, [r4, #0]
 802042c:	89a3      	ldrh	r3, [r4, #12]
 802042e:	2500      	movs	r5, #0
 8020430:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8020434:	6065      	str	r5, [r4, #4]
 8020436:	81a3      	strh	r3, [r4, #12]
 8020438:	2208      	movs	r2, #8
 802043a:	4629      	mov	r1, r5
 802043c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020440:	f000 fa82 	bl	8020948 <memset>
 8020444:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8020446:	f016 0601 	ands.w	r6, r6, #1
 802044a:	d120      	bne.n	802048e <_fseeko_r+0x122>
 802044c:	89a3      	ldrh	r3, [r4, #12]
 802044e:	059b      	lsls	r3, r3, #22
 8020450:	d4ba      	bmi.n	80203c8 <_fseeko_r+0x5c>
 8020452:	e00c      	b.n	802046e <_fseeko_r+0x102>
 8020454:	4621      	mov	r1, r4
 8020456:	4628      	mov	r0, r5
 8020458:	f000 f822 	bl	80204a0 <_ftello_r>
 802045c:	1c43      	adds	r3, r0, #1
 802045e:	4606      	mov	r6, r0
 8020460:	d109      	bne.n	8020476 <_fseeko_r+0x10a>
 8020462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020464:	07dd      	lsls	r5, r3, #31
 8020466:	d4ad      	bmi.n	80203c4 <_fseeko_r+0x58>
 8020468:	89a3      	ldrh	r3, [r4, #12]
 802046a:	0598      	lsls	r0, r3, #22
 802046c:	d4aa      	bmi.n	80203c4 <_fseeko_r+0x58>
 802046e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020470:	f000 f9e7 	bl	8020842 <__retarget_lock_release_recursive>
 8020474:	e7a8      	b.n	80203c8 <_fseeko_r+0x5c>
 8020476:	4407      	add	r7, r0
 8020478:	2600      	movs	r6, #0
 802047a:	e7b7      	b.n	80203ec <_fseeko_r+0x80>
 802047c:	2316      	movs	r3, #22
 802047e:	e79d      	b.n	80203bc <_fseeko_r+0x50>
 8020480:	89a3      	ldrh	r3, [r4, #12]
 8020482:	059a      	lsls	r2, r3, #22
 8020484:	d49e      	bmi.n	80203c4 <_fseeko_r+0x58>
 8020486:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020488:	f000 f9db 	bl	8020842 <__retarget_lock_release_recursive>
 802048c:	e79a      	b.n	80203c4 <_fseeko_r+0x58>
 802048e:	462e      	mov	r6, r5
 8020490:	e79a      	b.n	80203c8 <_fseeko_r+0x5c>
 8020492:	bf00      	nop
 8020494:	08029860 	.word	0x08029860
 8020498:	08029880 	.word	0x08029880
 802049c:	08029840 	.word	0x08029840

080204a0 <_ftello_r>:
 80204a0:	b570      	push	{r4, r5, r6, lr}
 80204a2:	460c      	mov	r4, r1
 80204a4:	4605      	mov	r5, r0
 80204a6:	b118      	cbz	r0, 80204b0 <_ftello_r+0x10>
 80204a8:	6983      	ldr	r3, [r0, #24]
 80204aa:	b90b      	cbnz	r3, 80204b0 <_ftello_r+0x10>
 80204ac:	f7ff fe14 	bl	80200d8 <__sinit>
 80204b0:	4b32      	ldr	r3, [pc, #200]	; (802057c <_ftello_r+0xdc>)
 80204b2:	429c      	cmp	r4, r3
 80204b4:	d114      	bne.n	80204e0 <_ftello_r+0x40>
 80204b6:	686c      	ldr	r4, [r5, #4]
 80204b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80204ba:	07da      	lsls	r2, r3, #31
 80204bc:	d405      	bmi.n	80204ca <_ftello_r+0x2a>
 80204be:	89a3      	ldrh	r3, [r4, #12]
 80204c0:	059b      	lsls	r3, r3, #22
 80204c2:	d402      	bmi.n	80204ca <_ftello_r+0x2a>
 80204c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204c6:	f000 f9ba 	bl	802083e <__retarget_lock_acquire_recursive>
 80204ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80204cc:	b9ce      	cbnz	r6, 8020502 <_ftello_r+0x62>
 80204ce:	231d      	movs	r3, #29
 80204d0:	602b      	str	r3, [r5, #0]
 80204d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80204d4:	07de      	lsls	r6, r3, #31
 80204d6:	d50d      	bpl.n	80204f4 <_ftello_r+0x54>
 80204d8:	f04f 35ff 	mov.w	r5, #4294967295
 80204dc:	4628      	mov	r0, r5
 80204de:	bd70      	pop	{r4, r5, r6, pc}
 80204e0:	4b27      	ldr	r3, [pc, #156]	; (8020580 <_ftello_r+0xe0>)
 80204e2:	429c      	cmp	r4, r3
 80204e4:	d101      	bne.n	80204ea <_ftello_r+0x4a>
 80204e6:	68ac      	ldr	r4, [r5, #8]
 80204e8:	e7e6      	b.n	80204b8 <_ftello_r+0x18>
 80204ea:	4b26      	ldr	r3, [pc, #152]	; (8020584 <_ftello_r+0xe4>)
 80204ec:	429c      	cmp	r4, r3
 80204ee:	bf08      	it	eq
 80204f0:	68ec      	ldreq	r4, [r5, #12]
 80204f2:	e7e1      	b.n	80204b8 <_ftello_r+0x18>
 80204f4:	89a3      	ldrh	r3, [r4, #12]
 80204f6:	059d      	lsls	r5, r3, #22
 80204f8:	d4ee      	bmi.n	80204d8 <_ftello_r+0x38>
 80204fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204fc:	f000 f9a1 	bl	8020842 <__retarget_lock_release_recursive>
 8020500:	e7ea      	b.n	80204d8 <_ftello_r+0x38>
 8020502:	89a2      	ldrh	r2, [r4, #12]
 8020504:	f002 030c 	and.w	r3, r2, #12
 8020508:	2b08      	cmp	r3, #8
 802050a:	d119      	bne.n	8020540 <_ftello_r+0xa0>
 802050c:	6823      	ldr	r3, [r4, #0]
 802050e:	b1bb      	cbz	r3, 8020540 <_ftello_r+0xa0>
 8020510:	6921      	ldr	r1, [r4, #16]
 8020512:	1a5b      	subs	r3, r3, r1
 8020514:	2b00      	cmp	r3, #0
 8020516:	dd13      	ble.n	8020540 <_ftello_r+0xa0>
 8020518:	05d0      	lsls	r0, r2, #23
 802051a:	d511      	bpl.n	8020540 <_ftello_r+0xa0>
 802051c:	2302      	movs	r3, #2
 802051e:	2200      	movs	r2, #0
 8020520:	6a21      	ldr	r1, [r4, #32]
 8020522:	4628      	mov	r0, r5
 8020524:	47b0      	blx	r6
 8020526:	1c41      	adds	r1, r0, #1
 8020528:	4605      	mov	r5, r0
 802052a:	d10d      	bne.n	8020548 <_ftello_r+0xa8>
 802052c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802052e:	07da      	lsls	r2, r3, #31
 8020530:	d4d2      	bmi.n	80204d8 <_ftello_r+0x38>
 8020532:	89a3      	ldrh	r3, [r4, #12]
 8020534:	059b      	lsls	r3, r3, #22
 8020536:	d4cf      	bmi.n	80204d8 <_ftello_r+0x38>
 8020538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802053a:	f000 f982 	bl	8020842 <__retarget_lock_release_recursive>
 802053e:	e7cd      	b.n	80204dc <_ftello_r+0x3c>
 8020540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020544:	d00f      	beq.n	8020566 <_ftello_r+0xc6>
 8020546:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8020548:	89a2      	ldrh	r2, [r4, #12]
 802054a:	0756      	lsls	r6, r2, #29
 802054c:	d50d      	bpl.n	802056a <_ftello_r+0xca>
 802054e:	6863      	ldr	r3, [r4, #4]
 8020550:	1aed      	subs	r5, r5, r3
 8020552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020554:	b10b      	cbz	r3, 802055a <_ftello_r+0xba>
 8020556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020558:	1aed      	subs	r5, r5, r3
 802055a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802055c:	07d9      	lsls	r1, r3, #31
 802055e:	d4bd      	bmi.n	80204dc <_ftello_r+0x3c>
 8020560:	0593      	lsls	r3, r2, #22
 8020562:	d4bb      	bmi.n	80204dc <_ftello_r+0x3c>
 8020564:	e7e8      	b.n	8020538 <_ftello_r+0x98>
 8020566:	2301      	movs	r3, #1
 8020568:	e7da      	b.n	8020520 <_ftello_r+0x80>
 802056a:	0710      	lsls	r0, r2, #28
 802056c:	d5f5      	bpl.n	802055a <_ftello_r+0xba>
 802056e:	6823      	ldr	r3, [r4, #0]
 8020570:	2b00      	cmp	r3, #0
 8020572:	d0f2      	beq.n	802055a <_ftello_r+0xba>
 8020574:	6921      	ldr	r1, [r4, #16]
 8020576:	1a5b      	subs	r3, r3, r1
 8020578:	441d      	add	r5, r3
 802057a:	e7ee      	b.n	802055a <_ftello_r+0xba>
 802057c:	08029860 	.word	0x08029860
 8020580:	08029880 	.word	0x08029880
 8020584:	08029840 	.word	0x08029840

08020588 <_fwalk_reent>:
 8020588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802058c:	4606      	mov	r6, r0
 802058e:	4688      	mov	r8, r1
 8020590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020594:	2700      	movs	r7, #0
 8020596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802059a:	f1b9 0901 	subs.w	r9, r9, #1
 802059e:	d505      	bpl.n	80205ac <_fwalk_reent+0x24>
 80205a0:	6824      	ldr	r4, [r4, #0]
 80205a2:	2c00      	cmp	r4, #0
 80205a4:	d1f7      	bne.n	8020596 <_fwalk_reent+0xe>
 80205a6:	4638      	mov	r0, r7
 80205a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80205ac:	89ab      	ldrh	r3, [r5, #12]
 80205ae:	2b01      	cmp	r3, #1
 80205b0:	d907      	bls.n	80205c2 <_fwalk_reent+0x3a>
 80205b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80205b6:	3301      	adds	r3, #1
 80205b8:	d003      	beq.n	80205c2 <_fwalk_reent+0x3a>
 80205ba:	4629      	mov	r1, r5
 80205bc:	4630      	mov	r0, r6
 80205be:	47c0      	blx	r8
 80205c0:	4307      	orrs	r7, r0
 80205c2:	3568      	adds	r5, #104	; 0x68
 80205c4:	e7e9      	b.n	802059a <_fwalk_reent+0x12>
	...

080205c8 <__libc_init_array>:
 80205c8:	b570      	push	{r4, r5, r6, lr}
 80205ca:	4d0d      	ldr	r5, [pc, #52]	; (8020600 <__libc_init_array+0x38>)
 80205cc:	4c0d      	ldr	r4, [pc, #52]	; (8020604 <__libc_init_array+0x3c>)
 80205ce:	1b64      	subs	r4, r4, r5
 80205d0:	10a4      	asrs	r4, r4, #2
 80205d2:	2600      	movs	r6, #0
 80205d4:	42a6      	cmp	r6, r4
 80205d6:	d109      	bne.n	80205ec <__libc_init_array+0x24>
 80205d8:	4d0b      	ldr	r5, [pc, #44]	; (8020608 <__libc_init_array+0x40>)
 80205da:	4c0c      	ldr	r4, [pc, #48]	; (802060c <__libc_init_array+0x44>)
 80205dc:	f003 f8d6 	bl	802378c <_init>
 80205e0:	1b64      	subs	r4, r4, r5
 80205e2:	10a4      	asrs	r4, r4, #2
 80205e4:	2600      	movs	r6, #0
 80205e6:	42a6      	cmp	r6, r4
 80205e8:	d105      	bne.n	80205f6 <__libc_init_array+0x2e>
 80205ea:	bd70      	pop	{r4, r5, r6, pc}
 80205ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80205f0:	4798      	blx	r3
 80205f2:	3601      	adds	r6, #1
 80205f4:	e7ee      	b.n	80205d4 <__libc_init_array+0xc>
 80205f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80205fa:	4798      	blx	r3
 80205fc:	3601      	adds	r6, #1
 80205fe:	e7f2      	b.n	80205e6 <__libc_init_array+0x1e>
 8020600:	08029e38 	.word	0x08029e38
 8020604:	08029e38 	.word	0x08029e38
 8020608:	08029e38 	.word	0x08029e38
 802060c:	08029e48 	.word	0x08029e48

08020610 <localtime>:
 8020610:	b538      	push	{r3, r4, r5, lr}
 8020612:	4b0b      	ldr	r3, [pc, #44]	; (8020640 <localtime+0x30>)
 8020614:	681d      	ldr	r5, [r3, #0]
 8020616:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020618:	4604      	mov	r4, r0
 802061a:	b953      	cbnz	r3, 8020632 <localtime+0x22>
 802061c:	2024      	movs	r0, #36	; 0x24
 802061e:	f000 f975 	bl	802090c <malloc>
 8020622:	4602      	mov	r2, r0
 8020624:	63e8      	str	r0, [r5, #60]	; 0x3c
 8020626:	b920      	cbnz	r0, 8020632 <localtime+0x22>
 8020628:	4b06      	ldr	r3, [pc, #24]	; (8020644 <localtime+0x34>)
 802062a:	4807      	ldr	r0, [pc, #28]	; (8020648 <localtime+0x38>)
 802062c:	2132      	movs	r1, #50	; 0x32
 802062e:	f001 fdd9 	bl	80221e4 <__assert_func>
 8020632:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020634:	4620      	mov	r0, r4
 8020636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802063a:	f000 b807 	b.w	802064c <localtime_r>
 802063e:	bf00      	nop
 8020640:	20000108 	.word	0x20000108
 8020644:	080298a4 	.word	0x080298a4
 8020648:	080298bb 	.word	0x080298bb

0802064c <localtime_r>:
 802064c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020650:	4607      	mov	r7, r0
 8020652:	9101      	str	r1, [sp, #4]
 8020654:	f001 fe90 	bl	8022378 <__gettzinfo>
 8020658:	9901      	ldr	r1, [sp, #4]
 802065a:	4680      	mov	r8, r0
 802065c:	4638      	mov	r0, r7
 802065e:	f001 fe8f 	bl	8022380 <gmtime_r>
 8020662:	6943      	ldr	r3, [r0, #20]
 8020664:	079a      	lsls	r2, r3, #30
 8020666:	4604      	mov	r4, r0
 8020668:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 802066c:	d105      	bne.n	802067a <localtime_r+0x2e>
 802066e:	2264      	movs	r2, #100	; 0x64
 8020670:	fb96 f3f2 	sdiv	r3, r6, r2
 8020674:	fb02 6313 	mls	r3, r2, r3, r6
 8020678:	bb7b      	cbnz	r3, 80206da <localtime_r+0x8e>
 802067a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802067e:	fb96 f5f3 	sdiv	r5, r6, r3
 8020682:	fb03 6515 	mls	r5, r3, r5, r6
 8020686:	fab5 f585 	clz	r5, r5
 802068a:	096d      	lsrs	r5, r5, #5
 802068c:	4b68      	ldr	r3, [pc, #416]	; (8020830 <localtime_r+0x1e4>)
 802068e:	2230      	movs	r2, #48	; 0x30
 8020690:	fb02 3505 	mla	r5, r2, r5, r3
 8020694:	f001 faa6 	bl	8021be4 <__tz_lock>
 8020698:	f001 fab0 	bl	8021bfc <_tzset_unlocked>
 802069c:	4b65      	ldr	r3, [pc, #404]	; (8020834 <localtime_r+0x1e8>)
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	b353      	cbz	r3, 80206f8 <localtime_r+0xac>
 80206a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80206a6:	42b3      	cmp	r3, r6
 80206a8:	d119      	bne.n	80206de <localtime_r+0x92>
 80206aa:	f8d8 1000 	ldr.w	r1, [r8]
 80206ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80206b2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80206b6:	b9d1      	cbnz	r1, 80206ee <localtime_r+0xa2>
 80206b8:	4296      	cmp	r6, r2
 80206ba:	eb77 0303 	sbcs.w	r3, r7, r3
 80206be:	da23      	bge.n	8020708 <localtime_r+0xbc>
 80206c0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80206c4:	4296      	cmp	r6, r2
 80206c6:	eb77 0303 	sbcs.w	r3, r7, r3
 80206ca:	bfb4      	ite	lt
 80206cc:	2301      	movlt	r3, #1
 80206ce:	2300      	movge	r3, #0
 80206d0:	6223      	str	r3, [r4, #32]
 80206d2:	db1b      	blt.n	802070c <localtime_r+0xc0>
 80206d4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80206d8:	e01a      	b.n	8020710 <localtime_r+0xc4>
 80206da:	2501      	movs	r5, #1
 80206dc:	e7d6      	b.n	802068c <localtime_r+0x40>
 80206de:	4630      	mov	r0, r6
 80206e0:	f001 f9d8 	bl	8021a94 <__tzcalc_limits>
 80206e4:	2800      	cmp	r0, #0
 80206e6:	d1e0      	bne.n	80206aa <localtime_r+0x5e>
 80206e8:	f04f 33ff 	mov.w	r3, #4294967295
 80206ec:	e004      	b.n	80206f8 <localtime_r+0xac>
 80206ee:	4296      	cmp	r6, r2
 80206f0:	eb77 0303 	sbcs.w	r3, r7, r3
 80206f4:	da02      	bge.n	80206fc <localtime_r+0xb0>
 80206f6:	2300      	movs	r3, #0
 80206f8:	6223      	str	r3, [r4, #32]
 80206fa:	e7eb      	b.n	80206d4 <localtime_r+0x88>
 80206fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020700:	4296      	cmp	r6, r2
 8020702:	eb77 0303 	sbcs.w	r3, r7, r3
 8020706:	daf6      	bge.n	80206f6 <localtime_r+0xaa>
 8020708:	2301      	movs	r3, #1
 802070a:	6223      	str	r3, [r4, #32]
 802070c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020710:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020714:	203c      	movs	r0, #60	; 0x3c
 8020716:	fb91 f6f3 	sdiv	r6, r1, r3
 802071a:	fb03 1316 	mls	r3, r3, r6, r1
 802071e:	6861      	ldr	r1, [r4, #4]
 8020720:	fb93 f2f0 	sdiv	r2, r3, r0
 8020724:	fb00 3012 	mls	r0, r0, r2, r3
 8020728:	6823      	ldr	r3, [r4, #0]
 802072a:	1a89      	subs	r1, r1, r2
 802072c:	68a2      	ldr	r2, [r4, #8]
 802072e:	6061      	str	r1, [r4, #4]
 8020730:	1a1b      	subs	r3, r3, r0
 8020732:	1b92      	subs	r2, r2, r6
 8020734:	2b3b      	cmp	r3, #59	; 0x3b
 8020736:	6023      	str	r3, [r4, #0]
 8020738:	60a2      	str	r2, [r4, #8]
 802073a:	dd35      	ble.n	80207a8 <localtime_r+0x15c>
 802073c:	3101      	adds	r1, #1
 802073e:	6061      	str	r1, [r4, #4]
 8020740:	3b3c      	subs	r3, #60	; 0x3c
 8020742:	6023      	str	r3, [r4, #0]
 8020744:	6863      	ldr	r3, [r4, #4]
 8020746:	2b3b      	cmp	r3, #59	; 0x3b
 8020748:	dd34      	ble.n	80207b4 <localtime_r+0x168>
 802074a:	3201      	adds	r2, #1
 802074c:	60a2      	str	r2, [r4, #8]
 802074e:	3b3c      	subs	r3, #60	; 0x3c
 8020750:	6063      	str	r3, [r4, #4]
 8020752:	68a3      	ldr	r3, [r4, #8]
 8020754:	2b17      	cmp	r3, #23
 8020756:	dd33      	ble.n	80207c0 <localtime_r+0x174>
 8020758:	69e2      	ldr	r2, [r4, #28]
 802075a:	3201      	adds	r2, #1
 802075c:	61e2      	str	r2, [r4, #28]
 802075e:	69a2      	ldr	r2, [r4, #24]
 8020760:	3201      	adds	r2, #1
 8020762:	2a06      	cmp	r2, #6
 8020764:	bfc8      	it	gt
 8020766:	2200      	movgt	r2, #0
 8020768:	61a2      	str	r2, [r4, #24]
 802076a:	68e2      	ldr	r2, [r4, #12]
 802076c:	3b18      	subs	r3, #24
 802076e:	3201      	adds	r2, #1
 8020770:	60a3      	str	r3, [r4, #8]
 8020772:	6923      	ldr	r3, [r4, #16]
 8020774:	60e2      	str	r2, [r4, #12]
 8020776:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 802077a:	428a      	cmp	r2, r1
 802077c:	dd0e      	ble.n	802079c <localtime_r+0x150>
 802077e:	2b0b      	cmp	r3, #11
 8020780:	eba2 0201 	sub.w	r2, r2, r1
 8020784:	60e2      	str	r2, [r4, #12]
 8020786:	f103 0201 	add.w	r2, r3, #1
 802078a:	bf09      	itett	eq
 802078c:	6963      	ldreq	r3, [r4, #20]
 802078e:	6122      	strne	r2, [r4, #16]
 8020790:	2200      	moveq	r2, #0
 8020792:	3301      	addeq	r3, #1
 8020794:	bf02      	ittt	eq
 8020796:	6122      	streq	r2, [r4, #16]
 8020798:	6163      	streq	r3, [r4, #20]
 802079a:	61e2      	streq	r2, [r4, #28]
 802079c:	f001 fa28 	bl	8021bf0 <__tz_unlock>
 80207a0:	4620      	mov	r0, r4
 80207a2:	b002      	add	sp, #8
 80207a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	dacb      	bge.n	8020744 <localtime_r+0xf8>
 80207ac:	3901      	subs	r1, #1
 80207ae:	6061      	str	r1, [r4, #4]
 80207b0:	333c      	adds	r3, #60	; 0x3c
 80207b2:	e7c6      	b.n	8020742 <localtime_r+0xf6>
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	dacc      	bge.n	8020752 <localtime_r+0x106>
 80207b8:	3a01      	subs	r2, #1
 80207ba:	60a2      	str	r2, [r4, #8]
 80207bc:	333c      	adds	r3, #60	; 0x3c
 80207be:	e7c7      	b.n	8020750 <localtime_r+0x104>
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	daeb      	bge.n	802079c <localtime_r+0x150>
 80207c4:	69e2      	ldr	r2, [r4, #28]
 80207c6:	3a01      	subs	r2, #1
 80207c8:	61e2      	str	r2, [r4, #28]
 80207ca:	69a2      	ldr	r2, [r4, #24]
 80207cc:	3a01      	subs	r2, #1
 80207ce:	bf48      	it	mi
 80207d0:	2206      	movmi	r2, #6
 80207d2:	61a2      	str	r2, [r4, #24]
 80207d4:	68e2      	ldr	r2, [r4, #12]
 80207d6:	3318      	adds	r3, #24
 80207d8:	3a01      	subs	r2, #1
 80207da:	60e2      	str	r2, [r4, #12]
 80207dc:	60a3      	str	r3, [r4, #8]
 80207de:	2a00      	cmp	r2, #0
 80207e0:	d1dc      	bne.n	802079c <localtime_r+0x150>
 80207e2:	6923      	ldr	r3, [r4, #16]
 80207e4:	3b01      	subs	r3, #1
 80207e6:	d405      	bmi.n	80207f4 <localtime_r+0x1a8>
 80207e8:	6123      	str	r3, [r4, #16]
 80207ea:	6923      	ldr	r3, [r4, #16]
 80207ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80207f0:	60e3      	str	r3, [r4, #12]
 80207f2:	e7d3      	b.n	802079c <localtime_r+0x150>
 80207f4:	230b      	movs	r3, #11
 80207f6:	6123      	str	r3, [r4, #16]
 80207f8:	6963      	ldr	r3, [r4, #20]
 80207fa:	1e5a      	subs	r2, r3, #1
 80207fc:	6162      	str	r2, [r4, #20]
 80207fe:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8020802:	0793      	lsls	r3, r2, #30
 8020804:	d105      	bne.n	8020812 <localtime_r+0x1c6>
 8020806:	2164      	movs	r1, #100	; 0x64
 8020808:	fb92 f3f1 	sdiv	r3, r2, r1
 802080c:	fb01 2313 	mls	r3, r1, r3, r2
 8020810:	b963      	cbnz	r3, 802082c <localtime_r+0x1e0>
 8020812:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020816:	fb92 f3f1 	sdiv	r3, r2, r1
 802081a:	fb01 2313 	mls	r3, r1, r3, r2
 802081e:	fab3 f383 	clz	r3, r3
 8020822:	095b      	lsrs	r3, r3, #5
 8020824:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020828:	61e3      	str	r3, [r4, #28]
 802082a:	e7de      	b.n	80207ea <localtime_r+0x19e>
 802082c:	2301      	movs	r3, #1
 802082e:	e7f9      	b.n	8020824 <localtime_r+0x1d8>
 8020830:	0802991c 	.word	0x0802991c
 8020834:	20000f4c 	.word	0x20000f4c

08020838 <__retarget_lock_init_recursive>:
 8020838:	4770      	bx	lr

0802083a <__retarget_lock_close_recursive>:
 802083a:	4770      	bx	lr

0802083c <__retarget_lock_acquire>:
 802083c:	4770      	bx	lr

0802083e <__retarget_lock_acquire_recursive>:
 802083e:	4770      	bx	lr

08020840 <__retarget_lock_release>:
 8020840:	4770      	bx	lr

08020842 <__retarget_lock_release_recursive>:
 8020842:	4770      	bx	lr

08020844 <__swhatbuf_r>:
 8020844:	b570      	push	{r4, r5, r6, lr}
 8020846:	460e      	mov	r6, r1
 8020848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802084c:	2900      	cmp	r1, #0
 802084e:	b096      	sub	sp, #88	; 0x58
 8020850:	4614      	mov	r4, r2
 8020852:	461d      	mov	r5, r3
 8020854:	da07      	bge.n	8020866 <__swhatbuf_r+0x22>
 8020856:	2300      	movs	r3, #0
 8020858:	602b      	str	r3, [r5, #0]
 802085a:	89b3      	ldrh	r3, [r6, #12]
 802085c:	061a      	lsls	r2, r3, #24
 802085e:	d410      	bmi.n	8020882 <__swhatbuf_r+0x3e>
 8020860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020864:	e00e      	b.n	8020884 <__swhatbuf_r+0x40>
 8020866:	466a      	mov	r2, sp
 8020868:	f001 fd32 	bl	80222d0 <_fstat_r>
 802086c:	2800      	cmp	r0, #0
 802086e:	dbf2      	blt.n	8020856 <__swhatbuf_r+0x12>
 8020870:	9a01      	ldr	r2, [sp, #4]
 8020872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802087a:	425a      	negs	r2, r3
 802087c:	415a      	adcs	r2, r3
 802087e:	602a      	str	r2, [r5, #0]
 8020880:	e7ee      	b.n	8020860 <__swhatbuf_r+0x1c>
 8020882:	2340      	movs	r3, #64	; 0x40
 8020884:	2000      	movs	r0, #0
 8020886:	6023      	str	r3, [r4, #0]
 8020888:	b016      	add	sp, #88	; 0x58
 802088a:	bd70      	pop	{r4, r5, r6, pc}

0802088c <__smakebuf_r>:
 802088c:	898b      	ldrh	r3, [r1, #12]
 802088e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020890:	079d      	lsls	r5, r3, #30
 8020892:	4606      	mov	r6, r0
 8020894:	460c      	mov	r4, r1
 8020896:	d507      	bpl.n	80208a8 <__smakebuf_r+0x1c>
 8020898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802089c:	6023      	str	r3, [r4, #0]
 802089e:	6123      	str	r3, [r4, #16]
 80208a0:	2301      	movs	r3, #1
 80208a2:	6163      	str	r3, [r4, #20]
 80208a4:	b002      	add	sp, #8
 80208a6:	bd70      	pop	{r4, r5, r6, pc}
 80208a8:	ab01      	add	r3, sp, #4
 80208aa:	466a      	mov	r2, sp
 80208ac:	f7ff ffca 	bl	8020844 <__swhatbuf_r>
 80208b0:	9900      	ldr	r1, [sp, #0]
 80208b2:	4605      	mov	r5, r0
 80208b4:	4630      	mov	r0, r6
 80208b6:	f000 f8af 	bl	8020a18 <_malloc_r>
 80208ba:	b948      	cbnz	r0, 80208d0 <__smakebuf_r+0x44>
 80208bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80208c0:	059a      	lsls	r2, r3, #22
 80208c2:	d4ef      	bmi.n	80208a4 <__smakebuf_r+0x18>
 80208c4:	f023 0303 	bic.w	r3, r3, #3
 80208c8:	f043 0302 	orr.w	r3, r3, #2
 80208cc:	81a3      	strh	r3, [r4, #12]
 80208ce:	e7e3      	b.n	8020898 <__smakebuf_r+0xc>
 80208d0:	4b0d      	ldr	r3, [pc, #52]	; (8020908 <__smakebuf_r+0x7c>)
 80208d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80208d4:	89a3      	ldrh	r3, [r4, #12]
 80208d6:	6020      	str	r0, [r4, #0]
 80208d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80208dc:	81a3      	strh	r3, [r4, #12]
 80208de:	9b00      	ldr	r3, [sp, #0]
 80208e0:	6163      	str	r3, [r4, #20]
 80208e2:	9b01      	ldr	r3, [sp, #4]
 80208e4:	6120      	str	r0, [r4, #16]
 80208e6:	b15b      	cbz	r3, 8020900 <__smakebuf_r+0x74>
 80208e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80208ec:	4630      	mov	r0, r6
 80208ee:	f001 fdf7 	bl	80224e0 <_isatty_r>
 80208f2:	b128      	cbz	r0, 8020900 <__smakebuf_r+0x74>
 80208f4:	89a3      	ldrh	r3, [r4, #12]
 80208f6:	f023 0303 	bic.w	r3, r3, #3
 80208fa:	f043 0301 	orr.w	r3, r3, #1
 80208fe:	81a3      	strh	r3, [r4, #12]
 8020900:	89a0      	ldrh	r0, [r4, #12]
 8020902:	4305      	orrs	r5, r0
 8020904:	81a5      	strh	r5, [r4, #12]
 8020906:	e7cd      	b.n	80208a4 <__smakebuf_r+0x18>
 8020908:	08020071 	.word	0x08020071

0802090c <malloc>:
 802090c:	4b02      	ldr	r3, [pc, #8]	; (8020918 <malloc+0xc>)
 802090e:	4601      	mov	r1, r0
 8020910:	6818      	ldr	r0, [r3, #0]
 8020912:	f000 b881 	b.w	8020a18 <_malloc_r>
 8020916:	bf00      	nop
 8020918:	20000108 	.word	0x20000108

0802091c <free>:
 802091c:	4b02      	ldr	r3, [pc, #8]	; (8020928 <free+0xc>)
 802091e:	4601      	mov	r1, r0
 8020920:	6818      	ldr	r0, [r3, #0]
 8020922:	f000 b829 	b.w	8020978 <_free_r>
 8020926:	bf00      	nop
 8020928:	20000108 	.word	0x20000108

0802092c <memcpy>:
 802092c:	440a      	add	r2, r1
 802092e:	4291      	cmp	r1, r2
 8020930:	f100 33ff 	add.w	r3, r0, #4294967295
 8020934:	d100      	bne.n	8020938 <memcpy+0xc>
 8020936:	4770      	bx	lr
 8020938:	b510      	push	{r4, lr}
 802093a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802093e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020942:	4291      	cmp	r1, r2
 8020944:	d1f9      	bne.n	802093a <memcpy+0xe>
 8020946:	bd10      	pop	{r4, pc}

08020948 <memset>:
 8020948:	4402      	add	r2, r0
 802094a:	4603      	mov	r3, r0
 802094c:	4293      	cmp	r3, r2
 802094e:	d100      	bne.n	8020952 <memset+0xa>
 8020950:	4770      	bx	lr
 8020952:	f803 1b01 	strb.w	r1, [r3], #1
 8020956:	e7f9      	b.n	802094c <memset+0x4>

08020958 <_calloc_r>:
 8020958:	b513      	push	{r0, r1, r4, lr}
 802095a:	434a      	muls	r2, r1
 802095c:	4611      	mov	r1, r2
 802095e:	9201      	str	r2, [sp, #4]
 8020960:	f000 f85a 	bl	8020a18 <_malloc_r>
 8020964:	4604      	mov	r4, r0
 8020966:	b118      	cbz	r0, 8020970 <_calloc_r+0x18>
 8020968:	9a01      	ldr	r2, [sp, #4]
 802096a:	2100      	movs	r1, #0
 802096c:	f7ff ffec 	bl	8020948 <memset>
 8020970:	4620      	mov	r0, r4
 8020972:	b002      	add	sp, #8
 8020974:	bd10      	pop	{r4, pc}
	...

08020978 <_free_r>:
 8020978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802097a:	2900      	cmp	r1, #0
 802097c:	d048      	beq.n	8020a10 <_free_r+0x98>
 802097e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020982:	9001      	str	r0, [sp, #4]
 8020984:	2b00      	cmp	r3, #0
 8020986:	f1a1 0404 	sub.w	r4, r1, #4
 802098a:	bfb8      	it	lt
 802098c:	18e4      	addlt	r4, r4, r3
 802098e:	f001 fddf 	bl	8022550 <__malloc_lock>
 8020992:	4a20      	ldr	r2, [pc, #128]	; (8020a14 <_free_r+0x9c>)
 8020994:	9801      	ldr	r0, [sp, #4]
 8020996:	6813      	ldr	r3, [r2, #0]
 8020998:	4615      	mov	r5, r2
 802099a:	b933      	cbnz	r3, 80209aa <_free_r+0x32>
 802099c:	6063      	str	r3, [r4, #4]
 802099e:	6014      	str	r4, [r2, #0]
 80209a0:	b003      	add	sp, #12
 80209a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80209a6:	f001 bdd9 	b.w	802255c <__malloc_unlock>
 80209aa:	42a3      	cmp	r3, r4
 80209ac:	d90b      	bls.n	80209c6 <_free_r+0x4e>
 80209ae:	6821      	ldr	r1, [r4, #0]
 80209b0:	1862      	adds	r2, r4, r1
 80209b2:	4293      	cmp	r3, r2
 80209b4:	bf04      	itt	eq
 80209b6:	681a      	ldreq	r2, [r3, #0]
 80209b8:	685b      	ldreq	r3, [r3, #4]
 80209ba:	6063      	str	r3, [r4, #4]
 80209bc:	bf04      	itt	eq
 80209be:	1852      	addeq	r2, r2, r1
 80209c0:	6022      	streq	r2, [r4, #0]
 80209c2:	602c      	str	r4, [r5, #0]
 80209c4:	e7ec      	b.n	80209a0 <_free_r+0x28>
 80209c6:	461a      	mov	r2, r3
 80209c8:	685b      	ldr	r3, [r3, #4]
 80209ca:	b10b      	cbz	r3, 80209d0 <_free_r+0x58>
 80209cc:	42a3      	cmp	r3, r4
 80209ce:	d9fa      	bls.n	80209c6 <_free_r+0x4e>
 80209d0:	6811      	ldr	r1, [r2, #0]
 80209d2:	1855      	adds	r5, r2, r1
 80209d4:	42a5      	cmp	r5, r4
 80209d6:	d10b      	bne.n	80209f0 <_free_r+0x78>
 80209d8:	6824      	ldr	r4, [r4, #0]
 80209da:	4421      	add	r1, r4
 80209dc:	1854      	adds	r4, r2, r1
 80209de:	42a3      	cmp	r3, r4
 80209e0:	6011      	str	r1, [r2, #0]
 80209e2:	d1dd      	bne.n	80209a0 <_free_r+0x28>
 80209e4:	681c      	ldr	r4, [r3, #0]
 80209e6:	685b      	ldr	r3, [r3, #4]
 80209e8:	6053      	str	r3, [r2, #4]
 80209ea:	4421      	add	r1, r4
 80209ec:	6011      	str	r1, [r2, #0]
 80209ee:	e7d7      	b.n	80209a0 <_free_r+0x28>
 80209f0:	d902      	bls.n	80209f8 <_free_r+0x80>
 80209f2:	230c      	movs	r3, #12
 80209f4:	6003      	str	r3, [r0, #0]
 80209f6:	e7d3      	b.n	80209a0 <_free_r+0x28>
 80209f8:	6825      	ldr	r5, [r4, #0]
 80209fa:	1961      	adds	r1, r4, r5
 80209fc:	428b      	cmp	r3, r1
 80209fe:	bf04      	itt	eq
 8020a00:	6819      	ldreq	r1, [r3, #0]
 8020a02:	685b      	ldreq	r3, [r3, #4]
 8020a04:	6063      	str	r3, [r4, #4]
 8020a06:	bf04      	itt	eq
 8020a08:	1949      	addeq	r1, r1, r5
 8020a0a:	6021      	streq	r1, [r4, #0]
 8020a0c:	6054      	str	r4, [r2, #4]
 8020a0e:	e7c7      	b.n	80209a0 <_free_r+0x28>
 8020a10:	b003      	add	sp, #12
 8020a12:	bd30      	pop	{r4, r5, pc}
 8020a14:	20000f28 	.word	0x20000f28

08020a18 <_malloc_r>:
 8020a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a1a:	1ccd      	adds	r5, r1, #3
 8020a1c:	f025 0503 	bic.w	r5, r5, #3
 8020a20:	3508      	adds	r5, #8
 8020a22:	2d0c      	cmp	r5, #12
 8020a24:	bf38      	it	cc
 8020a26:	250c      	movcc	r5, #12
 8020a28:	2d00      	cmp	r5, #0
 8020a2a:	4606      	mov	r6, r0
 8020a2c:	db01      	blt.n	8020a32 <_malloc_r+0x1a>
 8020a2e:	42a9      	cmp	r1, r5
 8020a30:	d903      	bls.n	8020a3a <_malloc_r+0x22>
 8020a32:	230c      	movs	r3, #12
 8020a34:	6033      	str	r3, [r6, #0]
 8020a36:	2000      	movs	r0, #0
 8020a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a3a:	f001 fd89 	bl	8022550 <__malloc_lock>
 8020a3e:	4921      	ldr	r1, [pc, #132]	; (8020ac4 <_malloc_r+0xac>)
 8020a40:	680a      	ldr	r2, [r1, #0]
 8020a42:	4614      	mov	r4, r2
 8020a44:	b99c      	cbnz	r4, 8020a6e <_malloc_r+0x56>
 8020a46:	4f20      	ldr	r7, [pc, #128]	; (8020ac8 <_malloc_r+0xb0>)
 8020a48:	683b      	ldr	r3, [r7, #0]
 8020a4a:	b923      	cbnz	r3, 8020a56 <_malloc_r+0x3e>
 8020a4c:	4621      	mov	r1, r4
 8020a4e:	4630      	mov	r0, r6
 8020a50:	f000 f8da 	bl	8020c08 <_sbrk_r>
 8020a54:	6038      	str	r0, [r7, #0]
 8020a56:	4629      	mov	r1, r5
 8020a58:	4630      	mov	r0, r6
 8020a5a:	f000 f8d5 	bl	8020c08 <_sbrk_r>
 8020a5e:	1c43      	adds	r3, r0, #1
 8020a60:	d123      	bne.n	8020aaa <_malloc_r+0x92>
 8020a62:	230c      	movs	r3, #12
 8020a64:	6033      	str	r3, [r6, #0]
 8020a66:	4630      	mov	r0, r6
 8020a68:	f001 fd78 	bl	802255c <__malloc_unlock>
 8020a6c:	e7e3      	b.n	8020a36 <_malloc_r+0x1e>
 8020a6e:	6823      	ldr	r3, [r4, #0]
 8020a70:	1b5b      	subs	r3, r3, r5
 8020a72:	d417      	bmi.n	8020aa4 <_malloc_r+0x8c>
 8020a74:	2b0b      	cmp	r3, #11
 8020a76:	d903      	bls.n	8020a80 <_malloc_r+0x68>
 8020a78:	6023      	str	r3, [r4, #0]
 8020a7a:	441c      	add	r4, r3
 8020a7c:	6025      	str	r5, [r4, #0]
 8020a7e:	e004      	b.n	8020a8a <_malloc_r+0x72>
 8020a80:	6863      	ldr	r3, [r4, #4]
 8020a82:	42a2      	cmp	r2, r4
 8020a84:	bf0c      	ite	eq
 8020a86:	600b      	streq	r3, [r1, #0]
 8020a88:	6053      	strne	r3, [r2, #4]
 8020a8a:	4630      	mov	r0, r6
 8020a8c:	f001 fd66 	bl	802255c <__malloc_unlock>
 8020a90:	f104 000b 	add.w	r0, r4, #11
 8020a94:	1d23      	adds	r3, r4, #4
 8020a96:	f020 0007 	bic.w	r0, r0, #7
 8020a9a:	1ac2      	subs	r2, r0, r3
 8020a9c:	d0cc      	beq.n	8020a38 <_malloc_r+0x20>
 8020a9e:	1a1b      	subs	r3, r3, r0
 8020aa0:	50a3      	str	r3, [r4, r2]
 8020aa2:	e7c9      	b.n	8020a38 <_malloc_r+0x20>
 8020aa4:	4622      	mov	r2, r4
 8020aa6:	6864      	ldr	r4, [r4, #4]
 8020aa8:	e7cc      	b.n	8020a44 <_malloc_r+0x2c>
 8020aaa:	1cc4      	adds	r4, r0, #3
 8020aac:	f024 0403 	bic.w	r4, r4, #3
 8020ab0:	42a0      	cmp	r0, r4
 8020ab2:	d0e3      	beq.n	8020a7c <_malloc_r+0x64>
 8020ab4:	1a21      	subs	r1, r4, r0
 8020ab6:	4630      	mov	r0, r6
 8020ab8:	f000 f8a6 	bl	8020c08 <_sbrk_r>
 8020abc:	3001      	adds	r0, #1
 8020abe:	d1dd      	bne.n	8020a7c <_malloc_r+0x64>
 8020ac0:	e7cf      	b.n	8020a62 <_malloc_r+0x4a>
 8020ac2:	bf00      	nop
 8020ac4:	20000f28 	.word	0x20000f28
 8020ac8:	20000f2c 	.word	0x20000f2c

08020acc <_open_r>:
 8020acc:	b538      	push	{r3, r4, r5, lr}
 8020ace:	4d07      	ldr	r5, [pc, #28]	; (8020aec <_open_r+0x20>)
 8020ad0:	4604      	mov	r4, r0
 8020ad2:	4608      	mov	r0, r1
 8020ad4:	4611      	mov	r1, r2
 8020ad6:	2200      	movs	r2, #0
 8020ad8:	602a      	str	r2, [r5, #0]
 8020ada:	461a      	mov	r2, r3
 8020adc:	f7e0 fa00 	bl	8000ee0 <_open>
 8020ae0:	1c43      	adds	r3, r0, #1
 8020ae2:	d102      	bne.n	8020aea <_open_r+0x1e>
 8020ae4:	682b      	ldr	r3, [r5, #0]
 8020ae6:	b103      	cbz	r3, 8020aea <_open_r+0x1e>
 8020ae8:	6023      	str	r3, [r4, #0]
 8020aea:	bd38      	pop	{r3, r4, r5, pc}
 8020aec:	20000ff4 	.word	0x20000ff4

08020af0 <putchar>:
 8020af0:	4b09      	ldr	r3, [pc, #36]	; (8020b18 <putchar+0x28>)
 8020af2:	b513      	push	{r0, r1, r4, lr}
 8020af4:	681c      	ldr	r4, [r3, #0]
 8020af6:	4601      	mov	r1, r0
 8020af8:	b134      	cbz	r4, 8020b08 <putchar+0x18>
 8020afa:	69a3      	ldr	r3, [r4, #24]
 8020afc:	b923      	cbnz	r3, 8020b08 <putchar+0x18>
 8020afe:	9001      	str	r0, [sp, #4]
 8020b00:	4620      	mov	r0, r4
 8020b02:	f7ff fae9 	bl	80200d8 <__sinit>
 8020b06:	9901      	ldr	r1, [sp, #4]
 8020b08:	68a2      	ldr	r2, [r4, #8]
 8020b0a:	4620      	mov	r0, r4
 8020b0c:	b002      	add	sp, #8
 8020b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b12:	f002 b999 	b.w	8022e48 <_putc_r>
 8020b16:	bf00      	nop
 8020b18:	20000108 	.word	0x20000108

08020b1c <srand>:
 8020b1c:	b538      	push	{r3, r4, r5, lr}
 8020b1e:	4b10      	ldr	r3, [pc, #64]	; (8020b60 <srand+0x44>)
 8020b20:	681d      	ldr	r5, [r3, #0]
 8020b22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020b24:	4604      	mov	r4, r0
 8020b26:	b9b3      	cbnz	r3, 8020b56 <srand+0x3a>
 8020b28:	2018      	movs	r0, #24
 8020b2a:	f7ff feef 	bl	802090c <malloc>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	63a8      	str	r0, [r5, #56]	; 0x38
 8020b32:	b920      	cbnz	r0, 8020b3e <srand+0x22>
 8020b34:	4b0b      	ldr	r3, [pc, #44]	; (8020b64 <srand+0x48>)
 8020b36:	480c      	ldr	r0, [pc, #48]	; (8020b68 <srand+0x4c>)
 8020b38:	2142      	movs	r1, #66	; 0x42
 8020b3a:	f001 fb53 	bl	80221e4 <__assert_func>
 8020b3e:	490b      	ldr	r1, [pc, #44]	; (8020b6c <srand+0x50>)
 8020b40:	4b0b      	ldr	r3, [pc, #44]	; (8020b70 <srand+0x54>)
 8020b42:	e9c0 1300 	strd	r1, r3, [r0]
 8020b46:	4b0b      	ldr	r3, [pc, #44]	; (8020b74 <srand+0x58>)
 8020b48:	6083      	str	r3, [r0, #8]
 8020b4a:	230b      	movs	r3, #11
 8020b4c:	8183      	strh	r3, [r0, #12]
 8020b4e:	2100      	movs	r1, #0
 8020b50:	2001      	movs	r0, #1
 8020b52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020b56:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8020b58:	2200      	movs	r2, #0
 8020b5a:	611c      	str	r4, [r3, #16]
 8020b5c:	615a      	str	r2, [r3, #20]
 8020b5e:	bd38      	pop	{r3, r4, r5, pc}
 8020b60:	20000108 	.word	0x20000108
 8020b64:	080298a4 	.word	0x080298a4
 8020b68:	0802997c 	.word	0x0802997c
 8020b6c:	abcd330e 	.word	0xabcd330e
 8020b70:	e66d1234 	.word	0xe66d1234
 8020b74:	0005deec 	.word	0x0005deec

08020b78 <rand>:
 8020b78:	4b17      	ldr	r3, [pc, #92]	; (8020bd8 <rand+0x60>)
 8020b7a:	b510      	push	{r4, lr}
 8020b7c:	681c      	ldr	r4, [r3, #0]
 8020b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020b80:	b9b3      	cbnz	r3, 8020bb0 <rand+0x38>
 8020b82:	2018      	movs	r0, #24
 8020b84:	f7ff fec2 	bl	802090c <malloc>
 8020b88:	63a0      	str	r0, [r4, #56]	; 0x38
 8020b8a:	b928      	cbnz	r0, 8020b98 <rand+0x20>
 8020b8c:	4602      	mov	r2, r0
 8020b8e:	4b13      	ldr	r3, [pc, #76]	; (8020bdc <rand+0x64>)
 8020b90:	4813      	ldr	r0, [pc, #76]	; (8020be0 <rand+0x68>)
 8020b92:	214e      	movs	r1, #78	; 0x4e
 8020b94:	f001 fb26 	bl	80221e4 <__assert_func>
 8020b98:	4a12      	ldr	r2, [pc, #72]	; (8020be4 <rand+0x6c>)
 8020b9a:	4b13      	ldr	r3, [pc, #76]	; (8020be8 <rand+0x70>)
 8020b9c:	e9c0 2300 	strd	r2, r3, [r0]
 8020ba0:	4b12      	ldr	r3, [pc, #72]	; (8020bec <rand+0x74>)
 8020ba2:	6083      	str	r3, [r0, #8]
 8020ba4:	230b      	movs	r3, #11
 8020ba6:	8183      	strh	r3, [r0, #12]
 8020ba8:	2201      	movs	r2, #1
 8020baa:	2300      	movs	r3, #0
 8020bac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020bb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020bb2:	480f      	ldr	r0, [pc, #60]	; (8020bf0 <rand+0x78>)
 8020bb4:	690a      	ldr	r2, [r1, #16]
 8020bb6:	694b      	ldr	r3, [r1, #20]
 8020bb8:	4c0e      	ldr	r4, [pc, #56]	; (8020bf4 <rand+0x7c>)
 8020bba:	4350      	muls	r0, r2
 8020bbc:	fb04 0003 	mla	r0, r4, r3, r0
 8020bc0:	fba2 3404 	umull	r3, r4, r2, r4
 8020bc4:	1c5a      	adds	r2, r3, #1
 8020bc6:	4404      	add	r4, r0
 8020bc8:	f144 0000 	adc.w	r0, r4, #0
 8020bcc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020bd0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8020bd4:	bd10      	pop	{r4, pc}
 8020bd6:	bf00      	nop
 8020bd8:	20000108 	.word	0x20000108
 8020bdc:	080298a4 	.word	0x080298a4
 8020be0:	0802997c 	.word	0x0802997c
 8020be4:	abcd330e 	.word	0xabcd330e
 8020be8:	e66d1234 	.word	0xe66d1234
 8020bec:	0005deec 	.word	0x0005deec
 8020bf0:	5851f42d 	.word	0x5851f42d
 8020bf4:	4c957f2d 	.word	0x4c957f2d

08020bf8 <realloc>:
 8020bf8:	4b02      	ldr	r3, [pc, #8]	; (8020c04 <realloc+0xc>)
 8020bfa:	460a      	mov	r2, r1
 8020bfc:	4601      	mov	r1, r0
 8020bfe:	6818      	ldr	r0, [r3, #0]
 8020c00:	f001 bcb2 	b.w	8022568 <_realloc_r>
 8020c04:	20000108 	.word	0x20000108

08020c08 <_sbrk_r>:
 8020c08:	b538      	push	{r3, r4, r5, lr}
 8020c0a:	4d06      	ldr	r5, [pc, #24]	; (8020c24 <_sbrk_r+0x1c>)
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	4604      	mov	r4, r0
 8020c10:	4608      	mov	r0, r1
 8020c12:	602b      	str	r3, [r5, #0]
 8020c14:	f7e0 f972 	bl	8000efc <_sbrk>
 8020c18:	1c43      	adds	r3, r0, #1
 8020c1a:	d102      	bne.n	8020c22 <_sbrk_r+0x1a>
 8020c1c:	682b      	ldr	r3, [r5, #0]
 8020c1e:	b103      	cbz	r3, 8020c22 <_sbrk_r+0x1a>
 8020c20:	6023      	str	r3, [r4, #0]
 8020c22:	bd38      	pop	{r3, r4, r5, pc}
 8020c24:	20000ff4 	.word	0x20000ff4

08020c28 <_raise_r>:
 8020c28:	291f      	cmp	r1, #31
 8020c2a:	b538      	push	{r3, r4, r5, lr}
 8020c2c:	4604      	mov	r4, r0
 8020c2e:	460d      	mov	r5, r1
 8020c30:	d904      	bls.n	8020c3c <_raise_r+0x14>
 8020c32:	2316      	movs	r3, #22
 8020c34:	6003      	str	r3, [r0, #0]
 8020c36:	f04f 30ff 	mov.w	r0, #4294967295
 8020c3a:	bd38      	pop	{r3, r4, r5, pc}
 8020c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020c3e:	b112      	cbz	r2, 8020c46 <_raise_r+0x1e>
 8020c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020c44:	b94b      	cbnz	r3, 8020c5a <_raise_r+0x32>
 8020c46:	4620      	mov	r0, r4
 8020c48:	f000 f830 	bl	8020cac <_getpid_r>
 8020c4c:	462a      	mov	r2, r5
 8020c4e:	4601      	mov	r1, r0
 8020c50:	4620      	mov	r0, r4
 8020c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c56:	f000 b817 	b.w	8020c88 <_kill_r>
 8020c5a:	2b01      	cmp	r3, #1
 8020c5c:	d00a      	beq.n	8020c74 <_raise_r+0x4c>
 8020c5e:	1c59      	adds	r1, r3, #1
 8020c60:	d103      	bne.n	8020c6a <_raise_r+0x42>
 8020c62:	2316      	movs	r3, #22
 8020c64:	6003      	str	r3, [r0, #0]
 8020c66:	2001      	movs	r0, #1
 8020c68:	e7e7      	b.n	8020c3a <_raise_r+0x12>
 8020c6a:	2400      	movs	r4, #0
 8020c6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020c70:	4628      	mov	r0, r5
 8020c72:	4798      	blx	r3
 8020c74:	2000      	movs	r0, #0
 8020c76:	e7e0      	b.n	8020c3a <_raise_r+0x12>

08020c78 <raise>:
 8020c78:	4b02      	ldr	r3, [pc, #8]	; (8020c84 <raise+0xc>)
 8020c7a:	4601      	mov	r1, r0
 8020c7c:	6818      	ldr	r0, [r3, #0]
 8020c7e:	f7ff bfd3 	b.w	8020c28 <_raise_r>
 8020c82:	bf00      	nop
 8020c84:	20000108 	.word	0x20000108

08020c88 <_kill_r>:
 8020c88:	b538      	push	{r3, r4, r5, lr}
 8020c8a:	4d07      	ldr	r5, [pc, #28]	; (8020ca8 <_kill_r+0x20>)
 8020c8c:	2300      	movs	r3, #0
 8020c8e:	4604      	mov	r4, r0
 8020c90:	4608      	mov	r0, r1
 8020c92:	4611      	mov	r1, r2
 8020c94:	602b      	str	r3, [r5, #0]
 8020c96:	f7e0 f89c 	bl	8000dd2 <_kill>
 8020c9a:	1c43      	adds	r3, r0, #1
 8020c9c:	d102      	bne.n	8020ca4 <_kill_r+0x1c>
 8020c9e:	682b      	ldr	r3, [r5, #0]
 8020ca0:	b103      	cbz	r3, 8020ca4 <_kill_r+0x1c>
 8020ca2:	6023      	str	r3, [r4, #0]
 8020ca4:	bd38      	pop	{r3, r4, r5, pc}
 8020ca6:	bf00      	nop
 8020ca8:	20000ff4 	.word	0x20000ff4

08020cac <_getpid_r>:
 8020cac:	f7e0 b889 	b.w	8000dc2 <_getpid>

08020cb0 <siprintf>:
 8020cb0:	b40e      	push	{r1, r2, r3}
 8020cb2:	b500      	push	{lr}
 8020cb4:	b09c      	sub	sp, #112	; 0x70
 8020cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8020cb8:	9002      	str	r0, [sp, #8]
 8020cba:	9006      	str	r0, [sp, #24]
 8020cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8020cc0:	4809      	ldr	r0, [pc, #36]	; (8020ce8 <siprintf+0x38>)
 8020cc2:	9107      	str	r1, [sp, #28]
 8020cc4:	9104      	str	r1, [sp, #16]
 8020cc6:	4909      	ldr	r1, [pc, #36]	; (8020cec <siprintf+0x3c>)
 8020cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ccc:	9105      	str	r1, [sp, #20]
 8020cce:	6800      	ldr	r0, [r0, #0]
 8020cd0:	9301      	str	r3, [sp, #4]
 8020cd2:	a902      	add	r1, sp, #8
 8020cd4:	f001 fcca 	bl	802266c <_svfiprintf_r>
 8020cd8:	9b02      	ldr	r3, [sp, #8]
 8020cda:	2200      	movs	r2, #0
 8020cdc:	701a      	strb	r2, [r3, #0]
 8020cde:	b01c      	add	sp, #112	; 0x70
 8020ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ce4:	b003      	add	sp, #12
 8020ce6:	4770      	bx	lr
 8020ce8:	20000108 	.word	0x20000108
 8020cec:	ffff0208 	.word	0xffff0208

08020cf0 <__sread>:
 8020cf0:	b510      	push	{r4, lr}
 8020cf2:	460c      	mov	r4, r1
 8020cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020cf8:	f002 f8ee 	bl	8022ed8 <_read_r>
 8020cfc:	2800      	cmp	r0, #0
 8020cfe:	bfab      	itete	ge
 8020d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d02:	89a3      	ldrhlt	r3, [r4, #12]
 8020d04:	181b      	addge	r3, r3, r0
 8020d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d0a:	bfac      	ite	ge
 8020d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d0e:	81a3      	strhlt	r3, [r4, #12]
 8020d10:	bd10      	pop	{r4, pc}

08020d12 <__seofread>:
 8020d12:	2000      	movs	r0, #0
 8020d14:	4770      	bx	lr

08020d16 <__swrite>:
 8020d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d1a:	461f      	mov	r7, r3
 8020d1c:	898b      	ldrh	r3, [r1, #12]
 8020d1e:	05db      	lsls	r3, r3, #23
 8020d20:	4605      	mov	r5, r0
 8020d22:	460c      	mov	r4, r1
 8020d24:	4616      	mov	r6, r2
 8020d26:	d505      	bpl.n	8020d34 <__swrite+0x1e>
 8020d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d2c:	2302      	movs	r3, #2
 8020d2e:	2200      	movs	r2, #0
 8020d30:	f001 fbea 	bl	8022508 <_lseek_r>
 8020d34:	89a3      	ldrh	r3, [r4, #12]
 8020d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d3e:	81a3      	strh	r3, [r4, #12]
 8020d40:	4632      	mov	r2, r6
 8020d42:	463b      	mov	r3, r7
 8020d44:	4628      	mov	r0, r5
 8020d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d4a:	f001 b965 	b.w	8022018 <_write_r>

08020d4e <__sseek>:
 8020d4e:	b510      	push	{r4, lr}
 8020d50:	460c      	mov	r4, r1
 8020d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d56:	f001 fbd7 	bl	8022508 <_lseek_r>
 8020d5a:	1c43      	adds	r3, r0, #1
 8020d5c:	89a3      	ldrh	r3, [r4, #12]
 8020d5e:	bf15      	itete	ne
 8020d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d6a:	81a3      	strheq	r3, [r4, #12]
 8020d6c:	bf18      	it	ne
 8020d6e:	81a3      	strhne	r3, [r4, #12]
 8020d70:	bd10      	pop	{r4, pc}

08020d72 <__sclose>:
 8020d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d76:	f001 ba53 	b.w	8022220 <_close_r>
	...

08020d7c <iso_year_adjust>:
 8020d7c:	6941      	ldr	r1, [r0, #20]
 8020d7e:	2900      	cmp	r1, #0
 8020d80:	f240 736c 	movw	r3, #1900	; 0x76c
 8020d84:	bfa8      	it	ge
 8020d86:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8020d8a:	18ca      	adds	r2, r1, r3
 8020d8c:	078b      	lsls	r3, r1, #30
 8020d8e:	d105      	bne.n	8020d9c <iso_year_adjust+0x20>
 8020d90:	2164      	movs	r1, #100	; 0x64
 8020d92:	fb92 f3f1 	sdiv	r3, r2, r1
 8020d96:	fb01 2313 	mls	r3, r1, r3, r2
 8020d9a:	b9db      	cbnz	r3, 8020dd4 <iso_year_adjust+0x58>
 8020d9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020da0:	fb92 f3f1 	sdiv	r3, r2, r1
 8020da4:	fb01 2313 	mls	r3, r1, r3, r2
 8020da8:	fab3 f383 	clz	r3, r3
 8020dac:	095b      	lsrs	r3, r3, #5
 8020dae:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8020db2:	0040      	lsls	r0, r0, #1
 8020db4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8020db8:	4418      	add	r0, r3
 8020dba:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8020dbe:	4298      	cmp	r0, r3
 8020dc0:	d03a      	beq.n	8020e38 <iso_year_adjust+0xbc>
 8020dc2:	dc21      	bgt.n	8020e08 <iso_year_adjust+0x8c>
 8020dc4:	2801      	cmp	r0, #1
 8020dc6:	dc1a      	bgt.n	8020dfe <iso_year_adjust+0x82>
 8020dc8:	2800      	cmp	r0, #0
 8020dca:	bfb4      	ite	lt
 8020dcc:	2000      	movlt	r0, #0
 8020dce:	f04f 30ff 	movge.w	r0, #4294967295
 8020dd2:	4770      	bx	lr
 8020dd4:	2301      	movs	r3, #1
 8020dd6:	e7ea      	b.n	8020dae <iso_year_adjust+0x32>
 8020dd8:	2817      	cmp	r0, #23
 8020dda:	d813      	bhi.n	8020e04 <iso_year_adjust+0x88>
 8020ddc:	e8df f000 	tbb	[pc, r0]
 8020de0:	0c0c0c0c 	.word	0x0c0c0c0c
 8020de4:	0c0c1212 	.word	0x0c0c1212
 8020de8:	12121212 	.word	0x12121212
 8020dec:	12121212 	.word	0x12121212
 8020df0:	0c0c1212 	.word	0x0c0c1212
 8020df4:	0c0c1212 	.word	0x0c0c1212
 8020df8:	f04f 30ff 	mov.w	r0, #4294967295
 8020dfc:	4770      	bx	lr
 8020dfe:	380a      	subs	r0, #10
 8020e00:	2817      	cmp	r0, #23
 8020e02:	d9e9      	bls.n	8020dd8 <iso_year_adjust+0x5c>
 8020e04:	2000      	movs	r0, #0
 8020e06:	4770      	bx	lr
 8020e08:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8020e0c:	4298      	cmp	r0, r3
 8020e0e:	dc06      	bgt.n	8020e1e <iso_year_adjust+0xa2>
 8020e10:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8020e14:	4298      	cmp	r0, r3
 8020e16:	bfd4      	ite	le
 8020e18:	2000      	movle	r0, #0
 8020e1a:	2001      	movgt	r0, #1
 8020e1c:	4770      	bx	lr
 8020e1e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8020e22:	3802      	subs	r0, #2
 8020e24:	2815      	cmp	r0, #21
 8020e26:	d8ed      	bhi.n	8020e04 <iso_year_adjust+0x88>
 8020e28:	2301      	movs	r3, #1
 8020e2a:	4083      	lsls	r3, r0
 8020e2c:	4803      	ldr	r0, [pc, #12]	; (8020e3c <iso_year_adjust+0xc0>)
 8020e2e:	4018      	ands	r0, r3
 8020e30:	3800      	subs	r0, #0
 8020e32:	bf18      	it	ne
 8020e34:	2001      	movne	r0, #1
 8020e36:	4770      	bx	lr
 8020e38:	2001      	movs	r0, #1
 8020e3a:	4770      	bx	lr
 8020e3c:	002a001f 	.word	0x002a001f

08020e40 <__strftime>:
 8020e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e44:	b091      	sub	sp, #68	; 0x44
 8020e46:	461d      	mov	r5, r3
 8020e48:	2300      	movs	r3, #0
 8020e4a:	4681      	mov	r9, r0
 8020e4c:	4688      	mov	r8, r1
 8020e4e:	9304      	str	r3, [sp, #16]
 8020e50:	461c      	mov	r4, r3
 8020e52:	7813      	ldrb	r3, [r2, #0]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	f000 84d1 	beq.w	80217fc <__strftime+0x9bc>
 8020e5a:	2b25      	cmp	r3, #37	; 0x25
 8020e5c:	d11b      	bne.n	8020e96 <__strftime+0x56>
 8020e5e:	7857      	ldrb	r7, [r2, #1]
 8020e60:	2f30      	cmp	r7, #48	; 0x30
 8020e62:	d024      	beq.n	8020eae <__strftime+0x6e>
 8020e64:	2f2b      	cmp	r7, #43	; 0x2b
 8020e66:	d022      	beq.n	8020eae <__strftime+0x6e>
 8020e68:	f102 0b01 	add.w	fp, r2, #1
 8020e6c:	2700      	movs	r7, #0
 8020e6e:	f89b 3000 	ldrb.w	r3, [fp]
 8020e72:	3b31      	subs	r3, #49	; 0x31
 8020e74:	2b08      	cmp	r3, #8
 8020e76:	d81d      	bhi.n	8020eb4 <__strftime+0x74>
 8020e78:	4658      	mov	r0, fp
 8020e7a:	220a      	movs	r2, #10
 8020e7c:	a908      	add	r1, sp, #32
 8020e7e:	f000 fdff 	bl	8021a80 <strtoul>
 8020e82:	f8dd b020 	ldr.w	fp, [sp, #32]
 8020e86:	4606      	mov	r6, r0
 8020e88:	f89b 3000 	ldrb.w	r3, [fp]
 8020e8c:	2b45      	cmp	r3, #69	; 0x45
 8020e8e:	d113      	bne.n	8020eb8 <__strftime+0x78>
 8020e90:	f10b 0b01 	add.w	fp, fp, #1
 8020e94:	e012      	b.n	8020ebc <__strftime+0x7c>
 8020e96:	f108 31ff 	add.w	r1, r8, #4294967295
 8020e9a:	42a1      	cmp	r1, r4
 8020e9c:	d802      	bhi.n	8020ea4 <__strftime+0x64>
 8020e9e:	2400      	movs	r4, #0
 8020ea0:	f000 bcb2 	b.w	8021808 <__strftime+0x9c8>
 8020ea4:	f809 3004 	strb.w	r3, [r9, r4]
 8020ea8:	3201      	adds	r2, #1
 8020eaa:	3401      	adds	r4, #1
 8020eac:	e7d1      	b.n	8020e52 <__strftime+0x12>
 8020eae:	f102 0b02 	add.w	fp, r2, #2
 8020eb2:	e7dc      	b.n	8020e6e <__strftime+0x2e>
 8020eb4:	2600      	movs	r6, #0
 8020eb6:	e7e7      	b.n	8020e88 <__strftime+0x48>
 8020eb8:	2b4f      	cmp	r3, #79	; 0x4f
 8020eba:	d0e9      	beq.n	8020e90 <__strftime+0x50>
 8020ebc:	f89b 0000 	ldrb.w	r0, [fp]
 8020ec0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8020ec4:	2b55      	cmp	r3, #85	; 0x55
 8020ec6:	d8ea      	bhi.n	8020e9e <__strftime+0x5e>
 8020ec8:	a201      	add	r2, pc, #4	; (adr r2, 8020ed0 <__strftime+0x90>)
 8020eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ece:	bf00      	nop
 8020ed0:	080217ef 	.word	0x080217ef
 8020ed4:	08020e9f 	.word	0x08020e9f
 8020ed8:	08020e9f 	.word	0x08020e9f
 8020edc:	08020e9f 	.word	0x08020e9f
 8020ee0:	08020e9f 	.word	0x08020e9f
 8020ee4:	08020e9f 	.word	0x08020e9f
 8020ee8:	08020e9f 	.word	0x08020e9f
 8020eec:	08020e9f 	.word	0x08020e9f
 8020ef0:	08020e9f 	.word	0x08020e9f
 8020ef4:	08020e9f 	.word	0x08020e9f
 8020ef8:	08020e9f 	.word	0x08020e9f
 8020efc:	08020e9f 	.word	0x08020e9f
 8020f00:	08020e9f 	.word	0x08020e9f
 8020f04:	08020e9f 	.word	0x08020e9f
 8020f08:	08020e9f 	.word	0x08020e9f
 8020f0c:	08020e9f 	.word	0x08020e9f
 8020f10:	08020e9f 	.word	0x08020e9f
 8020f14:	08020e9f 	.word	0x08020e9f
 8020f18:	08020e9f 	.word	0x08020e9f
 8020f1c:	08020e9f 	.word	0x08020e9f
 8020f20:	08020e9f 	.word	0x08020e9f
 8020f24:	08020e9f 	.word	0x08020e9f
 8020f28:	08020e9f 	.word	0x08020e9f
 8020f2c:	08020e9f 	.word	0x08020e9f
 8020f30:	08020e9f 	.word	0x08020e9f
 8020f34:	08020e9f 	.word	0x08020e9f
 8020f38:	08020e9f 	.word	0x08020e9f
 8020f3c:	08020e9f 	.word	0x08020e9f
 8020f40:	08021067 	.word	0x08021067
 8020f44:	080210c1 	.word	0x080210c1
 8020f48:	08021137 	.word	0x08021137
 8020f4c:	080211d1 	.word	0x080211d1
 8020f50:	08020e9f 	.word	0x08020e9f
 8020f54:	0802121d 	.word	0x0802121d
 8020f58:	080212fd 	.word	0x080212fd
 8020f5c:	080213ff 	.word	0x080213ff
 8020f60:	0802140d 	.word	0x0802140d
 8020f64:	08020e9f 	.word	0x08020e9f
 8020f68:	08020e9f 	.word	0x08020e9f
 8020f6c:	08020e9f 	.word	0x08020e9f
 8020f70:	0802143d 	.word	0x0802143d
 8020f74:	08020e9f 	.word	0x08020e9f
 8020f78:	08020e9f 	.word	0x08020e9f
 8020f7c:	08021455 	.word	0x08021455
 8020f80:	08020e9f 	.word	0x08020e9f
 8020f84:	080214a3 	.word	0x080214a3
 8020f88:	080215b9 	.word	0x080215b9
 8020f8c:	080215cb 	.word	0x080215cb
 8020f90:	08021623 	.word	0x08021623
 8020f94:	08021633 	.word	0x08021633
 8020f98:	080216a9 	.word	0x080216a9
 8020f9c:	0802112f 	.word	0x0802112f
 8020fa0:	080216dd 	.word	0x080216dd
 8020fa4:	0802179b 	.word	0x0802179b
 8020fa8:	08020e9f 	.word	0x08020e9f
 8020fac:	08020e9f 	.word	0x08020e9f
 8020fb0:	08020e9f 	.word	0x08020e9f
 8020fb4:	08020e9f 	.word	0x08020e9f
 8020fb8:	08020e9f 	.word	0x08020e9f
 8020fbc:	08020e9f 	.word	0x08020e9f
 8020fc0:	08021029 	.word	0x08021029
 8020fc4:	08021095 	.word	0x08021095
 8020fc8:	080210ef 	.word	0x080210ef
 8020fcc:	080211a9 	.word	0x080211a9
 8020fd0:	080211a9 	.word	0x080211a9
 8020fd4:	08020e9f 	.word	0x08020e9f
 8020fd8:	08021265 	.word	0x08021265
 8020fdc:	08021095 	.word	0x08021095
 8020fe0:	08020e9f 	.word	0x08020e9f
 8020fe4:	0802142f 	.word	0x0802142f
 8020fe8:	080213ff 	.word	0x080213ff
 8020fec:	0802140d 	.word	0x0802140d
 8020ff0:	08021437 	.word	0x08021437
 8020ff4:	08021441 	.word	0x08021441
 8020ff8:	08020e9f 	.word	0x08020e9f
 8020ffc:	08021455 	.word	0x08021455
 8021000:	08020e9f 	.word	0x08020e9f
 8021004:	0802111f 	.word	0x0802111f
 8021008:	080214b9 	.word	0x080214b9
 802100c:	080215bd 	.word	0x080215bd
 8021010:	08021605 	.word	0x08021605
 8021014:	08020e9f 	.word	0x08020e9f
 8021018:	08021699 	.word	0x08021699
 802101c:	08021127 	.word	0x08021127
 8021020:	080216c1 	.word	0x080216c1
 8021024:	0802172d 	.word	0x0802172d
 8021028:	69ab      	ldr	r3, [r5, #24]
 802102a:	4aa7      	ldr	r2, [pc, #668]	; (80212c8 <__strftime+0x488>)
 802102c:	3318      	adds	r3, #24
 802102e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021032:	4630      	mov	r0, r6
 8021034:	f7df f902 	bl	800023c <strlen>
 8021038:	3e01      	subs	r6, #1
 802103a:	4420      	add	r0, r4
 802103c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021040:	42a0      	cmp	r0, r4
 8021042:	d107      	bne.n	8021054 <__strftime+0x214>
 8021044:	f89b 3000 	ldrb.w	r3, [fp]
 8021048:	2b00      	cmp	r3, #0
 802104a:	f000 83d7 	beq.w	80217fc <__strftime+0x9bc>
 802104e:	f10b 0201 	add.w	r2, fp, #1
 8021052:	e6fe      	b.n	8020e52 <__strftime+0x12>
 8021054:	42a3      	cmp	r3, r4
 8021056:	f67f af22 	bls.w	8020e9e <__strftime+0x5e>
 802105a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802105e:	f809 2004 	strb.w	r2, [r9, r4]
 8021062:	3401      	adds	r4, #1
 8021064:	e7ec      	b.n	8021040 <__strftime+0x200>
 8021066:	69aa      	ldr	r2, [r5, #24]
 8021068:	4b97      	ldr	r3, [pc, #604]	; (80212c8 <__strftime+0x488>)
 802106a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802106e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8021070:	4630      	mov	r0, r6
 8021072:	f7df f8e3 	bl	800023c <strlen>
 8021076:	3e01      	subs	r6, #1
 8021078:	4420      	add	r0, r4
 802107a:	f108 33ff 	add.w	r3, r8, #4294967295
 802107e:	42a0      	cmp	r0, r4
 8021080:	d0e0      	beq.n	8021044 <__strftime+0x204>
 8021082:	42a3      	cmp	r3, r4
 8021084:	f67f af0b 	bls.w	8020e9e <__strftime+0x5e>
 8021088:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802108c:	f809 2004 	strb.w	r2, [r9, r4]
 8021090:	3401      	adds	r4, #1
 8021092:	e7f4      	b.n	802107e <__strftime+0x23e>
 8021094:	4b8c      	ldr	r3, [pc, #560]	; (80212c8 <__strftime+0x488>)
 8021096:	692a      	ldr	r2, [r5, #16]
 8021098:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802109c:	4630      	mov	r0, r6
 802109e:	f7df f8cd 	bl	800023c <strlen>
 80210a2:	3e01      	subs	r6, #1
 80210a4:	4420      	add	r0, r4
 80210a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80210aa:	42a0      	cmp	r0, r4
 80210ac:	d0ca      	beq.n	8021044 <__strftime+0x204>
 80210ae:	42a3      	cmp	r3, r4
 80210b0:	f67f aef5 	bls.w	8020e9e <__strftime+0x5e>
 80210b4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80210b8:	f809 2004 	strb.w	r2, [r9, r4]
 80210bc:	3401      	adds	r4, #1
 80210be:	e7f4      	b.n	80210aa <__strftime+0x26a>
 80210c0:	692b      	ldr	r3, [r5, #16]
 80210c2:	4a81      	ldr	r2, [pc, #516]	; (80212c8 <__strftime+0x488>)
 80210c4:	330c      	adds	r3, #12
 80210c6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80210ca:	4630      	mov	r0, r6
 80210cc:	f7df f8b6 	bl	800023c <strlen>
 80210d0:	3e01      	subs	r6, #1
 80210d2:	4420      	add	r0, r4
 80210d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80210d8:	42a0      	cmp	r0, r4
 80210da:	d0b3      	beq.n	8021044 <__strftime+0x204>
 80210dc:	42a3      	cmp	r3, r4
 80210de:	f67f aede 	bls.w	8020e9e <__strftime+0x5e>
 80210e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80210e6:	f809 2004 	strb.w	r2, [r9, r4]
 80210ea:	3401      	adds	r4, #1
 80210ec:	e7f4      	b.n	80210d8 <__strftime+0x298>
 80210ee:	4b76      	ldr	r3, [pc, #472]	; (80212c8 <__strftime+0x488>)
 80210f0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80210f4:	4630      	mov	r0, r6
 80210f6:	f7df f8a1 	bl	800023c <strlen>
 80210fa:	7833      	ldrb	r3, [r6, #0]
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	d0a1      	beq.n	8021044 <__strftime+0x204>
 8021100:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021102:	9300      	str	r3, [sp, #0]
 8021104:	4632      	mov	r2, r6
 8021106:	462b      	mov	r3, r5
 8021108:	eba8 0104 	sub.w	r1, r8, r4
 802110c:	eb09 0004 	add.w	r0, r9, r4
 8021110:	f7ff fe96 	bl	8020e40 <__strftime>
 8021114:	2800      	cmp	r0, #0
 8021116:	f77f aec2 	ble.w	8020e9e <__strftime+0x5e>
 802111a:	4404      	add	r4, r0
 802111c:	e792      	b.n	8021044 <__strftime+0x204>
 802111e:	4b6a      	ldr	r3, [pc, #424]	; (80212c8 <__strftime+0x488>)
 8021120:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8021124:	e7e6      	b.n	80210f4 <__strftime+0x2b4>
 8021126:	4b68      	ldr	r3, [pc, #416]	; (80212c8 <__strftime+0x488>)
 8021128:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802112c:	e7e2      	b.n	80210f4 <__strftime+0x2b4>
 802112e:	4b66      	ldr	r3, [pc, #408]	; (80212c8 <__strftime+0x488>)
 8021130:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8021134:	e7de      	b.n	80210f4 <__strftime+0x2b4>
 8021136:	4965      	ldr	r1, [pc, #404]	; (80212cc <__strftime+0x48c>)
 8021138:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802113c:	458a      	cmp	sl, r1
 802113e:	bfac      	ite	ge
 8021140:	2100      	movge	r1, #0
 8021142:	2101      	movlt	r1, #1
 8021144:	f1ba 0f00 	cmp.w	sl, #0
 8021148:	db0e      	blt.n	8021168 <__strftime+0x328>
 802114a:	2064      	movs	r0, #100	; 0x64
 802114c:	fb9a f0f0 	sdiv	r0, sl, r0
 8021150:	3013      	adds	r0, #19
 8021152:	b19f      	cbz	r7, 802117c <__strftime+0x33c>
 8021154:	2863      	cmp	r0, #99	; 0x63
 8021156:	dd25      	ble.n	80211a4 <__strftime+0x364>
 8021158:	4a5d      	ldr	r2, [pc, #372]	; (80212d0 <__strftime+0x490>)
 802115a:	4b5e      	ldr	r3, [pc, #376]	; (80212d4 <__strftime+0x494>)
 802115c:	2f2b      	cmp	r7, #43	; 0x2b
 802115e:	bf14      	ite	ne
 8021160:	4617      	movne	r7, r2
 8021162:	461f      	moveq	r7, r3
 8021164:	4a5c      	ldr	r2, [pc, #368]	; (80212d8 <__strftime+0x498>)
 8021166:	e00b      	b.n	8021180 <__strftime+0x340>
 8021168:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802116c:	9105      	str	r1, [sp, #20]
 802116e:	f001 f835 	bl	80221dc <abs>
 8021172:	2364      	movs	r3, #100	; 0x64
 8021174:	9905      	ldr	r1, [sp, #20]
 8021176:	fb90 f0f3 	sdiv	r0, r0, r3
 802117a:	e7ea      	b.n	8021152 <__strftime+0x312>
 802117c:	4f54      	ldr	r7, [pc, #336]	; (80212d0 <__strftime+0x490>)
 802117e:	4a57      	ldr	r2, [pc, #348]	; (80212dc <__strftime+0x49c>)
 8021180:	4b57      	ldr	r3, [pc, #348]	; (80212e0 <__strftime+0x4a0>)
 8021182:	9001      	str	r0, [sp, #4]
 8021184:	2e02      	cmp	r6, #2
 8021186:	bf2c      	ite	cs
 8021188:	ebc1 0606 	rsbcs	r6, r1, r6
 802118c:	f1c1 0602 	rsbcc	r6, r1, #2
 8021190:	494e      	ldr	r1, [pc, #312]	; (80212cc <__strftime+0x48c>)
 8021192:	9600      	str	r6, [sp, #0]
 8021194:	458a      	cmp	sl, r1
 8021196:	bfa8      	it	ge
 8021198:	463b      	movge	r3, r7
 802119a:	eba8 0104 	sub.w	r1, r8, r4
 802119e:	eb09 0004 	add.w	r0, r9, r4
 80211a2:	e02a      	b.n	80211fa <__strftime+0x3ba>
 80211a4:	4f4a      	ldr	r7, [pc, #296]	; (80212d0 <__strftime+0x490>)
 80211a6:	e7dd      	b.n	8021164 <__strftime+0x324>
 80211a8:	494e      	ldr	r1, [pc, #312]	; (80212e4 <__strftime+0x4a4>)
 80211aa:	4a4f      	ldr	r2, [pc, #316]	; (80212e8 <__strftime+0x4a8>)
 80211ac:	68eb      	ldr	r3, [r5, #12]
 80211ae:	2864      	cmp	r0, #100	; 0x64
 80211b0:	bf08      	it	eq
 80211b2:	460a      	moveq	r2, r1
 80211b4:	eba8 0104 	sub.w	r1, r8, r4
 80211b8:	eb09 0004 	add.w	r0, r9, r4
 80211bc:	f001 fe9e 	bl	8022efc <sniprintf>
 80211c0:	2800      	cmp	r0, #0
 80211c2:	f6ff ae6c 	blt.w	8020e9e <__strftime+0x5e>
 80211c6:	4404      	add	r4, r0
 80211c8:	45a0      	cmp	r8, r4
 80211ca:	f63f af3b 	bhi.w	8021044 <__strftime+0x204>
 80211ce:	e666      	b.n	8020e9e <__strftime+0x5e>
 80211d0:	6968      	ldr	r0, [r5, #20]
 80211d2:	692b      	ldr	r3, [r5, #16]
 80211d4:	68ef      	ldr	r7, [r5, #12]
 80211d6:	2800      	cmp	r0, #0
 80211d8:	eb09 0604 	add.w	r6, r9, r4
 80211dc:	eba8 0104 	sub.w	r1, r8, r4
 80211e0:	f103 0301 	add.w	r3, r3, #1
 80211e4:	db0c      	blt.n	8021200 <__strftime+0x3c0>
 80211e6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80211ea:	fb90 f2fc 	sdiv	r2, r0, ip
 80211ee:	fb0c 0212 	mls	r2, ip, r2, r0
 80211f2:	e9cd 7200 	strd	r7, r2, [sp]
 80211f6:	4a3d      	ldr	r2, [pc, #244]	; (80212ec <__strftime+0x4ac>)
 80211f8:	4630      	mov	r0, r6
 80211fa:	f001 fe7f 	bl	8022efc <sniprintf>
 80211fe:	e7df      	b.n	80211c0 <__strftime+0x380>
 8021200:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021204:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021208:	f000 ffe8 	bl	80221dc <abs>
 802120c:	2264      	movs	r2, #100	; 0x64
 802120e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8021212:	fb90 fcf2 	sdiv	ip, r0, r2
 8021216:	fb0c 0212 	mls	r2, ip, r2, r0
 802121a:	e7ea      	b.n	80211f2 <__strftime+0x3b2>
 802121c:	2325      	movs	r3, #37	; 0x25
 802121e:	f88d 3020 	strb.w	r3, [sp, #32]
 8021222:	b187      	cbz	r7, 8021246 <__strftime+0x406>
 8021224:	2e06      	cmp	r6, #6
 8021226:	bf38      	it	cc
 8021228:	2606      	movcc	r6, #6
 802122a:	1fb3      	subs	r3, r6, #6
 802122c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8021230:	d10c      	bne.n	802124c <__strftime+0x40c>
 8021232:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021236:	492e      	ldr	r1, [pc, #184]	; (80212f0 <__strftime+0x4b0>)
 8021238:	f001 fec0 	bl	8022fbc <strcpy>
 802123c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802123e:	9300      	str	r3, [sp, #0]
 8021240:	aa08      	add	r2, sp, #32
 8021242:	462b      	mov	r3, r5
 8021244:	e760      	b.n	8021108 <__strftime+0x2c8>
 8021246:	272b      	movs	r7, #43	; 0x2b
 8021248:	260a      	movs	r6, #10
 802124a:	e7ee      	b.n	802122a <__strftime+0x3ea>
 802124c:	4a29      	ldr	r2, [pc, #164]	; (80212f4 <__strftime+0x4b4>)
 802124e:	211e      	movs	r1, #30
 8021250:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021254:	f001 fe52 	bl	8022efc <sniprintf>
 8021258:	2800      	cmp	r0, #0
 802125a:	ddea      	ble.n	8021232 <__strftime+0x3f2>
 802125c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8021260:	4418      	add	r0, r3
 8021262:	e7e8      	b.n	8021236 <__strftime+0x3f6>
 8021264:	4628      	mov	r0, r5
 8021266:	f7ff fd89 	bl	8020d7c <iso_year_adjust>
 802126a:	4606      	mov	r6, r0
 802126c:	6968      	ldr	r0, [r5, #20]
 802126e:	2800      	cmp	r0, #0
 8021270:	db11      	blt.n	8021296 <__strftime+0x456>
 8021272:	2264      	movs	r2, #100	; 0x64
 8021274:	fb90 f3f2 	sdiv	r3, r0, r2
 8021278:	fb02 0313 	mls	r3, r2, r3, r0
 802127c:	441e      	add	r6, r3
 802127e:	2364      	movs	r3, #100	; 0x64
 8021280:	fb96 f0f3 	sdiv	r0, r6, r3
 8021284:	fb03 6610 	mls	r6, r3, r0, r6
 8021288:	441e      	add	r6, r3
 802128a:	fbb6 f2f3 	udiv	r2, r6, r3
 802128e:	fb03 6312 	mls	r3, r3, r2, r6
 8021292:	4a14      	ldr	r2, [pc, #80]	; (80212e4 <__strftime+0x4a4>)
 8021294:	e78e      	b.n	80211b4 <__strftime+0x374>
 8021296:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802129a:	f000 ff9f 	bl	80221dc <abs>
 802129e:	2364      	movs	r3, #100	; 0x64
 80212a0:	2e00      	cmp	r6, #0
 80212a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80212a6:	fb02 0313 	mls	r3, r2, r3, r0
 80212aa:	da05      	bge.n	80212b8 <__strftime+0x478>
 80212ac:	6969      	ldr	r1, [r5, #20]
 80212ae:	4a12      	ldr	r2, [pc, #72]	; (80212f8 <__strftime+0x4b8>)
 80212b0:	4291      	cmp	r1, r2
 80212b2:	bfb8      	it	lt
 80212b4:	2601      	movlt	r6, #1
 80212b6:	e7e1      	b.n	802127c <__strftime+0x43c>
 80212b8:	d0e0      	beq.n	802127c <__strftime+0x43c>
 80212ba:	6969      	ldr	r1, [r5, #20]
 80212bc:	4a03      	ldr	r2, [pc, #12]	; (80212cc <__strftime+0x48c>)
 80212be:	4291      	cmp	r1, r2
 80212c0:	bfb8      	it	lt
 80212c2:	f04f 36ff 	movlt.w	r6, #4294967295
 80212c6:	e7d9      	b.n	802127c <__strftime+0x43c>
 80212c8:	08029b60 	.word	0x08029b60
 80212cc:	fffff894 	.word	0xfffff894
 80212d0:	08029cd3 	.word	0x08029cd3
 80212d4:	080299ea 	.word	0x080299ea
 80212d8:	080299e2 	.word	0x080299e2
 80212dc:	080299db 	.word	0x080299db
 80212e0:	08029e13 	.word	0x08029e13
 80212e4:	080299fa 	.word	0x080299fa
 80212e8:	080299ec 	.word	0x080299ec
 80212ec:	080299f0 	.word	0x080299f0
 80212f0:	08029a03 	.word	0x08029a03
 80212f4:	080299ff 	.word	0x080299ff
 80212f8:	fffff895 	.word	0xfffff895
 80212fc:	4bb6      	ldr	r3, [pc, #728]	; (80215d8 <__strftime+0x798>)
 80212fe:	6969      	ldr	r1, [r5, #20]
 8021300:	4299      	cmp	r1, r3
 8021302:	bfac      	ite	ge
 8021304:	2300      	movge	r3, #0
 8021306:	2301      	movlt	r3, #1
 8021308:	4628      	mov	r0, r5
 802130a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802130e:	f7ff fd35 	bl	8020d7c <iso_year_adjust>
 8021312:	9906      	ldr	r1, [sp, #24]
 8021314:	2900      	cmp	r1, #0
 8021316:	4682      	mov	sl, r0
 8021318:	db27      	blt.n	802136a <__strftime+0x52a>
 802131a:	2264      	movs	r2, #100	; 0x64
 802131c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021320:	3213      	adds	r2, #19
 8021322:	6968      	ldr	r0, [r5, #20]
 8021324:	2800      	cmp	r0, #0
 8021326:	db2b      	blt.n	8021380 <__strftime+0x540>
 8021328:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802132c:	fb90 fefc 	sdiv	lr, r0, ip
 8021330:	fb0c 001e 	mls	r0, ip, lr, r0
 8021334:	f1ba 0f00 	cmp.w	sl, #0
 8021338:	da31      	bge.n	802139e <__strftime+0x55e>
 802133a:	6969      	ldr	r1, [r5, #20]
 802133c:	4ba7      	ldr	r3, [pc, #668]	; (80215dc <__strftime+0x79c>)
 802133e:	4299      	cmp	r1, r3
 8021340:	db38      	blt.n	80213b4 <__strftime+0x574>
 8021342:	eb0a 0300 	add.w	r3, sl, r0
 8021346:	1c59      	adds	r1, r3, #1
 8021348:	d139      	bne.n	80213be <__strftime+0x57e>
 802134a:	3a01      	subs	r2, #1
 802134c:	2363      	movs	r3, #99	; 0x63
 802134e:	2064      	movs	r0, #100	; 0x64
 8021350:	fb00 3202 	mla	r2, r0, r2, r3
 8021354:	9b05      	ldr	r3, [sp, #20]
 8021356:	2b00      	cmp	r3, #0
 8021358:	d036      	beq.n	80213c8 <__strftime+0x588>
 802135a:	232d      	movs	r3, #45	; 0x2d
 802135c:	f88d 3020 	strb.w	r3, [sp, #32]
 8021360:	b106      	cbz	r6, 8021364 <__strftime+0x524>
 8021362:	3e01      	subs	r6, #1
 8021364:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021368:	e038      	b.n	80213dc <__strftime+0x59c>
 802136a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802136e:	9106      	str	r1, [sp, #24]
 8021370:	f000 ff34 	bl	80221dc <abs>
 8021374:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021378:	9906      	ldr	r1, [sp, #24]
 802137a:	fb90 f2fc 	sdiv	r2, r0, ip
 802137e:	e7d0      	b.n	8021322 <__strftime+0x4e2>
 8021380:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021384:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021388:	f000 ff28 	bl	80221dc <abs>
 802138c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021390:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021394:	fb90 fefc 	sdiv	lr, r0, ip
 8021398:	fb0e 001c 	mls	r0, lr, ip, r0
 802139c:	e7ca      	b.n	8021334 <__strftime+0x4f4>
 802139e:	d0d0      	beq.n	8021342 <__strftime+0x502>
 80213a0:	4b8d      	ldr	r3, [pc, #564]	; (80215d8 <__strftime+0x798>)
 80213a2:	4299      	cmp	r1, r3
 80213a4:	bfb4      	ite	lt
 80213a6:	2301      	movlt	r3, #1
 80213a8:	2300      	movge	r3, #0
 80213aa:	9305      	str	r3, [sp, #20]
 80213ac:	bfb8      	it	lt
 80213ae:	f04f 3aff 	movlt.w	sl, #4294967295
 80213b2:	e7c6      	b.n	8021342 <__strftime+0x502>
 80213b4:	f04f 0a01 	mov.w	sl, #1
 80213b8:	f8cd a014 	str.w	sl, [sp, #20]
 80213bc:	e7c1      	b.n	8021342 <__strftime+0x502>
 80213be:	2b64      	cmp	r3, #100	; 0x64
 80213c0:	bf04      	itt	eq
 80213c2:	3201      	addeq	r2, #1
 80213c4:	2300      	moveq	r3, #0
 80213c6:	e7c2      	b.n	802134e <__strftime+0x50e>
 80213c8:	2f2b      	cmp	r7, #43	; 0x2b
 80213ca:	d106      	bne.n	80213da <__strftime+0x59a>
 80213cc:	f242 730f 	movw	r3, #9999	; 0x270f
 80213d0:	429a      	cmp	r2, r3
 80213d2:	d902      	bls.n	80213da <__strftime+0x59a>
 80213d4:	f88d 7020 	strb.w	r7, [sp, #32]
 80213d8:	e7c2      	b.n	8021360 <__strftime+0x520>
 80213da:	ab08      	add	r3, sp, #32
 80213dc:	2125      	movs	r1, #37	; 0x25
 80213de:	7019      	strb	r1, [r3, #0]
 80213e0:	b94f      	cbnz	r7, 80213f6 <__strftime+0x5b6>
 80213e2:	1c58      	adds	r0, r3, #1
 80213e4:	497e      	ldr	r1, [pc, #504]	; (80215e0 <__strftime+0x7a0>)
 80213e6:	9205      	str	r2, [sp, #20]
 80213e8:	f001 fde8 	bl	8022fbc <strcpy>
 80213ec:	9a05      	ldr	r2, [sp, #20]
 80213ee:	9200      	str	r2, [sp, #0]
 80213f0:	4633      	mov	r3, r6
 80213f2:	aa08      	add	r2, sp, #32
 80213f4:	e059      	b.n	80214aa <__strftime+0x66a>
 80213f6:	2130      	movs	r1, #48	; 0x30
 80213f8:	1c98      	adds	r0, r3, #2
 80213fa:	7059      	strb	r1, [r3, #1]
 80213fc:	e7f2      	b.n	80213e4 <__strftime+0x5a4>
 80213fe:	4979      	ldr	r1, [pc, #484]	; (80215e4 <__strftime+0x7a4>)
 8021400:	4a79      	ldr	r2, [pc, #484]	; (80215e8 <__strftime+0x7a8>)
 8021402:	68ab      	ldr	r3, [r5, #8]
 8021404:	286b      	cmp	r0, #107	; 0x6b
 8021406:	bf08      	it	eq
 8021408:	460a      	moveq	r2, r1
 802140a:	e6d3      	b.n	80211b4 <__strftime+0x374>
 802140c:	68ab      	ldr	r3, [r5, #8]
 802140e:	b163      	cbz	r3, 802142a <__strftime+0x5ea>
 8021410:	2b0c      	cmp	r3, #12
 8021412:	d004      	beq.n	802141e <__strftime+0x5de>
 8021414:	210c      	movs	r1, #12
 8021416:	fb93 f2f1 	sdiv	r2, r3, r1
 802141a:	fb01 3312 	mls	r3, r1, r2, r3
 802141e:	4972      	ldr	r1, [pc, #456]	; (80215e8 <__strftime+0x7a8>)
 8021420:	4a70      	ldr	r2, [pc, #448]	; (80215e4 <__strftime+0x7a4>)
 8021422:	2849      	cmp	r0, #73	; 0x49
 8021424:	bf08      	it	eq
 8021426:	460a      	moveq	r2, r1
 8021428:	e6c4      	b.n	80211b4 <__strftime+0x374>
 802142a:	230c      	movs	r3, #12
 802142c:	e7f7      	b.n	802141e <__strftime+0x5de>
 802142e:	69eb      	ldr	r3, [r5, #28]
 8021430:	4a6e      	ldr	r2, [pc, #440]	; (80215ec <__strftime+0x7ac>)
 8021432:	3301      	adds	r3, #1
 8021434:	e6be      	b.n	80211b4 <__strftime+0x374>
 8021436:	692b      	ldr	r3, [r5, #16]
 8021438:	3301      	adds	r3, #1
 802143a:	e72a      	b.n	8021292 <__strftime+0x452>
 802143c:	686b      	ldr	r3, [r5, #4]
 802143e:	e728      	b.n	8021292 <__strftime+0x452>
 8021440:	f108 33ff 	add.w	r3, r8, #4294967295
 8021444:	42a3      	cmp	r3, r4
 8021446:	f67f ad2a 	bls.w	8020e9e <__strftime+0x5e>
 802144a:	230a      	movs	r3, #10
 802144c:	f809 3004 	strb.w	r3, [r9, r4]
 8021450:	3401      	adds	r4, #1
 8021452:	e5f7      	b.n	8021044 <__strftime+0x204>
 8021454:	68ab      	ldr	r3, [r5, #8]
 8021456:	2b0b      	cmp	r3, #11
 8021458:	bfcc      	ite	gt
 802145a:	22a4      	movgt	r2, #164	; 0xa4
 802145c:	22a0      	movle	r2, #160	; 0xa0
 802145e:	4b64      	ldr	r3, [pc, #400]	; (80215f0 <__strftime+0x7b0>)
 8021460:	4413      	add	r3, r2
 8021462:	685e      	ldr	r6, [r3, #4]
 8021464:	4630      	mov	r0, r6
 8021466:	f7de fee9 	bl	800023c <strlen>
 802146a:	1e72      	subs	r2, r6, #1
 802146c:	4420      	add	r0, r4
 802146e:	f108 36ff 	add.w	r6, r8, #4294967295
 8021472:	42a0      	cmp	r0, r4
 8021474:	f43f ade6 	beq.w	8021044 <__strftime+0x204>
 8021478:	42a6      	cmp	r6, r4
 802147a:	f67f ad10 	bls.w	8020e9e <__strftime+0x5e>
 802147e:	f89b 1000 	ldrb.w	r1, [fp]
 8021482:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8021486:	2950      	cmp	r1, #80	; 0x50
 8021488:	d107      	bne.n	802149a <__strftime+0x65a>
 802148a:	495a      	ldr	r1, [pc, #360]	; (80215f4 <__strftime+0x7b4>)
 802148c:	5cc9      	ldrb	r1, [r1, r3]
 802148e:	f001 0103 	and.w	r1, r1, #3
 8021492:	2901      	cmp	r1, #1
 8021494:	bf08      	it	eq
 8021496:	3320      	addeq	r3, #32
 8021498:	b2db      	uxtb	r3, r3
 802149a:	f809 3004 	strb.w	r3, [r9, r4]
 802149e:	3401      	adds	r4, #1
 80214a0:	e7e7      	b.n	8021472 <__strftime+0x632>
 80214a2:	686b      	ldr	r3, [r5, #4]
 80214a4:	9300      	str	r3, [sp, #0]
 80214a6:	4a54      	ldr	r2, [pc, #336]	; (80215f8 <__strftime+0x7b8>)
 80214a8:	68ab      	ldr	r3, [r5, #8]
 80214aa:	eba8 0104 	sub.w	r1, r8, r4
 80214ae:	eb09 0004 	add.w	r0, r9, r4
 80214b2:	f001 fd23 	bl	8022efc <sniprintf>
 80214b6:	e683      	b.n	80211c0 <__strftime+0x380>
 80214b8:	6a2b      	ldr	r3, [r5, #32]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	db79      	blt.n	80215b2 <__strftime+0x772>
 80214be:	f000 fb91 	bl	8021be4 <__tz_lock>
 80214c2:	9b04      	ldr	r3, [sp, #16]
 80214c4:	b90b      	cbnz	r3, 80214ca <__strftime+0x68a>
 80214c6:	f000 fb99 	bl	8021bfc <_tzset_unlocked>
 80214ca:	f000 ff55 	bl	8022378 <__gettzinfo>
 80214ce:	6a2b      	ldr	r3, [r5, #32]
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	bfcc      	ite	gt
 80214d4:	2350      	movgt	r3, #80	; 0x50
 80214d6:	2328      	movle	r3, #40	; 0x28
 80214d8:	58c3      	ldr	r3, [r0, r3]
 80214da:	f1c3 0a00 	rsb	sl, r3, #0
 80214de:	f000 fb87 	bl	8021bf0 <__tz_unlock>
 80214e2:	2301      	movs	r3, #1
 80214e4:	9304      	str	r3, [sp, #16]
 80214e6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80214ea:	4662      	mov	r2, ip
 80214ec:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80214f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80214f4:	9602      	str	r6, [sp, #8]
 80214f6:	f143 36ff 	adc.w	r6, r3, #4294967295
 80214fa:	9603      	str	r6, [sp, #12]
 80214fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021500:	2e00      	cmp	r6, #0
 8021502:	f177 0600 	sbcs.w	r6, r7, #0
 8021506:	eba8 0104 	sub.w	r1, r8, r4
 802150a:	eb09 0004 	add.w	r0, r9, r4
 802150e:	da05      	bge.n	802151c <__strftime+0x6dc>
 8021510:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8021514:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021518:	9602      	str	r6, [sp, #8]
 802151a:	9303      	str	r3, [sp, #12]
 802151c:	9b02      	ldr	r3, [sp, #8]
 802151e:	089e      	lsrs	r6, r3, #2
 8021520:	9b03      	ldr	r3, [sp, #12]
 8021522:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8021526:	f10c 32ff 	add.w	r2, ip, #4294967295
 802152a:	109f      	asrs	r7, r3, #2
 802152c:	2364      	movs	r3, #100	; 0x64
 802152e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021532:	1af6      	subs	r6, r6, r3
 8021534:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8021538:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 802153c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021540:	fb92 f3f3 	sdiv	r3, r2, r3
 8021544:	18f6      	adds	r6, r6, r3
 8021546:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802154a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 802154e:	f240 136d 	movw	r3, #365	; 0x16d
 8021552:	fb03 fc0c 	mul.w	ip, r3, ip
 8021556:	69eb      	ldr	r3, [r5, #28]
 8021558:	eb16 060c 	adds.w	r6, r6, ip
 802155c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8021560:	18f6      	adds	r6, r6, r3
 8021562:	f04f 0c18 	mov.w	ip, #24
 8021566:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802156a:	fba6 230c 	umull	r2, r3, r6, ip
 802156e:	68ae      	ldr	r6, [r5, #8]
 8021570:	fb0c 3307 	mla	r3, ip, r7, r3
 8021574:	1992      	adds	r2, r2, r6
 8021576:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 802157a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802157e:	fba2 670c 	umull	r6, r7, r2, ip
 8021582:	fb0c 7703 	mla	r7, ip, r3, r7
 8021586:	686b      	ldr	r3, [r5, #4]
 8021588:	18f6      	adds	r6, r6, r3
 802158a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802158e:	fba6 230c 	umull	r2, r3, r6, ip
 8021592:	682e      	ldr	r6, [r5, #0]
 8021594:	fb0c 3307 	mla	r3, ip, r7, r3
 8021598:	1992      	adds	r2, r2, r6
 802159a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802159e:	ebb2 020a 	subs.w	r2, r2, sl
 80215a2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80215a6:	e9cd 2300 	strd	r2, r3, [sp]
 80215aa:	4a14      	ldr	r2, [pc, #80]	; (80215fc <__strftime+0x7bc>)
 80215ac:	f001 fca6 	bl	8022efc <sniprintf>
 80215b0:	e606      	b.n	80211c0 <__strftime+0x380>
 80215b2:	f04f 0a00 	mov.w	sl, #0
 80215b6:	e796      	b.n	80214e6 <__strftime+0x6a6>
 80215b8:	682b      	ldr	r3, [r5, #0]
 80215ba:	e66a      	b.n	8021292 <__strftime+0x452>
 80215bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80215c0:	42a3      	cmp	r3, r4
 80215c2:	f67f ac6c 	bls.w	8020e9e <__strftime+0x5e>
 80215c6:	2309      	movs	r3, #9
 80215c8:	e740      	b.n	802144c <__strftime+0x60c>
 80215ca:	682b      	ldr	r3, [r5, #0]
 80215cc:	9301      	str	r3, [sp, #4]
 80215ce:	686b      	ldr	r3, [r5, #4]
 80215d0:	9300      	str	r3, [sp, #0]
 80215d2:	4a0b      	ldr	r2, [pc, #44]	; (8021600 <__strftime+0x7c0>)
 80215d4:	68ab      	ldr	r3, [r5, #8]
 80215d6:	e5e0      	b.n	802119a <__strftime+0x35a>
 80215d8:	fffff894 	.word	0xfffff894
 80215dc:	fffff895 	.word	0xfffff895
 80215e0:	08029a0b 	.word	0x08029a0b
 80215e4:	080299ec 	.word	0x080299ec
 80215e8:	080299fa 	.word	0x080299fa
 80215ec:	08029a0f 	.word	0x08029a0f
 80215f0:	08029b60 	.word	0x08029b60
 80215f4:	08029cd5 	.word	0x08029cd5
 80215f8:	08029a1e 	.word	0x08029a1e
 80215fc:	08029a14 	.word	0x08029a14
 8021600:	08029a19 	.word	0x08029a19
 8021604:	f108 33ff 	add.w	r3, r8, #4294967295
 8021608:	42a3      	cmp	r3, r4
 802160a:	f67f ac48 	bls.w	8020e9e <__strftime+0x5e>
 802160e:	69ab      	ldr	r3, [r5, #24]
 8021610:	eb09 0204 	add.w	r2, r9, r4
 8021614:	3401      	adds	r4, #1
 8021616:	b913      	cbnz	r3, 802161e <__strftime+0x7de>
 8021618:	2337      	movs	r3, #55	; 0x37
 802161a:	7013      	strb	r3, [r2, #0]
 802161c:	e512      	b.n	8021044 <__strftime+0x204>
 802161e:	3330      	adds	r3, #48	; 0x30
 8021620:	e7fb      	b.n	802161a <__strftime+0x7da>
 8021622:	69eb      	ldr	r3, [r5, #28]
 8021624:	69aa      	ldr	r2, [r5, #24]
 8021626:	3307      	adds	r3, #7
 8021628:	1a9b      	subs	r3, r3, r2
 802162a:	2207      	movs	r2, #7
 802162c:	fb93 f3f2 	sdiv	r3, r3, r2
 8021630:	e62f      	b.n	8021292 <__strftime+0x452>
 8021632:	4628      	mov	r0, r5
 8021634:	f7ff fba2 	bl	8020d7c <iso_year_adjust>
 8021638:	69aa      	ldr	r2, [r5, #24]
 802163a:	b132      	cbz	r2, 802164a <__strftime+0x80a>
 802163c:	3a01      	subs	r2, #1
 802163e:	2800      	cmp	r0, #0
 8021640:	dc28      	bgt.n	8021694 <__strftime+0x854>
 8021642:	69eb      	ldr	r3, [r5, #28]
 8021644:	d103      	bne.n	802164e <__strftime+0x80e>
 8021646:	330a      	adds	r3, #10
 8021648:	e7ee      	b.n	8021628 <__strftime+0x7e8>
 802164a:	2206      	movs	r2, #6
 802164c:	e7f7      	b.n	802163e <__strftime+0x7fe>
 802164e:	6968      	ldr	r0, [r5, #20]
 8021650:	2800      	cmp	r0, #0
 8021652:	eba2 0303 	sub.w	r3, r2, r3
 8021656:	f240 726b 	movw	r2, #1899	; 0x76b
 802165a:	bfa8      	it	ge
 802165c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8021660:	4410      	add	r0, r2
 8021662:	0782      	lsls	r2, r0, #30
 8021664:	d105      	bne.n	8021672 <__strftime+0x832>
 8021666:	2264      	movs	r2, #100	; 0x64
 8021668:	fb90 f1f2 	sdiv	r1, r0, r2
 802166c:	fb02 0111 	mls	r1, r2, r1, r0
 8021670:	b971      	cbnz	r1, 8021690 <__strftime+0x850>
 8021672:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021676:	fb90 f2f1 	sdiv	r2, r0, r1
 802167a:	fb01 0212 	mls	r2, r1, r2, r0
 802167e:	fab2 f282 	clz	r2, r2
 8021682:	0952      	lsrs	r2, r2, #5
 8021684:	1a9a      	subs	r2, r3, r2
 8021686:	2a05      	cmp	r2, #5
 8021688:	bfb4      	ite	lt
 802168a:	2335      	movlt	r3, #53	; 0x35
 802168c:	2334      	movge	r3, #52	; 0x34
 802168e:	e600      	b.n	8021292 <__strftime+0x452>
 8021690:	2201      	movs	r2, #1
 8021692:	e7f7      	b.n	8021684 <__strftime+0x844>
 8021694:	2301      	movs	r3, #1
 8021696:	e5fc      	b.n	8021292 <__strftime+0x452>
 8021698:	f108 33ff 	add.w	r3, r8, #4294967295
 802169c:	42a3      	cmp	r3, r4
 802169e:	f67f abfe 	bls.w	8020e9e <__strftime+0x5e>
 80216a2:	69ab      	ldr	r3, [r5, #24]
 80216a4:	3330      	adds	r3, #48	; 0x30
 80216a6:	e6d1      	b.n	802144c <__strftime+0x60c>
 80216a8:	69ab      	ldr	r3, [r5, #24]
 80216aa:	b13b      	cbz	r3, 80216bc <__strftime+0x87c>
 80216ac:	3b01      	subs	r3, #1
 80216ae:	69ea      	ldr	r2, [r5, #28]
 80216b0:	3207      	adds	r2, #7
 80216b2:	1ad2      	subs	r2, r2, r3
 80216b4:	2307      	movs	r3, #7
 80216b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80216ba:	e5ea      	b.n	8021292 <__strftime+0x452>
 80216bc:	2306      	movs	r3, #6
 80216be:	e7f6      	b.n	80216ae <__strftime+0x86e>
 80216c0:	6968      	ldr	r0, [r5, #20]
 80216c2:	2800      	cmp	r0, #0
 80216c4:	db05      	blt.n	80216d2 <__strftime+0x892>
 80216c6:	2264      	movs	r2, #100	; 0x64
 80216c8:	fb90 f3f2 	sdiv	r3, r0, r2
 80216cc:	fb03 0312 	mls	r3, r3, r2, r0
 80216d0:	e5df      	b.n	8021292 <__strftime+0x452>
 80216d2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80216d6:	f000 fd81 	bl	80221dc <abs>
 80216da:	e7f4      	b.n	80216c6 <__strftime+0x886>
 80216dc:	696b      	ldr	r3, [r5, #20]
 80216de:	4a4c      	ldr	r2, [pc, #304]	; (8021810 <__strftime+0x9d0>)
 80216e0:	4293      	cmp	r3, r2
 80216e2:	da09      	bge.n	80216f8 <__strftime+0x8b8>
 80216e4:	212d      	movs	r1, #45	; 0x2d
 80216e6:	f88d 1020 	strb.w	r1, [sp, #32]
 80216ea:	eba2 0a03 	sub.w	sl, r2, r3
 80216ee:	b106      	cbz	r6, 80216f2 <__strftime+0x8b2>
 80216f0:	3e01      	subs	r6, #1
 80216f2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80216f6:	e00b      	b.n	8021710 <__strftime+0x8d0>
 80216f8:	2f2b      	cmp	r7, #43	; 0x2b
 80216fa:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 80216fe:	d106      	bne.n	802170e <__strftime+0x8ce>
 8021700:	f242 730f 	movw	r3, #9999	; 0x270f
 8021704:	459a      	cmp	sl, r3
 8021706:	d902      	bls.n	802170e <__strftime+0x8ce>
 8021708:	f88d 7020 	strb.w	r7, [sp, #32]
 802170c:	e7ef      	b.n	80216ee <__strftime+0x8ae>
 802170e:	ab08      	add	r3, sp, #32
 8021710:	2225      	movs	r2, #37	; 0x25
 8021712:	701a      	strb	r2, [r3, #0]
 8021714:	b937      	cbnz	r7, 8021724 <__strftime+0x8e4>
 8021716:	1c58      	adds	r0, r3, #1
 8021718:	493e      	ldr	r1, [pc, #248]	; (8021814 <__strftime+0x9d4>)
 802171a:	f001 fc4f 	bl	8022fbc <strcpy>
 802171e:	f8cd a000 	str.w	sl, [sp]
 8021722:	e665      	b.n	80213f0 <__strftime+0x5b0>
 8021724:	2230      	movs	r2, #48	; 0x30
 8021726:	1c98      	adds	r0, r3, #2
 8021728:	705a      	strb	r2, [r3, #1]
 802172a:	e7f5      	b.n	8021718 <__strftime+0x8d8>
 802172c:	6a2b      	ldr	r3, [r5, #32]
 802172e:	2b00      	cmp	r3, #0
 8021730:	f6ff ac88 	blt.w	8021044 <__strftime+0x204>
 8021734:	f000 fa56 	bl	8021be4 <__tz_lock>
 8021738:	9b04      	ldr	r3, [sp, #16]
 802173a:	b90b      	cbnz	r3, 8021740 <__strftime+0x900>
 802173c:	f000 fa5e 	bl	8021bfc <_tzset_unlocked>
 8021740:	f000 fe1a 	bl	8022378 <__gettzinfo>
 8021744:	6a2b      	ldr	r3, [r5, #32]
 8021746:	2b00      	cmp	r3, #0
 8021748:	bfcc      	ite	gt
 802174a:	2350      	movgt	r3, #80	; 0x50
 802174c:	2328      	movle	r3, #40	; 0x28
 802174e:	eb09 0704 	add.w	r7, r9, r4
 8021752:	58c6      	ldr	r6, [r0, r3]
 8021754:	f000 fa4c 	bl	8021bf0 <__tz_unlock>
 8021758:	4276      	negs	r6, r6
 802175a:	233c      	movs	r3, #60	; 0x3c
 802175c:	fb96 f0f3 	sdiv	r0, r6, r3
 8021760:	f000 fece 	bl	8022500 <labs>
 8021764:	233c      	movs	r3, #60	; 0x3c
 8021766:	eba8 0a04 	sub.w	sl, r8, r4
 802176a:	fb90 f2f3 	sdiv	r2, r0, r3
 802176e:	fb02 0013 	mls	r0, r2, r3, r0
 8021772:	9000      	str	r0, [sp, #0]
 8021774:	4a28      	ldr	r2, [pc, #160]	; (8021818 <__strftime+0x9d8>)
 8021776:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802177a:	4651      	mov	r1, sl
 802177c:	4638      	mov	r0, r7
 802177e:	fb96 f3f3 	sdiv	r3, r6, r3
 8021782:	f001 fbbb 	bl	8022efc <sniprintf>
 8021786:	2800      	cmp	r0, #0
 8021788:	f6ff ab89 	blt.w	8020e9e <__strftime+0x5e>
 802178c:	4404      	add	r4, r0
 802178e:	45a0      	cmp	r8, r4
 8021790:	f67f ab85 	bls.w	8020e9e <__strftime+0x5e>
 8021794:	2301      	movs	r3, #1
 8021796:	9304      	str	r3, [sp, #16]
 8021798:	e454      	b.n	8021044 <__strftime+0x204>
 802179a:	6a2b      	ldr	r3, [r5, #32]
 802179c:	2b00      	cmp	r3, #0
 802179e:	f6ff ac51 	blt.w	8021044 <__strftime+0x204>
 80217a2:	f000 fa1f 	bl	8021be4 <__tz_lock>
 80217a6:	9b04      	ldr	r3, [sp, #16]
 80217a8:	b90b      	cbnz	r3, 80217ae <__strftime+0x96e>
 80217aa:	f000 fa27 	bl	8021bfc <_tzset_unlocked>
 80217ae:	6a2b      	ldr	r3, [r5, #32]
 80217b0:	4a1a      	ldr	r2, [pc, #104]	; (802181c <__strftime+0x9dc>)
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	bfd4      	ite	le
 80217b6:	2300      	movle	r3, #0
 80217b8:	2301      	movgt	r3, #1
 80217ba:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80217be:	4630      	mov	r0, r6
 80217c0:	f7de fd3c 	bl	800023c <strlen>
 80217c4:	3e01      	subs	r6, #1
 80217c6:	4420      	add	r0, r4
 80217c8:	f108 33ff 	add.w	r3, r8, #4294967295
 80217cc:	42a0      	cmp	r0, r4
 80217ce:	d102      	bne.n	80217d6 <__strftime+0x996>
 80217d0:	f000 fa0e 	bl	8021bf0 <__tz_unlock>
 80217d4:	e7de      	b.n	8021794 <__strftime+0x954>
 80217d6:	42a3      	cmp	r3, r4
 80217d8:	d905      	bls.n	80217e6 <__strftime+0x9a6>
 80217da:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80217de:	f809 2004 	strb.w	r2, [r9, r4]
 80217e2:	3401      	adds	r4, #1
 80217e4:	e7f2      	b.n	80217cc <__strftime+0x98c>
 80217e6:	f000 fa03 	bl	8021bf0 <__tz_unlock>
 80217ea:	f7ff bb58 	b.w	8020e9e <__strftime+0x5e>
 80217ee:	f108 33ff 	add.w	r3, r8, #4294967295
 80217f2:	42a3      	cmp	r3, r4
 80217f4:	f67f ab53 	bls.w	8020e9e <__strftime+0x5e>
 80217f8:	2325      	movs	r3, #37	; 0x25
 80217fa:	e627      	b.n	802144c <__strftime+0x60c>
 80217fc:	f1b8 0f00 	cmp.w	r8, #0
 8021800:	d002      	beq.n	8021808 <__strftime+0x9c8>
 8021802:	2300      	movs	r3, #0
 8021804:	f809 3004 	strb.w	r3, [r9, r4]
 8021808:	4620      	mov	r0, r4
 802180a:	b011      	add	sp, #68	; 0x44
 802180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021810:	fffff894 	.word	0xfffff894
 8021814:	08029a0b 	.word	0x08029a0b
 8021818:	08029a28 	.word	0x08029a28
 802181c:	2000016c 	.word	0x2000016c

08021820 <strftime>:
 8021820:	b513      	push	{r0, r1, r4, lr}
 8021822:	4c03      	ldr	r4, [pc, #12]	; (8021830 <strftime+0x10>)
 8021824:	9400      	str	r4, [sp, #0]
 8021826:	f7ff fb0b 	bl	8020e40 <__strftime>
 802182a:	b002      	add	sp, #8
 802182c:	bd10      	pop	{r4, pc}
 802182e:	bf00      	nop
 8021830:	200001d0 	.word	0x200001d0

08021834 <strstr>:
 8021834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021836:	780c      	ldrb	r4, [r1, #0]
 8021838:	b164      	cbz	r4, 8021854 <strstr+0x20>
 802183a:	4603      	mov	r3, r0
 802183c:	781a      	ldrb	r2, [r3, #0]
 802183e:	4618      	mov	r0, r3
 8021840:	1c5e      	adds	r6, r3, #1
 8021842:	b90a      	cbnz	r2, 8021848 <strstr+0x14>
 8021844:	4610      	mov	r0, r2
 8021846:	e005      	b.n	8021854 <strstr+0x20>
 8021848:	4294      	cmp	r4, r2
 802184a:	d108      	bne.n	802185e <strstr+0x2a>
 802184c:	460d      	mov	r5, r1
 802184e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021852:	b902      	cbnz	r2, 8021856 <strstr+0x22>
 8021854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021856:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802185a:	4297      	cmp	r7, r2
 802185c:	d0f7      	beq.n	802184e <strstr+0x1a>
 802185e:	4633      	mov	r3, r6
 8021860:	e7ec      	b.n	802183c <strstr+0x8>
	...

08021864 <_strtol_l.isra.0>:
 8021864:	2b01      	cmp	r3, #1
 8021866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802186a:	d001      	beq.n	8021870 <_strtol_l.isra.0+0xc>
 802186c:	2b24      	cmp	r3, #36	; 0x24
 802186e:	d906      	bls.n	802187e <_strtol_l.isra.0+0x1a>
 8021870:	f7fe fa8c 	bl	801fd8c <__errno>
 8021874:	2316      	movs	r3, #22
 8021876:	6003      	str	r3, [r0, #0]
 8021878:	2000      	movs	r0, #0
 802187a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802187e:	4f3a      	ldr	r7, [pc, #232]	; (8021968 <_strtol_l.isra.0+0x104>)
 8021880:	468e      	mov	lr, r1
 8021882:	4676      	mov	r6, lr
 8021884:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021888:	5de5      	ldrb	r5, [r4, r7]
 802188a:	f015 0508 	ands.w	r5, r5, #8
 802188e:	d1f8      	bne.n	8021882 <_strtol_l.isra.0+0x1e>
 8021890:	2c2d      	cmp	r4, #45	; 0x2d
 8021892:	d134      	bne.n	80218fe <_strtol_l.isra.0+0x9a>
 8021894:	f89e 4000 	ldrb.w	r4, [lr]
 8021898:	f04f 0801 	mov.w	r8, #1
 802189c:	f106 0e02 	add.w	lr, r6, #2
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d05c      	beq.n	802195e <_strtol_l.isra.0+0xfa>
 80218a4:	2b10      	cmp	r3, #16
 80218a6:	d10c      	bne.n	80218c2 <_strtol_l.isra.0+0x5e>
 80218a8:	2c30      	cmp	r4, #48	; 0x30
 80218aa:	d10a      	bne.n	80218c2 <_strtol_l.isra.0+0x5e>
 80218ac:	f89e 4000 	ldrb.w	r4, [lr]
 80218b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80218b4:	2c58      	cmp	r4, #88	; 0x58
 80218b6:	d14d      	bne.n	8021954 <_strtol_l.isra.0+0xf0>
 80218b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80218bc:	2310      	movs	r3, #16
 80218be:	f10e 0e02 	add.w	lr, lr, #2
 80218c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80218c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80218ca:	2600      	movs	r6, #0
 80218cc:	fbbc f9f3 	udiv	r9, ip, r3
 80218d0:	4635      	mov	r5, r6
 80218d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80218d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80218da:	2f09      	cmp	r7, #9
 80218dc:	d818      	bhi.n	8021910 <_strtol_l.isra.0+0xac>
 80218de:	463c      	mov	r4, r7
 80218e0:	42a3      	cmp	r3, r4
 80218e2:	dd24      	ble.n	802192e <_strtol_l.isra.0+0xca>
 80218e4:	2e00      	cmp	r6, #0
 80218e6:	db1f      	blt.n	8021928 <_strtol_l.isra.0+0xc4>
 80218e8:	45a9      	cmp	r9, r5
 80218ea:	d31d      	bcc.n	8021928 <_strtol_l.isra.0+0xc4>
 80218ec:	d101      	bne.n	80218f2 <_strtol_l.isra.0+0x8e>
 80218ee:	45a2      	cmp	sl, r4
 80218f0:	db1a      	blt.n	8021928 <_strtol_l.isra.0+0xc4>
 80218f2:	fb05 4503 	mla	r5, r5, r3, r4
 80218f6:	2601      	movs	r6, #1
 80218f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80218fc:	e7eb      	b.n	80218d6 <_strtol_l.isra.0+0x72>
 80218fe:	2c2b      	cmp	r4, #43	; 0x2b
 8021900:	bf08      	it	eq
 8021902:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021906:	46a8      	mov	r8, r5
 8021908:	bf08      	it	eq
 802190a:	f106 0e02 	addeq.w	lr, r6, #2
 802190e:	e7c7      	b.n	80218a0 <_strtol_l.isra.0+0x3c>
 8021910:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021914:	2f19      	cmp	r7, #25
 8021916:	d801      	bhi.n	802191c <_strtol_l.isra.0+0xb8>
 8021918:	3c37      	subs	r4, #55	; 0x37
 802191a:	e7e1      	b.n	80218e0 <_strtol_l.isra.0+0x7c>
 802191c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021920:	2f19      	cmp	r7, #25
 8021922:	d804      	bhi.n	802192e <_strtol_l.isra.0+0xca>
 8021924:	3c57      	subs	r4, #87	; 0x57
 8021926:	e7db      	b.n	80218e0 <_strtol_l.isra.0+0x7c>
 8021928:	f04f 36ff 	mov.w	r6, #4294967295
 802192c:	e7e4      	b.n	80218f8 <_strtol_l.isra.0+0x94>
 802192e:	2e00      	cmp	r6, #0
 8021930:	da05      	bge.n	802193e <_strtol_l.isra.0+0xda>
 8021932:	2322      	movs	r3, #34	; 0x22
 8021934:	6003      	str	r3, [r0, #0]
 8021936:	4665      	mov	r5, ip
 8021938:	b942      	cbnz	r2, 802194c <_strtol_l.isra.0+0xe8>
 802193a:	4628      	mov	r0, r5
 802193c:	e79d      	b.n	802187a <_strtol_l.isra.0+0x16>
 802193e:	f1b8 0f00 	cmp.w	r8, #0
 8021942:	d000      	beq.n	8021946 <_strtol_l.isra.0+0xe2>
 8021944:	426d      	negs	r5, r5
 8021946:	2a00      	cmp	r2, #0
 8021948:	d0f7      	beq.n	802193a <_strtol_l.isra.0+0xd6>
 802194a:	b10e      	cbz	r6, 8021950 <_strtol_l.isra.0+0xec>
 802194c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021950:	6011      	str	r1, [r2, #0]
 8021952:	e7f2      	b.n	802193a <_strtol_l.isra.0+0xd6>
 8021954:	2430      	movs	r4, #48	; 0x30
 8021956:	2b00      	cmp	r3, #0
 8021958:	d1b3      	bne.n	80218c2 <_strtol_l.isra.0+0x5e>
 802195a:	2308      	movs	r3, #8
 802195c:	e7b1      	b.n	80218c2 <_strtol_l.isra.0+0x5e>
 802195e:	2c30      	cmp	r4, #48	; 0x30
 8021960:	d0a4      	beq.n	80218ac <_strtol_l.isra.0+0x48>
 8021962:	230a      	movs	r3, #10
 8021964:	e7ad      	b.n	80218c2 <_strtol_l.isra.0+0x5e>
 8021966:	bf00      	nop
 8021968:	08029cd5 	.word	0x08029cd5

0802196c <_strtol_r>:
 802196c:	f7ff bf7a 	b.w	8021864 <_strtol_l.isra.0>

08021970 <strtol>:
 8021970:	4613      	mov	r3, r2
 8021972:	460a      	mov	r2, r1
 8021974:	4601      	mov	r1, r0
 8021976:	4802      	ldr	r0, [pc, #8]	; (8021980 <strtol+0x10>)
 8021978:	6800      	ldr	r0, [r0, #0]
 802197a:	f7ff bf73 	b.w	8021864 <_strtol_l.isra.0>
 802197e:	bf00      	nop
 8021980:	20000108 	.word	0x20000108

08021984 <_strtoul_l.isra.0>:
 8021984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021988:	4e3b      	ldr	r6, [pc, #236]	; (8021a78 <_strtoul_l.isra.0+0xf4>)
 802198a:	4686      	mov	lr, r0
 802198c:	468c      	mov	ip, r1
 802198e:	4660      	mov	r0, ip
 8021990:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021994:	5da5      	ldrb	r5, [r4, r6]
 8021996:	f015 0508 	ands.w	r5, r5, #8
 802199a:	d1f8      	bne.n	802198e <_strtoul_l.isra.0+0xa>
 802199c:	2c2d      	cmp	r4, #45	; 0x2d
 802199e:	d134      	bne.n	8021a0a <_strtoul_l.isra.0+0x86>
 80219a0:	f89c 4000 	ldrb.w	r4, [ip]
 80219a4:	f04f 0801 	mov.w	r8, #1
 80219a8:	f100 0c02 	add.w	ip, r0, #2
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d05e      	beq.n	8021a6e <_strtoul_l.isra.0+0xea>
 80219b0:	2b10      	cmp	r3, #16
 80219b2:	d10c      	bne.n	80219ce <_strtoul_l.isra.0+0x4a>
 80219b4:	2c30      	cmp	r4, #48	; 0x30
 80219b6:	d10a      	bne.n	80219ce <_strtoul_l.isra.0+0x4a>
 80219b8:	f89c 0000 	ldrb.w	r0, [ip]
 80219bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80219c0:	2858      	cmp	r0, #88	; 0x58
 80219c2:	d14f      	bne.n	8021a64 <_strtoul_l.isra.0+0xe0>
 80219c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80219c8:	2310      	movs	r3, #16
 80219ca:	f10c 0c02 	add.w	ip, ip, #2
 80219ce:	f04f 37ff 	mov.w	r7, #4294967295
 80219d2:	2500      	movs	r5, #0
 80219d4:	fbb7 f7f3 	udiv	r7, r7, r3
 80219d8:	fb03 f907 	mul.w	r9, r3, r7
 80219dc:	ea6f 0909 	mvn.w	r9, r9
 80219e0:	4628      	mov	r0, r5
 80219e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80219e6:	2e09      	cmp	r6, #9
 80219e8:	d818      	bhi.n	8021a1c <_strtoul_l.isra.0+0x98>
 80219ea:	4634      	mov	r4, r6
 80219ec:	42a3      	cmp	r3, r4
 80219ee:	dd24      	ble.n	8021a3a <_strtoul_l.isra.0+0xb6>
 80219f0:	2d00      	cmp	r5, #0
 80219f2:	db1f      	blt.n	8021a34 <_strtoul_l.isra.0+0xb0>
 80219f4:	4287      	cmp	r7, r0
 80219f6:	d31d      	bcc.n	8021a34 <_strtoul_l.isra.0+0xb0>
 80219f8:	d101      	bne.n	80219fe <_strtoul_l.isra.0+0x7a>
 80219fa:	45a1      	cmp	r9, r4
 80219fc:	db1a      	blt.n	8021a34 <_strtoul_l.isra.0+0xb0>
 80219fe:	fb00 4003 	mla	r0, r0, r3, r4
 8021a02:	2501      	movs	r5, #1
 8021a04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8021a08:	e7eb      	b.n	80219e2 <_strtoul_l.isra.0+0x5e>
 8021a0a:	2c2b      	cmp	r4, #43	; 0x2b
 8021a0c:	bf08      	it	eq
 8021a0e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8021a12:	46a8      	mov	r8, r5
 8021a14:	bf08      	it	eq
 8021a16:	f100 0c02 	addeq.w	ip, r0, #2
 8021a1a:	e7c7      	b.n	80219ac <_strtoul_l.isra.0+0x28>
 8021a1c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8021a20:	2e19      	cmp	r6, #25
 8021a22:	d801      	bhi.n	8021a28 <_strtoul_l.isra.0+0xa4>
 8021a24:	3c37      	subs	r4, #55	; 0x37
 8021a26:	e7e1      	b.n	80219ec <_strtoul_l.isra.0+0x68>
 8021a28:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8021a2c:	2e19      	cmp	r6, #25
 8021a2e:	d804      	bhi.n	8021a3a <_strtoul_l.isra.0+0xb6>
 8021a30:	3c57      	subs	r4, #87	; 0x57
 8021a32:	e7db      	b.n	80219ec <_strtoul_l.isra.0+0x68>
 8021a34:	f04f 35ff 	mov.w	r5, #4294967295
 8021a38:	e7e4      	b.n	8021a04 <_strtoul_l.isra.0+0x80>
 8021a3a:	2d00      	cmp	r5, #0
 8021a3c:	da07      	bge.n	8021a4e <_strtoul_l.isra.0+0xca>
 8021a3e:	2322      	movs	r3, #34	; 0x22
 8021a40:	f8ce 3000 	str.w	r3, [lr]
 8021a44:	f04f 30ff 	mov.w	r0, #4294967295
 8021a48:	b942      	cbnz	r2, 8021a5c <_strtoul_l.isra.0+0xd8>
 8021a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021a4e:	f1b8 0f00 	cmp.w	r8, #0
 8021a52:	d000      	beq.n	8021a56 <_strtoul_l.isra.0+0xd2>
 8021a54:	4240      	negs	r0, r0
 8021a56:	2a00      	cmp	r2, #0
 8021a58:	d0f7      	beq.n	8021a4a <_strtoul_l.isra.0+0xc6>
 8021a5a:	b10d      	cbz	r5, 8021a60 <_strtoul_l.isra.0+0xdc>
 8021a5c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8021a60:	6011      	str	r1, [r2, #0]
 8021a62:	e7f2      	b.n	8021a4a <_strtoul_l.isra.0+0xc6>
 8021a64:	2430      	movs	r4, #48	; 0x30
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d1b1      	bne.n	80219ce <_strtoul_l.isra.0+0x4a>
 8021a6a:	2308      	movs	r3, #8
 8021a6c:	e7af      	b.n	80219ce <_strtoul_l.isra.0+0x4a>
 8021a6e:	2c30      	cmp	r4, #48	; 0x30
 8021a70:	d0a2      	beq.n	80219b8 <_strtoul_l.isra.0+0x34>
 8021a72:	230a      	movs	r3, #10
 8021a74:	e7ab      	b.n	80219ce <_strtoul_l.isra.0+0x4a>
 8021a76:	bf00      	nop
 8021a78:	08029cd5 	.word	0x08029cd5

08021a7c <_strtoul_r>:
 8021a7c:	f7ff bf82 	b.w	8021984 <_strtoul_l.isra.0>

08021a80 <strtoul>:
 8021a80:	4613      	mov	r3, r2
 8021a82:	460a      	mov	r2, r1
 8021a84:	4601      	mov	r1, r0
 8021a86:	4802      	ldr	r0, [pc, #8]	; (8021a90 <strtoul+0x10>)
 8021a88:	6800      	ldr	r0, [r0, #0]
 8021a8a:	f7ff bf7b 	b.w	8021984 <_strtoul_l.isra.0>
 8021a8e:	bf00      	nop
 8021a90:	20000108 	.word	0x20000108

08021a94 <__tzcalc_limits>:
 8021a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a98:	4680      	mov	r8, r0
 8021a9a:	f000 fc6d 	bl	8022378 <__gettzinfo>
 8021a9e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8021aa2:	4598      	cmp	r8, r3
 8021aa4:	f340 8098 	ble.w	8021bd8 <__tzcalc_limits+0x144>
 8021aa8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8021aac:	4443      	add	r3, r8
 8021aae:	109b      	asrs	r3, r3, #2
 8021ab0:	f240 126d 	movw	r2, #365	; 0x16d
 8021ab4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8021ab8:	fb02 3505 	mla	r5, r2, r5, r3
 8021abc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8021ac0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8021ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8021ac8:	441d      	add	r5, r3
 8021aca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021ace:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8021ad2:	fb98 f7f3 	sdiv	r7, r8, r3
 8021ad6:	fb03 8717 	mls	r7, r3, r7, r8
 8021ada:	4442      	add	r2, r8
 8021adc:	fab7 fc87 	clz	ip, r7
 8021ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8021ae4:	f008 0303 	and.w	r3, r8, #3
 8021ae8:	4415      	add	r5, r2
 8021aea:	2264      	movs	r2, #100	; 0x64
 8021aec:	f8c0 8004 	str.w	r8, [r0, #4]
 8021af0:	fb98 f6f2 	sdiv	r6, r8, r2
 8021af4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021af8:	fb02 8616 	mls	r6, r2, r6, r8
 8021afc:	4604      	mov	r4, r0
 8021afe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8021b02:	9300      	str	r3, [sp, #0]
 8021b04:	f04f 0e07 	mov.w	lr, #7
 8021b08:	7a22      	ldrb	r2, [r4, #8]
 8021b0a:	6963      	ldr	r3, [r4, #20]
 8021b0c:	2a4a      	cmp	r2, #74	; 0x4a
 8021b0e:	d128      	bne.n	8021b62 <__tzcalc_limits+0xce>
 8021b10:	9900      	ldr	r1, [sp, #0]
 8021b12:	18ea      	adds	r2, r5, r3
 8021b14:	b901      	cbnz	r1, 8021b18 <__tzcalc_limits+0x84>
 8021b16:	b906      	cbnz	r6, 8021b1a <__tzcalc_limits+0x86>
 8021b18:	bb0f      	cbnz	r7, 8021b5e <__tzcalc_limits+0xca>
 8021b1a:	2b3b      	cmp	r3, #59	; 0x3b
 8021b1c:	bfd4      	ite	le
 8021b1e:	2300      	movle	r3, #0
 8021b20:	2301      	movgt	r3, #1
 8021b22:	4413      	add	r3, r2
 8021b24:	1e5a      	subs	r2, r3, #1
 8021b26:	69a3      	ldr	r3, [r4, #24]
 8021b28:	492c      	ldr	r1, [pc, #176]	; (8021bdc <__tzcalc_limits+0x148>)
 8021b2a:	fb01 3202 	mla	r2, r1, r2, r3
 8021b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021b30:	4413      	add	r3, r2
 8021b32:	461a      	mov	r2, r3
 8021b34:	17db      	asrs	r3, r3, #31
 8021b36:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8021b3a:	3428      	adds	r4, #40	; 0x28
 8021b3c:	45a3      	cmp	fp, r4
 8021b3e:	d1e3      	bne.n	8021b08 <__tzcalc_limits+0x74>
 8021b40:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8021b44:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8021b48:	4294      	cmp	r4, r2
 8021b4a:	eb75 0303 	sbcs.w	r3, r5, r3
 8021b4e:	bfb4      	ite	lt
 8021b50:	2301      	movlt	r3, #1
 8021b52:	2300      	movge	r3, #0
 8021b54:	6003      	str	r3, [r0, #0]
 8021b56:	2001      	movs	r0, #1
 8021b58:	b003      	add	sp, #12
 8021b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b5e:	2300      	movs	r3, #0
 8021b60:	e7df      	b.n	8021b22 <__tzcalc_limits+0x8e>
 8021b62:	2a44      	cmp	r2, #68	; 0x44
 8021b64:	d101      	bne.n	8021b6a <__tzcalc_limits+0xd6>
 8021b66:	18ea      	adds	r2, r5, r3
 8021b68:	e7dd      	b.n	8021b26 <__tzcalc_limits+0x92>
 8021b6a:	9a00      	ldr	r2, [sp, #0]
 8021b6c:	bb72      	cbnz	r2, 8021bcc <__tzcalc_limits+0x138>
 8021b6e:	2e00      	cmp	r6, #0
 8021b70:	bf0c      	ite	eq
 8021b72:	46e0      	moveq	r8, ip
 8021b74:	f04f 0801 	movne.w	r8, #1
 8021b78:	4919      	ldr	r1, [pc, #100]	; (8021be0 <__tzcalc_limits+0x14c>)
 8021b7a:	68e2      	ldr	r2, [r4, #12]
 8021b7c:	9201      	str	r2, [sp, #4]
 8021b7e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8021b82:	fb0a 1808 	mla	r8, sl, r8, r1
 8021b86:	462a      	mov	r2, r5
 8021b88:	f04f 0900 	mov.w	r9, #0
 8021b8c:	f1a8 0804 	sub.w	r8, r8, #4
 8021b90:	9901      	ldr	r1, [sp, #4]
 8021b92:	f109 0901 	add.w	r9, r9, #1
 8021b96:	4549      	cmp	r1, r9
 8021b98:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8021b9c:	dc18      	bgt.n	8021bd0 <__tzcalc_limits+0x13c>
 8021b9e:	f102 0804 	add.w	r8, r2, #4
 8021ba2:	fb98 f9fe 	sdiv	r9, r8, lr
 8021ba6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8021baa:	eba8 0909 	sub.w	r9, r8, r9
 8021bae:	ebb3 0909 	subs.w	r9, r3, r9
 8021bb2:	6923      	ldr	r3, [r4, #16]
 8021bb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8021bb8:	bf48      	it	mi
 8021bba:	f109 0907 	addmi.w	r9, r9, #7
 8021bbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8021bc2:	444b      	add	r3, r9
 8021bc4:	4553      	cmp	r3, sl
 8021bc6:	da05      	bge.n	8021bd4 <__tzcalc_limits+0x140>
 8021bc8:	441a      	add	r2, r3
 8021bca:	e7ac      	b.n	8021b26 <__tzcalc_limits+0x92>
 8021bcc:	46e0      	mov	r8, ip
 8021bce:	e7d3      	b.n	8021b78 <__tzcalc_limits+0xe4>
 8021bd0:	4452      	add	r2, sl
 8021bd2:	e7dd      	b.n	8021b90 <__tzcalc_limits+0xfc>
 8021bd4:	3b07      	subs	r3, #7
 8021bd6:	e7f5      	b.n	8021bc4 <__tzcalc_limits+0x130>
 8021bd8:	2000      	movs	r0, #0
 8021bda:	e7bd      	b.n	8021b58 <__tzcalc_limits+0xc4>
 8021bdc:	00015180 	.word	0x00015180
 8021be0:	0802991c 	.word	0x0802991c

08021be4 <__tz_lock>:
 8021be4:	4801      	ldr	r0, [pc, #4]	; (8021bec <__tz_lock+0x8>)
 8021be6:	f7fe be29 	b.w	802083c <__retarget_lock_acquire>
 8021bea:	bf00      	nop
 8021bec:	20000fef 	.word	0x20000fef

08021bf0 <__tz_unlock>:
 8021bf0:	4801      	ldr	r0, [pc, #4]	; (8021bf8 <__tz_unlock+0x8>)
 8021bf2:	f7fe be25 	b.w	8020840 <__retarget_lock_release>
 8021bf6:	bf00      	nop
 8021bf8:	20000fef 	.word	0x20000fef

08021bfc <_tzset_unlocked>:
 8021bfc:	4b01      	ldr	r3, [pc, #4]	; (8021c04 <_tzset_unlocked+0x8>)
 8021bfe:	6818      	ldr	r0, [r3, #0]
 8021c00:	f000 b802 	b.w	8021c08 <_tzset_unlocked_r>
 8021c04:	20000108 	.word	0x20000108

08021c08 <_tzset_unlocked_r>:
 8021c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c0c:	b08d      	sub	sp, #52	; 0x34
 8021c0e:	4607      	mov	r7, r0
 8021c10:	f000 fbb2 	bl	8022378 <__gettzinfo>
 8021c14:	49ae      	ldr	r1, [pc, #696]	; (8021ed0 <_tzset_unlocked_r+0x2c8>)
 8021c16:	4eaf      	ldr	r6, [pc, #700]	; (8021ed4 <_tzset_unlocked_r+0x2cc>)
 8021c18:	4605      	mov	r5, r0
 8021c1a:	4638      	mov	r0, r7
 8021c1c:	f000 fba4 	bl	8022368 <_getenv_r>
 8021c20:	4604      	mov	r4, r0
 8021c22:	b970      	cbnz	r0, 8021c42 <_tzset_unlocked_r+0x3a>
 8021c24:	4bac      	ldr	r3, [pc, #688]	; (8021ed8 <_tzset_unlocked_r+0x2d0>)
 8021c26:	4aad      	ldr	r2, [pc, #692]	; (8021edc <_tzset_unlocked_r+0x2d4>)
 8021c28:	6018      	str	r0, [r3, #0]
 8021c2a:	4bad      	ldr	r3, [pc, #692]	; (8021ee0 <_tzset_unlocked_r+0x2d8>)
 8021c2c:	6018      	str	r0, [r3, #0]
 8021c2e:	4bad      	ldr	r3, [pc, #692]	; (8021ee4 <_tzset_unlocked_r+0x2dc>)
 8021c30:	6830      	ldr	r0, [r6, #0]
 8021c32:	e9c3 2200 	strd	r2, r2, [r3]
 8021c36:	f7fe fe71 	bl	802091c <free>
 8021c3a:	6034      	str	r4, [r6, #0]
 8021c3c:	b00d      	add	sp, #52	; 0x34
 8021c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c42:	6831      	ldr	r1, [r6, #0]
 8021c44:	2900      	cmp	r1, #0
 8021c46:	d15f      	bne.n	8021d08 <_tzset_unlocked_r+0x100>
 8021c48:	6830      	ldr	r0, [r6, #0]
 8021c4a:	f7fe fe67 	bl	802091c <free>
 8021c4e:	4620      	mov	r0, r4
 8021c50:	f7de faf4 	bl	800023c <strlen>
 8021c54:	1c41      	adds	r1, r0, #1
 8021c56:	4638      	mov	r0, r7
 8021c58:	f7fe fede 	bl	8020a18 <_malloc_r>
 8021c5c:	6030      	str	r0, [r6, #0]
 8021c5e:	2800      	cmp	r0, #0
 8021c60:	d157      	bne.n	8021d12 <_tzset_unlocked_r+0x10a>
 8021c62:	7823      	ldrb	r3, [r4, #0]
 8021c64:	4aa0      	ldr	r2, [pc, #640]	; (8021ee8 <_tzset_unlocked_r+0x2e0>)
 8021c66:	49a1      	ldr	r1, [pc, #644]	; (8021eec <_tzset_unlocked_r+0x2e4>)
 8021c68:	2b3a      	cmp	r3, #58	; 0x3a
 8021c6a:	bf08      	it	eq
 8021c6c:	3401      	addeq	r4, #1
 8021c6e:	ae0a      	add	r6, sp, #40	; 0x28
 8021c70:	4633      	mov	r3, r6
 8021c72:	4620      	mov	r0, r4
 8021c74:	f001 f976 	bl	8022f64 <siscanf>
 8021c78:	2800      	cmp	r0, #0
 8021c7a:	dddf      	ble.n	8021c3c <_tzset_unlocked_r+0x34>
 8021c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c7e:	18e7      	adds	r7, r4, r3
 8021c80:	5ce3      	ldrb	r3, [r4, r3]
 8021c82:	2b2d      	cmp	r3, #45	; 0x2d
 8021c84:	d149      	bne.n	8021d1a <_tzset_unlocked_r+0x112>
 8021c86:	3701      	adds	r7, #1
 8021c88:	f04f 34ff 	mov.w	r4, #4294967295
 8021c8c:	f10d 0a20 	add.w	sl, sp, #32
 8021c90:	f10d 0b1e 	add.w	fp, sp, #30
 8021c94:	f04f 0800 	mov.w	r8, #0
 8021c98:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8021c9c:	4994      	ldr	r1, [pc, #592]	; (8021ef0 <_tzset_unlocked_r+0x2e8>)
 8021c9e:	9603      	str	r6, [sp, #12]
 8021ca0:	f8cd b000 	str.w	fp, [sp]
 8021ca4:	4633      	mov	r3, r6
 8021ca6:	aa07      	add	r2, sp, #28
 8021ca8:	4638      	mov	r0, r7
 8021caa:	f8ad 801e 	strh.w	r8, [sp, #30]
 8021cae:	f8ad 8020 	strh.w	r8, [sp, #32]
 8021cb2:	f001 f957 	bl	8022f64 <siscanf>
 8021cb6:	4540      	cmp	r0, r8
 8021cb8:	ddc0      	ble.n	8021c3c <_tzset_unlocked_r+0x34>
 8021cba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021cbe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021cc2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021efc <_tzset_unlocked_r+0x2f4>
 8021cc6:	213c      	movs	r1, #60	; 0x3c
 8021cc8:	fb01 2203 	mla	r2, r1, r3, r2
 8021ccc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021cd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021cd4:	fb01 2303 	mla	r3, r1, r3, r2
 8021cd8:	435c      	muls	r4, r3
 8021cda:	62ac      	str	r4, [r5, #40]	; 0x28
 8021cdc:	4c81      	ldr	r4, [pc, #516]	; (8021ee4 <_tzset_unlocked_r+0x2dc>)
 8021cde:	4b82      	ldr	r3, [pc, #520]	; (8021ee8 <_tzset_unlocked_r+0x2e0>)
 8021ce0:	6023      	str	r3, [r4, #0]
 8021ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ce4:	4981      	ldr	r1, [pc, #516]	; (8021eec <_tzset_unlocked_r+0x2e4>)
 8021ce6:	441f      	add	r7, r3
 8021ce8:	464a      	mov	r2, r9
 8021cea:	4633      	mov	r3, r6
 8021cec:	4638      	mov	r0, r7
 8021cee:	f001 f939 	bl	8022f64 <siscanf>
 8021cf2:	4540      	cmp	r0, r8
 8021cf4:	dc16      	bgt.n	8021d24 <_tzset_unlocked_r+0x11c>
 8021cf6:	6823      	ldr	r3, [r4, #0]
 8021cf8:	6063      	str	r3, [r4, #4]
 8021cfa:	4b77      	ldr	r3, [pc, #476]	; (8021ed8 <_tzset_unlocked_r+0x2d0>)
 8021cfc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021cfe:	601a      	str	r2, [r3, #0]
 8021d00:	4b77      	ldr	r3, [pc, #476]	; (8021ee0 <_tzset_unlocked_r+0x2d8>)
 8021d02:	f8c3 8000 	str.w	r8, [r3]
 8021d06:	e799      	b.n	8021c3c <_tzset_unlocked_r+0x34>
 8021d08:	f7de faa0 	bl	800024c <strcmp>
 8021d0c:	2800      	cmp	r0, #0
 8021d0e:	d19b      	bne.n	8021c48 <_tzset_unlocked_r+0x40>
 8021d10:	e794      	b.n	8021c3c <_tzset_unlocked_r+0x34>
 8021d12:	4621      	mov	r1, r4
 8021d14:	f001 f952 	bl	8022fbc <strcpy>
 8021d18:	e7a3      	b.n	8021c62 <_tzset_unlocked_r+0x5a>
 8021d1a:	2b2b      	cmp	r3, #43	; 0x2b
 8021d1c:	bf08      	it	eq
 8021d1e:	3701      	addeq	r7, #1
 8021d20:	2401      	movs	r4, #1
 8021d22:	e7b3      	b.n	8021c8c <_tzset_unlocked_r+0x84>
 8021d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d26:	f8c4 9004 	str.w	r9, [r4, #4]
 8021d2a:	18fc      	adds	r4, r7, r3
 8021d2c:	5cfb      	ldrb	r3, [r7, r3]
 8021d2e:	2b2d      	cmp	r3, #45	; 0x2d
 8021d30:	f040 808b 	bne.w	8021e4a <_tzset_unlocked_r+0x242>
 8021d34:	3401      	adds	r4, #1
 8021d36:	f04f 37ff 	mov.w	r7, #4294967295
 8021d3a:	2300      	movs	r3, #0
 8021d3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021d48:	930a      	str	r3, [sp, #40]	; 0x28
 8021d4a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021d4e:	e9cd b600 	strd	fp, r6, [sp]
 8021d52:	4967      	ldr	r1, [pc, #412]	; (8021ef0 <_tzset_unlocked_r+0x2e8>)
 8021d54:	4633      	mov	r3, r6
 8021d56:	aa07      	add	r2, sp, #28
 8021d58:	4620      	mov	r0, r4
 8021d5a:	f001 f903 	bl	8022f64 <siscanf>
 8021d5e:	2800      	cmp	r0, #0
 8021d60:	dc78      	bgt.n	8021e54 <_tzset_unlocked_r+0x24c>
 8021d62:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8021d64:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8021d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d6a:	652f      	str	r7, [r5, #80]	; 0x50
 8021d6c:	441c      	add	r4, r3
 8021d6e:	462f      	mov	r7, r5
 8021d70:	f04f 0900 	mov.w	r9, #0
 8021d74:	7823      	ldrb	r3, [r4, #0]
 8021d76:	2b2c      	cmp	r3, #44	; 0x2c
 8021d78:	bf08      	it	eq
 8021d7a:	3401      	addeq	r4, #1
 8021d7c:	f894 8000 	ldrb.w	r8, [r4]
 8021d80:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8021d84:	d178      	bne.n	8021e78 <_tzset_unlocked_r+0x270>
 8021d86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8021d8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8021d8e:	ab09      	add	r3, sp, #36	; 0x24
 8021d90:	9300      	str	r3, [sp, #0]
 8021d92:	4958      	ldr	r1, [pc, #352]	; (8021ef4 <_tzset_unlocked_r+0x2ec>)
 8021d94:	9603      	str	r6, [sp, #12]
 8021d96:	4633      	mov	r3, r6
 8021d98:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8021d9c:	4620      	mov	r0, r4
 8021d9e:	f001 f8e1 	bl	8022f64 <siscanf>
 8021da2:	2803      	cmp	r0, #3
 8021da4:	f47f af4a 	bne.w	8021c3c <_tzset_unlocked_r+0x34>
 8021da8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8021dac:	1e4b      	subs	r3, r1, #1
 8021dae:	2b0b      	cmp	r3, #11
 8021db0:	f63f af44 	bhi.w	8021c3c <_tzset_unlocked_r+0x34>
 8021db4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021db8:	1e53      	subs	r3, r2, #1
 8021dba:	2b04      	cmp	r3, #4
 8021dbc:	f63f af3e 	bhi.w	8021c3c <_tzset_unlocked_r+0x34>
 8021dc0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021dc4:	2b06      	cmp	r3, #6
 8021dc6:	f63f af39 	bhi.w	8021c3c <_tzset_unlocked_r+0x34>
 8021dca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8021dce:	f887 8008 	strb.w	r8, [r7, #8]
 8021dd2:	617b      	str	r3, [r7, #20]
 8021dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021dd6:	eb04 0803 	add.w	r8, r4, r3
 8021dda:	2302      	movs	r3, #2
 8021ddc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021de0:	2300      	movs	r3, #0
 8021de2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021de6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8021dea:	930a      	str	r3, [sp, #40]	; 0x28
 8021dec:	f898 3000 	ldrb.w	r3, [r8]
 8021df0:	2b2f      	cmp	r3, #47	; 0x2f
 8021df2:	d109      	bne.n	8021e08 <_tzset_unlocked_r+0x200>
 8021df4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021df8:	e9cd b600 	strd	fp, r6, [sp]
 8021dfc:	493e      	ldr	r1, [pc, #248]	; (8021ef8 <_tzset_unlocked_r+0x2f0>)
 8021dfe:	4633      	mov	r3, r6
 8021e00:	aa07      	add	r2, sp, #28
 8021e02:	4640      	mov	r0, r8
 8021e04:	f001 f8ae 	bl	8022f64 <siscanf>
 8021e08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021e0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021e10:	213c      	movs	r1, #60	; 0x3c
 8021e12:	fb01 2203 	mla	r2, r1, r3, r2
 8021e16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021e1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021e1e:	fb01 2303 	mla	r3, r1, r3, r2
 8021e22:	61bb      	str	r3, [r7, #24]
 8021e24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e26:	3728      	adds	r7, #40	; 0x28
 8021e28:	4444      	add	r4, r8
 8021e2a:	f1b9 0f00 	cmp.w	r9, #0
 8021e2e:	d020      	beq.n	8021e72 <_tzset_unlocked_r+0x26a>
 8021e30:	6868      	ldr	r0, [r5, #4]
 8021e32:	f7ff fe2f 	bl	8021a94 <__tzcalc_limits>
 8021e36:	4b28      	ldr	r3, [pc, #160]	; (8021ed8 <_tzset_unlocked_r+0x2d0>)
 8021e38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8021e3a:	601a      	str	r2, [r3, #0]
 8021e3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8021e3e:	1a9b      	subs	r3, r3, r2
 8021e40:	4a27      	ldr	r2, [pc, #156]	; (8021ee0 <_tzset_unlocked_r+0x2d8>)
 8021e42:	bf18      	it	ne
 8021e44:	2301      	movne	r3, #1
 8021e46:	6013      	str	r3, [r2, #0]
 8021e48:	e6f8      	b.n	8021c3c <_tzset_unlocked_r+0x34>
 8021e4a:	2b2b      	cmp	r3, #43	; 0x2b
 8021e4c:	bf08      	it	eq
 8021e4e:	3401      	addeq	r4, #1
 8021e50:	2701      	movs	r7, #1
 8021e52:	e772      	b.n	8021d3a <_tzset_unlocked_r+0x132>
 8021e54:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8021e58:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021e5c:	213c      	movs	r1, #60	; 0x3c
 8021e5e:	fb01 2203 	mla	r2, r1, r3, r2
 8021e62:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8021e66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021e6a:	fb01 2303 	mla	r3, r1, r3, r2
 8021e6e:	435f      	muls	r7, r3
 8021e70:	e77a      	b.n	8021d68 <_tzset_unlocked_r+0x160>
 8021e72:	f04f 0901 	mov.w	r9, #1
 8021e76:	e77d      	b.n	8021d74 <_tzset_unlocked_r+0x16c>
 8021e78:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8021e7c:	bf06      	itte	eq
 8021e7e:	3401      	addeq	r4, #1
 8021e80:	4643      	moveq	r3, r8
 8021e82:	2344      	movne	r3, #68	; 0x44
 8021e84:	220a      	movs	r2, #10
 8021e86:	a90b      	add	r1, sp, #44	; 0x2c
 8021e88:	4620      	mov	r0, r4
 8021e8a:	9305      	str	r3, [sp, #20]
 8021e8c:	f7ff fdf8 	bl	8021a80 <strtoul>
 8021e90:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8021e94:	9b05      	ldr	r3, [sp, #20]
 8021e96:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8021e9a:	45a0      	cmp	r8, r4
 8021e9c:	d114      	bne.n	8021ec8 <_tzset_unlocked_r+0x2c0>
 8021e9e:	234d      	movs	r3, #77	; 0x4d
 8021ea0:	f1b9 0f00 	cmp.w	r9, #0
 8021ea4:	d107      	bne.n	8021eb6 <_tzset_unlocked_r+0x2ae>
 8021ea6:	722b      	strb	r3, [r5, #8]
 8021ea8:	2103      	movs	r1, #3
 8021eaa:	2302      	movs	r3, #2
 8021eac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021eb0:	f8c5 9014 	str.w	r9, [r5, #20]
 8021eb4:	e791      	b.n	8021dda <_tzset_unlocked_r+0x1d2>
 8021eb6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8021eba:	220b      	movs	r2, #11
 8021ebc:	2301      	movs	r3, #1
 8021ebe:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021ec6:	e788      	b.n	8021dda <_tzset_unlocked_r+0x1d2>
 8021ec8:	b280      	uxth	r0, r0
 8021eca:	723b      	strb	r3, [r7, #8]
 8021ecc:	6178      	str	r0, [r7, #20]
 8021ece:	e784      	b.n	8021dda <_tzset_unlocked_r+0x1d2>
 8021ed0:	08029c5c 	.word	0x08029c5c
 8021ed4:	20000f48 	.word	0x20000f48
 8021ed8:	20000f50 	.word	0x20000f50
 8021edc:	08029c5f 	.word	0x08029c5f
 8021ee0:	20000f4c 	.word	0x20000f4c
 8021ee4:	2000016c 	.word	0x2000016c
 8021ee8:	20000f3b 	.word	0x20000f3b
 8021eec:	08029c63 	.word	0x08029c63
 8021ef0:	08029c86 	.word	0x08029c86
 8021ef4:	08029c72 	.word	0x08029c72
 8021ef8:	08029c85 	.word	0x08029c85
 8021efc:	20000f30 	.word	0x20000f30

08021f00 <_vsniprintf_r>:
 8021f00:	b530      	push	{r4, r5, lr}
 8021f02:	1e14      	subs	r4, r2, #0
 8021f04:	4605      	mov	r5, r0
 8021f06:	b09b      	sub	sp, #108	; 0x6c
 8021f08:	4618      	mov	r0, r3
 8021f0a:	da05      	bge.n	8021f18 <_vsniprintf_r+0x18>
 8021f0c:	238b      	movs	r3, #139	; 0x8b
 8021f0e:	602b      	str	r3, [r5, #0]
 8021f10:	f04f 30ff 	mov.w	r0, #4294967295
 8021f14:	b01b      	add	sp, #108	; 0x6c
 8021f16:	bd30      	pop	{r4, r5, pc}
 8021f18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021f1c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021f20:	bf14      	ite	ne
 8021f22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021f26:	4623      	moveq	r3, r4
 8021f28:	9302      	str	r3, [sp, #8]
 8021f2a:	9305      	str	r3, [sp, #20]
 8021f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021f30:	9100      	str	r1, [sp, #0]
 8021f32:	9104      	str	r1, [sp, #16]
 8021f34:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021f38:	4602      	mov	r2, r0
 8021f3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8021f3c:	4669      	mov	r1, sp
 8021f3e:	4628      	mov	r0, r5
 8021f40:	f000 fb94 	bl	802266c <_svfiprintf_r>
 8021f44:	1c43      	adds	r3, r0, #1
 8021f46:	bfbc      	itt	lt
 8021f48:	238b      	movlt	r3, #139	; 0x8b
 8021f4a:	602b      	strlt	r3, [r5, #0]
 8021f4c:	2c00      	cmp	r4, #0
 8021f4e:	d0e1      	beq.n	8021f14 <_vsniprintf_r+0x14>
 8021f50:	9b00      	ldr	r3, [sp, #0]
 8021f52:	2200      	movs	r2, #0
 8021f54:	701a      	strb	r2, [r3, #0]
 8021f56:	e7dd      	b.n	8021f14 <_vsniprintf_r+0x14>

08021f58 <vsniprintf>:
 8021f58:	b507      	push	{r0, r1, r2, lr}
 8021f5a:	9300      	str	r3, [sp, #0]
 8021f5c:	4613      	mov	r3, r2
 8021f5e:	460a      	mov	r2, r1
 8021f60:	4601      	mov	r1, r0
 8021f62:	4803      	ldr	r0, [pc, #12]	; (8021f70 <vsniprintf+0x18>)
 8021f64:	6800      	ldr	r0, [r0, #0]
 8021f66:	f7ff ffcb 	bl	8021f00 <_vsniprintf_r>
 8021f6a:	b003      	add	sp, #12
 8021f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f70:	20000108 	.word	0x20000108

08021f74 <__swbuf_r>:
 8021f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f76:	460e      	mov	r6, r1
 8021f78:	4614      	mov	r4, r2
 8021f7a:	4605      	mov	r5, r0
 8021f7c:	b118      	cbz	r0, 8021f86 <__swbuf_r+0x12>
 8021f7e:	6983      	ldr	r3, [r0, #24]
 8021f80:	b90b      	cbnz	r3, 8021f86 <__swbuf_r+0x12>
 8021f82:	f7fe f8a9 	bl	80200d8 <__sinit>
 8021f86:	4b21      	ldr	r3, [pc, #132]	; (802200c <__swbuf_r+0x98>)
 8021f88:	429c      	cmp	r4, r3
 8021f8a:	d12b      	bne.n	8021fe4 <__swbuf_r+0x70>
 8021f8c:	686c      	ldr	r4, [r5, #4]
 8021f8e:	69a3      	ldr	r3, [r4, #24]
 8021f90:	60a3      	str	r3, [r4, #8]
 8021f92:	89a3      	ldrh	r3, [r4, #12]
 8021f94:	071a      	lsls	r2, r3, #28
 8021f96:	d52f      	bpl.n	8021ff8 <__swbuf_r+0x84>
 8021f98:	6923      	ldr	r3, [r4, #16]
 8021f9a:	b36b      	cbz	r3, 8021ff8 <__swbuf_r+0x84>
 8021f9c:	6923      	ldr	r3, [r4, #16]
 8021f9e:	6820      	ldr	r0, [r4, #0]
 8021fa0:	1ac0      	subs	r0, r0, r3
 8021fa2:	6963      	ldr	r3, [r4, #20]
 8021fa4:	b2f6      	uxtb	r6, r6
 8021fa6:	4283      	cmp	r3, r0
 8021fa8:	4637      	mov	r7, r6
 8021faa:	dc04      	bgt.n	8021fb6 <__swbuf_r+0x42>
 8021fac:	4621      	mov	r1, r4
 8021fae:	4628      	mov	r0, r5
 8021fb0:	f7fd ffec 	bl	801ff8c <_fflush_r>
 8021fb4:	bb30      	cbnz	r0, 8022004 <__swbuf_r+0x90>
 8021fb6:	68a3      	ldr	r3, [r4, #8]
 8021fb8:	3b01      	subs	r3, #1
 8021fba:	60a3      	str	r3, [r4, #8]
 8021fbc:	6823      	ldr	r3, [r4, #0]
 8021fbe:	1c5a      	adds	r2, r3, #1
 8021fc0:	6022      	str	r2, [r4, #0]
 8021fc2:	701e      	strb	r6, [r3, #0]
 8021fc4:	6963      	ldr	r3, [r4, #20]
 8021fc6:	3001      	adds	r0, #1
 8021fc8:	4283      	cmp	r3, r0
 8021fca:	d004      	beq.n	8021fd6 <__swbuf_r+0x62>
 8021fcc:	89a3      	ldrh	r3, [r4, #12]
 8021fce:	07db      	lsls	r3, r3, #31
 8021fd0:	d506      	bpl.n	8021fe0 <__swbuf_r+0x6c>
 8021fd2:	2e0a      	cmp	r6, #10
 8021fd4:	d104      	bne.n	8021fe0 <__swbuf_r+0x6c>
 8021fd6:	4621      	mov	r1, r4
 8021fd8:	4628      	mov	r0, r5
 8021fda:	f7fd ffd7 	bl	801ff8c <_fflush_r>
 8021fde:	b988      	cbnz	r0, 8022004 <__swbuf_r+0x90>
 8021fe0:	4638      	mov	r0, r7
 8021fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021fe4:	4b0a      	ldr	r3, [pc, #40]	; (8022010 <__swbuf_r+0x9c>)
 8021fe6:	429c      	cmp	r4, r3
 8021fe8:	d101      	bne.n	8021fee <__swbuf_r+0x7a>
 8021fea:	68ac      	ldr	r4, [r5, #8]
 8021fec:	e7cf      	b.n	8021f8e <__swbuf_r+0x1a>
 8021fee:	4b09      	ldr	r3, [pc, #36]	; (8022014 <__swbuf_r+0xa0>)
 8021ff0:	429c      	cmp	r4, r3
 8021ff2:	bf08      	it	eq
 8021ff4:	68ec      	ldreq	r4, [r5, #12]
 8021ff6:	e7ca      	b.n	8021f8e <__swbuf_r+0x1a>
 8021ff8:	4621      	mov	r1, r4
 8021ffa:	4628      	mov	r0, r5
 8021ffc:	f000 f81e 	bl	802203c <__swsetup_r>
 8022000:	2800      	cmp	r0, #0
 8022002:	d0cb      	beq.n	8021f9c <__swbuf_r+0x28>
 8022004:	f04f 37ff 	mov.w	r7, #4294967295
 8022008:	e7ea      	b.n	8021fe0 <__swbuf_r+0x6c>
 802200a:	bf00      	nop
 802200c:	08029860 	.word	0x08029860
 8022010:	08029880 	.word	0x08029880
 8022014:	08029840 	.word	0x08029840

08022018 <_write_r>:
 8022018:	b538      	push	{r3, r4, r5, lr}
 802201a:	4d07      	ldr	r5, [pc, #28]	; (8022038 <_write_r+0x20>)
 802201c:	4604      	mov	r4, r0
 802201e:	4608      	mov	r0, r1
 8022020:	4611      	mov	r1, r2
 8022022:	2200      	movs	r2, #0
 8022024:	602a      	str	r2, [r5, #0]
 8022026:	461a      	mov	r2, r3
 8022028:	f7de ff0a 	bl	8000e40 <_write>
 802202c:	1c43      	adds	r3, r0, #1
 802202e:	d102      	bne.n	8022036 <_write_r+0x1e>
 8022030:	682b      	ldr	r3, [r5, #0]
 8022032:	b103      	cbz	r3, 8022036 <_write_r+0x1e>
 8022034:	6023      	str	r3, [r4, #0]
 8022036:	bd38      	pop	{r3, r4, r5, pc}
 8022038:	20000ff4 	.word	0x20000ff4

0802203c <__swsetup_r>:
 802203c:	4b32      	ldr	r3, [pc, #200]	; (8022108 <__swsetup_r+0xcc>)
 802203e:	b570      	push	{r4, r5, r6, lr}
 8022040:	681d      	ldr	r5, [r3, #0]
 8022042:	4606      	mov	r6, r0
 8022044:	460c      	mov	r4, r1
 8022046:	b125      	cbz	r5, 8022052 <__swsetup_r+0x16>
 8022048:	69ab      	ldr	r3, [r5, #24]
 802204a:	b913      	cbnz	r3, 8022052 <__swsetup_r+0x16>
 802204c:	4628      	mov	r0, r5
 802204e:	f7fe f843 	bl	80200d8 <__sinit>
 8022052:	4b2e      	ldr	r3, [pc, #184]	; (802210c <__swsetup_r+0xd0>)
 8022054:	429c      	cmp	r4, r3
 8022056:	d10f      	bne.n	8022078 <__swsetup_r+0x3c>
 8022058:	686c      	ldr	r4, [r5, #4]
 802205a:	89a3      	ldrh	r3, [r4, #12]
 802205c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022060:	0719      	lsls	r1, r3, #28
 8022062:	d42c      	bmi.n	80220be <__swsetup_r+0x82>
 8022064:	06dd      	lsls	r5, r3, #27
 8022066:	d411      	bmi.n	802208c <__swsetup_r+0x50>
 8022068:	2309      	movs	r3, #9
 802206a:	6033      	str	r3, [r6, #0]
 802206c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022070:	81a3      	strh	r3, [r4, #12]
 8022072:	f04f 30ff 	mov.w	r0, #4294967295
 8022076:	e03e      	b.n	80220f6 <__swsetup_r+0xba>
 8022078:	4b25      	ldr	r3, [pc, #148]	; (8022110 <__swsetup_r+0xd4>)
 802207a:	429c      	cmp	r4, r3
 802207c:	d101      	bne.n	8022082 <__swsetup_r+0x46>
 802207e:	68ac      	ldr	r4, [r5, #8]
 8022080:	e7eb      	b.n	802205a <__swsetup_r+0x1e>
 8022082:	4b24      	ldr	r3, [pc, #144]	; (8022114 <__swsetup_r+0xd8>)
 8022084:	429c      	cmp	r4, r3
 8022086:	bf08      	it	eq
 8022088:	68ec      	ldreq	r4, [r5, #12]
 802208a:	e7e6      	b.n	802205a <__swsetup_r+0x1e>
 802208c:	0758      	lsls	r0, r3, #29
 802208e:	d512      	bpl.n	80220b6 <__swsetup_r+0x7a>
 8022090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022092:	b141      	cbz	r1, 80220a6 <__swsetup_r+0x6a>
 8022094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022098:	4299      	cmp	r1, r3
 802209a:	d002      	beq.n	80220a2 <__swsetup_r+0x66>
 802209c:	4630      	mov	r0, r6
 802209e:	f7fe fc6b 	bl	8020978 <_free_r>
 80220a2:	2300      	movs	r3, #0
 80220a4:	6363      	str	r3, [r4, #52]	; 0x34
 80220a6:	89a3      	ldrh	r3, [r4, #12]
 80220a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80220ac:	81a3      	strh	r3, [r4, #12]
 80220ae:	2300      	movs	r3, #0
 80220b0:	6063      	str	r3, [r4, #4]
 80220b2:	6923      	ldr	r3, [r4, #16]
 80220b4:	6023      	str	r3, [r4, #0]
 80220b6:	89a3      	ldrh	r3, [r4, #12]
 80220b8:	f043 0308 	orr.w	r3, r3, #8
 80220bc:	81a3      	strh	r3, [r4, #12]
 80220be:	6923      	ldr	r3, [r4, #16]
 80220c0:	b94b      	cbnz	r3, 80220d6 <__swsetup_r+0x9a>
 80220c2:	89a3      	ldrh	r3, [r4, #12]
 80220c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80220c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80220cc:	d003      	beq.n	80220d6 <__swsetup_r+0x9a>
 80220ce:	4621      	mov	r1, r4
 80220d0:	4630      	mov	r0, r6
 80220d2:	f7fe fbdb 	bl	802088c <__smakebuf_r>
 80220d6:	89a0      	ldrh	r0, [r4, #12]
 80220d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80220dc:	f010 0301 	ands.w	r3, r0, #1
 80220e0:	d00a      	beq.n	80220f8 <__swsetup_r+0xbc>
 80220e2:	2300      	movs	r3, #0
 80220e4:	60a3      	str	r3, [r4, #8]
 80220e6:	6963      	ldr	r3, [r4, #20]
 80220e8:	425b      	negs	r3, r3
 80220ea:	61a3      	str	r3, [r4, #24]
 80220ec:	6923      	ldr	r3, [r4, #16]
 80220ee:	b943      	cbnz	r3, 8022102 <__swsetup_r+0xc6>
 80220f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80220f4:	d1ba      	bne.n	802206c <__swsetup_r+0x30>
 80220f6:	bd70      	pop	{r4, r5, r6, pc}
 80220f8:	0781      	lsls	r1, r0, #30
 80220fa:	bf58      	it	pl
 80220fc:	6963      	ldrpl	r3, [r4, #20]
 80220fe:	60a3      	str	r3, [r4, #8]
 8022100:	e7f4      	b.n	80220ec <__swsetup_r+0xb0>
 8022102:	2000      	movs	r0, #0
 8022104:	e7f7      	b.n	80220f6 <__swsetup_r+0xba>
 8022106:	bf00      	nop
 8022108:	20000108 	.word	0x20000108
 802210c:	08029860 	.word	0x08029860
 8022110:	08029880 	.word	0x08029880
 8022114:	08029840 	.word	0x08029840

08022118 <__register_exitproc>:
 8022118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802211c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80221d8 <__register_exitproc+0xc0>
 8022120:	4606      	mov	r6, r0
 8022122:	f8d8 0000 	ldr.w	r0, [r8]
 8022126:	461f      	mov	r7, r3
 8022128:	460d      	mov	r5, r1
 802212a:	4691      	mov	r9, r2
 802212c:	f7fe fb87 	bl	802083e <__retarget_lock_acquire_recursive>
 8022130:	4b25      	ldr	r3, [pc, #148]	; (80221c8 <__register_exitproc+0xb0>)
 8022132:	681c      	ldr	r4, [r3, #0]
 8022134:	b934      	cbnz	r4, 8022144 <__register_exitproc+0x2c>
 8022136:	4c25      	ldr	r4, [pc, #148]	; (80221cc <__register_exitproc+0xb4>)
 8022138:	601c      	str	r4, [r3, #0]
 802213a:	4b25      	ldr	r3, [pc, #148]	; (80221d0 <__register_exitproc+0xb8>)
 802213c:	b113      	cbz	r3, 8022144 <__register_exitproc+0x2c>
 802213e:	681b      	ldr	r3, [r3, #0]
 8022140:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022144:	6863      	ldr	r3, [r4, #4]
 8022146:	2b1f      	cmp	r3, #31
 8022148:	dd07      	ble.n	802215a <__register_exitproc+0x42>
 802214a:	f8d8 0000 	ldr.w	r0, [r8]
 802214e:	f7fe fb78 	bl	8020842 <__retarget_lock_release_recursive>
 8022152:	f04f 30ff 	mov.w	r0, #4294967295
 8022156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802215a:	b34e      	cbz	r6, 80221b0 <__register_exitproc+0x98>
 802215c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022160:	b988      	cbnz	r0, 8022186 <__register_exitproc+0x6e>
 8022162:	4b1c      	ldr	r3, [pc, #112]	; (80221d4 <__register_exitproc+0xbc>)
 8022164:	b923      	cbnz	r3, 8022170 <__register_exitproc+0x58>
 8022166:	f8d8 0000 	ldr.w	r0, [r8]
 802216a:	f7fe fb69 	bl	8020840 <__retarget_lock_release>
 802216e:	e7f0      	b.n	8022152 <__register_exitproc+0x3a>
 8022170:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022174:	f7fe fbca 	bl	802090c <malloc>
 8022178:	2800      	cmp	r0, #0
 802217a:	d0f4      	beq.n	8022166 <__register_exitproc+0x4e>
 802217c:	2300      	movs	r3, #0
 802217e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8022182:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022186:	6863      	ldr	r3, [r4, #4]
 8022188:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802218c:	2201      	movs	r2, #1
 802218e:	409a      	lsls	r2, r3
 8022190:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022194:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022198:	4313      	orrs	r3, r2
 802219a:	2e02      	cmp	r6, #2
 802219c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80221a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80221a4:	bf02      	ittt	eq
 80221a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80221aa:	431a      	orreq	r2, r3
 80221ac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80221b0:	6863      	ldr	r3, [r4, #4]
 80221b2:	f8d8 0000 	ldr.w	r0, [r8]
 80221b6:	1c5a      	adds	r2, r3, #1
 80221b8:	3302      	adds	r3, #2
 80221ba:	6062      	str	r2, [r4, #4]
 80221bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80221c0:	f7fe fb3f 	bl	8020842 <__retarget_lock_release_recursive>
 80221c4:	2000      	movs	r0, #0
 80221c6:	e7c6      	b.n	8022156 <__register_exitproc+0x3e>
 80221c8:	20000fe0 	.word	0x20000fe0
 80221cc:	20000f54 	.word	0x20000f54
 80221d0:	00000000 	.word	0x00000000
 80221d4:	0802090d 	.word	0x0802090d
 80221d8:	20000174 	.word	0x20000174

080221dc <abs>:
 80221dc:	2800      	cmp	r0, #0
 80221de:	bfb8      	it	lt
 80221e0:	4240      	neglt	r0, r0
 80221e2:	4770      	bx	lr

080221e4 <__assert_func>:
 80221e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80221e6:	4614      	mov	r4, r2
 80221e8:	461a      	mov	r2, r3
 80221ea:	4b09      	ldr	r3, [pc, #36]	; (8022210 <__assert_func+0x2c>)
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	4605      	mov	r5, r0
 80221f0:	68d8      	ldr	r0, [r3, #12]
 80221f2:	b14c      	cbz	r4, 8022208 <__assert_func+0x24>
 80221f4:	4b07      	ldr	r3, [pc, #28]	; (8022214 <__assert_func+0x30>)
 80221f6:	9100      	str	r1, [sp, #0]
 80221f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80221fc:	4906      	ldr	r1, [pc, #24]	; (8022218 <__assert_func+0x34>)
 80221fe:	462b      	mov	r3, r5
 8022200:	f000 f854 	bl	80222ac <fiprintf>
 8022204:	f7fd fda8 	bl	801fd58 <abort>
 8022208:	4b04      	ldr	r3, [pc, #16]	; (802221c <__assert_func+0x38>)
 802220a:	461c      	mov	r4, r3
 802220c:	e7f3      	b.n	80221f6 <__assert_func+0x12>
 802220e:	bf00      	nop
 8022210:	20000108 	.word	0x20000108
 8022214:	08029c98 	.word	0x08029c98
 8022218:	08029ca5 	.word	0x08029ca5
 802221c:	08029cd3 	.word	0x08029cd3

08022220 <_close_r>:
 8022220:	b538      	push	{r3, r4, r5, lr}
 8022222:	4d06      	ldr	r5, [pc, #24]	; (802223c <_close_r+0x1c>)
 8022224:	2300      	movs	r3, #0
 8022226:	4604      	mov	r4, r0
 8022228:	4608      	mov	r0, r1
 802222a:	602b      	str	r3, [r5, #0]
 802222c:	f7de fe24 	bl	8000e78 <_close>
 8022230:	1c43      	adds	r3, r0, #1
 8022232:	d102      	bne.n	802223a <_close_r+0x1a>
 8022234:	682b      	ldr	r3, [r5, #0]
 8022236:	b103      	cbz	r3, 802223a <_close_r+0x1a>
 8022238:	6023      	str	r3, [r4, #0]
 802223a:	bd38      	pop	{r3, r4, r5, pc}
 802223c:	20000ff4 	.word	0x20000ff4

08022240 <__sflags>:
 8022240:	780b      	ldrb	r3, [r1, #0]
 8022242:	2b72      	cmp	r3, #114	; 0x72
 8022244:	b530      	push	{r4, r5, lr}
 8022246:	d022      	beq.n	802228e <__sflags+0x4e>
 8022248:	2b77      	cmp	r3, #119	; 0x77
 802224a:	d024      	beq.n	8022296 <__sflags+0x56>
 802224c:	2b61      	cmp	r3, #97	; 0x61
 802224e:	d027      	beq.n	80222a0 <__sflags+0x60>
 8022250:	2316      	movs	r3, #22
 8022252:	6003      	str	r3, [r0, #0]
 8022254:	2000      	movs	r0, #0
 8022256:	bd30      	pop	{r4, r5, pc}
 8022258:	2d62      	cmp	r5, #98	; 0x62
 802225a:	d012      	beq.n	8022282 <__sflags+0x42>
 802225c:	2d78      	cmp	r5, #120	; 0x78
 802225e:	d013      	beq.n	8022288 <__sflags+0x48>
 8022260:	2d2b      	cmp	r5, #43	; 0x2b
 8022262:	d107      	bne.n	8022274 <__sflags+0x34>
 8022264:	f020 001c 	bic.w	r0, r0, #28
 8022268:	f023 0303 	bic.w	r3, r3, #3
 802226c:	f040 0010 	orr.w	r0, r0, #16
 8022270:	f043 0302 	orr.w	r3, r3, #2
 8022274:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8022278:	2d00      	cmp	r5, #0
 802227a:	d1ed      	bne.n	8022258 <__sflags+0x18>
 802227c:	4323      	orrs	r3, r4
 802227e:	6013      	str	r3, [r2, #0]
 8022280:	e7e9      	b.n	8022256 <__sflags+0x16>
 8022282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022286:	e7f5      	b.n	8022274 <__sflags+0x34>
 8022288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802228c:	e7f2      	b.n	8022274 <__sflags+0x34>
 802228e:	2400      	movs	r4, #0
 8022290:	4623      	mov	r3, r4
 8022292:	2004      	movs	r0, #4
 8022294:	e7ee      	b.n	8022274 <__sflags+0x34>
 8022296:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802229a:	2301      	movs	r3, #1
 802229c:	2008      	movs	r0, #8
 802229e:	e7e9      	b.n	8022274 <__sflags+0x34>
 80222a0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80222a4:	2301      	movs	r3, #1
 80222a6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80222aa:	e7e3      	b.n	8022274 <__sflags+0x34>

080222ac <fiprintf>:
 80222ac:	b40e      	push	{r1, r2, r3}
 80222ae:	b503      	push	{r0, r1, lr}
 80222b0:	4601      	mov	r1, r0
 80222b2:	ab03      	add	r3, sp, #12
 80222b4:	4805      	ldr	r0, [pc, #20]	; (80222cc <fiprintf+0x20>)
 80222b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80222ba:	6800      	ldr	r0, [r0, #0]
 80222bc:	9301      	str	r3, [sp, #4]
 80222be:	f000 faff 	bl	80228c0 <_vfiprintf_r>
 80222c2:	b002      	add	sp, #8
 80222c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80222c8:	b003      	add	sp, #12
 80222ca:	4770      	bx	lr
 80222cc:	20000108 	.word	0x20000108

080222d0 <_fstat_r>:
 80222d0:	b538      	push	{r3, r4, r5, lr}
 80222d2:	4d07      	ldr	r5, [pc, #28]	; (80222f0 <_fstat_r+0x20>)
 80222d4:	2300      	movs	r3, #0
 80222d6:	4604      	mov	r4, r0
 80222d8:	4608      	mov	r0, r1
 80222da:	4611      	mov	r1, r2
 80222dc:	602b      	str	r3, [r5, #0]
 80222de:	f7de fdd7 	bl	8000e90 <_fstat>
 80222e2:	1c43      	adds	r3, r0, #1
 80222e4:	d102      	bne.n	80222ec <_fstat_r+0x1c>
 80222e6:	682b      	ldr	r3, [r5, #0]
 80222e8:	b103      	cbz	r3, 80222ec <_fstat_r+0x1c>
 80222ea:	6023      	str	r3, [r4, #0]
 80222ec:	bd38      	pop	{r3, r4, r5, pc}
 80222ee:	bf00      	nop
 80222f0:	20000ff4 	.word	0x20000ff4

080222f4 <_findenv_r>:
 80222f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222f8:	4607      	mov	r7, r0
 80222fa:	4689      	mov	r9, r1
 80222fc:	4616      	mov	r6, r2
 80222fe:	f000 fe85 	bl	802300c <__env_lock>
 8022302:	4b18      	ldr	r3, [pc, #96]	; (8022364 <_findenv_r+0x70>)
 8022304:	681c      	ldr	r4, [r3, #0]
 8022306:	469a      	mov	sl, r3
 8022308:	b134      	cbz	r4, 8022318 <_findenv_r+0x24>
 802230a:	464b      	mov	r3, r9
 802230c:	4698      	mov	r8, r3
 802230e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8022312:	b139      	cbz	r1, 8022324 <_findenv_r+0x30>
 8022314:	293d      	cmp	r1, #61	; 0x3d
 8022316:	d1f9      	bne.n	802230c <_findenv_r+0x18>
 8022318:	4638      	mov	r0, r7
 802231a:	f000 fe7d 	bl	8023018 <__env_unlock>
 802231e:	2000      	movs	r0, #0
 8022320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022324:	eba8 0809 	sub.w	r8, r8, r9
 8022328:	46a3      	mov	fp, r4
 802232a:	f854 0b04 	ldr.w	r0, [r4], #4
 802232e:	2800      	cmp	r0, #0
 8022330:	d0f2      	beq.n	8022318 <_findenv_r+0x24>
 8022332:	4642      	mov	r2, r8
 8022334:	4649      	mov	r1, r9
 8022336:	f000 fe49 	bl	8022fcc <strncmp>
 802233a:	2800      	cmp	r0, #0
 802233c:	d1f4      	bne.n	8022328 <_findenv_r+0x34>
 802233e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022342:	eb03 0508 	add.w	r5, r3, r8
 8022346:	f813 3008 	ldrb.w	r3, [r3, r8]
 802234a:	2b3d      	cmp	r3, #61	; 0x3d
 802234c:	d1ec      	bne.n	8022328 <_findenv_r+0x34>
 802234e:	f8da 3000 	ldr.w	r3, [sl]
 8022352:	ebab 0303 	sub.w	r3, fp, r3
 8022356:	109b      	asrs	r3, r3, #2
 8022358:	4638      	mov	r0, r7
 802235a:	6033      	str	r3, [r6, #0]
 802235c:	f000 fe5c 	bl	8023018 <__env_unlock>
 8022360:	1c68      	adds	r0, r5, #1
 8022362:	e7dd      	b.n	8022320 <_findenv_r+0x2c>
 8022364:	20000000 	.word	0x20000000

08022368 <_getenv_r>:
 8022368:	b507      	push	{r0, r1, r2, lr}
 802236a:	aa01      	add	r2, sp, #4
 802236c:	f7ff ffc2 	bl	80222f4 <_findenv_r>
 8022370:	b003      	add	sp, #12
 8022372:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022378 <__gettzinfo>:
 8022378:	4800      	ldr	r0, [pc, #0]	; (802237c <__gettzinfo+0x4>)
 802237a:	4770      	bx	lr
 802237c:	20000178 	.word	0x20000178

08022380 <gmtime_r>:
 8022380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022384:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022388:	460c      	mov	r4, r1
 802238a:	4a51      	ldr	r2, [pc, #324]	; (80224d0 <gmtime_r+0x150>)
 802238c:	2300      	movs	r3, #0
 802238e:	4630      	mov	r0, r6
 8022390:	4639      	mov	r1, r7
 8022392:	f7de fa0f 	bl	80007b4 <__aeabi_ldivmod>
 8022396:	4639      	mov	r1, r7
 8022398:	4605      	mov	r5, r0
 802239a:	4a4d      	ldr	r2, [pc, #308]	; (80224d0 <gmtime_r+0x150>)
 802239c:	4630      	mov	r0, r6
 802239e:	2300      	movs	r3, #0
 80223a0:	f7de fa08 	bl	80007b4 <__aeabi_ldivmod>
 80223a4:	2a00      	cmp	r2, #0
 80223a6:	bfbc      	itt	lt
 80223a8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80223ac:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80223b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80223b4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80223b8:	fbb2 f3f1 	udiv	r3, r2, r1
 80223bc:	fb01 2213 	mls	r2, r1, r3, r2
 80223c0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80223c4:	bfac      	ite	ge
 80223c6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80223ca:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80223ce:	60a3      	str	r3, [r4, #8]
 80223d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80223d4:	fb01 2213 	mls	r2, r1, r3, r2
 80223d8:	6063      	str	r3, [r4, #4]
 80223da:	6022      	str	r2, [r4, #0]
 80223dc:	1cc3      	adds	r3, r0, #3
 80223de:	2207      	movs	r2, #7
 80223e0:	fb93 f2f2 	sdiv	r2, r3, r2
 80223e4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80223e8:	1a9b      	subs	r3, r3, r2
 80223ea:	bf48      	it	mi
 80223ec:	3307      	addmi	r3, #7
 80223ee:	2800      	cmp	r0, #0
 80223f0:	61a3      	str	r3, [r4, #24]
 80223f2:	bfb8      	it	lt
 80223f4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80223f8:	4936      	ldr	r1, [pc, #216]	; (80224d4 <gmtime_r+0x154>)
 80223fa:	bfae      	itee	ge
 80223fc:	fb90 f1f1 	sdivge	r1, r0, r1
 8022400:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022404:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022408:	4b33      	ldr	r3, [pc, #204]	; (80224d8 <gmtime_r+0x158>)
 802240a:	fb03 0001 	mla	r0, r3, r1, r0
 802240e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022412:	fbb0 f2f2 	udiv	r2, r0, r2
 8022416:	4402      	add	r2, r0
 8022418:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802241c:	fbb0 f3fc 	udiv	r3, r0, ip
 8022420:	1ad2      	subs	r2, r2, r3
 8022422:	f240 176d 	movw	r7, #365	; 0x16d
 8022426:	4b2d      	ldr	r3, [pc, #180]	; (80224dc <gmtime_r+0x15c>)
 8022428:	fbb0 f3f3 	udiv	r3, r0, r3
 802242c:	2664      	movs	r6, #100	; 0x64
 802242e:	1ad3      	subs	r3, r2, r3
 8022430:	fbb3 f5f7 	udiv	r5, r3, r7
 8022434:	fbb3 f3fc 	udiv	r3, r3, ip
 8022438:	fbb5 f2f6 	udiv	r2, r5, r6
 802243c:	1ad3      	subs	r3, r2, r3
 802243e:	4403      	add	r3, r0
 8022440:	fb07 3315 	mls	r3, r7, r5, r3
 8022444:	2099      	movs	r0, #153	; 0x99
 8022446:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802244a:	f10c 0c02 	add.w	ip, ip, #2
 802244e:	f103 0e01 	add.w	lr, r3, #1
 8022452:	fbbc f7f0 	udiv	r7, ip, r0
 8022456:	4378      	muls	r0, r7
 8022458:	3002      	adds	r0, #2
 802245a:	f04f 0805 	mov.w	r8, #5
 802245e:	fbb0 f0f8 	udiv	r0, r0, r8
 8022462:	ebae 0000 	sub.w	r0, lr, r0
 8022466:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802246a:	45f4      	cmp	ip, lr
 802246c:	bf94      	ite	ls
 802246e:	f04f 0c02 	movls.w	ip, #2
 8022472:	f06f 0c09 	mvnhi.w	ip, #9
 8022476:	4467      	add	r7, ip
 8022478:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 802247c:	fb0c 5101 	mla	r1, ip, r1, r5
 8022480:	2f01      	cmp	r7, #1
 8022482:	bf98      	it	ls
 8022484:	3101      	addls	r1, #1
 8022486:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802248a:	d30c      	bcc.n	80224a6 <gmtime_r+0x126>
 802248c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022490:	61e3      	str	r3, [r4, #28]
 8022492:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8022496:	2300      	movs	r3, #0
 8022498:	60e0      	str	r0, [r4, #12]
 802249a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802249e:	6223      	str	r3, [r4, #32]
 80224a0:	4620      	mov	r0, r4
 80224a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224a6:	f015 0f03 	tst.w	r5, #3
 80224aa:	d102      	bne.n	80224b2 <gmtime_r+0x132>
 80224ac:	fb06 5212 	mls	r2, r6, r2, r5
 80224b0:	b95a      	cbnz	r2, 80224ca <gmtime_r+0x14a>
 80224b2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80224b6:	fbb5 f2f6 	udiv	r2, r5, r6
 80224ba:	fb06 5212 	mls	r2, r6, r2, r5
 80224be:	fab2 f282 	clz	r2, r2
 80224c2:	0952      	lsrs	r2, r2, #5
 80224c4:	333b      	adds	r3, #59	; 0x3b
 80224c6:	4413      	add	r3, r2
 80224c8:	e7e2      	b.n	8022490 <gmtime_r+0x110>
 80224ca:	2201      	movs	r2, #1
 80224cc:	e7fa      	b.n	80224c4 <gmtime_r+0x144>
 80224ce:	bf00      	nop
 80224d0:	00015180 	.word	0x00015180
 80224d4:	00023ab1 	.word	0x00023ab1
 80224d8:	fffdc54f 	.word	0xfffdc54f
 80224dc:	00023ab0 	.word	0x00023ab0

080224e0 <_isatty_r>:
 80224e0:	b538      	push	{r3, r4, r5, lr}
 80224e2:	4d06      	ldr	r5, [pc, #24]	; (80224fc <_isatty_r+0x1c>)
 80224e4:	2300      	movs	r3, #0
 80224e6:	4604      	mov	r4, r0
 80224e8:	4608      	mov	r0, r1
 80224ea:	602b      	str	r3, [r5, #0]
 80224ec:	f7de fce0 	bl	8000eb0 <_isatty>
 80224f0:	1c43      	adds	r3, r0, #1
 80224f2:	d102      	bne.n	80224fa <_isatty_r+0x1a>
 80224f4:	682b      	ldr	r3, [r5, #0]
 80224f6:	b103      	cbz	r3, 80224fa <_isatty_r+0x1a>
 80224f8:	6023      	str	r3, [r4, #0]
 80224fa:	bd38      	pop	{r3, r4, r5, pc}
 80224fc:	20000ff4 	.word	0x20000ff4

08022500 <labs>:
 8022500:	2800      	cmp	r0, #0
 8022502:	bfb8      	it	lt
 8022504:	4240      	neglt	r0, r0
 8022506:	4770      	bx	lr

08022508 <_lseek_r>:
 8022508:	b538      	push	{r3, r4, r5, lr}
 802250a:	4d07      	ldr	r5, [pc, #28]	; (8022528 <_lseek_r+0x20>)
 802250c:	4604      	mov	r4, r0
 802250e:	4608      	mov	r0, r1
 8022510:	4611      	mov	r1, r2
 8022512:	2200      	movs	r2, #0
 8022514:	602a      	str	r2, [r5, #0]
 8022516:	461a      	mov	r2, r3
 8022518:	f7de fcd5 	bl	8000ec6 <_lseek>
 802251c:	1c43      	adds	r3, r0, #1
 802251e:	d102      	bne.n	8022526 <_lseek_r+0x1e>
 8022520:	682b      	ldr	r3, [r5, #0]
 8022522:	b103      	cbz	r3, 8022526 <_lseek_r+0x1e>
 8022524:	6023      	str	r3, [r4, #0]
 8022526:	bd38      	pop	{r3, r4, r5, pc}
 8022528:	20000ff4 	.word	0x20000ff4

0802252c <__ascii_mbtowc>:
 802252c:	b082      	sub	sp, #8
 802252e:	b901      	cbnz	r1, 8022532 <__ascii_mbtowc+0x6>
 8022530:	a901      	add	r1, sp, #4
 8022532:	b142      	cbz	r2, 8022546 <__ascii_mbtowc+0x1a>
 8022534:	b14b      	cbz	r3, 802254a <__ascii_mbtowc+0x1e>
 8022536:	7813      	ldrb	r3, [r2, #0]
 8022538:	600b      	str	r3, [r1, #0]
 802253a:	7812      	ldrb	r2, [r2, #0]
 802253c:	1e10      	subs	r0, r2, #0
 802253e:	bf18      	it	ne
 8022540:	2001      	movne	r0, #1
 8022542:	b002      	add	sp, #8
 8022544:	4770      	bx	lr
 8022546:	4610      	mov	r0, r2
 8022548:	e7fb      	b.n	8022542 <__ascii_mbtowc+0x16>
 802254a:	f06f 0001 	mvn.w	r0, #1
 802254e:	e7f8      	b.n	8022542 <__ascii_mbtowc+0x16>

08022550 <__malloc_lock>:
 8022550:	4801      	ldr	r0, [pc, #4]	; (8022558 <__malloc_lock+0x8>)
 8022552:	f7fe b974 	b.w	802083e <__retarget_lock_acquire_recursive>
 8022556:	bf00      	nop
 8022558:	20000fec 	.word	0x20000fec

0802255c <__malloc_unlock>:
 802255c:	4801      	ldr	r0, [pc, #4]	; (8022564 <__malloc_unlock+0x8>)
 802255e:	f7fe b970 	b.w	8020842 <__retarget_lock_release_recursive>
 8022562:	bf00      	nop
 8022564:	20000fec 	.word	0x20000fec

08022568 <_realloc_r>:
 8022568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802256a:	4607      	mov	r7, r0
 802256c:	4614      	mov	r4, r2
 802256e:	460e      	mov	r6, r1
 8022570:	b921      	cbnz	r1, 802257c <_realloc_r+0x14>
 8022572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022576:	4611      	mov	r1, r2
 8022578:	f7fe ba4e 	b.w	8020a18 <_malloc_r>
 802257c:	b922      	cbnz	r2, 8022588 <_realloc_r+0x20>
 802257e:	f7fe f9fb 	bl	8020978 <_free_r>
 8022582:	4625      	mov	r5, r4
 8022584:	4628      	mov	r0, r5
 8022586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022588:	f000 fd66 	bl	8023058 <_malloc_usable_size_r>
 802258c:	42a0      	cmp	r0, r4
 802258e:	d20f      	bcs.n	80225b0 <_realloc_r+0x48>
 8022590:	4621      	mov	r1, r4
 8022592:	4638      	mov	r0, r7
 8022594:	f7fe fa40 	bl	8020a18 <_malloc_r>
 8022598:	4605      	mov	r5, r0
 802259a:	2800      	cmp	r0, #0
 802259c:	d0f2      	beq.n	8022584 <_realloc_r+0x1c>
 802259e:	4631      	mov	r1, r6
 80225a0:	4622      	mov	r2, r4
 80225a2:	f7fe f9c3 	bl	802092c <memcpy>
 80225a6:	4631      	mov	r1, r6
 80225a8:	4638      	mov	r0, r7
 80225aa:	f7fe f9e5 	bl	8020978 <_free_r>
 80225ae:	e7e9      	b.n	8022584 <_realloc_r+0x1c>
 80225b0:	4635      	mov	r5, r6
 80225b2:	e7e7      	b.n	8022584 <_realloc_r+0x1c>

080225b4 <__ssputs_r>:
 80225b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225b8:	688e      	ldr	r6, [r1, #8]
 80225ba:	429e      	cmp	r6, r3
 80225bc:	4682      	mov	sl, r0
 80225be:	460c      	mov	r4, r1
 80225c0:	4690      	mov	r8, r2
 80225c2:	461f      	mov	r7, r3
 80225c4:	d838      	bhi.n	8022638 <__ssputs_r+0x84>
 80225c6:	898a      	ldrh	r2, [r1, #12]
 80225c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80225cc:	d032      	beq.n	8022634 <__ssputs_r+0x80>
 80225ce:	6825      	ldr	r5, [r4, #0]
 80225d0:	6909      	ldr	r1, [r1, #16]
 80225d2:	eba5 0901 	sub.w	r9, r5, r1
 80225d6:	6965      	ldr	r5, [r4, #20]
 80225d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80225dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80225e0:	3301      	adds	r3, #1
 80225e2:	444b      	add	r3, r9
 80225e4:	106d      	asrs	r5, r5, #1
 80225e6:	429d      	cmp	r5, r3
 80225e8:	bf38      	it	cc
 80225ea:	461d      	movcc	r5, r3
 80225ec:	0553      	lsls	r3, r2, #21
 80225ee:	d531      	bpl.n	8022654 <__ssputs_r+0xa0>
 80225f0:	4629      	mov	r1, r5
 80225f2:	f7fe fa11 	bl	8020a18 <_malloc_r>
 80225f6:	4606      	mov	r6, r0
 80225f8:	b950      	cbnz	r0, 8022610 <__ssputs_r+0x5c>
 80225fa:	230c      	movs	r3, #12
 80225fc:	f8ca 3000 	str.w	r3, [sl]
 8022600:	89a3      	ldrh	r3, [r4, #12]
 8022602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022606:	81a3      	strh	r3, [r4, #12]
 8022608:	f04f 30ff 	mov.w	r0, #4294967295
 802260c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022610:	6921      	ldr	r1, [r4, #16]
 8022612:	464a      	mov	r2, r9
 8022614:	f7fe f98a 	bl	802092c <memcpy>
 8022618:	89a3      	ldrh	r3, [r4, #12]
 802261a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802261e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022622:	81a3      	strh	r3, [r4, #12]
 8022624:	6126      	str	r6, [r4, #16]
 8022626:	6165      	str	r5, [r4, #20]
 8022628:	444e      	add	r6, r9
 802262a:	eba5 0509 	sub.w	r5, r5, r9
 802262e:	6026      	str	r6, [r4, #0]
 8022630:	60a5      	str	r5, [r4, #8]
 8022632:	463e      	mov	r6, r7
 8022634:	42be      	cmp	r6, r7
 8022636:	d900      	bls.n	802263a <__ssputs_r+0x86>
 8022638:	463e      	mov	r6, r7
 802263a:	4632      	mov	r2, r6
 802263c:	6820      	ldr	r0, [r4, #0]
 802263e:	4641      	mov	r1, r8
 8022640:	f000 fcf0 	bl	8023024 <memmove>
 8022644:	68a3      	ldr	r3, [r4, #8]
 8022646:	6822      	ldr	r2, [r4, #0]
 8022648:	1b9b      	subs	r3, r3, r6
 802264a:	4432      	add	r2, r6
 802264c:	60a3      	str	r3, [r4, #8]
 802264e:	6022      	str	r2, [r4, #0]
 8022650:	2000      	movs	r0, #0
 8022652:	e7db      	b.n	802260c <__ssputs_r+0x58>
 8022654:	462a      	mov	r2, r5
 8022656:	f7ff ff87 	bl	8022568 <_realloc_r>
 802265a:	4606      	mov	r6, r0
 802265c:	2800      	cmp	r0, #0
 802265e:	d1e1      	bne.n	8022624 <__ssputs_r+0x70>
 8022660:	6921      	ldr	r1, [r4, #16]
 8022662:	4650      	mov	r0, sl
 8022664:	f7fe f988 	bl	8020978 <_free_r>
 8022668:	e7c7      	b.n	80225fa <__ssputs_r+0x46>
	...

0802266c <_svfiprintf_r>:
 802266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022670:	4698      	mov	r8, r3
 8022672:	898b      	ldrh	r3, [r1, #12]
 8022674:	061b      	lsls	r3, r3, #24
 8022676:	b09d      	sub	sp, #116	; 0x74
 8022678:	4607      	mov	r7, r0
 802267a:	460d      	mov	r5, r1
 802267c:	4614      	mov	r4, r2
 802267e:	d50e      	bpl.n	802269e <_svfiprintf_r+0x32>
 8022680:	690b      	ldr	r3, [r1, #16]
 8022682:	b963      	cbnz	r3, 802269e <_svfiprintf_r+0x32>
 8022684:	2140      	movs	r1, #64	; 0x40
 8022686:	f7fe f9c7 	bl	8020a18 <_malloc_r>
 802268a:	6028      	str	r0, [r5, #0]
 802268c:	6128      	str	r0, [r5, #16]
 802268e:	b920      	cbnz	r0, 802269a <_svfiprintf_r+0x2e>
 8022690:	230c      	movs	r3, #12
 8022692:	603b      	str	r3, [r7, #0]
 8022694:	f04f 30ff 	mov.w	r0, #4294967295
 8022698:	e0d1      	b.n	802283e <_svfiprintf_r+0x1d2>
 802269a:	2340      	movs	r3, #64	; 0x40
 802269c:	616b      	str	r3, [r5, #20]
 802269e:	2300      	movs	r3, #0
 80226a0:	9309      	str	r3, [sp, #36]	; 0x24
 80226a2:	2320      	movs	r3, #32
 80226a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80226a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80226ac:	2330      	movs	r3, #48	; 0x30
 80226ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022858 <_svfiprintf_r+0x1ec>
 80226b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80226b6:	f04f 0901 	mov.w	r9, #1
 80226ba:	4623      	mov	r3, r4
 80226bc:	469a      	mov	sl, r3
 80226be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226c2:	b10a      	cbz	r2, 80226c8 <_svfiprintf_r+0x5c>
 80226c4:	2a25      	cmp	r2, #37	; 0x25
 80226c6:	d1f9      	bne.n	80226bc <_svfiprintf_r+0x50>
 80226c8:	ebba 0b04 	subs.w	fp, sl, r4
 80226cc:	d00b      	beq.n	80226e6 <_svfiprintf_r+0x7a>
 80226ce:	465b      	mov	r3, fp
 80226d0:	4622      	mov	r2, r4
 80226d2:	4629      	mov	r1, r5
 80226d4:	4638      	mov	r0, r7
 80226d6:	f7ff ff6d 	bl	80225b4 <__ssputs_r>
 80226da:	3001      	adds	r0, #1
 80226dc:	f000 80aa 	beq.w	8022834 <_svfiprintf_r+0x1c8>
 80226e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80226e2:	445a      	add	r2, fp
 80226e4:	9209      	str	r2, [sp, #36]	; 0x24
 80226e6:	f89a 3000 	ldrb.w	r3, [sl]
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	f000 80a2 	beq.w	8022834 <_svfiprintf_r+0x1c8>
 80226f0:	2300      	movs	r3, #0
 80226f2:	f04f 32ff 	mov.w	r2, #4294967295
 80226f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80226fa:	f10a 0a01 	add.w	sl, sl, #1
 80226fe:	9304      	str	r3, [sp, #16]
 8022700:	9307      	str	r3, [sp, #28]
 8022702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022706:	931a      	str	r3, [sp, #104]	; 0x68
 8022708:	4654      	mov	r4, sl
 802270a:	2205      	movs	r2, #5
 802270c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022710:	4851      	ldr	r0, [pc, #324]	; (8022858 <_svfiprintf_r+0x1ec>)
 8022712:	f7dd fda5 	bl	8000260 <memchr>
 8022716:	9a04      	ldr	r2, [sp, #16]
 8022718:	b9d8      	cbnz	r0, 8022752 <_svfiprintf_r+0xe6>
 802271a:	06d0      	lsls	r0, r2, #27
 802271c:	bf44      	itt	mi
 802271e:	2320      	movmi	r3, #32
 8022720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022724:	0711      	lsls	r1, r2, #28
 8022726:	bf44      	itt	mi
 8022728:	232b      	movmi	r3, #43	; 0x2b
 802272a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802272e:	f89a 3000 	ldrb.w	r3, [sl]
 8022732:	2b2a      	cmp	r3, #42	; 0x2a
 8022734:	d015      	beq.n	8022762 <_svfiprintf_r+0xf6>
 8022736:	9a07      	ldr	r2, [sp, #28]
 8022738:	4654      	mov	r4, sl
 802273a:	2000      	movs	r0, #0
 802273c:	f04f 0c0a 	mov.w	ip, #10
 8022740:	4621      	mov	r1, r4
 8022742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022746:	3b30      	subs	r3, #48	; 0x30
 8022748:	2b09      	cmp	r3, #9
 802274a:	d94e      	bls.n	80227ea <_svfiprintf_r+0x17e>
 802274c:	b1b0      	cbz	r0, 802277c <_svfiprintf_r+0x110>
 802274e:	9207      	str	r2, [sp, #28]
 8022750:	e014      	b.n	802277c <_svfiprintf_r+0x110>
 8022752:	eba0 0308 	sub.w	r3, r0, r8
 8022756:	fa09 f303 	lsl.w	r3, r9, r3
 802275a:	4313      	orrs	r3, r2
 802275c:	9304      	str	r3, [sp, #16]
 802275e:	46a2      	mov	sl, r4
 8022760:	e7d2      	b.n	8022708 <_svfiprintf_r+0x9c>
 8022762:	9b03      	ldr	r3, [sp, #12]
 8022764:	1d19      	adds	r1, r3, #4
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	9103      	str	r1, [sp, #12]
 802276a:	2b00      	cmp	r3, #0
 802276c:	bfbb      	ittet	lt
 802276e:	425b      	neglt	r3, r3
 8022770:	f042 0202 	orrlt.w	r2, r2, #2
 8022774:	9307      	strge	r3, [sp, #28]
 8022776:	9307      	strlt	r3, [sp, #28]
 8022778:	bfb8      	it	lt
 802277a:	9204      	strlt	r2, [sp, #16]
 802277c:	7823      	ldrb	r3, [r4, #0]
 802277e:	2b2e      	cmp	r3, #46	; 0x2e
 8022780:	d10c      	bne.n	802279c <_svfiprintf_r+0x130>
 8022782:	7863      	ldrb	r3, [r4, #1]
 8022784:	2b2a      	cmp	r3, #42	; 0x2a
 8022786:	d135      	bne.n	80227f4 <_svfiprintf_r+0x188>
 8022788:	9b03      	ldr	r3, [sp, #12]
 802278a:	1d1a      	adds	r2, r3, #4
 802278c:	681b      	ldr	r3, [r3, #0]
 802278e:	9203      	str	r2, [sp, #12]
 8022790:	2b00      	cmp	r3, #0
 8022792:	bfb8      	it	lt
 8022794:	f04f 33ff 	movlt.w	r3, #4294967295
 8022798:	3402      	adds	r4, #2
 802279a:	9305      	str	r3, [sp, #20]
 802279c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022868 <_svfiprintf_r+0x1fc>
 80227a0:	7821      	ldrb	r1, [r4, #0]
 80227a2:	2203      	movs	r2, #3
 80227a4:	4650      	mov	r0, sl
 80227a6:	f7dd fd5b 	bl	8000260 <memchr>
 80227aa:	b140      	cbz	r0, 80227be <_svfiprintf_r+0x152>
 80227ac:	2340      	movs	r3, #64	; 0x40
 80227ae:	eba0 000a 	sub.w	r0, r0, sl
 80227b2:	fa03 f000 	lsl.w	r0, r3, r0
 80227b6:	9b04      	ldr	r3, [sp, #16]
 80227b8:	4303      	orrs	r3, r0
 80227ba:	3401      	adds	r4, #1
 80227bc:	9304      	str	r3, [sp, #16]
 80227be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227c2:	4826      	ldr	r0, [pc, #152]	; (802285c <_svfiprintf_r+0x1f0>)
 80227c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80227c8:	2206      	movs	r2, #6
 80227ca:	f7dd fd49 	bl	8000260 <memchr>
 80227ce:	2800      	cmp	r0, #0
 80227d0:	d038      	beq.n	8022844 <_svfiprintf_r+0x1d8>
 80227d2:	4b23      	ldr	r3, [pc, #140]	; (8022860 <_svfiprintf_r+0x1f4>)
 80227d4:	bb1b      	cbnz	r3, 802281e <_svfiprintf_r+0x1b2>
 80227d6:	9b03      	ldr	r3, [sp, #12]
 80227d8:	3307      	adds	r3, #7
 80227da:	f023 0307 	bic.w	r3, r3, #7
 80227de:	3308      	adds	r3, #8
 80227e0:	9303      	str	r3, [sp, #12]
 80227e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227e4:	4433      	add	r3, r6
 80227e6:	9309      	str	r3, [sp, #36]	; 0x24
 80227e8:	e767      	b.n	80226ba <_svfiprintf_r+0x4e>
 80227ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80227ee:	460c      	mov	r4, r1
 80227f0:	2001      	movs	r0, #1
 80227f2:	e7a5      	b.n	8022740 <_svfiprintf_r+0xd4>
 80227f4:	2300      	movs	r3, #0
 80227f6:	3401      	adds	r4, #1
 80227f8:	9305      	str	r3, [sp, #20]
 80227fa:	4619      	mov	r1, r3
 80227fc:	f04f 0c0a 	mov.w	ip, #10
 8022800:	4620      	mov	r0, r4
 8022802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022806:	3a30      	subs	r2, #48	; 0x30
 8022808:	2a09      	cmp	r2, #9
 802280a:	d903      	bls.n	8022814 <_svfiprintf_r+0x1a8>
 802280c:	2b00      	cmp	r3, #0
 802280e:	d0c5      	beq.n	802279c <_svfiprintf_r+0x130>
 8022810:	9105      	str	r1, [sp, #20]
 8022812:	e7c3      	b.n	802279c <_svfiprintf_r+0x130>
 8022814:	fb0c 2101 	mla	r1, ip, r1, r2
 8022818:	4604      	mov	r4, r0
 802281a:	2301      	movs	r3, #1
 802281c:	e7f0      	b.n	8022800 <_svfiprintf_r+0x194>
 802281e:	ab03      	add	r3, sp, #12
 8022820:	9300      	str	r3, [sp, #0]
 8022822:	462a      	mov	r2, r5
 8022824:	4b0f      	ldr	r3, [pc, #60]	; (8022864 <_svfiprintf_r+0x1f8>)
 8022826:	a904      	add	r1, sp, #16
 8022828:	4638      	mov	r0, r7
 802282a:	f3af 8000 	nop.w
 802282e:	1c42      	adds	r2, r0, #1
 8022830:	4606      	mov	r6, r0
 8022832:	d1d6      	bne.n	80227e2 <_svfiprintf_r+0x176>
 8022834:	89ab      	ldrh	r3, [r5, #12]
 8022836:	065b      	lsls	r3, r3, #25
 8022838:	f53f af2c 	bmi.w	8022694 <_svfiprintf_r+0x28>
 802283c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802283e:	b01d      	add	sp, #116	; 0x74
 8022840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022844:	ab03      	add	r3, sp, #12
 8022846:	9300      	str	r3, [sp, #0]
 8022848:	462a      	mov	r2, r5
 802284a:	4b06      	ldr	r3, [pc, #24]	; (8022864 <_svfiprintf_r+0x1f8>)
 802284c:	a904      	add	r1, sp, #16
 802284e:	4638      	mov	r0, r7
 8022850:	f000 f9d4 	bl	8022bfc <_printf_i>
 8022854:	e7eb      	b.n	802282e <_svfiprintf_r+0x1c2>
 8022856:	bf00      	nop
 8022858:	08029ddf 	.word	0x08029ddf
 802285c:	08029de9 	.word	0x08029de9
 8022860:	00000000 	.word	0x00000000
 8022864:	080225b5 	.word	0x080225b5
 8022868:	08029de5 	.word	0x08029de5

0802286c <__sfputc_r>:
 802286c:	6893      	ldr	r3, [r2, #8]
 802286e:	3b01      	subs	r3, #1
 8022870:	2b00      	cmp	r3, #0
 8022872:	b410      	push	{r4}
 8022874:	6093      	str	r3, [r2, #8]
 8022876:	da08      	bge.n	802288a <__sfputc_r+0x1e>
 8022878:	6994      	ldr	r4, [r2, #24]
 802287a:	42a3      	cmp	r3, r4
 802287c:	db01      	blt.n	8022882 <__sfputc_r+0x16>
 802287e:	290a      	cmp	r1, #10
 8022880:	d103      	bne.n	802288a <__sfputc_r+0x1e>
 8022882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022886:	f7ff bb75 	b.w	8021f74 <__swbuf_r>
 802288a:	6813      	ldr	r3, [r2, #0]
 802288c:	1c58      	adds	r0, r3, #1
 802288e:	6010      	str	r0, [r2, #0]
 8022890:	7019      	strb	r1, [r3, #0]
 8022892:	4608      	mov	r0, r1
 8022894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022898:	4770      	bx	lr

0802289a <__sfputs_r>:
 802289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802289c:	4606      	mov	r6, r0
 802289e:	460f      	mov	r7, r1
 80228a0:	4614      	mov	r4, r2
 80228a2:	18d5      	adds	r5, r2, r3
 80228a4:	42ac      	cmp	r4, r5
 80228a6:	d101      	bne.n	80228ac <__sfputs_r+0x12>
 80228a8:	2000      	movs	r0, #0
 80228aa:	e007      	b.n	80228bc <__sfputs_r+0x22>
 80228ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228b0:	463a      	mov	r2, r7
 80228b2:	4630      	mov	r0, r6
 80228b4:	f7ff ffda 	bl	802286c <__sfputc_r>
 80228b8:	1c43      	adds	r3, r0, #1
 80228ba:	d1f3      	bne.n	80228a4 <__sfputs_r+0xa>
 80228bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080228c0 <_vfiprintf_r>:
 80228c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228c4:	460d      	mov	r5, r1
 80228c6:	b09d      	sub	sp, #116	; 0x74
 80228c8:	4614      	mov	r4, r2
 80228ca:	4698      	mov	r8, r3
 80228cc:	4606      	mov	r6, r0
 80228ce:	b118      	cbz	r0, 80228d8 <_vfiprintf_r+0x18>
 80228d0:	6983      	ldr	r3, [r0, #24]
 80228d2:	b90b      	cbnz	r3, 80228d8 <_vfiprintf_r+0x18>
 80228d4:	f7fd fc00 	bl	80200d8 <__sinit>
 80228d8:	4b89      	ldr	r3, [pc, #548]	; (8022b00 <_vfiprintf_r+0x240>)
 80228da:	429d      	cmp	r5, r3
 80228dc:	d11b      	bne.n	8022916 <_vfiprintf_r+0x56>
 80228de:	6875      	ldr	r5, [r6, #4]
 80228e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228e2:	07d9      	lsls	r1, r3, #31
 80228e4:	d405      	bmi.n	80228f2 <_vfiprintf_r+0x32>
 80228e6:	89ab      	ldrh	r3, [r5, #12]
 80228e8:	059a      	lsls	r2, r3, #22
 80228ea:	d402      	bmi.n	80228f2 <_vfiprintf_r+0x32>
 80228ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80228ee:	f7fd ffa6 	bl	802083e <__retarget_lock_acquire_recursive>
 80228f2:	89ab      	ldrh	r3, [r5, #12]
 80228f4:	071b      	lsls	r3, r3, #28
 80228f6:	d501      	bpl.n	80228fc <_vfiprintf_r+0x3c>
 80228f8:	692b      	ldr	r3, [r5, #16]
 80228fa:	b9eb      	cbnz	r3, 8022938 <_vfiprintf_r+0x78>
 80228fc:	4629      	mov	r1, r5
 80228fe:	4630      	mov	r0, r6
 8022900:	f7ff fb9c 	bl	802203c <__swsetup_r>
 8022904:	b1c0      	cbz	r0, 8022938 <_vfiprintf_r+0x78>
 8022906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022908:	07dc      	lsls	r4, r3, #31
 802290a:	d50e      	bpl.n	802292a <_vfiprintf_r+0x6a>
 802290c:	f04f 30ff 	mov.w	r0, #4294967295
 8022910:	b01d      	add	sp, #116	; 0x74
 8022912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022916:	4b7b      	ldr	r3, [pc, #492]	; (8022b04 <_vfiprintf_r+0x244>)
 8022918:	429d      	cmp	r5, r3
 802291a:	d101      	bne.n	8022920 <_vfiprintf_r+0x60>
 802291c:	68b5      	ldr	r5, [r6, #8]
 802291e:	e7df      	b.n	80228e0 <_vfiprintf_r+0x20>
 8022920:	4b79      	ldr	r3, [pc, #484]	; (8022b08 <_vfiprintf_r+0x248>)
 8022922:	429d      	cmp	r5, r3
 8022924:	bf08      	it	eq
 8022926:	68f5      	ldreq	r5, [r6, #12]
 8022928:	e7da      	b.n	80228e0 <_vfiprintf_r+0x20>
 802292a:	89ab      	ldrh	r3, [r5, #12]
 802292c:	0598      	lsls	r0, r3, #22
 802292e:	d4ed      	bmi.n	802290c <_vfiprintf_r+0x4c>
 8022930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022932:	f7fd ff86 	bl	8020842 <__retarget_lock_release_recursive>
 8022936:	e7e9      	b.n	802290c <_vfiprintf_r+0x4c>
 8022938:	2300      	movs	r3, #0
 802293a:	9309      	str	r3, [sp, #36]	; 0x24
 802293c:	2320      	movs	r3, #32
 802293e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022942:	f8cd 800c 	str.w	r8, [sp, #12]
 8022946:	2330      	movs	r3, #48	; 0x30
 8022948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022b0c <_vfiprintf_r+0x24c>
 802294c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022950:	f04f 0901 	mov.w	r9, #1
 8022954:	4623      	mov	r3, r4
 8022956:	469a      	mov	sl, r3
 8022958:	f813 2b01 	ldrb.w	r2, [r3], #1
 802295c:	b10a      	cbz	r2, 8022962 <_vfiprintf_r+0xa2>
 802295e:	2a25      	cmp	r2, #37	; 0x25
 8022960:	d1f9      	bne.n	8022956 <_vfiprintf_r+0x96>
 8022962:	ebba 0b04 	subs.w	fp, sl, r4
 8022966:	d00b      	beq.n	8022980 <_vfiprintf_r+0xc0>
 8022968:	465b      	mov	r3, fp
 802296a:	4622      	mov	r2, r4
 802296c:	4629      	mov	r1, r5
 802296e:	4630      	mov	r0, r6
 8022970:	f7ff ff93 	bl	802289a <__sfputs_r>
 8022974:	3001      	adds	r0, #1
 8022976:	f000 80aa 	beq.w	8022ace <_vfiprintf_r+0x20e>
 802297a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802297c:	445a      	add	r2, fp
 802297e:	9209      	str	r2, [sp, #36]	; 0x24
 8022980:	f89a 3000 	ldrb.w	r3, [sl]
 8022984:	2b00      	cmp	r3, #0
 8022986:	f000 80a2 	beq.w	8022ace <_vfiprintf_r+0x20e>
 802298a:	2300      	movs	r3, #0
 802298c:	f04f 32ff 	mov.w	r2, #4294967295
 8022990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022994:	f10a 0a01 	add.w	sl, sl, #1
 8022998:	9304      	str	r3, [sp, #16]
 802299a:	9307      	str	r3, [sp, #28]
 802299c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80229a0:	931a      	str	r3, [sp, #104]	; 0x68
 80229a2:	4654      	mov	r4, sl
 80229a4:	2205      	movs	r2, #5
 80229a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229aa:	4858      	ldr	r0, [pc, #352]	; (8022b0c <_vfiprintf_r+0x24c>)
 80229ac:	f7dd fc58 	bl	8000260 <memchr>
 80229b0:	9a04      	ldr	r2, [sp, #16]
 80229b2:	b9d8      	cbnz	r0, 80229ec <_vfiprintf_r+0x12c>
 80229b4:	06d1      	lsls	r1, r2, #27
 80229b6:	bf44      	itt	mi
 80229b8:	2320      	movmi	r3, #32
 80229ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229be:	0713      	lsls	r3, r2, #28
 80229c0:	bf44      	itt	mi
 80229c2:	232b      	movmi	r3, #43	; 0x2b
 80229c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229c8:	f89a 3000 	ldrb.w	r3, [sl]
 80229cc:	2b2a      	cmp	r3, #42	; 0x2a
 80229ce:	d015      	beq.n	80229fc <_vfiprintf_r+0x13c>
 80229d0:	9a07      	ldr	r2, [sp, #28]
 80229d2:	4654      	mov	r4, sl
 80229d4:	2000      	movs	r0, #0
 80229d6:	f04f 0c0a 	mov.w	ip, #10
 80229da:	4621      	mov	r1, r4
 80229dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229e0:	3b30      	subs	r3, #48	; 0x30
 80229e2:	2b09      	cmp	r3, #9
 80229e4:	d94e      	bls.n	8022a84 <_vfiprintf_r+0x1c4>
 80229e6:	b1b0      	cbz	r0, 8022a16 <_vfiprintf_r+0x156>
 80229e8:	9207      	str	r2, [sp, #28]
 80229ea:	e014      	b.n	8022a16 <_vfiprintf_r+0x156>
 80229ec:	eba0 0308 	sub.w	r3, r0, r8
 80229f0:	fa09 f303 	lsl.w	r3, r9, r3
 80229f4:	4313      	orrs	r3, r2
 80229f6:	9304      	str	r3, [sp, #16]
 80229f8:	46a2      	mov	sl, r4
 80229fa:	e7d2      	b.n	80229a2 <_vfiprintf_r+0xe2>
 80229fc:	9b03      	ldr	r3, [sp, #12]
 80229fe:	1d19      	adds	r1, r3, #4
 8022a00:	681b      	ldr	r3, [r3, #0]
 8022a02:	9103      	str	r1, [sp, #12]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	bfbb      	ittet	lt
 8022a08:	425b      	neglt	r3, r3
 8022a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8022a0e:	9307      	strge	r3, [sp, #28]
 8022a10:	9307      	strlt	r3, [sp, #28]
 8022a12:	bfb8      	it	lt
 8022a14:	9204      	strlt	r2, [sp, #16]
 8022a16:	7823      	ldrb	r3, [r4, #0]
 8022a18:	2b2e      	cmp	r3, #46	; 0x2e
 8022a1a:	d10c      	bne.n	8022a36 <_vfiprintf_r+0x176>
 8022a1c:	7863      	ldrb	r3, [r4, #1]
 8022a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8022a20:	d135      	bne.n	8022a8e <_vfiprintf_r+0x1ce>
 8022a22:	9b03      	ldr	r3, [sp, #12]
 8022a24:	1d1a      	adds	r2, r3, #4
 8022a26:	681b      	ldr	r3, [r3, #0]
 8022a28:	9203      	str	r2, [sp, #12]
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	bfb8      	it	lt
 8022a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8022a32:	3402      	adds	r4, #2
 8022a34:	9305      	str	r3, [sp, #20]
 8022a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022b1c <_vfiprintf_r+0x25c>
 8022a3a:	7821      	ldrb	r1, [r4, #0]
 8022a3c:	2203      	movs	r2, #3
 8022a3e:	4650      	mov	r0, sl
 8022a40:	f7dd fc0e 	bl	8000260 <memchr>
 8022a44:	b140      	cbz	r0, 8022a58 <_vfiprintf_r+0x198>
 8022a46:	2340      	movs	r3, #64	; 0x40
 8022a48:	eba0 000a 	sub.w	r0, r0, sl
 8022a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8022a50:	9b04      	ldr	r3, [sp, #16]
 8022a52:	4303      	orrs	r3, r0
 8022a54:	3401      	adds	r4, #1
 8022a56:	9304      	str	r3, [sp, #16]
 8022a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a5c:	482c      	ldr	r0, [pc, #176]	; (8022b10 <_vfiprintf_r+0x250>)
 8022a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022a62:	2206      	movs	r2, #6
 8022a64:	f7dd fbfc 	bl	8000260 <memchr>
 8022a68:	2800      	cmp	r0, #0
 8022a6a:	d03f      	beq.n	8022aec <_vfiprintf_r+0x22c>
 8022a6c:	4b29      	ldr	r3, [pc, #164]	; (8022b14 <_vfiprintf_r+0x254>)
 8022a6e:	bb1b      	cbnz	r3, 8022ab8 <_vfiprintf_r+0x1f8>
 8022a70:	9b03      	ldr	r3, [sp, #12]
 8022a72:	3307      	adds	r3, #7
 8022a74:	f023 0307 	bic.w	r3, r3, #7
 8022a78:	3308      	adds	r3, #8
 8022a7a:	9303      	str	r3, [sp, #12]
 8022a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a7e:	443b      	add	r3, r7
 8022a80:	9309      	str	r3, [sp, #36]	; 0x24
 8022a82:	e767      	b.n	8022954 <_vfiprintf_r+0x94>
 8022a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8022a88:	460c      	mov	r4, r1
 8022a8a:	2001      	movs	r0, #1
 8022a8c:	e7a5      	b.n	80229da <_vfiprintf_r+0x11a>
 8022a8e:	2300      	movs	r3, #0
 8022a90:	3401      	adds	r4, #1
 8022a92:	9305      	str	r3, [sp, #20]
 8022a94:	4619      	mov	r1, r3
 8022a96:	f04f 0c0a 	mov.w	ip, #10
 8022a9a:	4620      	mov	r0, r4
 8022a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022aa0:	3a30      	subs	r2, #48	; 0x30
 8022aa2:	2a09      	cmp	r2, #9
 8022aa4:	d903      	bls.n	8022aae <_vfiprintf_r+0x1ee>
 8022aa6:	2b00      	cmp	r3, #0
 8022aa8:	d0c5      	beq.n	8022a36 <_vfiprintf_r+0x176>
 8022aaa:	9105      	str	r1, [sp, #20]
 8022aac:	e7c3      	b.n	8022a36 <_vfiprintf_r+0x176>
 8022aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ab2:	4604      	mov	r4, r0
 8022ab4:	2301      	movs	r3, #1
 8022ab6:	e7f0      	b.n	8022a9a <_vfiprintf_r+0x1da>
 8022ab8:	ab03      	add	r3, sp, #12
 8022aba:	9300      	str	r3, [sp, #0]
 8022abc:	462a      	mov	r2, r5
 8022abe:	4b16      	ldr	r3, [pc, #88]	; (8022b18 <_vfiprintf_r+0x258>)
 8022ac0:	a904      	add	r1, sp, #16
 8022ac2:	4630      	mov	r0, r6
 8022ac4:	f3af 8000 	nop.w
 8022ac8:	4607      	mov	r7, r0
 8022aca:	1c78      	adds	r0, r7, #1
 8022acc:	d1d6      	bne.n	8022a7c <_vfiprintf_r+0x1bc>
 8022ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022ad0:	07d9      	lsls	r1, r3, #31
 8022ad2:	d405      	bmi.n	8022ae0 <_vfiprintf_r+0x220>
 8022ad4:	89ab      	ldrh	r3, [r5, #12]
 8022ad6:	059a      	lsls	r2, r3, #22
 8022ad8:	d402      	bmi.n	8022ae0 <_vfiprintf_r+0x220>
 8022ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022adc:	f7fd feb1 	bl	8020842 <__retarget_lock_release_recursive>
 8022ae0:	89ab      	ldrh	r3, [r5, #12]
 8022ae2:	065b      	lsls	r3, r3, #25
 8022ae4:	f53f af12 	bmi.w	802290c <_vfiprintf_r+0x4c>
 8022ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022aea:	e711      	b.n	8022910 <_vfiprintf_r+0x50>
 8022aec:	ab03      	add	r3, sp, #12
 8022aee:	9300      	str	r3, [sp, #0]
 8022af0:	462a      	mov	r2, r5
 8022af2:	4b09      	ldr	r3, [pc, #36]	; (8022b18 <_vfiprintf_r+0x258>)
 8022af4:	a904      	add	r1, sp, #16
 8022af6:	4630      	mov	r0, r6
 8022af8:	f000 f880 	bl	8022bfc <_printf_i>
 8022afc:	e7e4      	b.n	8022ac8 <_vfiprintf_r+0x208>
 8022afe:	bf00      	nop
 8022b00:	08029860 	.word	0x08029860
 8022b04:	08029880 	.word	0x08029880
 8022b08:	08029840 	.word	0x08029840
 8022b0c:	08029ddf 	.word	0x08029ddf
 8022b10:	08029de9 	.word	0x08029de9
 8022b14:	00000000 	.word	0x00000000
 8022b18:	0802289b 	.word	0x0802289b
 8022b1c:	08029de5 	.word	0x08029de5

08022b20 <_printf_common>:
 8022b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b24:	4616      	mov	r6, r2
 8022b26:	4699      	mov	r9, r3
 8022b28:	688a      	ldr	r2, [r1, #8]
 8022b2a:	690b      	ldr	r3, [r1, #16]
 8022b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022b30:	4293      	cmp	r3, r2
 8022b32:	bfb8      	it	lt
 8022b34:	4613      	movlt	r3, r2
 8022b36:	6033      	str	r3, [r6, #0]
 8022b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022b3c:	4607      	mov	r7, r0
 8022b3e:	460c      	mov	r4, r1
 8022b40:	b10a      	cbz	r2, 8022b46 <_printf_common+0x26>
 8022b42:	3301      	adds	r3, #1
 8022b44:	6033      	str	r3, [r6, #0]
 8022b46:	6823      	ldr	r3, [r4, #0]
 8022b48:	0699      	lsls	r1, r3, #26
 8022b4a:	bf42      	ittt	mi
 8022b4c:	6833      	ldrmi	r3, [r6, #0]
 8022b4e:	3302      	addmi	r3, #2
 8022b50:	6033      	strmi	r3, [r6, #0]
 8022b52:	6825      	ldr	r5, [r4, #0]
 8022b54:	f015 0506 	ands.w	r5, r5, #6
 8022b58:	d106      	bne.n	8022b68 <_printf_common+0x48>
 8022b5a:	f104 0a19 	add.w	sl, r4, #25
 8022b5e:	68e3      	ldr	r3, [r4, #12]
 8022b60:	6832      	ldr	r2, [r6, #0]
 8022b62:	1a9b      	subs	r3, r3, r2
 8022b64:	42ab      	cmp	r3, r5
 8022b66:	dc26      	bgt.n	8022bb6 <_printf_common+0x96>
 8022b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022b6c:	1e13      	subs	r3, r2, #0
 8022b6e:	6822      	ldr	r2, [r4, #0]
 8022b70:	bf18      	it	ne
 8022b72:	2301      	movne	r3, #1
 8022b74:	0692      	lsls	r2, r2, #26
 8022b76:	d42b      	bmi.n	8022bd0 <_printf_common+0xb0>
 8022b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022b7c:	4649      	mov	r1, r9
 8022b7e:	4638      	mov	r0, r7
 8022b80:	47c0      	blx	r8
 8022b82:	3001      	adds	r0, #1
 8022b84:	d01e      	beq.n	8022bc4 <_printf_common+0xa4>
 8022b86:	6823      	ldr	r3, [r4, #0]
 8022b88:	68e5      	ldr	r5, [r4, #12]
 8022b8a:	6832      	ldr	r2, [r6, #0]
 8022b8c:	f003 0306 	and.w	r3, r3, #6
 8022b90:	2b04      	cmp	r3, #4
 8022b92:	bf08      	it	eq
 8022b94:	1aad      	subeq	r5, r5, r2
 8022b96:	68a3      	ldr	r3, [r4, #8]
 8022b98:	6922      	ldr	r2, [r4, #16]
 8022b9a:	bf0c      	ite	eq
 8022b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022ba0:	2500      	movne	r5, #0
 8022ba2:	4293      	cmp	r3, r2
 8022ba4:	bfc4      	itt	gt
 8022ba6:	1a9b      	subgt	r3, r3, r2
 8022ba8:	18ed      	addgt	r5, r5, r3
 8022baa:	2600      	movs	r6, #0
 8022bac:	341a      	adds	r4, #26
 8022bae:	42b5      	cmp	r5, r6
 8022bb0:	d11a      	bne.n	8022be8 <_printf_common+0xc8>
 8022bb2:	2000      	movs	r0, #0
 8022bb4:	e008      	b.n	8022bc8 <_printf_common+0xa8>
 8022bb6:	2301      	movs	r3, #1
 8022bb8:	4652      	mov	r2, sl
 8022bba:	4649      	mov	r1, r9
 8022bbc:	4638      	mov	r0, r7
 8022bbe:	47c0      	blx	r8
 8022bc0:	3001      	adds	r0, #1
 8022bc2:	d103      	bne.n	8022bcc <_printf_common+0xac>
 8022bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8022bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bcc:	3501      	adds	r5, #1
 8022bce:	e7c6      	b.n	8022b5e <_printf_common+0x3e>
 8022bd0:	18e1      	adds	r1, r4, r3
 8022bd2:	1c5a      	adds	r2, r3, #1
 8022bd4:	2030      	movs	r0, #48	; 0x30
 8022bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022bda:	4422      	add	r2, r4
 8022bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022be4:	3302      	adds	r3, #2
 8022be6:	e7c7      	b.n	8022b78 <_printf_common+0x58>
 8022be8:	2301      	movs	r3, #1
 8022bea:	4622      	mov	r2, r4
 8022bec:	4649      	mov	r1, r9
 8022bee:	4638      	mov	r0, r7
 8022bf0:	47c0      	blx	r8
 8022bf2:	3001      	adds	r0, #1
 8022bf4:	d0e6      	beq.n	8022bc4 <_printf_common+0xa4>
 8022bf6:	3601      	adds	r6, #1
 8022bf8:	e7d9      	b.n	8022bae <_printf_common+0x8e>
	...

08022bfc <_printf_i>:
 8022bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022c00:	460c      	mov	r4, r1
 8022c02:	4691      	mov	r9, r2
 8022c04:	7e27      	ldrb	r7, [r4, #24]
 8022c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022c08:	2f78      	cmp	r7, #120	; 0x78
 8022c0a:	4680      	mov	r8, r0
 8022c0c:	469a      	mov	sl, r3
 8022c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022c12:	d807      	bhi.n	8022c24 <_printf_i+0x28>
 8022c14:	2f62      	cmp	r7, #98	; 0x62
 8022c16:	d80a      	bhi.n	8022c2e <_printf_i+0x32>
 8022c18:	2f00      	cmp	r7, #0
 8022c1a:	f000 80d8 	beq.w	8022dce <_printf_i+0x1d2>
 8022c1e:	2f58      	cmp	r7, #88	; 0x58
 8022c20:	f000 80a3 	beq.w	8022d6a <_printf_i+0x16e>
 8022c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022c2c:	e03a      	b.n	8022ca4 <_printf_i+0xa8>
 8022c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022c32:	2b15      	cmp	r3, #21
 8022c34:	d8f6      	bhi.n	8022c24 <_printf_i+0x28>
 8022c36:	a001      	add	r0, pc, #4	; (adr r0, 8022c3c <_printf_i+0x40>)
 8022c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022c3c:	08022c95 	.word	0x08022c95
 8022c40:	08022ca9 	.word	0x08022ca9
 8022c44:	08022c25 	.word	0x08022c25
 8022c48:	08022c25 	.word	0x08022c25
 8022c4c:	08022c25 	.word	0x08022c25
 8022c50:	08022c25 	.word	0x08022c25
 8022c54:	08022ca9 	.word	0x08022ca9
 8022c58:	08022c25 	.word	0x08022c25
 8022c5c:	08022c25 	.word	0x08022c25
 8022c60:	08022c25 	.word	0x08022c25
 8022c64:	08022c25 	.word	0x08022c25
 8022c68:	08022db5 	.word	0x08022db5
 8022c6c:	08022cd9 	.word	0x08022cd9
 8022c70:	08022d97 	.word	0x08022d97
 8022c74:	08022c25 	.word	0x08022c25
 8022c78:	08022c25 	.word	0x08022c25
 8022c7c:	08022dd7 	.word	0x08022dd7
 8022c80:	08022c25 	.word	0x08022c25
 8022c84:	08022cd9 	.word	0x08022cd9
 8022c88:	08022c25 	.word	0x08022c25
 8022c8c:	08022c25 	.word	0x08022c25
 8022c90:	08022d9f 	.word	0x08022d9f
 8022c94:	680b      	ldr	r3, [r1, #0]
 8022c96:	1d1a      	adds	r2, r3, #4
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	600a      	str	r2, [r1, #0]
 8022c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022ca4:	2301      	movs	r3, #1
 8022ca6:	e0a3      	b.n	8022df0 <_printf_i+0x1f4>
 8022ca8:	6825      	ldr	r5, [r4, #0]
 8022caa:	6808      	ldr	r0, [r1, #0]
 8022cac:	062e      	lsls	r6, r5, #24
 8022cae:	f100 0304 	add.w	r3, r0, #4
 8022cb2:	d50a      	bpl.n	8022cca <_printf_i+0xce>
 8022cb4:	6805      	ldr	r5, [r0, #0]
 8022cb6:	600b      	str	r3, [r1, #0]
 8022cb8:	2d00      	cmp	r5, #0
 8022cba:	da03      	bge.n	8022cc4 <_printf_i+0xc8>
 8022cbc:	232d      	movs	r3, #45	; 0x2d
 8022cbe:	426d      	negs	r5, r5
 8022cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022cc4:	485e      	ldr	r0, [pc, #376]	; (8022e40 <_printf_i+0x244>)
 8022cc6:	230a      	movs	r3, #10
 8022cc8:	e019      	b.n	8022cfe <_printf_i+0x102>
 8022cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022cce:	6805      	ldr	r5, [r0, #0]
 8022cd0:	600b      	str	r3, [r1, #0]
 8022cd2:	bf18      	it	ne
 8022cd4:	b22d      	sxthne	r5, r5
 8022cd6:	e7ef      	b.n	8022cb8 <_printf_i+0xbc>
 8022cd8:	680b      	ldr	r3, [r1, #0]
 8022cda:	6825      	ldr	r5, [r4, #0]
 8022cdc:	1d18      	adds	r0, r3, #4
 8022cde:	6008      	str	r0, [r1, #0]
 8022ce0:	0628      	lsls	r0, r5, #24
 8022ce2:	d501      	bpl.n	8022ce8 <_printf_i+0xec>
 8022ce4:	681d      	ldr	r5, [r3, #0]
 8022ce6:	e002      	b.n	8022cee <_printf_i+0xf2>
 8022ce8:	0669      	lsls	r1, r5, #25
 8022cea:	d5fb      	bpl.n	8022ce4 <_printf_i+0xe8>
 8022cec:	881d      	ldrh	r5, [r3, #0]
 8022cee:	4854      	ldr	r0, [pc, #336]	; (8022e40 <_printf_i+0x244>)
 8022cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8022cf2:	bf0c      	ite	eq
 8022cf4:	2308      	moveq	r3, #8
 8022cf6:	230a      	movne	r3, #10
 8022cf8:	2100      	movs	r1, #0
 8022cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022cfe:	6866      	ldr	r6, [r4, #4]
 8022d00:	60a6      	str	r6, [r4, #8]
 8022d02:	2e00      	cmp	r6, #0
 8022d04:	bfa2      	ittt	ge
 8022d06:	6821      	ldrge	r1, [r4, #0]
 8022d08:	f021 0104 	bicge.w	r1, r1, #4
 8022d0c:	6021      	strge	r1, [r4, #0]
 8022d0e:	b90d      	cbnz	r5, 8022d14 <_printf_i+0x118>
 8022d10:	2e00      	cmp	r6, #0
 8022d12:	d04d      	beq.n	8022db0 <_printf_i+0x1b4>
 8022d14:	4616      	mov	r6, r2
 8022d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8022d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8022d1e:	5dc7      	ldrb	r7, [r0, r7]
 8022d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022d24:	462f      	mov	r7, r5
 8022d26:	42bb      	cmp	r3, r7
 8022d28:	460d      	mov	r5, r1
 8022d2a:	d9f4      	bls.n	8022d16 <_printf_i+0x11a>
 8022d2c:	2b08      	cmp	r3, #8
 8022d2e:	d10b      	bne.n	8022d48 <_printf_i+0x14c>
 8022d30:	6823      	ldr	r3, [r4, #0]
 8022d32:	07df      	lsls	r7, r3, #31
 8022d34:	d508      	bpl.n	8022d48 <_printf_i+0x14c>
 8022d36:	6923      	ldr	r3, [r4, #16]
 8022d38:	6861      	ldr	r1, [r4, #4]
 8022d3a:	4299      	cmp	r1, r3
 8022d3c:	bfde      	ittt	le
 8022d3e:	2330      	movle	r3, #48	; 0x30
 8022d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022d48:	1b92      	subs	r2, r2, r6
 8022d4a:	6122      	str	r2, [r4, #16]
 8022d4c:	f8cd a000 	str.w	sl, [sp]
 8022d50:	464b      	mov	r3, r9
 8022d52:	aa03      	add	r2, sp, #12
 8022d54:	4621      	mov	r1, r4
 8022d56:	4640      	mov	r0, r8
 8022d58:	f7ff fee2 	bl	8022b20 <_printf_common>
 8022d5c:	3001      	adds	r0, #1
 8022d5e:	d14c      	bne.n	8022dfa <_printf_i+0x1fe>
 8022d60:	f04f 30ff 	mov.w	r0, #4294967295
 8022d64:	b004      	add	sp, #16
 8022d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d6a:	4835      	ldr	r0, [pc, #212]	; (8022e40 <_printf_i+0x244>)
 8022d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022d70:	6823      	ldr	r3, [r4, #0]
 8022d72:	680e      	ldr	r6, [r1, #0]
 8022d74:	061f      	lsls	r7, r3, #24
 8022d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8022d7a:	600e      	str	r6, [r1, #0]
 8022d7c:	d514      	bpl.n	8022da8 <_printf_i+0x1ac>
 8022d7e:	07d9      	lsls	r1, r3, #31
 8022d80:	bf44      	itt	mi
 8022d82:	f043 0320 	orrmi.w	r3, r3, #32
 8022d86:	6023      	strmi	r3, [r4, #0]
 8022d88:	b91d      	cbnz	r5, 8022d92 <_printf_i+0x196>
 8022d8a:	6823      	ldr	r3, [r4, #0]
 8022d8c:	f023 0320 	bic.w	r3, r3, #32
 8022d90:	6023      	str	r3, [r4, #0]
 8022d92:	2310      	movs	r3, #16
 8022d94:	e7b0      	b.n	8022cf8 <_printf_i+0xfc>
 8022d96:	6823      	ldr	r3, [r4, #0]
 8022d98:	f043 0320 	orr.w	r3, r3, #32
 8022d9c:	6023      	str	r3, [r4, #0]
 8022d9e:	2378      	movs	r3, #120	; 0x78
 8022da0:	4828      	ldr	r0, [pc, #160]	; (8022e44 <_printf_i+0x248>)
 8022da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022da6:	e7e3      	b.n	8022d70 <_printf_i+0x174>
 8022da8:	065e      	lsls	r6, r3, #25
 8022daa:	bf48      	it	mi
 8022dac:	b2ad      	uxthmi	r5, r5
 8022dae:	e7e6      	b.n	8022d7e <_printf_i+0x182>
 8022db0:	4616      	mov	r6, r2
 8022db2:	e7bb      	b.n	8022d2c <_printf_i+0x130>
 8022db4:	680b      	ldr	r3, [r1, #0]
 8022db6:	6826      	ldr	r6, [r4, #0]
 8022db8:	6960      	ldr	r0, [r4, #20]
 8022dba:	1d1d      	adds	r5, r3, #4
 8022dbc:	600d      	str	r5, [r1, #0]
 8022dbe:	0635      	lsls	r5, r6, #24
 8022dc0:	681b      	ldr	r3, [r3, #0]
 8022dc2:	d501      	bpl.n	8022dc8 <_printf_i+0x1cc>
 8022dc4:	6018      	str	r0, [r3, #0]
 8022dc6:	e002      	b.n	8022dce <_printf_i+0x1d2>
 8022dc8:	0671      	lsls	r1, r6, #25
 8022dca:	d5fb      	bpl.n	8022dc4 <_printf_i+0x1c8>
 8022dcc:	8018      	strh	r0, [r3, #0]
 8022dce:	2300      	movs	r3, #0
 8022dd0:	6123      	str	r3, [r4, #16]
 8022dd2:	4616      	mov	r6, r2
 8022dd4:	e7ba      	b.n	8022d4c <_printf_i+0x150>
 8022dd6:	680b      	ldr	r3, [r1, #0]
 8022dd8:	1d1a      	adds	r2, r3, #4
 8022dda:	600a      	str	r2, [r1, #0]
 8022ddc:	681e      	ldr	r6, [r3, #0]
 8022dde:	6862      	ldr	r2, [r4, #4]
 8022de0:	2100      	movs	r1, #0
 8022de2:	4630      	mov	r0, r6
 8022de4:	f7dd fa3c 	bl	8000260 <memchr>
 8022de8:	b108      	cbz	r0, 8022dee <_printf_i+0x1f2>
 8022dea:	1b80      	subs	r0, r0, r6
 8022dec:	6060      	str	r0, [r4, #4]
 8022dee:	6863      	ldr	r3, [r4, #4]
 8022df0:	6123      	str	r3, [r4, #16]
 8022df2:	2300      	movs	r3, #0
 8022df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022df8:	e7a8      	b.n	8022d4c <_printf_i+0x150>
 8022dfa:	6923      	ldr	r3, [r4, #16]
 8022dfc:	4632      	mov	r2, r6
 8022dfe:	4649      	mov	r1, r9
 8022e00:	4640      	mov	r0, r8
 8022e02:	47d0      	blx	sl
 8022e04:	3001      	adds	r0, #1
 8022e06:	d0ab      	beq.n	8022d60 <_printf_i+0x164>
 8022e08:	6823      	ldr	r3, [r4, #0]
 8022e0a:	079b      	lsls	r3, r3, #30
 8022e0c:	d413      	bmi.n	8022e36 <_printf_i+0x23a>
 8022e0e:	68e0      	ldr	r0, [r4, #12]
 8022e10:	9b03      	ldr	r3, [sp, #12]
 8022e12:	4298      	cmp	r0, r3
 8022e14:	bfb8      	it	lt
 8022e16:	4618      	movlt	r0, r3
 8022e18:	e7a4      	b.n	8022d64 <_printf_i+0x168>
 8022e1a:	2301      	movs	r3, #1
 8022e1c:	4632      	mov	r2, r6
 8022e1e:	4649      	mov	r1, r9
 8022e20:	4640      	mov	r0, r8
 8022e22:	47d0      	blx	sl
 8022e24:	3001      	adds	r0, #1
 8022e26:	d09b      	beq.n	8022d60 <_printf_i+0x164>
 8022e28:	3501      	adds	r5, #1
 8022e2a:	68e3      	ldr	r3, [r4, #12]
 8022e2c:	9903      	ldr	r1, [sp, #12]
 8022e2e:	1a5b      	subs	r3, r3, r1
 8022e30:	42ab      	cmp	r3, r5
 8022e32:	dcf2      	bgt.n	8022e1a <_printf_i+0x21e>
 8022e34:	e7eb      	b.n	8022e0e <_printf_i+0x212>
 8022e36:	2500      	movs	r5, #0
 8022e38:	f104 0619 	add.w	r6, r4, #25
 8022e3c:	e7f5      	b.n	8022e2a <_printf_i+0x22e>
 8022e3e:	bf00      	nop
 8022e40:	08029df0 	.word	0x08029df0
 8022e44:	08029e01 	.word	0x08029e01

08022e48 <_putc_r>:
 8022e48:	b570      	push	{r4, r5, r6, lr}
 8022e4a:	460d      	mov	r5, r1
 8022e4c:	4614      	mov	r4, r2
 8022e4e:	4606      	mov	r6, r0
 8022e50:	b118      	cbz	r0, 8022e5a <_putc_r+0x12>
 8022e52:	6983      	ldr	r3, [r0, #24]
 8022e54:	b90b      	cbnz	r3, 8022e5a <_putc_r+0x12>
 8022e56:	f7fd f93f 	bl	80200d8 <__sinit>
 8022e5a:	4b1c      	ldr	r3, [pc, #112]	; (8022ecc <_putc_r+0x84>)
 8022e5c:	429c      	cmp	r4, r3
 8022e5e:	d124      	bne.n	8022eaa <_putc_r+0x62>
 8022e60:	6874      	ldr	r4, [r6, #4]
 8022e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e64:	07d8      	lsls	r0, r3, #31
 8022e66:	d405      	bmi.n	8022e74 <_putc_r+0x2c>
 8022e68:	89a3      	ldrh	r3, [r4, #12]
 8022e6a:	0599      	lsls	r1, r3, #22
 8022e6c:	d402      	bmi.n	8022e74 <_putc_r+0x2c>
 8022e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e70:	f7fd fce5 	bl	802083e <__retarget_lock_acquire_recursive>
 8022e74:	68a3      	ldr	r3, [r4, #8]
 8022e76:	3b01      	subs	r3, #1
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	60a3      	str	r3, [r4, #8]
 8022e7c:	da05      	bge.n	8022e8a <_putc_r+0x42>
 8022e7e:	69a2      	ldr	r2, [r4, #24]
 8022e80:	4293      	cmp	r3, r2
 8022e82:	db1c      	blt.n	8022ebe <_putc_r+0x76>
 8022e84:	b2eb      	uxtb	r3, r5
 8022e86:	2b0a      	cmp	r3, #10
 8022e88:	d019      	beq.n	8022ebe <_putc_r+0x76>
 8022e8a:	6823      	ldr	r3, [r4, #0]
 8022e8c:	1c5a      	adds	r2, r3, #1
 8022e8e:	6022      	str	r2, [r4, #0]
 8022e90:	701d      	strb	r5, [r3, #0]
 8022e92:	b2ed      	uxtb	r5, r5
 8022e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e96:	07da      	lsls	r2, r3, #31
 8022e98:	d405      	bmi.n	8022ea6 <_putc_r+0x5e>
 8022e9a:	89a3      	ldrh	r3, [r4, #12]
 8022e9c:	059b      	lsls	r3, r3, #22
 8022e9e:	d402      	bmi.n	8022ea6 <_putc_r+0x5e>
 8022ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ea2:	f7fd fcce 	bl	8020842 <__retarget_lock_release_recursive>
 8022ea6:	4628      	mov	r0, r5
 8022ea8:	bd70      	pop	{r4, r5, r6, pc}
 8022eaa:	4b09      	ldr	r3, [pc, #36]	; (8022ed0 <_putc_r+0x88>)
 8022eac:	429c      	cmp	r4, r3
 8022eae:	d101      	bne.n	8022eb4 <_putc_r+0x6c>
 8022eb0:	68b4      	ldr	r4, [r6, #8]
 8022eb2:	e7d6      	b.n	8022e62 <_putc_r+0x1a>
 8022eb4:	4b07      	ldr	r3, [pc, #28]	; (8022ed4 <_putc_r+0x8c>)
 8022eb6:	429c      	cmp	r4, r3
 8022eb8:	bf08      	it	eq
 8022eba:	68f4      	ldreq	r4, [r6, #12]
 8022ebc:	e7d1      	b.n	8022e62 <_putc_r+0x1a>
 8022ebe:	4629      	mov	r1, r5
 8022ec0:	4622      	mov	r2, r4
 8022ec2:	4630      	mov	r0, r6
 8022ec4:	f7ff f856 	bl	8021f74 <__swbuf_r>
 8022ec8:	4605      	mov	r5, r0
 8022eca:	e7e3      	b.n	8022e94 <_putc_r+0x4c>
 8022ecc:	08029860 	.word	0x08029860
 8022ed0:	08029880 	.word	0x08029880
 8022ed4:	08029840 	.word	0x08029840

08022ed8 <_read_r>:
 8022ed8:	b538      	push	{r3, r4, r5, lr}
 8022eda:	4d07      	ldr	r5, [pc, #28]	; (8022ef8 <_read_r+0x20>)
 8022edc:	4604      	mov	r4, r0
 8022ede:	4608      	mov	r0, r1
 8022ee0:	4611      	mov	r1, r2
 8022ee2:	2200      	movs	r2, #0
 8022ee4:	602a      	str	r2, [r5, #0]
 8022ee6:	461a      	mov	r2, r3
 8022ee8:	f7dd ff8d 	bl	8000e06 <_read>
 8022eec:	1c43      	adds	r3, r0, #1
 8022eee:	d102      	bne.n	8022ef6 <_read_r+0x1e>
 8022ef0:	682b      	ldr	r3, [r5, #0]
 8022ef2:	b103      	cbz	r3, 8022ef6 <_read_r+0x1e>
 8022ef4:	6023      	str	r3, [r4, #0]
 8022ef6:	bd38      	pop	{r3, r4, r5, pc}
 8022ef8:	20000ff4 	.word	0x20000ff4

08022efc <sniprintf>:
 8022efc:	b40c      	push	{r2, r3}
 8022efe:	b530      	push	{r4, r5, lr}
 8022f00:	4b17      	ldr	r3, [pc, #92]	; (8022f60 <sniprintf+0x64>)
 8022f02:	1e0c      	subs	r4, r1, #0
 8022f04:	681d      	ldr	r5, [r3, #0]
 8022f06:	b09d      	sub	sp, #116	; 0x74
 8022f08:	da08      	bge.n	8022f1c <sniprintf+0x20>
 8022f0a:	238b      	movs	r3, #139	; 0x8b
 8022f0c:	602b      	str	r3, [r5, #0]
 8022f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8022f12:	b01d      	add	sp, #116	; 0x74
 8022f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022f18:	b002      	add	sp, #8
 8022f1a:	4770      	bx	lr
 8022f1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022f20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022f24:	bf14      	ite	ne
 8022f26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022f2a:	4623      	moveq	r3, r4
 8022f2c:	9304      	str	r3, [sp, #16]
 8022f2e:	9307      	str	r3, [sp, #28]
 8022f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022f34:	9002      	str	r0, [sp, #8]
 8022f36:	9006      	str	r0, [sp, #24]
 8022f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022f3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022f3e:	ab21      	add	r3, sp, #132	; 0x84
 8022f40:	a902      	add	r1, sp, #8
 8022f42:	4628      	mov	r0, r5
 8022f44:	9301      	str	r3, [sp, #4]
 8022f46:	f7ff fb91 	bl	802266c <_svfiprintf_r>
 8022f4a:	1c43      	adds	r3, r0, #1
 8022f4c:	bfbc      	itt	lt
 8022f4e:	238b      	movlt	r3, #139	; 0x8b
 8022f50:	602b      	strlt	r3, [r5, #0]
 8022f52:	2c00      	cmp	r4, #0
 8022f54:	d0dd      	beq.n	8022f12 <sniprintf+0x16>
 8022f56:	9b02      	ldr	r3, [sp, #8]
 8022f58:	2200      	movs	r2, #0
 8022f5a:	701a      	strb	r2, [r3, #0]
 8022f5c:	e7d9      	b.n	8022f12 <sniprintf+0x16>
 8022f5e:	bf00      	nop
 8022f60:	20000108 	.word	0x20000108

08022f64 <siscanf>:
 8022f64:	b40e      	push	{r1, r2, r3}
 8022f66:	b510      	push	{r4, lr}
 8022f68:	b09f      	sub	sp, #124	; 0x7c
 8022f6a:	ac21      	add	r4, sp, #132	; 0x84
 8022f6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8022f70:	f854 2b04 	ldr.w	r2, [r4], #4
 8022f74:	9201      	str	r2, [sp, #4]
 8022f76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022f7a:	9004      	str	r0, [sp, #16]
 8022f7c:	9008      	str	r0, [sp, #32]
 8022f7e:	f7dd f95d 	bl	800023c <strlen>
 8022f82:	4b0c      	ldr	r3, [pc, #48]	; (8022fb4 <siscanf+0x50>)
 8022f84:	9005      	str	r0, [sp, #20]
 8022f86:	9009      	str	r0, [sp, #36]	; 0x24
 8022f88:	930d      	str	r3, [sp, #52]	; 0x34
 8022f8a:	480b      	ldr	r0, [pc, #44]	; (8022fb8 <siscanf+0x54>)
 8022f8c:	9a01      	ldr	r2, [sp, #4]
 8022f8e:	6800      	ldr	r0, [r0, #0]
 8022f90:	9403      	str	r4, [sp, #12]
 8022f92:	2300      	movs	r3, #0
 8022f94:	9311      	str	r3, [sp, #68]	; 0x44
 8022f96:	9316      	str	r3, [sp, #88]	; 0x58
 8022f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022f9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022fa0:	a904      	add	r1, sp, #16
 8022fa2:	4623      	mov	r3, r4
 8022fa4:	f000 f8ba 	bl	802311c <__ssvfiscanf_r>
 8022fa8:	b01f      	add	sp, #124	; 0x7c
 8022faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fae:	b003      	add	sp, #12
 8022fb0:	4770      	bx	lr
 8022fb2:	bf00      	nop
 8022fb4:	08020d13 	.word	0x08020d13
 8022fb8:	20000108 	.word	0x20000108

08022fbc <strcpy>:
 8022fbc:	4603      	mov	r3, r0
 8022fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022fc2:	f803 2b01 	strb.w	r2, [r3], #1
 8022fc6:	2a00      	cmp	r2, #0
 8022fc8:	d1f9      	bne.n	8022fbe <strcpy+0x2>
 8022fca:	4770      	bx	lr

08022fcc <strncmp>:
 8022fcc:	b510      	push	{r4, lr}
 8022fce:	b16a      	cbz	r2, 8022fec <strncmp+0x20>
 8022fd0:	3901      	subs	r1, #1
 8022fd2:	1884      	adds	r4, r0, r2
 8022fd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022fd8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022fdc:	4293      	cmp	r3, r2
 8022fde:	d103      	bne.n	8022fe8 <strncmp+0x1c>
 8022fe0:	42a0      	cmp	r0, r4
 8022fe2:	d001      	beq.n	8022fe8 <strncmp+0x1c>
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	d1f5      	bne.n	8022fd4 <strncmp+0x8>
 8022fe8:	1a98      	subs	r0, r3, r2
 8022fea:	bd10      	pop	{r4, pc}
 8022fec:	4610      	mov	r0, r2
 8022fee:	e7fc      	b.n	8022fea <strncmp+0x1e>

08022ff0 <__ascii_wctomb>:
 8022ff0:	b149      	cbz	r1, 8023006 <__ascii_wctomb+0x16>
 8022ff2:	2aff      	cmp	r2, #255	; 0xff
 8022ff4:	bf85      	ittet	hi
 8022ff6:	238a      	movhi	r3, #138	; 0x8a
 8022ff8:	6003      	strhi	r3, [r0, #0]
 8022ffa:	700a      	strbls	r2, [r1, #0]
 8022ffc:	f04f 30ff 	movhi.w	r0, #4294967295
 8023000:	bf98      	it	ls
 8023002:	2001      	movls	r0, #1
 8023004:	4770      	bx	lr
 8023006:	4608      	mov	r0, r1
 8023008:	4770      	bx	lr
	...

0802300c <__env_lock>:
 802300c:	4801      	ldr	r0, [pc, #4]	; (8023014 <__env_lock+0x8>)
 802300e:	f7fd bc16 	b.w	802083e <__retarget_lock_acquire_recursive>
 8023012:	bf00      	nop
 8023014:	20000fea 	.word	0x20000fea

08023018 <__env_unlock>:
 8023018:	4801      	ldr	r0, [pc, #4]	; (8023020 <__env_unlock+0x8>)
 802301a:	f7fd bc12 	b.w	8020842 <__retarget_lock_release_recursive>
 802301e:	bf00      	nop
 8023020:	20000fea 	.word	0x20000fea

08023024 <memmove>:
 8023024:	4288      	cmp	r0, r1
 8023026:	b510      	push	{r4, lr}
 8023028:	eb01 0402 	add.w	r4, r1, r2
 802302c:	d902      	bls.n	8023034 <memmove+0x10>
 802302e:	4284      	cmp	r4, r0
 8023030:	4623      	mov	r3, r4
 8023032:	d807      	bhi.n	8023044 <memmove+0x20>
 8023034:	1e43      	subs	r3, r0, #1
 8023036:	42a1      	cmp	r1, r4
 8023038:	d008      	beq.n	802304c <memmove+0x28>
 802303a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802303e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023042:	e7f8      	b.n	8023036 <memmove+0x12>
 8023044:	4402      	add	r2, r0
 8023046:	4601      	mov	r1, r0
 8023048:	428a      	cmp	r2, r1
 802304a:	d100      	bne.n	802304e <memmove+0x2a>
 802304c:	bd10      	pop	{r4, pc}
 802304e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023056:	e7f7      	b.n	8023048 <memmove+0x24>

08023058 <_malloc_usable_size_r>:
 8023058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802305c:	1f18      	subs	r0, r3, #4
 802305e:	2b00      	cmp	r3, #0
 8023060:	bfbc      	itt	lt
 8023062:	580b      	ldrlt	r3, [r1, r0]
 8023064:	18c0      	addlt	r0, r0, r3
 8023066:	4770      	bx	lr

08023068 <_sungetc_r>:
 8023068:	b538      	push	{r3, r4, r5, lr}
 802306a:	1c4b      	adds	r3, r1, #1
 802306c:	4614      	mov	r4, r2
 802306e:	d103      	bne.n	8023078 <_sungetc_r+0x10>
 8023070:	f04f 35ff 	mov.w	r5, #4294967295
 8023074:	4628      	mov	r0, r5
 8023076:	bd38      	pop	{r3, r4, r5, pc}
 8023078:	8993      	ldrh	r3, [r2, #12]
 802307a:	f023 0320 	bic.w	r3, r3, #32
 802307e:	8193      	strh	r3, [r2, #12]
 8023080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023082:	6852      	ldr	r2, [r2, #4]
 8023084:	b2cd      	uxtb	r5, r1
 8023086:	b18b      	cbz	r3, 80230ac <_sungetc_r+0x44>
 8023088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802308a:	4293      	cmp	r3, r2
 802308c:	dd08      	ble.n	80230a0 <_sungetc_r+0x38>
 802308e:	6823      	ldr	r3, [r4, #0]
 8023090:	1e5a      	subs	r2, r3, #1
 8023092:	6022      	str	r2, [r4, #0]
 8023094:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023098:	6863      	ldr	r3, [r4, #4]
 802309a:	3301      	adds	r3, #1
 802309c:	6063      	str	r3, [r4, #4]
 802309e:	e7e9      	b.n	8023074 <_sungetc_r+0xc>
 80230a0:	4621      	mov	r1, r4
 80230a2:	f000 fb39 	bl	8023718 <__submore>
 80230a6:	2800      	cmp	r0, #0
 80230a8:	d0f1      	beq.n	802308e <_sungetc_r+0x26>
 80230aa:	e7e1      	b.n	8023070 <_sungetc_r+0x8>
 80230ac:	6921      	ldr	r1, [r4, #16]
 80230ae:	6823      	ldr	r3, [r4, #0]
 80230b0:	b151      	cbz	r1, 80230c8 <_sungetc_r+0x60>
 80230b2:	4299      	cmp	r1, r3
 80230b4:	d208      	bcs.n	80230c8 <_sungetc_r+0x60>
 80230b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80230ba:	42a9      	cmp	r1, r5
 80230bc:	d104      	bne.n	80230c8 <_sungetc_r+0x60>
 80230be:	3b01      	subs	r3, #1
 80230c0:	3201      	adds	r2, #1
 80230c2:	6023      	str	r3, [r4, #0]
 80230c4:	6062      	str	r2, [r4, #4]
 80230c6:	e7d5      	b.n	8023074 <_sungetc_r+0xc>
 80230c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80230cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230d0:	6363      	str	r3, [r4, #52]	; 0x34
 80230d2:	2303      	movs	r3, #3
 80230d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80230d6:	4623      	mov	r3, r4
 80230d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80230dc:	6023      	str	r3, [r4, #0]
 80230de:	2301      	movs	r3, #1
 80230e0:	e7dc      	b.n	802309c <_sungetc_r+0x34>

080230e2 <__ssrefill_r>:
 80230e2:	b510      	push	{r4, lr}
 80230e4:	460c      	mov	r4, r1
 80230e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80230e8:	b169      	cbz	r1, 8023106 <__ssrefill_r+0x24>
 80230ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230ee:	4299      	cmp	r1, r3
 80230f0:	d001      	beq.n	80230f6 <__ssrefill_r+0x14>
 80230f2:	f7fd fc41 	bl	8020978 <_free_r>
 80230f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80230f8:	6063      	str	r3, [r4, #4]
 80230fa:	2000      	movs	r0, #0
 80230fc:	6360      	str	r0, [r4, #52]	; 0x34
 80230fe:	b113      	cbz	r3, 8023106 <__ssrefill_r+0x24>
 8023100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023102:	6023      	str	r3, [r4, #0]
 8023104:	bd10      	pop	{r4, pc}
 8023106:	6923      	ldr	r3, [r4, #16]
 8023108:	6023      	str	r3, [r4, #0]
 802310a:	2300      	movs	r3, #0
 802310c:	6063      	str	r3, [r4, #4]
 802310e:	89a3      	ldrh	r3, [r4, #12]
 8023110:	f043 0320 	orr.w	r3, r3, #32
 8023114:	81a3      	strh	r3, [r4, #12]
 8023116:	f04f 30ff 	mov.w	r0, #4294967295
 802311a:	e7f3      	b.n	8023104 <__ssrefill_r+0x22>

0802311c <__ssvfiscanf_r>:
 802311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023120:	460c      	mov	r4, r1
 8023122:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023126:	2100      	movs	r1, #0
 8023128:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802312c:	49b2      	ldr	r1, [pc, #712]	; (80233f8 <__ssvfiscanf_r+0x2dc>)
 802312e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023130:	f10d 0804 	add.w	r8, sp, #4
 8023134:	49b1      	ldr	r1, [pc, #708]	; (80233fc <__ssvfiscanf_r+0x2e0>)
 8023136:	4fb2      	ldr	r7, [pc, #712]	; (8023400 <__ssvfiscanf_r+0x2e4>)
 8023138:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8023404 <__ssvfiscanf_r+0x2e8>
 802313c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023140:	4606      	mov	r6, r0
 8023142:	91a1      	str	r1, [sp, #644]	; 0x284
 8023144:	9300      	str	r3, [sp, #0]
 8023146:	f892 a000 	ldrb.w	sl, [r2]
 802314a:	f1ba 0f00 	cmp.w	sl, #0
 802314e:	f000 8151 	beq.w	80233f4 <__ssvfiscanf_r+0x2d8>
 8023152:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8023156:	f013 0308 	ands.w	r3, r3, #8
 802315a:	f102 0501 	add.w	r5, r2, #1
 802315e:	d019      	beq.n	8023194 <__ssvfiscanf_r+0x78>
 8023160:	6863      	ldr	r3, [r4, #4]
 8023162:	2b00      	cmp	r3, #0
 8023164:	dd0f      	ble.n	8023186 <__ssvfiscanf_r+0x6a>
 8023166:	6823      	ldr	r3, [r4, #0]
 8023168:	781a      	ldrb	r2, [r3, #0]
 802316a:	5cba      	ldrb	r2, [r7, r2]
 802316c:	0712      	lsls	r2, r2, #28
 802316e:	d401      	bmi.n	8023174 <__ssvfiscanf_r+0x58>
 8023170:	462a      	mov	r2, r5
 8023172:	e7e8      	b.n	8023146 <__ssvfiscanf_r+0x2a>
 8023174:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023176:	3201      	adds	r2, #1
 8023178:	9245      	str	r2, [sp, #276]	; 0x114
 802317a:	6862      	ldr	r2, [r4, #4]
 802317c:	3301      	adds	r3, #1
 802317e:	3a01      	subs	r2, #1
 8023180:	6062      	str	r2, [r4, #4]
 8023182:	6023      	str	r3, [r4, #0]
 8023184:	e7ec      	b.n	8023160 <__ssvfiscanf_r+0x44>
 8023186:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023188:	4621      	mov	r1, r4
 802318a:	4630      	mov	r0, r6
 802318c:	4798      	blx	r3
 802318e:	2800      	cmp	r0, #0
 8023190:	d0e9      	beq.n	8023166 <__ssvfiscanf_r+0x4a>
 8023192:	e7ed      	b.n	8023170 <__ssvfiscanf_r+0x54>
 8023194:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8023198:	f040 8083 	bne.w	80232a2 <__ssvfiscanf_r+0x186>
 802319c:	9341      	str	r3, [sp, #260]	; 0x104
 802319e:	9343      	str	r3, [sp, #268]	; 0x10c
 80231a0:	7853      	ldrb	r3, [r2, #1]
 80231a2:	2b2a      	cmp	r3, #42	; 0x2a
 80231a4:	bf02      	ittt	eq
 80231a6:	2310      	moveq	r3, #16
 80231a8:	1c95      	addeq	r5, r2, #2
 80231aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80231ac:	220a      	movs	r2, #10
 80231ae:	46ab      	mov	fp, r5
 80231b0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80231b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80231b8:	2b09      	cmp	r3, #9
 80231ba:	d91d      	bls.n	80231f8 <__ssvfiscanf_r+0xdc>
 80231bc:	4891      	ldr	r0, [pc, #580]	; (8023404 <__ssvfiscanf_r+0x2e8>)
 80231be:	2203      	movs	r2, #3
 80231c0:	f7dd f84e 	bl	8000260 <memchr>
 80231c4:	b140      	cbz	r0, 80231d8 <__ssvfiscanf_r+0xbc>
 80231c6:	2301      	movs	r3, #1
 80231c8:	eba0 0009 	sub.w	r0, r0, r9
 80231cc:	fa03 f000 	lsl.w	r0, r3, r0
 80231d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80231d2:	4318      	orrs	r0, r3
 80231d4:	9041      	str	r0, [sp, #260]	; 0x104
 80231d6:	465d      	mov	r5, fp
 80231d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80231dc:	2b78      	cmp	r3, #120	; 0x78
 80231de:	d806      	bhi.n	80231ee <__ssvfiscanf_r+0xd2>
 80231e0:	2b57      	cmp	r3, #87	; 0x57
 80231e2:	d810      	bhi.n	8023206 <__ssvfiscanf_r+0xea>
 80231e4:	2b25      	cmp	r3, #37	; 0x25
 80231e6:	d05c      	beq.n	80232a2 <__ssvfiscanf_r+0x186>
 80231e8:	d856      	bhi.n	8023298 <__ssvfiscanf_r+0x17c>
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	d074      	beq.n	80232d8 <__ssvfiscanf_r+0x1bc>
 80231ee:	2303      	movs	r3, #3
 80231f0:	9347      	str	r3, [sp, #284]	; 0x11c
 80231f2:	230a      	movs	r3, #10
 80231f4:	9342      	str	r3, [sp, #264]	; 0x108
 80231f6:	e081      	b.n	80232fc <__ssvfiscanf_r+0x1e0>
 80231f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80231fa:	fb02 1303 	mla	r3, r2, r3, r1
 80231fe:	3b30      	subs	r3, #48	; 0x30
 8023200:	9343      	str	r3, [sp, #268]	; 0x10c
 8023202:	465d      	mov	r5, fp
 8023204:	e7d3      	b.n	80231ae <__ssvfiscanf_r+0x92>
 8023206:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802320a:	2a20      	cmp	r2, #32
 802320c:	d8ef      	bhi.n	80231ee <__ssvfiscanf_r+0xd2>
 802320e:	a101      	add	r1, pc, #4	; (adr r1, 8023214 <__ssvfiscanf_r+0xf8>)
 8023210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023214:	080232e7 	.word	0x080232e7
 8023218:	080231ef 	.word	0x080231ef
 802321c:	080231ef 	.word	0x080231ef
 8023220:	08023345 	.word	0x08023345
 8023224:	080231ef 	.word	0x080231ef
 8023228:	080231ef 	.word	0x080231ef
 802322c:	080231ef 	.word	0x080231ef
 8023230:	080231ef 	.word	0x080231ef
 8023234:	080231ef 	.word	0x080231ef
 8023238:	080231ef 	.word	0x080231ef
 802323c:	080231ef 	.word	0x080231ef
 8023240:	0802335b 	.word	0x0802335b
 8023244:	08023331 	.word	0x08023331
 8023248:	0802329f 	.word	0x0802329f
 802324c:	0802329f 	.word	0x0802329f
 8023250:	0802329f 	.word	0x0802329f
 8023254:	080231ef 	.word	0x080231ef
 8023258:	08023335 	.word	0x08023335
 802325c:	080231ef 	.word	0x080231ef
 8023260:	080231ef 	.word	0x080231ef
 8023264:	080231ef 	.word	0x080231ef
 8023268:	080231ef 	.word	0x080231ef
 802326c:	0802336b 	.word	0x0802336b
 8023270:	0802333d 	.word	0x0802333d
 8023274:	080232df 	.word	0x080232df
 8023278:	080231ef 	.word	0x080231ef
 802327c:	080231ef 	.word	0x080231ef
 8023280:	08023367 	.word	0x08023367
 8023284:	080231ef 	.word	0x080231ef
 8023288:	08023331 	.word	0x08023331
 802328c:	080231ef 	.word	0x080231ef
 8023290:	080231ef 	.word	0x080231ef
 8023294:	080232e7 	.word	0x080232e7
 8023298:	3b45      	subs	r3, #69	; 0x45
 802329a:	2b02      	cmp	r3, #2
 802329c:	d8a7      	bhi.n	80231ee <__ssvfiscanf_r+0xd2>
 802329e:	2305      	movs	r3, #5
 80232a0:	e02b      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 80232a2:	6863      	ldr	r3, [r4, #4]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	dd0d      	ble.n	80232c4 <__ssvfiscanf_r+0x1a8>
 80232a8:	6823      	ldr	r3, [r4, #0]
 80232aa:	781a      	ldrb	r2, [r3, #0]
 80232ac:	4552      	cmp	r2, sl
 80232ae:	f040 80a1 	bne.w	80233f4 <__ssvfiscanf_r+0x2d8>
 80232b2:	3301      	adds	r3, #1
 80232b4:	6862      	ldr	r2, [r4, #4]
 80232b6:	6023      	str	r3, [r4, #0]
 80232b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80232ba:	3a01      	subs	r2, #1
 80232bc:	3301      	adds	r3, #1
 80232be:	6062      	str	r2, [r4, #4]
 80232c0:	9345      	str	r3, [sp, #276]	; 0x114
 80232c2:	e755      	b.n	8023170 <__ssvfiscanf_r+0x54>
 80232c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80232c6:	4621      	mov	r1, r4
 80232c8:	4630      	mov	r0, r6
 80232ca:	4798      	blx	r3
 80232cc:	2800      	cmp	r0, #0
 80232ce:	d0eb      	beq.n	80232a8 <__ssvfiscanf_r+0x18c>
 80232d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80232d2:	2800      	cmp	r0, #0
 80232d4:	f040 8084 	bne.w	80233e0 <__ssvfiscanf_r+0x2c4>
 80232d8:	f04f 30ff 	mov.w	r0, #4294967295
 80232dc:	e086      	b.n	80233ec <__ssvfiscanf_r+0x2d0>
 80232de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80232e0:	f042 0220 	orr.w	r2, r2, #32
 80232e4:	9241      	str	r2, [sp, #260]	; 0x104
 80232e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80232e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80232ec:	9241      	str	r2, [sp, #260]	; 0x104
 80232ee:	2210      	movs	r2, #16
 80232f0:	2b6f      	cmp	r3, #111	; 0x6f
 80232f2:	9242      	str	r2, [sp, #264]	; 0x108
 80232f4:	bf34      	ite	cc
 80232f6:	2303      	movcc	r3, #3
 80232f8:	2304      	movcs	r3, #4
 80232fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80232fc:	6863      	ldr	r3, [r4, #4]
 80232fe:	2b00      	cmp	r3, #0
 8023300:	dd41      	ble.n	8023386 <__ssvfiscanf_r+0x26a>
 8023302:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023304:	0659      	lsls	r1, r3, #25
 8023306:	d404      	bmi.n	8023312 <__ssvfiscanf_r+0x1f6>
 8023308:	6823      	ldr	r3, [r4, #0]
 802330a:	781a      	ldrb	r2, [r3, #0]
 802330c:	5cba      	ldrb	r2, [r7, r2]
 802330e:	0712      	lsls	r2, r2, #28
 8023310:	d440      	bmi.n	8023394 <__ssvfiscanf_r+0x278>
 8023312:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023314:	2b02      	cmp	r3, #2
 8023316:	dc4f      	bgt.n	80233b8 <__ssvfiscanf_r+0x29c>
 8023318:	466b      	mov	r3, sp
 802331a:	4622      	mov	r2, r4
 802331c:	a941      	add	r1, sp, #260	; 0x104
 802331e:	4630      	mov	r0, r6
 8023320:	f000 f874 	bl	802340c <_scanf_chars>
 8023324:	2801      	cmp	r0, #1
 8023326:	d065      	beq.n	80233f4 <__ssvfiscanf_r+0x2d8>
 8023328:	2802      	cmp	r0, #2
 802332a:	f47f af21 	bne.w	8023170 <__ssvfiscanf_r+0x54>
 802332e:	e7cf      	b.n	80232d0 <__ssvfiscanf_r+0x1b4>
 8023330:	220a      	movs	r2, #10
 8023332:	e7dd      	b.n	80232f0 <__ssvfiscanf_r+0x1d4>
 8023334:	2300      	movs	r3, #0
 8023336:	9342      	str	r3, [sp, #264]	; 0x108
 8023338:	2303      	movs	r3, #3
 802333a:	e7de      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 802333c:	2308      	movs	r3, #8
 802333e:	9342      	str	r3, [sp, #264]	; 0x108
 8023340:	2304      	movs	r3, #4
 8023342:	e7da      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 8023344:	4629      	mov	r1, r5
 8023346:	4640      	mov	r0, r8
 8023348:	f000 f9ac 	bl	80236a4 <__sccl>
 802334c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802334e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023352:	9341      	str	r3, [sp, #260]	; 0x104
 8023354:	4605      	mov	r5, r0
 8023356:	2301      	movs	r3, #1
 8023358:	e7cf      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 802335a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023360:	9341      	str	r3, [sp, #260]	; 0x104
 8023362:	2300      	movs	r3, #0
 8023364:	e7c9      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 8023366:	2302      	movs	r3, #2
 8023368:	e7c7      	b.n	80232fa <__ssvfiscanf_r+0x1de>
 802336a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802336c:	06c3      	lsls	r3, r0, #27
 802336e:	f53f aeff 	bmi.w	8023170 <__ssvfiscanf_r+0x54>
 8023372:	9b00      	ldr	r3, [sp, #0]
 8023374:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023376:	1d19      	adds	r1, r3, #4
 8023378:	9100      	str	r1, [sp, #0]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	07c0      	lsls	r0, r0, #31
 802337e:	bf4c      	ite	mi
 8023380:	801a      	strhmi	r2, [r3, #0]
 8023382:	601a      	strpl	r2, [r3, #0]
 8023384:	e6f4      	b.n	8023170 <__ssvfiscanf_r+0x54>
 8023386:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023388:	4621      	mov	r1, r4
 802338a:	4630      	mov	r0, r6
 802338c:	4798      	blx	r3
 802338e:	2800      	cmp	r0, #0
 8023390:	d0b7      	beq.n	8023302 <__ssvfiscanf_r+0x1e6>
 8023392:	e79d      	b.n	80232d0 <__ssvfiscanf_r+0x1b4>
 8023394:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023396:	3201      	adds	r2, #1
 8023398:	9245      	str	r2, [sp, #276]	; 0x114
 802339a:	6862      	ldr	r2, [r4, #4]
 802339c:	3a01      	subs	r2, #1
 802339e:	2a00      	cmp	r2, #0
 80233a0:	6062      	str	r2, [r4, #4]
 80233a2:	dd02      	ble.n	80233aa <__ssvfiscanf_r+0x28e>
 80233a4:	3301      	adds	r3, #1
 80233a6:	6023      	str	r3, [r4, #0]
 80233a8:	e7ae      	b.n	8023308 <__ssvfiscanf_r+0x1ec>
 80233aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80233ac:	4621      	mov	r1, r4
 80233ae:	4630      	mov	r0, r6
 80233b0:	4798      	blx	r3
 80233b2:	2800      	cmp	r0, #0
 80233b4:	d0a8      	beq.n	8023308 <__ssvfiscanf_r+0x1ec>
 80233b6:	e78b      	b.n	80232d0 <__ssvfiscanf_r+0x1b4>
 80233b8:	2b04      	cmp	r3, #4
 80233ba:	dc06      	bgt.n	80233ca <__ssvfiscanf_r+0x2ae>
 80233bc:	466b      	mov	r3, sp
 80233be:	4622      	mov	r2, r4
 80233c0:	a941      	add	r1, sp, #260	; 0x104
 80233c2:	4630      	mov	r0, r6
 80233c4:	f000 f87a 	bl	80234bc <_scanf_i>
 80233c8:	e7ac      	b.n	8023324 <__ssvfiscanf_r+0x208>
 80233ca:	4b0f      	ldr	r3, [pc, #60]	; (8023408 <__ssvfiscanf_r+0x2ec>)
 80233cc:	2b00      	cmp	r3, #0
 80233ce:	f43f aecf 	beq.w	8023170 <__ssvfiscanf_r+0x54>
 80233d2:	466b      	mov	r3, sp
 80233d4:	4622      	mov	r2, r4
 80233d6:	a941      	add	r1, sp, #260	; 0x104
 80233d8:	4630      	mov	r0, r6
 80233da:	f3af 8000 	nop.w
 80233de:	e7a1      	b.n	8023324 <__ssvfiscanf_r+0x208>
 80233e0:	89a3      	ldrh	r3, [r4, #12]
 80233e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80233e6:	bf18      	it	ne
 80233e8:	f04f 30ff 	movne.w	r0, #4294967295
 80233ec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80233f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80233f6:	e7f9      	b.n	80233ec <__ssvfiscanf_r+0x2d0>
 80233f8:	08023069 	.word	0x08023069
 80233fc:	080230e3 	.word	0x080230e3
 8023400:	08029cd5 	.word	0x08029cd5
 8023404:	08029de5 	.word	0x08029de5
 8023408:	00000000 	.word	0x00000000

0802340c <_scanf_chars>:
 802340c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023410:	4615      	mov	r5, r2
 8023412:	688a      	ldr	r2, [r1, #8]
 8023414:	4680      	mov	r8, r0
 8023416:	460c      	mov	r4, r1
 8023418:	b932      	cbnz	r2, 8023428 <_scanf_chars+0x1c>
 802341a:	698a      	ldr	r2, [r1, #24]
 802341c:	2a00      	cmp	r2, #0
 802341e:	bf0c      	ite	eq
 8023420:	2201      	moveq	r2, #1
 8023422:	f04f 32ff 	movne.w	r2, #4294967295
 8023426:	608a      	str	r2, [r1, #8]
 8023428:	6822      	ldr	r2, [r4, #0]
 802342a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80234b8 <_scanf_chars+0xac>
 802342e:	06d1      	lsls	r1, r2, #27
 8023430:	bf5f      	itttt	pl
 8023432:	681a      	ldrpl	r2, [r3, #0]
 8023434:	1d11      	addpl	r1, r2, #4
 8023436:	6019      	strpl	r1, [r3, #0]
 8023438:	6816      	ldrpl	r6, [r2, #0]
 802343a:	2700      	movs	r7, #0
 802343c:	69a0      	ldr	r0, [r4, #24]
 802343e:	b188      	cbz	r0, 8023464 <_scanf_chars+0x58>
 8023440:	2801      	cmp	r0, #1
 8023442:	d107      	bne.n	8023454 <_scanf_chars+0x48>
 8023444:	682b      	ldr	r3, [r5, #0]
 8023446:	781a      	ldrb	r2, [r3, #0]
 8023448:	6963      	ldr	r3, [r4, #20]
 802344a:	5c9b      	ldrb	r3, [r3, r2]
 802344c:	b953      	cbnz	r3, 8023464 <_scanf_chars+0x58>
 802344e:	bb27      	cbnz	r7, 802349a <_scanf_chars+0x8e>
 8023450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023454:	2802      	cmp	r0, #2
 8023456:	d120      	bne.n	802349a <_scanf_chars+0x8e>
 8023458:	682b      	ldr	r3, [r5, #0]
 802345a:	781b      	ldrb	r3, [r3, #0]
 802345c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8023460:	071b      	lsls	r3, r3, #28
 8023462:	d41a      	bmi.n	802349a <_scanf_chars+0x8e>
 8023464:	6823      	ldr	r3, [r4, #0]
 8023466:	06da      	lsls	r2, r3, #27
 8023468:	bf5e      	ittt	pl
 802346a:	682b      	ldrpl	r3, [r5, #0]
 802346c:	781b      	ldrbpl	r3, [r3, #0]
 802346e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023472:	682a      	ldr	r2, [r5, #0]
 8023474:	686b      	ldr	r3, [r5, #4]
 8023476:	3201      	adds	r2, #1
 8023478:	602a      	str	r2, [r5, #0]
 802347a:	68a2      	ldr	r2, [r4, #8]
 802347c:	3b01      	subs	r3, #1
 802347e:	3a01      	subs	r2, #1
 8023480:	606b      	str	r3, [r5, #4]
 8023482:	3701      	adds	r7, #1
 8023484:	60a2      	str	r2, [r4, #8]
 8023486:	b142      	cbz	r2, 802349a <_scanf_chars+0x8e>
 8023488:	2b00      	cmp	r3, #0
 802348a:	dcd7      	bgt.n	802343c <_scanf_chars+0x30>
 802348c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023490:	4629      	mov	r1, r5
 8023492:	4640      	mov	r0, r8
 8023494:	4798      	blx	r3
 8023496:	2800      	cmp	r0, #0
 8023498:	d0d0      	beq.n	802343c <_scanf_chars+0x30>
 802349a:	6823      	ldr	r3, [r4, #0]
 802349c:	f013 0310 	ands.w	r3, r3, #16
 80234a0:	d105      	bne.n	80234ae <_scanf_chars+0xa2>
 80234a2:	68e2      	ldr	r2, [r4, #12]
 80234a4:	3201      	adds	r2, #1
 80234a6:	60e2      	str	r2, [r4, #12]
 80234a8:	69a2      	ldr	r2, [r4, #24]
 80234aa:	b102      	cbz	r2, 80234ae <_scanf_chars+0xa2>
 80234ac:	7033      	strb	r3, [r6, #0]
 80234ae:	6923      	ldr	r3, [r4, #16]
 80234b0:	441f      	add	r7, r3
 80234b2:	6127      	str	r7, [r4, #16]
 80234b4:	2000      	movs	r0, #0
 80234b6:	e7cb      	b.n	8023450 <_scanf_chars+0x44>
 80234b8:	08029cd5 	.word	0x08029cd5

080234bc <_scanf_i>:
 80234bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234c0:	4698      	mov	r8, r3
 80234c2:	4b74      	ldr	r3, [pc, #464]	; (8023694 <_scanf_i+0x1d8>)
 80234c4:	460c      	mov	r4, r1
 80234c6:	4682      	mov	sl, r0
 80234c8:	4616      	mov	r6, r2
 80234ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80234ce:	b087      	sub	sp, #28
 80234d0:	ab03      	add	r3, sp, #12
 80234d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80234d6:	4b70      	ldr	r3, [pc, #448]	; (8023698 <_scanf_i+0x1dc>)
 80234d8:	69a1      	ldr	r1, [r4, #24]
 80234da:	4a70      	ldr	r2, [pc, #448]	; (802369c <_scanf_i+0x1e0>)
 80234dc:	2903      	cmp	r1, #3
 80234de:	bf18      	it	ne
 80234e0:	461a      	movne	r2, r3
 80234e2:	68a3      	ldr	r3, [r4, #8]
 80234e4:	9201      	str	r2, [sp, #4]
 80234e6:	1e5a      	subs	r2, r3, #1
 80234e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80234ec:	bf88      	it	hi
 80234ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80234f2:	4627      	mov	r7, r4
 80234f4:	bf82      	ittt	hi
 80234f6:	eb03 0905 	addhi.w	r9, r3, r5
 80234fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 80234fe:	60a3      	strhi	r3, [r4, #8]
 8023500:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023504:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023508:	bf98      	it	ls
 802350a:	f04f 0900 	movls.w	r9, #0
 802350e:	6023      	str	r3, [r4, #0]
 8023510:	463d      	mov	r5, r7
 8023512:	f04f 0b00 	mov.w	fp, #0
 8023516:	6831      	ldr	r1, [r6, #0]
 8023518:	ab03      	add	r3, sp, #12
 802351a:	7809      	ldrb	r1, [r1, #0]
 802351c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023520:	2202      	movs	r2, #2
 8023522:	f7dc fe9d 	bl	8000260 <memchr>
 8023526:	b328      	cbz	r0, 8023574 <_scanf_i+0xb8>
 8023528:	f1bb 0f01 	cmp.w	fp, #1
 802352c:	d159      	bne.n	80235e2 <_scanf_i+0x126>
 802352e:	6862      	ldr	r2, [r4, #4]
 8023530:	b92a      	cbnz	r2, 802353e <_scanf_i+0x82>
 8023532:	6822      	ldr	r2, [r4, #0]
 8023534:	2308      	movs	r3, #8
 8023536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802353a:	6063      	str	r3, [r4, #4]
 802353c:	6022      	str	r2, [r4, #0]
 802353e:	6822      	ldr	r2, [r4, #0]
 8023540:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8023544:	6022      	str	r2, [r4, #0]
 8023546:	68a2      	ldr	r2, [r4, #8]
 8023548:	1e51      	subs	r1, r2, #1
 802354a:	60a1      	str	r1, [r4, #8]
 802354c:	b192      	cbz	r2, 8023574 <_scanf_i+0xb8>
 802354e:	6832      	ldr	r2, [r6, #0]
 8023550:	1c51      	adds	r1, r2, #1
 8023552:	6031      	str	r1, [r6, #0]
 8023554:	7812      	ldrb	r2, [r2, #0]
 8023556:	f805 2b01 	strb.w	r2, [r5], #1
 802355a:	6872      	ldr	r2, [r6, #4]
 802355c:	3a01      	subs	r2, #1
 802355e:	2a00      	cmp	r2, #0
 8023560:	6072      	str	r2, [r6, #4]
 8023562:	dc07      	bgt.n	8023574 <_scanf_i+0xb8>
 8023564:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8023568:	4631      	mov	r1, r6
 802356a:	4650      	mov	r0, sl
 802356c:	4790      	blx	r2
 802356e:	2800      	cmp	r0, #0
 8023570:	f040 8085 	bne.w	802367e <_scanf_i+0x1c2>
 8023574:	f10b 0b01 	add.w	fp, fp, #1
 8023578:	f1bb 0f03 	cmp.w	fp, #3
 802357c:	d1cb      	bne.n	8023516 <_scanf_i+0x5a>
 802357e:	6863      	ldr	r3, [r4, #4]
 8023580:	b90b      	cbnz	r3, 8023586 <_scanf_i+0xca>
 8023582:	230a      	movs	r3, #10
 8023584:	6063      	str	r3, [r4, #4]
 8023586:	6863      	ldr	r3, [r4, #4]
 8023588:	4945      	ldr	r1, [pc, #276]	; (80236a0 <_scanf_i+0x1e4>)
 802358a:	6960      	ldr	r0, [r4, #20]
 802358c:	1ac9      	subs	r1, r1, r3
 802358e:	f000 f889 	bl	80236a4 <__sccl>
 8023592:	f04f 0b00 	mov.w	fp, #0
 8023596:	68a3      	ldr	r3, [r4, #8]
 8023598:	6822      	ldr	r2, [r4, #0]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d03d      	beq.n	802361a <_scanf_i+0x15e>
 802359e:	6831      	ldr	r1, [r6, #0]
 80235a0:	6960      	ldr	r0, [r4, #20]
 80235a2:	f891 c000 	ldrb.w	ip, [r1]
 80235a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80235aa:	2800      	cmp	r0, #0
 80235ac:	d035      	beq.n	802361a <_scanf_i+0x15e>
 80235ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80235b2:	d124      	bne.n	80235fe <_scanf_i+0x142>
 80235b4:	0510      	lsls	r0, r2, #20
 80235b6:	d522      	bpl.n	80235fe <_scanf_i+0x142>
 80235b8:	f10b 0b01 	add.w	fp, fp, #1
 80235bc:	f1b9 0f00 	cmp.w	r9, #0
 80235c0:	d003      	beq.n	80235ca <_scanf_i+0x10e>
 80235c2:	3301      	adds	r3, #1
 80235c4:	f109 39ff 	add.w	r9, r9, #4294967295
 80235c8:	60a3      	str	r3, [r4, #8]
 80235ca:	6873      	ldr	r3, [r6, #4]
 80235cc:	3b01      	subs	r3, #1
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	6073      	str	r3, [r6, #4]
 80235d2:	dd1b      	ble.n	802360c <_scanf_i+0x150>
 80235d4:	6833      	ldr	r3, [r6, #0]
 80235d6:	3301      	adds	r3, #1
 80235d8:	6033      	str	r3, [r6, #0]
 80235da:	68a3      	ldr	r3, [r4, #8]
 80235dc:	3b01      	subs	r3, #1
 80235de:	60a3      	str	r3, [r4, #8]
 80235e0:	e7d9      	b.n	8023596 <_scanf_i+0xda>
 80235e2:	f1bb 0f02 	cmp.w	fp, #2
 80235e6:	d1ae      	bne.n	8023546 <_scanf_i+0x8a>
 80235e8:	6822      	ldr	r2, [r4, #0]
 80235ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80235ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80235f2:	d1bf      	bne.n	8023574 <_scanf_i+0xb8>
 80235f4:	2310      	movs	r3, #16
 80235f6:	6063      	str	r3, [r4, #4]
 80235f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80235fc:	e7a2      	b.n	8023544 <_scanf_i+0x88>
 80235fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023602:	6022      	str	r2, [r4, #0]
 8023604:	780b      	ldrb	r3, [r1, #0]
 8023606:	f805 3b01 	strb.w	r3, [r5], #1
 802360a:	e7de      	b.n	80235ca <_scanf_i+0x10e>
 802360c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023610:	4631      	mov	r1, r6
 8023612:	4650      	mov	r0, sl
 8023614:	4798      	blx	r3
 8023616:	2800      	cmp	r0, #0
 8023618:	d0df      	beq.n	80235da <_scanf_i+0x11e>
 802361a:	6823      	ldr	r3, [r4, #0]
 802361c:	05d9      	lsls	r1, r3, #23
 802361e:	d50d      	bpl.n	802363c <_scanf_i+0x180>
 8023620:	42bd      	cmp	r5, r7
 8023622:	d909      	bls.n	8023638 <_scanf_i+0x17c>
 8023624:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802362c:	4632      	mov	r2, r6
 802362e:	4650      	mov	r0, sl
 8023630:	4798      	blx	r3
 8023632:	f105 39ff 	add.w	r9, r5, #4294967295
 8023636:	464d      	mov	r5, r9
 8023638:	42bd      	cmp	r5, r7
 802363a:	d028      	beq.n	802368e <_scanf_i+0x1d2>
 802363c:	6822      	ldr	r2, [r4, #0]
 802363e:	f012 0210 	ands.w	r2, r2, #16
 8023642:	d113      	bne.n	802366c <_scanf_i+0x1b0>
 8023644:	702a      	strb	r2, [r5, #0]
 8023646:	6863      	ldr	r3, [r4, #4]
 8023648:	9e01      	ldr	r6, [sp, #4]
 802364a:	4639      	mov	r1, r7
 802364c:	4650      	mov	r0, sl
 802364e:	47b0      	blx	r6
 8023650:	f8d8 3000 	ldr.w	r3, [r8]
 8023654:	6821      	ldr	r1, [r4, #0]
 8023656:	1d1a      	adds	r2, r3, #4
 8023658:	f8c8 2000 	str.w	r2, [r8]
 802365c:	f011 0f20 	tst.w	r1, #32
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	d00f      	beq.n	8023684 <_scanf_i+0x1c8>
 8023664:	6018      	str	r0, [r3, #0]
 8023666:	68e3      	ldr	r3, [r4, #12]
 8023668:	3301      	adds	r3, #1
 802366a:	60e3      	str	r3, [r4, #12]
 802366c:	1bed      	subs	r5, r5, r7
 802366e:	44ab      	add	fp, r5
 8023670:	6925      	ldr	r5, [r4, #16]
 8023672:	445d      	add	r5, fp
 8023674:	6125      	str	r5, [r4, #16]
 8023676:	2000      	movs	r0, #0
 8023678:	b007      	add	sp, #28
 802367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802367e:	f04f 0b00 	mov.w	fp, #0
 8023682:	e7ca      	b.n	802361a <_scanf_i+0x15e>
 8023684:	07ca      	lsls	r2, r1, #31
 8023686:	bf4c      	ite	mi
 8023688:	8018      	strhmi	r0, [r3, #0]
 802368a:	6018      	strpl	r0, [r3, #0]
 802368c:	e7eb      	b.n	8023666 <_scanf_i+0x1aa>
 802368e:	2001      	movs	r0, #1
 8023690:	e7f2      	b.n	8023678 <_scanf_i+0x1bc>
 8023692:	bf00      	nop
 8023694:	08026c9c 	.word	0x08026c9c
 8023698:	08021a7d 	.word	0x08021a7d
 802369c:	0802196d 	.word	0x0802196d
 80236a0:	08029e2b 	.word	0x08029e2b

080236a4 <__sccl>:
 80236a4:	b570      	push	{r4, r5, r6, lr}
 80236a6:	780b      	ldrb	r3, [r1, #0]
 80236a8:	4604      	mov	r4, r0
 80236aa:	2b5e      	cmp	r3, #94	; 0x5e
 80236ac:	bf0b      	itete	eq
 80236ae:	784b      	ldrbeq	r3, [r1, #1]
 80236b0:	1c48      	addne	r0, r1, #1
 80236b2:	1c88      	addeq	r0, r1, #2
 80236b4:	2200      	movne	r2, #0
 80236b6:	bf08      	it	eq
 80236b8:	2201      	moveq	r2, #1
 80236ba:	1e61      	subs	r1, r4, #1
 80236bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80236c0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80236c4:	42a9      	cmp	r1, r5
 80236c6:	d1fb      	bne.n	80236c0 <__sccl+0x1c>
 80236c8:	b90b      	cbnz	r3, 80236ce <__sccl+0x2a>
 80236ca:	3801      	subs	r0, #1
 80236cc:	bd70      	pop	{r4, r5, r6, pc}
 80236ce:	f082 0101 	eor.w	r1, r2, #1
 80236d2:	54e1      	strb	r1, [r4, r3]
 80236d4:	1c42      	adds	r2, r0, #1
 80236d6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80236da:	2d2d      	cmp	r5, #45	; 0x2d
 80236dc:	f102 36ff 	add.w	r6, r2, #4294967295
 80236e0:	4610      	mov	r0, r2
 80236e2:	d006      	beq.n	80236f2 <__sccl+0x4e>
 80236e4:	2d5d      	cmp	r5, #93	; 0x5d
 80236e6:	d0f1      	beq.n	80236cc <__sccl+0x28>
 80236e8:	b90d      	cbnz	r5, 80236ee <__sccl+0x4a>
 80236ea:	4630      	mov	r0, r6
 80236ec:	e7ee      	b.n	80236cc <__sccl+0x28>
 80236ee:	462b      	mov	r3, r5
 80236f0:	e7ef      	b.n	80236d2 <__sccl+0x2e>
 80236f2:	7816      	ldrb	r6, [r2, #0]
 80236f4:	2e5d      	cmp	r6, #93	; 0x5d
 80236f6:	d0fa      	beq.n	80236ee <__sccl+0x4a>
 80236f8:	42b3      	cmp	r3, r6
 80236fa:	dcf8      	bgt.n	80236ee <__sccl+0x4a>
 80236fc:	4618      	mov	r0, r3
 80236fe:	3001      	adds	r0, #1
 8023700:	4286      	cmp	r6, r0
 8023702:	5421      	strb	r1, [r4, r0]
 8023704:	dcfb      	bgt.n	80236fe <__sccl+0x5a>
 8023706:	43d8      	mvns	r0, r3
 8023708:	4430      	add	r0, r6
 802370a:	1c5d      	adds	r5, r3, #1
 802370c:	42b3      	cmp	r3, r6
 802370e:	bfa8      	it	ge
 8023710:	2000      	movge	r0, #0
 8023712:	182b      	adds	r3, r5, r0
 8023714:	3202      	adds	r2, #2
 8023716:	e7de      	b.n	80236d6 <__sccl+0x32>

08023718 <__submore>:
 8023718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802371c:	460c      	mov	r4, r1
 802371e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023724:	4299      	cmp	r1, r3
 8023726:	d11d      	bne.n	8023764 <__submore+0x4c>
 8023728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802372c:	f7fd f974 	bl	8020a18 <_malloc_r>
 8023730:	b918      	cbnz	r0, 802373a <__submore+0x22>
 8023732:	f04f 30ff 	mov.w	r0, #4294967295
 8023736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802373a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802373e:	63a3      	str	r3, [r4, #56]	; 0x38
 8023740:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023744:	6360      	str	r0, [r4, #52]	; 0x34
 8023746:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802374a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802374e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8023752:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023756:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802375a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802375e:	6020      	str	r0, [r4, #0]
 8023760:	2000      	movs	r0, #0
 8023762:	e7e8      	b.n	8023736 <__submore+0x1e>
 8023764:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023766:	0077      	lsls	r7, r6, #1
 8023768:	463a      	mov	r2, r7
 802376a:	f7fe fefd 	bl	8022568 <_realloc_r>
 802376e:	4605      	mov	r5, r0
 8023770:	2800      	cmp	r0, #0
 8023772:	d0de      	beq.n	8023732 <__submore+0x1a>
 8023774:	eb00 0806 	add.w	r8, r0, r6
 8023778:	4601      	mov	r1, r0
 802377a:	4632      	mov	r2, r6
 802377c:	4640      	mov	r0, r8
 802377e:	f7fd f8d5 	bl	802092c <memcpy>
 8023782:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023786:	f8c4 8000 	str.w	r8, [r4]
 802378a:	e7e9      	b.n	8023760 <__submore+0x48>

0802378c <_init>:
 802378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802378e:	bf00      	nop
 8023790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023792:	bc08      	pop	{r3}
 8023794:	469e      	mov	lr, r3
 8023796:	4770      	bx	lr

08023798 <_fini>:
 8023798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802379a:	bf00      	nop
 802379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802379e:	bc08      	pop	{r3}
 80237a0:	469e      	mov	lr, r3
 80237a2:	4770      	bx	lr
 80237a4:	0000      	movs	r0, r0
	...

080237a8 <__time_veneer>:
 80237a8:	e51ff004 	ldr	pc, [pc, #-4]	; 80237ac <__time_veneer+0x4>
 80237ac:	200004a0 	.word	0x200004a0
