
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023cc0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006a5c  08023ea0  08023ea0  00033ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a8fc  0802a8fc  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a8fc  0802a8fc  0003a8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a904  0802a904  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802a904  0802a904  0003a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802a918  0802a918  0003a918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802a92c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  2000033c  0802ac68  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001018  0802ac68  00041018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006cb80  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c781  00000000  00000000  000aceec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000045b8  00000000  00000000  000b9670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004378  00000000  00000000  000bdc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de19  00000000  00000000  000c1fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e738  00000000  00000000  000efdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114cd7  00000000  00000000  0011e4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002331c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001503c  00000000  00000000  0023321c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023e7c 	.word	0x08023e7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08023e7c 	.word	0x08023e7c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 f917 	bl	8008ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000848 	.word	0x20000848
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000848 	.word	0x20000848

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007b8 	.word	0x200007b8

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f01f fb4e 	bl	802047c <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f01f faa6 	bl	802047c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001018 	.word	0x20001018

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f01f fe7d 	bl	8020cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f007 fd9f 	bl	8008b00 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802a92c 	.word	0x0802a92c
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001018 	.word	0x20001018

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001004 	.word	0x20001004
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001004 	.word	0x20001004

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08027688 	.word	0x08027688
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08027698 	.word	0x08027698

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08027698 	.word	0x08027698

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	080276a0 	.word	0x080276a0
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	080276b8 	.word	0x080276b8
 8003c70:	080276c0 	.word	0x080276c0

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fb53 	bl	8004352 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <Send_AT_Command+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000360 	.word	0x20000360

08003cf4 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x20>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fb64 	bl	80043d4 <ringBuffer_push>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	2000037c 	.word	0x2000037c
 8003d14:	20000360 	.word	0x20000360

08003d18 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <Read_Response+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fbde 	bl	80044e8 <ringBuffer_lookFor>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000037c 	.word	0x2000037c

08003d3c <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Wait_Response+0x74>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <Wait_Response+0x78>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <Wait_Response+0x7c>)
 8003d58:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Wait_Response+0x74>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Wait_Response+0x80>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fbbe 	bl	80044e8 <ringBuffer_lookFor>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Wait_Response+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Wait_Response+0x7c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e012      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <Wait_Response+0x78>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <Wait_Response+0x7c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d807      	bhi.n	8003da6 <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Wait_Response+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <Wait_Response+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003da6:	2304      	movs	r3, #4
	}

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	2000036c 	.word	0x2000036c
 8003db4:	20000360 	.word	0x20000360
 8003db8:	20000370 	.word	0x20000370
 8003dbc:	2000037c 	.word	0x2000037c

08003dc0 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	; 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <Connect_Wifi+0x64>)
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <Connect_Wifi+0x68>)
 8003dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003de8:	f107 0008 	add.w	r0, r7, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <Connect_Wifi+0x6c>)
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <Connect_Wifi+0x70>)
 8003df6:	f01d fad3 	bl	80213a0 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f82e 	bl	8003e6c <Command_Process>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3758      	adds	r7, #88	; 0x58
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08023efc 	.word	0x08023efc
 8003e28:	08023f08 	.word	0x08023f08
 8003e2c:	08023ee0 	.word	0x08023ee0
 8003e30:	08023eec 	.word	0x08023eec

08003e34 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <Disconnect_Wifi+0x30>)
 8003e3c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x34>)
 8003e40:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e42:	2304      	movs	r3, #4
 8003e44:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e46:	1d39      	adds	r1, r7, #4
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f80c 	bl	8003e6c <Command_Process>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	08023eb0 	.word	0x08023eb0
 8003e68:	08023ec0 	.word	0x08023ec0

08003e6c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <Command_Process+0x1e>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <Command_Process+0x104>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d806      	bhi.n	8003e98 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <Command_Process+0x108>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 faf4 	bl	800447c <ringBuffer_flush>
		return STATUS_ERROR;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e067      	b.n	8003f68 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Command_Process+0x10c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <Command_Process+0x104>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Command_Process+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <Command_Process+0x104>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff37 	bl	8003d3c <Wait_Response>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003ed2:	482a      	ldr	r0, [pc, #168]	; (8003f7c <Command_Process+0x110>)
 8003ed4:	f7ff ff20 	bl	8003d18 <Read_Response>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Command_Process+0x10c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <Command_Process+0x104>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <Command_Process+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fac4 	bl	800447c <ringBuffer_flush>
				return STATUS_ERROR;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e037      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <Command_Process+0x96>
			{
				return response;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e032      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Command_Process+0x104>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <Command_Process+0x10c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <Command_Process+0x104>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <Command_Process+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 faa8 	bl	800447c <ringBuffer_flush>
					return STATUS_OK;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e01b      	b.n	8003f68 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Command_Process+0x10c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <Command_Process+0x104>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <Command_Process+0x104>)
 8003f40:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <Command_Process+0x108>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa98 	bl	800447c <ringBuffer_flush>
					return IDLE;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e00b      	b.n	8003f68 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Command_Process+0x10c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <Command_Process+0x104>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <Command_Process+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa8b 	bl	800447c <ringBuffer_flush>
				return response;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000374 	.word	0x20000374
 8003f74:	2000037c 	.word	0x2000037c
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	08023f14 	.word	0x08023f14

08003f80 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a2      	sub	sp, #136	; 0x88
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <Connect_TCP_Server+0x68>)
 8003f92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Connect_TCP_Server+0x6c>)
 8003fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <Connect_TCP_Server+0x70>)
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <Connect_TCP_Server+0x74>)
 8003fba:	f01d f9f1 	bl	80213a0 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003fc4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4c 	bl	8003e6c <Command_Process>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003fda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3780      	adds	r7, #128	; 0x80
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08023f3c 	.word	0x08023f3c
 8003fec:	08023f44 	.word	0x08023f44
 8003ff0:	08023f1c 	.word	0x08023f1c
 8003ff4:	08023f30 	.word	0x08023f30

08003ff8 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003ffe:	2304      	movs	r3, #4
 8004000:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <Disconnect_TCP_Server+0x30>)
 8004004:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <Disconnect_TCP_Server+0x34>)
 8004008:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800400a:	1d39      	adds	r1, r7, #4
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	2201      	movs	r2, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff2a 	bl	8003e6c <Command_Process>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 800401c:	7bfb      	ldrb	r3, [r7, #15]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08023f4c 	.word	0x08023f4c
 800402c:	08023ec0 	.word	0x08023ec0

08004030 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b096      	sub	sp, #88	; 0x58
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8fa 	bl	800023c <strlen>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Send_TCP_Message+0x64>)
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <Send_TCP_Message+0x68>)
 8004054:	f01d f9a4 	bl	80213a0 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <Send_TCP_Message+0x6c>)
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2202      	movs	r2, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef6 	bl	8003e6c <Command_Process>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08023f5c 	.word	0x08023f5c
 8004098:	08023f68 	.word	0x08023f68
 800409c:	08023f70 	.word	0x08023f70

080040a0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <Read_TCP_Message+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	492d      	ldr	r1, [pc, #180]	; (8004164 <Read_TCP_Message+0xc4>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f01d ff3f 	bl	8021f34 <strstr>
 80040b6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d042      	beq.n	800414c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e017      	b.n	80040fc <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80040cc:	7efb      	ldrb	r3, [r7, #27]
 80040ce:	3305      	adds	r3, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b3a      	cmp	r3, #58	; 0x3a
 80040d8:	d014      	beq.n	8004104 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	3305      	adds	r3, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	441a      	add	r2, r3
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	f107 0120 	add.w	r1, r7, #32
 80040ea:	440b      	add	r3, r1
 80040ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	3301      	adds	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9e4      	bls.n	80040cc <Read_TCP_Message+0x2c>
 8004102:	e000      	b.n	8004106 <Read_TCP_Message+0x66>
				break;
 8004104:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f01c f9a9 	bl	8020462 <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00d      	b.n	8004136 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	3306      	adds	r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	441a      	add	r2, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	440b      	add	r3, r1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <Read_TCP_Message+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f99a 	bl	800447c <ringBuffer_flush>
		return STATUS_OK;
 8004148:	2302      	movs	r3, #2
 800414a:	e005      	b.n	8004158 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <Read_TCP_Message+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f993 	bl	800447c <ringBuffer_flush>
		return STATUS_ERROR;
 8004156:	2303      	movs	r3, #3
	}



}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000037c 	.word	0x2000037c
 8004164:	08023f78 	.word	0x08023f78

08004168 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <Wait_TCP_Message+0x74>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	4603      	mov	r3, r0
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <Wait_TCP_Message+0x78>)
 8004184:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff87 	bl	80040a0 <Read_TCP_Message>
 8004192:	4603      	mov	r3, r0
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <Wait_TCP_Message+0x78>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80041a4:	2302      	movs	r3, #2
 80041a6:	e012      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Wait_TCP_Message+0x74>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4798      	blx	r3
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d807      	bhi.n	80041cc <Wait_TCP_Message+0x64>
	{
		time = 0;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80041cc:	2304      	movs	r3, #4

}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000011 	.word	0x20000011
 80041dc:	20000360 	.word	0x20000360
 80041e0:	20000378 	.word	0x20000378

080041e4 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 80a4 	bne.w	8004342 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	617b      	str	r3, [r7, #20]

		buffer[index++] = connectPacket->ConnectByte;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	461a      	mov	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	61fa      	str	r2, [r7, #28]
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	7852      	ldrb	r2, [r2, #1]
 8004224:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	885b      	ldrh	r3, [r3, #2]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b299      	uxth	r1, r3
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	b2ca      	uxtb	r2, r1
 800423c:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	8859      	ldrh	r1, [r3, #2]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	61fa      	str	r2, [r7, #28]
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004252:	2300      	movs	r3, #0
 8004254:	837b      	strh	r3, [r7, #26]
 8004256:	e013      	b.n	8004280 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 8004258:	8b7b      	ldrh	r3, [r7, #26]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d102      	bne.n	8004264 <mqtt_encode_packet+0x80>
				return -1;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e070      	b.n	8004346 <mqtt_encode_packet+0x162>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004264:	8b7a      	ldrh	r2, [r7, #26]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	61f9      	str	r1, [r7, #28]
 800426c:	4619      	mov	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	440b      	add	r3, r1
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	440a      	add	r2, r1
 8004276:	7912      	ldrb	r2, [r2, #4]
 8004278:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800427a:	8b7b      	ldrh	r3, [r7, #26]
 800427c:	3301      	adds	r3, #1
 800427e:	837b      	strh	r3, [r7, #26]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	8b7a      	ldrh	r2, [r7, #26]
 8004286:	429a      	cmp	r2, r3
 8004288:	d3e6      	bcc.n	8004258 <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	61fa      	str	r2, [r7, #28]
 8004290:	461a      	mov	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	7a12      	ldrb	r2, [r2, #8]
 800429a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	7a52      	ldrb	r2, [r2, #9]
 80042ac:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b299      	uxth	r1, r3
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	61fa      	str	r2, [r7, #28]
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	8959      	ldrh	r1, [r3, #10]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	61fa      	str	r2, [r7, #28]
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	b2ca      	uxtb	r2, r1
 80042d8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	899b      	ldrh	r3, [r3, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b299      	uxth	r1, r3
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	61fa      	str	r2, [r7, #28]
 80042e8:	461a      	mov	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	8999      	ldrh	r1, [r3, #12]
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	61fa      	str	r2, [r7, #28]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	b2ca      	uxtb	r2, r1
 8004304:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004306:	2300      	movs	r3, #0
 8004308:	833b      	strh	r3, [r7, #24]
 800430a:	e013      	b.n	8004334 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 800430c:	8b3b      	ldrh	r3, [r7, #24]
 800430e:	2b32      	cmp	r3, #50	; 0x32
 8004310:	d102      	bne.n	8004318 <mqtt_encode_packet+0x134>
				return -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e016      	b.n	8004346 <mqtt_encode_packet+0x162>
			buffer[index++] = connectPacket->ClientID[i];
 8004318:	8b3a      	ldrh	r2, [r7, #24]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	61f9      	str	r1, [r7, #28]
 8004320:	4619      	mov	r1, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	440b      	add	r3, r1
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	440a      	add	r2, r1
 800432a:	7b92      	ldrb	r2, [r2, #14]
 800432c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 800432e:	8b3b      	ldrh	r3, [r7, #24]
 8004330:	3301      	adds	r3, #1
 8004332:	833b      	strh	r3, [r7, #24]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	899b      	ldrh	r3, [r3, #12]
 8004338:	8b3a      	ldrh	r2, [r7, #24]
 800433a:	429a      	cmp	r2, r3
 800433c:	d3e6      	bcc.n	800430c <mqtt_encode_packet+0x128>
		}

		return index;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	e001      	b.n	8004346 <mqtt_encode_packet+0x162>

	}
	return -1;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004346:	4618      	mov	r0, r3
 8004348:	3724      	adds	r7, #36	; 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 800435a:	2010      	movs	r0, #16
 800435c:	f01c fe4e 	bl	8020ffc <malloc>
 8004360:	4603      	mov	r3, r0
 8004362:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 800436a:	2300      	movs	r3, #0
 800436c:	e017      	b.n	800439e <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8004380:	2101      	movs	r1, #1
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f01c f872 	bl	802046c <calloc>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <ringBuffer_init+0x4c>
		}

	return rBuf;
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f01c fe23 	bl	802100c <free>
		}
		free(buffer);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f01c fe20 	bl	802100c <free>
	}
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d00c      	beq.n	8004408 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8004406:	e009      	b.n	800441c <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4413      	add	r3, r2
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	3b01      	subs	r3, #1
 800443a:	429a      	cmp	r2, r3
 800443c:	d00d      	beq.n	800445a <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4413      	add	r3, r2
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	605a      	str	r2, [r3, #4]
		return data;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	e00a      	b.n	8004470 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	605a      	str	r2, [r3, #4]
		return data;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68d8      	ldr	r0, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	461a      	mov	r2, r3
 800448e:	2100      	movs	r1, #0
 8004490:	f01c fdd2 	bl	8021038 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e00a      	b.n	80044d0 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff85 	bl	80043d4 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	6838      	ldr	r0, [r7, #0]
 80044d2:	f7fb feb3 	bl	800023c <strlen>
 80044d6:	4602      	mov	r2, r0
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d8ed      	bhi.n	80044ba <ringBuffer_pushArray+0x10>
}
 80044de:	bf00      	nop
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	6839      	ldr	r1, [r7, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f01d fd1b 	bl	8021f34 <strstr>
 80044fe:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <ringBuffer_lookFor+0x22>
		return 1;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <ringBuffer_lookFor+0x24>
	else
		return 0;
 800450a:	2300      	movs	r3, #0

}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004534:	2032      	movs	r0, #50	; 0x32
 8004536:	f7ff ff0c 	bl	8004352 <ringBuffer_init>
 800453a:	4602      	mov	r2, r0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	605a      	str	r2, [r3, #4]

	}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff26 	bl	80043a6 <ringBuffer_deInit>
	}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4618      	mov	r0, r3
 8004570:	f010 fc8c 	bl	8014e8c <_ZN5UtestC1Ev>
 8004574:	4a03      	ldr	r2, [pc, #12]	; (8004584 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08028e0c 	.word	0x08028e0c

08004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	4a05      	ldr	r2, [pc, #20]	; (80045a8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	f010 fc87 	bl	8014eac <_ZN5UtestD1Ev>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	08028e0c 	.word	0x08028e0c

080045ac <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ffe7 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80045ba:	2108      	movs	r1, #8
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f006 fca9 	bl	800af14 <_ZdlPvj>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ffbe 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80045e8:	4a03      	ldr	r2, [pc, #12]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08028dec 	.word	0x08028dec

080045fc <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	2229      	movs	r2, #41	; 0x29
 8004606:	4906      	ldr	r1, [pc, #24]	; (8004620 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004608:	2008      	movs	r0, #8
 800460a:	f006 fc6f 	bl	800aeec <_ZnwjPKci>
 800460e:	4604      	mov	r4, r0
 8004610:	4620      	mov	r0, r4
 8004612:	f7ff ffdb 	bl	80045cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004616:	4623      	mov	r3, r4
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	08023ff4 	.word	0x08023ff4

08004624 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4618      	mov	r0, r3
 8004630:	f00f f84a 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004634:	4a03      	ldr	r2, [pc, #12]	; (8004644 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	08028d40 	.word	0x08028d40

08004648 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800464a:	b087      	sub	sp, #28
 800464c:	af04      	add	r7, sp, #16
 800464e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004650:	f010 fbf2 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004654:	4604      	mov	r4, r0
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	3338      	adds	r3, #56	; 0x38
 800465a:	681d      	ldr	r5, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	461e      	mov	r6, r3
 8004664:	f010 fbf8 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004668:	4603      	mov	r3, r0
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	232c      	movs	r3, #44	; 0x2c
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004676:	4632      	mov	r2, r6
 8004678:	2132      	movs	r1, #50	; 0x32
 800467a:	4620      	mov	r0, r4
 800467c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800467e:	f010 fbdb 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004682:	4604      	mov	r4, r0
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	3320      	adds	r3, #32
 8004688:	681d      	ldr	r5, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf14      	ite	ne
 8004694:	2301      	movne	r3, #1
 8004696:	2300      	moveq	r3, #0
 8004698:	b2de      	uxtb	r6, r3
 800469a:	f010 fbdd 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800469e:	4603      	mov	r3, r0
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	232d      	movs	r3, #45	; 0x2d
 80046a4:	9302      	str	r3, [sp, #8]
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 80046b2:	4631      	mov	r1, r6
 80046b4:	4620      	mov	r0, r4
 80046b6:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 80046b8:	f010 fbbe 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80046bc:	4604      	mov	r4, r0
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	3338      	adds	r3, #56	; 0x38
 80046c2:	681d      	ldr	r5, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461e      	mov	r6, r3
 80046cc:	f010 fbc4 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046d0:	4603      	mov	r3, r0
 80046d2:	9302      	str	r3, [sp, #8]
 80046d4:	232e      	movs	r3, #46	; 0x2e
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80046de:	4632      	mov	r2, r6
 80046e0:	2100      	movs	r1, #0
 80046e2:	4620      	mov	r0, r4
 80046e4:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80046e6:	f010 fba7 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80046ea:	4604      	mov	r4, r0
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	3338      	adds	r3, #56	; 0x38
 80046f0:	681d      	ldr	r5, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	461e      	mov	r6, r3
 80046fa:	f010 fbad 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046fe:	4603      	mov	r3, r0
 8004700:	9302      	str	r3, [sp, #8]
 8004702:	232f      	movs	r3, #47	; 0x2f
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 800470c:	4632      	mov	r2, r6
 800470e:	2100      	movs	r1, #0
 8004710:	4620      	mov	r0, r4
 8004712:	47a8      	blx	r5

}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471c:	08023ff4 	.word	0x08023ff4
 8004720:	08024014 	.word	0x08024014
 8004724:	0802403c 	.word	0x0802403c
 8004728:	08024054 	.word	0x08024054
 800472c:	0802405c 	.word	0x0802405c
 8004730:	08024084 	.word	0x08024084

08004734 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff0a 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08028d20 	.word	0x08028d20

08004764 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	2233      	movs	r2, #51	; 0x33
 800476e:	4906      	ldr	r1, [pc, #24]	; (8004788 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004770:	2008      	movs	r0, #8
 8004772:	f006 fbbb 	bl	800aeec <_ZnwjPKci>
 8004776:	4604      	mov	r4, r0
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff ffdb 	bl	8004734 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800477e:	4623      	mov	r3, r4
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	08023ff4 	.word	0x08023ff4

0800478c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4618      	mov	r0, r3
 8004798:	f00e ff96 	bl	80136c8 <_ZN10UtestShellC1Ev>
 800479c:	4a03      	ldr	r2, [pc, #12]	; (80047ac <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	08028c74 	.word	0x08028c74

080047b0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2145      	movs	r1, #69	; 0x45
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fe08 	bl	80043d4 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 80047c4:	f010 fb38 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80047c8:	4604      	mov	r4, r0
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	3338      	adds	r3, #56	; 0x38
 80047ce:	681d      	ldr	r5, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	461e      	mov	r6, r3
 80047da:	f010 fb3d 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047de:	4603      	mov	r3, r0
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	2336      	movs	r3, #54	; 0x36
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80047ec:	4632      	mov	r2, r6
 80047ee:	2145      	movs	r1, #69	; 0x45
 80047f0:	4620      	mov	r0, r4
 80047f2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2110      	movs	r1, #16
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fdea 	bl	80043d4 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004800:	f010 fb1a 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004804:	4604      	mov	r4, r0
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	3338      	adds	r3, #56	; 0x38
 800480a:	681d      	ldr	r5, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461e      	mov	r6, r3
 8004818:	f010 fb1e 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800481c:	4603      	mov	r3, r0
 800481e:	9302      	str	r3, [sp, #8]
 8004820:	2339      	movs	r3, #57	; 0x39
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 800482a:	4632      	mov	r2, r6
 800482c:	2110      	movs	r1, #16
 800482e:	4620      	mov	r0, r4
 8004830:	47a8      	blx	r5

}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483a:	bf00      	nop
 800483c:	08023ff4 	.word	0x08023ff4
 8004840:	080240ac 	.word	0x080240ac
 8004844:	080240dc 	.word	0x080240dc

08004848 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fe80 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004864:	4a03      	ldr	r2, [pc, #12]	; (8004874 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08028c54 	.word	0x08028c54

08004878 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	223d      	movs	r2, #61	; 0x3d
 8004882:	4906      	ldr	r1, [pc, #24]	; (800489c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004884:	2008      	movs	r0, #8
 8004886:	f006 fb31 	bl	800aeec <_ZnwjPKci>
 800488a:	4604      	mov	r4, r0
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff ffdb 	bl	8004848 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004892:	4623      	mov	r3, r4
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	08023ff4 	.word	0x08023ff4

080048a0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f00e ff0c 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80048b0:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	08028ba8 	.word	0x08028ba8

080048c4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 80048c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af04      	add	r7, sp, #16
 80048ca:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4293      	cmp	r3, r2
 80048f2:	da0b      	bge.n	800490c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fd68 	bl	80043d4 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e7e3      	b.n	80048d4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	21ff      	movs	r1, #255	; 0xff
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fd5e 	bl	80043d4 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004918:	f010 fa8e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800491c:	4604      	mov	r4, r0
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	3338      	adds	r3, #56	; 0x38
 8004922:	681d      	ldr	r5, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	461e      	mov	r6, r3
 800492e:	f010 fa93 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004932:	4603      	mov	r3, r0
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	2345      	movs	r3, #69	; 0x45
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004940:	4632      	mov	r2, r6
 8004942:	21ff      	movs	r1, #255	; 0xff
 8004944:	4620      	mov	r0, r4
 8004946:	47a8      	blx	r5
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004950:	08023ff4 	.word	0x08023ff4
 8004954:	0802410c 	.word	0x0802410c

08004958 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fdf8 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004974:	4a03      	ldr	r2, [pc, #12]	; (8004984 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	08028b88 	.word	0x08028b88

08004988 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	2248      	movs	r2, #72	; 0x48
 8004992:	4906      	ldr	r1, [pc, #24]	; (80049ac <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004994:	2008      	movs	r0, #8
 8004996:	f006 faa9 	bl	800aeec <_ZnwjPKci>
 800499a:	4604      	mov	r4, r0
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ffdb 	bl	8004958 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 80049a2:	4623      	mov	r3, r4
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd90      	pop	{r4, r7, pc}
 80049ac:	08023ff4 	.word	0x08023ff4

080049b0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f00e fe84 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80049c0:	4a03      	ldr	r2, [pc, #12]	; (80049d0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08028adc 	.word	0x08028adc

080049d4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af04      	add	r7, sp, #16
 80049da:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	21ff      	movs	r1, #255	; 0xff
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fcf6 	bl	80043d4 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fd1b 	bl	8004428 <ringBuffer_pop>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80049f6:	f010 fa1f 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80049fa:	4604      	mov	r4, r0
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	3338      	adds	r3, #56	; 0x38
 8004a00:	681d      	ldr	r5, [r3, #0]
 8004a02:	7bfe      	ldrb	r6, [r7, #15]
 8004a04:	f010 fa28 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	9302      	str	r3, [sp, #8]
 8004a0c:	234d      	movs	r3, #77	; 0x4d
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004a16:	4632      	mov	r2, r6
 8004a18:	21ff      	movs	r1, #255	; 0xff
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	47a8      	blx	r5

}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a26:	bf00      	nop
 8004a28:	08023ff4 	.word	0x08023ff4
 8004a2c:	0802413c 	.word	0x0802413c

08004a30 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fd8c 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08028abc 	.word	0x08028abc

08004a60 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	2251      	movs	r2, #81	; 0x51
 8004a6a:	4906      	ldr	r1, [pc, #24]	; (8004a84 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004a6c:	2008      	movs	r0, #8
 8004a6e:	f006 fa3d 	bl	800aeec <_ZnwjPKci>
 8004a72:	4604      	mov	r4, r0
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7ff ffdb 	bl	8004a30 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}
 8004a84:	08023ff4 	.word	0x08023ff4

08004a88 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f00e fe18 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004a98:	4a03      	ldr	r2, [pc, #12]	; (8004aa8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08028a10 	.word	0x08028a10

08004aac <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	21aa      	movs	r1, #170	; 0xaa
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fc88 	bl	80043d4 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	429a      	cmp	r2, r3
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	da0a      	bge.n	8004b02 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fc99 	bl	8004428 <ringBuffer_pop>
 8004af6:	4603      	mov	r3, r0
 8004af8:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3301      	adds	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e7e4      	b.n	8004acc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fc8e 	bl	8004428 <ringBuffer_pop>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004b10:	f010 f992 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004b14:	4604      	mov	r4, r0
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	3338      	adds	r3, #56	; 0x38
 8004b1a:	681d      	ldr	r5, [r3, #0]
 8004b1c:	7afe      	ldrb	r6, [r7, #11]
 8004b1e:	f010 f99b 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b22:	4603      	mov	r3, r0
 8004b24:	9302      	str	r3, [sp, #8]
 8004b26:	235e      	movs	r3, #94	; 0x5e
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004b30:	4632      	mov	r2, r6
 8004b32:	21aa      	movs	r1, #170	; 0xaa
 8004b34:	4620      	mov	r0, r4
 8004b36:	47a8      	blx	r5
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b40:	08023ff4 	.word	0x08023ff4
 8004b44:	0802415c 	.word	0x0802415c

08004b48 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	605a      	str	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fd00 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b64:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	080289f0 	.word	0x080289f0

08004b78 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	2261      	movs	r2, #97	; 0x61
 8004b82:	4906      	ldr	r1, [pc, #24]	; (8004b9c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004b84:	2008      	movs	r0, #8
 8004b86:	f006 f9b1 	bl	800aeec <_ZnwjPKci>
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff ffdb 	bl	8004b48 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004b92:	4623      	mov	r3, r4
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd90      	pop	{r4, r7, pc}
 8004b9c:	08023ff4 	.word	0x08023ff4

08004ba0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f00e fd8c 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004bb0:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08028944 	.word	0x08028944

08004bc4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b089      	sub	sp, #36	; 0x24
 8004bc8:	af04      	add	r7, sp, #16
 8004bca:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d20b      	bcs.n	8004bf4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fbf4 	bl	80043d4 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e7ed      	b.n	8004bd0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004bf4:	f010 f920 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	681d      	ldr	r5, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	461e      	mov	r6, r3
 8004c14:	f010 f920 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	9302      	str	r3, [sp, #8]
 8004c1c:	2368      	movs	r3, #104	; 0x68
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004c26:	4632      	mov	r2, r6
 8004c28:	2131      	movs	r1, #49	; 0x31
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fc22 	bl	800447c <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004c38:	f010 f8fe 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	3338      	adds	r3, #56	; 0x38
 8004c42:	681d      	ldr	r5, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461e      	mov	r6, r3
 8004c58:	f010 f8fe 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	236c      	movs	r3, #108	; 0x6c
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4620      	mov	r0, r4
 8004c70:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004c72:	f010 f8e1 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004c76:	4604      	mov	r4, r0
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	3338      	adds	r3, #56	; 0x38
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461e      	mov	r6, r3
 8004c92:	f010 f8e1 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c96:	4603      	mov	r3, r0
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	236d      	movs	r3, #109	; 0x6d
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004ca4:	4632      	mov	r2, r6
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4620      	mov	r0, r4
 8004caa:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb4:	08023ff4 	.word	0x08023ff4
 8004cb8:	0802417c 	.word	0x0802417c
 8004cbc:	080241b8 	.word	0x080241b8
 8004cc0:	080241f4 	.word	0x080241f4

08004cc4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fc42 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	08028924 	.word	0x08028924

08004cf4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	2276      	movs	r2, #118	; 0x76
 8004cfe:	4906      	ldr	r1, [pc, #24]	; (8004d18 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004d00:	2008      	movs	r0, #8
 8004d02:	f006 f8f3 	bl	800aeec <_ZnwjPKci>
 8004d06:	4604      	mov	r4, r0
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff ffdb 	bl	8004cc4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004d0e:	4623      	mov	r3, r4
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	08023ff4 	.word	0x08023ff4

08004d1c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f00e fcce 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004d2c:	4a03      	ldr	r2, [pc, #12]	; (8004d3c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08028878 	.word	0x08028878

08004d40 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	490e      	ldr	r1, [pc, #56]	; (8004d88 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fbab 	bl	80044aa <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004d54:	f010 f870 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004d58:	4604      	mov	r4, r0
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	681d      	ldr	r5, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	68de      	ldr	r6, [r3, #12]
 8004d66:	f010 f877 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	237a      	movs	r3, #122	; 0x7a
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4903      	ldr	r1, [pc, #12]	; (8004d88 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	47a8      	blx	r5
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d88:	0802422c 	.word	0x0802422c
 8004d8c:	08023ff4 	.word	0x08023ff4

08004d90 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fbdc 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004dac:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	08028858 	.word	0x08028858

08004dc0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	227d      	movs	r2, #125	; 0x7d
 8004dca:	4906      	ldr	r1, [pc, #24]	; (8004de4 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004dcc:	2008      	movs	r0, #8
 8004dce:	f006 f88d 	bl	800aeec <_ZnwjPKci>
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff ffdb 	bl	8004d90 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004dda:	4623      	mov	r3, r4
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}
 8004de4:	08023ff4 	.word	0x08023ff4

08004de8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f00e fc68 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004df8:	4a03      	ldr	r2, [pc, #12]	; (8004e08 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	080287ac 	.word	0x080287ac

08004e0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	b08a      	sub	sp, #40	; 0x28
 8004e12:	af04      	add	r7, sp, #16
 8004e14:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	494e      	ldr	r1, [pc, #312]	; (8004f54 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fb44 	bl	80044aa <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004e22:	f010 f809 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004e26:	4604      	mov	r4, r0
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68de      	ldr	r6, [r3, #12]
 8004e34:	f010 f810 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	9302      	str	r3, [sp, #8]
 8004e3c:	2381      	movs	r3, #129	; 0x81
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	4b45      	ldr	r3, [pc, #276]	; (8004f58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	4632      	mov	r2, r6
 8004e48:	4942      	ldr	r1, [pc, #264]	; (8004f54 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4942      	ldr	r1, [pc, #264]	; (8004f5c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb47 	bl	80044e8 <ringBuffer_lookFor>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05c      	beq.n	8004f24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	493b      	ldr	r1, [pc, #236]	; (8004f5c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fb39 	bl	80044e8 <ringBuffer_lookFor>
 8004e76:	4604      	mov	r4, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4937      	ldr	r1, [pc, #220]	; (8004f5c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fb32 	bl	80044e8 <ringBuffer_lookFor>
 8004e84:	4603      	mov	r3, r0
 8004e86:	429c      	cmp	r4, r3
 8004e88:	bf14      	ite	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	2300      	moveq	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004e94:	f00f ffd0 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004e98:	6803      	ldr	r3, [r0, #0]
 8004e9a:	3370      	adds	r3, #112	; 0x70
 8004e9c:	681c      	ldr	r4, [r3, #0]
 8004e9e:	2382      	movs	r3, #130	; 0x82
 8004ea0:	4a2d      	ldr	r2, [pc, #180]	; (8004f58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004ea2:	492f      	ldr	r1, [pc, #188]	; (8004f60 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004ea4:	47a0      	blx	r4
 8004ea6:	f00f ffc7 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	3358      	adds	r3, #88	; 0x58
 8004eb0:	681d      	ldr	r5, [r3, #0]
 8004eb2:	f107 0308 	add.w	r3, r7, #8
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f009 fa59 	bl	800e370 <_Z10StringFromi>
 8004ebe:	f107 0308 	add.w	r3, r7, #8
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f008 ff60 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8004ec8:	4606      	mov	r6, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4923      	ldr	r1, [pc, #140]	; (8004f5c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fb09 	bl	80044e8 <ringBuffer_lookFor>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	f107 0310 	add.w	r3, r7, #16
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f009 fcc0 	bl	800e864 <_Z10StringFromm>
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f008 ff4d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8004eee:	4680      	mov	r8, r0
 8004ef0:	f00f ffb2 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	9303      	str	r3, [sp, #12]
 8004ef8:	2382      	movs	r3, #130	; 0x82
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4643      	mov	r3, r8
 8004f06:	4632      	mov	r2, r6
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	47a8      	blx	r5
 8004f0e:	f107 0310 	add.w	r3, r7, #16
 8004f12:	4618      	mov	r0, r3
 8004f14:	f008 ff65 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8004f18:	f107 0308 	add.w	r3, r7, #8
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f008 ff60 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8004f22:	e012      	b.n	8004f4a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004f24:	f00f ff88 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	3338      	adds	r3, #56	; 0x38
 8004f2e:	681d      	ldr	r5, [r3, #0]
 8004f30:	f00f ff92 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f34:	4603      	mov	r3, r0
 8004f36:	9302      	str	r3, [sp, #8]
 8004f38:	2382      	movs	r3, #130	; 0x82
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2300      	movs	r3, #0
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	4620      	mov	r0, r4
 8004f48:	47a8      	blx	r5
}
 8004f4a:	bf00      	nop
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	08024234 	.word	0x08024234
 8004f58:	08023ff4 	.word	0x08023ff4
 8004f5c:	08024240 	.word	0x08024240
 8004f60:	08024248 	.word	0x08024248

08004f64 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff faf2 	bl	8004564 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004f80:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	0802878c 	.word	0x0802878c

08004f94 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	2285      	movs	r2, #133	; 0x85
 8004f9e:	4906      	ldr	r1, [pc, #24]	; (8004fb8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004fa0:	2008      	movs	r0, #8
 8004fa2:	f005 ffa3 	bl	800aeec <_ZnwjPKci>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f7ff ffdb 	bl	8004f64 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004fae:	4623      	mov	r3, r4
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	08023ff4 	.word	0x08023ff4

08004fbc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f00e fb7e 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8004fcc:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080286e0 	.word	0x080286e0

08004fe0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af04      	add	r7, sp, #16
 8004fe6:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004fe8:	f00f ff26 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8004fec:	4604      	mov	r4, r0
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	3338      	adds	r3, #56	; 0x38
 8004ff2:	681d      	ldr	r5, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fa8b 	bl	8004514 <ringBuffer_capacity>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461e      	mov	r6, r3
 8005002:	f00f ff29 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005006:	4603      	mov	r3, r0
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	2388      	movs	r3, #136	; 0x88
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8005014:	4632      	mov	r2, r6
 8005016:	2132      	movs	r1, #50	; 0x32
 8005018:	4620      	mov	r0, r4
 800501a:	47a8      	blx	r5

}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005024:	08023ff4 	.word	0x08023ff4
 8005028:	080242ec 	.word	0x080242ec

0800502c <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 800502c:	b5b0      	push	{r4, r5, r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8005034:	f107 0308 	add.w	r3, r7, #8
 8005038:	491d      	ldr	r1, [pc, #116]	; (80050b0 <_Z18UART_Transmit_FakePh+0x84>)
 800503a:	4618      	mov	r0, r3
 800503c:	f008 fb19 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005040:	f107 0308 	add.w	r3, r7, #8
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f006 fbec 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800504c:	4604      	mov	r4, r0
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	3318      	adds	r3, #24
 8005052:	681d      	ldr	r5, [r3, #0]
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	4916      	ldr	r1, [pc, #88]	; (80050b4 <_Z18UART_Transmit_FakePh+0x88>)
 800505a:	4618      	mov	r0, r3
 800505c:	f008 fb09 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4619      	mov	r1, r3
 8005066:	4620      	mov	r0, r4
 8005068:	47a8      	blx	r5
 800506a:	4604      	mov	r4, r0
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	333c      	adds	r3, #60	; 0x3c
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4910      	ldr	r1, [pc, #64]	; (80050b8 <_Z18UART_Transmit_FakePh+0x8c>)
 8005078:	4618      	mov	r0, r3
 800507a:	f008 fafa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800507e:	f107 0318 	add.w	r3, r7, #24
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4619      	mov	r1, r3
 8005086:	4620      	mov	r0, r4
 8005088:	47a8      	blx	r5
 800508a:	f107 0318 	add.w	r3, r7, #24
 800508e:	4618      	mov	r0, r3
 8005090:	f008 fea7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f008 fea2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800509e:	f107 0308 	add.w	r3, r7, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f008 fe9d 	bl	800dde2 <_ZN12SimpleStringD1Ev>

}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bdb0      	pop	{r4, r5, r7, pc}
 80050b0:	08024324 	.word	0x08024324
 80050b4:	08024328 	.word	0x08024328
 80050b8:	0802433c 	.word	0x0802433c

080050bc <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 80050c2:	463b      	mov	r3, r7
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <_Z17UART_Receive_Fakev+0x64>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f008 fad3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80050cc:	463b      	mov	r3, r7
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f006 fba7 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050d6:	4604      	mov	r4, r0
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	3318      	adds	r3, #24
 80050dc:	681d      	ldr	r5, [r3, #0]
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4910      	ldr	r1, [pc, #64]	; (8005124 <_Z17UART_Receive_Fakev+0x68>)
 80050e4:	4618      	mov	r0, r3
 80050e6:	f008 fac4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	4619      	mov	r1, r3
 80050f0:	4620      	mov	r0, r4
 80050f2:	47a8      	blx	r5
 80050f4:	4603      	mov	r3, r0
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	3264      	adds	r2, #100	; 0x64
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	4790      	blx	r2
 8005100:	4603      	mov	r3, r0
 8005102:	b2dc      	uxtb	r4, r3
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	4618      	mov	r0, r3
 800510a:	f008 fe6a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800510e:	463b      	mov	r3, r7
 8005110:	4618      	mov	r0, r3
 8005112:	f008 fe66 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005116:	4623      	mov	r3, r4
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bdb0      	pop	{r4, r5, r7, pc}
 8005120:	08024324 	.word	0x08024324
 8005124:	08024344 	.word	0x08024344

08005128 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 800512c:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <_Z12getTick_Fakev+0x30>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d103      	bne.n	800513e <_Z12getTick_Fakev+0x16>
		time = 0;
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <_Z12getTick_Fakev+0x30>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e004      	b.n	8005148 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <_Z12getTick_Fakev+0x30>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <_Z12getTick_Fakev+0x30>)
 8005146:	6013      	str	r3, [r2, #0]
	return time;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <_Z12getTick_Fakev+0x30>)
 800514a:	681b      	ldr	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	200004a0 	.word	0x200004a0

0800515c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005164:	2364      	movs	r3, #100	; 0x64
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005168:	4904      	ldr	r1, [pc, #16]	; (800517c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800516a:	4805      	ldr	r0, [pc, #20]	; (8005180 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 800516c:	f7fe fd82 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08005129 	.word	0x08005129
 800517c:	080050bd 	.word	0x080050bd
 8005180:	0800502d 	.word	0x0800502d

08005184 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	4917      	ldr	r1, [pc, #92]	; (80051f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005192:	4618      	mov	r0, r3
 8005194:	f008 fa6d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f006 fb40 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051a4:	4603      	mov	r3, r0
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	3294      	adds	r2, #148	; 0x94
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	4790      	blx	r2
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	4618      	mov	r0, r3
 80051b6:	f008 fe14 	bl	800dde2 <_ZN12SimpleStringD1Ev>
		mock().clear();
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	490c      	ldr	r1, [pc, #48]	; (80051f0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 80051c0:	4618      	mov	r0, r3
 80051c2:	f008 fa56 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80051c6:	f107 0310 	add.w	r3, r7, #16
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f006 fb29 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051d2:	4603      	mov	r3, r0
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	329c      	adds	r2, #156	; 0x9c
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	4790      	blx	r2
 80051de:	f107 0310 	add.w	r3, r7, #16
 80051e2:	4618      	mov	r0, r3
 80051e4:	f008 fdfd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	}
 80051e8:	bf00      	nop
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	08024324 	.word	0x08024324

080051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	f00f fe44 	bl	8014e8c <_ZN5UtestC1Ev>
 8005204:	4a03      	ldr	r2, [pc, #12]	; (8005214 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	080286c0 	.word	0x080286c0

08005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	4a05      	ldr	r2, [pc, #20]	; (8005238 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	f00f fe3f 	bl	8014eac <_ZN5UtestD1Ev>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	080286c0 	.word	0x080286c0

0800523c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffe7 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800524a:	2104      	movs	r1, #4
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f005 fe61 	bl	800af14 <_ZdlPvj>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ffc4 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800526c:	4a03      	ldr	r2, [pc, #12]	; (800527c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	080286a0 	.word	0x080286a0

08005280 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	22c0      	movs	r2, #192	; 0xc0
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 800528c:	2004      	movs	r0, #4
 800528e:	f005 fe2d 	bl	800aeec <_ZnwjPKci>
 8005292:	4604      	mov	r4, r0
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff ffe1 	bl	800525c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800529a:	4623      	mov	r3, r4
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}
 80052a4:	08023ff4 	.word	0x08023ff4

080052a8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f00e fa08 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80052b8:	4a03      	ldr	r2, [pc, #12]	; (80052c8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	080285f4 	.word	0x080285f4

080052cc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 80052cc:	b5b0      	push	{r4, r5, r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af04      	add	r7, sp, #16
 80052d2:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80052d8:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	2364      	movs	r3, #100	; 0x64
 80052e0:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80052e2:	4910      	ldr	r1, [pc, #64]	; (8005324 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80052e4:	f7fe fcc6 	bl	8003c74 <ESP_Init>
 80052e8:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80052ea:	f00f fda5 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80052ee:	4604      	mov	r4, r0
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	3338      	adds	r3, #56	; 0x38
 80052f4:	681d      	ldr	r5, [r3, #0]
 80052f6:	f00f fdaf 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80052fa:	4603      	mov	r3, r0
 80052fc:	9302      	str	r3, [sp, #8]
 80052fe:	23ce      	movs	r3, #206	; 0xce
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	2101      	movs	r1, #1
 800530c:	4620      	mov	r0, r4
 800530e:	47a8      	blx	r5

}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bdb0      	pop	{r4, r5, r7, pc}
 8005318:	200004a4 	.word	0x200004a4
 800531c:	0800502d 	.word	0x0800502d
 8005320:	08005129 	.word	0x08005129
 8005324:	080050bd 	.word	0x080050bd
 8005328:	08023ff4 	.word	0x08023ff4
 800532c:	08024358 	.word	0x08024358

08005330 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ff5a 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005340:	4a03      	ldr	r2, [pc, #12]	; (8005350 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	080285d4 	.word	0x080285d4

08005354 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	22d2      	movs	r2, #210	; 0xd2
 800535e:	4906      	ldr	r1, [pc, #24]	; (8005378 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005360:	2004      	movs	r0, #4
 8005362:	f005 fdc3 	bl	800aeec <_ZnwjPKci>
 8005366:	4604      	mov	r4, r0
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff ffe1 	bl	8005330 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800536e:	4623      	mov	r3, r4
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	08023ff4 	.word	0x08023ff4

0800537c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4618      	mov	r0, r3
 8005388:	f00e f99e 	bl	80136c8 <_ZN10UtestShellC1Ev>
 800538c:	4a03      	ldr	r2, [pc, #12]	; (800539c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	08028528 	.word	0x08028528

080053a0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 80053a0:	b5b0      	push	{r4, r5, r7, lr}
 80053a2:	b08e      	sub	sp, #56	; 0x38
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	493d      	ldr	r1, [pc, #244]	; (80054a4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80053ae:	4618      	mov	r0, r3
 80053b0:	f008 f95f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f006 fa32 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80053c0:	4604      	mov	r4, r0
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	681d      	ldr	r5, [r3, #0]
 80053c8:	f107 0310 	add.w	r3, r7, #16
 80053cc:	4936      	ldr	r1, [pc, #216]	; (80054a8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f008 f94f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80053d4:	f107 0310 	add.w	r3, r7, #16
 80053d8:	4619      	mov	r1, r3
 80053da:	4620      	mov	r0, r4
 80053dc:	47a8      	blx	r5
 80053de:	4604      	mov	r4, r0
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	334c      	adds	r3, #76	; 0x4c
 80053e4:	681d      	ldr	r5, [r3, #0]
 80053e6:	f107 0318 	add.w	r3, r7, #24
 80053ea:	4930      	ldr	r1, [pc, #192]	; (80054ac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80053ec:	4618      	mov	r0, r3
 80053ee:	f008 f940 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80053f2:	f107 0318 	add.w	r3, r7, #24
 80053f6:	4a2e      	ldr	r2, [pc, #184]	; (80054b0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80053f8:	4619      	mov	r1, r3
 80053fa:	4620      	mov	r0, r4
 80053fc:	47a8      	blx	r5
 80053fe:	f107 0318 	add.w	r3, r7, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f008 fced 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005408:	f107 0310 	add.w	r3, r7, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f008 fce8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005412:	f107 0308 	add.w	r3, r7, #8
 8005416:	4618      	mov	r0, r3
 8005418:	f008 fce3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 800541c:	f107 0320 	add.w	r3, r7, #32
 8005420:	4920      	ldr	r1, [pc, #128]	; (80054a4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005422:	4618      	mov	r0, r3
 8005424:	f008 f925 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005428:	f107 0320 	add.w	r3, r7, #32
 800542c:	2100      	movs	r1, #0
 800542e:	4618      	mov	r0, r3
 8005430:	f006 f9f8 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005434:	4604      	mov	r4, r0
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	681d      	ldr	r5, [r3, #0]
 800543c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005440:	4919      	ldr	r1, [pc, #100]	; (80054a8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005442:	4618      	mov	r0, r3
 8005444:	f008 f915 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800544c:	4619      	mov	r1, r3
 800544e:	4620      	mov	r0, r4
 8005450:	47a8      	blx	r5
 8005452:	4604      	mov	r4, r0
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	334c      	adds	r3, #76	; 0x4c
 8005458:	681d      	ldr	r5, [r3, #0]
 800545a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800545e:	4913      	ldr	r1, [pc, #76]	; (80054ac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005460:	4618      	mov	r0, r3
 8005462:	f008 f906 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 800546c:	4619      	mov	r1, r3
 800546e:	4620      	mov	r0, r4
 8005470:	47a8      	blx	r5
 8005472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005476:	4618      	mov	r0, r3
 8005478:	f008 fcb3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800547c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005480:	4618      	mov	r0, r3
 8005482:	f008 fcae 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005486:	f107 0320 	add.w	r3, r7, #32
 800548a:	4618      	mov	r0, r3
 800548c:	f008 fca9 	bl	800dde2 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005490:	4807      	ldr	r0, [pc, #28]	; (80054b0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005492:	f7fe fc21 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005496:	4807      	ldr	r0, [pc, #28]	; (80054b4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005498:	f7fe fc1e 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 800549c:	bf00      	nop
 800549e:	3738      	adds	r7, #56	; 0x38
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bdb0      	pop	{r4, r5, r7, pc}
 80054a4:	08024324 	.word	0x08024324
 80054a8:	08024328 	.word	0x08024328
 80054ac:	0802433c 	.word	0x0802433c
 80054b0:	0802422c 	.word	0x0802422c
 80054b4:	08024378 	.word	0x08024378

080054b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fe96 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054c8:	4a03      	ldr	r2, [pc, #12]	; (80054d8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	08028508 	.word	0x08028508

080054dc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	22de      	movs	r2, #222	; 0xde
 80054e6:	4906      	ldr	r1, [pc, #24]	; (8005500 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80054e8:	2004      	movs	r0, #4
 80054ea:	f005 fcff 	bl	800aeec <_ZnwjPKci>
 80054ee:	4604      	mov	r4, r0
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7ff ffe1 	bl	80054b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80054f6:	4623      	mov	r3, r4
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd90      	pop	{r4, r7, pc}
 8005500:	08023ff4 	.word	0x08023ff4

08005504 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	f00e f8da 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8005514:	4a03      	ldr	r2, [pc, #12]	; (8005524 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	0802845c 	.word	0x0802845c

08005528 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	b08f      	sub	sp, #60	; 0x3c
 800552c:	af04      	add	r7, sp, #16
 800552e:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8005530:	4a31      	ldr	r2, [pc, #196]	; (80055f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005532:	f107 030c 	add.w	r3, r7, #12
 8005536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553a:	6018      	str	r0, [r3, #0]
 800553c:	3304      	adds	r3, #4
 800553e:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005540:	2300      	movs	r3, #0
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	f107 030c 	add.w	r3, r7, #12
 8005548:	4618      	mov	r0, r3
 800554a:	f7fa fe77 	bl	800023c <strlen>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	4293      	cmp	r3, r2
 8005556:	da35      	bge.n	80055c4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005558:	f107 0314 	add.w	r3, r7, #20
 800555c:	4927      	ldr	r1, [pc, #156]	; (80055fc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 800555e:	4618      	mov	r0, r3
 8005560:	f008 f887 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f006 f95a 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005570:	4604      	mov	r4, r0
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	681d      	ldr	r5, [r3, #0]
 8005578:	f107 031c 	add.w	r3, r7, #28
 800557c:	4920      	ldr	r1, [pc, #128]	; (8005600 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 800557e:	4618      	mov	r0, r3
 8005580:	f008 f877 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005584:	f107 031c 	add.w	r3, r7, #28
 8005588:	4619      	mov	r1, r3
 800558a:	4620      	mov	r0, r4
 800558c:	47a8      	blx	r5
 800558e:	4603      	mov	r3, r0
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	3264      	adds	r2, #100	; 0x64
 8005594:	6812      	ldr	r2, [r2, #0]
 8005596:	f107 000c 	add.w	r0, r7, #12
 800559a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800559c:	4401      	add	r1, r0
 800559e:	7809      	ldrb	r1, [r1, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	4790      	blx	r2
 80055a4:	f107 031c 	add.w	r3, r7, #28
 80055a8:	4618      	mov	r0, r3
 80055aa:	f008 fc1a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	4618      	mov	r0, r3
 80055b4:	f008 fc15 	bl	800dde2 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80055b8:	f7fe fb9c 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	3301      	adds	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	e7bf      	b.n	8005544 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 80055c4:	f00f fc38 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80055c8:	4604      	mov	r4, r0
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	3324      	adds	r3, #36	; 0x24
 80055ce:	681d      	ldr	r5, [r3, #0]
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68de      	ldr	r6, [r3, #12]
 80055d6:	f00f fc3f 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80055da:	4603      	mov	r3, r0
 80055dc:	9302      	str	r3, [sp, #8]
 80055de:	23e9      	movs	r3, #233	; 0xe9
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	2300      	movs	r3, #0
 80055e8:	4632      	mov	r2, r6
 80055ea:	4903      	ldr	r1, [pc, #12]	; (80055f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80055ec:	4620      	mov	r0, r4
 80055ee:	47a8      	blx	r5

}
 80055f0:	bf00      	nop
 80055f2:	372c      	adds	r7, #44	; 0x2c
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f8:	08024380 	.word	0x08024380
 80055fc:	08024324 	.word	0x08024324
 8005600:	08024344 	.word	0x08024344
 8005604:	2000037c 	.word	0x2000037c
 8005608:	08023ff4 	.word	0x08023ff4

0800560c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fdec 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	0802843c 	.word	0x0802843c

08005630 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	22ed      	movs	r2, #237	; 0xed
 800563a:	4906      	ldr	r1, [pc, #24]	; (8005654 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 800563c:	2004      	movs	r0, #4
 800563e:	f005 fc55 	bl	800aeec <_ZnwjPKci>
 8005642:	4604      	mov	r4, r0
 8005644:	4620      	mov	r0, r4
 8005646:	f7ff ffe1 	bl	800560c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 800564a:	4623      	mov	r3, r4
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bd90      	pop	{r4, r7, pc}
 8005654:	08023ff4 	.word	0x08023ff4

08005658 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4618      	mov	r0, r3
 8005664:	f00e f830 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8005668:	4a03      	ldr	r2, [pc, #12]	; (8005678 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	08028390 	.word	0x08028390

0800567c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 800567c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567e:	b08f      	sub	sp, #60	; 0x3c
 8005680:	af04      	add	r7, sp, #16
 8005682:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005684:	4a32      	ldr	r2, [pc, #200]	; (8005750 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800568e:	6018      	str	r0, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005694:	2300      	movs	r3, #0
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	f107 0308 	add.w	r3, r7, #8
 800569c:	4618      	mov	r0, r3
 800569e:	f7fa fdcd 	bl	800023c <strlen>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	4293      	cmp	r3, r2
 80056aa:	da35      	bge.n	8005718 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	4928      	ldr	r1, [pc, #160]	; (8005754 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 ffdd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80056b8:	f107 0310 	add.w	r3, r7, #16
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f006 f8b0 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	681d      	ldr	r5, [r3, #0]
 80056cc:	f107 0318 	add.w	r3, r7, #24
 80056d0:	4921      	ldr	r1, [pc, #132]	; (8005758 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 80056d2:	4618      	mov	r0, r3
 80056d4:	f007 ffcd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80056d8:	f107 0318 	add.w	r3, r7, #24
 80056dc:	4619      	mov	r1, r3
 80056de:	4620      	mov	r0, r4
 80056e0:	47a8      	blx	r5
 80056e2:	4603      	mov	r3, r0
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	3264      	adds	r2, #100	; 0x64
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	f107 0008 	add.w	r0, r7, #8
 80056ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f0:	4401      	add	r1, r0
 80056f2:	7809      	ldrb	r1, [r1, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	4790      	blx	r2
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f008 fb70 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f008 fb6b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 800570c:	f7fe faf2 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	e7bf      	b.n	8005698 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005718:	4810      	ldr	r0, [pc, #64]	; (800575c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 800571a:	f7fe fafd 	bl	8003d18 <Read_Response>
 800571e:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8005720:	f00f fb8a 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005724:	4604      	mov	r4, r0
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	3338      	adds	r3, #56	; 0x38
 800572a:	681d      	ldr	r5, [r3, #0]
 800572c:	6a3e      	ldr	r6, [r7, #32]
 800572e:	f00f fb93 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005732:	4603      	mov	r3, r0
 8005734:	9302      	str	r3, [sp, #8]
 8005736:	23f9      	movs	r3, #249	; 0xf9
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	4b09      	ldr	r3, [pc, #36]	; (8005760 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005740:	4632      	mov	r2, r6
 8005742:	2101      	movs	r1, #1
 8005744:	4620      	mov	r0, r4
 8005746:	47a8      	blx	r5

}
 8005748:	bf00      	nop
 800574a:	372c      	adds	r7, #44	; 0x2c
 800574c:	46bd      	mov	sp, r7
 800574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005750:	08024380 	.word	0x08024380
 8005754:	08024324 	.word	0x08024324
 8005758:	08024344 	.word	0x08024344
 800575c:	08023f80 	.word	0x08023f80
 8005760:	08023ff4 	.word	0x08023ff4
 8005764:	08024358 	.word	0x08024358

08005768 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fd3e 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005778:	4a03      	ldr	r2, [pc, #12]	; (8005788 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	08028370 	.word	0x08028370

0800578c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	22fe      	movs	r2, #254	; 0xfe
 8005796:	4906      	ldr	r1, [pc, #24]	; (80057b0 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005798:	2004      	movs	r0, #4
 800579a:	f005 fba7 	bl	800aeec <_ZnwjPKci>
 800579e:	4604      	mov	r4, r0
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff ffe1 	bl	8005768 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 80057a6:	4623      	mov	r3, r4
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}
 80057b0:	08023ff4 	.word	0x08023ff4

080057b4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	f00d ff82 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80057c4:	4a03      	ldr	r2, [pc, #12]	; (80057d4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	080282c4 	.word	0x080282c4

080057d8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 80057d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af04      	add	r7, sp, #16
 80057de:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 80057e0:	2304      	movs	r3, #4
 80057e2:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 80057e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057e8:	4811      	ldr	r0, [pc, #68]	; (8005830 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 80057ea:	f7fe faa7 	bl	8003d3c <Wait_Response>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d100      	bne.n	80057fa <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80057f8:	e7f4      	b.n	80057e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80057fa:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80057fc:	f00f fb1c 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005800:	4604      	mov	r4, r0
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	3338      	adds	r3, #56	; 0x38
 8005806:	681d      	ldr	r5, [r3, #0]
 8005808:	7bfe      	ldrb	r6, [r7, #15]
 800580a:	f00f fb25 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800580e:	4603      	mov	r3, r0
 8005810:	9302      	str	r3, [sp, #8]
 8005812:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 800581e:	4632      	mov	r2, r6
 8005820:	2101      	movs	r1, #1
 8005822:	4620      	mov	r0, r4
 8005824:	47a8      	blx	r5

}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582e:	bf00      	nop
 8005830:	08023f80 	.word	0x08023f80
 8005834:	08023ff4 	.word	0x08023ff4
 8005838:	08024388 	.word	0x08024388

0800583c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff fcd4 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800584c:	4a03      	ldr	r2, [pc, #12]	; (800585c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	080282a4 	.word	0x080282a4

08005860 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800586c:	4906      	ldr	r1, [pc, #24]	; (8005888 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800586e:	2004      	movs	r0, #4
 8005870:	f005 fb3c 	bl	800aeec <_ZnwjPKci>
 8005874:	4604      	mov	r4, r0
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff ffe0 	bl	800583c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800587c:	4623      	mov	r3, r4
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bd90      	pop	{r4, r7, pc}
 8005886:	bf00      	nop
 8005888:	08023ff4 	.word	0x08023ff4

0800588c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	f00d ff16 	bl	80136c8 <_ZN10UtestShellC1Ev>
 800589c:	4a03      	ldr	r2, [pc, #12]	; (80058ac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	080281f8 	.word	0x080281f8

080058b0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	b08f      	sub	sp, #60	; 0x3c
 80058b4:	af04      	add	r7, sp, #16
 80058b6:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 80058be:	4a38      	ldr	r2, [pc, #224]	; (80059a0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058c8:	6018      	str	r0, [r3, #0]
 80058ca:	3304      	adds	r3, #4
 80058cc:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 80058ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058d2:	4834      	ldr	r0, [pc, #208]	; (80059a4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 80058d4:	f7fe fa32 	bl	8003d3c <Wait_Response>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 80058de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d141      	bne.n	800596a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fa fca4 	bl	800023c <strlen>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	4293      	cmp	r3, r2
 80058fc:	dae7      	bge.n	80058ce <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	4929      	ldr	r1, [pc, #164]	; (80059a8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005904:	4618      	mov	r0, r3
 8005906:	f007 feb4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800590a:	f107 0310 	add.w	r3, r7, #16
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f005 ff87 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005916:	4604      	mov	r4, r0
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	330c      	adds	r3, #12
 800591c:	681d      	ldr	r5, [r3, #0]
 800591e:	f107 0318 	add.w	r3, r7, #24
 8005922:	4922      	ldr	r1, [pc, #136]	; (80059ac <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005924:	4618      	mov	r0, r3
 8005926:	f007 fea4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	4619      	mov	r1, r3
 8005930:	4620      	mov	r0, r4
 8005932:	47a8      	blx	r5
 8005934:	4603      	mov	r3, r0
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	3264      	adds	r2, #100	; 0x64
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	f107 0008 	add.w	r0, r7, #8
 8005940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005942:	4401      	add	r1, r0
 8005944:	7809      	ldrb	r1, [r1, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	4790      	blx	r2
 800594a:	f107 0318 	add.w	r3, r7, #24
 800594e:	4618      	mov	r0, r3
 8005950:	f008 fa47 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005954:	f107 0310 	add.w	r3, r7, #16
 8005958:	4618      	mov	r0, r3
 800595a:	f008 fa42 	bl	800dde2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800595e:	f7fe f9c9 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	3301      	adds	r3, #1
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	e7bf      	b.n	80058ea <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 800596a:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 800596c:	f00f fa64 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005970:	4604      	mov	r4, r0
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	3338      	adds	r3, #56	; 0x38
 8005976:	681d      	ldr	r5, [r3, #0]
 8005978:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 800597c:	f00f fa6c 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005980:	4603      	mov	r3, r0
 8005982:	9302      	str	r3, [sp, #8]
 8005984:	f240 1321 	movw	r3, #289	; 0x121
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005990:	4632      	mov	r2, r6
 8005992:	2100      	movs	r1, #0
 8005994:	4620      	mov	r0, r4
 8005996:	47a8      	blx	r5
}
 8005998:	bf00      	nop
 800599a:	372c      	adds	r7, #44	; 0x2c
 800599c:	46bd      	mov	sp, r7
 800599e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a0:	08024380 	.word	0x08024380
 80059a4:	08023f80 	.word	0x08023f80
 80059a8:	08024324 	.word	0x08024324
 80059ac:	08024344 	.word	0x08024344
 80059b0:	08023ff4 	.word	0x08023ff4
 80059b4:	080243bc 	.word	0x080243bc

080059b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff fc16 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059c8:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	080281d8 	.word	0x080281d8

080059dc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80059e8:	4906      	ldr	r1, [pc, #24]	; (8005a04 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80059ea:	2004      	movs	r0, #4
 80059ec:	f005 fa7e 	bl	800aeec <_ZnwjPKci>
 80059f0:	4604      	mov	r4, r0
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff ffe0 	bl	80059b8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80059f8:	4623      	mov	r3, r4
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd90      	pop	{r4, r7, pc}
 8005a02:	bf00      	nop
 8005a04:	08023ff4 	.word	0x08023ff4

08005a08 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f00d fe58 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8005a18:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	0802812c 	.word	0x0802812c

08005a2c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a2e:	b08f      	sub	sp, #60	; 0x3c
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 8005a3a:	f107 030c 	add.w	r3, r7, #12
 8005a3e:	492f      	ldr	r1, [pc, #188]	; (8005afc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	f007 fe16 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f005 fee9 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a52:	4604      	mov	r4, r0
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	681d      	ldr	r5, [r3, #0]
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	4928      	ldr	r1, [pc, #160]	; (8005b00 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005a60:	4618      	mov	r0, r3
 8005a62:	f007 fe06 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	47a8      	blx	r5
 8005a70:	4604      	mov	r4, r0
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	334c      	adds	r3, #76	; 0x4c
 8005a76:	681d      	ldr	r5, [r3, #0]
 8005a78:	f107 031c 	add.w	r3, r7, #28
 8005a7c:	4921      	ldr	r1, [pc, #132]	; (8005b04 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f007 fdf7 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005a84:	f107 031c 	add.w	r3, r7, #28
 8005a88:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	47a8      	blx	r5
 8005a90:	f107 031c 	add.w	r3, r7, #28
 8005a94:	4618      	mov	r0, r3
 8005a96:	f008 f9a4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f008 f99f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005aa4:	f107 030c 	add.w	r3, r7, #12
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f008 f99a 	bl	800dde2 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005aae:	4917      	ldr	r1, [pc, #92]	; (8005b0c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005ab0:	4817      	ldr	r0, [pc, #92]	; (8005b10 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005ab2:	f7fe f985 	bl	8003dc0 <Connect_Wifi>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d100      	bne.n	8005ac6 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005ac4:	e7f3      	b.n	8005aae <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005ac6:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005ac8:	f00f f9b6 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005acc:	4604      	mov	r4, r0
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	3338      	adds	r3, #56	; 0x38
 8005ad2:	681d      	ldr	r5, [r3, #0]
 8005ad4:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005ad8:	f00f f9be 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005adc:	4603      	mov	r3, r0
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	f240 1337 	movw	r3, #311	; 0x137
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005aec:	4632      	mov	r2, r6
 8005aee:	2101      	movs	r1, #1
 8005af0:	4620      	mov	r0, r4
 8005af2:	47a8      	blx	r5

}
 8005af4:	bf00      	nop
 8005af6:	372c      	adds	r7, #44	; 0x2c
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afc:	08024324 	.word	0x08024324
 8005b00:	08024328 	.word	0x08024328
 8005b04:	0802433c 	.word	0x0802433c
 8005b08:	08023f84 	.word	0x08023f84
 8005b0c:	080243e8 	.word	0x080243e8
 8005b10:	080243f0 	.word	0x080243f0
 8005b14:	08023ff4 	.word	0x08023ff4
 8005b18:	080243f8 	.word	0x080243f8

08005b1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fb64 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005b2c:	4a03      	ldr	r2, [pc, #12]	; (8005b3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	0802810c 	.word	0x0802810c

08005b40 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	f240 123b 	movw	r2, #315	; 0x13b
 8005b4c:	4906      	ldr	r1, [pc, #24]	; (8005b68 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005b4e:	2004      	movs	r0, #4
 8005b50:	f005 f9cc 	bl	800aeec <_ZnwjPKci>
 8005b54:	4604      	mov	r4, r0
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff ffe0 	bl	8005b1c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08023ff4 	.word	0x08023ff4

08005b6c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f00d fda6 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8005b7c:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	08028060 	.word	0x08028060

08005b90 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	b0e1      	sub	sp, #388	; 0x184
 8005b94:	af04      	add	r7, sp, #16
 8005b96:	1d3b      	adds	r3, r7, #4
 8005b98:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005b9a:	4a75      	ldr	r2, [pc, #468]	; (8005d70 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005b9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	2296      	movs	r2, #150	; 0x96
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f01b fa39 	bl	802101c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4a71      	ldr	r2, [pc, #452]	; (8005d74 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	2396      	movs	r3, #150	; 0x96
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f01b fa30 	bl	802101c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005bc2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	dc46      	bgt.n	8005c58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005bca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bce:	496a      	ldr	r1, [pc, #424]	; (8005d78 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f007 fd4e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005bd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fe21 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005be2:	4604      	mov	r4, r0
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	681d      	ldr	r5, [r3, #0]
 8005bea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bee:	4963      	ldr	r1, [pc, #396]	; (8005d7c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f007 fd3e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005bf6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	47a8      	blx	r5
 8005c00:	4604      	mov	r4, r0
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	334c      	adds	r3, #76	; 0x4c
 8005c06:	681d      	ldr	r5, [r3, #0]
 8005c08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c0c:	495c      	ldr	r1, [pc, #368]	; (8005d80 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f007 fd2f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005c14:	f107 0208 	add.w	r2, r7, #8
 8005c18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c1c:	2132      	movs	r1, #50	; 0x32
 8005c1e:	fb01 f303 	mul.w	r3, r1, r3
 8005c22:	441a      	add	r2, r3
 8005c24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	47a8      	blx	r5
 8005c2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c32:	4618      	mov	r0, r3
 8005c34:	f008 f8d5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f008 f8d0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c46:	4618      	mov	r0, r3
 8005c48:	f008 f8cb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005c4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c50:	3301      	adds	r3, #1
 8005c52:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c56:	e7b4      	b.n	8005bc2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c64:	4947      	ldr	r1, [pc, #284]	; (8005d84 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005c66:	4848      	ldr	r0, [pc, #288]	; (8005d88 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005c68:	f7fe f8aa 	bl	8003dc0 <Connect_Wifi>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005c72:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d15d      	bne.n	8005d36 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005c7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	dcf0      	bgt.n	8005c64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c88:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c90:	2132      	movs	r1, #50	; 0x32
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa facf 	bl	800023c <strlen>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	da3f      	bge.n	8005d2a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005caa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005cae:	4932      	ldr	r1, [pc, #200]	; (8005d78 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f007 fcde 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005cb6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f005 fdb1 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	681d      	ldr	r5, [r3, #0]
 8005cca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cce:	492f      	ldr	r1, [pc, #188]	; (8005d8c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f007 fcce 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005cd6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4620      	mov	r0, r4
 8005cde:	47a8      	blx	r5
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	3264      	adds	r2, #100	; 0x64
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005cec:	2032      	movs	r0, #50	; 0x32
 8005cee:	fb00 f101 	mul.w	r1, r0, r1
 8005cf2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005cf6:	4408      	add	r0, r1
 8005cf8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005cfc:	4401      	add	r1, r0
 8005cfe:	39d0      	subs	r1, #208	; 0xd0
 8005d00:	7809      	ldrb	r1, [r1, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	4790      	blx	r2
 8005d06:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f008 f869 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005d10:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005d14:	4618      	mov	r0, r3
 8005d16:	f008 f864 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005d1a:	f7fd ffeb 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005d1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005d22:	3301      	adds	r3, #1
 8005d24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005d28:	e7ae      	b.n	8005c88 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 8005d2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d2e:	3301      	adds	r3, #1
 8005d30:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005d34:	e796      	b.n	8005c64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 8005d36:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8005d38:	f00f f87e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	3338      	adds	r3, #56	; 0x38
 8005d42:	681d      	ldr	r5, [r3, #0]
 8005d44:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005d48:	f00f f886 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	9302      	str	r3, [sp, #8]
 8005d50:	f240 1363 	movw	r3, #355	; 0x163
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	2103      	movs	r1, #3
 8005d60:	4620      	mov	r0, r4
 8005d62:	47a8      	blx	r5

}
 8005d64:	bf00      	nop
 8005d66:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08024450 	.word	0x08024450
 8005d74:	080244e8 	.word	0x080244e8
 8005d78:	08024324 	.word	0x08024324
 8005d7c:	08024328 	.word	0x08024328
 8005d80:	0802433c 	.word	0x0802433c
 8005d84:	080243e8 	.word	0x080243e8
 8005d88:	080243f0 	.word	0x080243f0
 8005d8c:	08024344 	.word	0x08024344
 8005d90:	08023ff4 	.word	0x08023ff4
 8005d94:	08024424 	.word	0x08024424

08005d98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fa26 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005da8:	4a03      	ldr	r2, [pc, #12]	; (8005db8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	08028040 	.word	0x08028040

08005dbc <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	f240 1267 	movw	r2, #359	; 0x167
 8005dc8:	4906      	ldr	r1, [pc, #24]	; (8005de4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005dca:	2004      	movs	r0, #4
 8005dcc:	f005 f88e 	bl	800aeec <_ZnwjPKci>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7ff ffe0 	bl	8005d98 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005dd8:	4623      	mov	r3, r4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	08023ff4 	.word	0x08023ff4

08005de8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f00d fc68 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8005df8:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	08027f94 	.word	0x08027f94

08005e0c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0e:	b0e1      	sub	sp, #388	; 0x184
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	1d3b      	adds	r3, r7, #4
 8005e14:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005e16:	4a73      	ldr	r2, [pc, #460]	; (8005fe4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 8005e18:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	2296      	movs	r2, #150	; 0x96
 8005e20:	4618      	mov	r0, r3
 8005e22:	f01b f8fb 	bl	802101c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	4a6f      	ldr	r2, [pc, #444]	; (8005fe8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	4611      	mov	r1, r2
 8005e30:	2396      	movs	r3, #150	; 0x96
 8005e32:	461a      	mov	r2, r3
 8005e34:	f01b f8f2 	bl	802101c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	dc46      	bgt.n	8005ed4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005e46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e4a:	4968      	ldr	r1, [pc, #416]	; (8005fec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f007 fc10 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005e52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f005 fce3 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e5e:	4604      	mov	r4, r0
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	681d      	ldr	r5, [r3, #0]
 8005e66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e6a:	4961      	ldr	r1, [pc, #388]	; (8005ff0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f007 fc00 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005e72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e76:	4619      	mov	r1, r3
 8005e78:	4620      	mov	r0, r4
 8005e7a:	47a8      	blx	r5
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	334c      	adds	r3, #76	; 0x4c
 8005e82:	681d      	ldr	r5, [r3, #0]
 8005e84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e88:	495a      	ldr	r1, [pc, #360]	; (8005ff4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f007 fbf1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005e90:	f107 0208 	add.w	r2, r7, #8
 8005e94:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e98:	2132      	movs	r1, #50	; 0x32
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	441a      	add	r2, r3
 8005ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	47a8      	blx	r5
 8005eaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f007 ff97 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005eb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f007 ff92 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005ebe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f007 ff8d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005ec8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005ed2:	e7b4      	b.n	8005e3e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005eda:	4947      	ldr	r1, [pc, #284]	; (8005ff8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005edc:	4847      	ldr	r0, [pc, #284]	; (8005ffc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005ede:	f7fd ff6f 	bl	8003dc0 <Connect_Wifi>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005ee8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d15d      	bne.n	8005fac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 8005ef0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	dcf0      	bgt.n	8005eda <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005efe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005f02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005f06:	2132      	movs	r1, #50	; 0x32
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fa f994 	bl	800023c <strlen>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	da3f      	bge.n	8005fa0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005f20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f24:	4931      	ldr	r1, [pc, #196]	; (8005fec <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005f26:	4618      	mov	r0, r3
 8005f28:	f007 fba3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005f2c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f005 fc76 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	681d      	ldr	r5, [r3, #0]
 8005f40:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f44:	492e      	ldr	r1, [pc, #184]	; (8006000 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005f46:	4618      	mov	r0, r3
 8005f48:	f007 fb93 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8005f4c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f50:	4619      	mov	r1, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	47a8      	blx	r5
 8005f56:	4603      	mov	r3, r0
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	3264      	adds	r2, #100	; 0x64
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005f62:	2032      	movs	r0, #50	; 0x32
 8005f64:	fb00 f101 	mul.w	r1, r0, r1
 8005f68:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005f6c:	4408      	add	r0, r1
 8005f6e:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005f72:	4401      	add	r1, r0
 8005f74:	39d0      	subs	r1, #208	; 0xd0
 8005f76:	7809      	ldrb	r1, [r1, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	4790      	blx	r2
 8005f7c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f80:	4618      	mov	r0, r3
 8005f82:	f007 ff2e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8005f86:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f007 ff29 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005f90:	f7fd feb0 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005f94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f98:	3301      	adds	r3, #1
 8005f9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f9e:	e7ae      	b.n	8005efe <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8005fa0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005faa:	e796      	b.n	8005eda <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 8005fac:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8005fae:	f00e ff43 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	3338      	adds	r3, #56	; 0x38
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005fbe:	f00e ff4b 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	9302      	str	r3, [sp, #8]
 8005fc6:	f240 138f 	movw	r3, #399	; 0x18f
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005fd2:	4632      	mov	r2, r6
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	47a8      	blx	r5

}
 8005fda:	bf00      	nop
 8005fdc:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe4:	080245a8 	.word	0x080245a8
 8005fe8:	080244e8 	.word	0x080244e8
 8005fec:	08024324 	.word	0x08024324
 8005ff0:	08024328 	.word	0x08024328
 8005ff4:	0802433c 	.word	0x0802433c
 8005ff8:	080243e8 	.word	0x080243e8
 8005ffc:	080243f0 	.word	0x080243f0
 8006000:	08024344 	.word	0x08024344
 8006004:	08023ff4 	.word	0x08023ff4
 8006008:	08024580 	.word	0x08024580

0800600c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff f8ec 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08027f74 	.word	0x08027f74

08006030 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	f240 1293 	movw	r2, #403	; 0x193
 800603c:	4906      	ldr	r1, [pc, #24]	; (8006058 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800603e:	2004      	movs	r0, #4
 8006040:	f004 ff54 	bl	800aeec <_ZnwjPKci>
 8006044:	4604      	mov	r4, r0
 8006046:	4620      	mov	r0, r4
 8006048:	f7ff ffe0 	bl	800600c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 800604c:	4623      	mov	r3, r4
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}
 8006056:	bf00      	nop
 8006058:	08023ff4 	.word	0x08023ff4

0800605c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f00d fb2e 	bl	80136c8 <_ZN10UtestShellC1Ev>
 800606c:	4a03      	ldr	r2, [pc, #12]	; (800607c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	08027ec8 	.word	0x08027ec8

08006080 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006082:	b08f      	sub	sp, #60	; 0x3c
 8006084:	af04      	add	r7, sp, #16
 8006086:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006088:	f107 030c 	add.w	r3, r7, #12
 800608c:	492e      	ldr	r1, [pc, #184]	; (8006148 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 800608e:	4618      	mov	r0, r3
 8006090:	f007 faef 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f005 fbc2 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060a0:	4604      	mov	r4, r0
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	330c      	adds	r3, #12
 80060a6:	681d      	ldr	r5, [r3, #0]
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4927      	ldr	r1, [pc, #156]	; (800614c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f007 fadf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4619      	mov	r1, r3
 80060ba:	4620      	mov	r0, r4
 80060bc:	47a8      	blx	r5
 80060be:	4604      	mov	r4, r0
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	334c      	adds	r3, #76	; 0x4c
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	f107 031c 	add.w	r3, r7, #28
 80060ca:	4921      	ldr	r1, [pc, #132]	; (8006150 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80060cc:	4618      	mov	r0, r3
 80060ce:	f007 fad0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80060d2:	f107 031c 	add.w	r3, r7, #28
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80060d8:	4619      	mov	r1, r3
 80060da:	4620      	mov	r0, r4
 80060dc:	47a8      	blx	r5
 80060de:	f107 031c 	add.w	r3, r7, #28
 80060e2:	4618      	mov	r0, r3
 80060e4:	f007 fe7d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80060e8:	f107 0314 	add.w	r3, r7, #20
 80060ec:	4618      	mov	r0, r3
 80060ee:	f007 fe78 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	4618      	mov	r0, r3
 80060f8:	f007 fe73 	bl	800dde2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060fc:	f7fd fe9a 	bl	8003e34 <Disconnect_Wifi>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8006106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800610a:	2b04      	cmp	r3, #4
 800610c:	d100      	bne.n	8006110 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 800610e:	e7f5      	b.n	80060fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 8006110:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006112:	f00e fe91 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006116:	4604      	mov	r4, r0
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	3338      	adds	r3, #56	; 0x38
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8006122:	f00e fe99 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006126:	4603      	mov	r3, r0
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8006136:	4632      	mov	r2, r6
 8006138:	2101      	movs	r1, #1
 800613a:	4620      	mov	r0, r4
 800613c:	47a8      	blx	r5
}
 800613e:	bf00      	nop
 8006140:	372c      	adds	r7, #44	; 0x2c
 8006142:	46bd      	mov	sp, r7
 8006144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006146:	bf00      	nop
 8006148:	08024324 	.word	0x08024324
 800614c:	08024328 	.word	0x08024328
 8006150:	0802433c 	.word	0x0802433c
 8006154:	08023f94 	.word	0x08023f94
 8006158:	08023ff4 	.word	0x08023ff4
 800615c:	080243f8 	.word	0x080243f8

08006160 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff f842 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006170:	4a03      	ldr	r2, [pc, #12]	; (8006180 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	08027ea8 	.word	0x08027ea8

08006184 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	f240 12a5 	movw	r2, #421	; 0x1a5
 8006190:	4906      	ldr	r1, [pc, #24]	; (80061ac <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006192:	2004      	movs	r0, #4
 8006194:	f004 feaa 	bl	800aeec <_ZnwjPKci>
 8006198:	4604      	mov	r4, r0
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff ffe0 	bl	8006160 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 80061a0:	4623      	mov	r3, r4
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}
 80061aa:	bf00      	nop
 80061ac:	08023ff4 	.word	0x08023ff4

080061b0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f00d fa84 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80061c0:	4a03      	ldr	r2, [pc, #12]	; (80061d0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	08027dfc 	.word	0x08027dfc

080061d4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80061d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d6:	b093      	sub	sp, #76	; 0x4c
 80061d8:	af04      	add	r7, sp, #16
 80061da:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	494a      	ldr	r1, [pc, #296]	; (800630c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f007 fa45 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f005 fb18 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80061f4:	4604      	mov	r4, r0
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	681d      	ldr	r5, [r3, #0]
 80061fc:	f107 0310 	add.w	r3, r7, #16
 8006200:	4943      	ldr	r1, [pc, #268]	; (8006310 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 8006202:	4618      	mov	r0, r3
 8006204:	f007 fa35 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	4619      	mov	r1, r3
 800620e:	4620      	mov	r0, r4
 8006210:	47a8      	blx	r5
 8006212:	4604      	mov	r4, r0
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	334c      	adds	r3, #76	; 0x4c
 8006218:	681d      	ldr	r5, [r3, #0]
 800621a:	f107 0318 	add.w	r3, r7, #24
 800621e:	493d      	ldr	r1, [pc, #244]	; (8006314 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 8006220:	4618      	mov	r0, r3
 8006222:	f007 fa26 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	4a3b      	ldr	r2, [pc, #236]	; (8006318 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 800622c:	4619      	mov	r1, r3
 800622e:	4620      	mov	r0, r4
 8006230:	47a8      	blx	r5
 8006232:	f107 0318 	add.w	r3, r7, #24
 8006236:	4618      	mov	r0, r3
 8006238:	f007 fdd3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800623c:	f107 0310 	add.w	r3, r7, #16
 8006240:	4618      	mov	r0, r3
 8006242:	f007 fdce 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	4618      	mov	r0, r3
 800624c:	f007 fdc9 	bl	800dde2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006250:	f7fd fdf0 	bl	8003e34 <Disconnect_Wifi>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800625a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800625e:	2b04      	cmp	r3, #4
 8006260:	d139      	bne.n	80062d6 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006262:	2300      	movs	r3, #0
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	2b01      	cmp	r3, #1
 800626a:	dcf1      	bgt.n	8006250 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800626c:	f107 0320 	add.w	r3, r7, #32
 8006270:	4926      	ldr	r1, [pc, #152]	; (800630c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006272:	4618      	mov	r0, r3
 8006274:	f007 f9fd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006278:	f107 0320 	add.w	r3, r7, #32
 800627c:	2100      	movs	r1, #0
 800627e:	4618      	mov	r0, r3
 8006280:	f005 fad0 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006284:	4604      	mov	r4, r0
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	681d      	ldr	r5, [r3, #0]
 800628c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006290:	4922      	ldr	r1, [pc, #136]	; (800631c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8006292:	4618      	mov	r0, r3
 8006294:	f007 f9ed 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800629c:	4619      	mov	r1, r3
 800629e:	4620      	mov	r0, r4
 80062a0:	47a8      	blx	r5
 80062a2:	4603      	mov	r3, r0
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	3264      	adds	r2, #100	; 0x64
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	481d      	ldr	r0, [pc, #116]	; (8006320 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 80062ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062ae:	4401      	add	r1, r0
 80062b0:	7809      	ldrb	r1, [r1, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	4790      	blx	r2
 80062b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ba:	4618      	mov	r0, r3
 80062bc:	f007 fd91 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80062c0:	f107 0320 	add.w	r3, r7, #32
 80062c4:	4618      	mov	r0, r3
 80062c6:	f007 fd8c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80062ca:	f7fd fd13 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	3301      	adds	r3, #1
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
 80062d4:	e7c7      	b.n	8006266 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80062d6:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80062d8:	f00e fdae 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80062dc:	4604      	mov	r4, r0
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	3338      	adds	r3, #56	; 0x38
 80062e2:	681d      	ldr	r5, [r3, #0]
 80062e4:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80062e8:	f00e fdb6 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062ec:	4603      	mov	r3, r0
 80062ee:	9302      	str	r3, [sp, #8]
 80062f0:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80062fc:	4632      	mov	r2, r6
 80062fe:	2102      	movs	r1, #2
 8006300:	4620      	mov	r0, r4
 8006302:	47a8      	blx	r5
}
 8006304:	bf00      	nop
 8006306:	373c      	adds	r7, #60	; 0x3c
 8006308:	46bd      	mov	sp, r7
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630c:	08024324 	.word	0x08024324
 8006310:	08024328 	.word	0x08024328
 8006314:	0802433c 	.word	0x0802433c
 8006318:	08023f94 	.word	0x08023f94
 800631c:	08024344 	.word	0x08024344
 8006320:	08023f80 	.word	0x08023f80
 8006324:	08023ff4 	.word	0x08023ff4
 8006328:	08024580 	.word	0x08024580

0800632c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe ff5c 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800633c:	4a03      	ldr	r2, [pc, #12]	; (800634c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08027ddc 	.word	0x08027ddc

08006350 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	f240 12bd 	movw	r2, #445	; 0x1bd
 800635c:	4906      	ldr	r1, [pc, #24]	; (8006378 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800635e:	2004      	movs	r0, #4
 8006360:	f004 fdc4 	bl	800aeec <_ZnwjPKci>
 8006364:	4604      	mov	r4, r0
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff ffe0 	bl	800632c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 800636c:	4623      	mov	r3, r4
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bd90      	pop	{r4, r7, pc}
 8006376:	bf00      	nop
 8006378:	08023ff4 	.word	0x08023ff4

0800637c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4618      	mov	r0, r3
 8006388:	f00d f99e 	bl	80136c8 <_ZN10UtestShellC1Ev>
 800638c:	4a03      	ldr	r2, [pc, #12]	; (800639c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	08027d30 	.word	0x08027d30

080063a0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 80063a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a2:	b09b      	sub	sp, #108	; 0x6c
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 80063a8:	4a6a      	ldr	r2, [pc, #424]	; (8006554 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80063b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 80063b4:	4a68      	ldr	r2, [pc, #416]	; (8006558 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80063bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80063c0:	2300      	movs	r3, #0
 80063c2:	657b      	str	r3, [r7, #84]	; 0x54
 80063c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	dc43      	bgt.n	8006452 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80063ca:	f107 0320 	add.w	r3, r7, #32
 80063ce:	4963      	ldr	r1, [pc, #396]	; (800655c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 80063d0:	4618      	mov	r0, r3
 80063d2:	f007 f94e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80063d6:	f107 0320 	add.w	r3, r7, #32
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f005 fa21 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063e2:	4604      	mov	r4, r0
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	681d      	ldr	r5, [r3, #0]
 80063ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063ee:	495c      	ldr	r1, [pc, #368]	; (8006560 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 80063f0:	4618      	mov	r0, r3
 80063f2:	f007 f93e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80063f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063fa:	4619      	mov	r1, r3
 80063fc:	4620      	mov	r0, r4
 80063fe:	47a8      	blx	r5
 8006400:	4604      	mov	r4, r0
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	334c      	adds	r3, #76	; 0x4c
 8006406:	681d      	ldr	r5, [r3, #0]
 8006408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800640c:	4955      	ldr	r1, [pc, #340]	; (8006564 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 800640e:	4618      	mov	r0, r3
 8006410:	f007 f92f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800641c:	4413      	add	r3, r2
 800641e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8006422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006426:	4619      	mov	r1, r3
 8006428:	4620      	mov	r0, r4
 800642a:	47a8      	blx	r5
 800642c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006430:	4618      	mov	r0, r3
 8006432:	f007 fcd6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800643a:	4618      	mov	r0, r3
 800643c:	f007 fcd1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006440:	f107 0320 	add.w	r3, r7, #32
 8006444:	4618      	mov	r0, r3
 8006446:	f007 fccc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800644a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644c:	3301      	adds	r3, #1
 800644e:	657b      	str	r3, [r7, #84]	; 0x54
 8006450:	e7b8      	b.n	80063c4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006456:	f107 0114 	add.w	r1, r7, #20
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	2203      	movs	r2, #3
 8006460:	4618      	mov	r0, r3
 8006462:	f7fd fd03 	bl	8003e6c <Command_Process>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 800646c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006470:	2b04      	cmp	r3, #4
 8006472:	d153      	bne.n	800651c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	2b02      	cmp	r3, #2
 8006478:	dced      	bgt.n	8006456 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800647a:	2300      	movs	r3, #0
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800647e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006486:	4413      	add	r3, r2
 8006488:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800648c:	4618      	mov	r0, r3
 800648e:	f7f9 fed5 	bl	800023c <strlen>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	4293      	cmp	r3, r2
 800649a:	da3b      	bge.n	8006514 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800649c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064a0:	492e      	ldr	r1, [pc, #184]	; (800655c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 80064a2:	4618      	mov	r0, r3
 80064a4:	f007 f8e5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80064a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f005 f9b8 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064b4:	4604      	mov	r4, r0
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	681d      	ldr	r5, [r3, #0]
 80064bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064c0:	4929      	ldr	r1, [pc, #164]	; (8006568 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 80064c2:	4618      	mov	r0, r3
 80064c4:	f007 f8d5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80064c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064cc:	4619      	mov	r1, r3
 80064ce:	4620      	mov	r0, r4
 80064d0:	47a8      	blx	r5
 80064d2:	4602      	mov	r2, r0
 80064d4:	6813      	ldr	r3, [r2, #0]
 80064d6:	3364      	adds	r3, #100	; 0x64
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80064e2:	440b      	add	r3, r1
 80064e4:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80064e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ea:	440b      	add	r3, r1
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	47a0      	blx	r4
 80064f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064f8:	4618      	mov	r0, r3
 80064fa:	f007 fc72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80064fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006502:	4618      	mov	r0, r3
 8006504:	f007 fc6d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006508:	f7fd fbf4 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800650c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650e:	3301      	adds	r3, #1
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006512:	e7b4      	b.n	800647e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 8006514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006516:	3301      	adds	r3, #1
 8006518:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 800651a:	e79c      	b.n	8006456 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 800651c:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 800651e:	f00e fc8b 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006522:	4604      	mov	r4, r0
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	3338      	adds	r3, #56	; 0x38
 8006528:	681d      	ldr	r5, [r3, #0]
 800652a:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 800652e:	f00e fc93 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006532:	4603      	mov	r3, r0
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	f240 13e5 	movw	r3, #485	; 0x1e5
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 8006542:	4632      	mov	r2, r6
 8006544:	2102      	movs	r1, #2
 8006546:	4620      	mov	r0, r4
 8006548:	47a8      	blx	r5

}
 800654a:	bf00      	nop
 800654c:	375c      	adds	r7, #92	; 0x5c
 800654e:	46bd      	mov	sp, r7
 8006550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006552:	bf00      	nop
 8006554:	08024640 	.word	0x08024640
 8006558:	0802464c 	.word	0x0802464c
 800655c:	08024324 	.word	0x08024324
 8006560:	08024328 	.word	0x08024328
 8006564:	0802433c 	.word	0x0802433c
 8006568:	08024344 	.word	0x08024344
 800656c:	08023ff4 	.word	0x08023ff4
 8006570:	08024580 	.word	0x08024580

08006574 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe fe38 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006584:	4a03      	ldr	r2, [pc, #12]	; (8006594 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	08027d10 	.word	0x08027d10

08006598 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	f240 12e9 	movw	r2, #489	; 0x1e9
 80065a4:	4906      	ldr	r1, [pc, #24]	; (80065c0 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 80065a6:	2004      	movs	r0, #4
 80065a8:	f004 fca0 	bl	800aeec <_ZnwjPKci>
 80065ac:	4604      	mov	r4, r0
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7ff ffe0 	bl	8006574 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 80065b4:	4623      	mov	r3, r4
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}
 80065be:	bf00      	nop
 80065c0:	08023ff4 	.word	0x08023ff4

080065c4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f00d f87a 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80065d4:	4a03      	ldr	r2, [pc, #12]	; (80065e4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	08027c64 	.word	0x08027c64

080065e8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 80065e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ea:	b0b1      	sub	sp, #196	; 0xc4
 80065ec:	af04      	add	r7, sp, #16
 80065ee:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80065f0:	4a71      	ldr	r2, [pc, #452]	; (80067b8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 80065f2:	f107 0314 	add.w	r3, r7, #20
 80065f6:	4611      	mov	r1, r2
 80065f8:	2264      	movs	r2, #100	; 0x64
 80065fa:	4618      	mov	r0, r3
 80065fc:	f01a fd0e 	bl	802101c <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8006600:	4a6e      	ldr	r2, [pc, #440]	; (80067bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800660a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 800660e:	2300      	movs	r3, #0
 8006610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006618:	2b01      	cmp	r3, #1
 800661a:	dc46      	bgt.n	80066aa <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800661c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006620:	4967      	ldr	r1, [pc, #412]	; (80067c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 8006622:	4618      	mov	r0, r3
 8006624:	f007 f825 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006628:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f005 f8f8 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006634:	4604      	mov	r4, r0
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	681d      	ldr	r5, [r3, #0]
 800663c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006640:	4960      	ldr	r1, [pc, #384]	; (80067c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 8006642:	4618      	mov	r0, r3
 8006644:	f007 f815 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006648:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800664c:	4619      	mov	r1, r3
 800664e:	4620      	mov	r0, r4
 8006650:	47a8      	blx	r5
 8006652:	4604      	mov	r4, r0
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	334c      	adds	r3, #76	; 0x4c
 8006658:	681d      	ldr	r5, [r3, #0]
 800665a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800665e:	495a      	ldr	r1, [pc, #360]	; (80067c8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8006660:	4618      	mov	r0, r3
 8006662:	f007 f806 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006670:	4413      	add	r3, r2
 8006672:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006676:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800667a:	4619      	mov	r1, r3
 800667c:	4620      	mov	r0, r4
 800667e:	47a8      	blx	r5
 8006680:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006684:	4618      	mov	r0, r3
 8006686:	f007 fbac 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800668a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800668e:	4618      	mov	r0, r3
 8006690:	f007 fba7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006694:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006698:	4618      	mov	r0, r3
 800669a:	f007 fba2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 800669e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066a2:	3301      	adds	r3, #1
 80066a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066a8:	e7b4      	b.n	8006614 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80066b0:	4946      	ldr	r1, [pc, #280]	; (80067cc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 80066b2:	4847      	ldr	r0, [pc, #284]	; (80067d0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 80066b4:	f7fd fc64 	bl	8003f80 <Connect_TCP_Server>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 80066be:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d15d      	bne.n	8006782 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 80066c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	dcf0      	bgt.n	80066b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066d4:	f107 0214 	add.w	r2, r7, #20
 80066d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066dc:	2132      	movs	r1, #50	; 0x32
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7f9 fda9 	bl	800023c <strlen>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066f2:	4293      	cmp	r3, r2
 80066f4:	da3f      	bge.n	8006776 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80066f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80066fa:	4931      	ldr	r1, [pc, #196]	; (80067c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80066fc:	4618      	mov	r0, r3
 80066fe:	f006 ffb8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006702:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f005 f88b 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800670e:	4604      	mov	r4, r0
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	681d      	ldr	r5, [r3, #0]
 8006716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800671a:	492e      	ldr	r1, [pc, #184]	; (80067d4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 800671c:	4618      	mov	r0, r3
 800671e:	f006 ffa8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006722:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006726:	4619      	mov	r1, r3
 8006728:	4620      	mov	r0, r4
 800672a:	47a8      	blx	r5
 800672c:	4603      	mov	r3, r0
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	3264      	adds	r2, #100	; 0x64
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006738:	2032      	movs	r0, #50	; 0x32
 800673a:	fb00 f101 	mul.w	r1, r0, r1
 800673e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006742:	4408      	add	r0, r1
 8006744:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006748:	4401      	add	r1, r0
 800674a:	399c      	subs	r1, #156	; 0x9c
 800674c:	7809      	ldrb	r1, [r1, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	4790      	blx	r2
 8006752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006756:	4618      	mov	r0, r3
 8006758:	f007 fb43 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800675c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006760:	4618      	mov	r0, r3
 8006762:	f007 fb3e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006766:	f7fd fac5 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800676a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800676e:	3301      	adds	r3, #1
 8006770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006774:	e7ae      	b.n	80066d4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800677a:	3301      	adds	r3, #1
 800677c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006780:	e796      	b.n	80066b0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8006782:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006784:	f00e fb58 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006788:	4604      	mov	r4, r0
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	3338      	adds	r3, #56	; 0x38
 800678e:	681d      	ldr	r5, [r3, #0]
 8006790:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006794:	f00e fb60 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006798:	4603      	mov	r3, r0
 800679a:	9302      	str	r3, [sp, #8]
 800679c:	f240 2311 	movw	r3, #529	; 0x211
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 80067a8:	4632      	mov	r2, r6
 80067aa:	2102      	movs	r1, #2
 80067ac:	4620      	mov	r0, r4
 80067ae:	47a8      	blx	r5

}
 80067b0:	bf00      	nop
 80067b2:	37b4      	adds	r7, #180	; 0xb4
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b8:	08024668 	.word	0x08024668
 80067bc:	080246cc 	.word	0x080246cc
 80067c0:	08024324 	.word	0x08024324
 80067c4:	08024328 	.word	0x08024328
 80067c8:	0802433c 	.word	0x0802433c
 80067cc:	08024658 	.word	0x08024658
 80067d0:	0802465c 	.word	0x0802465c
 80067d4:	08024344 	.word	0x08024344
 80067d8:	08023ff4 	.word	0x08023ff4
 80067dc:	08024580 	.word	0x08024580

080067e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe fd02 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067f0:	4a03      	ldr	r2, [pc, #12]	; (8006800 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08027c44 	.word	0x08027c44

08006804 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	f240 2215 	movw	r2, #533	; 0x215
 8006810:	4906      	ldr	r1, [pc, #24]	; (800682c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006812:	2004      	movs	r0, #4
 8006814:	f004 fb6a 	bl	800aeec <_ZnwjPKci>
 8006818:	4604      	mov	r4, r0
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff ffe0 	bl	80067e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006820:	4623      	mov	r3, r4
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bd90      	pop	{r4, r7, pc}
 800682a:	bf00      	nop
 800682c:	08023ff4 	.word	0x08023ff4

08006830 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	f00c ff44 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8006840:	4a03      	ldr	r2, [pc, #12]	; (8006850 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	08027b98 	.word	0x08027b98

08006854 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006856:	b091      	sub	sp, #68	; 0x44
 8006858:	af04      	add	r7, sp, #16
 800685a:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 800685c:	4a33      	ldr	r2, [pc, #204]	; (800692c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006866:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	4930      	ldr	r1, [pc, #192]	; (8006930 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8006870:	4618      	mov	r0, r3
 8006872:	f006 fefe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f004 ffd1 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006882:	4604      	mov	r4, r0
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	681d      	ldr	r5, [r3, #0]
 800688a:	f107 031c 	add.w	r3, r7, #28
 800688e:	4929      	ldr	r1, [pc, #164]	; (8006934 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006890:	4618      	mov	r0, r3
 8006892:	f006 feee 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006896:	f107 031c 	add.w	r3, r7, #28
 800689a:	4619      	mov	r1, r3
 800689c:	4620      	mov	r0, r4
 800689e:	47a8      	blx	r5
 80068a0:	4604      	mov	r4, r0
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	334c      	adds	r3, #76	; 0x4c
 80068a6:	681d      	ldr	r5, [r3, #0]
 80068a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ac:	4922      	ldr	r1, [pc, #136]	; (8006938 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 80068ae:	4618      	mov	r0, r3
 80068b0:	f006 fedf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ba:	4619      	mov	r1, r3
 80068bc:	4620      	mov	r0, r4
 80068be:	47a8      	blx	r5
 80068c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f007 fa8c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80068ca:	f107 031c 	add.w	r3, r7, #28
 80068ce:	4618      	mov	r0, r3
 80068d0:	f007 fa87 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80068d4:	f107 0314 	add.w	r3, r7, #20
 80068d8:	4618      	mov	r0, r3
 80068da:	f007 fa82 	bl	800dde2 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80068de:	4917      	ldr	r1, [pc, #92]	; (800693c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 80068e0:	4817      	ldr	r0, [pc, #92]	; (8006940 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 80068e2:	f7fd fb4d 	bl	8003f80 <Connect_TCP_Server>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 80068ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d100      	bne.n	80068f6 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80068f4:	e7f3      	b.n	80068de <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 80068f6:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80068f8:	f00e fa9e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80068fc:	4604      	mov	r4, r0
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	3338      	adds	r3, #56	; 0x38
 8006902:	681d      	ldr	r5, [r3, #0]
 8006904:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006908:	f00e faa6 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800690c:	4603      	mov	r3, r0
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 800691c:	4632      	mov	r2, r6
 800691e:	2101      	movs	r1, #1
 8006920:	4620      	mov	r0, r4
 8006922:	47a8      	blx	r5

}
 8006924:	bf00      	nop
 8006926:	3734      	adds	r7, #52	; 0x34
 8006928:	46bd      	mov	sp, r7
 800692a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692c:	080246cc 	.word	0x080246cc
 8006930:	08024324 	.word	0x08024324
 8006934:	08024328 	.word	0x08024328
 8006938:	0802433c 	.word	0x0802433c
 800693c:	08024658 	.word	0x08024658
 8006940:	0802465c 	.word	0x0802465c
 8006944:	08023ff4 	.word	0x08023ff4
 8006948:	080243f8 	.word	0x080243f8

0800694c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe fc4c 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800695c:	4a03      	ldr	r2, [pc, #12]	; (800696c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	08027b78 	.word	0x08027b78

08006970 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	f44f 720c 	mov.w	r2, #560	; 0x230
 800697c:	4906      	ldr	r1, [pc, #24]	; (8006998 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 800697e:	2004      	movs	r0, #4
 8006980:	f004 fab4 	bl	800aeec <_ZnwjPKci>
 8006984:	4604      	mov	r4, r0
 8006986:	4620      	mov	r0, r4
 8006988:	f7ff ffe0 	bl	800694c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 800698c:	4623      	mov	r3, r4
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	bd90      	pop	{r4, r7, pc}
 8006996:	bf00      	nop
 8006998:	08023ff4 	.word	0x08023ff4

0800699c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f00c fe8e 	bl	80136c8 <_ZN10UtestShellC1Ev>
 80069ac:	4a03      	ldr	r2, [pc, #12]	; (80069bc <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	08027acc 	.word	0x08027acc

080069c0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 80069c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c2:	b0b1      	sub	sp, #196	; 0xc4
 80069c4:	af04      	add	r7, sp, #16
 80069c6:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80069c8:	4a71      	ldr	r2, [pc, #452]	; (8006b90 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	4611      	mov	r1, r2
 80069d0:	2264      	movs	r2, #100	; 0x64
 80069d2:	4618      	mov	r0, r3
 80069d4:	f01a fb22 	bl	802101c <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 80069d8:	4a6e      	ldr	r2, [pc, #440]	; (8006b94 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 80069da:	f107 030c 	add.w	r3, r7, #12
 80069de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069e2:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	dc46      	bgt.n	8006a82 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80069f4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80069f8:	4967      	ldr	r1, [pc, #412]	; (8006b98 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 80069fa:	4618      	mov	r0, r3
 80069fc:	f006 fe39 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006a00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f004 ff0c 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	681d      	ldr	r5, [r3, #0]
 8006a14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a18:	4960      	ldr	r1, [pc, #384]	; (8006b9c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f006 fe29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006a20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a24:	4619      	mov	r1, r3
 8006a26:	4620      	mov	r0, r4
 8006a28:	47a8      	blx	r5
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	334c      	adds	r3, #76	; 0x4c
 8006a30:	681d      	ldr	r5, [r3, #0]
 8006a32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006a36:	495a      	ldr	r1, [pc, #360]	; (8006ba0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f006 fe1a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006a48:	4413      	add	r3, r2
 8006a4a:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006a4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006a52:	4619      	mov	r1, r3
 8006a54:	4620      	mov	r0, r4
 8006a56:	47a8      	blx	r5
 8006a58:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f007 f9c0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006a62:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a66:	4618      	mov	r0, r3
 8006a68:	f007 f9bb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006a6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a70:	4618      	mov	r0, r3
 8006a72:	f007 f9b6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a80:	e7b4      	b.n	80069ec <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006a88:	4946      	ldr	r1, [pc, #280]	; (8006ba4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006a8a:	4847      	ldr	r0, [pc, #284]	; (8006ba8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006a8c:	f7fd fa78 	bl	8003f80 <Connect_TCP_Server>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006a96:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d15d      	bne.n	8006b5a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006a9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dcf0      	bgt.n	8006a88 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006aac:	f107 0214 	add.w	r2, r7, #20
 8006ab0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ab4:	2132      	movs	r1, #50	; 0x32
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7f9 fbbd 	bl	800023c <strlen>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006aca:	4293      	cmp	r3, r2
 8006acc:	da3f      	bge.n	8006b4e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006ace:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ad2:	4931      	ldr	r1, [pc, #196]	; (8006b98 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f006 fdcc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006ada:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f004 fe9f 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006af2:	492e      	ldr	r1, [pc, #184]	; (8006bac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006af4:	4618      	mov	r0, r3
 8006af6:	f006 fdbc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006afa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006afe:	4619      	mov	r1, r3
 8006b00:	4620      	mov	r0, r4
 8006b02:	47a8      	blx	r5
 8006b04:	4603      	mov	r3, r0
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	3264      	adds	r2, #100	; 0x64
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006b10:	2032      	movs	r0, #50	; 0x32
 8006b12:	fb00 f101 	mul.w	r1, r0, r1
 8006b16:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006b1a:	4408      	add	r0, r1
 8006b1c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b20:	4401      	add	r1, r0
 8006b22:	399c      	subs	r1, #156	; 0x9c
 8006b24:	7809      	ldrb	r1, [r1, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	4790      	blx	r2
 8006b2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f007 f957 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006b34:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f007 f952 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006b3e:	f7fd f8d9 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b46:	3301      	adds	r3, #1
 8006b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b4c:	e7ae      	b.n	8006aac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b52:	3301      	adds	r3, #1
 8006b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006b58:	e796      	b.n	8006a88 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 8006b5a:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8006b5c:	f00e f96c 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006b60:	4604      	mov	r4, r0
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	3338      	adds	r3, #56	; 0x38
 8006b66:	681d      	ldr	r5, [r3, #0]
 8006b68:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006b6c:	f00e f974 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006b70:	4603      	mov	r3, r0
 8006b72:	9302      	str	r3, [sp, #8]
 8006b74:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006b80:	4632      	mov	r2, r6
 8006b82:	2103      	movs	r1, #3
 8006b84:	4620      	mov	r0, r4
 8006b86:	47a8      	blx	r5

}
 8006b88:	bf00      	nop
 8006b8a:	37b4      	adds	r7, #180	; 0xb4
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b90:	080246d4 	.word	0x080246d4
 8006b94:	080246cc 	.word	0x080246cc
 8006b98:	08024324 	.word	0x08024324
 8006b9c:	08024328 	.word	0x08024328
 8006ba0:	0802433c 	.word	0x0802433c
 8006ba4:	08024658 	.word	0x08024658
 8006ba8:	0802465c 	.word	0x0802465c
 8006bac:	08024344 	.word	0x08024344
 8006bb0:	08023ff4 	.word	0x08023ff4
 8006bb4:	08024424 	.word	0x08024424

08006bb8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fb16 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006bc8:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	08027aac 	.word	0x08027aac

08006bdc <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8006be8:	4906      	ldr	r1, [pc, #24]	; (8006c04 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006bea:	2004      	movs	r0, #4
 8006bec:	f004 f97e 	bl	800aeec <_ZnwjPKci>
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff ffe0 	bl	8006bb8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd90      	pop	{r4, r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08023ff4 	.word	0x08023ff4

08006c08 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f00c fd58 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8006c18:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	08027a00 	.word	0x08027a00

08006c2c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c2e:	b093      	sub	sp, #76	; 0x4c
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006c34:	f107 0308 	add.w	r3, r7, #8
 8006c38:	494a      	ldr	r1, [pc, #296]	; (8006d64 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f006 fd19 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006c40:	f107 0308 	add.w	r3, r7, #8
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 fdec 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	681d      	ldr	r5, [r3, #0]
 8006c54:	f107 0310 	add.w	r3, r7, #16
 8006c58:	4943      	ldr	r1, [pc, #268]	; (8006d68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f006 fd09 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	4619      	mov	r1, r3
 8006c66:	4620      	mov	r0, r4
 8006c68:	47a8      	blx	r5
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	334c      	adds	r3, #76	; 0x4c
 8006c70:	681d      	ldr	r5, [r3, #0]
 8006c72:	f107 0318 	add.w	r3, r7, #24
 8006c76:	493d      	ldr	r1, [pc, #244]	; (8006d6c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f006 fcfa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006c7e:	f107 0318 	add.w	r3, r7, #24
 8006c82:	4a3b      	ldr	r2, [pc, #236]	; (8006d70 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006c84:	4619      	mov	r1, r3
 8006c86:	4620      	mov	r0, r4
 8006c88:	47a8      	blx	r5
 8006c8a:	f107 0318 	add.w	r3, r7, #24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f007 f8a7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006c94:	f107 0310 	add.w	r3, r7, #16
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f007 f8a2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006c9e:	f107 0308 	add.w	r3, r7, #8
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f007 f89d 	bl	800dde2 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006ca8:	f7fd f9a6 	bl	8003ff8 <Disconnect_TCP_Server>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d139      	bne.n	8006d2e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	dcf1      	bgt.n	8006ca8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006cc4:	f107 0320 	add.w	r3, r7, #32
 8006cc8:	4926      	ldr	r1, [pc, #152]	; (8006d64 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f006 fcd1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006cd0:	f107 0320 	add.w	r3, r7, #32
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f004 fda4 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006cdc:	4604      	mov	r4, r0
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	681d      	ldr	r5, [r3, #0]
 8006ce4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ce8:	4922      	ldr	r1, [pc, #136]	; (8006d74 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006cea:	4618      	mov	r0, r3
 8006cec:	f006 fcc1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	47a8      	blx	r5
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	3264      	adds	r2, #100	; 0x64
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	481d      	ldr	r0, [pc, #116]	; (8006d78 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006d04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d06:	4401      	add	r1, r0
 8006d08:	7809      	ldrb	r1, [r1, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	4790      	blx	r2
 8006d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d12:	4618      	mov	r0, r3
 8006d14:	f007 f865 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006d18:	f107 0320 	add.w	r3, r7, #32
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f007 f860 	bl	800dde2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006d22:	f7fc ffe7 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	3301      	adds	r3, #1
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2c:	e7c7      	b.n	8006cbe <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006d2e:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006d30:	f00e f882 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006d34:	4604      	mov	r4, r0
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	3338      	adds	r3, #56	; 0x38
 8006d3a:	681d      	ldr	r5, [r3, #0]
 8006d3c:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006d40:	f00e f88a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006d44:	4603      	mov	r3, r0
 8006d46:	9302      	str	r3, [sp, #8]
 8006d48:	f240 2371 	movw	r3, #625	; 0x271
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006d54:	4632      	mov	r2, r6
 8006d56:	2102      	movs	r1, #2
 8006d58:	4620      	mov	r0, r4
 8006d5a:	47a8      	blx	r5

}
 8006d5c:	bf00      	nop
 8006d5e:	373c      	adds	r7, #60	; 0x3c
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d64:	08024324 	.word	0x08024324
 8006d68:	08024328 	.word	0x08024328
 8006d6c:	0802433c 	.word	0x0802433c
 8006d70:	08024738 	.word	0x08024738
 8006d74:	08024344 	.word	0x08024344
 8006d78:	08023f80 	.word	0x08023f80
 8006d7c:	08023ff4 	.word	0x08023ff4
 8006d80:	08024580 	.word	0x08024580

08006d84 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fa30 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006d94:	4a03      	ldr	r2, [pc, #12]	; (8006da4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	080279e0 	.word	0x080279e0

08006da8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	f240 2275 	movw	r2, #629	; 0x275
 8006db4:	4906      	ldr	r1, [pc, #24]	; (8006dd0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006db6:	2004      	movs	r0, #4
 8006db8:	f004 f898 	bl	800aeec <_ZnwjPKci>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff ffe0 	bl	8006d84 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd90      	pop	{r4, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08023ff4 	.word	0x08023ff4

08006dd4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f00c fc72 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8006de4:	4a03      	ldr	r2, [pc, #12]	; (8006df4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	08027934 	.word	0x08027934

08006df8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b0b3      	sub	sp, #204	; 0xcc
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006e06:	4a7f      	ldr	r2, [pc, #508]	; (8007004 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006e08:	f107 0308 	add.w	r3, r7, #8
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	2264      	movs	r2, #100	; 0x64
 8006e10:	4618      	mov	r0, r3
 8006e12:	f01a f903 	bl	802101c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006e16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e1a:	497b      	ldr	r1, [pc, #492]	; (8007008 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f006 fc28 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006e22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f004 fcfb 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	681d      	ldr	r5, [r3, #0]
 8006e36:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e3a:	4974      	ldr	r1, [pc, #464]	; (800700c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f006 fc18 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e46:	4619      	mov	r1, r3
 8006e48:	4620      	mov	r0, r4
 8006e4a:	47a8      	blx	r5
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	334c      	adds	r3, #76	; 0x4c
 8006e52:	681d      	ldr	r5, [r3, #0]
 8006e54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e58:	496d      	ldr	r1, [pc, #436]	; (8007010 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f006 fc09 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006e60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e64:	4a6b      	ldr	r2, [pc, #428]	; (8007014 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8006e66:	4619      	mov	r1, r3
 8006e68:	4620      	mov	r0, r4
 8006e6a:	47a8      	blx	r5
 8006e6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006e70:	4618      	mov	r0, r3
 8006e72:	f006 ffb6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006e76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f006 ffb1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006e80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e84:	4618      	mov	r0, r3
 8006e86:	f006 ffac 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 8006e8a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e8e:	495e      	ldr	r1, [pc, #376]	; (8007008 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006e90:	4618      	mov	r0, r3
 8006e92:	f006 fbee 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006e96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f004 fcc1 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	681d      	ldr	r5, [r3, #0]
 8006eaa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006eae:	4957      	ldr	r1, [pc, #348]	; (800700c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f006 fbde 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006eb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	47a8      	blx	r5
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	334c      	adds	r3, #76	; 0x4c
 8006ec6:	681d      	ldr	r5, [r3, #0]
 8006ec8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ecc:	4950      	ldr	r1, [pc, #320]	; (8007010 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f006 fbcf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006ed4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ed8:	4a4f      	ldr	r2, [pc, #316]	; (8007018 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006eda:	4619      	mov	r1, r3
 8006edc:	4620      	mov	r0, r4
 8006ede:	47a8      	blx	r5
 8006ee0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f006 ff7c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006eea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f006 ff77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006ef4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f006 ff72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8006efe:	4846      	ldr	r0, [pc, #280]	; (8007018 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 8006f00:	f7fd f896 	bl	8004030 <Send_TCP_Message>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 8006f0a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d15d      	bne.n	8006fce <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 8006f12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	dcf1      	bgt.n	8006efe <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f20:	f107 0208 	add.w	r2, r7, #8
 8006f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f28:	2132      	movs	r1, #50	; 0x32
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 f983 	bl	800023c <strlen>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	da3f      	bge.n	8006fc2 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006f42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f46:	4930      	ldr	r1, [pc, #192]	; (8007008 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f006 fb92 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006f4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f004 fc65 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	330c      	adds	r3, #12
 8006f60:	681d      	ldr	r5, [r3, #0]
 8006f62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f66:	492d      	ldr	r1, [pc, #180]	; (800701c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f006 fb82 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8006f6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f72:	4619      	mov	r1, r3
 8006f74:	4620      	mov	r0, r4
 8006f76:	47a8      	blx	r5
 8006f78:	4603      	mov	r3, r0
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	3264      	adds	r2, #100	; 0x64
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8006f84:	2032      	movs	r0, #50	; 0x32
 8006f86:	fb00 f101 	mul.w	r1, r0, r1
 8006f8a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006f8e:	4408      	add	r0, r1
 8006f90:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006f94:	4401      	add	r1, r0
 8006f96:	39b0      	subs	r1, #176	; 0xb0
 8006f98:	7809      	ldrb	r1, [r1, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	4790      	blx	r2
 8006f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f006 ff1d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8006fa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006fac:	4618      	mov	r0, r3
 8006fae:	f006 ff18 	bl	800dde2 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006fb2:	f7fc fe9f 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fc0:	e7ae      	b.n	8006f20 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 8006fc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 8006fcc:	e797      	b.n	8006efe <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 8006fce:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8006fd0:	f00d ff32 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	3338      	adds	r3, #56	; 0x38
 8006fda:	681d      	ldr	r5, [r3, #0]
 8006fdc:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8006fe0:	f00d ff3a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	f240 2396 	movw	r3, #662	; 0x296
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	47a8      	blx	r5

}
 8006ffc:	bf00      	nop
 8006ffe:	37bc      	adds	r7, #188	; 0xbc
 8007000:	46bd      	mov	sp, r7
 8007002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007004:	08024758 	.word	0x08024758
 8007008:	08024324 	.word	0x08024324
 800700c:	08024328 	.word	0x08024328
 8007010:	0802433c 	.word	0x0802433c
 8007014:	08024748 	.word	0x08024748
 8007018:	08024234 	.word	0x08024234
 800701c:	08024344 	.word	0x08024344
 8007020:	08023ff4 	.word	0x08023ff4
 8007024:	08024580 	.word	0x08024580

08007028 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f8de 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007038:	4a03      	ldr	r2, [pc, #12]	; (8007048 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	08027914 	.word	0x08027914

0800704c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	f240 229a 	movw	r2, #666	; 0x29a
 8007058:	4906      	ldr	r1, [pc, #24]	; (8007074 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800705a:	2004      	movs	r0, #4
 800705c:	f003 ff46 	bl	800aeec <_ZnwjPKci>
 8007060:	4604      	mov	r4, r0
 8007062:	4620      	mov	r0, r4
 8007064:	f7ff ffe0 	bl	8007028 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007068:	4623      	mov	r3, r4
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bd90      	pop	{r4, r7, pc}
 8007072:	bf00      	nop
 8007074:	08023ff4 	.word	0x08023ff4

08007078 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	f00c fb20 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8007088:	4a03      	ldr	r2, [pc, #12]	; (8007098 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08027868 	.word	0x08027868

0800709c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 800709c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709e:	b0a3      	sub	sp, #140	; 0x8c
 80070a0:	af04      	add	r7, sp, #16
 80070a2:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 80070a4:	4b49      	ldr	r3, [pc, #292]	; (80071cc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 80070a6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80070aa:	461d      	mov	r5, r3
 80070ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	f107 0310 	add.w	r3, r7, #16
 80070ce:	222e      	movs	r2, #46	; 0x2e
 80070d0:	2100      	movs	r1, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f019 ffb0 	bl	8021038 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 80070d8:	2300      	movs	r3, #0
 80070da:	677b      	str	r3, [r7, #116]	; 0x74
 80070dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7f9 f8ab 	bl	800023c <strlen>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ec:	4293      	cmp	r3, r2
 80070ee:	da35      	bge.n	800715c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80070f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80070f4:	4936      	ldr	r1, [pc, #216]	; (80071d0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 80070f6:	4618      	mov	r0, r3
 80070f8:	f006 fabb 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80070fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f004 fb8e 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007108:	4604      	mov	r4, r0
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	681d      	ldr	r5, [r3, #0]
 8007110:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007114:	492f      	ldr	r1, [pc, #188]	; (80071d4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 8007116:	4618      	mov	r0, r3
 8007118:	f006 faab 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800711c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007120:	4619      	mov	r1, r3
 8007122:	4620      	mov	r0, r4
 8007124:	47a8      	blx	r5
 8007126:	4603      	mov	r3, r0
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	3264      	adds	r2, #100	; 0x64
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007132:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007134:	4401      	add	r1, r0
 8007136:	7809      	ldrb	r1, [r1, #0]
 8007138:	4618      	mov	r0, r3
 800713a:	4790      	blx	r2
 800713c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007140:	4618      	mov	r0, r3
 8007142:	f006 fe4e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8007146:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800714a:	4618      	mov	r0, r3
 800714c:	f006 fe49 	bl	800dde2 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007150:	f7fc fdd0 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007156:	3301      	adds	r3, #1
 8007158:	677b      	str	r3, [r7, #116]	; 0x74
 800715a:	e7bf      	b.n	80070dc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 800715c:	f107 030c 	add.w	r3, r7, #12
 8007160:	4618      	mov	r0, r3
 8007162:	f7fc ff9d 	bl	80040a0 <Read_TCP_Message>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800716c:	f00d fe64 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8007170:	4604      	mov	r4, r0
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	3338      	adds	r3, #56	; 0x38
 8007176:	681d      	ldr	r5, [r3, #0]
 8007178:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800717c:	f00d fe6c 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007180:	4603      	mov	r3, r0
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	f240 23aa 	movw	r3, #682	; 0x2aa
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	4b13      	ldr	r3, [pc, #76]	; (80071d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007190:	4632      	mov	r2, r6
 8007192:	2102      	movs	r1, #2
 8007194:	4620      	mov	r0, r4
 8007196:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007198:	f00d fe4e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800719c:	4604      	mov	r4, r0
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	681d      	ldr	r5, [r3, #0]
 80071a4:	f00d fe58 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f107 020c 	add.w	r2, r7, #12
 80071ae:	9302      	str	r3, [sp, #8]
 80071b0:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	4908      	ldr	r1, [pc, #32]	; (80071e0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 80071be:	4620      	mov	r0, r4
 80071c0:	47a8      	blx	r5

}
 80071c2:	bf00      	nop
 80071c4:	377c      	adds	r7, #124	; 0x7c
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ca:	bf00      	nop
 80071cc:	080247ec 	.word	0x080247ec
 80071d0:	08024324 	.word	0x08024324
 80071d4:	08024344 	.word	0x08024344
 80071d8:	08023ff4 	.word	0x08023ff4
 80071dc:	080247bc 	.word	0x080247bc
 80071e0:	08024234 	.word	0x08024234

080071e4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe f800 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80071f4:	4a03      	ldr	r2, [pc, #12]	; (8007204 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	08027848 	.word	0x08027848

08007208 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8007214:	4906      	ldr	r1, [pc, #24]	; (8007230 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 8007216:	2004      	movs	r0, #4
 8007218:	f003 fe68 	bl	800aeec <_ZnwjPKci>
 800721c:	4604      	mov	r4, r0
 800721e:	4620      	mov	r0, r4
 8007220:	f7ff ffe0 	bl	80071e4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 8007224:	4623      	mov	r3, r4
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	bf00      	nop
 8007230:	08023ff4 	.word	0x08023ff4

08007234 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4618      	mov	r0, r3
 8007240:	f00c fa42 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8007244:	4a03      	ldr	r2, [pc, #12]	; (8007254 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	0802779c 	.word	0x0802779c

08007258 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	b095      	sub	sp, #84	; 0x54
 800725c:	af04      	add	r7, sp, #16
 800725e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007260:	2304      	movs	r3, #4
 8007262:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	222e      	movs	r2, #46	; 0x2e
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f019 fee0 	bl	8021038 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007278:	f107 030c 	add.w	r3, r7, #12
 800727c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007280:	4618      	mov	r0, r3
 8007282:	f7fc ff71 	bl	8004168 <Wait_TCP_Message>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800728c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007290:	2b04      	cmp	r3, #4
 8007292:	d100      	bne.n	8007296 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007294:	e7f0      	b.n	8007278 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007296:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007298:	f00d fdce 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800729c:	4604      	mov	r4, r0
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	3338      	adds	r3, #56	; 0x38
 80072a2:	681d      	ldr	r5, [r3, #0]
 80072a4:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 80072a8:	f00d fdd6 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072ac:	4603      	mov	r3, r0
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	f240 23bd 	movw	r3, #701	; 0x2bd
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 80072bc:	4632      	mov	r2, r6
 80072be:	2101      	movs	r1, #1
 80072c0:	4620      	mov	r0, r4
 80072c2:	47a8      	blx	r5

}
 80072c4:	bf00      	nop
 80072c6:	3744      	adds	r7, #68	; 0x44
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072cc:	08023ff4 	.word	0x08023ff4
 80072d0:	08024388 	.word	0x08024388

080072d4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fd ff88 	bl	80051f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80072e4:	4a03      	ldr	r2, [pc, #12]	; (80072f4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	0802777c 	.word	0x0802777c

080072f8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80072f8:	b590      	push	{r4, r7, lr}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	f240 22c1 	movw	r2, #705	; 0x2c1
 8007304:	4906      	ldr	r1, [pc, #24]	; (8007320 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007306:	2004      	movs	r0, #4
 8007308:	f003 fdf0 	bl	800aeec <_ZnwjPKci>
 800730c:	4604      	mov	r4, r0
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff ffe0 	bl	80072d4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8007314:	4623      	mov	r3, r4
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bd90      	pop	{r4, r7, pc}
 800731e:	bf00      	nop
 8007320:	08023ff4 	.word	0x08023ff4

08007324 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4618      	mov	r0, r3
 8007330:	f00c f9ca 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8007334:	4a03      	ldr	r2, [pc, #12]	; (8007344 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	080276d0 	.word	0x080276d0

08007348 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734a:	b0a3      	sub	sp, #140	; 0x8c
 800734c:	af04      	add	r7, sp, #16
 800734e:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007350:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007352:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007356:	461d      	mov	r5, r3
 8007358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007360:	6020      	str	r0, [r4, #0]
 8007362:	3404      	adds	r4, #4
 8007364:	8021      	strh	r1, [r4, #0]
 8007366:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007370:	2304      	movs	r3, #4
 8007372:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	f107 0310 	add.w	r3, r7, #16
 800737e:	222e      	movs	r2, #46	; 0x2e
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f019 fe58 	bl	8021038 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007388:	f107 030c 	add.w	r3, r7, #12
 800738c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007390:	4618      	mov	r0, r3
 8007392:	f7fc fee9 	bl	8004168 <Wait_TCP_Message>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800739c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d141      	bne.n	8007428 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	677b      	str	r3, [r7, #116]	; 0x74
 80073a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7f8 ff45 	bl	800023c <strlen>
 80073b2:	4603      	mov	r3, r0
 80073b4:	461a      	mov	r2, r3
 80073b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b8:	4293      	cmp	r3, r2
 80073ba:	dae5      	bge.n	8007388 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80073bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073c0:	4932      	ldr	r1, [pc, #200]	; (800748c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 80073c2:	4618      	mov	r0, r3
 80073c4:	f006 f955 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80073c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f004 fa28 	bl	800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80073d4:	4604      	mov	r4, r0
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	681d      	ldr	r5, [r3, #0]
 80073dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073e0:	492b      	ldr	r1, [pc, #172]	; (8007490 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 80073e2:	4618      	mov	r0, r3
 80073e4:	f006 f945 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80073e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073ec:	4619      	mov	r1, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	47a8      	blx	r5
 80073f2:	4603      	mov	r3, r0
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	3264      	adds	r2, #100	; 0x64
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80073fe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007400:	4401      	add	r1, r0
 8007402:	7809      	ldrb	r1, [r1, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	4790      	blx	r2
 8007408:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800740c:	4618      	mov	r0, r3
 800740e:	f006 fce8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8007412:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007416:	4618      	mov	r0, r3
 8007418:	f006 fce3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800741c:	f7fc fc6a 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007422:	3301      	adds	r3, #1
 8007424:	677b      	str	r3, [r7, #116]	; 0x74
 8007426:	e7bf      	b.n	80073a8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8007428:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 800742a:	f00d fd05 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800742e:	4604      	mov	r4, r0
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	3338      	adds	r3, #56	; 0x38
 8007434:	681d      	ldr	r5, [r3, #0]
 8007436:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800743a:	f00d fd0d 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800743e:	4603      	mov	r3, r0
 8007440:	9302      	str	r3, [sp, #8]
 8007442:	f240 23d7 	movw	r3, #727	; 0x2d7
 8007446:	9301      	str	r3, [sp, #4]
 8007448:	4b12      	ldr	r3, [pc, #72]	; (8007494 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	4b12      	ldr	r3, [pc, #72]	; (8007498 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 800744e:	4632      	mov	r2, r6
 8007450:	2102      	movs	r1, #2
 8007452:	4620      	mov	r0, r4
 8007454:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007456:	f00d fcef 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800745a:	4604      	mov	r4, r0
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	3324      	adds	r3, #36	; 0x24
 8007460:	681d      	ldr	r5, [r3, #0]
 8007462:	f00d fcf9 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007466:	4603      	mov	r3, r0
 8007468:	f107 020c 	add.w	r2, r7, #12
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2300      	movs	r3, #0
 800747a:	4908      	ldr	r1, [pc, #32]	; (800749c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 800747c:	4620      	mov	r0, r4
 800747e:	47a8      	blx	r5

}
 8007480:	bf00      	nop
 8007482:	377c      	adds	r7, #124	; 0x7c
 8007484:	46bd      	mov	sp, r7
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007488:	0802481c 	.word	0x0802481c
 800748c:	08024324 	.word	0x08024324
 8007490:	08024344 	.word	0x08024344
 8007494:	08023ff4 	.word	0x08023ff4
 8007498:	080247bc 	.word	0x080247bc
 800749c:	0802480c 	.word	0x0802480c

080074a0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	4a05      	ldr	r2, [pc, #20]	; (80074c0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f00c f95d 	bl	8013770 <_ZN10UtestShellD1Ev>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	080276d0 	.word	0x080276d0

080074c4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ffe7 	bl	80074a0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80074d2:	211c      	movs	r1, #28
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f003 fd1d 	bl	800af14 <_ZdlPvj>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	4a05      	ldr	r2, [pc, #20]	; (8007504 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fd fe8f 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	0802777c 	.word	0x0802777c

08007508 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ffe7 	bl	80074e4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8007516:	2104      	movs	r1, #4
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f003 fcfb 	bl	800af14 <_ZdlPvj>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	4a05      	ldr	r2, [pc, #20]	; (8007548 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	f00c f919 	bl	8013770 <_ZN10UtestShellD1Ev>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	0802779c 	.word	0x0802779c

0800754c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ffe7 	bl	8007528 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 800755a:	211c      	movs	r1, #28
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f003 fcd9 	bl	800af14 <_ZdlPvj>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	4a05      	ldr	r2, [pc, #20]	; (800758c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f7fd fe4b 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	08027848 	.word	0x08027848

08007590 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff ffe7 	bl	800756c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 800759e:	2104      	movs	r1, #4
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f003 fcb7 	bl	800af14 <_ZdlPvj>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f00c f8d5 	bl	8013770 <_ZN10UtestShellD1Ev>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	08027868 	.word	0x08027868

080075d4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ffe7 	bl	80075b0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 80075e2:	211c      	movs	r1, #28
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f003 fc95 	bl	800af14 <_ZdlPvj>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	4a05      	ldr	r2, [pc, #20]	; (8007614 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4618      	mov	r0, r3
 8007606:	f7fd fe07 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	08027914 	.word	0x08027914

08007618 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ffe7 	bl	80075f4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8007626:	2104      	movs	r1, #4
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f003 fc73 	bl	800af14 <_ZdlPvj>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	4a05      	ldr	r2, [pc, #20]	; (8007658 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4618      	mov	r0, r3
 800764a:	f00c f891 	bl	8013770 <_ZN10UtestShellD1Ev>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	08027934 	.word	0x08027934

0800765c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ffe7 	bl	8007638 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800766a:	211c      	movs	r1, #28
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f003 fc51 	bl	800af14 <_ZdlPvj>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	4a05      	ldr	r2, [pc, #20]	; (800769c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd fdc3 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	080279e0 	.word	0x080279e0

080076a0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ffe7 	bl	800767c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 80076ae:	2104      	movs	r1, #4
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f003 fc2f 	bl	800af14 <_ZdlPvj>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f00c f84d 	bl	8013770 <_ZN10UtestShellD1Ev>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	08027a00 	.word	0x08027a00

080076e4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff ffe7 	bl	80076c0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80076f2:	211c      	movs	r1, #28
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f003 fc0d 	bl	800af14 <_ZdlPvj>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4618      	mov	r0, r3
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	4a05      	ldr	r2, [pc, #20]	; (8007724 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fd7f 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	08027aac 	.word	0x08027aac

08007728 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff ffe7 	bl	8007704 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8007736:	2104      	movs	r1, #4
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f003 fbeb 	bl	800af14 <_ZdlPvj>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	4a05      	ldr	r2, [pc, #20]	; (8007768 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	f00c f809 	bl	8013770 <_ZN10UtestShellD1Ev>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	08027acc 	.word	0x08027acc

0800776c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ffe7 	bl	8007748 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800777a:	211c      	movs	r1, #28
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f003 fbc9 	bl	800af14 <_ZdlPvj>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	4a05      	ldr	r2, [pc, #20]	; (80077ac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	f7fd fd3b 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	08027b78 	.word	0x08027b78

080077b0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ffe7 	bl	800778c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 80077be:	2104      	movs	r1, #4
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f003 fba7 	bl	800af14 <_ZdlPvj>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	4a05      	ldr	r2, [pc, #20]	; (80077f0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00b ffc5 	bl	8013770 <_ZN10UtestShellD1Ev>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08027b98 	.word	0x08027b98

080077f4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff ffe7 	bl	80077d0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 8007802:	211c      	movs	r1, #28
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f003 fb85 	bl	800af14 <_ZdlPvj>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	4a05      	ldr	r2, [pc, #20]	; (8007834 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	f7fd fcf7 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08027c44 	.word	0x08027c44

08007838 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff ffe7 	bl	8007814 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 8007846:	2104      	movs	r1, #4
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f003 fb63 	bl	800af14 <_ZdlPvj>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	4a05      	ldr	r2, [pc, #20]	; (8007878 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	f00b ff81 	bl	8013770 <_ZN10UtestShellD1Ev>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	08027c64 	.word	0x08027c64

0800787c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ffe7 	bl	8007858 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 800788a:	211c      	movs	r1, #28
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f003 fb41 	bl	800af14 <_ZdlPvj>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	4a05      	ldr	r2, [pc, #20]	; (80078bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd fcb3 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	08027d10 	.word	0x08027d10

080078c0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff ffe7 	bl	800789c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80078ce:	2104      	movs	r1, #4
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f003 fb1f 	bl	800af14 <_ZdlPvj>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	4a05      	ldr	r2, [pc, #20]	; (8007900 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f00b ff3d 	bl	8013770 <_ZN10UtestShellD1Ev>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08027d30 	.word	0x08027d30

08007904 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ffe7 	bl	80078e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 8007912:	211c      	movs	r1, #28
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f003 fafd 	bl	800af14 <_ZdlPvj>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	4a05      	ldr	r2, [pc, #20]	; (8007944 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	f7fd fc6f 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08027ddc 	.word	0x08027ddc

08007948 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff ffe7 	bl	8007924 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007956:	2104      	movs	r1, #4
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f003 fadb 	bl	800af14 <_ZdlPvj>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	4a05      	ldr	r2, [pc, #20]	; (8007988 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	f00b fef9 	bl	8013770 <_ZN10UtestShellD1Ev>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08027dfc 	.word	0x08027dfc

0800798c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff ffe7 	bl	8007968 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 800799a:	211c      	movs	r1, #28
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f003 fab9 	bl	800af14 <_ZdlPvj>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	4a05      	ldr	r2, [pc, #20]	; (80079cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fd fc2b 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	08027ea8 	.word	0x08027ea8

080079d0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ffe7 	bl	80079ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80079de:	2104      	movs	r1, #4
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f003 fa97 	bl	800af14 <_ZdlPvj>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	4a05      	ldr	r2, [pc, #20]	; (8007a10 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f00b feb5 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	08027ec8 	.word	0x08027ec8

08007a14 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ffe7 	bl	80079f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007a22:	211c      	movs	r1, #28
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f003 fa75 	bl	800af14 <_ZdlPvj>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fd fbe7 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	08027f74 	.word	0x08027f74

08007a58 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ffe7 	bl	8007a34 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007a66:	2104      	movs	r1, #4
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f003 fa53 	bl	800af14 <_ZdlPvj>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	4a05      	ldr	r2, [pc, #20]	; (8007a98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f00b fe71 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	08027f94 	.word	0x08027f94

08007a9c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff ffe7 	bl	8007a78 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007aaa:	211c      	movs	r1, #28
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f003 fa31 	bl	800af14 <_ZdlPvj>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fd fba3 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	08028040 	.word	0x08028040

08007ae0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ffe7 	bl	8007abc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007aee:	2104      	movs	r1, #4
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f003 fa0f 	bl	800af14 <_ZdlPvj>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	4a05      	ldr	r2, [pc, #20]	; (8007b20 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f00b fe2d 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	08028060 	.word	0x08028060

08007b24 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ffe7 	bl	8007b00 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007b32:	211c      	movs	r1, #28
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f003 f9ed 	bl	800af14 <_ZdlPvj>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	4a05      	ldr	r2, [pc, #20]	; (8007b64 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fd fb5f 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	0802810c 	.word	0x0802810c

08007b68 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f7ff ffe7 	bl	8007b44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007b76:	2104      	movs	r1, #4
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f003 f9cb 	bl	800af14 <_ZdlPvj>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	4a05      	ldr	r2, [pc, #20]	; (8007ba8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f00b fde9 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	0802812c 	.word	0x0802812c

08007bac <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ffe7 	bl	8007b88 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007bba:	211c      	movs	r1, #28
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f003 f9a9 	bl	800af14 <_ZdlPvj>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	4a05      	ldr	r2, [pc, #20]	; (8007bec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fb1b 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	080281d8 	.word	0x080281d8

08007bf0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ffe7 	bl	8007bcc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007bfe:	2104      	movs	r1, #4
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f003 f987 	bl	800af14 <_ZdlPvj>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f00b fda5 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	080281f8 	.word	0x080281f8

08007c34 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff ffe7 	bl	8007c10 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007c42:	211c      	movs	r1, #28
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f003 f965 	bl	800af14 <_ZdlPvj>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	4a05      	ldr	r2, [pc, #20]	; (8007c74 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fd fad7 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	080282a4 	.word	0x080282a4

08007c78 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ffe7 	bl	8007c54 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007c86:	2104      	movs	r1, #4
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f003 f943 	bl	800af14 <_ZdlPvj>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	4a05      	ldr	r2, [pc, #20]	; (8007cb8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f00b fd61 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	080282c4 	.word	0x080282c4

08007cbc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ffe7 	bl	8007c98 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007cca:	211c      	movs	r1, #28
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f003 f921 	bl	800af14 <_ZdlPvj>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd fa93 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08028370 	.word	0x08028370

08007d00 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff ffe7 	bl	8007cdc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007d0e:	2104      	movs	r1, #4
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f003 f8ff 	bl	800af14 <_ZdlPvj>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	4a05      	ldr	r2, [pc, #20]	; (8007d40 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f00b fd1d 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08028390 	.word	0x08028390

08007d44 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ffe7 	bl	8007d20 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007d52:	211c      	movs	r1, #28
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f003 f8dd 	bl	800af14 <_ZdlPvj>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd fa4f 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	0802843c 	.word	0x0802843c

08007d88 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff ffe7 	bl	8007d64 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007d96:	2104      	movs	r1, #4
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f003 f8bb 	bl	800af14 <_ZdlPvj>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	4a05      	ldr	r2, [pc, #20]	; (8007dc8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f00b fcd9 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	0802845c 	.word	0x0802845c

08007dcc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff ffe7 	bl	8007da8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007dda:	211c      	movs	r1, #28
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f003 f899 	bl	800af14 <_ZdlPvj>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fd fa0b 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	08028508 	.word	0x08028508

08007e10 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff ffe7 	bl	8007dec <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007e1e:	2104      	movs	r1, #4
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f003 f877 	bl	800af14 <_ZdlPvj>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f00b fc95 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	08028528 	.word	0x08028528

08007e54 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ffe7 	bl	8007e30 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8007e62:	211c      	movs	r1, #28
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f003 f855 	bl	800af14 <_ZdlPvj>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	4a05      	ldr	r2, [pc, #20]	; (8007e94 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd f9c7 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	080285d4 	.word	0x080285d4

08007e98 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ffe7 	bl	8007e74 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f003 f833 	bl	800af14 <_ZdlPvj>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	4a05      	ldr	r2, [pc, #20]	; (8007ed8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f00b fc51 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	080285f4 	.word	0x080285f4

08007edc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ffe7 	bl	8007eb8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8007eea:	211c      	movs	r1, #28
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f003 f811 	bl	800af14 <_ZdlPvj>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fd f983 	bl	8005218 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	080286a0 	.word	0x080286a0

08007f20 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff ffe7 	bl	8007efc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8007f2e:	2104      	movs	r1, #4
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f002 ffef 	bl	800af14 <_ZdlPvj>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	4a05      	ldr	r2, [pc, #20]	; (8007f60 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f00b fc0d 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	080286e0 	.word	0x080286e0

08007f64 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ffe7 	bl	8007f40 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8007f72:	211c      	movs	r1, #28
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f002 ffcd 	bl	800af14 <_ZdlPvj>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc faf7 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	0802878c 	.word	0x0802878c

08007fa8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff ffe7 	bl	8007f84 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8007fb6:	2108      	movs	r1, #8
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f002 ffab 	bl	800af14 <_ZdlPvj>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	4a05      	ldr	r2, [pc, #20]	; (8007fe8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f00b fbc9 	bl	8013770 <_ZN10UtestShellD1Ev>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	080287ac 	.word	0x080287ac

08007fec <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff ffe7 	bl	8007fc8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8007ffa:	211c      	movs	r1, #28
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f002 ff89 	bl	800af14 <_ZdlPvj>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	4a05      	ldr	r2, [pc, #20]	; (800802c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	f7fc fab3 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	08028858 	.word	0x08028858

08008030 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff ffe7 	bl	800800c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 800803e:	2108      	movs	r1, #8
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f002 ff67 	bl	800af14 <_ZdlPvj>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	4a05      	ldr	r2, [pc, #20]	; (8008070 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	f00b fb85 	bl	8013770 <_ZN10UtestShellD1Ev>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	08028878 	.word	0x08028878

08008074 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff ffe7 	bl	8008050 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8008082:	211c      	movs	r1, #28
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 ff45 	bl	800af14 <_ZdlPvj>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fc fa6f 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	08028924 	.word	0x08028924

080080b8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff ffe7 	bl	8008094 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 80080c6:	2108      	movs	r1, #8
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f002 ff23 	bl	800af14 <_ZdlPvj>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f00b fb41 	bl	8013770 <_ZN10UtestShellD1Ev>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	08028944 	.word	0x08028944

080080fc <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff ffe7 	bl	80080d8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 800810a:	211c      	movs	r1, #28
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f002 ff01 	bl	800af14 <_ZdlPvj>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	4a05      	ldr	r2, [pc, #20]	; (800813c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	f7fc fa2b 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	080289f0 	.word	0x080289f0

08008140 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff ffe7 	bl	800811c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 800814e:	2108      	movs	r1, #8
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f002 fedf 	bl	800af14 <_ZdlPvj>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	4a05      	ldr	r2, [pc, #20]	; (8008180 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	f00b fafd 	bl	8013770 <_ZN10UtestShellD1Ev>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	08028a10 	.word	0x08028a10

08008184 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff ffe7 	bl	8008160 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008192:	211c      	movs	r1, #28
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f002 febd 	bl	800af14 <_ZdlPvj>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	4a05      	ldr	r2, [pc, #20]	; (80081c4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fc f9e7 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	08028abc 	.word	0x08028abc

080081c8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff ffe7 	bl	80081a4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 80081d6:	2108      	movs	r1, #8
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 fe9b 	bl	800af14 <_ZdlPvj>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	4a05      	ldr	r2, [pc, #20]	; (8008208 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f00b fab9 	bl	8013770 <_ZN10UtestShellD1Ev>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08028adc 	.word	0x08028adc

0800820c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff ffe7 	bl	80081e8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 800821a:	211c      	movs	r1, #28
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f002 fe79 	bl	800af14 <_ZdlPvj>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	4a05      	ldr	r2, [pc, #20]	; (800824c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4618      	mov	r0, r3
 800823e:	f7fc f9a3 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	08028b88 	.word	0x08028b88

08008250 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ffe7 	bl	800822c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800825e:	2108      	movs	r1, #8
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f002 fe57 	bl	800af14 <_ZdlPvj>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	4a05      	ldr	r2, [pc, #20]	; (8008290 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	f00b fa75 	bl	8013770 <_ZN10UtestShellD1Ev>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	08028ba8 	.word	0x08028ba8

08008294 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff ffe7 	bl	8008270 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 80082a2:	211c      	movs	r1, #28
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f002 fe35 	bl	800af14 <_ZdlPvj>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc f95f 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	08028c54 	.word	0x08028c54

080082d8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ffe7 	bl	80082b4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 80082e6:	2108      	movs	r1, #8
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f002 fe13 	bl	800af14 <_ZdlPvj>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	4a05      	ldr	r2, [pc, #20]	; (8008318 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	f00b fa31 	bl	8013770 <_ZN10UtestShellD1Ev>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	08028c74 	.word	0x08028c74

0800831c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff ffe7 	bl	80082f8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 800832a:	211c      	movs	r1, #28
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f002 fdf1 	bl	800af14 <_ZdlPvj>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	4a05      	ldr	r2, [pc, #20]	; (800835c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	f7fc f91b 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	08028d20 	.word	0x08028d20

08008360 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff ffe7 	bl	800833c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800836e:	2108      	movs	r1, #8
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f002 fdcf 	bl	800af14 <_ZdlPvj>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	4a05      	ldr	r2, [pc, #20]	; (80083a0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4618      	mov	r0, r3
 8008392:	f00b f9ed 	bl	8013770 <_ZN10UtestShellD1Ev>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4618      	mov	r0, r3
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08028d40 	.word	0x08028d40

080083a4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff ffe7 	bl	8008380 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 80083b2:	211c      	movs	r1, #28
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f002 fdad 	bl	800af14 <_ZdlPvj>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	4a05      	ldr	r2, [pc, #20]	; (80083e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fc f8d7 	bl	8004588 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	08028dec 	.word	0x08028dec

080083e8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff ffe7 	bl	80083c4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80083f6:	2108      	movs	r1, #8
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f002 fd8b 	bl	800af14 <_ZdlPvj>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af02      	add	r7, sp, #8
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b01      	cmp	r3, #1
 8008416:	f040 8224 	bne.w	8008862 <_Z41__static_initialization_and_destruction_0ii+0x45a>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008420:	4293      	cmp	r3, r2
 8008422:	f040 821e 	bne.w	8008862 <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 8008426:	489f      	ldr	r0, [pc, #636]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008428:	f7fc f8fc 	bl	8004624 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 800842c:	2329      	movs	r3, #41	; 0x29
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	4b9d      	ldr	r3, [pc, #628]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b9d      	ldr	r3, [pc, #628]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8008436:	4a9e      	ldr	r2, [pc, #632]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008438:	499a      	ldr	r1, [pc, #616]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800843a:	489e      	ldr	r0, [pc, #632]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800843c:	f00c ff94 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008440:	489d      	ldr	r0, [pc, #628]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008442:	f7fc f9a3 	bl	800478c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8008446:	2333      	movs	r3, #51	; 0x33
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	4b97      	ldr	r3, [pc, #604]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4b9b      	ldr	r3, [pc, #620]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008450:	4a97      	ldr	r2, [pc, #604]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008452:	4999      	ldr	r1, [pc, #612]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008454:	489a      	ldr	r0, [pc, #616]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008456:	f00c ff87 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800845a:	489a      	ldr	r0, [pc, #616]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800845c:	f7fc fa20 	bl	80048a0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008460:	233d      	movs	r3, #61	; 0x3d
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	4b90      	ldr	r3, [pc, #576]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4b97      	ldr	r3, [pc, #604]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800846a:	4a91      	ldr	r2, [pc, #580]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800846c:	4995      	ldr	r1, [pc, #596]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800846e:	4897      	ldr	r0, [pc, #604]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008470:	f00c ff7a 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008474:	4896      	ldr	r0, [pc, #600]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008476:	f7fc fa9b 	bl	80049b0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800847a:	2348      	movs	r3, #72	; 0x48
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	4b8a      	ldr	r3, [pc, #552]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	4b94      	ldr	r3, [pc, #592]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008484:	4a8a      	ldr	r2, [pc, #552]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008486:	4992      	ldr	r1, [pc, #584]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008488:	4893      	ldr	r0, [pc, #588]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800848a:	f00c ff6d 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800848e:	4893      	ldr	r0, [pc, #588]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008490:	f7fc fafa 	bl	8004a88 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008494:	2351      	movs	r3, #81	; 0x51
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	4b83      	ldr	r3, [pc, #524]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4b90      	ldr	r3, [pc, #576]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800849e:	4a84      	ldr	r2, [pc, #528]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084a0:	498e      	ldr	r1, [pc, #568]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80084a2:	4890      	ldr	r0, [pc, #576]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80084a4:	f00c ff60 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80084a8:	488f      	ldr	r0, [pc, #572]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80084aa:	f7fc fb79 	bl	8004ba0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80084ae:	2361      	movs	r3, #97	; 0x61
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	4b7d      	ldr	r3, [pc, #500]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	4b8d      	ldr	r3, [pc, #564]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80084b8:	4a7d      	ldr	r2, [pc, #500]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084ba:	498b      	ldr	r1, [pc, #556]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80084bc:	488c      	ldr	r0, [pc, #560]	; (80086f0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80084be:	f00c ff53 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80084c2:	488c      	ldr	r0, [pc, #560]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084c4:	f7fc fc2a 	bl	8004d1c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80084c8:	2376      	movs	r3, #118	; 0x76
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	4b76      	ldr	r3, [pc, #472]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	4b89      	ldr	r3, [pc, #548]	; (80086f8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80084d2:	4a77      	ldr	r2, [pc, #476]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084d4:	4987      	ldr	r1, [pc, #540]	; (80086f4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80084d6:	4889      	ldr	r0, [pc, #548]	; (80086fc <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80084d8:	f00c ff46 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80084dc:	4888      	ldr	r0, [pc, #544]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084de:	f7fc fc83 	bl	8004de8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 80084e2:	237d      	movs	r3, #125	; 0x7d
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	4b70      	ldr	r3, [pc, #448]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	4b86      	ldr	r3, [pc, #536]	; (8008704 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80084ec:	4a70      	ldr	r2, [pc, #448]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80084ee:	4984      	ldr	r1, [pc, #528]	; (8008700 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80084f0:	4885      	ldr	r0, [pc, #532]	; (8008708 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80084f2:	f00c ff39 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80084f6:	4885      	ldr	r0, [pc, #532]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80084f8:	f7fc fd60 	bl	8004fbc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80084fc:	2385      	movs	r3, #133	; 0x85
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	4b69      	ldr	r3, [pc, #420]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4b82      	ldr	r3, [pc, #520]	; (8008710 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008506:	4a6a      	ldr	r2, [pc, #424]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008508:	4980      	ldr	r1, [pc, #512]	; (800870c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800850a:	4882      	ldr	r0, [pc, #520]	; (8008714 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800850c:	f00c ff2c 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008510:	4881      	ldr	r0, [pc, #516]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008512:	f7fc fec9 	bl	80052a8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8008516:	23c0      	movs	r3, #192	; 0xc0
 8008518:	9301      	str	r3, [sp, #4]
 800851a:	4b63      	ldr	r3, [pc, #396]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4b7f      	ldr	r3, [pc, #508]	; (800871c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008520:	4a7f      	ldr	r2, [pc, #508]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008522:	497d      	ldr	r1, [pc, #500]	; (8008718 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008524:	487f      	ldr	r0, [pc, #508]	; (8008724 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008526:	f00c ff1f 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800852a:	487f      	ldr	r0, [pc, #508]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800852c:	f7fc ff26 	bl	800537c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8008530:	23d2      	movs	r3, #210	; 0xd2
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	4b5c      	ldr	r3, [pc, #368]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4b7c      	ldr	r3, [pc, #496]	; (800872c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800853a:	4a79      	ldr	r2, [pc, #484]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800853c:	497a      	ldr	r1, [pc, #488]	; (8008728 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800853e:	487c      	ldr	r0, [pc, #496]	; (8008730 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008540:	f00c ff12 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008544:	487b      	ldr	r0, [pc, #492]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008546:	f7fc ffdd 	bl	8005504 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 800854a:	23de      	movs	r3, #222	; 0xde
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	4b56      	ldr	r3, [pc, #344]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	4b79      	ldr	r3, [pc, #484]	; (8008738 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008554:	4a72      	ldr	r2, [pc, #456]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008556:	4977      	ldr	r1, [pc, #476]	; (8008734 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008558:	4878      	ldr	r0, [pc, #480]	; (800873c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800855a:	f00c ff05 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800855e:	4878      	ldr	r0, [pc, #480]	; (8008740 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008560:	f7fd f87a 	bl	8005658 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008564:	23ed      	movs	r3, #237	; 0xed
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	4b4f      	ldr	r3, [pc, #316]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4b75      	ldr	r3, [pc, #468]	; (8008744 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800856e:	4a6c      	ldr	r2, [pc, #432]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008570:	4973      	ldr	r1, [pc, #460]	; (8008740 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008572:	4875      	ldr	r0, [pc, #468]	; (8008748 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008574:	f00c fef8 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008578:	4874      	ldr	r0, [pc, #464]	; (800874c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800857a:	f7fd f91b 	bl	80057b4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800857e:	23fe      	movs	r3, #254	; 0xfe
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	4b49      	ldr	r3, [pc, #292]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	4b72      	ldr	r3, [pc, #456]	; (8008750 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008588:	4a65      	ldr	r2, [pc, #404]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800858a:	4970      	ldr	r1, [pc, #448]	; (800874c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800858c:	4871      	ldr	r0, [pc, #452]	; (8008754 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800858e:	f00c feeb 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008592:	4871      	ldr	r0, [pc, #452]	; (8008758 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008594:	f7fd f97a 	bl	800588c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008598:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	4b42      	ldr	r3, [pc, #264]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	4b6e      	ldr	r3, [pc, #440]	; (800875c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80085a4:	4a5e      	ldr	r2, [pc, #376]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085a6:	496c      	ldr	r1, [pc, #432]	; (8008758 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80085a8:	486d      	ldr	r0, [pc, #436]	; (8008760 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80085aa:	f00c fedd 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80085ae:	486d      	ldr	r0, [pc, #436]	; (8008764 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80085b0:	f7fd fa2a 	bl	8005a08 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80085b4:	f44f 7392 	mov.w	r3, #292	; 0x124
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	4b3b      	ldr	r3, [pc, #236]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4b6a      	ldr	r3, [pc, #424]	; (8008768 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80085c0:	4a57      	ldr	r2, [pc, #348]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085c2:	4968      	ldr	r1, [pc, #416]	; (8008764 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80085c4:	4869      	ldr	r0, [pc, #420]	; (800876c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80085c6:	f00c fecf 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80085ca:	4869      	ldr	r0, [pc, #420]	; (8008770 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085cc:	f7fd face 	bl	8005b6c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80085d0:	f240 133b 	movw	r3, #315	; 0x13b
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	4b34      	ldr	r3, [pc, #208]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	4b66      	ldr	r3, [pc, #408]	; (8008774 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80085dc:	4a50      	ldr	r2, [pc, #320]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085de:	4964      	ldr	r1, [pc, #400]	; (8008770 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80085e0:	4865      	ldr	r0, [pc, #404]	; (8008778 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 80085e2:	f00c fec1 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80085e6:	4865      	ldr	r0, [pc, #404]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085e8:	f7fd fbfe 	bl	8005de8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 80085ec:	f240 1367 	movw	r3, #359	; 0x167
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	4b2d      	ldr	r3, [pc, #180]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	4b62      	ldr	r3, [pc, #392]	; (8008780 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80085f8:	4a49      	ldr	r2, [pc, #292]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80085fa:	4960      	ldr	r1, [pc, #384]	; (800877c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80085fc:	4861      	ldr	r0, [pc, #388]	; (8008784 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80085fe:	f00c feb3 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008602:	4861      	ldr	r0, [pc, #388]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008604:	f7fd fd2a 	bl	800605c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 8008608:	f240 1393 	movw	r3, #403	; 0x193
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	4b26      	ldr	r3, [pc, #152]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	4b5e      	ldr	r3, [pc, #376]	; (800878c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008614:	4a42      	ldr	r2, [pc, #264]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008616:	495c      	ldr	r1, [pc, #368]	; (8008788 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008618:	485d      	ldr	r0, [pc, #372]	; (8008790 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800861a:	f00c fea5 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800861e:	485d      	ldr	r0, [pc, #372]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008620:	f7fd fdc6 	bl	80061b0 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8008624:	f240 13a5 	movw	r3, #421	; 0x1a5
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	4b1f      	ldr	r3, [pc, #124]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	4b5a      	ldr	r3, [pc, #360]	; (8008798 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008630:	4a3b      	ldr	r2, [pc, #236]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008632:	4958      	ldr	r1, [pc, #352]	; (8008794 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008634:	4859      	ldr	r0, [pc, #356]	; (800879c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8008636:	f00c fe97 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800863a:	4859      	ldr	r0, [pc, #356]	; (80087a0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800863c:	f7fd fe9e 	bl	800637c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8008640:	f240 13bd 	movw	r3, #445	; 0x1bd
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	4b56      	ldr	r3, [pc, #344]	; (80087a4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800864c:	4a34      	ldr	r2, [pc, #208]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800864e:	4954      	ldr	r1, [pc, #336]	; (80087a0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008650:	4855      	ldr	r0, [pc, #340]	; (80087a8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008652:	f00c fe89 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008656:	4855      	ldr	r0, [pc, #340]	; (80087ac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008658:	f7fd ffb4 	bl	80065c4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 800865c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	4b11      	ldr	r3, [pc, #68]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b52      	ldr	r3, [pc, #328]	; (80087b0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008668:	4a2d      	ldr	r2, [pc, #180]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800866a:	4950      	ldr	r1, [pc, #320]	; (80087ac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800866c:	4851      	ldr	r0, [pc, #324]	; (80087b4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800866e:	f00c fe7b 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008672:	4851      	ldr	r0, [pc, #324]	; (80087b8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008674:	f7fe f8dc 	bl	8006830 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008678:	f240 2315 	movw	r3, #533	; 0x215
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4b4e      	ldr	r3, [pc, #312]	; (80087bc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008684:	4a26      	ldr	r2, [pc, #152]	; (8008720 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008686:	494c      	ldr	r1, [pc, #304]	; (80087b8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008688:	484d      	ldr	r0, [pc, #308]	; (80087c0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800868a:	f00c fe6d 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800868e:	484d      	ldr	r0, [pc, #308]	; (80087c4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008690:	f7fe f984 	bl	800699c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008694:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	4b4a      	ldr	r3, [pc, #296]	; (80087c8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 80086a0:	e094      	b.n	80087cc <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 80086a2:	bf00      	nop
 80086a4:	20000380 	.word	0x20000380
 80086a8:	08023ff4 	.word	0x08023ff4
 80086ac:	0802483c 	.word	0x0802483c
 80086b0:	08024848 	.word	0x08024848
 80086b4:	2000039c 	.word	0x2000039c
 80086b8:	200003a0 	.word	0x200003a0
 80086bc:	08024860 	.word	0x08024860
 80086c0:	200003bc 	.word	0x200003bc
 80086c4:	200003c0 	.word	0x200003c0
 80086c8:	08024870 	.word	0x08024870
 80086cc:	200003dc 	.word	0x200003dc
 80086d0:	200003e0 	.word	0x200003e0
 80086d4:	08024884 	.word	0x08024884
 80086d8:	200003fc 	.word	0x200003fc
 80086dc:	20000400 	.word	0x20000400
 80086e0:	08024894 	.word	0x08024894
 80086e4:	2000041c 	.word	0x2000041c
 80086e8:	20000420 	.word	0x20000420
 80086ec:	080248ac 	.word	0x080248ac
 80086f0:	2000043c 	.word	0x2000043c
 80086f4:	20000440 	.word	0x20000440
 80086f8:	080248bc 	.word	0x080248bc
 80086fc:	2000045c 	.word	0x2000045c
 8008700:	20000460 	.word	0x20000460
 8008704:	080248cc 	.word	0x080248cc
 8008708:	2000047c 	.word	0x2000047c
 800870c:	20000480 	.word	0x20000480
 8008710:	080248d8 	.word	0x080248d8
 8008714:	2000049c 	.word	0x2000049c
 8008718:	200004a8 	.word	0x200004a8
 800871c:	080248e8 	.word	0x080248e8
 8008720:	080248f8 	.word	0x080248f8
 8008724:	200004c4 	.word	0x200004c4
 8008728:	200004c8 	.word	0x200004c8
 800872c:	08024910 	.word	0x08024910
 8008730:	200004e4 	.word	0x200004e4
 8008734:	200004e8 	.word	0x200004e8
 8008738:	08024928 	.word	0x08024928
 800873c:	20000504 	.word	0x20000504
 8008740:	20000508 	.word	0x20000508
 8008744:	08024944 	.word	0x08024944
 8008748:	20000524 	.word	0x20000524
 800874c:	20000528 	.word	0x20000528
 8008750:	08024958 	.word	0x08024958
 8008754:	20000544 	.word	0x20000544
 8008758:	20000548 	.word	0x20000548
 800875c:	08024974 	.word	0x08024974
 8008760:	20000564 	.word	0x20000564
 8008764:	20000568 	.word	0x20000568
 8008768:	08024988 	.word	0x08024988
 800876c:	20000584 	.word	0x20000584
 8008770:	20000588 	.word	0x20000588
 8008774:	080249a4 	.word	0x080249a4
 8008778:	200005a4 	.word	0x200005a4
 800877c:	200005a8 	.word	0x200005a8
 8008780:	080249bc 	.word	0x080249bc
 8008784:	200005c4 	.word	0x200005c4
 8008788:	200005c8 	.word	0x200005c8
 800878c:	080249d0 	.word	0x080249d0
 8008790:	200005e4 	.word	0x200005e4
 8008794:	200005e8 	.word	0x200005e8
 8008798:	080249f0 	.word	0x080249f0
 800879c:	20000604 	.word	0x20000604
 80087a0:	20000608 	.word	0x20000608
 80087a4:	08024a08 	.word	0x08024a08
 80087a8:	20000624 	.word	0x20000624
 80087ac:	20000628 	.word	0x20000628
 80087b0:	08024a20 	.word	0x08024a20
 80087b4:	20000644 	.word	0x20000644
 80087b8:	20000648 	.word	0x20000648
 80087bc:	08024a34 	.word	0x08024a34
 80087c0:	20000664 	.word	0x20000664
 80087c4:	20000668 	.word	0x20000668
 80087c8:	08024a50 	.word	0x08024a50
 80087cc:	4a83      	ldr	r2, [pc, #524]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087ce:	4984      	ldr	r1, [pc, #528]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80087d0:	4884      	ldr	r0, [pc, #528]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80087d2:	f00c fdc9 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80087d6:	4884      	ldr	r0, [pc, #528]	; (80089e8 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087d8:	f7fe fa16 	bl	8006c08 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80087dc:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	4b82      	ldr	r3, [pc, #520]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	4b82      	ldr	r3, [pc, #520]	; (80089f0 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80087e8:	4a7c      	ldr	r2, [pc, #496]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80087ea:	497f      	ldr	r1, [pc, #508]	; (80089e8 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80087ec:	4881      	ldr	r0, [pc, #516]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80087ee:	f00c fdbb 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80087f2:	4881      	ldr	r0, [pc, #516]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80087f4:	f7fe faee 	bl	8006dd4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80087f8:	f240 2375 	movw	r3, #629	; 0x275
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	4b7b      	ldr	r3, [pc, #492]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	4b7e      	ldr	r3, [pc, #504]	; (80089fc <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8008804:	4a75      	ldr	r2, [pc, #468]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008806:	497c      	ldr	r1, [pc, #496]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008808:	487d      	ldr	r0, [pc, #500]	; (8008a00 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800880a:	f00c fdad 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800880e:	487d      	ldr	r0, [pc, #500]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008810:	f7fe fc32 	bl	8007078 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 8008814:	f240 239a 	movw	r3, #666	; 0x29a
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	4b74      	ldr	r3, [pc, #464]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4b7a      	ldr	r3, [pc, #488]	; (8008a08 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8008820:	4a6e      	ldr	r2, [pc, #440]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008822:	4978      	ldr	r1, [pc, #480]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008824:	4879      	ldr	r0, [pc, #484]	; (8008a0c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008826:	f00c fd9f 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 800882a:	4879      	ldr	r0, [pc, #484]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800882c:	f7fe fd02 	bl	8007234 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 8008830:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	4b6d      	ldr	r3, [pc, #436]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4b76      	ldr	r3, [pc, #472]	; (8008a14 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800883c:	4a67      	ldr	r2, [pc, #412]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800883e:	4974      	ldr	r1, [pc, #464]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008840:	4875      	ldr	r0, [pc, #468]	; (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008842:	f00c fd91 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8008846:	4875      	ldr	r0, [pc, #468]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008848:	f7fe fd6c 	bl	8007324 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 800884c:	f240 23c1 	movw	r3, #705	; 0x2c1
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	4b66      	ldr	r3, [pc, #408]	; (80089ec <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	4b72      	ldr	r3, [pc, #456]	; (8008a20 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008858:	4a60      	ldr	r2, [pc, #384]	; (80089dc <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800885a:	4970      	ldr	r1, [pc, #448]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800885c:	4871      	ldr	r0, [pc, #452]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800885e:	f00c fd83 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f040 80b4 	bne.w	80089d2 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008870:	4293      	cmp	r3, r2
 8008872:	f040 80ae 	bne.w	80089d2 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008876:	486b      	ldr	r0, [pc, #428]	; (8008a24 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008878:	f00c fda0 	bl	80153bc <_ZN13TestInstallerD1Ev>
 800887c:	4867      	ldr	r0, [pc, #412]	; (8008a1c <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800887e:	f7fe fe0f 	bl	80074a0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008882:	4865      	ldr	r0, [pc, #404]	; (8008a18 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008884:	f00c fd9a 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008888:	4861      	ldr	r0, [pc, #388]	; (8008a10 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800888a:	f7fe fe4d 	bl	8007528 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800888e:	485f      	ldr	r0, [pc, #380]	; (8008a0c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008890:	f00c fd94 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008894:	485b      	ldr	r0, [pc, #364]	; (8008a04 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008896:	f7fe fe8b 	bl	80075b0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800889a:	4859      	ldr	r0, [pc, #356]	; (8008a00 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800889c:	f00c fd8e 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088a0:	4855      	ldr	r0, [pc, #340]	; (80089f8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80088a2:	f7fe fec9 	bl	8007638 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80088a6:	4853      	ldr	r0, [pc, #332]	; (80089f4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80088a8:	f00c fd88 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088ac:	484e      	ldr	r0, [pc, #312]	; (80089e8 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 80088ae:	f7fe ff07 	bl	80076c0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80088b2:	484c      	ldr	r0, [pc, #304]	; (80089e4 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80088b4:	f00c fd82 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088b8:	4849      	ldr	r0, [pc, #292]	; (80089e0 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80088ba:	f7fe ff45 	bl	8007748 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80088be:	485a      	ldr	r0, [pc, #360]	; (8008a28 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80088c0:	f00c fd7c 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088c4:	4859      	ldr	r0, [pc, #356]	; (8008a2c <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80088c6:	f7fe ff83 	bl	80077d0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 80088ca:	4859      	ldr	r0, [pc, #356]	; (8008a30 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80088cc:	f00c fd76 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088d0:	4858      	ldr	r0, [pc, #352]	; (8008a34 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80088d2:	f7fe ffc1 	bl	8007858 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80088d6:	4858      	ldr	r0, [pc, #352]	; (8008a38 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80088d8:	f00c fd70 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088dc:	4857      	ldr	r0, [pc, #348]	; (8008a3c <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80088de:	f7fe ffff 	bl	80078e0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80088e2:	4857      	ldr	r0, [pc, #348]	; (8008a40 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80088e4:	f00c fd6a 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088e8:	4856      	ldr	r0, [pc, #344]	; (8008a44 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80088ea:	f7ff f83d 	bl	8007968 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80088ee:	4856      	ldr	r0, [pc, #344]	; (8008a48 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80088f0:	f00c fd64 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80088f4:	4855      	ldr	r0, [pc, #340]	; (8008a4c <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80088f6:	f7ff f87b 	bl	80079f0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80088fa:	4855      	ldr	r0, [pc, #340]	; (8008a50 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80088fc:	f00c fd5e 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008900:	4854      	ldr	r0, [pc, #336]	; (8008a54 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8008902:	f7ff f8b9 	bl	8007a78 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008906:	4854      	ldr	r0, [pc, #336]	; (8008a58 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008908:	f00c fd58 	bl	80153bc <_ZN13TestInstallerD1Ev>
 800890c:	4853      	ldr	r0, [pc, #332]	; (8008a5c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 800890e:	f7ff f8f7 	bl	8007b00 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008912:	4853      	ldr	r0, [pc, #332]	; (8008a60 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8008914:	f00c fd52 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008918:	4852      	ldr	r0, [pc, #328]	; (8008a64 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 800891a:	f7ff f935 	bl	8007b88 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800891e:	4852      	ldr	r0, [pc, #328]	; (8008a68 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8008920:	f00c fd4c 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008924:	4851      	ldr	r0, [pc, #324]	; (8008a6c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 8008926:	f7ff f973 	bl	8007c10 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 800892a:	4851      	ldr	r0, [pc, #324]	; (8008a70 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 800892c:	f00c fd46 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008930:	4850      	ldr	r0, [pc, #320]	; (8008a74 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8008932:	f7ff f9b1 	bl	8007c98 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008936:	4850      	ldr	r0, [pc, #320]	; (8008a78 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8008938:	f00c fd40 	bl	80153bc <_ZN13TestInstallerD1Ev>
 800893c:	484f      	ldr	r0, [pc, #316]	; (8008a7c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 800893e:	f7ff f9ef 	bl	8007d20 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008942:	484f      	ldr	r0, [pc, #316]	; (8008a80 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8008944:	f00c fd3a 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008948:	484e      	ldr	r0, [pc, #312]	; (8008a84 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 800894a:	f7ff fa2d 	bl	8007da8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800894e:	484e      	ldr	r0, [pc, #312]	; (8008a88 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008950:	f00c fd34 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008954:	484d      	ldr	r0, [pc, #308]	; (8008a8c <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8008956:	f7ff fa6b 	bl	8007e30 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 800895a:	484d      	ldr	r0, [pc, #308]	; (8008a90 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 800895c:	f00c fd2e 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008960:	484c      	ldr	r0, [pc, #304]	; (8008a94 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8008962:	f7ff faa9 	bl	8007eb8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008966:	484c      	ldr	r0, [pc, #304]	; (8008a98 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008968:	f00c fd28 	bl	80153bc <_ZN13TestInstallerD1Ev>
 800896c:	484b      	ldr	r0, [pc, #300]	; (8008a9c <_Z41__static_initialization_and_destruction_0ii+0x694>)
 800896e:	f7ff fae7 	bl	8007f40 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008972:	484b      	ldr	r0, [pc, #300]	; (8008aa0 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008974:	f00c fd22 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008978:	484a      	ldr	r0, [pc, #296]	; (8008aa4 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 800897a:	f7ff fb25 	bl	8007fc8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800897e:	484a      	ldr	r0, [pc, #296]	; (8008aa8 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008980:	f00c fd1c 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008984:	4849      	ldr	r0, [pc, #292]	; (8008aac <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008986:	f7ff fb63 	bl	8008050 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 800898a:	4849      	ldr	r0, [pc, #292]	; (8008ab0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800898c:	f00c fd16 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8008990:	4848      	ldr	r0, [pc, #288]	; (8008ab4 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008992:	f7ff fba1 	bl	80080d8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008996:	4848      	ldr	r0, [pc, #288]	; (8008ab8 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008998:	f00c fd10 	bl	80153bc <_ZN13TestInstallerD1Ev>
 800899c:	4847      	ldr	r0, [pc, #284]	; (8008abc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800899e:	f7ff fbdf 	bl	8008160 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80089a2:	4847      	ldr	r0, [pc, #284]	; (8008ac0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 80089a4:	f00c fd0a 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80089a8:	4846      	ldr	r0, [pc, #280]	; (8008ac4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80089aa:	f7ff fc1d 	bl	80081e8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80089ae:	4846      	ldr	r0, [pc, #280]	; (8008ac8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80089b0:	f00c fd04 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80089b4:	4845      	ldr	r0, [pc, #276]	; (8008acc <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80089b6:	f7ff fc5b 	bl	8008270 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80089ba:	4845      	ldr	r0, [pc, #276]	; (8008ad0 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80089bc:	f00c fcfe 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80089c0:	4844      	ldr	r0, [pc, #272]	; (8008ad4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80089c2:	f7ff fc99 	bl	80082f8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80089c6:	4844      	ldr	r0, [pc, #272]	; (8008ad8 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80089c8:	f00c fcf8 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80089cc:	4843      	ldr	r0, [pc, #268]	; (8008adc <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80089ce:	f7ff fcd7 	bl	8008380 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	080248f8 	.word	0x080248f8
 80089e0:	20000668 	.word	0x20000668
 80089e4:	20000684 	.word	0x20000684
 80089e8:	20000688 	.word	0x20000688
 80089ec:	08023ff4 	.word	0x08023ff4
 80089f0:	08024a68 	.word	0x08024a68
 80089f4:	200006a4 	.word	0x200006a4
 80089f8:	200006a8 	.word	0x200006a8
 80089fc:	08024a7c 	.word	0x08024a7c
 8008a00:	200006c4 	.word	0x200006c4
 8008a04:	200006c8 	.word	0x200006c8
 8008a08:	08024a94 	.word	0x08024a94
 8008a0c:	200006e4 	.word	0x200006e4
 8008a10:	200006e8 	.word	0x200006e8
 8008a14:	08024aac 	.word	0x08024aac
 8008a18:	20000704 	.word	0x20000704
 8008a1c:	20000708 	.word	0x20000708
 8008a20:	08024acc 	.word	0x08024acc
 8008a24:	20000724 	.word	0x20000724
 8008a28:	20000664 	.word	0x20000664
 8008a2c:	20000648 	.word	0x20000648
 8008a30:	20000644 	.word	0x20000644
 8008a34:	20000628 	.word	0x20000628
 8008a38:	20000624 	.word	0x20000624
 8008a3c:	20000608 	.word	0x20000608
 8008a40:	20000604 	.word	0x20000604
 8008a44:	200005e8 	.word	0x200005e8
 8008a48:	200005e4 	.word	0x200005e4
 8008a4c:	200005c8 	.word	0x200005c8
 8008a50:	200005c4 	.word	0x200005c4
 8008a54:	200005a8 	.word	0x200005a8
 8008a58:	200005a4 	.word	0x200005a4
 8008a5c:	20000588 	.word	0x20000588
 8008a60:	20000584 	.word	0x20000584
 8008a64:	20000568 	.word	0x20000568
 8008a68:	20000564 	.word	0x20000564
 8008a6c:	20000548 	.word	0x20000548
 8008a70:	20000544 	.word	0x20000544
 8008a74:	20000528 	.word	0x20000528
 8008a78:	20000524 	.word	0x20000524
 8008a7c:	20000508 	.word	0x20000508
 8008a80:	20000504 	.word	0x20000504
 8008a84:	200004e8 	.word	0x200004e8
 8008a88:	200004e4 	.word	0x200004e4
 8008a8c:	200004c8 	.word	0x200004c8
 8008a90:	200004c4 	.word	0x200004c4
 8008a94:	200004a8 	.word	0x200004a8
 8008a98:	2000049c 	.word	0x2000049c
 8008a9c:	20000480 	.word	0x20000480
 8008aa0:	2000047c 	.word	0x2000047c
 8008aa4:	20000460 	.word	0x20000460
 8008aa8:	2000045c 	.word	0x2000045c
 8008aac:	20000440 	.word	0x20000440
 8008ab0:	2000043c 	.word	0x2000043c
 8008ab4:	20000420 	.word	0x20000420
 8008ab8:	2000041c 	.word	0x2000041c
 8008abc:	20000400 	.word	0x20000400
 8008ac0:	200003fc 	.word	0x200003fc
 8008ac4:	200003e0 	.word	0x200003e0
 8008ac8:	200003dc 	.word	0x200003dc
 8008acc:	200003c0 	.word	0x200003c0
 8008ad0:	200003bc 	.word	0x200003bc
 8008ad4:	200003a0 	.word	0x200003a0
 8008ad8:	2000039c 	.word	0x2000039c
 8008adc:	20000380 	.word	0x20000380

08008ae0 <_GLOBAL__sub_I_rx_buffer>:
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7ff fc8d 	bl	8008408 <_Z41__static_initialization_and_destruction_0ii>
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <_GLOBAL__sub_D_rx_buffer>:
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008af8:	2000      	movs	r0, #0
 8008afa:	f7ff fc85 	bl	8008408 <_Z41__static_initialization_and_destruction_0ii>
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b06:	f7f8 fa6a 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b0a:	f000 f817 	bl	8008b3c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b0e:	f000 f973 	bl	8008df8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8008b12:	f000 f947 	bl	8008da4 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8008b16:	f000 f887 	bl	8008c28 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8008b1a:	f000 f8e3 	bl	8008ce4 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 8008b1e:	4a06      	ldr	r2, [pc, #24]	; (8008b38 <main+0x38>)
 8008b20:	463b      	mov	r3, r7
 8008b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b26:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	2002      	movs	r0, #2
 8008b30:	f000 fd0e 	bl	8009550 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8008b34:	e7fe      	b.n	8008b34 <main+0x34>
 8008b36:	bf00      	nop
 8008b38:	08024aec 	.word	0x08024aec

08008b3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b0a8      	sub	sp, #160	; 0xa0
 8008b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008b46:	2238      	movs	r2, #56	; 0x38
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f018 fa74 	bl	8021038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	605a      	str	r2, [r3, #4]
 8008b5a:	609a      	str	r2, [r3, #8]
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b60:	463b      	mov	r3, r7
 8008b62:	2254      	movs	r2, #84	; 0x54
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f018 fa66 	bl	8021038 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7f8 ffef 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b72:	2301      	movs	r3, #1
 8008b74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b82:	2303      	movs	r3, #3
 8008b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8008b88:	2306      	movs	r3, #6
 8008b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8008b8e:	2355      	movs	r3, #85	; 0x55
 8008b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008b94:	2302      	movs	r3, #2
 8008b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ba6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7f9 f884 	bl	8001cb8 <HAL_RCC_OscConfig>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	2301      	movne	r3, #1
 8008bb8:	2300      	moveq	r3, #0
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8008bc0:	f000 f98a 	bl	8008ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008bc4:	230f      	movs	r3, #15
 8008bc6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008bd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008bdc:	2104      	movs	r1, #4
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 fb82 	bl	80022e8 <HAL_RCC_ClockConfig>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8008bf4:	f000 f970 	bl	8008ed8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8008bf8:	2321      	movs	r3, #33	; 0x21
 8008bfa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008c04:	463b      	mov	r3, r7
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f9 fd8a 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bf14      	ite	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	2300      	moveq	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8008c1c:	f000 f95c 	bl	8008ed8 <Error_Handler>
  }
}
 8008c20:	bf00      	nop
 8008c22:	37a0      	adds	r7, #160	; 0xa0
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008c2c:	4b2b      	ldr	r3, [pc, #172]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c2e:	4a2c      	ldr	r2, [pc, #176]	; (8008ce0 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008c30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008c32:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c3a:	4b28      	ldr	r3, [pc, #160]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008c40:	4b26      	ldr	r3, [pc, #152]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008c46:	4b25      	ldr	r3, [pc, #148]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008c4c:	4b23      	ldr	r3, [pc, #140]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c4e:	220c      	movs	r2, #12
 8008c50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c52:	4b22      	ldr	r3, [pc, #136]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008c58:	4b20      	ldr	r3, [pc, #128]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008c64:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008c6a:	481c      	ldr	r0, [pc, #112]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c6c:	f7f9 ffa4 	bl	8002bb8 <HAL_UART_Init>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8008c80:	f000 f92a 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008c84:	2100      	movs	r1, #0
 8008c86:	4815      	ldr	r0, [pc, #84]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008c88:	f7fa ff2a 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bf14      	ite	ne
 8008c92:	2301      	movne	r3, #1
 8008c94:	2300      	moveq	r3, #0
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8008c9c:	f000 f91c 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	480e      	ldr	r0, [pc, #56]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008ca4:	f7fa ff5a 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf14      	ite	ne
 8008cae:	2301      	movne	r3, #1
 8008cb0:	2300      	moveq	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8008cb8:	f000 f90e 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008cbc:	4807      	ldr	r0, [pc, #28]	; (8008cdc <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008cbe:	f7fa fed6 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8008cd2:	f000 f901 	bl	8008ed8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008cd6:	bf00      	nop
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000728 	.word	0x20000728
 8008ce0:	40008000 	.word	0x40008000

08008ce4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008ce8:	4b2c      	ldr	r3, [pc, #176]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008cea:	4a2d      	ldr	r2, [pc, #180]	; (8008da0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008cee:	4b2b      	ldr	r3, [pc, #172]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008cf6:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008cfc:	4b27      	ldr	r3, [pc, #156]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d02:	4b26      	ldr	r3, [pc, #152]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d08:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d0a:	220c      	movs	r2, #12
 8008d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d14:	4b21      	ldr	r3, [pc, #132]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008d20:	4b1e      	ldr	r3, [pc, #120]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d26:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d2c:	481b      	ldr	r0, [pc, #108]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d2e:	f7f9 ff43 	bl	8002bb8 <HAL_UART_Init>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf14      	ite	ne
 8008d38:	2301      	movne	r3, #1
 8008d3a:	2300      	moveq	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8008d42:	f000 f8c9 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d46:	2100      	movs	r1, #0
 8008d48:	4814      	ldr	r0, [pc, #80]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d4a:	f7fa fec9 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8008d5e:	f000 f8bb 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d62:	2100      	movs	r1, #0
 8008d64:	480d      	ldr	r0, [pc, #52]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d66:	f7fa fef9 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bf14      	ite	ne
 8008d70:	2301      	movne	r3, #1
 8008d72:	2300      	moveq	r3, #0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8008d7a:	f000 f8ad 	bl	8008ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008d7e:	4807      	ldr	r0, [pc, #28]	; (8008d9c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008d80:	f7fa fe75 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf14      	ite	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	2300      	moveq	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008d94:	f000 f8a0 	bl	8008ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d98:	bf00      	nop
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200007b8 	.word	0x200007b8
 8008da0:	40013800 	.word	0x40013800

08008da4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dae:	4a11      	ldr	r2, [pc, #68]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008db0:	f043 0304 	orr.w	r3, r3, #4
 8008db4:	6493      	str	r3, [r2, #72]	; 0x48
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dba:	f003 0304 	and.w	r3, r3, #4
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	4a0b      	ldr	r2, [pc, #44]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008dc8:	f043 0301 	orr.w	r3, r3, #1
 8008dcc:	6493      	str	r3, [r2, #72]	; 0x48
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <_ZL11MX_DMA_Initv+0x50>)
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2100      	movs	r1, #0
 8008dde:	200b      	movs	r0, #11
 8008de0:	f7f8 fa49 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008de4:	200b      	movs	r0, #11
 8008de6:	f7f8 fa60 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	40021000 	.word	0x40021000

08008df8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08a      	sub	sp, #40	; 0x28
 8008dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	605a      	str	r2, [r3, #4]
 8008e08:	609a      	str	r2, [r3, #8]
 8008e0a:	60da      	str	r2, [r3, #12]
 8008e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	4a2e      	ldr	r2, [pc, #184]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e14:	f043 0304 	orr.w	r3, r3, #4
 8008e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e1a:	4b2c      	ldr	r3, [pc, #176]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e26:	4b29      	ldr	r3, [pc, #164]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2a:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e2c:	f043 0320 	orr.w	r3, r3, #32
 8008e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e32:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3e:	4b23      	ldr	r3, [pc, #140]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e42:	4a22      	ldr	r2, [pc, #136]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e4a:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e5c:	f043 0302 	orr.w	r3, r3, #2
 8008e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <_ZL12MX_GPIO_Initv+0xd4>)
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2120      	movs	r1, #32
 8008e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e76:	f7f8 fe2f 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008e80:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <_ZL12MX_GPIO_Initv+0xd8>)
 8008e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e84:	2300      	movs	r3, #0
 8008e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008e88:	f107 0314 	add.w	r3, r7, #20
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4811      	ldr	r0, [pc, #68]	; (8008ed4 <_ZL12MX_GPIO_Initv+0xdc>)
 8008e90:	f7f8 fca0 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008e94:	2320      	movs	r3, #32
 8008e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008ea4:	f107 0314 	add.w	r3, r7, #20
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008eae:	f7f8 fc91 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	2028      	movs	r0, #40	; 0x28
 8008eb8:	f7f8 f9dd 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008ebc:	2028      	movs	r0, #40	; 0x28
 8008ebe:	f7f8 f9f4 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008ec2:	bf00      	nop
 8008ec4:	3728      	adds	r7, #40	; 0x28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	10110000 	.word	0x10110000
 8008ed4:	48000800 	.word	0x48000800

08008ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008edc:	b672      	cpsid	i
}
 8008ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008ee0:	e7fe      	b.n	8008ee0 <Error_Handler+0x8>

08008ee2 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:
/* Test functions of the MQTT library-----------------------------------------------------------------------*/

TEST_GROUP(MqttTestGroup)
{

	void setup()
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
	{

	}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
	{

	}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f00b ffb8 	bl	8014e8c <_ZN5UtestC1Ev>
 8008f1c:	4a03      	ldr	r2, [pc, #12]	; (8008f2c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	08028ef8 	.word	0x08028ef8

08008f30 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	4a05      	ldr	r2, [pc, #20]	; (8008f50 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f00b ffb3 	bl	8014eac <_ZN5UtestD1Ev>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	08028ef8 	.word	0x08028ef8

08008f54 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ffe7 	bl	8008f30 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8008f62:	2104      	movs	r1, #4
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 ffd5 	bl	800af14 <_ZdlPvj>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff ffc4 	bl	8008f0c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8008f84:	4a03      	ldr	r2, [pc, #12]	; (8008f94 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	08028ed8 	.word	0x08028ed8

08008f98 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8008f98:	b590      	push	{r4, r7, lr}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	2222      	movs	r2, #34	; 0x22
 8008fa2:	4906      	ldr	r1, [pc, #24]	; (8008fbc <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 8008fa4:	2004      	movs	r0, #4
 8008fa6:	f001 ffa1 	bl	800aeec <_ZnwjPKci>
 8008faa:	4604      	mov	r4, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff ffe1 	bl	8008f74 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd90      	pop	{r4, r7, pc}
 8008fbc:	08024af4 	.word	0x08024af4

08008fc0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f00a fb7c 	bl	80136c8 <_ZN10UtestShellC1Ev>
 8008fd0:	4a03      	ldr	r2, [pc, #12]	; (8008fe0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	08028e2c 	.word	0x08028e2c

08008fe4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	b0b4      	sub	sp, #208	; 0xd0
 8008fea:	af04      	add	r7, sp, #16
 8008fec:	6078      	str	r0, [r7, #4]
	char clientID[] = "Topuz";
 8008fee:	4ac2      	ldr	r2, [pc, #776]	; (80092f8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8008ff0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ff8:	6018      	str	r0, [r3, #0]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 8008ffe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009002:	4618      	mov	r0, r3
 8009004:	f7f7 f91a 	bl	800023c <strlen>
 8009008:	4603      	mov	r3, r0
 800900a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 800900e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009012:	b2db      	uxtb	r3, r3
 8009014:	330c      	adds	r3, #12
 8009016:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 800901a:	2300      	movs	r3, #0
 800901c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800901e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009022:	2260      	movs	r2, #96	; 0x60
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f018 f806 	bl	8021038 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 800902c:	2310      	movs	r3, #16
 800902e:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8009030:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009034:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 8009036:	2304      	movs	r3, #4
 8009038:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 800903a:	f107 030c 	add.w	r3, r7, #12
 800903e:	3304      	adds	r3, #4
 8009040:	4aae      	ldr	r2, [pc, #696]	; (80092fc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 8009042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009046:	6018      	str	r0, [r3, #0]
 8009048:	3304      	adds	r3, #4
 800904a:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 800904c:	2304      	movs	r3, #4
 800904e:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009050:	2302      	movs	r3, #2
 8009052:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8009054:	233c      	movs	r3, #60	; 0x3c
 8009056:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800905c:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 800905e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009062:	f107 030c 	add.w	r3, r7, #12
 8009066:	330e      	adds	r3, #14
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f018 f9fd 	bl	802146a <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009070:	f107 010c 	add.w	r1, r7, #12
 8009074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009078:	2200      	movs	r2, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f7fb f8b2 	bl	80041e4 <mqtt_encode_packet>
 8009080:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 8009084:	f00b fed8 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009088:	4604      	mov	r4, r0
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	3338      	adds	r3, #56	; 0x38
 800908e:	681d      	ldr	r5, [r3, #0]
 8009090:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009094:	1c9e      	adds	r6, r3, #2
 8009096:	f00b fedf 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800909a:	4603      	mov	r3, r0
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	2338      	movs	r3, #56	; 0x38
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	4b97      	ldr	r3, [pc, #604]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	4b97      	ldr	r3, [pc, #604]	; (8009304 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 80090a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090ac:	4631      	mov	r1, r6
 80090ae:	4620      	mov	r0, r4
 80090b0:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 80090b2:	f00b fec1 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80090b6:	4604      	mov	r4, r0
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	681d      	ldr	r5, [r3, #0]
 80090be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80090cc:	18d6      	adds	r6, r2, r3
 80090ce:	f00b fec3 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80090d2:	4603      	mov	r3, r0
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	2339      	movs	r3, #57	; 0x39
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	4b89      	ldr	r3, [pc, #548]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	2300      	movs	r3, #0
 80090e0:	4632      	mov	r2, r6
 80090e2:	4985      	ldr	r1, [pc, #532]	; (80092f8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 80090e4:	4620      	mov	r0, r4
 80090e6:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 80090e8:	f00b fea6 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80090ec:	4604      	mov	r4, r0
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	3338      	adds	r3, #56	; 0x38
 80090f2:	681d      	ldr	r5, [r3, #0]
 80090f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80090f8:	461e      	mov	r6, r3
 80090fa:	f00b fead 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80090fe:	4603      	mov	r3, r0
 8009100:	9302      	str	r3, [sp, #8]
 8009102:	233a      	movs	r3, #58	; 0x3a
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	4b7e      	ldr	r3, [pc, #504]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	4b7f      	ldr	r3, [pc, #508]	; (8009308 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 800910c:	4632      	mov	r2, r6
 800910e:	2110      	movs	r1, #16
 8009110:	4620      	mov	r0, r4
 8009112:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 8009114:	f00b fe90 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009118:	4604      	mov	r4, r0
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	3338      	adds	r3, #56	; 0x38
 800911e:	681d      	ldr	r5, [r3, #0]
 8009120:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 8009124:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009128:	4698      	mov	r8, r3
 800912a:	f00b fe95 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800912e:	4603      	mov	r3, r0
 8009130:	9302      	str	r3, [sp, #8]
 8009132:	233b      	movs	r3, #59	; 0x3b
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	4b72      	ldr	r3, [pc, #456]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4b74      	ldr	r3, [pc, #464]	; (800930c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 800913c:	4642      	mov	r2, r8
 800913e:	4631      	mov	r1, r6
 8009140:	4620      	mov	r0, r4
 8009142:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 8009144:	f00b fe78 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009148:	4604      	mov	r4, r0
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	3338      	adds	r3, #56	; 0x38
 800914e:	681d      	ldr	r5, [r3, #0]
 8009150:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009154:	b29b      	uxth	r3, r3
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	b29a      	uxth	r2, r3
 800915a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800915e:	b29b      	uxth	r3, r3
 8009160:	4413      	add	r3, r2
 8009162:	b29b      	uxth	r3, r3
 8009164:	461e      	mov	r6, r3
 8009166:	f00b fe77 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800916a:	4603      	mov	r3, r0
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	233c      	movs	r3, #60	; 0x3c
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	4b63      	ldr	r3, [pc, #396]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	4b66      	ldr	r3, [pc, #408]	; (8009310 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009178:	4632      	mov	r2, r6
 800917a:	2104      	movs	r1, #4
 800917c:	4620      	mov	r0, r4
 800917e:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009180:	f00b fe5a 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009184:	4604      	mov	r4, r0
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	3338      	adds	r3, #56	; 0x38
 800918a:	681d      	ldr	r5, [r3, #0]
 800918c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009190:	461e      	mov	r6, r3
 8009192:	f00b fe61 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009196:	4603      	mov	r3, r0
 8009198:	9302      	str	r3, [sp, #8]
 800919a:	233d      	movs	r3, #61	; 0x3d
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	4b58      	ldr	r3, [pc, #352]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	4b5c      	ldr	r3, [pc, #368]	; (8009314 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 80091a4:	4632      	mov	r2, r6
 80091a6:	214d      	movs	r1, #77	; 0x4d
 80091a8:	4620      	mov	r0, r4
 80091aa:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 80091ac:	f00b fe44 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80091b0:	4604      	mov	r4, r0
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	3338      	adds	r3, #56	; 0x38
 80091b6:	681d      	ldr	r5, [r3, #0]
 80091b8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80091bc:	461e      	mov	r6, r3
 80091be:	f00b fe4b 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	9302      	str	r3, [sp, #8]
 80091c6:	233e      	movs	r3, #62	; 0x3e
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	4b4d      	ldr	r3, [pc, #308]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4b52      	ldr	r3, [pc, #328]	; (8009318 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 80091d0:	4632      	mov	r2, r6
 80091d2:	2151      	movs	r1, #81	; 0x51
 80091d4:	4620      	mov	r0, r4
 80091d6:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 80091d8:	f00b fe2e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80091dc:	4604      	mov	r4, r0
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	3338      	adds	r3, #56	; 0x38
 80091e2:	681d      	ldr	r5, [r3, #0]
 80091e4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80091e8:	461e      	mov	r6, r3
 80091ea:	f00b fe35 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80091ee:	4603      	mov	r3, r0
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	233f      	movs	r3, #63	; 0x3f
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	4b42      	ldr	r3, [pc, #264]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	4b48      	ldr	r3, [pc, #288]	; (800931c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 80091fc:	4632      	mov	r2, r6
 80091fe:	2154      	movs	r1, #84	; 0x54
 8009200:	4620      	mov	r0, r4
 8009202:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 8009204:	f00b fe18 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009208:	4604      	mov	r4, r0
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	3338      	adds	r3, #56	; 0x38
 800920e:	681d      	ldr	r5, [r3, #0]
 8009210:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009214:	461e      	mov	r6, r3
 8009216:	f00b fe1f 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800921a:	4603      	mov	r3, r0
 800921c:	9302      	str	r3, [sp, #8]
 800921e:	2340      	movs	r3, #64	; 0x40
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	4b37      	ldr	r3, [pc, #220]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4b3e      	ldr	r3, [pc, #248]	; (8009320 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 8009228:	4632      	mov	r2, r6
 800922a:	2154      	movs	r1, #84	; 0x54
 800922c:	4620      	mov	r0, r4
 800922e:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 8009230:	f00b fe02 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009234:	4604      	mov	r4, r0
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	3338      	adds	r3, #56	; 0x38
 800923a:	681d      	ldr	r5, [r3, #0]
 800923c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009240:	461e      	mov	r6, r3
 8009242:	f00b fe09 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009246:	4603      	mov	r3, r0
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	2341      	movs	r3, #65	; 0x41
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	4b2c      	ldr	r3, [pc, #176]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	4b34      	ldr	r3, [pc, #208]	; (8009324 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 8009254:	4632      	mov	r2, r6
 8009256:	2104      	movs	r1, #4
 8009258:	4620      	mov	r0, r4
 800925a:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 800925c:	f00b fdec 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8009260:	4604      	mov	r4, r0
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	3338      	adds	r3, #56	; 0x38
 8009266:	681d      	ldr	r5, [r3, #0]
 8009268:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800926c:	461e      	mov	r6, r3
 800926e:	f00b fdf3 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009272:	4603      	mov	r3, r0
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	2342      	movs	r3, #66	; 0x42
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	4b21      	ldr	r3, [pc, #132]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4b2a      	ldr	r3, [pc, #168]	; (8009328 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009280:	4632      	mov	r2, r6
 8009282:	2102      	movs	r1, #2
 8009284:	4620      	mov	r0, r4
 8009286:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009288:	f00b fdd6 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800928c:	4604      	mov	r4, r0
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	3338      	adds	r3, #56	; 0x38
 8009292:	681d      	ldr	r5, [r3, #0]
 8009294:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009298:	b29b      	uxth	r3, r3
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	b29a      	uxth	r2, r3
 800929e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	4413      	add	r3, r2
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461e      	mov	r6, r3
 80092aa:	f00b fdd5 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	2343      	movs	r3, #67	; 0x43
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	4b1c      	ldr	r3, [pc, #112]	; (800932c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 80092bc:	4632      	mov	r2, r6
 80092be:	213c      	movs	r1, #60	; 0x3c
 80092c0:	4620      	mov	r0, r4
 80092c2:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 80092c4:	f00b fdb8 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80092c8:	4604      	mov	r4, r0
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	3338      	adds	r3, #56	; 0x38
 80092ce:	681d      	ldr	r5, [r3, #0]
 80092d0:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 80092d4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80092d8:	b29b      	uxth	r3, r3
 80092da:	021b      	lsls	r3, r3, #8
 80092dc:	b29a      	uxth	r2, r3
 80092de:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4413      	add	r3, r2
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	4698      	mov	r8, r3
 80092ea:	f00b fdb5 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092ee:	4603      	mov	r3, r0
 80092f0:	9302      	str	r3, [sp, #8]
 80092f2:	2344      	movs	r3, #68	; 0x44
 80092f4:	e01c      	b.n	8009330 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 80092f6:	bf00      	nop
 80092f8:	08024b44 	.word	0x08024b44
 80092fc:	08024b10 	.word	0x08024b10
 8009300:	08024af4 	.word	0x08024af4
 8009304:	08024b18 	.word	0x08024b18
 8009308:	08024b4c 	.word	0x08024b4c
 800930c:	08024b78 	.word	0x08024b78
 8009310:	08024bac 	.word	0x08024bac
 8009314:	08024c00 	.word	0x08024c00
 8009318:	08024c2c 	.word	0x08024c2c
 800931c:	08024c58 	.word	0x08024c58
 8009320:	08024c84 	.word	0x08024c84
 8009324:	08024cb0 	.word	0x08024cb0
 8009328:	08024cdc 	.word	0x08024cdc
 800932c:	08024d08 	.word	0x08024d08
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	4b06      	ldr	r3, [pc, #24]	; (800934c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	4b06      	ldr	r3, [pc, #24]	; (8009350 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 8009338:	4642      	mov	r2, r8
 800933a:	4631      	mov	r1, r6
 800933c:	4620      	mov	r0, r4
 800933e:	47a8      	blx	r5

}
 8009340:	bf00      	nop
 8009342:	37c0      	adds	r7, #192	; 0xc0
 8009344:	46bd      	mov	sp, r7
 8009346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934a:	bf00      	nop
 800934c:	08024af4 	.word	0x08024af4
 8009350:	08024d64 	.word	0x08024d64

08009354 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	4a05      	ldr	r2, [pc, #20]	; (8009374 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4618      	mov	r0, r3
 8009366:	f00a fa03 	bl	8013770 <_ZN10UtestShellD1Ev>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	08028e2c 	.word	0x08028e2c

08009378 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ffe7 	bl	8009354 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 8009386:	211c      	movs	r1, #28
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 fdc3 	bl	800af14 <_ZdlPvj>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	4a05      	ldr	r2, [pc, #20]	; (80093b8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fdc1 	bl	8008f30 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	08028ed8 	.word	0x08028ed8

080093bc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ffe7 	bl	8009398 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 80093ca:	2104      	movs	r1, #4
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f001 fda1 	bl	800af14 <_ZdlPvj>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <_Z41__static_initialization_and_destruction_0ii>:
}
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d111      	bne.n	8009410 <_Z41__static_initialization_and_destruction_0ii+0x34>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d10c      	bne.n	8009410 <_Z41__static_initialization_and_destruction_0ii+0x34>
TEST(MqttTestGroup, ConnectPacketTest)
 80093f6:	480f      	ldr	r0, [pc, #60]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80093f8:	f7ff fde2 	bl	8008fc0 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 80093fc:	2322      	movs	r3, #34	; 0x22
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	4b0d      	ldr	r3, [pc, #52]	; (8009438 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	4b0d      	ldr	r3, [pc, #52]	; (800943c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009406:	4a0e      	ldr	r2, [pc, #56]	; (8009440 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8009408:	490a      	ldr	r1, [pc, #40]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800940a:	480e      	ldr	r0, [pc, #56]	; (8009444 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800940c:	f00b ffac 	bl	8015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800941c:	4293      	cmp	r3, r2
 800941e:	d105      	bne.n	800942c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8009420:	4808      	ldr	r0, [pc, #32]	; (8009444 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8009422:	f00b ffcb 	bl	80153bc <_ZN13TestInstallerD1Ev>
 8009426:	4803      	ldr	r0, [pc, #12]	; (8009434 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8009428:	f7ff ff94 	bl	8009354 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200008a8 	.word	0x200008a8
 8009438:	08024af4 	.word	0x08024af4
 800943c:	08024dc0 	.word	0x08024dc0
 8009440:	08024dd4 	.word	0x08024dd4
 8009444:	200008c4 	.word	0x200008c4

08009448 <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
 800944c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009450:	2001      	movs	r0, #1
 8009452:	f7ff ffc3 	bl	80093dc <_Z41__static_initialization_and_destruction_0ii>
 8009456:	bd80      	pop	{r7, pc}

08009458 <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
 800945c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009460:	2000      	movs	r0, #0
 8009462:	f7ff ffbb 	bl	80093dc <_Z41__static_initialization_and_destruction_0ii>
 8009466:	bd80      	pop	{r7, pc}

08009468 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
    }
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	69db      	ldr	r3, [r3, #28]
    }
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
    }
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80094b0:	b590      	push	{r4, r7, lr}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff ffed 	bl	8009498 <_ZNK10TestResult15getFailureCountEv>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <_ZNK10TestResult9isFailureEv+0x2a>
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ffcf 	bl	8009468 <_ZNK10TestResult11getRunCountEv>
 80094ca:	4604      	mov	r4, r0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff ffd7 	bl	8009480 <_ZNK10TestResult15getIgnoredCountEv>
 80094d2:	4603      	mov	r3, r0
 80094d4:	4423      	add	r3, r4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <_ZNK10TestResult9isFailureEv+0x2e>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <_ZNK10TestResult9isFailureEv+0x30>
 80094de:	2300      	movs	r3, #0
    }
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd90      	pop	{r4, r7, pc}

080094e8 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
    {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f007 fde6 	bl	80110c4 <_ZN10TestOutputC1Ev>
 80094f8:	4a03      	ldr	r2, [pc, #12]	; (8009508 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
    }
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4618      	mov	r0, r3
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	0802958c 	.word	0x0802958c

0800950c <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
    {
 8009514:	4a05      	ldr	r2, [pc, #20]	; (800952c <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	f007 fdef 	bl	8011100 <_ZN10TestOutputD1Ev>
    }
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	0802958c 	.word	0x0802958c

08009530 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
    }
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7ff ffe7 	bl	800950c <_ZN17ConsoleTestOutputD1Ev>
 800953e:	2110      	movs	r1, #16
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 fce7 	bl	800af14 <_ZdlPvj>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8009550:	b5b0      	push	{r4, r5, r7, lr}
 8009552:	b098      	sub	sp, #96	; 0x60
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
    int result = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800955e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff ffc0 	bl	80094e8 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009568:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800956c:	4935      	ldr	r1, [pc, #212]	; (8009644 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800956e:	4618      	mov	r0, r3
 8009570:	f004 f87f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009574:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009578:	f107 0318 	add.w	r3, r7, #24
 800957c:	2200      	movs	r2, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f001 ff6a 	bl	800b458 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8009584:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009588:	4618      	mov	r0, r3
 800958a:	f004 fc2a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800958e:	f107 0318 	add.w	r3, r7, #24
 8009592:	2101      	movs	r1, #1
 8009594:	4618      	mov	r0, r3
 8009596:	f001 ff2f 	bl	800b3f8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800959a:	f009 fb21 	bl	8012be0 <_ZN12TestRegistry18getCurrentRegistryEv>
 800959e:	4603      	mov	r3, r0
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	3234      	adds	r2, #52	; 0x34
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	f107 0118 	add.w	r1, r7, #24
 80095aa:	4618      	mov	r0, r3
 80095ac:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80095ae:	f009 fb17 	bl	8012be0 <_ZN12TestRegistry18getCurrentRegistryEv>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f107 0008 	add.w	r0, r7, #8
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	f000 f844 	bl	8009648 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 80095c0:	f107 0308 	add.w	r3, r7, #8
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f899 	bl	80096fc <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 80095ca:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f863 	bl	800969c <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 80095d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 80095dc:	f107 0318 	add.w	r3, r7, #24
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f002 f83a 	bl	800b65c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 80095e8:	4602      	mov	r2, r0
 80095ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095ee:	4611      	mov	r1, r2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f007 fe27 	bl	8011244 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 80095f6:	f009 faf3 	bl	8012be0 <_ZN12TestRegistry18getCurrentRegistryEv>
 80095fa:	4604      	mov	r4, r0
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	3344      	adds	r3, #68	; 0x44
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009606:	490f      	ldr	r1, [pc, #60]	; (8009644 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009608:	4618      	mov	r0, r3
 800960a:	f004 f832 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800960e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009612:	4619      	mov	r1, r3
 8009614:	4620      	mov	r0, r4
 8009616:	47a8      	blx	r5
 8009618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800961c:	4618      	mov	r0, r3
 800961e:	f004 fbe0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return result;
 8009622:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009624:	f107 0318 	add.w	r3, r7, #24
 8009628:	4618      	mov	r0, r3
 800962a:	f001 ff4d 	bl	800b4c8 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800962e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff ff6a 	bl	800950c <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8009638:	4623      	mov	r3, r4
}
 800963a:	4618      	mov	r0, r3
 800963c:	3760      	adds	r7, #96	; 0x60
 800963e:	46bd      	mov	sp, r7
 8009640:	bdb0      	pop	{r4, r5, r7, pc}
 8009642:	bf00      	nop
 8009644:	08024de4 	.word	0x08024de4

08009648 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8009656:	4a0f      	ldr	r2, [pc, #60]	; (8009694 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	605a      	str	r2, [r3, #4]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	609a      	str	r2, [r3, #8]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800966e:	2241      	movs	r2, #65	; 0x41
 8009670:	4909      	ldr	r1, [pc, #36]	; (8009698 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8009672:	2038      	movs	r0, #56	; 0x38
 8009674:	f001 fc3a 	bl	800aeec <_ZnwjPKci>
 8009678:	4604      	mov	r4, r0
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	4620      	mov	r0, r4
 8009680:	f00c f84a 	bl	8015718 <_ZN20CommandLineArgumentsC1EiPKPKc>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	609c      	str	r4, [r3, #8]
}
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	bd90      	pop	{r4, r7, pc}
 8009692:	bf00      	nop
 8009694:	08028f18 	.word	0x08028f18
 8009698:	08024df8 	.word	0x08024df8

0800969c <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	3204      	adds	r2, #4
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	4618      	mov	r0, r3
 80096ba:	4790      	blx	r2
    delete output_;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <_ZN21CommandLineTestRunnerD1Ev+0x32>
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	3204      	adds	r2, #4
 80096c8:	6812      	ldr	r2, [r2, #0]
 80096ca:	4618      	mov	r0, r3
 80096cc:	4790      	blx	r2
}
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	08028f18 	.word	0x08028f18

080096dc <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
}
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff ffd9 	bl	800969c <_ZN21CommandLineTestRunnerD1Ev>
 80096ea:	2110      	movs	r1, #16
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fc11 	bl	800af14 <_ZdlPvj>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 80096fc:	b5b0      	push	{r4, r5, r7, lr}
 80096fe:	b08c      	sub	sp, #48	; 0x30
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8009704:	2301      	movs	r3, #1
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8009708:	f107 031c 	add.w	r3, r7, #28
 800970c:	4929      	ldr	r1, [pc, #164]	; (80097b4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800970e:	4618      	mov	r0, r3
 8009710:	f003 ffaf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009714:	f107 021c 	add.w	r2, r7, #28
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f008 fe1c 	bl	801235c <_ZN16SetPointerPluginC1ERK12SimpleString>
 8009724:	f107 031c 	add.w	r3, r7, #28
 8009728:	4618      	mov	r0, r3
 800972a:	f004 fb5a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3334      	adds	r3, #52	; 0x34
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	333c      	adds	r3, #60	; 0x3c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4610      	mov	r0, r2
 8009754:	4798      	blx	r3
 8009756:	4603      	mov	r3, r0
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa3e 	bl	8009bdc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f8ac 	bl	80098c4 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800976c:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68dd      	ldr	r5, [r3, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3344      	adds	r3, #68	; 0x44
 800977a:	681c      	ldr	r4, [r3, #0]
 800977c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009780:	490c      	ldr	r1, [pc, #48]	; (80097b4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8009782:	4618      	mov	r0, r3
 8009784:	f003 ff75 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800978c:	4619      	mov	r1, r3
 800978e:	4628      	mov	r0, r5
 8009790:	47a0      	blx	r4
 8009792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009796:	4618      	mov	r0, r3
 8009798:	f004 fb23 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return testResult;
 800979c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800979e:	f107 0308 	add.w	r3, r7, #8
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 faaa 	bl	8009cfc <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80097a8:	4623      	mov	r3, r4
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3730      	adds	r7, #48	; 0x30
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bdb0      	pop	{r4, r5, r7, pc}
 80097b2:	bf00      	nop
 80097b4:	08024e1c 	.word	0x08024e1c

080097b8 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80097b8:	b5b0      	push	{r4, r5, r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68dd      	ldr	r5, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3330      	adds	r3, #48	; 0x30
 80097cc:	681c      	ldr	r4, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f00c fce0 	bl	8016198 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 80097d8:	4603      	mov	r3, r0
 80097da:	4619      	mov	r1, r3
 80097dc:	4628      	mov	r0, r5
 80097de:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68dd      	ldr	r5, [r3, #12]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	332c      	adds	r3, #44	; 0x2c
 80097ec:	681c      	ldr	r4, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f00c fcdc 	bl	80161b0 <_ZNK20CommandLineArguments14getNameFiltersEv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	4619      	mov	r1, r3
 80097fc:	4628      	mov	r0, r5
 80097fe:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	4618      	mov	r0, r3
 8009806:	f00c fc2b 	bl	8016060 <_ZNK20CommandLineArguments9isVerboseEv>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d009      	beq.n	8009824 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3320      	adds	r3, #32
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2101      	movs	r1, #1
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	4618      	mov	r0, r3
 800982a:	f00c fc25 	bl	8016078 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d009      	beq.n	8009848 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3320      	adds	r3, #32
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2102      	movs	r1, #2
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	4618      	mov	r0, r3
 800984e:	f00c fc1f 	bl	8016090 <_ZNK20CommandLineArguments7isColorEv>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d008      	beq.n	800986a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3324      	adds	r3, #36	; 0x24
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4610      	mov	r0, r2
 8009868:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f00c fc4a 	bl	8016108 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d008      	beq.n	800988c <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3360      	adds	r3, #96	; 0x60
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	4618      	mov	r0, r3
 8009892:	f00c fc2d 	bl	80160f0 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f009 fa19 	bl	8012cd8 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f00c fc50 	bl	8016150 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80098b6:	f00b fadb 	bl	8014e70 <_ZN10UtestShell14setCrashOnFailEv>
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080098c4 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 80098c4:	b5b0      	push	{r4, r5, r7, lr}
 80098c6:	b094      	sub	sp, #80	; 0x50
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7ff ff73 	bl	80097b8 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f00c fc1c 	bl	8016120 <_ZNK20CommandLineArguments14getRepeatCountEv>
 80098e8:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f00c fbda 	bl	80160a8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d019      	beq.n	800992e <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f009 fbaf 	bl	8013068 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3320      	adds	r3, #32
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
        return 0;
 8009920:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	4618      	mov	r0, r3
 8009928:	f009 fbd6 	bl	80130d8 <_ZN10TestResultD1Ev>
 800992c:	e0e1      	b.n	8009af2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f00c fbc4 	bl	80160c0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d019      	beq.n	8009972 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f009 fb8d 	bl	8013068 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3324      	adds	r3, #36	; 0x24
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
        return 0;
 8009964:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8009966:	f107 0308 	add.w	r3, r7, #8
 800996a:	4618      	mov	r0, r3
 800996c:	f009 fbb4 	bl	80130d8 <_ZN10TestResultD1Ev>
 8009970:	e0bf      	b.n	8009af2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	4618      	mov	r0, r3
 8009978:	f00c fbae 	bl	80160d8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d019      	beq.n	80099b6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f009 fb6b 	bl	8013068 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3328      	adds	r3, #40	; 0x28
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
        return 0;
 80099a8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80099aa:	f107 0308 	add.w	r3, r7, #8
 80099ae:	4618      	mov	r0, r3
 80099b0:	f009 fb92 	bl	80130d8 <_ZN10TestResultD1Ev>
 80099b4:	e09d      	b.n	8009af2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f00c fbbc 	bl	8016138 <_ZNK20CommandLineArguments11isReversingEv>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d008      	beq.n	80099d8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	331c      	adds	r3, #28
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3

    if (arguments_->isShuffling())
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	4618      	mov	r0, r3
 80099de:	f00c fbc3 	bl	8016168 <_ZNK20CommandLineArguments11isShufflingEv>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d023      	beq.n	8009a30 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	332c      	adds	r3, #44	; 0x2c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4941      	ldr	r1, [pc, #260]	; (8009afc <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685d      	ldr	r5, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3334      	adds	r3, #52	; 0x34
 8009a08:	681c      	ldr	r4, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f00c fbb6 	bl	8016180 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8009a14:	4603      	mov	r3, r0
 8009a16:	4619      	mov	r1, r3
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47a0      	blx	r4
        output_->print("\n");
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	332c      	adds	r3, #44	; 0x2c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4935      	ldr	r1, [pc, #212]	; (8009b00 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8009a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009a36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	bf8c      	ite	hi
 8009a3c:	2301      	movhi	r3, #1
 8009a3e:	2300      	movls	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d04e      	beq.n	8009ae4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f00c fb8c 	bl	8016168 <_ZNK20CommandLineArguments11isShufflingEv>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00f      	beq.n	8009a76 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68dd      	ldr	r5, [r3, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3318      	adds	r3, #24
 8009a62:	681c      	ldr	r4, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f00c fb89 	bl	8016180 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4619      	mov	r1, r3
 8009a72:	4628      	mov	r0, r5
 8009a74:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6858      	ldr	r0, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3340      	adds	r3, #64	; 0x40
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a86:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a88:	4798      	blx	r3
        TestResult tr(*output_);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	f107 0308 	add.w	r3, r7, #8
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f009 fae7 	bl	8013068 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f107 0108 	add.w	r1, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8009ab0:	f107 0308 	add.w	r3, r7, #8
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fcef 	bl	8009498 <_ZNK10TestResult15getFailureCountEv>
 8009aba:	4602      	mov	r2, r0
 8009abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009abe:	4413      	add	r3, r2
 8009ac0:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff fcf2 	bl	80094b0 <_ZNK10TestResult9isFailureEv>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8009ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8009ad8:	f107 0308 	add.w	r3, r7, #8
 8009adc:	4618      	mov	r0, r3
 8009ade:	f009 fafb 	bl	80130d8 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8009ae2:	e7a5      	b.n	8009a30 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8009ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8009aea:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8009aec:	e000      	b.n	8009af0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8009aee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009af0:	bf00      	nop
 8009af2:	4623      	mov	r3, r4
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3750      	adds	r7, #80	; 0x50
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bdb0      	pop	{r4, r5, r7, pc}
 8009afc:	08024e30 	.word	0x08024e30
 8009b00:	08024e5c 	.word	0x08024e5c

08009b04 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8009b0c:	229d      	movs	r2, #157	; 0x9d
 8009b0e:	4906      	ldr	r1, [pc, #24]	; (8009b28 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8009b10:	201c      	movs	r0, #28
 8009b12:	f001 f9eb 	bl	800aeec <_ZnwjPKci>
 8009b16:	4604      	mov	r4, r0
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f005 f955 	bl	800edc8 <_ZN18TeamCityTestOutputC1Ev>
 8009b1e:	4623      	mov	r3, r4
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd90      	pop	{r4, r7, pc}
 8009b28:	08024df8 	.word	0x08024df8

08009b2c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8009b36:	22a2      	movs	r2, #162	; 0xa2
 8009b38:	490a      	ldr	r1, [pc, #40]	; (8009b64 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8009b3a:	2014      	movs	r0, #20
 8009b3c:	f001 f9d6 	bl	800aeec <_ZnwjPKci>
 8009b40:	4604      	mov	r4, r0
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f980 	bl	8009e48 <_ZN15JUnitTestOutputC1Ev>
 8009b48:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f000 fbb2 	bl	800a2bc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd90      	pop	{r4, r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08024df8 	.word	0x08024df8

08009b68 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8009b68:	b590      	push	{r4, r7, lr}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8009b70:	22ab      	movs	r2, #171	; 0xab
 8009b72:	4906      	ldr	r1, [pc, #24]	; (8009b8c <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8009b74:	2010      	movs	r0, #16
 8009b76:	f001 f9b9 	bl	800aeec <_ZnwjPKci>
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f7ff fcb3 	bl	80094e8 <_ZN17ConsoleTestOutputC1Ev>
 8009b82:	4623      	mov	r3, r4
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd90      	pop	{r4, r7, pc}
 8009b8c:	08024df8 	.word	0x08024df8

08009b90 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8009b9c:	22b0      	movs	r2, #176	; 0xb0
 8009b9e:	490e      	ldr	r1, [pc, #56]	; (8009bd8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8009ba0:	2018      	movs	r0, #24
 8009ba2:	f001 f9a3 	bl	800aeec <_ZnwjPKci>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f007 ff83 	bl	8011ab4 <_ZN19CompositeTestOutputC1Ev>
 8009bae:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	335c      	adds	r3, #92	; 0x5c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	3360      	adds	r3, #96	; 0x60
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	6978      	ldr	r0, [r7, #20]
 8009bca:	4798      	blx	r3
  return composite;
 8009bcc:	697b      	ldr	r3, [r7, #20]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd90      	pop	{r4, r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	08024df8 	.word	0x08024df8

08009bdc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8009bdc:	b5b0      	push	{r4, r5, r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f00b fe4f 	bl	8015890 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f083 0301 	eor.w	r3, r3, #1
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d029      	beq.n	8009c52 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3310      	adds	r3, #16
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685d      	ldr	r5, [r3, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	332c      	adds	r3, #44	; 0x2c
 8009c1c:	681c      	ldr	r4, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f00c fa10 	bl	8016048 <_ZNK20CommandLineArguments8needHelpEv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d006      	beq.n	8009c3c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f00c f9fa 	bl	801602c <_ZNK20CommandLineArguments4helpEv>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	e005      	b.n	8009c48 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f00c f9e5 	bl	8016010 <_ZNK20CommandLineArguments5usageEv>
 8009c46:	4603      	mov	r3, r0
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47a0      	blx	r4
    return false;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e050      	b.n	8009cf4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f00d f84c 	bl	8016cf4 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d02c      	beq.n	8009cbc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	330c      	adds	r3, #12
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f00d f864 	bl	8016d3c <_ZNK20CommandLineArguments14getPackageNameEv>
 8009c74:	4603      	mov	r3, r0
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	47a0      	blx	r4
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f00c f9ea 	bl	8016060 <_ZNK20CommandLineArguments9isVerboseEv>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02f      	beq.n	8009cf2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3314      	adds	r3, #20
 8009c98:	681c      	ldr	r4, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685d      	ldr	r5, [r3, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3310      	adds	r3, #16
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	4629      	mov	r1, r5
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	47a0      	blx	r4
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	e01a      	b.n	8009cf2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f00d f829 	bl	8016d18 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d009      	beq.n	8009ce0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	4798      	blx	r3
 8009cd8:	4602      	mov	r2, r0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	e008      	b.n	8009cf2 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3310      	adds	r3, #16
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	4798      	blx	r3
 8009cec:	4602      	mov	r2, r0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]
  return true;
 8009cf2:	2301      	movs	r3, #1
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bdb0      	pop	{r4, r5, r7, pc}

08009cfc <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	4a05      	ldr	r2, [pc, #20]	; (8009d1c <_ZN16SetPointerPluginD1Ev+0x20>)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f008 f9e7 	bl	80120e0 <_ZN10TestPluginD1Ev>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4618      	mov	r0, r3
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	08029698 	.word	0x08029698

08009d20 <_ZN16SetPointerPluginD0Ev>:
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff ffe7 	bl	8009cfc <_ZN16SetPointerPluginD1Ev>
 8009d2e:	2114      	movs	r1, #20
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 f8ef 	bl	800af14 <_ZdlPvj>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
    }
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4910      	ldr	r1, [pc, #64]	; (8009da4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009d64:	4618      	mov	r0, r3
 8009d66:	f003 fc84 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	609a      	str	r2, [r3, #8]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	741a      	strb	r2, [r3, #16]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3314      	adds	r3, #20
 8009d80:	4908      	ldr	r1, [pc, #32]	; (8009da4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8009d82:	4618      	mov	r0, r3
 8009d84:	f003 fc75 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	61da      	str	r2, [r3, #28]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	621a      	str	r2, [r3, #32]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	08024e60 	.word	0x08024e60

08009da8 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	605a      	str	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	609a      	str	r2, [r3, #8]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	60da      	str	r2, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	611a      	str	r2, [r3, #16]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3314      	adds	r3, #20
 8009dd2:	4907      	ldr	r1, [pc, #28]	; (8009df0 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f003 fc4c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	61da      	str	r2, [r3, #28]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	621a      	str	r2, [r3, #32]
    {
    }
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	08024e60 	.word	0x08024e60

08009df4 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3314      	adds	r3, #20
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 ffee 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff ffc4 	bl	8009da8 <_ZN20JUnitTestGroupResultC1Ev>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3328      	adds	r3, #40	; 0x28
 8009e24:	4907      	ldr	r1, [pc, #28]	; (8009e44 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009e26:	4618      	mov	r0, r3
 8009e28:	f003 fc23 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3330      	adds	r3, #48	; 0x30
 8009e30:	4904      	ldr	r1, [pc, #16]	; (8009e44 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8009e32:	4618      	mov	r0, r3
 8009e34:	f003 fc1d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	08024e60 	.word	0x08024e60

08009e48 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8009e48:	b590      	push	{r4, r7, lr}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f007 f936 	bl	80110c4 <_ZN10TestOutputC1Ev>
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	224d      	movs	r2, #77	; 0x4d
 8009e60:	4908      	ldr	r1, [pc, #32]	; (8009e84 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8009e62:	2038      	movs	r0, #56	; 0x38
 8009e64:	f001 f842 	bl	800aeec <_ZnwjPKci>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7ff ffd0 	bl	8009e10 <_ZN19JUnitTestOutputImplC1Ev>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	611c      	str	r4, [r3, #16]
{
}
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4618      	mov	r0, r3
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd90      	pop	{r4, r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	08028f38 	.word	0x08028f38
 8009e84:	08024e64 	.word	0x08024e64

08009e88 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3330      	adds	r3, #48	; 0x30
 8009e94:	4618      	mov	r0, r3
 8009e96:	f003 ffa4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3328      	adds	r3, #40	; 0x28
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f003 ff9f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff ffa4 	bl	8009df4 <_ZN20JUnitTestGroupResultD1Ev>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f838 	bl	8009f3c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691c      	ldr	r4, [r3, #16]
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d006      	beq.n	8009ee2 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f7ff ffd7 	bl	8009e88 <_ZN19JUnitTestOutputImplD1Ev>
 8009eda:	2138      	movs	r1, #56	; 0x38
 8009edc:	4620      	mov	r0, r4
 8009ede:	f001 f819 	bl	800af14 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f007 f90b 	bl	8011100 <_ZN10TestOutputD1Ev>
}
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd90      	pop	{r4, r7, pc}
 8009ef4:	08028f38 	.word	0x08028f38

08009ef8 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
}
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7ff ffd9 	bl	8009eb8 <_ZN15JUnitTestOutputD1Ev>
 8009f06:	2114      	movs	r1, #20
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 f803 	bl	800af14 <_ZdlPvj>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3314      	adds	r3, #20
 8009f24:	4618      	mov	r0, r3
 8009f26:	f003 ff5c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f003 ff58 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8009f3c:	b590      	push	{r4, r7, lr}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2200      	movs	r2, #0
 8009f52:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	f103 0414 	add.w	r4, r3, #20
 8009f5c:	f107 0308 	add.w	r3, r7, #8
 8009f60:	491d      	ldr	r1, [pc, #116]	; (8009fd8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f003 fb85 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8009f68:	f107 0308 	add.w	r3, r7, #8
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f003 fbeb 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 8009f74:	f107 0308 	add.w	r3, r7, #8
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f003 ff32 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d018      	beq.n	8009fbe <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d004      	beq.n	8009fa4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	3204      	adds	r2, #4
 8009f9e:	6812      	ldr	r2, [r2, #0]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	4790      	blx	r2
        delete cur;
 8009fa4:	697c      	ldr	r4, [r7, #20]
 8009fa6:	2c00      	cmp	r4, #0
 8009fa8:	d006      	beq.n	8009fb8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8009faa:	4620      	mov	r0, r4
 8009fac:	f7ff ffb4 	bl	8009f18 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8009fb0:	2128      	movs	r1, #40	; 0x28
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 ffae 	bl	800af14 <_ZdlPvj>
        cur = tmp;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	617b      	str	r3, [r7, #20]
    while (cur) {
 8009fbc:	e7e3      	b.n	8009f86 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	621a      	str	r2, [r3, #32]
}
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd90      	pop	{r4, r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08024e60 	.word	0x08024e60

08009fdc <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
}
 8009ffa:	bf00      	nop
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800a006:	b590      	push	{r4, r7, lr}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	6a1c      	ldr	r4, [r3, #32]
 800a016:	6838      	ldr	r0, [r7, #0]
 800a018:	f009 f9c6 	bl	80133a8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800a01c:	4603      	mov	r3, r0
 800a01e:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	6a1c      	ldr	r4, [r3, #32]
 800a026:	6838      	ldr	r0, [r7, #0]
 800a028:	f7ff fe8a 	bl	8009d40 <_ZNK10TestResult13getCheckCountEv>
 800a02c:	4603      	mov	r3, r0
 800a02e:	6223      	str	r3, [r4, #32]
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	bd90      	pop	{r4, r7, pc}

0800a038 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800a04e:	b590      	push	{r4, r7, lr}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	691c      	ldr	r4, [r3, #16]
 800a05c:	6838      	ldr	r0, [r7, #0]
 800a05e:	f009 f9af 	bl	80133c0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800a062:	4603      	mov	r3, r0
 800a064:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3364      	adds	r3, #100	; 0x64
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
    resetTestGroupResult();
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff ff62 	bl	8009f3c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd90      	pop	{r4, r7, pc}

0800a080 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a080:	b590      	push	{r4, r7, lr}
 800a082:	b089      	sub	sp, #36	; 0x24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	3201      	adds	r2, #1
 800a092:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f103 0414 	add.w	r4, r3, #20
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f009 fcef 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 800a0a8:	f107 0308 	add.w	r3, r7, #8
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f003 fb4b 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f003 fe92 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800a0be:	4b3c      	ldr	r3, [pc, #240]	; (800a1b0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4798      	blx	r3
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d110      	bne.n	800a0f8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800a0d6:	2288      	movs	r2, #136	; 0x88
 800a0d8:	4936      	ldr	r1, [pc, #216]	; (800a1b4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800a0da:	2028      	movs	r0, #40	; 0x28
 800a0dc:	f000 ff06 	bl	800aeec <_ZnwjPKci>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff fe38 	bl	8009d58 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800a0ec:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	6912      	ldr	r2, [r2, #16]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	61d3      	str	r3, [r2, #28]
 800a0f6:	e013      	b.n	800a120 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800a0f8:	228b      	movs	r2, #139	; 0x8b
 800a0fa:	492e      	ldr	r1, [pc, #184]	; (800a1b4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800a0fc:	2028      	movs	r0, #40	; 0x28
 800a0fe:	f000 fef5 	bl	800aeec <_ZnwjPKci>
 800a102:	4604      	mov	r4, r0
 800a104:	4620      	mov	r0, r4
 800a106:	f7ff fe27 	bl	8009d58 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	6a1a      	ldr	r2, [r3, #32]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a11e:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	461c      	mov	r4, r3
 800a128:	f107 0310 	add.w	r3, r7, #16
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f009 fc9a 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800a134:	f107 0310 	add.w	r3, r7, #16
 800a138:	4619      	mov	r1, r3
 800a13a:	4620      	mov	r0, r4
 800a13c:	f003 fb05 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800a140:	f107 0310 	add.w	r3, r7, #16
 800a144:	4618      	mov	r0, r3
 800a146:	f003 fe4c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	f103 0414 	add.w	r4, r3, #20
 800a154:	f107 0318 	add.w	r3, r7, #24
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f009 fd55 	bl	8013c0a <_ZNK10UtestShell7getFileEv>
 800a160:	f107 0318 	add.w	r3, r7, #24
 800a164:	4619      	mov	r1, r3
 800a166:	4620      	mov	r0, r4
 800a168:	f003 faef 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800a16c:	f107 0318 	add.w	r3, r7, #24
 800a170:	4618      	mov	r0, r3
 800a172:	f003 fe36 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	6a1c      	ldr	r4, [r3, #32]
 800a17c:	6838      	ldr	r0, [r7, #0]
 800a17e:	f009 fd53 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 800a182:	4603      	mov	r3, r0
 800a184:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3318      	adds	r3, #24
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6838      	ldr	r0, [r7, #0]
 800a190:	4798      	blx	r3
 800a192:	4603      	mov	r3, r0
 800a194:	f083 0301 	eor.w	r3, r3, #1
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	741a      	strb	r2, [r3, #16]
    }
}
 800a1a8:	bf00      	nop
 800a1aa:	3724      	adds	r7, #36	; 0x24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}
 800a1b0:	200000a8 	.word	0x200000a8
 800a1b4:	08024e64 	.word	0x08024e64

0800a1b8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	; 0x28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800a1c4:	f107 0310 	add.w	r3, r7, #16
 800a1c8:	4928      	ldr	r1, [pc, #160]	; (800a26c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 fa51 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	3328      	adds	r3, #40	; 0x28
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f003 fdf2 	bl	800ddc0 <_ZNK12SimpleString7isEmptyEv>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f083 0301 	eor.w	r3, r3, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00f      	beq.n	800a208 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800a1f0:	f107 0310 	add.w	r3, r7, #16
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f003 fe70 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	491b      	ldr	r1, [pc, #108]	; (800a270 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800a202:	4618      	mov	r0, r3
 800a204:	f003 fe7c 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800a208:	f107 0310 	add.w	r3, r7, #16
 800a20c:	6879      	ldr	r1, [r7, #4]
 800a20e:	4618      	mov	r0, r3
 800a210:	f003 fe64 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3384      	adds	r3, #132	; 0x84
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f107 0018 	add.w	r0, r7, #24
 800a220:	f107 0210 	add.w	r2, r7, #16
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	4798      	blx	r3
 800a228:	f107 0320 	add.w	r3, r7, #32
 800a22c:	4911      	ldr	r1, [pc, #68]	; (800a274 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800a22e:	4618      	mov	r0, r3
 800a230:	f003 fa1f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f107 0220 	add.w	r2, r7, #32
 800a23a:	f107 0118 	add.w	r1, r7, #24
 800a23e:	4618      	mov	r0, r3
 800a240:	f003 fe31 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800a244:	f107 0320 	add.w	r3, r7, #32
 800a248:	4618      	mov	r0, r3
 800a24a:	f003 fdca 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800a24e:	f107 0318 	add.w	r3, r7, #24
 800a252:	4618      	mov	r0, r3
 800a254:	f003 fdc5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800a258:	f107 0310 	add.w	r3, r7, #16
 800a25c:	4618      	mov	r0, r3
 800a25e:	f003 fdc0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800a262:	bf00      	nop
}
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	3728      	adds	r7, #40	; 0x28
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	08024e80 	.word	0x08024e80
 800a270:	08024e8c 	.word	0x08024e8c
 800a274:	08024e90 	.word	0x08024e90

0800a278 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b086      	sub	sp, #24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800a284:	6879      	ldr	r1, [r7, #4]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f003 fa47 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	225f      	movs	r2, #95	; 0x5f
 800a29e:	4619      	mov	r1, r3
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f003 fbcc 	bl	800da3e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	e7f0      	b.n	800a290 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800a2ae:	bf00      	nop
}
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	08024e98 	.word	0x08024e98

0800a2bc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d006      	beq.n	800a2dc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	3328      	adds	r3, #40	; 0x28
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f003 fa37 	bl	800d74a <_ZN12SimpleStringaSERKS_>
    }
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3368      	adds	r3, #104	; 0x68
 800a2f2:	681c      	ldr	r4, [r3, #0]
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4908      	ldr	r1, [pc, #32]	; (800a31c <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f003 f9b9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a300:	f107 0308 	add.w	r3, r7, #8
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	47a0      	blx	r4
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	4618      	mov	r0, r3
 800a310:	f003 fd67 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd90      	pop	{r4, r7, pc}
 800a31c:	08024ea4 	.word	0x08024ea4

0800a320 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a324:	b08a      	sub	sp, #40	; 0x28
 800a326:	af04      	add	r7, sp, #16
 800a328:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800a330:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800a336:	3314      	adds	r3, #20
 800a338:	4618      	mov	r0, r3
 800a33a:	f003 fd25 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a33e:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800a346:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	4a23      	ldr	r2, [pc, #140]	; (800a3dc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800a350:	fba2 2303 	umull	r2, r3, r2, r3
 800a354:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800a356:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	4b1f      	ldr	r3, [pc, #124]	; (800a3dc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800a360:	fba3 1302 	umull	r1, r3, r3, r2
 800a364:	099b      	lsrs	r3, r3, #6
 800a366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a36a:	fb01 f303 	mul.w	r3, r1, r3
 800a36e:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	4b1b      	ldr	r3, [pc, #108]	; (800a3e0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4798      	blx	r3
 800a378:	4603      	mov	r3, r0
 800a37a:	f107 0008 	add.w	r0, r7, #8
 800a37e:	9303      	str	r3, [sp, #12]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	9601      	str	r6, [sp, #4]
 800a386:	9500      	str	r5, [sp, #0]
 800a388:	4623      	mov	r3, r4
 800a38a:	4642      	mov	r2, r8
 800a38c:	4915      	ldr	r1, [pc, #84]	; (800a3e4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800a38e:	f004 fa2f 	bl	800e7f0 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3368      	adds	r3, #104	; 0x68
 800a398:	681c      	ldr	r4, [r3, #0]
 800a39a:	f107 0308 	add.w	r3, r7, #8
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f003 fcf2 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f107 0310 	add.w	r3, r7, #16
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f003 f960 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a3b2:	f107 0310 	add.w	r3, r7, #16
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	47a0      	blx	r4
 800a3bc:	f107 0310 	add.w	r3, r7, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f003 fd0e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f003 fd09 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800a3d0:	bf00      	nop
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3da:	bf00      	nop
 800a3dc:	10624dd3 	.word	0x10624dd3
 800a3e0:	200000ac 	.word	0x200000ac
 800a3e4:	08024ed0 	.word	0x08024ed0

0800a3e8 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3368      	adds	r3, #104	; 0x68
 800a3f6:	681c      	ldr	r4, [r3, #0]
 800a3f8:	f107 0308 	add.w	r3, r7, #8
 800a3fc:	4912      	ldr	r1, [pc, #72]	; (800a448 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800a3fe:	4618      	mov	r0, r3
 800a400:	f003 f937 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a404:	f107 0308 	add.w	r3, r7, #8
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	47a0      	blx	r4
 800a40e:	f107 0308 	add.w	r3, r7, #8
 800a412:	4618      	mov	r0, r3
 800a414:	f003 fce5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3368      	adds	r3, #104	; 0x68
 800a41e:	681c      	ldr	r4, [r3, #0]
 800a420:	f107 0310 	add.w	r3, r7, #16
 800a424:	4909      	ldr	r1, [pc, #36]	; (800a44c <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800a426:	4618      	mov	r0, r3
 800a428:	f003 f923 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a42c:	f107 0310 	add.w	r3, r7, #16
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	47a0      	blx	r4
 800a436:	f107 0310 	add.w	r3, r7, #16
 800a43a:	4618      	mov	r0, r3
 800a43c:	f003 fcd1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800a440:	bf00      	nop
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	bd90      	pop	{r4, r7, pc}
 800a448:	08024f40 	.word	0x08024f40
 800a44c:	08024f50 	.word	0x08024f50

0800a450 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f003 fc93 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a462:	4603      	mov	r3, r0
 800a464:	4619      	mov	r1, r3
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f003 f903 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800a46c:	4a0e      	ldr	r2, [pc, #56]	; (800a4a8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800a46e:	490f      	ldr	r1, [pc, #60]	; (800a4ac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f003 fb13 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800a476:	4a0e      	ldr	r2, [pc, #56]	; (800a4b0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800a478:	490e      	ldr	r1, [pc, #56]	; (800a4b4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f003 fb0e 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800a480:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800a482:	490e      	ldr	r1, [pc, #56]	; (800a4bc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f003 fb09 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800a48a:	4a0d      	ldr	r2, [pc, #52]	; (800a4c0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800a48c:	490d      	ldr	r1, [pc, #52]	; (800a4c4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f003 fb04 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800a494:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800a496:	490d      	ldr	r1, [pc, #52]	; (800a4cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f003 faff 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800a49e:	bf00      	nop
}
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	08024f60 	.word	0x08024f60
 800a4ac:	08024f68 	.word	0x08024f68
 800a4b0:	08024f6c 	.word	0x08024f6c
 800a4b4:	08024f74 	.word	0x08024f74
 800a4b8:	08024f78 	.word	0x08024f78
 800a4bc:	08024f80 	.word	0x08024f80
 800a4c0:	08024f84 	.word	0x08024f84
 800a4c4:	08024f8c 	.word	0x08024f8c
 800a4c8:	08024f90 	.word	0x08024f90
 800a4cc:	08024f9c 	.word	0x08024f9c

0800a4d0 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	b096      	sub	sp, #88	; 0x58
 800a4d6:	af08      	add	r7, sp, #32
 800a4d8:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	69db      	ldr	r3, [r3, #28]
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 80b2 	beq.w	800a64e <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800a4ee:	3328      	adds	r3, #40	; 0x28
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f003 fc49 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a4f6:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	3328      	adds	r3, #40	; 0x28
 800a4fe:	4618      	mov	r0, r3
 800a500:	f003 fc5e 	bl	800ddc0 <_ZNK12SimpleString7isEmptyEv>
 800a504:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800a50a:	4c53      	ldr	r4, [pc, #332]	; (800a658 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800a50c:	e000      	b.n	800a510 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800a50e:	4c53      	ldr	r4, [pc, #332]	; (800a65c <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800a514:	3314      	adds	r3, #20
 800a516:	4618      	mov	r0, r3
 800a518:	f003 fc36 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a51c:	4605      	mov	r5, r0
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	4618      	mov	r0, r3
 800a522:	f003 fc31 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a526:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800a534:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	4a49      	ldr	r2, [pc, #292]	; (800a660 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800a53c:	fba2 2303 	umull	r2, r3, r2, r3
 800a540:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800a542:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800a544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	4b45      	ldr	r3, [pc, #276]	; (800a660 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800a54a:	fba3 1302 	umull	r1, r3, r3, r2
 800a54e:	099b      	lsrs	r3, r3, #6
 800a550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a554:	fb01 f303 	mul.w	r3, r1, r3
 800a558:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	3314      	adds	r3, #20
 800a560:	4618      	mov	r0, r3
 800a562:	f003 fc11 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a566:	4602      	mov	r2, r0
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	f107 0014 	add.w	r0, r7, #20
 800a570:	9306      	str	r3, [sp, #24]
 800a572:	9205      	str	r2, [sp, #20]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	9204      	str	r2, [sp, #16]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	9203      	str	r2, [sp, #12]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	9302      	str	r3, [sp, #8]
 800a580:	9601      	str	r6, [sp, #4]
 800a582:	9500      	str	r5, [sp, #0]
 800a584:	4623      	mov	r3, r4
 800a586:	4642      	mov	r2, r8
 800a588:	4936      	ldr	r1, [pc, #216]	; (800a664 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800a58a:	f004 f931 	bl	800e7f0 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3368      	adds	r3, #104	; 0x68
 800a594:	681c      	ldr	r4, [r3, #0]
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	4618      	mov	r0, r3
 800a59c:	f003 fbf4 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	f107 031c 	add.w	r3, r7, #28
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f003 f862 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a5ae:	f107 031c 	add.w	r3, r7, #28
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	47a0      	blx	r4
 800a5b8:	f107 031c 	add.w	r3, r7, #28
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f003 fc10 	bl	800dde2 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c8:	6a12      	ldr	r2, [r2, #32]
 800a5ca:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3388      	adds	r3, #136	; 0x88
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	4798      	blx	r3
 800a5e2:	e017      	b.n	800a614 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	7c1b      	ldrb	r3, [r3, #16]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d013      	beq.n	800a614 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3368      	adds	r3, #104	; 0x68
 800a5f2:	681c      	ldr	r4, [r3, #0]
 800a5f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5f8:	491b      	ldr	r1, [pc, #108]	; (800a668 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f003 f839 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a604:	4619      	mov	r1, r3
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	47a0      	blx	r4
 800a60a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a60e:	4618      	mov	r0, r3
 800a610:	f003 fbe7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3368      	adds	r3, #104	; 0x68
 800a61a:	681c      	ldr	r4, [r3, #0]
 800a61c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a620:	4912      	ldr	r1, [pc, #72]	; (800a66c <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800a622:	4618      	mov	r0, r3
 800a624:	f003 f825 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a62c:	4619      	mov	r1, r3
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	47a0      	blx	r4
 800a632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a636:	4618      	mov	r0, r3
 800a638:	f003 fbd3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800a63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4618      	mov	r0, r3
 800a648:	f003 fbcb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800a64c:	e749      	b.n	800a4e2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800a64e:	bf00      	nop
 800a650:	3738      	adds	r7, #56	; 0x38
 800a652:	46bd      	mov	sp, r7
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	08024e60 	.word	0x08024e60
 800a65c:	08024fa0 	.word	0x08024fa0
 800a660:	10624dd3 	.word	0x10624dd3
 800a664:	08024fa4 	.word	0x08024fa4
 800a668:	08025000 	.word	0x08025000
 800a66c:	08025010 	.word	0x08025010

0800a670 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	b091      	sub	sp, #68	; 0x44
 800a674:	af02      	add	r7, sp, #8
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68d9      	ldr	r1, [r3, #12]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	3308      	adds	r3, #8
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f107 0210 	add.w	r2, r7, #16
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a690:	f107 0310 	add.w	r3, r7, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f003 fb77 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a69a:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3314      	adds	r3, #20
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4798      	blx	r3
 800a6ae:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a6b0:	461e      	mov	r6, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3380      	adds	r3, #128	; 0x80
 800a6b8:	681c      	ldr	r4, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68d9      	ldr	r1, [r3, #12]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3318      	adds	r3, #24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f107 0220 	add.w	r2, r7, #32
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	4798      	blx	r3
 800a6d0:	f107 0318 	add.w	r3, r7, #24
 800a6d4:	f107 0220 	add.w	r2, r7, #32
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	47a0      	blx	r4
 800a6de:	f107 0318 	add.w	r3, r7, #24
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f003 fb50 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f107 0008 	add.w	r0, r7, #8
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4633      	mov	r3, r6
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	4924      	ldr	r1, [pc, #144]	; (800a788 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800a6f6:	f004 f87b 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800a6fa:	f107 0318 	add.w	r3, r7, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f003 fb6f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800a704:	f107 0320 	add.w	r3, r7, #32
 800a708:	4618      	mov	r0, r3
 800a70a:	f003 fb6a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800a70e:	f107 0310 	add.w	r3, r7, #16
 800a712:	4618      	mov	r0, r3
 800a714:	f003 fb65 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3368      	adds	r3, #104	; 0x68
 800a71e:	681c      	ldr	r4, [r3, #0]
 800a720:	f107 0308 	add.w	r3, r7, #8
 800a724:	4618      	mov	r0, r3
 800a726:	f003 fb2f 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a72a:	4602      	mov	r2, r0
 800a72c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f002 ff9d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	47a0      	blx	r4
 800a742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a746:	4618      	mov	r0, r3
 800a748:	f003 fb4b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3368      	adds	r3, #104	; 0x68
 800a752:	681c      	ldr	r4, [r3, #0]
 800a754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a758:	490c      	ldr	r1, [pc, #48]	; (800a78c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800a75a:	4618      	mov	r0, r3
 800a75c:	f002 ff89 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	47a0      	blx	r4
 800a76a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a76e:	4618      	mov	r0, r3
 800a770:	f003 fb37 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800a774:	f107 0308 	add.w	r3, r7, #8
 800a778:	4618      	mov	r0, r3
 800a77a:	f003 fb32 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800a77e:	bf00      	nop
 800a780:	373c      	adds	r7, #60	; 0x3c
 800a782:	46bd      	mov	sp, r7
 800a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a786:	bf00      	nop
 800a788:	08025020 	.word	0x08025020
 800a78c:	0802505c 	.word	0x0802505c

0800a790 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800a790:	b590      	push	{r4, r7, lr}
 800a792:	b08d      	sub	sp, #52	; 0x34
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3368      	adds	r3, #104	; 0x68
 800a79e:	681c      	ldr	r4, [r3, #0]
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4933      	ldr	r1, [pc, #204]	; (800a874 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 ff63 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a7ac:	f107 0308 	add.w	r3, r7, #8
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	47a0      	blx	r4
 800a7b6:	f107 0308 	add.w	r3, r7, #8
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f003 fb11 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3368      	adds	r3, #104	; 0x68
 800a7c6:	681c      	ldr	r4, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3380      	adds	r3, #128	; 0x80
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	6912      	ldr	r2, [r2, #16]
 800a7d4:	3230      	adds	r2, #48	; 0x30
 800a7d6:	f107 0010 	add.w	r0, r7, #16
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	4798      	blx	r3
 800a7de:	f107 0310 	add.w	r3, r7, #16
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	47a0      	blx	r4
 800a7e8:	f107 0310 	add.w	r3, r7, #16
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f003 faf8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3368      	adds	r3, #104	; 0x68
 800a7f8:	681c      	ldr	r4, [r3, #0]
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	491e      	ldr	r1, [pc, #120]	; (800a878 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800a800:	4618      	mov	r0, r3
 800a802:	f002 ff36 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a806:	f107 0318 	add.w	r3, r7, #24
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	47a0      	blx	r4
 800a810:	f107 0318 	add.w	r3, r7, #24
 800a814:	4618      	mov	r0, r3
 800a816:	f003 fae4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3368      	adds	r3, #104	; 0x68
 800a820:	681c      	ldr	r4, [r3, #0]
 800a822:	f107 0320 	add.w	r3, r7, #32
 800a826:	4915      	ldr	r1, [pc, #84]	; (800a87c <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800a828:	4618      	mov	r0, r3
 800a82a:	f002 ff22 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a82e:	f107 0320 	add.w	r3, r7, #32
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	47a0      	blx	r4
 800a838:	f107 0320 	add.w	r3, r7, #32
 800a83c:	4618      	mov	r0, r3
 800a83e:	f003 fad0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3368      	adds	r3, #104	; 0x68
 800a848:	681c      	ldr	r4, [r3, #0]
 800a84a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a84e:	490c      	ldr	r1, [pc, #48]	; (800a880 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800a850:	4618      	mov	r0, r3
 800a852:	f002 ff0e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800a856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	47a0      	blx	r4
 800a860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a864:	4618      	mov	r0, r3
 800a866:	f003 fabc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800a86a:	bf00      	nop
 800a86c:	3734      	adds	r7, #52	; 0x34
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd90      	pop	{r4, r7, pc}
 800a872:	bf00      	nop
 800a874:	08025068 	.word	0x08025068
 800a878:	08025078 	.word	0x08025078
 800a87c:	08025088 	.word	0x08025088
 800a880:	080250a4 	.word	0x080250a4

0800a884 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800a884:	b590      	push	{r4, r7, lr}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3360      	adds	r3, #96	; 0x60
 800a892:	681c      	ldr	r4, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	335c      	adds	r3, #92	; 0x5c
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6912      	ldr	r2, [r2, #16]
 800a8a0:	3214      	adds	r2, #20
 800a8a2:	f107 0008 	add.w	r0, r7, #8
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	4798      	blx	r3
 800a8aa:	f107 0308 	add.w	r3, r7, #8
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	47a0      	blx	r4
 800a8b4:	f107 0308 	add.w	r3, r7, #8
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f003 fa92 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3370      	adds	r3, #112	; 0x70
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
    writeTestSuiteSummary();
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3374      	adds	r3, #116	; 0x74
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
    writeProperties();
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3378      	adds	r3, #120	; 0x78
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
    writeTestCases();
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	337c      	adds	r3, #124	; 0x7c
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	4798      	blx	r3
    writeFileEnding();
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	338c      	adds	r3, #140	; 0x8c
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
    closeFile();
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	336c      	adds	r3, #108	; 0x6c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
}
 800a906:	bf00      	nop
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd90      	pop	{r4, r7, pc}

0800a90e <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	3330      	adds	r3, #48	; 0x30
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	f003 fae2 	bl	800df00 <_ZN12SimpleStringpLEPKc>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b083      	sub	sp, #12
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	6039      	str	r1, [r7, #0]
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800a984:	b590      	push	{r4, r7, lr}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	6a1b      	ldr	r3, [r3, #32]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d113      	bne.n	800a9c2 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	3201      	adds	r2, #1
 800a9a2:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800a9a4:	f240 1233 	movw	r2, #307	; 0x133
 800a9a8:	4908      	ldr	r1, [pc, #32]	; (800a9cc <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800a9aa:	2034      	movs	r0, #52	; 0x34
 800a9ac:	f000 fa9e 	bl	800aeec <_ZnwjPKci>
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f004 fd37 	bl	800f428 <_ZN11TestFailureC1ERKS_>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	6a1b      	ldr	r3, [r3, #32]
 800a9c0:	60dc      	str	r4, [r3, #12]
    }
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd90      	pop	{r4, r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	08024e64 	.word	0x08024e64

0800a9d0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800a9da:	4b08      	ldr	r3, [pc, #32]	; (800a9fc <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800a9dc:	681d      	ldr	r5, [r3, #0]
 800a9de:	6838      	ldr	r0, [r7, #0]
 800a9e0:	f003 f9d2 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691c      	ldr	r4, [r3, #16]
 800a9ea:	4905      	ldr	r1, [pc, #20]	; (800aa00 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	47a8      	blx	r5
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	6263      	str	r3, [r4, #36]	; 0x24
}
 800a9f4:	bf00      	nop
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bdb0      	pop	{r4, r5, r7, pc}
 800a9fc:	200000b4 	.word	0x200000b4
 800aa00:	080250b4 	.word	0x080250b4

0800aa04 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800aa04:	b590      	push	{r4, r7, lr}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800aa0e:	4b08      	ldr	r3, [pc, #32]	; (800aa30 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800aa10:	681c      	ldr	r4, [r3, #0]
 800aa12:	6838      	ldr	r0, [r7, #0]
 800aa14:	f003 f9b8 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	47a0      	blx	r4
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd90      	pop	{r4, r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200000b8 	.word	0x200000b8

0800aa34 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	6912      	ldr	r2, [r2, #16]
 800aa44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa46:	4610      	mov	r0, r2
 800aa48:	4798      	blx	r3
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200000bc 	.word	0x200000bc

0800aa58 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
        return false;
 800aa66:	2300      	movs	r3, #0
    }
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
    {
 800aa7c:	4a04      	ldr	r2, [pc, #16]	; (800aa90 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	601a      	str	r2, [r3, #0]
    }
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	08028fe4 	.word	0x08028fe4

0800aa94 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
    }
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ffe9 	bl	800aa74 <_ZN17MemoryLeakFailureD1Ev>
 800aaa2:	2104      	movs	r1, #4
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fa35 	bl	800af14 <_ZdlPvj>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800aab4:	b590      	push	{r4, r7, lr}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	687c      	ldr	r4, [r7, #4]
 800aabe:	f000 fc71 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4618      	mov	r0, r3
 800aac6:	f00c ff6c 	bl	80179a2 <_ZN18MemoryLeakDetector8getMutexEv>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4619      	mov	r1, r3
 800aace:	4620      	mov	r0, r4
 800aad0:	f002 fb24 	bl	800d11c <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd90      	pop	{r4, r7, pc}

0800aade <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800aade:	b580      	push	{r7, lr}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f002 fb29 	bl	800d140 <_ZN15ScopedMutexLockD1Ev>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800aaf8:	b590      	push	{r4, r7, lr}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800ab04:	f000 fc4e 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	f006 f8df 	bl	8010ccc <_Z25getCurrentMallocAllocatorv>
 800ab0e:	4601      	mov	r1, r0
 800ab10:	2301      	movs	r3, #1
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f00d f983 	bl	8017e28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800ab22:	4603      	mov	r3, r0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd90      	pop	{r4, r7, pc}

0800ab2c <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800ab2c:	b590      	push	{r4, r7, lr}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800ab38:	f000 fc34 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	68f9      	ldr	r1, [r7, #12]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f00c ffdd 	bl	8017b00 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800ab46:	f000 fc2d 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	f006 f8be 	bl	8010ccc <_Z25getCurrentMallocAllocatorv>
 800ab50:	4601      	mov	r1, r0
 800ab52:	2301      	movs	r3, #1
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f00d f996 	bl	8017e90 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd90      	pop	{r4, r7, pc}

0800ab6c <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800ab6c:	b590      	push	{r4, r7, lr}
 800ab6e:	b089      	sub	sp, #36	; 0x24
 800ab70:	af04      	add	r7, sp, #16
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800ab7a:	f000 fc13 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ab7e:	4604      	mov	r4, r0
 800ab80:	f006 f8a4 	bl	8010ccc <_Z25getCurrentMallocAllocatorv>
 800ab84:	4601      	mov	r1, r0
 800ab86:	2301      	movs	r3, #1
 800ab88:	9302      	str	r3, [sp, #8]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4620      	mov	r0, r4
 800ab98:	f00d f9de 	bl	8017f58 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800ab9c:	4603      	mov	r3, r0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3714      	adds	r7, #20
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd90      	pop	{r4, r7, pc}
	...

0800aba8 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800abb4:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <_ZL13normal_mallocjPKcj+0x20>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	4798      	blx	r3
 800abbc:	4603      	mov	r3, r0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	200000c8 	.word	0x200000c8

0800abcc <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800abda:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <_ZL14normal_reallocPvjPKcj+0x24>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	4798      	blx	r3
 800abe4:	4603      	mov	r3, r0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	200000cc 	.word	0x200000cc

0800abf4 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800ac00:	4b03      	ldr	r3, [pc, #12]	; (800ac10 <_ZL11normal_freePvPKcj+0x1c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	4798      	blx	r3
}
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	200000d0 	.word	0x200000d0

0800ac14 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800ac14:	b590      	push	{r4, r7, lr}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7ff ff47 	bl	800aab4 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800ac26:	f000 fbbd 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	f005 ff9e 	bl	8010b6c <_Z22getCurrentNewAllocatorv>
 800ac30:	4601      	mov	r1, r0
 800ac32:	2300      	movs	r3, #0
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	4620      	mov	r0, r4
 800ac38:	f00d f864 	bl	8017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ac3c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ac3e:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff ff4a 	bl	800aade <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800ac4a:	4623      	mov	r3, r4
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}

0800ac54 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800ac54:	b590      	push	{r4, r7, lr}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800ac5c:	f000 fba2 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ac60:	4604      	mov	r4, r0
 800ac62:	f005 ff83 	bl	8010b6c <_Z22getCurrentNewAllocatorv>
 800ac66:	4601      	mov	r1, r0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f00d f849 	bl	8017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ac72:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ac74:	68fb      	ldr	r3, [r7, #12]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd90      	pop	{r4, r7, pc}

0800ac7e <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800ac7e:	b590      	push	{r4, r7, lr}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800ac86:	f000 fb8d 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	f005 ff6e 	bl	8010b6c <_Z22getCurrentNewAllocatorv>
 800ac90:	4601      	mov	r1, r0
 800ac92:	2300      	movs	r3, #0
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4620      	mov	r0, r4
 800ac98:	f00d f834 	bl	8017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ac9c:	4603      	mov	r3, r0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd90      	pop	{r4, r7, pc}

0800aca6 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800aca6:	b590      	push	{r4, r7, lr}
 800aca8:	b089      	sub	sp, #36	; 0x24
 800acaa:	af02      	add	r7, sp, #8
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800acb2:	f000 fb77 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800acb6:	4604      	mov	r4, r0
 800acb8:	f005 ff58 	bl	8010b6c <_Z22getCurrentNewAllocatorv>
 800acbc:	4601      	mov	r1, r0
 800acbe:	2300      	movs	r3, #0
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4620      	mov	r0, r4
 800accc:	f00d f8ac 	bl	8017e28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800acd0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800acd2:	697b      	ldr	r3, [r7, #20]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	371c      	adds	r7, #28
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd90      	pop	{r4, r7, pc}

0800acdc <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800ace4:	f000 fb5e 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ace8:	4604      	mov	r4, r0
 800acea:	f005 ff97 	bl	8010c1c <_Z27getCurrentNewArrayAllocatorv>
 800acee:	4601      	mov	r1, r0
 800acf0:	2300      	movs	r3, #0
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4620      	mov	r0, r4
 800acf6:	f00d f805 	bl	8017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800acfa:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800acfc:	68fb      	ldr	r3, [r7, #12]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd90      	pop	{r4, r7, pc}

0800ad06 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800ad06:	b590      	push	{r4, r7, lr}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800ad0e:	f000 fb49 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ad12:	4604      	mov	r4, r0
 800ad14:	f005 ff82 	bl	8010c1c <_Z27getCurrentNewArrayAllocatorv>
 800ad18:	4601      	mov	r1, r0
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f00c fff0 	bl	8017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ad24:	4603      	mov	r3, r0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd90      	pop	{r4, r7, pc}

0800ad2e <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800ad2e:	b590      	push	{r4, r7, lr}
 800ad30:	b089      	sub	sp, #36	; 0x24
 800ad32:	af02      	add	r7, sp, #8
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800ad3a:	f000 fb33 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ad3e:	4604      	mov	r4, r0
 800ad40:	f005 ff6c 	bl	8010c1c <_Z27getCurrentNewArrayAllocatorv>
 800ad44:	4601      	mov	r1, r0
 800ad46:	2300      	movs	r3, #0
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4620      	mov	r0, r4
 800ad54:	f00d f868 	bl	8017e28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800ad58:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ad5a:	697b      	ldr	r3, [r7, #20]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	371c      	adds	r7, #28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd90      	pop	{r4, r7, pc}

0800ad64 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800ad6c:	f000 fb1a 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ad70:	4603      	mov	r3, r0
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f00c fec3 	bl	8017b00 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800ad7a:	f000 fb13 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ad7e:	4604      	mov	r4, r0
 800ad80:	f005 fef4 	bl	8010b6c <_Z22getCurrentNewAllocatorv>
 800ad84:	4601      	mov	r1, r0
 800ad86:	2300      	movs	r3, #0
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f00d f8ca 	bl	8017f24 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd90      	pop	{r4, r7, pc}

0800ad98 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800ad98:	b590      	push	{r4, r7, lr}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800ada0:	f000 fb00 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ada4:	4603      	mov	r3, r0
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f00c fea9 	bl	8017b00 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800adae:	f000 faf9 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800adb2:	4604      	mov	r4, r0
 800adb4:	f005 ff32 	bl	8010c1c <_Z27getCurrentNewArrayAllocatorv>
 800adb8:	4601      	mov	r1, r0
 800adba:	2300      	movs	r3, #0
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	4620      	mov	r0, r4
 800adc0:	f00d f8b0 	bl	8017f24 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}

0800adcc <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800add4:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <_ZL19normal_operator_newj+0x1c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800adde:	68fb      	ldr	r3, [r7, #12]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	200000c8 	.word	0x200000c8

0800adec <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	200000c8 	.word	0x200000c8

0800ae0c <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800ae18:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	4798      	blx	r3
 800ae20:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ae22:	697b      	ldr	r3, [r7, #20]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	200000c8 	.word	0x200000c8

0800ae30 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <_ZL25normal_operator_new_arrayj+0x1c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ae42:	68fb      	ldr	r3, [r7, #12]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200000c8 	.word	0x200000c8

0800ae50 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
 800ae60:	4603      	mov	r3, r0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	200000c8 	.word	0x200000c8

0800ae70 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800ae7c:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	4798      	blx	r3
 800ae84:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ae86:	697b      	ldr	r3, [r7, #20]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	200000c8 	.word	0x200000c8

0800ae94 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <_ZL22normal_operator_deletePv+0x18>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	4798      	blx	r3
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	200000d0 	.word	0x200000d0

0800aeb0 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800aeb8:	4b03      	ldr	r3, [pc, #12]	; (800aec8 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
}
 800aec0:	bf00      	nop
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	200000d0 	.word	0x200000d0

0800aecc <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <_Znwj+0x1c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
 800aedc:	4603      	mov	r3, r0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	2000002c 	.word	0x2000002c

0800aeec <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800aef8:	4b05      	ldr	r3, [pc, #20]	; (800af10 <_ZnwjPKci+0x24>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	4798      	blx	r3
 800af04:	4603      	mov	r3, r0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20000034 	.word	0x20000034

0800af14 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800af1e:	4b04      	ldr	r3, [pc, #16]	; (800af30 <_ZdlPvj+0x1c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000044 	.word	0x20000044

0800af34 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800af40:	4b05      	ldr	r3, [pc, #20]	; (800af58 <_ZnajPKci+0x24>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	4798      	blx	r3
 800af4c:	4603      	mov	r3, r0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000040 	.word	0x20000040

0800af5c <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800af64:	4b03      	ldr	r3, [pc, #12]	; (800af74 <_ZdaPv+0x18>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	4798      	blx	r3
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20000048 	.word	0x20000048

0800af78 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800af82:	4b04      	ldr	r3, [pc, #16]	; (800af94 <_ZdaPvj+0x1c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
}
 800af8a:	bf00      	nop
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000048 	.word	0x20000048

0800af98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800af9c:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800af9e:	4a13      	ldr	r2, [pc, #76]	; (800afec <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800afa0:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800afa2:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800afa6:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800afa8:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800afaa:	4a14      	ldr	r2, [pc, #80]	; (800affc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800afac:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800afae:	4b14      	ldr	r3, [pc, #80]	; (800b000 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800afb0:	4a14      	ldr	r2, [pc, #80]	; (800b004 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800afb2:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800afb4:	4b14      	ldr	r3, [pc, #80]	; (800b008 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800afb6:	4a15      	ldr	r2, [pc, #84]	; (800b00c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800afb8:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800afba:	4b15      	ldr	r3, [pc, #84]	; (800b010 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800afbc:	4a15      	ldr	r2, [pc, #84]	; (800b014 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800afbe:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800afc0:	4b15      	ldr	r3, [pc, #84]	; (800b018 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800afc2:	4a16      	ldr	r2, [pc, #88]	; (800b01c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800afc4:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800afc6:	4b16      	ldr	r3, [pc, #88]	; (800b020 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800afc8:	4a16      	ldr	r2, [pc, #88]	; (800b024 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800afca:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800afcc:	4b16      	ldr	r3, [pc, #88]	; (800b028 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800afce:	4a17      	ldr	r2, [pc, #92]	; (800b02c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800afd0:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800afd2:	4b17      	ldr	r3, [pc, #92]	; (800b030 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800afd4:	4a17      	ldr	r2, [pc, #92]	; (800b034 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800afd6:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800afd8:	4b17      	ldr	r3, [pc, #92]	; (800b038 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800afda:	4a18      	ldr	r2, [pc, #96]	; (800b03c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800afdc:	601a      	str	r2, [r3, #0]

#endif
}
 800afde:	bf00      	nop
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	2000002c 	.word	0x2000002c
 800afec:	0800adcd 	.word	0x0800adcd
 800aff0:	20000030 	.word	0x20000030
 800aff4:	0800aded 	.word	0x0800aded
 800aff8:	20000034 	.word	0x20000034
 800affc:	0800ae0d 	.word	0x0800ae0d
 800b000:	20000038 	.word	0x20000038
 800b004:	0800ae31 	.word	0x0800ae31
 800b008:	2000003c 	.word	0x2000003c
 800b00c:	0800ae51 	.word	0x0800ae51
 800b010:	20000040 	.word	0x20000040
 800b014:	0800ae71 	.word	0x0800ae71
 800b018:	20000044 	.word	0x20000044
 800b01c:	0800ae95 	.word	0x0800ae95
 800b020:	20000048 	.word	0x20000048
 800b024:	0800aeb1 	.word	0x0800aeb1
 800b028:	20000014 	.word	0x20000014
 800b02c:	0800aba9 	.word	0x0800aba9
 800b030:	2000001c 	.word	0x2000001c
 800b034:	0800abcd 	.word	0x0800abcd
 800b038:	20000018 	.word	0x20000018
 800b03c:	0800abf5 	.word	0x0800abf5

0800b040 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800b044:	4b08      	ldr	r3, [pc, #32]	; (800b068 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a08      	ldr	r2, [pc, #32]	; (800b06c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d004      	beq.n	800b058 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800b04e:	4b06      	ldr	r3, [pc, #24]	; (800b068 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a07      	ldr	r2, [pc, #28]	; (800b070 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d101      	bne.n	800b05c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800b058:	2301      	movs	r3, #1
 800b05a:	e000      	b.n	800b05e <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800b05c:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800b05e:	4618      	mov	r0, r3
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	2000002c 	.word	0x2000002c
 800b06c:	0800ac55 	.word	0x0800ac55
 800b070:	0800ac15 	.word	0x0800ac15

0800b074 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800b078:	4b1f      	ldr	r3, [pc, #124]	; (800b0f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	4a1e      	ldr	r2, [pc, #120]	; (800b0f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	4b1d      	ldr	r3, [pc, #116]	; (800b0f8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b01      	cmp	r3, #1
 800b088:	bfcc      	ite	gt
 800b08a:	2301      	movgt	r3, #1
 800b08c:	2300      	movle	r3, #0
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b00      	cmp	r3, #0
 800b092:	d12e      	bne.n	800b0f2 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800b094:	4b19      	ldr	r3, [pc, #100]	; (800b0fc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a19      	ldr	r2, [pc, #100]	; (800b100 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800b09a:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800b09c:	4b19      	ldr	r3, [pc, #100]	; (800b104 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800b0a2:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800b0a4:	4b19      	ldr	r3, [pc, #100]	; (800b10c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a19      	ldr	r2, [pc, #100]	; (800b110 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800b0aa:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800b0ac:	4b19      	ldr	r3, [pc, #100]	; (800b114 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a19      	ldr	r2, [pc, #100]	; (800b118 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800b0b2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800b0ba:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800b0bc:	4b19      	ldr	r3, [pc, #100]	; (800b124 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a19      	ldr	r2, [pc, #100]	; (800b128 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800b0c2:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800b0c4:	4b19      	ldr	r3, [pc, #100]	; (800b12c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a19      	ldr	r2, [pc, #100]	; (800b130 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800b0ca:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800b0cc:	4b19      	ldr	r3, [pc, #100]	; (800b134 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a19      	ldr	r2, [pc, #100]	; (800b138 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800b0d2:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800b0d4:	4b19      	ldr	r3, [pc, #100]	; (800b13c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a19      	ldr	r2, [pc, #100]	; (800b140 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800b0da:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800b0dc:	4b19      	ldr	r3, [pc, #100]	; (800b144 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a19      	ldr	r2, [pc, #100]	; (800b148 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800b0e2:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800b0e4:	4b19      	ldr	r3, [pc, #100]	; (800b14c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a19      	ldr	r2, [pc, #100]	; (800b150 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800b0ea:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800b0ec:	f7ff ff54 	bl	800af98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800b0f0:	e000      	b.n	800b0f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800b0f2:	bf00      	nop
#endif
}
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	200008c8 	.word	0x200008c8
 800b0fc:	2000002c 	.word	0x2000002c
 800b100:	2000004c 	.word	0x2000004c
 800b104:	20000030 	.word	0x20000030
 800b108:	20000050 	.word	0x20000050
 800b10c:	20000034 	.word	0x20000034
 800b110:	20000054 	.word	0x20000054
 800b114:	20000038 	.word	0x20000038
 800b118:	20000058 	.word	0x20000058
 800b11c:	2000003c 	.word	0x2000003c
 800b120:	2000005c 	.word	0x2000005c
 800b124:	20000040 	.word	0x20000040
 800b128:	20000060 	.word	0x20000060
 800b12c:	20000044 	.word	0x20000044
 800b130:	20000064 	.word	0x20000064
 800b134:	20000048 	.word	0x20000048
 800b138:	20000068 	.word	0x20000068
 800b13c:	20000014 	.word	0x20000014
 800b140:	20000020 	.word	0x20000020
 800b144:	2000001c 	.word	0x2000001c
 800b148:	20000028 	.word	0x20000028
 800b14c:	20000018 	.word	0x20000018
 800b150:	20000024 	.word	0x20000024

0800b154 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800b154:	b480      	push	{r7}
 800b156:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800b158:	4b1f      	ldr	r3, [pc, #124]	; (800b1d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	4a1e      	ldr	r2, [pc, #120]	; (800b1d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b160:	6013      	str	r3, [r2, #0]
 800b162:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	bfcc      	ite	gt
 800b16a:	2301      	movgt	r3, #1
 800b16c:	2300      	movle	r3, #0
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	d12c      	bne.n	800b1ce <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800b174:	4b19      	ldr	r3, [pc, #100]	; (800b1dc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a19      	ldr	r2, [pc, #100]	; (800b1e0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800b17a:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800b17c:	4b19      	ldr	r3, [pc, #100]	; (800b1e4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800b182:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800b184:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a19      	ldr	r2, [pc, #100]	; (800b1f0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800b18a:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800b18c:	4b19      	ldr	r3, [pc, #100]	; (800b1f4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a19      	ldr	r2, [pc, #100]	; (800b1f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800b192:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800b194:	4b19      	ldr	r3, [pc, #100]	; (800b1fc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a19      	ldr	r2, [pc, #100]	; (800b200 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800b19a:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800b19c:	4b19      	ldr	r3, [pc, #100]	; (800b204 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a19      	ldr	r2, [pc, #100]	; (800b208 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800b1a2:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800b1a4:	4b19      	ldr	r3, [pc, #100]	; (800b20c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a19      	ldr	r2, [pc, #100]	; (800b210 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800b1aa:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800b1ac:	4b19      	ldr	r3, [pc, #100]	; (800b214 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a19      	ldr	r2, [pc, #100]	; (800b218 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800b1b2:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800b1b4:	4b19      	ldr	r3, [pc, #100]	; (800b21c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a19      	ldr	r2, [pc, #100]	; (800b220 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800b1ba:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800b1bc:	4b19      	ldr	r3, [pc, #100]	; (800b224 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a19      	ldr	r2, [pc, #100]	; (800b228 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800b1c2:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800b1c4:	4b19      	ldr	r3, [pc, #100]	; (800b22c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a19      	ldr	r2, [pc, #100]	; (800b230 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	e000      	b.n	800b1d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800b1ce:	bf00      	nop
#endif
}
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	200008c8 	.word	0x200008c8
 800b1dc:	2000004c 	.word	0x2000004c
 800b1e0:	2000002c 	.word	0x2000002c
 800b1e4:	20000050 	.word	0x20000050
 800b1e8:	20000030 	.word	0x20000030
 800b1ec:	20000054 	.word	0x20000054
 800b1f0:	20000034 	.word	0x20000034
 800b1f4:	20000058 	.word	0x20000058
 800b1f8:	20000038 	.word	0x20000038
 800b1fc:	2000005c 	.word	0x2000005c
 800b200:	2000003c 	.word	0x2000003c
 800b204:	20000060 	.word	0x20000060
 800b208:	20000040 	.word	0x20000040
 800b20c:	20000064 	.word	0x20000064
 800b210:	20000044 	.word	0x20000044
 800b214:	20000068 	.word	0x20000068
 800b218:	20000048 	.word	0x20000048
 800b21c:	20000020 	.word	0x20000020
 800b220:	20000014 	.word	0x20000014
 800b224:	20000028 	.word	0x20000028
 800b228:	2000001c 	.word	0x2000001c
 800b22c:	20000024 	.word	0x20000024
 800b230:	20000018 	.word	0x20000018

0800b234 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    {
 800b23c:	4a05      	ldr	r2, [pc, #20]	; (800b254 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff fc15 	bl	800aa74 <_ZN17MemoryLeakFailureD1Ev>
    }
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	08028fd0 	.word	0x08028fd0

0800b258 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    }
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ffe7 	bl	800b234 <_ZN25MemoryLeakWarningReporterD1Ev>
 800b266:	2104      	movs	r1, #4
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff fe53 	bl	800af14 <_ZdlPvj>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	4a04      	ldr	r2, [pc, #16]	; (800b294 <_ZN14TestTerminatorC1Ev+0x1c>)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	0802997c 	.word	0x0802997c

0800b298 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff ffe8 	bl	800b278 <_ZN14TestTerminatorC1Ev>
 800b2a8:	4a03      	ldr	r2, [pc, #12]	; (800b2b8 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	08029954 	.word	0x08029954

0800b2bc <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800b2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2be:	b099      	sub	sp, #100	; 0x64
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800b2c6:	f009 fdb7 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800b2ca:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800b2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	339c      	adds	r3, #156	; 0x9c
 800b2d2:	681c      	ldr	r4, [r3, #0]
 800b2d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f008 fbc4 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800b2e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f002 fd4f 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b2ee:	f008 fc9b 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f002 f9b9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800b300:	f107 000c 	add.w	r0, r7, #12
 800b304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	4633      	mov	r3, r6
 800b30c:	462a      	mov	r2, r5
 800b30e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b310:	f004 fd14 	bl	800fd3c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800b314:	2300      	movs	r3, #0
 800b316:	653b      	str	r3, [r7, #80]	; 0x50
 800b318:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff ffbb 	bl	800b298 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800b322:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4619      	mov	r1, r3
 800b32c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b32e:	47a0      	blx	r4
 800b330:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b334:	4618      	mov	r0, r3
 800b336:	f009 fe79 	bl	801502c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800b33a:	f107 030c 	add.w	r3, r7, #12
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 f9ac 	bl	800b69c <_ZN11FailFailureD1Ev>
 800b344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b348:	4618      	mov	r0, r3
 800b34a:	f002 fd4a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800b34e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b352:	4618      	mov	r0, r3
 800b354:	f002 fd45 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800b358:	bf00      	nop
 800b35a:	375c      	adds	r7, #92	; 0x5c
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b360 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	4a04      	ldr	r2, [pc, #16]	; (800b37c <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	08028fe4 	.word	0x08028fe4

0800b380 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff ffe8 	bl	800b360 <_ZN17MemoryLeakFailureC1Ev>
 800b390:	4a03      	ldr	r2, [pc, #12]	; (800b3a0 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	08028fd0 	.word	0x08028fd0

0800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800b3a4:	b598      	push	{r3, r4, r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800b3a8:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d11b      	bne.n	800b3e8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800b3b0:	f7ff fe60 	bl	800b074 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800b3b4:	2004      	movs	r0, #4
 800b3b6:	f7ff fd89 	bl	800aecc <_Znwj>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461c      	mov	r4, r3
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff ffde 	bl	800b380 <_ZN25MemoryLeakWarningReporterC1Ev>
 800b3c4:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800b3c6:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800b3c8:	f241 1050 	movw	r0, #4432	; 0x1150
 800b3cc:	f7ff fd7e 	bl	800aecc <_Znwj>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461c      	mov	r4, r3
 800b3d4:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f00c fa3e 	bl	801785c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800b3e0:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800b3e2:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800b3e4:	f7ff feb6 	bl	800b154 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800b3e8:	4b01      	ldr	r3, [pc, #4]	; (800b3f0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	bd98      	pop	{r3, r4, r7, pc}
 800b3f0:	200008d0 	.word	0x200008d0
 800b3f4:	200008cc 	.word	0x200008cc

0800b3f8 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	765a      	strb	r2, [r3, #25]
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
	...

0800b418 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800b41c:	f7ff fdbc 	bl	800af98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	3204      	adds	r2, #4
 800b42c:	6812      	ldr	r2, [r2, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	4790      	blx	r2
    delete globalReporter;
 800b432:	4b08      	ldr	r3, [pc, #32]	; (800b454 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	3204      	adds	r2, #4
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	4790      	blx	r2
    globalDetector = NULLPTR;
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	200008d0 	.word	0x200008d0
 800b454:	200008cc 	.word	0x200008cc

0800b458 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	4618      	mov	r0, r3
 800b46a:	f006 fdfd 	bl	8012068 <_ZN10TestPluginC1ERK12SimpleString>
 800b46e:	4a14      	ldr	r2, [pc, #80]	; (800b4c0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	761a      	strb	r2, [r3, #24]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	765a      	strb	r2, [r3, #25]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800b48e:	4a0d      	ldr	r2, [pc, #52]	; (800b4c4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	615a      	str	r2, [r3, #20]
 800b4a0:	e004      	b.n	800b4ac <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800b4a2:	f7ff ff7f 	bl	800b3a4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f00c fa69 	bl	8017988 <_ZN18MemoryLeakDetector6enableEv>
}
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	08028ff8 	.word	0x08028ff8
 800b4c4:	200008d4 	.word	0x200008d4

0800b4c8 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7e5b      	ldrb	r3, [r3, #25]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800b4de:	f7ff fd5b 	bl	800af98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800b4e2:	f7ff ff99 	bl	800b418 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f006 fdf9 	bl	80120e0 <_ZN10TestPluginD1Ev>
    }
}
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	08028ff8 	.word	0x08028ff8

0800b4fc <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
}
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7ff ffdf 	bl	800b4c8 <_ZN23MemoryLeakWarningPluginD1Ev>
 800b50a:	2124      	movs	r1, #36	; 0x24
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff fd01 	bl	800af14 <_ZdlPvj>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f00c fa0e 	bl	801794e <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fd ffb0 	bl	8009498 <_ZNK10TestResult15getFailureCountEv>
 800b538:	4602      	mov	r2, r0
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	621a      	str	r2, [r3, #32]
}
 800b53e:	bf00      	nop
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b097      	sub	sp, #92	; 0x5c
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	4618      	mov	r0, r3
 800b55a:	f00c fa08 	bl	801796e <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	2103      	movs	r1, #3
 800b564:	4618      	mov	r0, r3
 800b566:	f00c fda5 	bl	80180b4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800b56a:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	7e1b      	ldrb	r3, [r3, #24]
 800b570:	f083 0301 	eor.w	r3, r3, #1
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b580:	429a      	cmp	r2, r3
 800b582:	d009      	beq.n	800b598 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6a1c      	ldr	r4, [r3, #32]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7fd ff85 	bl	8009498 <_ZNK10TestResult15getFailureCountEv>
 800b58e:	4603      	mov	r3, r0
 800b590:	429c      	cmp	r4, r3
 800b592:	d101      	bne.n	800b598 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800b598:	2300      	movs	r3, #0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d04c      	beq.n	800b638 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800b59e:	f7ff fd4f 	bl	800b040 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d028      	beq.n	800b5fa <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	2103      	movs	r1, #3
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f00c fd45 	bl	801803e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f002 f858 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800b5c2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b5c6:	f107 0310 	add.w	r3, r7, #16
 800b5ca:	68b9      	ldr	r1, [r7, #8]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f003 feaf 	bl	800f330 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800b5d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f002 fc03 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3334      	adds	r3, #52	; 0x34
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f107 0210 	add.w	r2, r7, #16
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800b5ee:	f107 0310 	add.w	r3, r7, #16
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f003 ff5c 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 800b5f8:	e01e      	b.n	800b638 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d01a      	beq.n	800b638 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3338      	adds	r3, #56	; 0x38
 800b608:	681c      	ldr	r4, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	461a      	mov	r2, r3
 800b610:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b614:	4910      	ldr	r1, [pc, #64]	; (800b658 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800b616:	4618      	mov	r0, r3
 800b618:	f003 f8ea 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800b61c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b620:	4618      	mov	r0, r3
 800b622:	f002 fbb1 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800b626:	4603      	mov	r3, r0
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	47a0      	blx	r4
 800b62e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b632:	4618      	mov	r0, r3
 800b634:	f002 fbd5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f00c fd13 	bl	8018068 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	61da      	str	r2, [r3, #28]
}
 800b64e:	bf00      	nop
 800b650:	375c      	adds	r7, #92	; 0x5c
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}
 800b656:	bf00      	nop
 800b658:	080250b8 	.word	0x080250b8

0800b65c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	2102      	movs	r1, #2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f00c fd21 	bl	80180b4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800b672:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d007      	beq.n	800b68c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	2102      	movs	r1, #2
 800b682:	4618      	mov	r0, r3
 800b684:	f00c fcdb 	bl	801803e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800b688:	4603      	mov	r3, r0
 800b68a:	e000      	b.n	800b68e <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	080250f8 	.word	0x080250f8

0800b69c <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	4a05      	ldr	r2, [pc, #20]	; (800b6bc <_ZN11FailFailureD1Ev+0x20>)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f003 feff 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08029040 	.word	0x08029040

0800b6c0 <_ZN11FailFailureD0Ev>:
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ffe7 	bl	800b69c <_ZN11FailFailureD1Ev>
 800b6ce:	2134      	movs	r1, #52	; 0x34
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fc1f 	bl	800af14 <_ZdlPvj>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4618      	mov	r0, r3
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	4a06      	ldr	r2, [pc, #24]	; (800b734 <_ZN19MockFailureReporterC1Ev+0x24>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	711a      	strb	r2, [r3, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	0802a21c 	.word	0x0802a21c

0800b738 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	4a04      	ldr	r2, [pc, #16]	; (800b754 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	601a      	str	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	0802a21c 	.word	0x0802a21c

0800b758 <_ZN19MockFailureReporterD0Ev>:
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff ffe9 	bl	800b738 <_ZN19MockFailureReporterD1Ev>
 800b766:	2108      	movs	r1, #8
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff fbd3 	bl	800af14 <_ZdlPvj>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	4a05      	ldr	r2, [pc, #20]	; (800b798 <_ZN11MockFailureD1Ev+0x20>)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4618      	mov	r0, r3
 800b78a:	f003 fe91 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	08029194 	.word	0x08029194

0800b79c <_ZN11MockFailureD0Ev>:
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff ffe7 	bl	800b778 <_ZN11MockFailureD1Ev>
 800b7aa:	2134      	movs	r1, #52	; 0x34
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7ff fbb1 	bl	800af14 <_ZdlPvj>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800b7bc:	b590      	push	{r4, r7, lr}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	4a16      	ldr	r2, [pc, #88]	; (800b820 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f001 ff9f 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f103 020c 	add.w	r2, r3, #12
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	f001 ff96 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	f102 0418 	add.w	r4, r2, #24
 800b7f6:	3318      	adds	r3, #24
 800b7f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	629a      	str	r2, [r3, #40]	; 0x28
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	631a      	str	r2, [r3, #48]	; 0x30
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd90      	pop	{r4, r7, pc}
 800b820:	0802a25c 	.word	0x0802a25c

0800b824 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800b82e:	f107 030c 	add.w	r3, r7, #12
 800b832:	4916      	ldr	r1, [pc, #88]	; (800b88c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800b834:	4618      	mov	r0, r3
 800b836:	f001 ff1c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800b83a:	f107 030c 	add.w	r3, r7, #12
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f002 fb1f 	bl	800de84 <_ZneRK12SimpleStringS1_>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800b84c:	6879      	ldr	r1, [r7, #4]
 800b84e:	4810      	ldr	r0, [pc, #64]	; (800b890 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b850:	f000 ff70 	bl	800c734 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800b854:	4603      	mov	r3, r0
 800b856:	e000      	b.n	800b85a <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	f107 030c 	add.w	r3, r7, #12
 800b860:	4618      	mov	r0, r3
 800b862:	f002 fabe 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	33a8      	adds	r3, #168	; 0xa8
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	33ac      	adds	r3, #172	; 0xac
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6978      	ldr	r0, [r7, #20]
 800b87e:	4798      	blx	r3
    return mock_support;
 800b880:	697b      	ldr	r3, [r7, #20]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	080250fc 	.word	0x080250fc
 800b890:	200008d8 	.word	0x200008d8

0800b894 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800b89e:	4a21      	ldr	r2, [pc, #132]	; (800b924 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	731a      	strb	r2, [r3, #12]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f103 0218 	add.w	r2, r3, #24
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	615a      	str	r2, [r3, #20]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3318      	adds	r3, #24
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7ff ff23 	bl	800b710 <_ZN19MockFailureReporterC1Ev>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3320      	adds	r3, #32
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f010 fefc 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3330      	adds	r3, #48	; 0x30
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f014 fbe8 	bl	80200c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3338      	adds	r3, #56	; 0x38
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f014 faf2 	bl	801fee2 <_ZN18MockNamedValueListC1Ev>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	333c      	adds	r3, #60	; 0x3c
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f001 ff08 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800b912:	2100      	movs	r1, #0
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f894 	bl	800ba42 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	0802906c 	.word	0x0802906c

0800b928 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	4a0d      	ldr	r2, [pc, #52]	; (800b968 <_ZN11MockSupportD1Ev+0x40>)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	333c      	adds	r3, #60	; 0x3c
 800b93a:	4618      	mov	r0, r3
 800b93c:	f002 fa51 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3330      	adds	r3, #48	; 0x30
 800b944:	4618      	mov	r0, r3
 800b946:	f014 fbd1 	bl	80200ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	3320      	adds	r3, #32
 800b94e:	4618      	mov	r0, r3
 800b950:	f010 fed0 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3318      	adds	r3, #24
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff feed 	bl	800b738 <_ZN19MockFailureReporterD1Ev>
{
}
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	0802906c 	.word	0x0802906c

0800b96c <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b082      	sub	sp, #8
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
}
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff ffd7 	bl	800b928 <_ZN11MockSupportD1Ev>
 800b97a:	2148      	movs	r1, #72	; 0x48
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff fac9 	bl	800af14 <_ZdlPvj>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4618      	mov	r0, r3
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	691a      	ldr	r2, [r3, #16]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3310      	adds	r3, #16
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	78f9      	ldrb	r1, [r7, #3]
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	4798      	blx	r3
}
 800b9ac:	bf00      	nop
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	3318      	adds	r3, #24
 800b9c8:	e000      	b.n	800b9cc <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00a      	beq.n	800b9ee <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	33c8      	adds	r3, #200	; 0xc8
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6952      	ldr	r2, [r2, #20]
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3338      	adds	r3, #56	; 0x38
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f014 fb0b 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01c      	beq.n	800ba3a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 ff26 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bf14      	ite	ne
 800ba0e:	2301      	movne	r3, #1
 800ba10:	2300      	moveq	r3, #0
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800ba18:	68f9      	ldr	r1, [r7, #12]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 ff1a 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ba20:	4603      	mov	r3, r0
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	32a4      	adds	r2, #164	; 0xa4
 800ba26:	6812      	ldr	r2, [r2, #0]
 800ba28:	6879      	ldr	r1, [r7, #4]
 800ba2a:	6949      	ldr	r1, [r1, #20]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f014 f9f5 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	e7df      	b.n	800b9fa <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d102      	bne.n	800ba58 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	e000      	b.n	800ba5a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6113      	str	r3, [r2, #16]
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3330      	adds	r3, #48	; 0x30
 800ba76:	4618      	mov	r0, r3
 800ba78:	f012 fb10 	bl	801e09c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800ba7c:	bf00      	nop
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800ba84:	b590      	push	{r4, r7, lr}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	3330      	adds	r3, #48	; 0x30
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f014 fb75 	bl	8020188 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3338      	adds	r3, #56	; 0x38
 800baa2:	4618      	mov	r0, r3
 800baa4:	f014 fab3 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800baa8:	6178      	str	r0, [r7, #20]
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d01c      	beq.n	800baea <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800bab0:	6979      	ldr	r1, [r7, #20]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fece 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	bf14      	ite	ne
 800babe:	2301      	movne	r3, #1
 800bac0:	2300      	moveq	r3, #0
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00b      	beq.n	800bae0 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800bac8:	6979      	ldr	r1, [r7, #20]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f000 fec2 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bad0:	4603      	mov	r3, r0
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	32b0      	adds	r2, #176	; 0xb0
 800bad6:	6814      	ldr	r4, [r2, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	4618      	mov	r0, r3
 800bade:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bae0:	6978      	ldr	r0, [r7, #20]
 800bae2:	f014 f99d 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800bae6:	6178      	str	r0, [r7, #20]
 800bae8:	e7df      	b.n	800baaa <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800baea:	bf00      	nop
 800baec:	371c      	adds	r7, #28
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd90      	pop	{r4, r7, pc}

0800baf2 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800baf2:	b590      	push	{r4, r7, lr}
 800baf4:	b087      	sub	sp, #28
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	60b9      	str	r1, [r7, #8]
 800bafc:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3330      	adds	r3, #48	; 0x30
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	68b9      	ldr	r1, [r7, #8]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f014 fb5a 	bl	80201c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3338      	adds	r3, #56	; 0x38
 800bb10:	4618      	mov	r0, r3
 800bb12:	f014 fa7c 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800bb16:	6178      	str	r0, [r7, #20]
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01c      	beq.n	800bb58 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800bb1e:	6979      	ldr	r1, [r7, #20]
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 fe97 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bf14      	ite	ne
 800bb2c:	2301      	movne	r3, #1
 800bb2e:	2300      	moveq	r3, #0
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00b      	beq.n	800bb4e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800bb36:	6979      	ldr	r1, [r7, #20]
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 fe8b 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	32b4      	adds	r2, #180	; 0xb4
 800bb44:	6814      	ldr	r4, [r2, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	68b9      	ldr	r1, [r7, #8]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb4e:	6978      	ldr	r0, [r7, #20]
 800bb50:	f014 f966 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800bb54:	6178      	str	r0, [r7, #20]
 800bb56:	e7df      	b.n	800bb18 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800bb58:	bf00      	nop
 800bb5a:	371c      	adds	r7, #28
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd90      	pop	{r4, r7, pc}

0800bb60 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b084      	sub	sp, #16
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	3330      	adds	r3, #48	; 0x30
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f014 fb91 	bl	8020298 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3338      	adds	r3, #56	; 0x38
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f014 fa47 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800bb80:	60f8      	str	r0, [r7, #12]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01b      	beq.n	800bbc0 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800bb88:	68f9      	ldr	r1, [r7, #12]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fe62 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	bf14      	ite	ne
 800bb96:	2301      	movne	r3, #1
 800bb98:	2300      	moveq	r3, #0
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00a      	beq.n	800bbb6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800bba0:	68f9      	ldr	r1, [r7, #12]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fe56 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	32b8      	adds	r2, #184	; 0xb8
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f014 f932 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	e7e0      	b.n	800bb82 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800bbc0:	bf00      	nop
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3330      	adds	r3, #48	; 0x30
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f014 fab8 	bl	802014a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3338      	adds	r3, #56	; 0x38
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f014 fa15 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d01a      	beq.n	800bc22 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800bbec:	68f9      	ldr	r1, [r7, #12]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fe30 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	bf14      	ite	ne
 800bbfa:	2301      	movne	r3, #1
 800bbfc:	2300      	moveq	r3, #0
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d009      	beq.n	800bc18 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fe24 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	32bc      	adds	r2, #188	; 0xbc
 800bc12:	6812      	ldr	r2, [r2, #0]
 800bc14:	4618      	mov	r0, r3
 800bc16:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f014 f901 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	e7e1      	b.n	800bbe6 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d004      	beq.n	800bc44 <_ZN11MockSupport5clearEv+0x1a>
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	3204      	adds	r2, #4
 800bc3e:	6812      	ldr	r2, [r2, #0]
 800bc40:	4618      	mov	r0, r3
 800bc42:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800bc52:	f00e fe0d 	bl	801a870 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3320      	adds	r3, #32
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f011 f937 	bl	801cece <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3338      	adds	r3, #56	; 0x38
 800bc86:	4618      	mov	r0, r3
 800bc88:	f014 f9c1 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01a      	beq.n	800bcca <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800bc94:	68f9      	ldr	r1, [r7, #12]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fddc 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bc9c:	60b8      	str	r0, [r7, #8]
        if (support) {
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00d      	beq.n	800bcc0 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	339c      	adds	r3, #156	; 0x9c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68b8      	ldr	r0, [r7, #8]
 800bcae:	4798      	blx	r3
            delete support;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d004      	beq.n	800bcc0 <_ZN11MockSupport5clearEv+0x96>
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	3204      	adds	r2, #4
 800bcba:	6812      	ldr	r2, [r2, #0]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f014 f8ad 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	e7e1      	b.n	800bc8e <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3338      	adds	r3, #56	; 0x38
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f014 f915 	bl	801fefe <_ZN18MockNamedValueList5clearEv>
}
 800bcd4:	bf00      	nop
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	731a      	strb	r2, [r3, #12]
}
 800bcea:	bf00      	nop
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
	...

0800bcf8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800bcf8:	b590      	push	{r4, r7, lr}
 800bcfa:	b089      	sub	sp, #36	; 0x24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	333c      	adds	r3, #60	; 0x3c
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f002 f859 	bl	800ddc0 <_ZNK12SimpleString7isEmptyEv>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f001 fcff 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800bd1c:	e021      	b.n	800bd62 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800bd24:	f107 0318 	add.w	r3, r7, #24
 800bd28:	4910      	ldr	r1, [pc, #64]	; (800bd6c <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f001 fca1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800bd30:	f107 0310 	add.w	r3, r7, #16
 800bd34:	f107 0218 	add.w	r2, r7, #24
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f002 f8b3 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f107 0110 	add.w	r1, r7, #16
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f002 f8ac 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800bd4e:	f107 0310 	add.w	r3, r7, #16
 800bd52:	4618      	mov	r0, r3
 800bd54:	f002 f845 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800bd58:	f107 0318 	add.w	r3, r7, #24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f002 f840 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	3724      	adds	r7, #36	; 0x24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd90      	pop	{r4, r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	08025100 	.word	0x08025100

0800bd70 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3314      	adds	r3, #20
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	2101      	movs	r1, #1
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	4798      	blx	r3
 800bd8a:	4603      	mov	r3, r0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3708      	adds	r7, #8
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3314      	adds	r3, #20
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	683a      	ldr	r2, [r7, #0]
 800bda8:	2100      	movs	r1, #0
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	4798      	blx	r3
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800bdb8:	b590      	push	{r4, r7, lr}
 800bdba:	b089      	sub	sp, #36	; 0x24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bdca:	f083 0301 	eor.w	r3, r3, #1
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800bdd4:	f010 fbf6 	bl	801c5c4 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	e041      	b.n	800be60 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f000 fb1b 	bl	800c418 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800bde2:	22a5      	movs	r2, #165	; 0xa5
 800bde4:	4920      	ldr	r1, [pc, #128]	; (800be68 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800bde6:	2070      	movs	r0, #112	; 0x70
 800bde8:	f7ff f880 	bl	800aeec <_ZnwjPKci>
 800bdec:	4604      	mov	r4, r0
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f00f f8f3 	bl	801afdc <_ZN23MockCheckedExpectedCallC1Ej>
 800bdf6:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3308      	adds	r3, #8
 800bdfe:	681c      	ldr	r4, [r3, #0]
 800be00:	f107 0314 	add.w	r3, r7, #20
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff ff75 	bl	800bcf8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800be0e:	f107 0314 	add.w	r3, r7, #20
 800be12:	4619      	mov	r1, r3
 800be14:	69f8      	ldr	r0, [r7, #28]
 800be16:	47a0      	blx	r4
 800be18:	f107 0314 	add.w	r3, r7, #20
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 ffe0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	7b1b      	ldrb	r3, [r3, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d013      	beq.n	800be52 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3310      	adds	r3, #16
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	6892      	ldr	r2, [r2, #8]
 800be36:	1c50      	adds	r0, r2, #1
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	6891      	ldr	r1, [r2, #8]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	440a      	add	r2, r1
 800be40:	4601      	mov	r1, r0
 800be42:	69f8      	ldr	r0, [r7, #28]
 800be44:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	441a      	add	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3320      	adds	r3, #32
 800be56:	69f9      	ldr	r1, [r7, #28]
 800be58:	4618      	mov	r0, r3
 800be5a:	f010 fd89 	bl	801c970 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800be5e:	69fb      	ldr	r3, [r7, #28]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3724      	adds	r7, #36	; 0x24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd90      	pop	{r4, r7, pc}
 800be68:	08025104 	.word	0x08025104

0800be6c <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800be6c:	b5b0      	push	{r4, r5, r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	605a      	str	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685d      	ldr	r5, [r3, #4]
 800be82:	22b1      	movs	r2, #177	; 0xb1
 800be84:	490a      	ldr	r1, [pc, #40]	; (800beb0 <_ZN11MockSupport16createActualCallEv+0x44>)
 800be86:	202c      	movs	r0, #44	; 0x2c
 800be88:	f7ff f830 	bl	800aeec <_ZnwjPKci>
 800be8c:	4604      	mov	r4, r0
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	691a      	ldr	r2, [r3, #16]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3320      	adds	r3, #32
 800be96:	4629      	mov	r1, r5
 800be98:	4620      	mov	r0, r4
 800be9a:	f00c fbdb 	bl	8018654 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bdb0      	pop	{r4, r5, r7, pc}
 800beae:	bf00      	nop
 800beb0:	08025104 	.word	0x08025104

0800beb4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00d      	beq.n	800bee4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3320      	adds	r3, #32
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	4618      	mov	r0, r3
 800bed0:	f010 fd2a 	bl	801c928 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f083 0301 	eor.w	r3, r3, #1
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e000      	b.n	800bee6 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800beee:	b590      	push	{r4, r7, lr}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800bef8:	f107 030c 	add.w	r3, r7, #12
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	6879      	ldr	r1, [r7, #4]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff fef9 	bl	800bcf8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d014      	beq.n	800bf38 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	33c4      	adds	r3, #196	; 0xc4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	3204      	adds	r2, #4
 800bf2c:	6812      	ldr	r2, [r2, #0]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bf3e:	f083 0301 	eor.w	r3, r3, #1
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d004      	beq.n	800bf52 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800bf48:	f00e fcbe 	bl	801a8c8 <_ZN21MockIgnoredActualCall8instanceEv>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461c      	mov	r4, r3
 800bf50:	e02f      	b.n	800bfb2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800bf5c:	f00e fc6e 	bl	801a83c <_ZN19MockActualCallTrace8instanceEv>
 800bf60:	4603      	mov	r3, r0
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	3208      	adds	r2, #8
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	f107 010c 	add.w	r1, r7, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	4790      	blx	r2
 800bf70:	4604      	mov	r4, r0
 800bf72:	e01e      	b.n	800bfb2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff ff9a 	bl	800beb4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d004      	beq.n	800bf90 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800bf86:	f00e fc9f 	bl	801a8c8 <_ZN21MockIgnoredActualCall8instanceEv>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	461c      	mov	r4, r3
 800bf8e:	e010      	b.n	800bfb2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	33c0      	adds	r3, #192	; 0xc0
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	4798      	blx	r3
 800bf9c:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f107 020c 	add.w	r2, r7, #12
 800bfaa:	4611      	mov	r1, r2
 800bfac:	6978      	ldr	r0, [r7, #20]
 800bfae:	4798      	blx	r3
    return *call;
 800bfb0:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800bfb2:	f107 030c 	add.w	r3, r7, #12
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f001 ff13 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800bfbc:	4623      	mov	r3, r4
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd90      	pop	{r4, r7, pc}

0800bfc6 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	3338      	adds	r3, #56	; 0x38
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f014 f817 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01a      	beq.n	800c01e <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800bfe8:	68f9      	ldr	r1, [r7, #12]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fc32 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bf14      	ite	ne
 800bff6:	2301      	movne	r3, #1
 800bff8:	2300      	moveq	r3, #0
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d009      	beq.n	800c014 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800c000:	68f9      	ldr	r1, [r7, #12]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fc26 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c008:	4603      	mov	r3, r0
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	3290      	adds	r2, #144	; 0x90
 800c00e:	6812      	ldr	r2, [r2, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f013 ff03 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	e7e1      	b.n	800bfe2 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3338      	adds	r3, #56	; 0x38
 800c03a:	4618      	mov	r0, r3
 800c03c:	f013 ffe7 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01a      	beq.n	800c07e <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800c048:	68f9      	ldr	r1, [r7, #12]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fc02 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	bf14      	ite	ne
 800c056:	2301      	movne	r3, #1
 800c058:	2300      	moveq	r3, #0
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d009      	beq.n	800c074 <_ZN11MockSupport7disableEv+0x4e>
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fbf6 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c068:	4603      	mov	r3, r0
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	3284      	adds	r2, #132	; 0x84
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	4618      	mov	r0, r3
 800c072:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f013 fed3 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	e7e1      	b.n	800c042 <_ZN11MockSupport7disableEv+0x1c>
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	3338      	adds	r3, #56	; 0x38
 800c09a:	4618      	mov	r0, r3
 800c09c:	f013 ffb7 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01a      	beq.n	800c0de <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800c0a8:	68f9      	ldr	r1, [r7, #12]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fbd2 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bf14      	ite	ne
 800c0b6:	2301      	movne	r3, #1
 800c0b8:	2300      	moveq	r3, #0
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d009      	beq.n	800c0d4 <_ZN11MockSupport6enableEv+0x4e>
 800c0c0:	68f9      	ldr	r1, [r7, #12]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fbc6 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	3288      	adds	r2, #136	; 0x88
 800c0ce:	6812      	ldr	r2, [r2, #0]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f013 fea3 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	e7e1      	b.n	800c0a2 <_ZN11MockSupport6enableEv+0x1c>
}
 800c0de:	bf00      	nop
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	78fa      	ldrb	r2, [r7, #3]
 800c0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	3338      	adds	r3, #56	; 0x38
 800c0fe:	4618      	mov	r0, r3
 800c100:	f013 ff85 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01b      	beq.n	800c144 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800c10c:	68f9      	ldr	r1, [r7, #12]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fba0 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	bf14      	ite	ne
 800c11a:	2301      	movne	r3, #1
 800c11c:	2300      	moveq	r3, #0
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00a      	beq.n	800c13a <_ZN11MockSupport7tracingEb+0x54>
 800c124:	68f9      	ldr	r1, [r7, #12]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fb94 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c12c:	4603      	mov	r3, r0
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	328c      	adds	r2, #140	; 0x8c
 800c132:	6812      	ldr	r2, [r2, #0]
 800c134:	78f9      	ldrb	r1, [r7, #3]
 800c136:	4618      	mov	r0, r3
 800c138:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f013 fe70 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	e7e0      	b.n	800c106 <_ZN11MockSupport7tracingEb+0x20>
}
 800c144:	bf00      	nop
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3320      	adds	r3, #32
 800c158:	4618      	mov	r0, r3
 800c15a:	f010 fbc1 	bl	801c8e0 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800c15e:	4603      	mov	r3, r0
 800c160:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3338      	adds	r3, #56	; 0x38
 800c166:	4618      	mov	r0, r3
 800c168:	f013 ff51 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c16c:	60b8      	str	r0, [r7, #8]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d01f      	beq.n	800c1b4 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fb6c 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bf14      	ite	ne
 800c182:	2301      	movne	r3, #1
 800c184:	2300      	moveq	r3, #0
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00e      	beq.n	800c1aa <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fb60 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c194:	4603      	mov	r3, r0
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	3298      	adds	r2, #152	; 0x98
 800c19a:	6812      	ldr	r2, [r2, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	4790      	blx	r2
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c1aa:	68b8      	ldr	r0, [r7, #8]
 800c1ac:	f013 fe38 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c1b0:	60b8      	str	r0, [r7, #8]
 800c1b2:	e7dc      	b.n	800c16e <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	bf14      	ite	ne
 800c1ba:	2301      	movne	r3, #1
 800c1bc:	2300      	moveq	r3, #0
 800c1be:	b2db      	uxtb	r3, r3
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d010      	beq.n	800c1fa <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	33bc      	adds	r3, #188	; 0xbc
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4798      	blx	r3
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f083 0301 	eor.w	r3, r3, #1
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e000      	b.n	800c1fc <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800c200:	2300      	movs	r3, #0
 800c202:	e02a      	b.n	800c25a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	3338      	adds	r3, #56	; 0x38
 800c208:	4618      	mov	r0, r3
 800c20a:	f013 ff00 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d020      	beq.n	800c258 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800c216:	68f9      	ldr	r1, [r7, #12]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fb1b 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00f      	beq.n	800c244 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800c224:	68f9      	ldr	r1, [r7, #12]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fb14 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c22c:	4603      	mov	r3, r0
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff ffca 	bl	800c1c8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800c234:	4603      	mov	r3, r0
 800c236:	f083 0301 	eor.w	r3, r3, #1
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800c244:	2300      	movs	r3, #0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800c24a:	2300      	movs	r3, #0
 800c24c:	e005      	b.n	800c25a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f013 fde6 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	e7db      	b.n	800c210 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800c258:	2301      	movs	r3, #1
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b092      	sub	sp, #72	; 0x48
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800c26a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c26e:	4618      	mov	r0, r3
 800c270:	f010 fa2c 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f103 0220 	add.w	r2, r3, #32
 800c27a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c27e:	4611      	mov	r1, r2
 800c280:	4618      	mov	r0, r3
 800c282:	f010 fbf3 	bl	801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	3338      	adds	r3, #56	; 0x38
 800c28a:	4618      	mov	r0, r3
 800c28c:	f013 febf 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c290:	6478      	str	r0, [r7, #68]	; 0x44
 800c292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c294:	2b00      	cmp	r3, #0
 800c296:	d01d      	beq.n	800c2d4 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800c298:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fada 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	bf14      	ite	ne
 800c2a6:	2301      	movne	r3, #1
 800c2a8:	2300      	moveq	r3, #0
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00c      	beq.n	800c2ca <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800c2b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 face 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	f103 0220 	add.w	r2, r3, #32
 800c2be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f010 fbd1 	bl	801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c2ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c2cc:	f013 fda8 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c2d0:	6478      	str	r0, [r7, #68]	; 0x44
 800c2d2:	e7de      	b.n	800c292 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	330c      	adds	r3, #12
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	4798      	blx	r3
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c2ec:	f107 0308 	add.w	r3, r7, #8
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f011 f9f5 	bl	801d6e0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	33c4      	adds	r3, #196	; 0xc4
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f107 0208 	add.w	r2, r7, #8
 800c302:	4611      	mov	r1, r2
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800c308:	f107 0308 	add.w	r3, r7, #8
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fe6d 	bl	800cfec <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800c312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c316:	4618      	mov	r0, r3
 800c318:	f010 f9ec 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 800c31c:	bf00      	nop
 800c31e:	3748      	adds	r7, #72	; 0x48
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b092      	sub	sp, #72	; 0x48
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800c32c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c330:	4618      	mov	r0, r3
 800c332:	f010 f9cb 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f103 0220 	add.w	r2, r3, #32
 800c33c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f010 fb92 	bl	801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	3338      	adds	r3, #56	; 0x38
 800c34c:	4618      	mov	r0, r3
 800c34e:	f013 fe5e 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c352:	6478      	str	r0, [r7, #68]	; 0x44
 800c354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c356:	2b00      	cmp	r3, #0
 800c358:	d01d      	beq.n	800c396 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800c35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 fa79 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	2300      	moveq	r3, #0
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00c      	beq.n	800c38c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800c372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fa6d 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f103 0220 	add.w	r2, r3, #32
 800c380:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c384:	4611      	mov	r1, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f010 fb70 	bl	801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c38c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c38e:	f013 fd47 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c392:	6478      	str	r0, [r7, #68]	; 0x44
 800c394:	e7de      	b.n	800c354 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	330c      	adds	r3, #12
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c3ae:	f107 0308 	add.w	r3, r7, #8
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f011 fa38 	bl	801d828 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	33c4      	adds	r3, #196	; 0xc4
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f107 0208 	add.w	r2, r7, #8
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800c3ca:	f107 0308 	add.w	r3, r7, #8
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 fe2e 	bl	800d030 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800c3d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f010 f98b 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 800c3de:	bf00      	nop
 800c3e0:	3748      	adds	r7, #72	; 0x48
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
    clear();
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	339c      	adds	r3, #156	; 0x9c
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	691a      	ldr	r2, [r3, #16]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	3308      	adds	r3, #8
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	4610      	mov	r0, r2
 800c40e:	4798      	blx	r3
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800c420:	f008 fd0a 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800c424:	4603      	mov	r3, r0
 800c426:	4618      	mov	r0, r3
 800c428:	f007 fb78 	bl	8013b1c <_ZN10UtestShell10countCheckEv>
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	2b00      	cmp	r3, #0
 800c442:	d008      	beq.n	800c456 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	33c4      	adds	r3, #196	; 0xc4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4610      	mov	r0, r2
 800c454:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	3338      	adds	r3, #56	; 0x38
 800c45a:	4618      	mov	r0, r3
 800c45c:	f013 fdd7 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d023      	beq.n	800c4b0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800c468:	68f9      	ldr	r1, [r7, #12]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f9f2 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d009      	beq.n	800c48a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f9eb 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c47e:	4603      	mov	r3, r0
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800c48a:	2300      	movs	r3, #0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00a      	beq.n	800c4a6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800c490:	68f9      	ldr	r1, [r7, #12]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f9de 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c498:	4603      	mov	r3, r0
 800c49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	32c4      	adds	r2, #196	; 0xc4
 800c4a0:	6812      	ldr	r2, [r2, #0]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f013 fcba 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	e7d8      	b.n	800c462 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800c4b0:	bf00      	nop
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3320      	adds	r3, #32
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f010 f947 	bl	801c758 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d001      	beq.n	800c4d4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e027      	b.n	800c524 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	3338      	adds	r3, #56	; 0x38
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f013 fd98 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d01d      	beq.n	800c522 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800c4e6:	68f9      	ldr	r1, [r7, #12]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f9b3 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00c      	beq.n	800c50e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800c4f4:	68f9      	ldr	r1, [r7, #12]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f9ac 	bl	800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff ffda 	bl	800c4b8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800c50a:	2301      	movs	r3, #1
 800c50c:	e000      	b.n	800c510 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800c50e:	2300      	movs	r3, #0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800c514:	2301      	movs	r3, #1
 800c516:	e005      	b.n	800c524 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f013 fc81 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	e7de      	b.n	800c4e0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff ff7d 	bl	800c434 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff fe44 	bl	800c1c8 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00a      	beq.n	800c55c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	3398      	adds	r3, #152	; 0x98
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	4798      	blx	r3
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800c558:	2301      	movs	r3, #1
 800c55a:	e000      	b.n	800c55e <_ZN11MockSupport17checkExpectationsEv+0x32>
 800c55c:	2300      	movs	r3, #0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d002      	beq.n	800c568 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fe7d 	bl	800c262 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ffa5 	bl	800c4b8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fed5 	bl	800c324 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b082      	sub	sp, #8
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	3338      	adds	r3, #56	; 0x38
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	4618      	mov	r0, r3
 800c594:	f013 fd0c 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bf14      	ite	ne
 800c59e:	2301      	movne	r3, #1
 800c5a0:	2300      	moveq	r3, #0
 800c5a2:	b2db      	uxtb	r3, r3
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800c5ac:	b590      	push	{r4, r7, lr}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3338      	adds	r3, #56	; 0x38
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f013 fcf7 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c5c2:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d111      	bne.n	800c5ee <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800c5ca:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c5ce:	490a      	ldr	r1, [pc, #40]	; (800c5f8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800c5d0:	2038      	movs	r0, #56	; 0x38
 800c5d2:	f7fe fc8b 	bl	800aeec <_ZnwjPKci>
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f011 fd6e 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 800c5e0:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	3338      	adds	r3, #56	; 0x38
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f013 fcab 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd90      	pop	{r4, r7, pc}
 800c5f8:	08025104 	.word	0x08025104

0800c5fc <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff ffcd 	bl	800c5ac <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800c612:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3344      	adds	r3, #68	; 0x44
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	6978      	ldr	r0, [r7, #20]
 800c622:	4798      	blx	r3
}
 800c624:	bf00      	nop
 800c626:	3718      	adds	r7, #24
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	3338      	adds	r3, #56	; 0x38
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	f013 fcb6 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800c644:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d111      	bne.n	800c670 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800c64c:	f107 0314 	add.w	r3, r7, #20
 800c650:	490b      	ldr	r1, [pc, #44]	; (800c680 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800c652:	4618      	mov	r0, r3
 800c654:	f001 f80d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800c658:	f107 0314 	add.w	r3, r7, #20
 800c65c:	4619      	mov	r1, r3
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f011 fd2c 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 800c664:	f107 0314 	add.w	r3, r7, #20
 800c668:	4618      	mov	r0, r3
 800c66a:	f001 fbba 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c66e:	e003      	b.n	800c678 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800c670:	69f9      	ldr	r1, [r7, #28]
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff f8a2 	bl	800b7bc <_ZN14MockNamedValueC1ERKS_>
}
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	3720      	adds	r7, #32
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	080250fc 	.word	0x080250fc

0800c684 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800c684:	b590      	push	{r4, r7, lr}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800c68e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c692:	4927      	ldr	r1, [pc, #156]	; (800c730 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800c694:	2048      	movs	r0, #72	; 0x48
 800c696:	f7fe fc29 	bl	800aeec <_ZnwjPKci>
 800c69a:	4604      	mov	r4, r0
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f7ff f8f8 	bl	800b894 <_ZN11MockSupportC1ERK12SimpleString>
 800c6a4:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	33a4      	adds	r3, #164	; 0xa4
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6952      	ldr	r2, [r2, #20]
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	3390      	adds	r3, #144	; 0x90
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c6d4:	f083 0301 	eor.w	r3, r3, #1
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3384      	adds	r3, #132	; 0x84
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7b1b      	ldrb	r3, [r3, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d005      	beq.n	800c6fe <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	4798      	blx	r3

    newMock->tracing(tracing_);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	338c      	adds	r3, #140	; 0x8c
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800c70c:	4611      	mov	r1, r2
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	33b8      	adds	r3, #184	; 0xb8
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	3230      	adds	r2, #48	; 0x30
 800c71e:	4611      	mov	r1, r2
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	4798      	blx	r3
    return newMock;
 800c724:	68fb      	ldr	r3, [r7, #12]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}
 800c72e:	bf00      	nop
 800c730:	08025104 	.word	0x08025104

0800c734 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800c734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c736:	b0ab      	sub	sp, #172	; 0xac
 800c738:	af04      	add	r7, sp, #16
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	4941      	ldr	r1, [pc, #260]	; (800c848 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800c744:	4618      	mov	r0, r3
 800c746:	f000 ff94 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	4618      	mov	r0, r3
 800c752:	f001 fbc3 	bl	800dedc <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800c756:	f107 0308 	add.w	r3, r7, #8
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff ff10 	bl	800c582 <_ZN11MockSupport7hasDataERK12SimpleString>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d048      	beq.n	800c7fa <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800c768:	f008 fb66 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800c76c:	4604      	mov	r4, r0
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	3324      	adds	r3, #36	; 0x24
 800c772:	681d      	ldr	r5, [r3, #0]
 800c774:	f107 0318 	add.w	r3, r7, #24
 800c778:	f107 0208 	add.w	r2, r7, #8
 800c77c:	6879      	ldr	r1, [r7, #4]
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff ff54 	bl	800c62c <_ZN11MockSupport7getDataERK12SimpleString>
 800c784:	f107 0310 	add.w	r3, r7, #16
 800c788:	f107 0218 	add.w	r2, r7, #24
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f011 ff61 	bl	801e656 <_ZNK14MockNamedValue7getTypeEv>
 800c794:	f107 0310 	add.w	r3, r7, #16
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 faf5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	f008 fb5a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	9302      	str	r3, [sp, #8]
 800c7a8:	f240 13bd 	movw	r3, #445	; 0x1bd
 800c7ac:	9301      	str	r3, [sp, #4]
 800c7ae:	4b27      	ldr	r3, [pc, #156]	; (800c84c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	4926      	ldr	r1, [pc, #152]	; (800c850 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	47a8      	blx	r5
 800c7bc:	f107 0310 	add.w	r3, r7, #16
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f001 fb0e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c7c6:	f107 0318 	add.w	r3, r7, #24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f011 fca0 	bl	801e110 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800c7d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7d4:	f107 0208 	add.w	r2, r7, #8
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff ff26 	bl	800c62c <_ZN11MockSupport7getDataERK12SimpleString>
 800c7e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f012 fa4f 	bl	801ec88 <_ZNK14MockNamedValue16getObjectPointerEv>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	bf00      	nop
 800c7ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f011 fc8c 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800c7f8:	e01b      	b.n	800c832 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff ff41 	bl	800c684 <_ZN11MockSupport5cloneERK12SimpleString>
 800c802:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800c806:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c80a:	4911      	ldr	r1, [pc, #68]	; (800c850 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800c80c:	4618      	mov	r0, r3
 800c80e:	f000 ff30 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800c812:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800c816:	f107 0108 	add.w	r1, r7, #8
 800c81a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff feec 	bl	800c5fc <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800c824:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 fada 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return newMock;
 800c82e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800c832:	f107 0308 	add.w	r3, r7, #8
 800c836:	4618      	mov	r0, r3
 800c838:	f001 fad3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c83c:	4623      	mov	r3, r4
}
 800c83e:	4618      	mov	r0, r3
 800c840:	379c      	adds	r7, #156	; 0x9c
 800c842:	46bd      	mov	sp, r7
 800c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c846:	bf00      	nop
 800c848:	0802511c 	.word	0x0802511c
 800c84c:	08025104 	.word	0x08025104
 800c850:	0802513c 	.word	0x0802513c

0800c854 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800c854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c858:	b08b      	sub	sp, #44	; 0x2c
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800c860:	2500      	movs	r5, #0
 800c862:	2600      	movs	r6, #0
 800c864:	f107 0308 	add.w	r3, r7, #8
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f013 fb26 	bl	801febc <_ZNK22MockNamedValueListNode7getTypeEv>
 800c870:	f04f 0801 	mov.w	r8, #1
 800c874:	f107 0310 	add.w	r3, r7, #16
 800c878:	492e      	ldr	r1, [pc, #184]	; (800c934 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fef9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	f107 0210 	add.w	r2, r7, #16
 800c888:	f107 0308 	add.w	r3, r7, #8
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 fab3 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d01a      	beq.n	800c8d0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c89a:	f107 0318 	add.w	r3, r7, #24
 800c89e:	6839      	ldr	r1, [r7, #0]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f013 faf8 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 800c8a6:	2501      	movs	r5, #1
 800c8a8:	f107 0320 	add.w	r3, r7, #32
 800c8ac:	4922      	ldr	r1, [pc, #136]	; (800c938 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 fedf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800c8b4:	2601      	movs	r6, #1
 800c8b6:	f107 0220 	add.w	r2, r7, #32
 800c8ba:	f107 0318 	add.w	r3, r7, #24
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 ff54 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d001      	beq.n	800c8d0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800c8cc:	2401      	movs	r4, #1
 800c8ce:	e000      	b.n	800c8d2 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800c8d0:	2400      	movs	r4, #0
 800c8d2:	2e00      	cmp	r6, #0
 800c8d4:	d004      	beq.n	800c8e0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800c8d6:	f107 0320 	add.w	r3, r7, #32
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f001 fa81 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	d004      	beq.n	800c8ee <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800c8e4:	f107 0318 	add.w	r3, r7, #24
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 fa7a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	d004      	beq.n	800c8fe <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800c8f4:	f107 0310 	add.w	r3, r7, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 fa72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c8fe:	f1b8 0f00 	cmp.w	r8, #0
 800c902:	d004      	beq.n	800c90e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800c904:	f107 0308 	add.w	r3, r7, #8
 800c908:	4618      	mov	r0, r3
 800c90a:	f001 fa6a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800c90e:	2c00      	cmp	r4, #0
 800c910:	d00a      	beq.n	800c928 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800c912:	6838      	ldr	r0, [r7, #0]
 800c914:	f013 fa90 	bl	801fe38 <_ZN22MockNamedValueListNode4itemEv>
 800c918:	4603      	mov	r3, r0
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	32a0      	adds	r2, #160	; 0xa0
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	4618      	mov	r0, r3
 800c922:	4790      	blx	r2
 800c924:	4603      	mov	r3, r0
 800c926:	e000      	b.n	800c92a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	372c      	adds	r7, #44	; 0x2c
 800c92e:	46bd      	mov	sp, r7
 800c930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c934:	0802513c 	.word	0x0802513c
 800c938:	0802511c 	.word	0x0802511c

0800c93c <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <_ZN11MockSupport11returnValueEv+0x28>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3354      	adds	r3, #84	; 0x54
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	4610      	mov	r0, r2
 800c960:	4798      	blx	r3
 800c962:	e010      	b.n	800c986 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4909      	ldr	r1, [pc, #36]	; (800c990 <_ZN11MockSupport11returnValueEv+0x54>)
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 fe81 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800c970:	f107 0308 	add.w	r3, r7, #8
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f011 fba0 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4618      	mov	r0, r3
 800c982:	f001 fa2e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	080250fc 	.word	0x080250fc

0800c994 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800c994:	b590      	push	{r4, r7, lr}
 800c996:	b091      	sub	sp, #68	; 0x44
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	3320      	adds	r3, #32
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f107 0208 	add.w	r2, r7, #8
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4798      	blx	r3
 800c9ae:	f107 0308 	add.w	r3, r7, #8
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f011 fe5e 	bl	801e674 <_ZNK14MockNamedValue12getBoolValueEv>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461c      	mov	r4, r3
 800c9bc:	bf00      	nop
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f011 fba4 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800c9c8:	4623      	mov	r3, r4
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3744      	adds	r7, #68	; 0x44
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd90      	pop	{r4, r7, pc}

0800c9d2 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800c9d2:	b590      	push	{r4, r7, lr}
 800c9d4:	b091      	sub	sp, #68	; 0x44
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3320      	adds	r3, #32
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f107 0208 	add.w	r2, r7, #8
 800c9e6:	6879      	ldr	r1, [r7, #4]
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4798      	blx	r3
 800c9ec:	f107 0308 	add.w	r3, r7, #8
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f011 fe67 	bl	801e6c4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	bf00      	nop
 800c9fa:	f107 0308 	add.w	r3, r7, #8
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f011 fb86 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800ca04:	4623      	mov	r3, r4
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3744      	adds	r7, #68	; 0x44
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd90      	pop	{r4, r7, pc}

0800ca0e <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800ca0e:	b590      	push	{r4, r7, lr}
 800ca10:	b091      	sub	sp, #68	; 0x44
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3320      	adds	r3, #32
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f107 0208 	add.w	r2, r7, #8
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	4610      	mov	r0, r2
 800ca26:	4798      	blx	r3
 800ca28:	f107 0308 	add.w	r3, r7, #8
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f011 fe99 	bl	801e764 <_ZNK14MockNamedValue11getIntValueEv>
 800ca32:	4604      	mov	r4, r0
 800ca34:	bf00      	nop
 800ca36:	f107 0308 	add.w	r3, r7, #8
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f011 fb68 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800ca40:	4623      	mov	r3, r4
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3744      	adds	r7, #68	; 0x44
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}

0800ca4a <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b082      	sub	sp, #8
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	331c      	adds	r3, #28
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	4798      	blx	r3
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	335c      	adds	r3, #92	; 0x5c
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	4798      	blx	r3
 800ca72:	4603      	mov	r3, r0
 800ca74:	e000      	b.n	800ca78 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800ca76:	683b      	ldr	r3, [r7, #0]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	331c      	adds	r3, #28
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	4798      	blx	r3
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3368      	adds	r3, #104	; 0x68
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	4798      	blx	r3
 800caaa:	eeb0 7a40 	vmov.f32	s14, s0
 800caae:	eef0 7a60 	vmov.f32	s15, s1
 800cab2:	e001      	b.n	800cab8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800cab4:	ed97 7b00 	vldr	d7, [r7]
}
 800cab8:	eeb0 0a47 	vmov.f32	s0, s14
 800cabc:	eef0 0a67 	vmov.f32	s1, s15
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	331c      	adds	r3, #28
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	4798      	blx	r3
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d007      	beq.n	800caf2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3338      	adds	r3, #56	; 0x38
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	4798      	blx	r3
 800caee:	4603      	mov	r3, r0
 800caf0:	e000      	b.n	800caf4 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800caf2:	683b      	ldr	r3, [r7, #0]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3708      	adds	r7, #8
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	331c      	adds	r3, #28
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	4798      	blx	r3
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3324      	adds	r3, #36	; 0x24
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
 800cb26:	4603      	mov	r3, r0
 800cb28:	e000      	b.n	800cb2c <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	331c      	adds	r3, #28
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	4798      	blx	r3
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	332c      	adds	r3, #44	; 0x2c
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	4798      	blx	r3
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	e000      	b.n	800cb62 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800cb60:	683b      	ldr	r3, [r7, #0]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	331c      	adds	r3, #28
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	4798      	blx	r3
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3334      	adds	r3, #52	; 0x34
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	4798      	blx	r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	e000      	b.n	800cb98 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800cb96:	683b      	ldr	r3, [r7, #0]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	331c      	adds	r3, #28
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d007      	beq.n	800cbcc <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3340      	adds	r3, #64	; 0x40
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
 800cbc8:	4603      	mov	r3, r0
 800cbca:	e000      	b.n	800cbce <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800cbcc:	683b      	ldr	r3, [r7, #0]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800cbd6:	b590      	push	{r4, r7, lr}
 800cbd8:	b091      	sub	sp, #68	; 0x44
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	3320      	adds	r3, #32
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f107 0208 	add.w	r2, r7, #8
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	f107 0308 	add.w	r3, r7, #8
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f011 fddd 	bl	801e7b4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	bf00      	nop
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	4618      	mov	r0, r3
 800cc04:	f011 fa84 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cc08:	4623      	mov	r3, r4
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3744      	adds	r7, #68	; 0x44
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd90      	pop	{r4, r7, pc}

0800cc12 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800cc12:	b590      	push	{r4, r7, lr}
 800cc14:	b091      	sub	sp, #68	; 0x44
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3320      	adds	r3, #32
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f107 0208 	add.w	r2, r7, #8
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	4610      	mov	r0, r2
 800cc2a:	4798      	blx	r3
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	4618      	mov	r0, r3
 800cc32:	f011 fe21 	bl	801e878 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800cc36:	4604      	mov	r4, r0
 800cc38:	bf00      	nop
 800cc3a:	f107 0308 	add.w	r3, r7, #8
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f011 fa66 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cc44:	4623      	mov	r3, r4
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3744      	adds	r7, #68	; 0x44
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd90      	pop	{r4, r7, pc}
	...

0800cc50 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800cc50:	b5b0      	push	{r4, r5, r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af02      	add	r7, sp, #8
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800cc5a:	f008 f8ed 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800cc5e:	4604      	mov	r4, r0
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	3368      	adds	r3, #104	; 0x68
 800cc64:	681d      	ldr	r5, [r3, #0]
 800cc66:	f008 f8f7 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	f240 2345 	movw	r3, #581	; 0x245
 800cc72:	4a06      	ldr	r2, [pc, #24]	; (800cc8c <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800cc74:	4906      	ldr	r1, [pc, #24]	; (800cc90 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800cc76:	4620      	mov	r0, r4
 800cc78:	47a8      	blx	r5
    return cpputest_longlong(0);
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7fe fd2f 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
}
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bdb0      	pop	{r4, r5, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	08025104 	.word	0x08025104
 800cc90:	08025148 	.word	0x08025148

0800cc94 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800cc94:	b5b0      	push	{r4, r5, r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800cc9e:	f008 f8cb 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800cca2:	4604      	mov	r4, r0
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	3368      	adds	r3, #104	; 0x68
 800cca8:	681d      	ldr	r5, [r3, #0]
 800ccaa:	f008 f8d5 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	f240 234b 	movw	r3, #587	; 0x24b
 800ccb6:	4a06      	ldr	r2, [pc, #24]	; (800ccd0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800ccb8:	4906      	ldr	r1, [pc, #24]	; (800ccd4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800ccba:	4620      	mov	r0, r4
 800ccbc:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7fe fd19 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
}
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bdb0      	pop	{r4, r5, r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	08025104 	.word	0x08025104
 800ccd4:	08025168 	.word	0x08025168

0800ccd8 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800ccd8:	b5b0      	push	{r4, r5, r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af02      	add	r7, sp, #8
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	4639      	mov	r1, r7
 800cce4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800cce8:	f008 f8a6 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800ccec:	4604      	mov	r4, r0
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	3368      	adds	r3, #104	; 0x68
 800ccf2:	681d      	ldr	r5, [r3, #0]
 800ccf4:	f008 f8b0 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	f240 2351 	movw	r3, #593	; 0x251
 800cd00:	4a06      	ldr	r2, [pc, #24]	; (800cd1c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800cd02:	4907      	ldr	r1, [pc, #28]	; (800cd20 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800cd04:	4620      	mov	r0, r4
 800cd06:	47a8      	blx	r5
    return defaultValue;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	463b      	mov	r3, r7
 800cd0e:	cb03      	ldmia	r3!, {r0, r1}
 800cd10:	6010      	str	r0, [r2, #0]
 800cd12:	6051      	str	r1, [r2, #4]
}
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd1c:	08025104 	.word	0x08025104
 800cd20:	08025148 	.word	0x08025148

0800cd24 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800cd24:	b5b0      	push	{r4, r5, r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af02      	add	r7, sp, #8
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	4639      	mov	r1, r7
 800cd30:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800cd34:	f008 f880 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 800cd38:	4604      	mov	r4, r0
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	3368      	adds	r3, #104	; 0x68
 800cd3e:	681d      	ldr	r5, [r3, #0]
 800cd40:	f008 f88a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800cd44:	4603      	mov	r3, r0
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	f240 2357 	movw	r3, #599	; 0x257
 800cd4c:	4a06      	ldr	r2, [pc, #24]	; (800cd68 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800cd4e:	4907      	ldr	r1, [pc, #28]	; (800cd6c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800cd50:	4620      	mov	r0, r4
 800cd52:	47a8      	blx	r5
    return defaultValue;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	461a      	mov	r2, r3
 800cd58:	463b      	mov	r3, r7
 800cd5a:	cb03      	ldmia	r3!, {r0, r1}
 800cd5c:	6010      	str	r0, [r2, #0]
 800cd5e:	6051      	str	r1, [r2, #4]
}
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bdb0      	pop	{r4, r5, r7, pc}
 800cd68:	08025104 	.word	0x08025104
 800cd6c:	08025168 	.word	0x08025168

0800cd70 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800cd70:	b590      	push	{r4, r7, lr}
 800cd72:	b091      	sub	sp, #68	; 0x44
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3320      	adds	r3, #32
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f107 0208 	add.w	r2, r7, #8
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	4610      	mov	r0, r2
 800cd88:	4798      	blx	r3
 800cd8a:	f107 0308 	add.w	r3, r7, #8
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f011 fea6 	bl	801eae0 <_ZNK14MockNamedValue14getStringValueEv>
 800cd94:	4604      	mov	r4, r0
 800cd96:	bf00      	nop
 800cd98:	f107 0308 	add.w	r3, r7, #8
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f011 f9b7 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cda2:	4623      	mov	r3, r4
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3744      	adds	r7, #68	; 0x44
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd90      	pop	{r4, r7, pc}

0800cdac <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	ed2d 8b02 	vpush	{d8}
 800cdb2:	b090      	sub	sp, #64	; 0x40
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3320      	adds	r3, #32
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f107 0208 	add.w	r2, r7, #8
 800cdc4:	6879      	ldr	r1, [r7, #4]
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	4798      	blx	r3
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f011 fe2a 	bl	801ea28 <_ZNK14MockNamedValue14getDoubleValueEv>
 800cdd4:	eeb0 8a40 	vmov.f32	s16, s0
 800cdd8:	eef0 8a60 	vmov.f32	s17, s1
 800cddc:	bf00      	nop
 800cdde:	f107 0308 	add.w	r3, r7, #8
 800cde2:	4618      	mov	r0, r3
 800cde4:	f011 f994 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cde8:	eeb0 7a48 	vmov.f32	s14, s16
 800cdec:	eef0 7a68 	vmov.f32	s15, s17
}
 800cdf0:	eeb0 0a47 	vmov.f32	s0, s14
 800cdf4:	eef0 0a67 	vmov.f32	s1, s15
 800cdf8:	3740      	adds	r7, #64	; 0x40
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	ecbd 8b02 	vpop	{d8}
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	331c      	adds	r3, #28
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	4798      	blx	r3
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d007      	beq.n	800ce2e <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	336c      	adds	r3, #108	; 0x6c
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	4798      	blx	r3
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	e000      	b.n	800ce30 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800ce2e:	683b      	ldr	r3, [r7, #0]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	331c      	adds	r3, #28
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	4798      	blx	r3
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d007      	beq.n	800ce64 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3378      	adds	r3, #120	; 0x78
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	4798      	blx	r3
 800ce60:	4603      	mov	r3, r0
 800ce62:	e000      	b.n	800ce66 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800ce64:	683b      	ldr	r3, [r7, #0]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b082      	sub	sp, #8
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	331c      	adds	r3, #28
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	4798      	blx	r3
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d007      	beq.n	800ce9a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	3380      	adds	r3, #128	; 0x80
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	4798      	blx	r3
 800ce96:	4603      	mov	r3, r0
 800ce98:	e000      	b.n	800ce9c <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800ce9a:	683b      	ldr	r3, [r7, #0]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800cea4:	b590      	push	{r4, r7, lr}
 800cea6:	b091      	sub	sp, #68	; 0x44
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3320      	adds	r3, #32
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f107 0208 	add.w	r2, r7, #8
 800ceb8:	6879      	ldr	r1, [r7, #4]
 800ceba:	4610      	mov	r0, r2
 800cebc:	4798      	blx	r3
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	4618      	mov	r0, r3
 800cec4:	f011 fe34 	bl	801eb30 <_ZNK14MockNamedValue15getPointerValueEv>
 800cec8:	4604      	mov	r4, r0
 800ceca:	bf00      	nop
 800cecc:	f107 0308 	add.w	r3, r7, #8
 800ced0:	4618      	mov	r0, r3
 800ced2:	f011 f91d 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800ced6:	4623      	mov	r3, r4
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3744      	adds	r7, #68	; 0x44
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd90      	pop	{r4, r7, pc}

0800cee0 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800cee0:	b590      	push	{r4, r7, lr}
 800cee2:	b091      	sub	sp, #68	; 0x44
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3320      	adds	r3, #32
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f107 0208 	add.w	r2, r7, #8
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	4610      	mov	r0, r2
 800cef8:	4798      	blx	r3
 800cefa:	f107 0308 	add.w	r3, r7, #8
 800cefe:	4618      	mov	r0, r3
 800cf00:	f011 fe3e 	bl	801eb80 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800cf04:	4604      	mov	r4, r0
 800cf06:	bf00      	nop
 800cf08:	f107 0308 	add.w	r3, r7, #8
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f011 f8ff 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cf12:	4623      	mov	r3, r4
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3744      	adds	r7, #68	; 0x44
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd90      	pop	{r4, r7, pc}

0800cf1c <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800cf1c:	b590      	push	{r4, r7, lr}
 800cf1e:	b091      	sub	sp, #68	; 0x44
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3320      	adds	r3, #32
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f107 0208 	add.w	r2, r7, #8
 800cf30:	6879      	ldr	r1, [r7, #4]
 800cf32:	4610      	mov	r0, r2
 800cf34:	4798      	blx	r3
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f011 fe48 	bl	801ebd0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800cf40:	4604      	mov	r4, r0
 800cf42:	bf00      	nop
 800cf44:	f107 0308 	add.w	r3, r7, #8
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f011 f8e1 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 800cf4e:	4623      	mov	r3, r4
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3744      	adds	r7, #68	; 0x44
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd90      	pop	{r4, r7, pc}

0800cf58 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00a      	beq.n	800cf7e <_ZN11MockSupport14hasReturnValueEv+0x26>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3350      	adds	r3, #80	; 0x50
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4610      	mov	r0, r2
 800cf78:	4798      	blx	r3
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	e000      	b.n	800cf80 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <_Z41__static_initialization_and_destruction_0ii>:
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d115      	bne.n	800cfc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d110      	bne.n	800cfc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	490f      	ldr	r1, [pc, #60]	; (800cfe4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fb62 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	480c      	ldr	r0, [pc, #48]	; (800cfe8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800cfb6:	f7fe fc6d 	bl	800b894 <_ZN11MockSupportC1ERK12SimpleString>
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 ff0f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d107      	bne.n	800cfda <_Z41__static_initialization_and_destruction_0ii+0x52>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d102      	bne.n	800cfda <_Z41__static_initialization_and_destruction_0ii+0x52>
 800cfd4:	4804      	ldr	r0, [pc, #16]	; (800cfe8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800cfd6:	f7fe fca7 	bl	800b928 <_ZN11MockSupportD1Ev>
}
 800cfda:	bf00      	nop
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	080250fc 	.word	0x080250fc
 800cfe8:	200008d8 	.word	0x200008d8

0800cfec <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	4a05      	ldr	r2, [pc, #20]	; (800d00c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fbbb 	bl	800b778 <_ZN11MockFailureD1Ev>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4618      	mov	r0, r3
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08029168 	.word	0x08029168

0800d010 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff ffe7 	bl	800cfec <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800d01e:	2134      	movs	r1, #52	; 0x34
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7fd ff77 	bl	800af14 <_ZdlPvj>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4618      	mov	r0, r3
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	4a05      	ldr	r2, [pc, #20]	; (800d050 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fb99 	bl	800b778 <_ZN11MockFailureD1Ev>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4618      	mov	r0, r3
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	0802913c 	.word	0x0802913c

0800d054 <_ZN20MockCallOrderFailureD0Ev>:
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7ff ffe7 	bl	800d030 <_ZN20MockCallOrderFailureD1Ev>
 800d062:	2134      	movs	r1, #52	; 0x34
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7fd ff55 	bl	800af14 <_ZdlPvj>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d074:	b580      	push	{r7, lr}
 800d076:	af00      	add	r7, sp, #0
 800d078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d07c:	2001      	movs	r0, #1
 800d07e:	f7ff ff83 	bl	800cf88 <_Z41__static_initialization_and_destruction_0ii>
 800d082:	bd80      	pop	{r7, pc}

0800d084 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d084:	b580      	push	{r7, lr}
 800d086:	af00      	add	r7, sp, #0
 800d088:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d08c:	2000      	movs	r0, #0
 800d08e:	f7ff ff7b 	bl	800cf88 <_Z41__static_initialization_and_destruction_0ii>
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <_ZN11SimpleMutexC1Ev+0x20>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4798      	blx	r3
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	601a      	str	r2, [r3, #0]
}
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200000f0 	.word	0x200000f0

0800d0b8 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <_ZN11SimpleMutexD1Ev+0x20>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	6812      	ldr	r2, [r2, #0]
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
}
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	200000fc 	.word	0x200000fc

0800d0dc <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <_ZN11SimpleMutex4LockEv+0x1c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6812      	ldr	r2, [r2, #0]
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	200000f4 	.word	0x200000f4

0800d0fc <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	6812      	ldr	r2, [r2, #0]
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	200000f8 	.word	0x200000f8

0800d11c <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff ffd3 	bl	800d0dc <_ZN11SimpleMutex4LockEv>
}
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	4618      	mov	r0, r3
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff ffd5 	bl	800d0fc <_ZN11SimpleMutex6UnlockEv>
}
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d103      	bne.n	800d170 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800d168:	f003 fd7a 	bl	8010c60 <_Z24defaultNewArrayAllocatorv>
 800d16c:	4603      	mov	r3, r0
 800d16e:	e001      	b.n	800d174 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800d170:	4b01      	ldr	r3, [pc, #4]	; (800d178 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800d172:	681b      	ldr	r3, [r3, #0]
}
 800d174:	4618      	mov	r0, r3
 800d176:	bd80      	pop	{r7, pc}
 800d178:	20000920 	.word	0x20000920

0800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800d188:	f7ff ffe8 	bl	800d15c <_ZN12SimpleString18getStringAllocatorEv>
 800d18c:	6803      	ldr	r3, [r0, #0]
 800d18e:	3308      	adds	r3, #8
 800d190:	681c      	ldr	r4, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68ba      	ldr	r2, [r7, #8]
 800d196:	68f9      	ldr	r1, [r7, #12]
 800d198:	47a0      	blx	r4
 800d19a:	4603      	mov	r3, r0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd90      	pop	{r4, r7, pc}

0800d1a4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af02      	add	r7, sp, #8
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800d1b2:	f7ff ffd3 	bl	800d15c <_ZN12SimpleString18getStringAllocatorEv>
 800d1b6:	6803      	ldr	r3, [r0, #0]
 800d1b8:	330c      	adds	r3, #12
 800d1ba:	681c      	ldr	r4, [r3, #0]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	68f9      	ldr	r1, [r7, #12]
 800d1c6:	47a0      	blx	r4
}
 800d1c8:	bf00      	nop
 800d1ca:	3714      	adds	r7, #20
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd90      	pop	{r4, r7, pc}

0800d1d0 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800d1d8:	2284      	movs	r2, #132	; 0x84
 800d1da:	4906      	ldr	r1, [pc, #24]	; (800d1f4 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800d1dc:	2001      	movs	r0, #1
 800d1de:	f7ff ffcd 	bl	800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d1e2:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
    return empty;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	08025194 	.word	0x08025194

0800d1f8 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	4618      	mov	r0, r3
 800d206:	f001 f809 	bl	800e21c <_ZN12SimpleString7isSpaceEc>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d003      	beq.n	800d218 <_ZN12SimpleString4AtoUEPKc+0x20>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	3301      	adds	r3, #1
 800d214:	607b      	str	r3, [r7, #4]
 800d216:	e7f3      	b.n	800d200 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	4618      	mov	r0, r3
 800d222:	f000 ffe7 	bl	800e1f4 <_ZN12SimpleString7isDigitEc>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <_ZN12SimpleString4AtoUEPKc+0x40>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b2f      	cmp	r3, #47	; 0x2f
 800d232:	d901      	bls.n	800d238 <_ZN12SimpleString4AtoUEPKc+0x40>
 800d234:	2301      	movs	r3, #1
 800d236:	e000      	b.n	800d23a <_ZN12SimpleString4AtoUEPKc+0x42>
 800d238:	2300      	movs	r3, #0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4413      	add	r3, r2
 800d254:	3b30      	subs	r3, #48	; 0x30
 800d256:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3301      	adds	r3, #1
 800d25c:	607b      	str	r3, [r7, #4]
 800d25e:	e7dd      	b.n	800d21c <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800d260:	68fb      	ldr	r3, [r7, #12]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b084      	sub	sp, #16
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 ffd0 	bl	800e21c <_ZN12SimpleString7isSpaceEc>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <_ZN12SimpleString4AtoIEPKc+0x20>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	3301      	adds	r3, #1
 800d286:	607b      	str	r3, [r7, #4]
 800d288:	e7f3      	b.n	800d272 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800d290:	7afb      	ldrb	r3, [r7, #11]
 800d292:	2b2d      	cmp	r3, #45	; 0x2d
 800d294:	d002      	beq.n	800d29c <_ZN12SimpleString4AtoIEPKc+0x32>
 800d296:	7afb      	ldrb	r3, [r7, #11]
 800d298:	2b2b      	cmp	r3, #43	; 0x2b
 800d29a:	d102      	bne.n	800d2a2 <_ZN12SimpleString4AtoIEPKc+0x38>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 ffa2 	bl	800e1f4 <_ZN12SimpleString7isDigitEc>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00f      	beq.n	800d2d6 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	005b      	lsls	r3, r3, #1
 800d2c0:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	3b30      	subs	r3, #48	; 0x30
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	e7e7      	b.n	800d2a6 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800d2d6:	7afb      	ldrb	r3, [r7, #11]
 800d2d8:	2b2d      	cmp	r3, #45	; 0x2d
 800d2da:	d102      	bne.n	800d2e2 <_ZN12SimpleString4AtoIEPKc+0x78>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	425b      	negs	r3, r3
 800d2e0:	e000      	b.n	800d2e4 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3710      	adds	r7, #16
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00c      	beq.n	800d318 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	781a      	ldrb	r2, [r3, #0]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d106      	bne.n	800d318 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	3301      	adds	r3, #1
 800d30e:	607b      	str	r3, [r7, #4]
       ++s2;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	3301      	adds	r3, #1
 800d314:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800d316:	e7ee      	b.n	800d2f6 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	461a      	mov	r2, r3
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	1ad3      	subs	r3, r2, r3
}
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800d338:	f04f 33ff 	mov.w	r3, #4294967295
 800d33c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	607a      	str	r2, [r7, #4]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bf14      	ite	ne
 800d350:	2301      	movne	r3, #1
 800d352:	2300      	moveq	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d000      	beq.n	800d35c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800d35a:	e7f0      	b.n	800d33e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800d35c:	68fb      	ldr	r3, [r7, #12]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800d36a:	b480      	push	{r7}
 800d36c:	b085      	sub	sp, #20
 800d36e:	af00      	add	r7, sp, #0
 800d370:	60f8      	str	r0, [r7, #12]
 800d372:	60b9      	str	r1, [r7, #8]
 800d374:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d013      	beq.n	800d3a4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00f      	beq.n	800d3a4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	781a      	ldrb	r2, [r3, #0]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d109      	bne.n	800d3a4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3b01      	subs	r3, #1
 800d394:	607b      	str	r3, [r7, #4]
        ++s1;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	3301      	adds	r3, #1
 800d39a:	60fb      	str	r3, [r7, #12]
        ++s2;
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800d3a2:	e7e8      	b.n	800d376 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d006      	beq.n	800d3b8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	e000      	b.n	800d3ba <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr

0800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800d3c6:	b480      	push	{r7}
 800d3c8:	b087      	sub	sp, #28
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	60f8      	str	r0, [r7, #12]
 800d3ce:	60b9      	str	r1, [r7, #8]
 800d3d0:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	e01e      	b.n	800d424 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	781a      	ldrb	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	607b      	str	r3, [r7, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d005      	beq.n	800d406 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800d402:	2301      	movs	r3, #1
 800d404:	e000      	b.n	800d408 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800d406:	2300      	movs	r3, #0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00a      	beq.n	800d422 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	3301      	adds	r3, #1
 800d410:	60bb      	str	r3, [r7, #8]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	3301      	adds	r3, #1
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	781a      	ldrb	r2, [r3, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800d420:	e7e5      	b.n	800d3ee <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800d422:	697b      	ldr	r3, [r7, #20]
}
 800d424:	4618      	mov	r0, r3
 800d426:	371c      	adds	r7, #28
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	e01b      	b.n	800d47e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d016      	beq.n	800d47c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800d44e:	6838      	ldr	r0, [r7, #0]
 800d450:	f7ff ff6e 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800d454:	4603      	mov	r3, r0
 800d456:	461a      	mov	r2, r3
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff ff85 	bl	800d36a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	bf0c      	ite	eq
 800d466:	2301      	moveq	r3, #1
 800d468:	2300      	movne	r3, #0
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	e004      	b.n	800d47e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	3301      	adds	r3, #1
 800d478:	607b      	str	r3, [r7, #4]
 800d47a:	e7e4      	b.n	800d446 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	4603      	mov	r3, r0
 800d48e:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fed9 	bl	800e24a <_ZN12SimpleString7isUpperEc>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d003      	beq.n	800d4a6 <_ZN12SimpleString7ToLowerEc+0x20>
 800d49e:	79fb      	ldrb	r3, [r7, #7]
 800d4a0:	3320      	adds	r3, #32
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	e000      	b.n	800d4a8 <_ZN12SimpleString7ToLowerEc+0x22>
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b087      	sub	sp, #28
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	613b      	str	r3, [r7, #16]

    while (n--)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	1e5a      	subs	r2, r3, #1
 800d4c8:	607a      	str	r2, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	bf14      	ite	ne
 800d4ce:	2301      	movne	r3, #1
 800d4d0:	2300      	moveq	r3, #0
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d013      	beq.n	800d500 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	781a      	ldrb	r2, [r3, #0]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d006      	beq.n	800d4f2 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	e007      	b.n	800d502 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	617b      	str	r3, [r7, #20]
            ++p2;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	613b      	str	r3, [r7, #16]
    while (n--)
 800d4fe:	e7e1      	b.n	800d4c4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800d500:	2300      	movs	r3, #0
}
 800d502:	4618      	mov	r0, r3
 800d504:	371c      	adds	r7, #28
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
	...

0800d510 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00d      	beq.n	800d53c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6818      	ldr	r0, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6859      	ldr	r1, [r3, #4]
 800d528:	23ee      	movs	r3, #238	; 0xee
 800d52a:	4a06      	ldr	r2, [pc, #24]	; (800d544 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800d52c:	f7ff fe3a 	bl	800d1a4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	605a      	str	r2, [r3, #4]
    }
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	08025194 	.word	0x08025194

0800d548 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff ffdd 	bl	800d510 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7ff fe37 	bl	800d1d0 <_ZNK12SimpleString14getEmptyStringEv>
 800d562:	4602      	mov	r2, r0
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	601a      	str	r2, [r3, #0]
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff ffc7 	bl	800d510 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	4619      	mov	r1, r3
 800d58e:	68b8      	ldr	r0, [r7, #8]
 800d590:	f000 fe12 	bl	800e1b8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800d594:	4602      	mov	r2, r0
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	601a      	str	r2, [r3, #0]
}
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
	...

0800d5a4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ffae 	bl	800d510 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	f240 1209 	movw	r2, #265	; 0x109
 800d5c2:	4907      	ldr	r1, [pc, #28]	; (800d5e0 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fdd9 	bl	800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	701a      	strb	r2, [r3, #0]
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08025194 	.word	0x08025194

0800d5e4 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7ff ff8d 	bl	800d510 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	601a      	str	r2, [r3, #0]
}
 800d602:	bf00      	nop
 800d604:	3710      	adds	r7, #16
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800d60a:	b590      	push	{r4, r7, lr}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
 800d612:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681c      	ldr	r4, [r3, #0]
 800d618:	6838      	ldr	r0, [r7, #0]
 800d61a:	f000 fbc1 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800d61e:	4603      	mov	r3, r0
 800d620:	3301      	adds	r3, #1
 800d622:	461a      	mov	r2, r3
 800d624:	4621      	mov	r1, r4
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff ffa2 	bl	800d570 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	bd90      	pop	{r4, r7, pc}

0800d634 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800d63e:	6838      	ldr	r0, [r7, #0]
 800d640:	f7ff fe76 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800d644:	4603      	mov	r3, r0
 800d646:	3301      	adds	r3, #1
 800d648:	461a      	mov	r2, r3
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ff8f 	bl	800d570 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800d652:	bf00      	nop
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800d65a:	b480      	push	{r7}
 800d65c:	b083      	sub	sp, #12
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
    return buffer_;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
}
 800d666:	4618      	mov	r0, r3
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d103      	bne.n	800d696 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff ff5a 	bl	800d548 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800d694:	e003      	b.n	800d69e <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800d696:	6839      	ldr	r1, [r7, #0]
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff ffcb 	bl	800d634 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800d6c0:	68b8      	ldr	r0, [r7, #8]
 800d6c2:	f7ff fe35 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800d6c6:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	fb02 f303 	mul.w	r3, r2, r3
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f7ff ff65 	bl	800d5a4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	61bb      	str	r3, [r7, #24]
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d20e      	bcs.n	800d70a <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	69f8      	ldr	r0, [r7, #28]
 800d6f6:	f7ff fe66 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	4413      	add	r3, r2
 800d700:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	3301      	adds	r3, #1
 800d706:	61bb      	str	r3, [r7, #24]
 800d708:	e7ec      	b.n	800d6e4 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2200      	movs	r2, #0
 800d70e:	701a      	strb	r2, [r3, #0]
}
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b082      	sub	sp, #8
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800d730:	6838      	ldr	r0, [r7, #0]
 800d732:	f7ff ff92 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d736:	4603      	mov	r3, r0
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7ff ff7a 	bl	800d634 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d003      	beq.n	800d764 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff ff53 	bl	800d60a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800d764:	687b      	ldr	r3, [r7, #4]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800d76e:	b590      	push	{r4, r7, lr}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff ff6e 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d77e:	4604      	mov	r4, r0
 800d780:	6838      	ldr	r0, [r7, #0]
 800d782:	f7ff ff6a 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d786:	4603      	mov	r3, r0
 800d788:	4619      	mov	r1, r3
 800d78a:	4620      	mov	r0, r4
 800d78c:	f7ff fe50 	bl	800d430 <_ZN12SimpleString6StrStrEPKcS1_>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	bf14      	ite	ne
 800d796:	2301      	movne	r3, #1
 800d798:	2300      	moveq	r3, #0
 800d79a:	b2db      	uxtb	r3, r3
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd90      	pop	{r4, r7, pc}

0800d7a4 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800d7ae:	f107 0308 	add.w	r3, r7, #8
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 fabb 	bl	800dd30 <_ZNK12SimpleString9lowerCaseEv>
 800d7ba:	f107 0310 	add.w	r3, r7, #16
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 fab5 	bl	800dd30 <_ZNK12SimpleString9lowerCaseEv>
 800d7c6:	f107 0210 	add.w	r2, r7, #16
 800d7ca:	f107 0308 	add.w	r3, r7, #8
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff ffcc 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	461c      	mov	r4, r3
 800d7da:	bf00      	nop
 800d7dc:	f107 0310 	add.w	r3, r7, #16
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 fafe 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800d7e6:	f107 0308 	add.w	r3, r7, #8
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 faf9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800d7f0:	4623      	mov	r3, r4
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	371c      	adds	r7, #28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd90      	pop	{r4, r7, pc}

0800d7fa <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800d7fa:	b590      	push	{r4, r7, lr}
 800d7fc:	b083      	sub	sp, #12
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800d804:	6838      	ldr	r0, [r7, #0]
 800d806:	f000 facb 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	bf0c      	ite	eq
 800d810:	2301      	moveq	r3, #1
 800d812:	2300      	movne	r3, #0
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <_ZNK12SimpleString10startsWithERKS_+0x24>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e022      	b.n	800d864 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fabe 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	bf0c      	ite	eq
 800d82a:	2301      	moveq	r3, #1
 800d82c:	2300      	movne	r3, #0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	d001      	beq.n	800d838 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800d834:	2300      	movs	r3, #0
 800d836:	e015      	b.n	800d864 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff ff0e 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d83e:	4604      	mov	r4, r0
 800d840:	6838      	ldr	r0, [r7, #0]
 800d842:	f7ff ff0a 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d846:	4603      	mov	r3, r0
 800d848:	4619      	mov	r1, r3
 800d84a:	4620      	mov	r0, r4
 800d84c:	f7ff fdf0 	bl	800d430 <_ZN12SimpleString6StrStrEPKcS1_>
 800d850:	4604      	mov	r4, r0
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff ff01 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d858:	4603      	mov	r3, r0
 800d85a:	429c      	cmp	r4, r3
 800d85c:	bf0c      	ite	eq
 800d85e:	2301      	moveq	r3, #1
 800d860:	2300      	movne	r3, #0
 800d862:	b2db      	uxtb	r3, r3
}
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800d86c:	b590      	push	{r4, r7, lr}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 fa92 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800d87c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800d87e:	6838      	ldr	r0, [r7, #0]
 800d880:	f000 fa8e 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800d884:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800d88c:	2301      	movs	r3, #1
 800d88e:	e020      	b.n	800d8d2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d101      	bne.n	800d89a <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800d896:	2300      	movs	r3, #0
 800d898:	e01b      	b.n	800d8d2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d201      	bcs.n	800d8a6 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e015      	b.n	800d8d2 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f7ff fed7 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	18cc      	adds	r4, r1, r3
 800d8b6:	6838      	ldr	r0, [r7, #0]
 800d8b8:	f7ff fecf 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff fd13 	bl	800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	bf0c      	ite	eq
 800d8cc:	2301      	moveq	r3, #1
 800d8ce:	2300      	movne	r3, #0
 800d8d0:	b2db      	uxtb	r3, r3
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3714      	adds	r7, #20
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd90      	pop	{r4, r7, pc}

0800d8da <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b086      	sub	sp, #24
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff feb6 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d8ee:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]
    if (*str){
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d008      	beq.n	800d90e <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800d8fc:	6838      	ldr	r0, [r7, #0]
 800d8fe:	f7ff feac 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d902:	4603      	mov	r3, r0
 800d904:	4619      	mov	r1, r3
 800d906:	6938      	ldr	r0, [r7, #16]
 800d908:	f7ff fd92 	bl	800d430 <_ZN12SimpleString6StrStrEPKcS1_>
 800d90c:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d014      	beq.n	800d940 <_ZNK12SimpleString5countERKS_+0x66>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d011      	beq.n	800d940 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	613b      	str	r3, [r7, #16]
        str++;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3301      	adds	r3, #1
 800d924:	613b      	str	r3, [r7, #16]
        num++;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	3301      	adds	r3, #1
 800d92a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800d92c:	6838      	ldr	r0, [r7, #0]
 800d92e:	f7ff fe94 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d932:	4603      	mov	r3, r0
 800d934:	4619      	mov	r1, r3
 800d936:	6938      	ldr	r0, [r7, #16]
 800d938:	f7ff fd7a 	bl	800d430 <_ZN12SimpleString6StrStrEPKcS1_>
 800d93c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800d93e:	e7e6      	b.n	800d90e <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800d940:	697b      	ldr	r3, [r7, #20]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3718      	adds	r7, #24
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}

0800d94a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800d94a:	b590      	push	{r4, r7, lr}
 800d94c:	b091      	sub	sp, #68	; 0x44
 800d94e:	af00      	add	r7, sp, #0
 800d950:	60f8      	str	r0, [r7, #12]
 800d952:	60b9      	str	r1, [r7, #8]
 800d954:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7ff ffbe 	bl	800d8da <_ZNK12SimpleString5countERKS_>
 800d95e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800d960:	68b9      	ldr	r1, [r7, #8]
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7ff ff82 	bl	800d86c <_ZNK12SimpleString8endsWithERKS_>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800d96e:	2300      	movs	r3, #0
 800d970:	e000      	b.n	800d974 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800d972:	2301      	movs	r3, #1
 800d974:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800d976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97a:	4413      	add	r3, r2
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f001 f95c 	bl	800ec3c <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800d984:	68f8      	ldr	r0, [r7, #12]
 800d986:	f7ff fe68 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d98a:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800d98c:	2300      	movs	r3, #0
 800d98e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d994:	429a      	cmp	r2, r3
 800d996:	d235      	bcs.n	800da04 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800d99c:	68b8      	ldr	r0, [r7, #8]
 800d99e:	f7ff fe5c 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d9a8:	f7ff fd42 	bl	800d430 <_ZN12SimpleString6StrStrEPKcS1_>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800d9b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f001 f9db 	bl	800ed70 <_ZN22SimpleStringCollectionixEj>
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f107 031c 	add.w	r3, r7, #28
 800d9c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fe55 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800d9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	f107 0014 	add.w	r0, r7, #20
 800d9d2:	f107 011c 	add.w	r1, r7, #28
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f000 fb0c 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 800d9dc:	f107 0314 	add.w	r3, r7, #20
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f7ff feb1 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800d9e8:	f107 0314 	add.w	r3, r7, #20
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f000 f9f8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800d9f2:	f107 031c 	add.w	r3, r7, #28
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 f9f3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	3301      	adds	r3, #1
 800da00:	63bb      	str	r3, [r7, #56]	; 0x38
 800da02:	e7c5      	b.n	800d990 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800da04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da06:	2b00      	cmp	r3, #0
 800da08:	d015      	beq.n	800da36 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800da0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f001 f9af 	bl	800ed70 <_ZN22SimpleStringCollectionixEj>
 800da12:	4604      	mov	r4, r0
 800da14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7ff fe29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800da20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da24:	4619      	mov	r1, r3
 800da26:	4620      	mov	r0, r4
 800da28:	f7ff fe8f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800da2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da30:	4618      	mov	r0, r3
 800da32:	f000 f9d6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
}
 800da36:	bf00      	nop
 800da38:	3744      	adds	r7, #68	; 0x44
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd90      	pop	{r4, r7, pc}

0800da3e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	460b      	mov	r3, r1
 800da48:	70fb      	strb	r3, [r7, #3]
 800da4a:	4613      	mov	r3, r2
 800da4c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 f9a6 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800da54:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800da56:	2300      	movs	r3, #0
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d218      	bcs.n	800da94 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff fdf9 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800da68:	4602      	mov	r2, r0
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	4413      	add	r3, r2
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	78fa      	ldrb	r2, [r7, #3]
 800da72:	429a      	cmp	r2, r3
 800da74:	bf0c      	ite	eq
 800da76:	2301      	moveq	r3, #1
 800da78:	2300      	movne	r3, #0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <_ZN12SimpleString7replaceEcc+0x4e>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4413      	add	r3, r2
 800da88:	78ba      	ldrb	r2, [r7, #2]
 800da8a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3301      	adds	r3, #1
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e7e2      	b.n	800da5a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800da94:	bf00      	nop
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b08e      	sub	sp, #56	; 0x38
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800daa8:	f107 0310 	add.w	r3, r7, #16
 800daac:	68b9      	ldr	r1, [r7, #8]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff fddf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800dab4:	f107 0310 	add.w	r3, r7, #16
 800dab8:	4619      	mov	r1, r3
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff ff0d 	bl	800d8da <_ZNK12SimpleString5countERKS_>
 800dac0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dac2:	f107 0310 	add.w	r3, r7, #16
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 f98b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d071      	beq.n	800dbb6 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f000 f964 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dad8:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800dada:	68b8      	ldr	r0, [r7, #8]
 800dadc:	f7ff fc28 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800dae0:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fc24 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800dae8:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daee:	fb02 f203 	mul.w	r2, r2, r3
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	441a      	add	r2, r3
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dafa:	fb01 f303 	mul.w	r3, r1, r3
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	3301      	adds	r3, #1
 800db02:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d951      	bls.n	800dbae <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800db0a:	f240 129d 	movw	r2, #413	; 0x19d
 800db0e:	492c      	ldr	r1, [pc, #176]	; (800dbc0 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800db10:	69f8      	ldr	r0, [r7, #28]
 800db12:	f7ff fb33 	bl	800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800db16:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800db18:	2300      	movs	r3, #0
 800db1a:	637b      	str	r3, [r7, #52]	; 0x34
 800db1c:	2300      	movs	r3, #0
 800db1e:	633b      	str	r3, [r7, #48]	; 0x30
 800db20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	429a      	cmp	r2, r3
 800db26:	d236      	bcs.n	800db96 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f7ff fd96 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800db2e:	4602      	mov	r2, r0
 800db30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db32:	4413      	add	r3, r2
 800db34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db36:	68b9      	ldr	r1, [r7, #8]
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff fc16 	bl	800d36a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	bf0c      	ite	eq
 800db44:	2301      	moveq	r3, #1
 800db46:	2300      	movne	r3, #0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d011      	beq.n	800db72 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800db4e:	69ba      	ldr	r2, [r7, #24]
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	18d0      	adds	r0, r2, r3
 800db54:	6a3b      	ldr	r3, [r7, #32]
 800db56:	3301      	adds	r3, #1
 800db58:	461a      	mov	r2, r3
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	f7ff fc33 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800db60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	4413      	add	r3, r2
 800db66:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800db68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	4413      	add	r3, r2
 800db6e:	637b      	str	r3, [r7, #52]	; 0x34
 800db70:	e7d6      	b.n	800db20 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f7ff fd71 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800db78:	4602      	mov	r2, r0
 800db7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7c:	441a      	add	r2, r3
 800db7e:	69b9      	ldr	r1, [r7, #24]
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	440b      	add	r3, r1
 800db84:	7812      	ldrb	r2, [r2, #0]
 800db86:	701a      	strb	r2, [r3, #0]
                j++;
 800db88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8a:	3301      	adds	r3, #1
 800db8c:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800db8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db90:	3301      	adds	r3, #1
 800db92:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800db94:	e7c4      	b.n	800db20 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	3b01      	subs	r3, #1
 800db9a:	69ba      	ldr	r2, [r7, #24]
 800db9c:	4413      	add	r3, r2
 800db9e:	2200      	movs	r2, #0
 800dba0:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800dba2:	69fa      	ldr	r2, [r7, #28]
 800dba4:	69b9      	ldr	r1, [r7, #24]
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7ff fd1c 	bl	800d5e4 <_ZN12SimpleString19setInternalBufferToEPcj>
 800dbac:	e004      	b.n	800dbb8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f7ff fcca 	bl	800d548 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800dbb4:	e000      	b.n	800dbb8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800dbb6:	bf00      	nop
}
 800dbb8:	3738      	adds	r7, #56	; 0x38
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08025194 	.word	0x08025194

0800dbc4 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b089      	sub	sp, #36	; 0x24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800dbce:	493b      	ldr	r1, [pc, #236]	; (800dcbc <_ZNK12SimpleString9printableEv+0xf8>)
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7ff fd4e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800dbd6:	6838      	ldr	r0, [r7, #0]
 800dbd8:	f000 f876 	bl	800dcc8 <_ZNK12SimpleString16getPrintableSizeEv>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	3301      	adds	r3, #1
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fcde 	bl	800d5a4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800dbe8:	6838      	ldr	r0, [r7, #0]
 800dbea:	f000 f8d9 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dbee:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61bb      	str	r3, [r7, #24]
 800dbf8:	69ba      	ldr	r2, [r7, #24]
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d252      	bcs.n	800dca6 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	4413      	add	r3, r2
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800dc0c:	7cfb      	ldrb	r3, [r7, #19]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 fb43 	bl	800e29a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d012      	beq.n	800dc40 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	18d0      	adds	r0, r2, r3
 800dc22:	7cfb      	ldrb	r3, [r7, #19]
 800dc24:	3b07      	subs	r3, #7
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4b25      	ldr	r3, [pc, #148]	; (800dcc0 <_ZNK12SimpleString9printableEv+0xfc>)
 800dc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc30:	2202      	movs	r2, #2
 800dc32:	4619      	mov	r1, r3
 800dc34:	f7ff fbc7 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	3302      	adds	r3, #2
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	e02e      	b.n	800dc9e <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800dc40:	7cfb      	ldrb	r3, [r7, #19]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 fb15 	bl	800e272 <_ZN12SimpleString9isControlEc>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d01e      	beq.n	800dc8c <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800dc4e:	7cfa      	ldrb	r2, [r7, #19]
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	491b      	ldr	r1, [pc, #108]	; (800dcc4 <_ZNK12SimpleString9printableEv+0x100>)
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fdca 	bl	800e7f0 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	18d4      	adds	r4, r2, r3
 800dc64:	f107 0308 	add.w	r3, r7, #8
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 f88d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2204      	movs	r2, #4
 800dc72:	4619      	mov	r1, r3
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7ff fba6 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	3304      	adds	r3, #4
 800dc7e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800dc80:	f107 0308 	add.w	r3, r7, #8
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 f8ac 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800dc8a:	e008      	b.n	800dc9e <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	4413      	add	r3, r2
 800dc94:	7cfa      	ldrb	r2, [r7, #19]
 800dc96:	701a      	strb	r2, [r3, #0]
            j++;
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	3301      	adds	r3, #1
 800dca2:	61bb      	str	r3, [r7, #24]
 800dca4:	e7a8      	b.n	800dbf8 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	4413      	add	r3, r2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]

    return result;
 800dcb2:	bf00      	nop
}
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	3724      	adds	r7, #36	; 0x24
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd90      	pop	{r4, r7, pc}
 800dcbc:	08025254 	.word	0x08025254
 800dcc0:	2000006c 	.word	0x2000006c
 800dcc4:	08025258 	.word	0x08025258

0800dcc8 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 f865 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dcd6:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	613b      	str	r3, [r7, #16]
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d21e      	bcs.n	800dd26 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	4413      	add	r3, r2
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800dcf4:	7afb      	ldrb	r3, [r7, #11]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 facf 	bl	800e29a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	3301      	adds	r3, #1
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	e009      	b.n	800dd1e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f000 fab0 	bl	800e272 <_ZN12SimpleString9isControlEc>
 800dd12:	4603      	mov	r3, r0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	3303      	adds	r3, #3
 800dd1c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	3301      	adds	r3, #1
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	e7dc      	b.n	800dce0 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800dd26:	697b      	ldr	r3, [r7, #20]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800dd30:	b590      	push	{r4, r7, lr}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f7ff fcec 	bl	800d71a <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f82c 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dd48:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d213      	bcs.n	800dd7e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff fc7f 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4413      	add	r3, r2
 800dd62:	7819      	ldrb	r1, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	18d4      	adds	r4, r2, r3
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	f7ff fb8a 	bl	800d486 <_ZN12SimpleString7ToLowerEc>
 800dd72:	4603      	mov	r3, r0
 800dd74:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e7e7      	b.n	800dd4e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800dd7e:	bf00      	nop
}
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd90      	pop	{r4, r7, pc}

0800dd88 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fc62 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800dd96:	4603      	mov	r3, r0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f7ff fc56 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff fabd 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800ddb6:	4603      	mov	r3, r0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7ff ffe9 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	bf0c      	ite	eq
 800ddd4:	2301      	moveq	r3, #1
 800ddd6:	2300      	movne	r3, #0
 800ddd8:	b2db      	uxtb	r3, r3
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff fb90 	bl	800d510 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800ddfa:	b590      	push	{r4, r7, lr}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ffbf 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800de0a:	4604      	mov	r4, r0
 800de0c:	6838      	ldr	r0, [r7, #0]
 800de0e:	f7ff ffbb 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800de12:	4603      	mov	r3, r0
 800de14:	4619      	mov	r1, r3
 800de16:	4620      	mov	r0, r4
 800de18:	f7ff fa68 	bl	800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	bf0c      	ite	eq
 800de22:	2301      	moveq	r3, #1
 800de24:	2300      	movne	r3, #0
 800de26:	b2db      	uxtb	r3, r3
}
 800de28:	4618      	mov	r0, r3
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}

0800de30 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800de30:	b590      	push	{r4, r7, lr}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800de3a:	f107 0308 	add.w	r3, r7, #8
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff ff75 	bl	800dd30 <_ZNK12SimpleString9lowerCaseEv>
 800de46:	f107 0310 	add.w	r3, r7, #16
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7ff ff6f 	bl	800dd30 <_ZNK12SimpleString9lowerCaseEv>
 800de52:	f107 0210 	add.w	r2, r7, #16
 800de56:	f107 0308 	add.w	r3, r7, #8
 800de5a:	4611      	mov	r1, r2
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7ff ffcc 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 800de62:	4603      	mov	r3, r0
 800de64:	461c      	mov	r4, r3
 800de66:	f107 0310 	add.w	r3, r7, #16
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff ffb9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800de70:	f107 0308 	add.w	r3, r7, #8
 800de74:	4618      	mov	r0, r3
 800de76:	f7ff ffb4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800de7a:	4623      	mov	r3, r4
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	371c      	adds	r7, #28
 800de80:	46bd      	mov	sp, r7
 800de82:	bd90      	pop	{r4, r7, pc}

0800de84 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ffb2 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 800de96:	4603      	mov	r3, r0
 800de98:	f083 0301 	eor.w	r3, r3, #1
 800de9c:	b2db      	uxtb	r3, r3
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b084      	sub	sp, #16
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800deb2:	68b8      	ldr	r0, [r7, #8]
 800deb4:	f7ff fbd1 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800deb8:	4603      	mov	r3, r0
 800deba:	4619      	mov	r1, r3
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f7ff fbd8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff fbc9 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800dec8:	4603      	mov	r3, r0
 800deca:	4619      	mov	r1, r3
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f000 f817 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    return t;
 800ded2:	bf00      	nop
}
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800dee6:	6838      	ldr	r0, [r7, #0]
 800dee8:	f7ff fbb7 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800deec:	4603      	mov	r3, r0
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f805 	bl	800df00 <_ZN12SimpleStringpLEPKc>
 800def6:	4603      	mov	r3, r0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff ff48 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800df10:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800df12:	6838      	ldr	r0, [r7, #0]
 800df14:	f7ff fa0c 	bl	800d330 <_ZN12SimpleString6StrLenEPKc>
 800df18:	4603      	mov	r3, r0
 800df1a:	3301      	adds	r3, #1
 800df1c:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800df1e:	697a      	ldr	r2, [r7, #20]
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	4413      	add	r3, r2
 800df24:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fb97 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800df2c:	4603      	mov	r3, r0
 800df2e:	68f9      	ldr	r1, [r7, #12]
 800df30:	4618      	mov	r0, r3
 800df32:	f000 f941 	bl	800e1b8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800df36:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	4413      	add	r3, r2
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff fa3f 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	68b9      	ldr	r1, [r7, #8]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7ff fb49 	bl	800d5e4 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800df52:	687b      	ldr	r3, [r7, #4]
}
 800df54:	4618      	mov	r0, r3
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b08b      	sub	sp, #44	; 0x2c
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff ff18 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800df70:	4604      	mov	r4, r0
 800df72:	68b8      	ldr	r0, [r7, #8]
 800df74:	f7ff ff14 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800df78:	4603      	mov	r3, r0
 800df7a:	429c      	cmp	r4, r3
 800df7c:	bf8c      	ite	hi
 800df7e:	2301      	movhi	r3, #1
 800df80:	2300      	movls	r3, #0
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b00      	cmp	r3, #0
 800df86:	d006      	beq.n	800df96 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	461a      	mov	r2, r3
 800df8c:	68f9      	ldr	r1, [r7, #12]
 800df8e:	68b8      	ldr	r0, [r7, #8]
 800df90:	f7ff ffe4 	bl	800df5c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800df94:	e02b      	b.n	800dfee <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800df96:	79fb      	ldrb	r3, [r7, #7]
 800df98:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800df9e:	68b8      	ldr	r0, [r7, #8]
 800dfa0:	f7ff fefe 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	68f8      	ldr	r0, [r7, #12]
 800dfa8:	f7ff fefa 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800dfac:	4603      	mov	r3, r0
 800dfae:	1ae2      	subs	r2, r4, r3
 800dfb0:	f107 0114 	add.w	r1, r7, #20
 800dfb4:	f107 0320 	add.w	r3, r7, #32
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fb75 	bl	800d6a8 <_ZN12SimpleStringC1EPKcj>
 800dfbe:	f107 0318 	add.w	r3, r7, #24
 800dfc2:	f107 0120 	add.w	r1, r7, #32
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff ff6c 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800dfce:	f107 0318 	add.w	r3, r7, #24
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fbb8 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800dfda:	f107 0318 	add.w	r3, r7, #24
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff feff 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800dfe4:	f107 0320 	add.w	r3, r7, #32
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fefa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800dfee:	372c      	adds	r7, #44	; 0x2c
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd90      	pop	{r4, r7, pc}

0800dff4 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800e002:	68b8      	ldr	r0, [r7, #8]
 800e004:	f7ff fecc 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800e008:	4603      	mov	r3, r0
 800e00a:	3b01      	subs	r3, #1
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	429a      	cmp	r2, r3
 800e010:	bf8c      	ite	hi
 800e012:	2301      	movhi	r3, #1
 800e014:	2300      	movls	r3, #0
 800e016:	b2db      	uxtb	r3, r3
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d004      	beq.n	800e026 <_ZNK12SimpleString9subStringEjj+0x32>
 800e01c:	4919      	ldr	r1, [pc, #100]	; (800e084 <_ZNK12SimpleString9subStringEjj+0x90>)
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f7ff fb27 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e024:	e029      	b.n	800e07a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800e026:	68b8      	ldr	r0, [r7, #8]
 800e028:	f7ff fb17 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800e02c:	4602      	mov	r2, r0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	441a      	add	r2, r3
 800e032:	f107 0310 	add.w	r3, r7, #16
 800e036:	4611      	mov	r1, r2
 800e038:	4618      	mov	r0, r3
 800e03a:	f7ff fb1a 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800e03e:	f107 0310 	add.w	r3, r7, #16
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff feac 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800e048:	4602      	mov	r2, r0
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	bf34      	ite	cc
 800e050:	2301      	movcc	r3, #1
 800e052:	2300      	movcs	r3, #0
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b00      	cmp	r3, #0
 800e058:	d004      	beq.n	800e064 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	4413      	add	r3, r2
 800e060:	2200      	movs	r2, #0
 800e062:	701a      	strb	r2, [r3, #0]

    return newString;
 800e064:	f107 0310 	add.w	r3, r7, #16
 800e068:	4619      	mov	r1, r3
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f7ff fb55 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800e070:	f107 0310 	add.w	r3, r7, #16
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff feb4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	08025254 	.word	0x08025254

0800e088 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	68b9      	ldr	r1, [r7, #8]
 800e09e:	f7ff ffa9 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
}
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b082      	sub	sp, #8
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
 800e0b2:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fad0 	bl	800d65a <_ZNK12SimpleString9getBufferEv>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	4413      	add	r3, r2
 800e0c0:	781b      	ldrb	r3, [r3, #0]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}

0800e0ca <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b082      	sub	sp, #8
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
 800e0d2:	460b      	mov	r3, r1
 800e0d4:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800e0d6:	78fb      	ldrb	r3, [r7, #3]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	2100      	movs	r1, #0
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f805 	bl	800e0ec <_ZNK12SimpleString8findFromEjc>
 800e0e2:	4603      	mov	r3, r0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f7ff fe50 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800e100:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d213      	bcs.n	800e136 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800e10e:	6979      	ldr	r1, [r7, #20]
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f7ff ffca 	bl	800e0aa <_ZNK12SimpleString2atEj>
 800e116:	4603      	mov	r3, r0
 800e118:	461a      	mov	r2, r3
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	4293      	cmp	r3, r2
 800e11e:	bf0c      	ite	eq
 800e120:	2301      	moveq	r3, #1
 800e122:	2300      	movne	r3, #0
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <_ZNK12SimpleString8findFromEjc+0x42>
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	e005      	b.n	800e13a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	3301      	adds	r3, #1
 800e132:	617b      	str	r3, [r7, #20]
 800e134:	e7e7      	b.n	800e106 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3718      	adds	r7, #24
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	60f8      	str	r0, [r7, #12]
 800e14c:	60b9      	str	r1, [r7, #8]
 800e14e:	4611      	mov	r1, r2
 800e150:	461a      	mov	r2, r3
 800e152:	460b      	mov	r3, r1
 800e154:	71fb      	strb	r3, [r7, #7]
 800e156:	4613      	mov	r3, r2
 800e158:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	4619      	mov	r1, r3
 800e15e:	68b8      	ldr	r0, [r7, #8]
 800e160:	f7ff ffb3 	bl	800e0ca <_ZNK12SimpleString4findEc>
 800e164:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e16c:	d104      	bne.n	800e178 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800e16e:	4911      	ldr	r1, [pc, #68]	; (800e1b4 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f7ff fa7e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e176:	e019      	b.n	800e1ac <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800e178:	79bb      	ldrb	r3, [r7, #6]
 800e17a:	461a      	mov	r2, r3
 800e17c:	6979      	ldr	r1, [r7, #20]
 800e17e:	68b8      	ldr	r0, [r7, #8]
 800e180:	f7ff ffb4 	bl	800e0ec <_ZNK12SimpleString8findFromEjc>
 800e184:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e18c:	d106      	bne.n	800e19c <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	68b9      	ldr	r1, [r7, #8]
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff ff77 	bl	800e088 <_ZNK12SimpleString9subStringEj>
 800e19a:	e007      	b.n	800e1ac <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f7ff ff24 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
}
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	08025254 	.word	0x08025254

0800e1b8 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800e1c2:	f240 2275 	movw	r2, #629	; 0x275
 800e1c6:	490a      	ldr	r1, [pc, #40]	; (800e1f0 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800e1c8:	6838      	ldr	r0, [r7, #0]
 800e1ca:	f7fe ffd7 	bl	800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e1ce:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7ff f8f6 	bl	800d3c6 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3710      	adds	r7, #16
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	08025194 	.word	0x08025194

0800e1f4 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	2b2f      	cmp	r3, #47	; 0x2f
 800e202:	d904      	bls.n	800e20e <_ZN12SimpleString7isDigitEc+0x1a>
 800e204:	79fb      	ldrb	r3, [r7, #7]
 800e206:	2b39      	cmp	r3, #57	; 0x39
 800e208:	d801      	bhi.n	800e20e <_ZN12SimpleString7isDigitEc+0x1a>
 800e20a:	2301      	movs	r3, #1
 800e20c:	e000      	b.n	800e210 <_ZN12SimpleString7isDigitEc+0x1c>
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	2b20      	cmp	r3, #32
 800e22a:	d005      	beq.n	800e238 <_ZN12SimpleString7isSpaceEc+0x1c>
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	2b08      	cmp	r3, #8
 800e230:	d904      	bls.n	800e23c <_ZN12SimpleString7isSpaceEc+0x20>
 800e232:	79fb      	ldrb	r3, [r7, #7]
 800e234:	2b0d      	cmp	r3, #13
 800e236:	d801      	bhi.n	800e23c <_ZN12SimpleString7isSpaceEc+0x20>
 800e238:	2301      	movs	r3, #1
 800e23a:	e000      	b.n	800e23e <_ZN12SimpleString7isSpaceEc+0x22>
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b083      	sub	sp, #12
 800e24e:	af00      	add	r7, sp, #0
 800e250:	4603      	mov	r3, r0
 800e252:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800e254:	79fb      	ldrb	r3, [r7, #7]
 800e256:	2b40      	cmp	r3, #64	; 0x40
 800e258:	d904      	bls.n	800e264 <_ZN12SimpleString7isUpperEc+0x1a>
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	2b5a      	cmp	r3, #90	; 0x5a
 800e25e:	d801      	bhi.n	800e264 <_ZN12SimpleString7isUpperEc+0x1a>
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <_ZN12SimpleString7isUpperEc+0x1c>
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	4603      	mov	r3, r0
 800e27a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	2b1f      	cmp	r3, #31
 800e280:	d902      	bls.n	800e288 <_ZN12SimpleString9isControlEc+0x16>
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	2b7f      	cmp	r3, #127	; 0x7f
 800e286:	d101      	bne.n	800e28c <_ZN12SimpleString9isControlEc+0x1a>
 800e288:	2301      	movs	r3, #1
 800e28a:	e000      	b.n	800e28e <_ZN12SimpleString9isControlEc+0x1c>
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	370c      	adds	r7, #12
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr

0800e29a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b083      	sub	sp, #12
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	2b06      	cmp	r3, #6
 800e2a8:	d904      	bls.n	800e2b4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	2b0d      	cmp	r3, #13
 800e2ae:	d801      	bhi.n	800e2b4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e000      	b.n	800e2b6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
	...

0800e2c4 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <_Z10StringFromb+0x16>
 800e2d6:	4a06      	ldr	r2, [pc, #24]	; (800e2f0 <_Z10StringFromb+0x2c>)
 800e2d8:	e000      	b.n	800e2dc <_Z10StringFromb+0x18>
 800e2da:	4a06      	ldr	r2, [pc, #24]	; (800e2f4 <_Z10StringFromb+0x30>)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	4906      	ldr	r1, [pc, #24]	; (800e2f8 <_Z10StringFromb+0x34>)
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 fa85 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	08025260 	.word	0x08025260
 800e2f4:	08025268 	.word	0x08025268
 800e2f8:	08025270 	.word	0x08025270

0800e2fc <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff f9b2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800e322:	2400      	movs	r4, #0
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00e      	beq.n	800e348 <_Z25PrintableStringFromOrNullPKc+0x30>
 800e32a:	f107 0308 	add.w	r3, r7, #8
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	4618      	mov	r0, r3
 800e332:	f7ff ffe3 	bl	800e2fc <_Z10StringFromPKc>
 800e336:	2401      	movs	r4, #1
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f107 0208 	add.w	r2, r7, #8
 800e33e:	4611      	mov	r1, r2
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fc3f 	bl	800dbc4 <_ZNK12SimpleString9printableEv>
 800e346:	e004      	b.n	800e352 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4908      	ldr	r1, [pc, #32]	; (800e36c <_Z25PrintableStringFromOrNullPKc+0x54>)
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ffd5 	bl	800e2fc <_Z10StringFromPKc>
 800e352:	2c00      	cmp	r4, #0
 800e354:	d004      	beq.n	800e360 <_Z25PrintableStringFromOrNullPKc+0x48>
 800e356:	f107 0308 	add.w	r3, r7, #8
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7ff fd41 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e360:	bf00      	nop
}
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	bd90      	pop	{r4, r7, pc}
 800e36a:	bf00      	nop
 800e36c:	08025274 	.word	0x08025274

0800e370 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	683a      	ldr	r2, [r7, #0]
 800e37e:	4904      	ldr	r1, [pc, #16]	; (800e390 <_Z10StringFromi+0x20>)
 800e380:	4618      	mov	r0, r3
 800e382:	f000 fa35 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	0802527c 	.word	0x0802527c

0800e394 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	683a      	ldr	r2, [r7, #0]
 800e3a2:	4904      	ldr	r1, [pc, #16]	; (800e3b4 <_Z10StringFroml+0x20>)
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 fa23 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	08025280 	.word	0x08025280

0800e3b8 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800e3c2:	f107 0308 	add.w	r3, r7, #8
 800e3c6:	4910      	ldr	r1, [pc, #64]	; (800e408 <_Z10StringFromPKv+0x50>)
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7ff f952 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e3ce:	f107 0310 	add.w	r3, r7, #16
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f000 f9a1 	bl	800e71c <_Z13HexStringFromPKv>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f107 0210 	add.w	r2, r7, #16
 800e3e0:	f107 0108 	add.w	r1, r7, #8
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7ff fd5e 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800e3ea:	f107 0310 	add.w	r3, r7, #16
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fcf7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e3f4:	f107 0308 	add.w	r3, r7, #8
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff fcf2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e3fe:	bf00      	nop
}
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	3718      	adds	r7, #24
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	08025284 	.word	0x08025284

0800e40c <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b086      	sub	sp, #24
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800e416:	f107 0308 	add.w	r3, r7, #8
 800e41a:	4910      	ldr	r1, [pc, #64]	; (800e45c <_Z10StringFromPFvvE+0x50>)
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff f928 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e422:	f107 0310 	add.w	r3, r7, #16
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	4618      	mov	r0, r3
 800e42a:	f000 f98b 	bl	800e744 <_Z13HexStringFromPFvvE>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f107 0210 	add.w	r2, r7, #16
 800e434:	f107 0108 	add.w	r1, r7, #8
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff fd34 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800e43e:	f107 0310 	add.w	r3, r7, #16
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff fccd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e448:	f107 0308 	add.w	r3, r7, #8
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fcc8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e452:	bf00      	nop
}
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	08025284 	.word	0x08025284

0800e460 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	4904      	ldr	r1, [pc, #16]	; (800e480 <_Z13HexStringFroml+0x20>)
 800e470:	4618      	mov	r0, r3
 800e472:	f000 f9bd 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	08025288 	.word	0x08025288

0800e484 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	4904      	ldr	r1, [pc, #16]	; (800e4a4 <_Z13HexStringFromi+0x20>)
 800e494:	4618      	mov	r0, r3
 800e496:	f000 f9ab 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	0802528c 	.word	0x0802528c

0800e4a8 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800e4b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4912      	ldr	r1, [pc, #72]	; (800e504 <_Z13HexStringFroma+0x5c>)
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f997 	bl	800e7f0 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800e4c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	da16      	bge.n	800e4f8 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff fc68 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800e4d0:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	1e9a      	subs	r2, r3, #2
 800e4d6:	f107 030c 	add.w	r3, r7, #12
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff fdd3 	bl	800e088 <_ZNK12SimpleString9subStringEj>
 800e4e2:	f107 030c 	add.w	r3, r7, #12
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7ff f92e 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800e4ee:	f107 030c 	add.w	r3, r7, #12
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7ff fc75 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800e4f8:	bf00      	nop
}
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	0802528c 	.word	0x0802528c

0800e508 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	4904      	ldr	r1, [pc, #16]	; (800e528 <_Z13HexStringFromm+0x20>)
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 f969 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	08025288 	.word	0x08025288

0800e52c <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	4904      	ldr	r1, [pc, #16]	; (800e54c <_Z13HexStringFromj+0x20>)
 800e53c:	4618      	mov	r0, r3
 800e53e:	f000 f957 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	0802528c 	.word	0x0802528c

0800e550 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e55a:	f107 0308 	add.w	r3, r7, #8
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f7ff ff8f 	bl	800e484 <_Z13HexStringFromi>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f107 0208 	add.w	r2, r7, #8
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f000 f87e 	bl	800e670 <_Z26BracketsFormattedHexString12SimpleString>
 800e574:	f107 0308 	add.w	r3, r7, #8
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff fc32 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e57e:	bf00      	nop
}
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e592:	f107 0308 	add.w	r3, r7, #8
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	4618      	mov	r0, r3
 800e59a:	f7ff ffc7 	bl	800e52c <_Z13HexStringFromj>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f107 0208 	add.w	r2, r7, #8
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f000 f862 	bl	800e670 <_Z26BracketsFormattedHexString12SimpleString>
 800e5ac:	f107 0308 	add.w	r3, r7, #8
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fc16 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e5b6:	bf00      	nop
}
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e5ca:	f107 0308 	add.w	r3, r7, #8
 800e5ce:	6839      	ldr	r1, [r7, #0]
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff ff45 	bl	800e460 <_Z13HexStringFroml>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f107 0208 	add.w	r2, r7, #8
 800e5dc:	4611      	mov	r1, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 f846 	bl	800e670 <_Z26BracketsFormattedHexString12SimpleString>
 800e5e4:	f107 0308 	add.w	r3, r7, #8
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff fbfa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e5ee:	bf00      	nop
}
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e602:	f107 0308 	add.w	r3, r7, #8
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff ff7d 	bl	800e508 <_Z13HexStringFromm>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f107 0208 	add.w	r2, r7, #8
 800e614:	4611      	mov	r1, r2
 800e616:	4618      	mov	r0, r3
 800e618:	f000 f82a 	bl	800e670 <_Z26BracketsFormattedHexString12SimpleString>
 800e61c:	f107 0308 	add.w	r3, r7, #8
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff fbde 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e626:	bf00      	nop
}
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800e63c:	f107 0308 	add.w	r3, r7, #8
 800e640:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff ff2e 	bl	800e4a8 <_Z13HexStringFroma>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f107 0208 	add.w	r2, r7, #8
 800e652:	4611      	mov	r1, r2
 800e654:	4618      	mov	r0, r3
 800e656:	f000 f80b 	bl	800e670 <_Z26BracketsFormattedHexString12SimpleString>
 800e65a:	f107 0308 	add.w	r3, r7, #8
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fbbf 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e664:	bf00      	nop
}
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800e67a:	f107 0310 	add.w	r3, r7, #16
 800e67e:	4917      	ldr	r1, [pc, #92]	; (800e6dc <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800e680:	4618      	mov	r0, r3
 800e682:	f7fe fff6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e686:	f107 0308 	add.w	r3, r7, #8
 800e68a:	f107 0110 	add.w	r1, r7, #16
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff fc08 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800e696:	f107 0318 	add.w	r3, r7, #24
 800e69a:	4911      	ldr	r1, [pc, #68]	; (800e6e0 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fe ffe8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f107 0218 	add.w	r2, r7, #24
 800e6a8:	f107 0108 	add.w	r1, r7, #8
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7ff fbfa 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800e6b2:	f107 0318 	add.w	r3, r7, #24
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fb93 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e6bc:	f107 0308 	add.w	r3, r7, #8
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fb8e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e6c6:	f107 0310 	add.w	r3, r7, #16
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7ff fb89 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800e6d0:	bf00      	nop
}
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	3720      	adds	r7, #32
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	08025290 	.word	0x08025290
 800e6e0:	08025294 	.word	0x08025294

0800e6e4 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800e6ec:	1d3b      	adds	r3, r7, #4
 800e6ee:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800e708:	1d3b      	adds	r3, r7, #4
 800e70a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800e726:	6838      	ldr	r0, [r7, #0]
 800e728:	f7ff ffdc 	bl	800e6e4 <_ZL25convertPointerToLongValuePKv>
 800e72c:	4602      	mov	r2, r0
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4903      	ldr	r1, [pc, #12]	; (800e740 <_Z13HexStringFromPKv+0x24>)
 800e732:	4618      	mov	r0, r3
 800e734:	f000 f85c 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	08025288 	.word	0x08025288

0800e744 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800e74e:	6838      	ldr	r0, [r7, #0]
 800e750:	f7ff ffd6 	bl	800e700 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800e754:	4602      	mov	r2, r0
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4903      	ldr	r1, [pc, #12]	; (800e768 <_Z13HexStringFromPFvvE+0x24>)
 800e75a:	4618      	mov	r0, r3
 800e75c:	f000 f848 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	3708      	adds	r7, #8
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	08025288 	.word	0x08025288

0800e76c <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af02      	add	r7, sp, #8
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	ed87 0b00 	vstr	d0, [r7]
 800e778:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800e77a:	4b18      	ldr	r3, [pc, #96]	; (800e7dc <_Z10StringFromdi+0x70>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	ed97 0b00 	vldr	d0, [r7]
 800e782:	4798      	blx	r3
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	bf14      	ite	ne
 800e78a:	2301      	movne	r3, #1
 800e78c:	2300      	moveq	r3, #0
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b00      	cmp	r3, #0
 800e792:	d004      	beq.n	800e79e <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800e794:	4912      	ldr	r1, [pc, #72]	; (800e7e0 <_Z10StringFromdi+0x74>)
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7fe ff6b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e79c:	e01a      	b.n	800e7d4 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800e79e:	4b11      	ldr	r3, [pc, #68]	; (800e7e4 <_Z10StringFromdi+0x78>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	ed97 0b00 	vldr	d0, [r7]
 800e7a6:	4798      	blx	r3
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d004      	beq.n	800e7c2 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800e7b8:	490b      	ldr	r1, [pc, #44]	; (800e7e8 <_Z10StringFromdi+0x7c>)
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7fe ff59 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e7c0:	e008      	b.n	800e7d4 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	4907      	ldr	r1, [pc, #28]	; (800e7ec <_Z10StringFromdi+0x80>)
 800e7d0:	f000 f80e 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	200000e8 	.word	0x200000e8
 800e7e0:	080252c8 	.word	0x080252c8
 800e7e4:	200000ec 	.word	0x200000ec
 800e7e8:	080252dc 	.word	0x080252dc
 800e7ec:	080252ec 	.word	0x080252ec

0800e7f0 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800e7f0:	b40e      	push	{r1, r2, r3}
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b087      	sub	sp, #28
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800e7fa:	4910      	ldr	r1, [pc, #64]	; (800e83c <_Z16StringFromFormatPKcz+0x4c>)
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7fe ff38 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800e802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e806:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800e808:	f107 0310 	add.w	r3, r7, #16
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e810:	4618      	mov	r0, r3
 800e812:	f000 f839 	bl	800e888 <_Z17VStringFromFormatPKcSt9__va_list>
 800e816:	f107 0310 	add.w	r3, r7, #16
 800e81a:	4619      	mov	r1, r3
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7fe ff94 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800e822:	f107 0310 	add.w	r3, r7, #16
 800e826:	4618      	mov	r0, r3
 800e828:	f7ff fadb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800e82c:	bf00      	nop
}
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	371c      	adds	r7, #28
 800e832:	46bd      	mov	sp, r7
 800e834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e838:	b003      	add	sp, #12
 800e83a:	4770      	bx	lr
 800e83c:	08025254 	.word	0x08025254

0800e840 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	683a      	ldr	r2, [r7, #0]
 800e84e:	4904      	ldr	r1, [pc, #16]	; (800e860 <_Z10StringFromj+0x20>)
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff ffcd 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	080252f8 	.word	0x080252f8

0800e864 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	4904      	ldr	r1, [pc, #16]	; (800e884 <_Z10StringFromm+0x20>)
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff ffbb 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	080252fc 	.word	0x080252fc

0800e888 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800e888:	b590      	push	{r4, r7, lr}
 800e88a:	b0a7      	sub	sp, #156	; 0x9c
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800e898:	492e      	ldr	r1, [pc, #184]	; (800e954 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f7fe fee9 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800e8a0:	4b2d      	ldr	r3, [pc, #180]	; (800e958 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e8a2:	681c      	ldr	r4, [r3, #0]
 800e8a4:	f107 0014 	add.w	r0, r7, #20
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	2164      	movs	r1, #100	; 0x64
 800e8ae:	47a0      	blx	r4
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800e8b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8ba:	2b63      	cmp	r3, #99	; 0x63
 800e8bc:	d813      	bhi.n	800e8e6 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800e8be:	f107 0214 	add.w	r2, r7, #20
 800e8c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fed2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e8ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	f7fe ff38 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800e8da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7ff fa7f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800e8e4:	e031      	b.n	800e94a <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800e8e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800e8f0:	f240 32c3 	movw	r2, #963	; 0x3c3
 800e8f4:	4919      	ldr	r1, [pc, #100]	; (800e95c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e8f6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e8fa:	f7fe fc3f 	bl	800d17c <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e8fe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800e902:	4b15      	ldr	r3, [pc, #84]	; (800e958 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800e904:	681c      	ldr	r4, [r3, #0]
 800e906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e908:	68ba      	ldr	r2, [r7, #8]
 800e90a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e90e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e912:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800e914:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e918:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fe fea8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800e922:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e926:	4619      	mov	r1, r3
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f7fe ff0e 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800e92e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff fa55 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800e938:	f240 33c7 	movw	r3, #967	; 0x3c7
 800e93c:	4a07      	ldr	r2, [pc, #28]	; (800e95c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800e93e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e942:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e946:	f7fe fc2d 	bl	800d1a4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800e94a:	bf00      	nop
}
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	379c      	adds	r7, #156	; 0x9c
 800e950:	46bd      	mov	sp, r7
 800e952:	bd90      	pop	{r4, r7, pc}
 800e954:	08025254 	.word	0x08025254
 800e958:	200000b0 	.word	0x200000b0
 800e95c:	08025194 	.word	0x08025194

0800e960 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b08a      	sub	sp, #40	; 0x28
 800e964:	af00      	add	r7, sp, #0
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800e96c:	491f      	ldr	r1, [pc, #124]	; (800e9ec <_Z16StringFromBinaryPKhj+0x8c>)
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7fe fe7f 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800e974:	2300      	movs	r3, #0
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
 800e978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d219      	bcs.n	800e9b4 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	4413      	add	r3, r2
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	461a      	mov	r2, r3
 800e98a:	f107 0314 	add.w	r3, r7, #20
 800e98e:	4918      	ldr	r1, [pc, #96]	; (800e9f0 <_Z16StringFromBinaryPKhj+0x90>)
 800e990:	4618      	mov	r0, r3
 800e992:	f7ff ff2d 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800e996:	f107 0314 	add.w	r3, r7, #20
 800e99a:	4619      	mov	r1, r3
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff fa9d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800e9a2:	f107 0314 	add.w	r3, r7, #20
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fa1b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e9b2:	e7e1      	b.n	800e978 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f7ff f9f3 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	f107 001c 	add.w	r0, r7, #28
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	68f9      	ldr	r1, [r7, #12]
 800e9c6:	f7ff fb15 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 800e9ca:	f107 031c 	add.w	r3, r7, #28
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7fe feba 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800e9d6:	f107 031c 	add.w	r3, r7, #28
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff fa01 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    return result;
 800e9e0:	bf00      	nop
}
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	3728      	adds	r7, #40	; 0x28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08025254 	.word	0x08025254
 800e9f0:	08025300 	.word	0x08025300

0800e9f4 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d006      	beq.n	800ea14 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff ffa7 	bl	800e960 <_Z16StringFromBinaryPKhj>
 800ea12:	e004      	b.n	800ea1e <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4904      	ldr	r1, [pc, #16]	; (800ea28 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fc6f 	bl	800e2fc <_Z10StringFromPKc>
}
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	08025274 	.word	0x08025274

0800ea2c <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	4913      	ldr	r1, [pc, #76]	; (800ea8c <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7ff fed6 	bl	800e7f0 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b80      	cmp	r3, #128	; 0x80
 800ea48:	bf28      	it	cs
 800ea4a:	2380      	movcs	r3, #128	; 0x80
 800ea4c:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800ea4e:	f107 0314 	add.w	r3, r7, #20
 800ea52:	69fa      	ldr	r2, [r7, #28]
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff ffcc 	bl	800e9f4 <_Z22StringFromBinaryOrNullPKhj>
 800ea5c:	f107 0314 	add.w	r3, r7, #20
 800ea60:	4619      	mov	r1, r3
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f7ff fa3a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800ea68:	f107 0314 	add.w	r3, r7, #20
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7ff f9b8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d903      	bls.n	800ea82 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800ea7a:	4905      	ldr	r1, [pc, #20]	; (800ea90 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fa3f 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800ea82:	bf00      	nop
}
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	3720      	adds	r7, #32
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	08025308 	.word	0x08025308
 800ea90:	08025324 	.word	0x08025324

0800ea94 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d006      	beq.n	800eab4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	68b9      	ldr	r1, [r7, #8]
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7ff ffbd 	bl	800ea2c <_Z24StringFromBinaryWithSizePKhj>
 800eab2:	e004      	b.n	800eabe <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	4904      	ldr	r1, [pc, #16]	; (800eac8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7ff fc1f 	bl	800e2fc <_Z10StringFromPKc>
}
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	08025274 	.word	0x08025274

0800eacc <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800eada:	4925      	ldr	r1, [pc, #148]	; (800eb70 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7fe fdc8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	d802      	bhi.n	800eaee <_Z20StringFromMaskedBitsmmj+0x22>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	00db      	lsls	r3, r3, #3
 800eaec:	e000      	b.n	800eaf0 <_Z20StringFromMaskedBitsmmj+0x24>
 800eaee:	2320      	movs	r3, #32
 800eaf0:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	3b01      	subs	r3, #1
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800eafc:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800eafe:	2300      	movs	r3, #0
 800eb00:	61fb      	str	r3, [r7, #28]
 800eb02:	69fa      	ldr	r2, [r7, #28]
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d22d      	bcs.n	800eb66 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00c      	beq.n	800eb2e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	4013      	ands	r3, r2
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <_Z20StringFromMaskedBitsmmj+0x56>
 800eb1e:	4b15      	ldr	r3, [pc, #84]	; (800eb74 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800eb20:	e000      	b.n	800eb24 <_Z20StringFromMaskedBitsmmj+0x58>
 800eb22:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <_Z20StringFromMaskedBitsmmj+0xac>)
 800eb24:	4619      	mov	r1, r3
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7ff f9ea 	bl	800df00 <_ZN12SimpleStringpLEPKc>
 800eb2c:	e003      	b.n	800eb36 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800eb2e:	4913      	ldr	r1, [pc, #76]	; (800eb7c <_Z20StringFromMaskedBitsmmj+0xb0>)
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f7ff f9e5 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	f003 0307 	and.w	r3, r3, #7
 800eb3c:	2b07      	cmp	r3, #7
 800eb3e:	d108      	bne.n	800eb52 <_Z20StringFromMaskedBitsmmj+0x86>
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	3b01      	subs	r3, #1
 800eb44:	69fa      	ldr	r2, [r7, #28]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d003      	beq.n	800eb52 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800eb4a:	490d      	ldr	r1, [pc, #52]	; (800eb80 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f7ff f9d7 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	005b      	lsls	r3, r3, #1
 800eb56:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	3301      	adds	r3, #1
 800eb62:	61fb      	str	r3, [r7, #28]
 800eb64:	e7cd      	b.n	800eb02 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800eb66:	bf00      	nop
}
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	3720      	adds	r7, #32
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	08025254 	.word	0x08025254
 800eb74:	0802532c 	.word	0x0802532c
 800eb78:	08025330 	.word	0x08025330
 800eb7c:	08025334 	.word	0x08025334
 800eb80:	08025338 	.word	0x08025338

0800eb84 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	4b18      	ldr	r3, [pc, #96]	; (800ebf4 <_Z23StringFromOrdinalNumberj+0x70>)
 800eb92:	fba3 1302 	umull	r1, r3, r3, r2
 800eb96:	08d9      	lsrs	r1, r3, #3
 800eb98:	460b      	mov	r3, r1
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	440b      	add	r3, r1
 800eb9e:	005b      	lsls	r3, r3, #1
 800eba0:	1ad3      	subs	r3, r2, r3
 800eba2:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b0a      	cmp	r3, #10
 800eba8:	d905      	bls.n	800ebb6 <_Z23StringFromOrdinalNumberj+0x32>
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b0d      	cmp	r3, #13
 800ebae:	d802      	bhi.n	800ebb6 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800ebb0:	4b11      	ldr	r3, [pc, #68]	; (800ebf8 <_Z23StringFromOrdinalNumberj+0x74>)
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e013      	b.n	800ebde <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	2b03      	cmp	r3, #3
 800ebba:	d102      	bne.n	800ebc2 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800ebbc:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <_Z23StringFromOrdinalNumberj+0x78>)
 800ebbe:	60fb      	str	r3, [r7, #12]
 800ebc0:	e00d      	b.n	800ebde <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d102      	bne.n	800ebce <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800ebc8:	4b0d      	ldr	r3, [pc, #52]	; (800ec00 <_Z23StringFromOrdinalNumberj+0x7c>)
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e007      	b.n	800ebde <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d102      	bne.n	800ebda <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800ebd4:	4b0b      	ldr	r3, [pc, #44]	; (800ec04 <_Z23StringFromOrdinalNumberj+0x80>)
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	e001      	b.n	800ebde <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800ebda:	4b07      	ldr	r3, [pc, #28]	; (800ebf8 <_Z23StringFromOrdinalNumberj+0x74>)
 800ebdc:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	4908      	ldr	r1, [pc, #32]	; (800ec08 <_Z23StringFromOrdinalNumberj+0x84>)
 800ebe6:	f7ff fe03 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	cccccccd 	.word	0xcccccccd
 800ebf8:	0802533c 	.word	0x0802533c
 800ebfc:	08025340 	.word	0x08025340
 800ec00:	08025344 	.word	0x08025344
 800ec04:	08025348 	.word	0x08025348
 800ec08:	0802534c 	.word	0x0802534c

0800ec0c <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	3304      	adds	r3, #4
 800ec18:	4907      	ldr	r1, [pc, #28]	; (800ec38 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fe fd29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	60da      	str	r2, [r3, #12]
}
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	08025254 	.word	0x08025254

0800ec3c <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d01e      	beq.n	800ec8c <_ZN22SimpleStringCollection8allocateEj+0x50>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	3b04      	subs	r3, #4
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	00db      	lsls	r3, r3, #3
 800ec5c:	18d4      	adds	r4, r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	429c      	cmp	r4, r3
 800ec64:	d004      	beq.n	800ec70 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800ec66:	3c08      	subs	r4, #8
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f7ff f8ba 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800ec6e:	e7f6      	b.n	800ec5e <_ZN22SimpleStringCollection8allocateEj+0x22>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f1a3 0208 	sub.w	r2, r3, #8
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	3b04      	subs	r3, #4
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	3301      	adds	r3, #1
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4619      	mov	r1, r3
 800ec86:	4610      	mov	r0, r2
 800ec88:	f7fc f976 	bl	800af78 <_ZdaPvj>

    size_ = _size;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68dc      	ldr	r4, [r3, #12]
 800ec96:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800ec9a:	d202      	bcs.n	800eca2 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800ec9c:	1c63      	adds	r3, r4, #1
 800ec9e:	00db      	lsls	r3, r3, #3
 800eca0:	e001      	b.n	800eca6 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800eca2:	f04f 33ff 	mov.w	r3, #4294967295
 800eca6:	f240 4227 	movw	r2, #1063	; 0x427
 800ecaa:	4910      	ldr	r1, [pc, #64]	; (800ecec <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fc f941 	bl	800af34 <_ZnajPKci>
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	1d2b      	adds	r3, r5, #4
 800ecb6:	3b04      	subs	r3, #4
 800ecb8:	2208      	movs	r2, #8
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	1d2b      	adds	r3, r5, #4
 800ecbe:	601c      	str	r4, [r3, #0]
 800ecc0:	f105 0308 	add.w	r3, r5, #8
 800ecc4:	1e62      	subs	r2, r4, #1
 800ecc6:	4614      	mov	r4, r2
 800ecc8:	461e      	mov	r6, r3
 800ecca:	2c00      	cmp	r4, #0
 800eccc:	db06      	blt.n	800ecdc <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800ecce:	4908      	ldr	r1, [pc, #32]	; (800ecf0 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7fe fcce 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800ecd6:	3608      	adds	r6, #8
 800ecd8:	3c01      	subs	r4, #1
 800ecda:	e7f6      	b.n	800ecca <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800ecdc:	f105 0208 	add.w	r2, r5, #8
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	601a      	str	r2, [r3, #0]
}
 800ece4:	bf00      	nop
 800ece6:	370c      	adds	r7, #12
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecec:	08025194 	.word	0x08025194
 800ecf0:	08025254 	.word	0x08025254

0800ecf4 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d01e      	beq.n	800ed42 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	3b04      	subs	r3, #4
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	18d4      	adds	r4, r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	429c      	cmp	r4, r3
 800ed1a:	d004      	beq.n	800ed26 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800ed1c:	3c08      	subs	r4, #8
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f7ff f85f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800ed24:	e7f6      	b.n	800ed14 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f1a3 0208 	sub.w	r2, r3, #8
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3b04      	subs	r3, #4
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	00db      	lsls	r3, r3, #3
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	f7fc f91b 	bl	800af78 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	3304      	adds	r3, #4
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff f84b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd90      	pop	{r4, r7, pc}

0800ed56 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800ed56:	b480      	push	{r7}
 800ed58:	b083      	sub	sp, #12
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
    return size_;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
	...

0800ed70 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800ed70:	b590      	push	{r4, r7, lr}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68db      	ldr	r3, [r3, #12]
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d315      	bcc.n	800edb0 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	1d1c      	adds	r4, r3, #4
 800ed88:	f107 0308 	add.w	r3, r7, #8
 800ed8c:	490d      	ldr	r1, [pc, #52]	; (800edc4 <_ZN22SimpleStringCollectionixEj+0x54>)
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe fc6f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800ed94:	f107 0308 	add.w	r3, r7, #8
 800ed98:	4619      	mov	r1, r3
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f7fe fcd5 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800eda0:	f107 0308 	add.w	r3, r7, #8
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff f81c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        return empty_;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3304      	adds	r3, #4
 800edae:	e004      	b.n	800edba <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	00db      	lsls	r3, r3, #3
 800edb8:	4413      	add	r3, r2
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd90      	pop	{r4, r7, pc}
 800edc2:	bf00      	nop
 800edc4:	08025254 	.word	0x08025254

0800edc8 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fa fb88 	bl	80094e8 <_ZN17ConsoleTestOutputC1Ev>
 800edd8:	4a08      	ldr	r2, [pc, #32]	; (800edfc <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	611a      	str	r2, [r3, #16]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3314      	adds	r3, #20
 800ede8:	4905      	ldr	r1, [pc, #20]	; (800ee00 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe fc41 	bl	800d672 <_ZN12SimpleStringC1EPKc>
{
}
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4618      	mov	r0, r3
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	080291c0 	.word	0x080291c0
 800ee00:	08025354 	.word	0x08025354

0800ee04 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	4a08      	ldr	r2, [pc, #32]	; (800ee30 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	3314      	adds	r3, #20
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fe ffe3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fa fb74 	bl	800950c <_ZN17ConsoleTestOutputD1Ev>
{
}
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	080291c0 	.word	0x080291c0

0800ee34 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
}
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff ffe1 	bl	800ee04 <_ZN18TeamCityTestOutputD1Ev>
 800ee42:	211c      	movs	r1, #28
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7fc f865 	bl	800af14 <_ZdlPvj>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	332c      	adds	r3, #44	; 0x2c
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	492b      	ldr	r1, [pc, #172]	; (800ef18 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800ee6a:	4610      	mov	r0, r2
 800ee6c:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800ee6e:	f107 0308 	add.w	r3, r7, #8
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f004 fdf7 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800ee7a:	f107 0308 	add.w	r3, r7, #8
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe ff82 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800ee84:	4603      	mov	r3, r0
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 f919 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ee8e:	f107 0308 	add.w	r3, r7, #8
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe ffa5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	332c      	adds	r3, #44	; 0x2c
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	491e      	ldr	r1, [pc, #120]	; (800ef1c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800eea4:	4610      	mov	r0, r2
 800eea6:	4798      	blx	r3
    if (!test.willRun()) {
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3318      	adds	r3, #24
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6838      	ldr	r0, [r7, #0]
 800eeb2:	4798      	blx	r3
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	f083 0301 	eor.w	r3, r3, #1
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d024      	beq.n	800ef0a <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	332c      	adds	r3, #44	; 0x2c
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4915      	ldr	r1, [pc, #84]	; (800ef20 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800eecc:	4610      	mov	r0, r2
 800eece:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800eed0:	f107 0310 	add.w	r3, r7, #16
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	4618      	mov	r0, r3
 800eed8:	f004 fdc6 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800eedc:	f107 0310 	add.w	r3, r7, #16
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fe ff51 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800eee6:	4603      	mov	r3, r0
 800eee8:	4619      	mov	r1, r3
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 f8e8 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800eef0:	f107 0310 	add.w	r3, r7, #16
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fe ff74 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	332c      	adds	r3, #44	; 0x2c
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4905      	ldr	r1, [pc, #20]	; (800ef1c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800ef06:	4610      	mov	r0, r2
 800ef08:	4798      	blx	r3
    }
    currtest_ = &test;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	611a      	str	r2, [r3, #16]
}
 800ef10:	bf00      	nop
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	08025358 	.word	0x08025358
 800ef1c:	08025378 	.word	0x08025378
 800ef20:	0802537c 	.word	0x0802537c

0800ef24 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ef24:	b5b0      	push	{r4, r5, r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d03b      	beq.n	800efae <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	332c      	adds	r3, #44	; 0x2c
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	491d      	ldr	r1, [pc, #116]	; (800efb8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800ef42:	4610      	mov	r0, r2
 800ef44:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	691a      	ldr	r2, [r3, #16]
 800ef4a:	f107 0308 	add.w	r3, r7, #8
 800ef4e:	4611      	mov	r1, r2
 800ef50:	4618      	mov	r0, r3
 800ef52:	f004 fd89 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800ef56:	f107 0308 	add.w	r3, r7, #8
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe ff14 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800ef60:	4603      	mov	r3, r0
 800ef62:	4619      	mov	r1, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f8ab 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ef6a:	f107 0308 	add.w	r3, r7, #8
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe ff37 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	332c      	adds	r3, #44	; 0x2c
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	490f      	ldr	r1, [pc, #60]	; (800efbc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800ef80:	4610      	mov	r0, r2
 800ef82:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800ef84:	687d      	ldr	r5, [r7, #4]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	3334      	adds	r3, #52	; 0x34
 800ef8c:	681c      	ldr	r4, [r3, #0]
 800ef8e:	6838      	ldr	r0, [r7, #0]
 800ef90:	f004 fa0a 	bl	80133a8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800ef94:	4603      	mov	r3, r0
 800ef96:	4619      	mov	r1, r3
 800ef98:	4628      	mov	r0, r5
 800ef9a:	47a0      	blx	r4
    print("']\n");
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	332c      	adds	r3, #44	; 0x2c
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4906      	ldr	r1, [pc, #24]	; (800efc0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800efa8:	4610      	mov	r0, r2
 800efaa:	4798      	blx	r3
 800efac:	e000      	b.n	800efb0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800efae:	bf00      	nop
}
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bdb0      	pop	{r4, r5, r7, pc}
 800efb6:	bf00      	nop
 800efb8:	0802539c 	.word	0x0802539c
 800efbc:	080253bc 	.word	0x080253bc
 800efc0:	08025378 	.word	0x08025378

0800efc4 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800efc4:	b590      	push	{r4, r7, lr}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f103 0414 	add.w	r4, r3, #20
 800efd4:	f107 0308 	add.w	r3, r7, #8
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	4618      	mov	r0, r3
 800efdc:	f004 fd53 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 800efe0:	f107 0308 	add.w	r3, r7, #8
 800efe4:	4619      	mov	r1, r3
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7fe fbaf 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800efec:	f107 0308 	add.w	r3, r7, #8
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fe fef6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	332c      	adds	r3, #44	; 0x2c
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	490c      	ldr	r1, [pc, #48]	; (800f034 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800f002:	4610      	mov	r0, r2
 800f004:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3314      	adds	r3, #20
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fe febc 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f010:	4603      	mov	r3, r0
 800f012:	4619      	mov	r1, r3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f853 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	332c      	adds	r3, #44	; 0x2c
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4904      	ldr	r1, [pc, #16]	; (800f038 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800f026:	4610      	mov	r0, r2
 800f028:	4798      	blx	r3
}
 800f02a:	bf00      	nop
 800f02c:	3714      	adds	r7, #20
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd90      	pop	{r4, r7, pc}
 800f032:	bf00      	nop
 800f034:	080253cc 	.word	0x080253cc
 800f038:	08025378 	.word	0x08025378

0800f03c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f03c:	b590      	push	{r4, r7, lr}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f103 0414 	add.w	r4, r3, #20
 800f04c:	f107 0308 	add.w	r3, r7, #8
 800f050:	4918      	ldr	r1, [pc, #96]	; (800f0b4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fb0d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	4619      	mov	r1, r3
 800f05e:	4620      	mov	r0, r4
 800f060:	f7fe fecb 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 800f064:	4603      	mov	r3, r0
 800f066:	461c      	mov	r4, r3
 800f068:	f107 0308 	add.w	r3, r7, #8
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe feb8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f072:	2c00      	cmp	r4, #0
 800f074:	d11a      	bne.n	800f0ac <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	332c      	adds	r3, #44	; 0x2c
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	490d      	ldr	r1, [pc, #52]	; (800f0b8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800f082:	4610      	mov	r0, r2
 800f084:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	3314      	adds	r3, #20
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe fe7c 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f090:	4603      	mov	r3, r0
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f813 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	332c      	adds	r3, #44	; 0x2c
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4905      	ldr	r1, [pc, #20]	; (800f0bc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	4798      	blx	r3
 800f0aa:	e000      	b.n	800f0ae <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800f0ac:	bf00      	nop
}
 800f0ae:	3714      	adds	r7, #20
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd90      	pop	{r4, r7, pc}
 800f0b4:	08025354 	.word	0x08025354
 800f0b8:	080253f0 	.word	0x080253f0
 800f0bc:	08025378 	.word	0x08025378

0800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d03f      	beq.n	800f152 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	2b27      	cmp	r3, #39	; 0x27
 800f0d8:	d00b      	beq.n	800f0f2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	2b7c      	cmp	r3, #124	; 0x7c
 800f0e0:	d007      	beq.n	800f0f2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	2b5b      	cmp	r3, #91	; 0x5b
 800f0e8:	d003      	beq.n	800f0f2 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b5d      	cmp	r3, #93	; 0x5d
 800f0f0:	d107      	bne.n	800f102 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800f0f2:	237c      	movs	r3, #124	; 0x7c
 800f0f4:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73bb      	strb	r3, [r7, #14]
 800f100:	e01a      	b.n	800f138 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b0d      	cmp	r3, #13
 800f108:	d106      	bne.n	800f118 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800f10a:	237c      	movs	r3, #124	; 0x7c
 800f10c:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800f10e:	2372      	movs	r3, #114	; 0x72
 800f110:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	73bb      	strb	r3, [r7, #14]
 800f116:	e00f      	b.n	800f138 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	2b0a      	cmp	r3, #10
 800f11e:	d106      	bne.n	800f12e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800f120:	237c      	movs	r3, #124	; 0x7c
 800f122:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800f124:	236e      	movs	r3, #110	; 0x6e
 800f126:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	73bb      	strb	r3, [r7, #14]
 800f12c:	e004      	b.n	800f138 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800f134:	2300      	movs	r3, #0
 800f136:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	3328      	adds	r3, #40	; 0x28
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f107 010c 	add.w	r1, r7, #12
 800f146:	4610      	mov	r0, r2
 800f148:	4798      	blx	r3
        s++;
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	3301      	adds	r3, #1
 800f14e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800f150:	e7bb      	b.n	800f0ca <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800f152:	bf00      	nop
 800f154:	3710      	adds	r7, #16
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
	...

0800f15c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800f15c:	b5b0      	push	{r4, r5, r7, lr}
 800f15e:	b08a      	sub	sp, #40	; 0x28
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	332c      	adds	r3, #44	; 0x2c
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4968      	ldr	r1, [pc, #416]	; (800f314 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800f172:	4610      	mov	r0, r2
 800f174:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3310      	adds	r3, #16
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f107 0208 	add.w	r2, r7, #8
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	4610      	mov	r0, r2
 800f186:	4798      	blx	r3
 800f188:	f107 0308 	add.w	r3, r7, #8
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fe fdfb 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f192:	4603      	mov	r3, r0
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff ff92 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f19c:	f107 0308 	add.w	r3, r7, #8
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fe fe1e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	332c      	adds	r3, #44	; 0x2c
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4959      	ldr	r1, [pc, #356]	; (800f318 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800f1b6:	6838      	ldr	r0, [r7, #0]
 800f1b8:	f000 fa15 	bl	800f5e6 <_ZNK11TestFailure17isOutsideTestFileEv>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d105      	bne.n	800f1ce <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800f1c2:	6838      	ldr	r0, [r7, #0]
 800f1c4:	f000 fa21 	bl	800f60a <_ZNK11TestFailure18isInHelperFunctionEv>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e000      	b.n	800f1d4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d042      	beq.n	800f25e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	332c      	adds	r3, #44	; 0x2c
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	494e      	ldr	r1, [pc, #312]	; (800f31c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800f1e8:	687d      	ldr	r5, [r7, #4]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	332c      	adds	r3, #44	; 0x2c
 800f1f0:	681c      	ldr	r4, [r3, #0]
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	331c      	adds	r3, #28
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f107 0210 	add.w	r2, r7, #16
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	f107 0310 	add.w	r3, r7, #16
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fe fdbd 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f20e:	4603      	mov	r3, r0
 800f210:	4619      	mov	r1, r3
 800f212:	4628      	mov	r0, r5
 800f214:	47a0      	blx	r4
 800f216:	f107 0310 	add.w	r3, r7, #16
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fe fde1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        print(":");
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	332c      	adds	r3, #44	; 0x2c
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	493d      	ldr	r1, [pc, #244]	; (800f320 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800f22c:	4610      	mov	r0, r2
 800f22e:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800f230:	687d      	ldr	r5, [r7, #4]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3334      	adds	r3, #52	; 0x34
 800f238:	681c      	ldr	r4, [r3, #0]
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3320      	adds	r3, #32
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	6838      	ldr	r0, [r7, #0]
 800f244:	4798      	blx	r3
 800f246:	4603      	mov	r3, r0
 800f248:	4619      	mov	r1, r3
 800f24a:	4628      	mov	r0, r5
 800f24c:	47a0      	blx	r4
        print("): ");
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	332c      	adds	r3, #44	; 0x2c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4932      	ldr	r1, [pc, #200]	; (800f324 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800f25a:	4610      	mov	r0, r2
 800f25c:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	3308      	adds	r3, #8
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f107 0218 	add.w	r2, r7, #24
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	4610      	mov	r0, r2
 800f26e:	4798      	blx	r3
 800f270:	f107 0318 	add.w	r3, r7, #24
 800f274:	4618      	mov	r0, r3
 800f276:	f7fe fd87 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f27a:	4603      	mov	r3, r0
 800f27c:	4619      	mov	r1, r3
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff ff1e 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f284:	f107 0318 	add.w	r3, r7, #24
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe fdaa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print(":");
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	332c      	adds	r3, #44	; 0x2c
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4921      	ldr	r1, [pc, #132]	; (800f320 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800f29a:	4610      	mov	r0, r2
 800f29c:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800f29e:	687d      	ldr	r5, [r7, #4]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3334      	adds	r3, #52	; 0x34
 800f2a6:	681c      	ldr	r4, [r3, #0]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	3314      	adds	r3, #20
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6838      	ldr	r0, [r7, #0]
 800f2b2:	4798      	blx	r3
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	47a0      	blx	r4

    print("' details='");
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	332c      	adds	r3, #44	; 0x2c
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4918      	ldr	r1, [pc, #96]	; (800f328 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3318      	adds	r3, #24
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f107 0220 	add.w	r2, r7, #32
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	4610      	mov	r0, r2
 800f2dc:	4798      	blx	r3
 800f2de:	f107 0320 	add.w	r3, r7, #32
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fe fd50 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff fee7 	bl	800f0c0 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f2f2:	f107 0320 	add.w	r3, r7, #32
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fe fd73 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	332c      	adds	r3, #44	; 0x2c
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4909      	ldr	r1, [pc, #36]	; (800f32c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800f308:	4610      	mov	r0, r2
 800f30a:	4798      	blx	r3
}
 800f30c:	bf00      	nop
 800f30e:	3728      	adds	r7, #40	; 0x28
 800f310:	46bd      	mov	sp, r7
 800f312:	bdb0      	pop	{r4, r5, r7, pc}
 800f314:	08025414 	.word	0x08025414
 800f318:	08025434 	.word	0x08025434
 800f31c:	08025440 	.word	0x08025440
 800f320:	08025450 	.word	0x08025450
 800f324:	08025454 	.word	0x08025454
 800f328:	08025458 	.word	0x08025458
 800f32c:	08025378 	.word	0x08025378

0800f330 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800f33c:	4a1a      	ldr	r2, [pc, #104]	; (800f3a8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	601a      	str	r2, [r3, #0]
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	3314      	adds	r3, #20
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	3204      	adds	r2, #4
 800f34e:	68b9      	ldr	r1, [r7, #8]
 800f350:	4610      	mov	r0, r2
 800f352:	4798      	blx	r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	330c      	adds	r3, #12
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f004 fb84 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	3314      	adds	r3, #20
 800f364:	68b9      	ldr	r1, [r7, #8]
 800f366:	4618      	mov	r0, r3
 800f368:	f004 fc4f 	bl	8013c0a <_ZNK10UtestShell7getFileEv>
 800f36c:	68b8      	ldr	r0, [r7, #8]
 800f36e:	f004 fc5b 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 800f372:	4602      	mov	r2, r0
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	61da      	str	r2, [r3, #28]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	3320      	adds	r3, #32
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	4618      	mov	r0, r3
 800f380:	f004 fc43 	bl	8013c0a <_ZNK10UtestShell7getFileEv>
 800f384:	68b8      	ldr	r0, [r7, #8]
 800f386:	f004 fc4f 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 800f38a:	4602      	mov	r2, r0
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	629a      	str	r2, [r3, #40]	; 0x28
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	332c      	adds	r3, #44	; 0x2c
 800f394:	6879      	ldr	r1, [r7, #4]
 800f396:	4618      	mov	r0, r3
 800f398:	f7fe f9bf 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
{
}
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	0802948c 	.word	0x0802948c

0800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800f3ba:	4a19      	ldr	r2, [pc, #100]	; (800f420 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	3314      	adds	r3, #20
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	3204      	adds	r2, #4
 800f3cc:	68b9      	ldr	r1, [r7, #8]
 800f3ce:	4610      	mov	r0, r2
 800f3d0:	4798      	blx	r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	330c      	adds	r3, #12
 800f3d6:	68b9      	ldr	r1, [r7, #8]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f004 fb45 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3314      	adds	r3, #20
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe f944 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	61da      	str	r2, [r3, #28]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3320      	adds	r3, #32
 800f3f4:	68b9      	ldr	r1, [r7, #8]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f004 fc07 	bl	8013c0a <_ZNK10UtestShell7getFileEv>
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f004 fc13 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 800f402:	4602      	mov	r2, r0
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	629a      	str	r2, [r3, #40]	; 0x28
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	332c      	adds	r3, #44	; 0x2c
 800f40c:	4905      	ldr	r1, [pc, #20]	; (800f424 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fe f92f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
{
}
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	0802948c 	.word	0x0802948c
 800f424:	08025464 	.word	0x08025464

0800f428 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800f432:	4a1e      	ldr	r2, [pc, #120]	; (800f4ac <_ZN11TestFailureC1ERKS_+0x84>)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	601a      	str	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	1d1a      	adds	r2, r3, #4
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	3304      	adds	r3, #4
 800f440:	4619      	mov	r1, r3
 800f442:	4610      	mov	r0, r2
 800f444:	f7fe f969 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f103 020c 	add.w	r2, r3, #12
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	330c      	adds	r3, #12
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f7fe f960 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f103 0214 	add.w	r2, r3, #20
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	3314      	adds	r3, #20
 800f464:	4619      	mov	r1, r3
 800f466:	4610      	mov	r0, r2
 800f468:	f7fe f957 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	69da      	ldr	r2, [r3, #28]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	61da      	str	r2, [r3, #28]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f103 0220 	add.w	r2, r3, #32
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	3320      	adds	r3, #32
 800f47e:	4619      	mov	r1, r3
 800f480:	4610      	mov	r0, r2
 800f482:	f7fe f94a 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	629a      	str	r2, [r3, #40]	; 0x28
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	332c      	adds	r3, #44	; 0x2c
 800f498:	4619      	mov	r1, r3
 800f49a:	4610      	mov	r0, r2
 800f49c:	f7fe f93d 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
{
}
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0802948c 	.word	0x0802948c

0800f4b0 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	4a10      	ldr	r2, [pc, #64]	; (800f4fc <_ZN11TestFailureD1Ev+0x4c>)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	332c      	adds	r3, #44	; 0x2c
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fe fc8d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3320      	adds	r3, #32
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fe fc88 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3314      	adds	r3, #20
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fe fc83 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	330c      	adds	r3, #12
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fe fc7e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe fc79 	bl	800dde2 <_ZN12SimpleStringD1Ev>
{
}
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	0802948c 	.word	0x0802948c

0800f500 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
}
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f7ff ffd1 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 800f50e:	2134      	movs	r1, #52	; 0x34
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7fb fcff 	bl	800af14 <_ZdlPvj>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
    return fileName_;
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	3314      	adds	r3, #20
 800f52e:	4619      	mov	r1, r3
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f7fe f8f2 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	3320      	adds	r3, #32
 800f54c:	4619      	mov	r1, r3
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f7fe f8e3 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
    return testName_;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	3304      	adds	r3, #4
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7fe f8d4 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b082      	sub	sp, #8
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	330c      	adds	r3, #12
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7fe f8c5 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	69db      	ldr	r3, [r3, #28]
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
    return message_;
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	332c      	adds	r3, #44	; 0x2c
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe f89e 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f103 0220 	add.w	r2, r3, #32
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3314      	adds	r3, #20
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	f7fe fc42 	bl	800de84 <_ZneRK12SimpleStringS1_>
 800f600:	4603      	mov	r3, r0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800f60a:	b480      	push	{r7}
 800f60c:	b083      	sub	sp, #12
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	69da      	ldr	r2, [r3, #28]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f61a:	429a      	cmp	r2, r3
 800f61c:	bf34      	ite	cc
 800f61e:	2301      	movcc	r3, #1
 800f620:	2300      	movcs	r3, #0
 800f622:	b2db      	uxtb	r3, r3
}
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	607a      	str	r2, [r7, #4]
 800f63c:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7fe fba2 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f644:	4604      	mov	r4, r0
 800f646:	6838      	ldr	r0, [r7, #0]
 800f648:	f7fe fb9e 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	4622      	mov	r2, r4
 800f652:	4903      	ldr	r1, [pc, #12]	; (800f660 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800f654:	f7ff f8cc 	bl	800e7f0 <_Z16StringFromFormatPKcz>
}
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	3714      	adds	r7, #20
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd90      	pop	{r4, r7, pc}
 800f660:	08025470 	.word	0x08025470

0800f664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b097      	sub	sp, #92	; 0x5c
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
 800f670:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800f672:	494c      	ldr	r1, [pc, #304]	; (800f7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7fd fffc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800f67a:	2314      	movs	r3, #20
 800f67c:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800f67e:	230a      	movs	r3, #10
 800f680:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800f682:	f107 0320 	add.w	r3, r7, #32
 800f686:	220a      	movs	r2, #10
 800f688:	4947      	ldr	r1, [pc, #284]	; (800f7a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe f80c 	bl	800d6a8 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800f690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f694:	f107 0120 	add.w	r1, r7, #32
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fe fc03 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800f6a0:	f107 0318 	add.w	r3, r7, #24
 800f6a4:	f107 0220 	add.w	r2, r7, #32
 800f6a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fe fbfa 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800f6b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe fb93 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800f6bc:	f107 0310 	add.w	r3, r7, #16
 800f6c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f6c2:	493a      	ldr	r1, [pc, #232]	; (800f7ac <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff f893 	bl	800e7f0 <_Z16StringFromFormatPKcz>

    result += "\n";
 800f6ca:	4939      	ldr	r1, [pc, #228]	; (800f7b0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f7fe fc17 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800f6d2:	f107 0310 	add.w	r3, r7, #16
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe fb56 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f6dc:	4604      	mov	r4, r0
 800f6de:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f6e2:	f107 0118 	add.w	r1, r7, #24
 800f6e6:	2314      	movs	r3, #20
 800f6e8:	683a      	ldr	r2, [r7, #0]
 800f6ea:	f7fe fc83 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 800f6ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fb48 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f6fe:	4622      	mov	r2, r4
 800f700:	492c      	ldr	r1, [pc, #176]	; (800f7b4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800f702:	f7ff f875 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800f706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f70a:	4619      	mov	r1, r3
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	f7fe fbe5 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800f712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f716:	4618      	mov	r0, r3
 800f718:	f7fe fb63 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f71c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f720:	4618      	mov	r0, r3
 800f722:	f7fe fb5e 	bl	800dde2 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800f726:	f107 0310 	add.w	r3, r7, #16
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe fb38 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 800f730:	4603      	mov	r3, r0
 800f732:	f103 020a 	add.w	r2, r3, #10
 800f736:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f73a:	491b      	ldr	r1, [pc, #108]	; (800f7a8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fd ffb3 	bl	800d6a8 <_ZN12SimpleStringC1EPKcj>
 800f742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f746:	4618      	mov	r0, r3
 800f748:	f7fe fb1e 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800f74c:	4602      	mov	r2, r0
 800f74e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f752:	4919      	ldr	r1, [pc, #100]	; (800f7b8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff f84b 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800f75a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f75e:	4619      	mov	r1, r3
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7fe fbbb 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800f766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe fb39 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f770:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f774:	4618      	mov	r0, r3
 800f776:	f7fe fb34 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return result;
 800f77a:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800f77c:	f107 0310 	add.w	r3, r7, #16
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe fb2e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800f786:	f107 0318 	add.w	r3, r7, #24
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fb29 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800f790:	f107 0320 	add.w	r3, r7, #32
 800f794:	4618      	mov	r0, r3
 800f796:	f7fe fb24 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return result;
 800f79a:	bf00      	nop
}
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	375c      	adds	r7, #92	; 0x5c
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd90      	pop	{r4, r7, pc}
 800f7a4:	08025490 	.word	0x08025490
 800f7a8:	08025494 	.word	0x08025494
 800f7ac:	08025498 	.word	0x08025498
 800f7b0:	080254c0 	.word	0x080254c0
 800f7b4:	080254c4 	.word	0x080254c4
 800f7b8:	080254cc 	.word	0x080254cc

0800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800f7bc:	b590      	push	{r4, r7, lr}
 800f7be:	b087      	sub	sp, #28
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800f7c8:	491a      	ldr	r1, [pc, #104]	; (800f834 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7fd ff51 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7fe faf5 	bl	800ddc0 <_ZNK12SimpleString7isEmptyEv>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f083 0301 	eor.w	r3, r3, #1
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d022      	beq.n	800f828 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800f7e2:	f107 0310 	add.w	r3, r7, #16
 800f7e6:	4914      	ldr	r1, [pc, #80]	; (800f838 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd ff42 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800f7ee:	f107 0310 	add.w	r3, r7, #16
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7fe f800 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f083 0301 	eor.w	r3, r3, #1
 800f800:	b2dc      	uxtb	r4, r3
 800f802:	f107 0310 	add.w	r3, r7, #16
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe faeb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f80c:	2c00      	cmp	r4, #0
 800f80e:	d003      	beq.n	800f818 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800f810:	490a      	ldr	r1, [pc, #40]	; (800f83c <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f7fe fb74 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f7fe fb5e 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800f820:	4907      	ldr	r1, [pc, #28]	; (800f840 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7fe fb6c 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800f828:	bf00      	nop
}
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	371c      	adds	r7, #28
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd90      	pop	{r4, r7, pc}
 800f832:	bf00      	nop
 800f834:	08025490 	.word	0x08025490
 800f838:	080254d4 	.word	0x080254d4
 800f83c:	080254e0 	.word	0x080254e0
 800f840:	080254ec 	.word	0x080254ec

0800f844 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b089      	sub	sp, #36	; 0x24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68b9      	ldr	r1, [r7, #8]
 800f85a:	f7ff fda7 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f85e:	4a19      	ldr	r2, [pc, #100]	; (800f8c4 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f86a:	68f9      	ldr	r1, [r7, #12]
 800f86c:	f107 0310 	add.w	r3, r7, #16
 800f870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff ffa2 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f878:	f107 0310 	add.w	r3, r7, #16
 800f87c:	4619      	mov	r1, r3
 800f87e:	4620      	mov	r0, r4
 800f880:	f7fd ff63 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800f884:	f107 0310 	add.w	r3, r7, #16
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fe faaa 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f894:	68f9      	ldr	r1, [r7, #12]
 800f896:	f107 0018 	add.w	r0, r7, #24
 800f89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f89e:	f7ff fec7 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f8a2:	f107 0318 	add.w	r3, r7, #24
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f7fe fb17 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800f8ae:	f107 0318 	add.w	r3, r7, #24
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fe fa95 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3724      	adds	r7, #36	; 0x24
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd90      	pop	{r4, r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	08029460 	.word	0x08029460

0800f8c8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800f8c8:	b5b0      	push	{r4, r5, r7, lr}
 800f8ca:	b094      	sub	sp, #80	; 0x50
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f8d0:	6239      	str	r1, [r7, #32]
 800f8d2:	61fa      	str	r2, [r7, #28]
 800f8d4:	61bb      	str	r3, [r7, #24]
 800f8d6:	ed87 0b04 	vstr	d0, [r7, #16]
 800f8da:	ed87 1b02 	vstr	d1, [r7, #8]
 800f8de:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800f8e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	6a39      	ldr	r1, [r7, #32]
 800f8ea:	f7ff fd5f 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800f8ee:	4a4a      	ldr	r2, [pc, #296]	; (800fa18 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f8fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f902:	4618      	mov	r0, r3
 800f904:	f7ff ff5a 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800f908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f90c:	4619      	mov	r1, r3
 800f90e:	4620      	mov	r0, r4
 800f910:	f7fd ff1b 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800f914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fe fa62 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f924:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800f926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f92a:	2107      	movs	r1, #7
 800f92c:	ed97 0b04 	vldr	d0, [r7, #16]
 800f930:	4618      	mov	r0, r3
 800f932:	f7fe ff1b 	bl	800e76c <_Z10StringFromdi>
 800f936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f93a:	2107      	movs	r1, #7
 800f93c:	ed97 0b02 	vldr	d0, [r7, #8]
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe ff13 	bl	800e76c <_Z10StringFromdi>
 800f946:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f94a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f94e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f952:	4629      	mov	r1, r5
 800f954:	f7ff fe6c 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800f958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f95c:	4619      	mov	r1, r3
 800f95e:	4620      	mov	r0, r4
 800f960:	f7fe fabc 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800f964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fe fa3a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f96e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f972:	4618      	mov	r0, r3
 800f974:	f7fe fa35 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800f978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fa30 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	332c      	adds	r3, #44	; 0x2c
 800f986:	4925      	ldr	r1, [pc, #148]	; (800fa1c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fe fab9 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800f98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f990:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800f994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f998:	2107      	movs	r1, #7
 800f99a:	ed97 0b00 	vldr	d0, [r7]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe fee4 	bl	800e76c <_Z10StringFromdi>
 800f9a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f7fe fa96 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800f9b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe fa14 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	332c      	adds	r3, #44	; 0x2c
 800f9be:	4918      	ldr	r1, [pc, #96]	; (800fa20 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fe fa9d 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800f9c6:	4b17      	ldr	r3, [pc, #92]	; (800fa24 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	ed97 0b04 	vldr	d0, [r7, #16]
 800f9ce:	4798      	blx	r3
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d10f      	bne.n	800f9f6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f9d6:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	ed97 0b02 	vldr	d0, [r7, #8]
 800f9de:	4798      	blx	r3
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d107      	bne.n	800f9f6 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	ed97 0b00 	vldr	d0, [r7]
 800f9ee:	4798      	blx	r3
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e000      	b.n	800f9fc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d005      	beq.n	800fa0c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800fa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa02:	332c      	adds	r3, #44	; 0x2c
 800fa04:	4908      	ldr	r1, [pc, #32]	; (800fa28 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7fe fa7a 	bl	800df00 <_ZN12SimpleStringpLEPKc>
}
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3750      	adds	r7, #80	; 0x50
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bdb0      	pop	{r4, r5, r7, pc}
 800fa16:	bf00      	nop
 800fa18:	08029434 	.word	0x08029434
 800fa1c:	080254f0 	.word	0x080254f0
 800fa20:	08025508 	.word	0x08025508
 800fa24:	200000e8 	.word	0x200000e8
 800fa28:	0802550c 	.word	0x0802550c

0800fa2c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b093      	sub	sp, #76	; 0x4c
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
 800fa38:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	f7ff fcb3 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fa46:	4a4f      	ldr	r2, [pc, #316]	; (800fb84 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fa52:	68f9      	ldr	r1, [r7, #12]
 800fa54:	f107 0320 	add.w	r3, r7, #32
 800fa58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff feae 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fa60:	f107 0320 	add.w	r3, r7, #32
 800fa64:	4619      	mov	r1, r3
 800fa66:	4620      	mov	r0, r4
 800fa68:	f7fd fe6f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800fa6c:	f107 0320 	add.w	r3, r7, #32
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fe f9b6 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800fa76:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fa78:	f7fe f986 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	f107 0318 	add.w	r3, r7, #24
 800fa82:	4611      	mov	r1, r2
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7fe fc47 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800fa8a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fa8c:	f7fe f97c 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800fa90:	4602      	mov	r2, r0
 800fa92:	f107 0310 	add.w	r3, r7, #16
 800fa96:	4611      	mov	r1, r2
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fe fc3d 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800faa4:	68f9      	ldr	r1, [r7, #12]
 800faa6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800faaa:	f107 0310 	add.w	r3, r7, #16
 800faae:	f107 0218 	add.w	r2, r7, #24
 800fab2:	f7ff fdbd 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faba:	4619      	mov	r1, r3
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7fe fa0d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800fac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe f98b 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800facc:	2300      	movs	r3, #0
 800face:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fad2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fad4:	f7fe fae9 	bl	800e0aa <_ZNK12SimpleString2atEj>
 800fad8:	4603      	mov	r3, r0
 800fada:	461c      	mov	r4, r3
 800fadc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fade:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fae0:	f7fe fae3 	bl	800e0aa <_ZNK12SimpleString2atEj>
 800fae4:	4603      	mov	r3, r0
 800fae6:	429c      	cmp	r4, r3
 800fae8:	bf0c      	ite	eq
 800faea:	2301      	moveq	r3, #1
 800faec:	2300      	movne	r3, #0
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d003      	beq.n	800fafc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800faf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf6:	3301      	adds	r3, #1
 800faf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fafa:	e7e9      	b.n	800fad0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800fafc:	2300      	movs	r3, #0
 800fafe:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb00:	f107 0310 	add.w	r3, r7, #16
 800fb04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fe facf 	bl	800e0aa <_ZNK12SimpleString2atEj>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	461c      	mov	r4, r3
 800fb10:	f107 0318 	add.w	r3, r7, #24
 800fb14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fac7 	bl	800e0aa <_ZNK12SimpleString2atEj>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	429c      	cmp	r4, r3
 800fb20:	bf0c      	ite	eq
 800fb22:	2301      	moveq	r3, #1
 800fb24:	2300      	movne	r3, #0
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d003      	beq.n	800fb34 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2e:	3301      	adds	r3, #1
 800fb30:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb32:	e7e5      	b.n	800fb00 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fb3a:	68f9      	ldr	r1, [r7, #12]
 800fb3c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800fb40:	f107 0210 	add.w	r2, r7, #16
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	f7ff fd8b 	bl	800f664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800fb4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb52:	4619      	mov	r1, r3
 800fb54:	4620      	mov	r0, r4
 800fb56:	f7fe f9c1 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800fb5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe f93f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800fb64:	f107 0310 	add.w	r3, r7, #16
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe f93a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800fb6e:	f107 0318 	add.w	r3, r7, #24
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe f935 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3744      	adds	r7, #68	; 0x44
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd90      	pop	{r4, r7, pc}
 800fb82:	bf00      	nop
 800fb84:	08029408 	.word	0x08029408

0800fb88 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800fb88:	b590      	push	{r4, r7, lr}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	68b9      	ldr	r1, [r7, #8]
 800fb9e:	f7ff fc05 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fba2:	4a1a      	ldr	r2, [pc, #104]	; (800fc0c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fbae:	68f9      	ldr	r1, [r7, #12]
 800fbb0:	f107 0310 	add.w	r3, r7, #16
 800fbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff fe00 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fbbc:	f107 0310 	add.w	r3, r7, #16
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f7fd fdc1 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800fbc8:	f107 0310 	add.w	r3, r7, #16
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe f908 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	332c      	adds	r3, #44	; 0x2c
 800fbd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fe f97f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	332c      	adds	r3, #44	; 0x2c
 800fbe2:	490b      	ldr	r1, [pc, #44]	; (800fc10 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fe f98b 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	332c      	adds	r3, #44	; 0x2c
 800fbee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe f973 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	332c      	adds	r3, #44	; 0x2c
 800fbfa:	4906      	ldr	r1, [pc, #24]	; (800fc14 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe f97f 	bl	800df00 <_ZN12SimpleStringpLEPKc>
}
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	4618      	mov	r0, r3
 800fc06:	371c      	adds	r7, #28
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd90      	pop	{r4, r7, pc}
 800fc0c:	080293dc 	.word	0x080293dc
 800fc10:	08025530 	.word	0x08025530
 800fc14:	08025534 	.word	0x08025534

0800fc18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800fc18:	b5b0      	push	{r4, r5, r7, lr}
 800fc1a:	b088      	sub	sp, #32
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	607a      	str	r2, [r7, #4]
 800fc24:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	68b9      	ldr	r1, [r7, #8]
 800fc2e:	f7ff fbbd 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fc32:	4a1c      	ldr	r2, [pc, #112]	; (800fca4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc3e:	68f9      	ldr	r1, [r7, #12]
 800fc40:	f107 0310 	add.w	r3, r7, #16
 800fc44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fdb8 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fc4c:	f107 0310 	add.w	r3, r7, #16
 800fc50:	4619      	mov	r1, r3
 800fc52:	4620      	mov	r0, r4
 800fc54:	f7fd fd79 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800fc58:	f107 0310 	add.w	r3, r7, #16
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fe f8c0 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fc68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc6a:	f7fe f88d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800fc6e:	4605      	mov	r5, r0
 800fc70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc72:	f7fe f889 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f107 0018 	add.w	r0, r7, #24
 800fc7c:	462a      	mov	r2, r5
 800fc7e:	490a      	ldr	r1, [pc, #40]	; (800fca8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800fc80:	f7fe fdb6 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 800fc84:	f107 0318 	add.w	r3, r7, #24
 800fc88:	4619      	mov	r1, r3
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f7fe f926 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800fc90:	f107 0318 	add.w	r3, r7, #24
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fe f8a4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3720      	adds	r7, #32
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bdb0      	pop	{r4, r5, r7, pc}
 800fca4:	080293b0 	.word	0x080293b0
 800fca8:	08025540 	.word	0x08025540

0800fcac <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	68b9      	ldr	r1, [r7, #8]
 800fcc2:	f7ff fb73 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fcc6:	4a1a      	ldr	r2, [pc, #104]	; (800fd30 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcd2:	68f9      	ldr	r1, [r7, #12]
 800fcd4:	f107 0310 	add.w	r3, r7, #16
 800fcd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fd6e 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fce0:	f107 0310 	add.w	r3, r7, #16
 800fce4:	4619      	mov	r1, r3
 800fce6:	4620      	mov	r0, r4
 800fce8:	f7fd fd2f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800fcec:	f107 0310 	add.w	r3, r7, #16
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe f876 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	332c      	adds	r3, #44	; 0x2c
 800fcfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe f8ed 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	332c      	adds	r3, #44	; 0x2c
 800fd06:	490b      	ldr	r1, [pc, #44]	; (800fd34 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fe f8f9 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	332c      	adds	r3, #44	; 0x2c
 800fd12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fe f8e1 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	332c      	adds	r3, #44	; 0x2c
 800fd1e:	4906      	ldr	r1, [pc, #24]	; (800fd38 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe f8ed 	bl	800df00 <_ZN12SimpleStringpLEPKc>
}
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	371c      	adds	r7, #28
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd90      	pop	{r4, r7, pc}
 800fd30:	08029384 	.word	0x08029384
 800fd34:	08025530 	.word	0x08025530
 800fd38:	08025534 	.word	0x08025534

0800fd3c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	607a      	str	r2, [r7, #4]
 800fd48:	603b      	str	r3, [r7, #0]
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	68b9      	ldr	r1, [r7, #8]
 800fd52:	f7ff fb2b 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fd56:	4a07      	ldr	r2, [pc, #28]	; (800fd74 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	332c      	adds	r3, #44	; 0x2c
 800fd60:	69b9      	ldr	r1, [r7, #24]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd fcf1 	bl	800d74a <_ZN12SimpleStringaSERKS_>
}
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	08029040 	.word	0x08029040

0800fd78 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800fd78:	b590      	push	{r4, r7, lr}
 800fd7a:	b09d      	sub	sp, #116	; 0x74
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
 800fd84:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	68b9      	ldr	r1, [r7, #8]
 800fd8e:	f7ff fb0d 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800fd92:	4a5d      	ldr	r2, [pc, #372]	; (800ff08 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd9e:	68f9      	ldr	r1, [r7, #12]
 800fda0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fda4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7ff fd07 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800fdae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f7fd fcc8 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800fdba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe f80f 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800fdc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdc8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fe fae1 	bl	800e394 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800fdd2:	f107 0320 	add.w	r3, r7, #32
 800fdd6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fe fada 	bl	800e394 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800fde0:	f107 0120 	add.w	r1, r7, #32
 800fde4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fde8:	2220      	movs	r2, #32
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe f8b6 	bl	800df5c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fdf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fdf4:	4945      	ldr	r1, [pc, #276]	; (800ff0c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fd fc3b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800fdfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fe04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe f84c 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800fe0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe12:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fe fbd2 	bl	800e5c0 <_Z30BracketsFormattedHexStringFroml>
 800fe1c:	f107 0318 	add.w	r3, r7, #24
 800fe20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fe24:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fe f83c 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800fe2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fd ffd5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800fe38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fd ffd0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800fe42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fd ffcb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fe4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fe50:	492e      	ldr	r1, [pc, #184]	; (800ff0c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fd fc0d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800fe58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fe60:	f107 0120 	add.w	r1, r7, #32
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fe f81e 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800fe6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe6e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fba4 	bl	800e5c0 <_Z30BracketsFormattedHexStringFroml>
 800fe78:	f107 0310 	add.w	r3, r7, #16
 800fe7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800fe80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe f80e 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800fe8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fd ffa7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800fe94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fd ffa2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800fe9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fd ff9d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800feae:	68f9      	ldr	r1, [r7, #12]
 800feb0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800feb4:	f107 0318 	add.w	r3, r7, #24
 800feb8:	f107 0210 	add.w	r2, r7, #16
 800febc:	f7ff fbb8 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800fec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fec4:	4619      	mov	r1, r3
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7fe f808 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 800fecc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fd ff86 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800fed6:	f107 0310 	add.w	r3, r7, #16
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fd ff81 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800fee0:	f107 0318 	add.w	r3, r7, #24
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fd ff7c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800feea:	f107 0320 	add.w	r3, r7, #32
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fd ff77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800fef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7fd ff72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	4618      	mov	r0, r3
 800ff02:	3774      	adds	r7, #116	; 0x74
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd90      	pop	{r4, r7, pc}
 800ff08:	08029358 	.word	0x08029358
 800ff0c:	08025494 	.word	0x08025494

0800ff10 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ff10:	b590      	push	{r4, r7, lr}
 800ff12:	b09d      	sub	sp, #116	; 0x74
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
 800ff1c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	68b9      	ldr	r1, [r7, #8]
 800ff26:	f7ff fa41 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ff2a:	4a5d      	ldr	r2, [pc, #372]	; (80100a0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ff36:	68f9      	ldr	r1, [r7, #12]
 800ff38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff fc3b 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800ff46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f7fd fbfc 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 800ff52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fd ff43 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800ff5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff60:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fe fc7d 	bl	800e864 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800ff6a:	f107 0320 	add.w	r3, r7, #32
 800ff6e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fe fc76 	bl	800e864 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800ff78:	f107 0120 	add.w	r1, r7, #32
 800ff7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ff80:	2220      	movs	r2, #32
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fd ffea 	bl	800df5c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ff88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ff8c:	4945      	ldr	r1, [pc, #276]	; (80100a4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fd fb6f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800ff94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff98:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800ff9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fd ff80 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800ffa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffaa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe fb22 	bl	800e5f8 <_Z30BracketsFormattedHexStringFromm>
 800ffb4:	f107 0318 	add.w	r3, r7, #24
 800ffb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ffbc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fd ff70 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 800ffc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fd ff09 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800ffd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fd ff04 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 800ffda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fd feff 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ffe4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ffe8:	492e      	ldr	r1, [pc, #184]	; (80100a4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fd fb41 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 800fff0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fff4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fff8:	f107 0120 	add.w	r1, r7, #32
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fd ff52 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8010002:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010006:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe faf4 	bl	800e5f8 <_Z30BracketsFormattedHexStringFromm>
 8010010:	f107 0310 	add.w	r3, r7, #16
 8010014:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010018:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801001c:	4618      	mov	r0, r3
 801001e:	f7fd ff42 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8010022:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fedb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801002c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010030:	4618      	mov	r0, r3
 8010032:	f7fd fed6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8010036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801003a:	4618      	mov	r0, r3
 801003c:	f7fd fed1 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010046:	68f9      	ldr	r1, [r7, #12]
 8010048:	f107 0068 	add.w	r0, r7, #104	; 0x68
 801004c:	f107 0318 	add.w	r3, r7, #24
 8010050:	f107 0210 	add.w	r2, r7, #16
 8010054:	f7ff faec 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010058:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801005c:	4619      	mov	r1, r3
 801005e:	4620      	mov	r0, r4
 8010060:	f7fd ff3c 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010064:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010068:	4618      	mov	r0, r3
 801006a:	f7fd feba 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801006e:	f107 0310 	add.w	r3, r7, #16
 8010072:	4618      	mov	r0, r3
 8010074:	f7fd feb5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010078:	f107 0318 	add.w	r3, r7, #24
 801007c:	4618      	mov	r0, r3
 801007e:	f7fd feb0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8010082:	f107 0320 	add.w	r3, r7, #32
 8010086:	4618      	mov	r0, r3
 8010088:	f7fd feab 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 801008c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010090:	4618      	mov	r0, r3
 8010092:	f7fd fea6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	4618      	mov	r0, r3
 801009a:	3774      	adds	r7, #116	; 0x74
 801009c:	46bd      	mov	sp, r7
 801009e:	bd90      	pop	{r4, r7, pc}
 80100a0:	0802932c 	.word	0x0802932c
 80100a4:	08025494 	.word	0x08025494

080100a8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 80100a8:	b590      	push	{r4, r7, lr}
 80100aa:	b09d      	sub	sp, #116	; 0x74
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	68b9      	ldr	r1, [r7, #8]
 80100be:	f7ff f975 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 80100c2:	4a5f      	ldr	r2, [pc, #380]	; (8010240 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80100ce:	68f9      	ldr	r1, [r7, #12]
 80100d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff fb6f 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 80100de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100e2:	4619      	mov	r1, r3
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7fd fb30 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 80100ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fd fe77 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 80100f4:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 80100f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80100fc:	4611      	mov	r1, r2
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe f936 	bl	800e370 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8010104:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8010108:	f107 0320 	add.w	r3, r7, #32
 801010c:	4611      	mov	r1, r2
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe f92e 	bl	800e370 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8010114:	f107 0120 	add.w	r1, r7, #32
 8010118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801011c:	2220      	movs	r2, #32
 801011e:	4618      	mov	r0, r3
 8010120:	f7fd ff1c 	bl	800df5c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010124:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010128:	4946      	ldr	r1, [pc, #280]	; (8010244 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd faa1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8010130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010134:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010138:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801013c:	4618      	mov	r0, r3
 801013e:	f7fd feb2 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8010142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010146:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 801014a:	4611      	mov	r1, r2
 801014c:	4618      	mov	r0, r3
 801014e:	f7fe fa6f 	bl	800e630 <_Z30BracketsFormattedHexStringFroma>
 8010152:	f107 0318 	add.w	r3, r7, #24
 8010156:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801015a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801015e:	4618      	mov	r0, r3
 8010160:	f7fd fea1 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8010164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010168:	4618      	mov	r0, r3
 801016a:	f7fd fe3a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801016e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010172:	4618      	mov	r0, r3
 8010174:	f7fd fe35 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8010178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801017c:	4618      	mov	r0, r3
 801017e:	f7fd fe30 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010182:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010186:	492f      	ldr	r1, [pc, #188]	; (8010244 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8010188:	4618      	mov	r0, r3
 801018a:	f7fd fa72 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801018e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010192:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010196:	f107 0120 	add.w	r1, r7, #32
 801019a:	4618      	mov	r0, r3
 801019c:	f7fd fe83 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 80101a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80101a4:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 80101a8:	4611      	mov	r1, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe fa40 	bl	800e630 <_Z30BracketsFormattedHexStringFroma>
 80101b0:	f107 0310 	add.w	r3, r7, #16
 80101b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80101b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fd fe72 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 80101c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fd fe0b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80101cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fd fe06 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80101d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fd fe01 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80101ec:	f107 0318 	add.w	r3, r7, #24
 80101f0:	f107 0210 	add.w	r2, r7, #16
 80101f4:	f7ff fa1c 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80101f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101fc:	4619      	mov	r1, r3
 80101fe:	4620      	mov	r0, r4
 8010200:	f7fd fe6c 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010204:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010208:	4618      	mov	r0, r3
 801020a:	f7fd fdea 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801020e:	f107 0310 	add.w	r3, r7, #16
 8010212:	4618      	mov	r0, r3
 8010214:	f7fd fde5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010218:	f107 0318 	add.w	r3, r7, #24
 801021c:	4618      	mov	r0, r3
 801021e:	f7fd fde0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8010222:	f107 0320 	add.w	r3, r7, #32
 8010226:	4618      	mov	r0, r3
 8010228:	f7fd fddb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 801022c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010230:	4618      	mov	r0, r3
 8010232:	f7fd fdd6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	4618      	mov	r0, r3
 801023a:	3774      	adds	r7, #116	; 0x74
 801023c:	46bd      	mov	sp, r7
 801023e:	bd90      	pop	{r4, r7, pc}
 8010240:	08029300 	.word	0x08029300
 8010244:	08025494 	.word	0x08025494

08010248 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010248:	b590      	push	{r4, r7, lr}
 801024a:	b093      	sub	sp, #76	; 0x4c
 801024c:	af02      	add	r7, sp, #8
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
 8010254:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	68b9      	ldr	r1, [r7, #8]
 801025e:	f7ff f8a5 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010262:	4a4a      	ldr	r2, [pc, #296]	; (801038c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801026e:	68f9      	ldr	r1, [r7, #12]
 8010270:	f107 0320 	add.w	r3, r7, #32
 8010274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff faa0 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 801027c:	f107 0320 	add.w	r3, r7, #32
 8010280:	4619      	mov	r1, r3
 8010282:	4620      	mov	r0, r4
 8010284:	f7fd fa61 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 8010288:	f107 0320 	add.w	r3, r7, #32
 801028c:	4618      	mov	r0, r3
 801028e:	f7fd fda8 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010292:	f107 0318 	add.w	r3, r7, #24
 8010296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe f83d 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 801029e:	f107 0310 	add.w	r3, r7, #16
 80102a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7fe f837 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80102b0:	68f9      	ldr	r1, [r7, #12]
 80102b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80102b6:	f107 0310 	add.w	r3, r7, #16
 80102ba:	f107 0218 	add.w	r2, r7, #24
 80102be:	f7ff f9b7 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80102c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102c6:	4619      	mov	r1, r3
 80102c8:	4620      	mov	r0, r4
 80102ca:	f7fd fe07 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 80102ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fd fd85 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 80102d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d046      	beq.n	801036c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 80102de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d043      	beq.n	801036c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 80102e4:	2300      	movs	r3, #0
 80102e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ec:	4413      	add	r3, r2
 80102ee:	781a      	ldrb	r2, [r3, #0]
 80102f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102f4:	440b      	add	r3, r1
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d103      	bne.n	8010304 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 80102fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102fe:	3301      	adds	r3, #1
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010302:	e7f1      	b.n	80102e8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010304:	2300      	movs	r3, #0
 8010306:	63bb      	str	r3, [r7, #56]	; 0x38
 8010308:	f107 0310 	add.w	r3, r7, #16
 801030c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801030e:	4618      	mov	r0, r3
 8010310:	f7fd fecb 	bl	800e0aa <_ZNK12SimpleString2atEj>
 8010314:	4603      	mov	r3, r0
 8010316:	461c      	mov	r4, r3
 8010318:	f107 0318 	add.w	r3, r7, #24
 801031c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801031e:	4618      	mov	r0, r3
 8010320:	f7fd fec3 	bl	800e0aa <_ZNK12SimpleString2atEj>
 8010324:	4603      	mov	r3, r0
 8010326:	429c      	cmp	r4, r3
 8010328:	bf0c      	ite	eq
 801032a:	2301      	moveq	r3, #1
 801032c:	2300      	movne	r3, #0
 801032e:	b2db      	uxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d003      	beq.n	801033c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8010334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010336:	3301      	adds	r3, #1
 8010338:	63bb      	str	r3, [r7, #56]	; 0x38
 801033a:	e7e5      	b.n	8010308 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010342:	68f9      	ldr	r1, [r7, #12]
 8010344:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010348:	f107 0210 	add.w	r2, r7, #16
 801034c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010352:	f7ff f987 	bl	800f664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801035a:	4619      	mov	r1, r3
 801035c:	4620      	mov	r0, r4
 801035e:	f7fd fdbd 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010366:	4618      	mov	r0, r3
 8010368:	f7fd fd3b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 801036c:	f107 0310 	add.w	r3, r7, #16
 8010370:	4618      	mov	r0, r3
 8010372:	f7fd fd36 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010376:	f107 0318 	add.w	r3, r7, #24
 801037a:	4618      	mov	r0, r3
 801037c:	f7fd fd31 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
}
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	4618      	mov	r0, r3
 8010384:	3744      	adds	r7, #68	; 0x44
 8010386:	46bd      	mov	sp, r7
 8010388:	bd90      	pop	{r4, r7, pc}
 801038a:	bf00      	nop
 801038c:	080292d4 	.word	0x080292d4

08010390 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010390:	b590      	push	{r4, r7, lr}
 8010392:	b093      	sub	sp, #76	; 0x4c
 8010394:	af02      	add	r7, sp, #8
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
 801039c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	68b9      	ldr	r1, [r7, #8]
 80103a6:	f7ff f801 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 80103aa:	4a55      	ldr	r2, [pc, #340]	; (8010500 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80103b6:	68f9      	ldr	r1, [r7, #12]
 80103b8:	f107 0320 	add.w	r3, r7, #32
 80103bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103be:	4618      	mov	r0, r3
 80103c0:	f7ff f9fc 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 80103c4:	f107 0320 	add.w	r3, r7, #32
 80103c8:	4619      	mov	r1, r3
 80103ca:	4620      	mov	r0, r4
 80103cc:	f7fd f9bd 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 80103d0:	f107 0320 	add.w	r3, r7, #32
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7fd fd04 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80103da:	f107 0318 	add.w	r3, r7, #24
 80103de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fd ff99 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80103e6:	f107 0310 	add.w	r3, r7, #16
 80103ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fd ff93 	bl	800e318 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80103f8:	68f9      	ldr	r1, [r7, #12]
 80103fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80103fe:	f107 0310 	add.w	r3, r7, #16
 8010402:	f107 0218 	add.w	r2, r7, #24
 8010406:	f7ff f913 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 801040a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801040e:	4619      	mov	r1, r3
 8010410:	4620      	mov	r0, r4
 8010412:	f7fd fd63 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801041a:	4618      	mov	r0, r3
 801041c:	f7fd fce1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8010420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010422:	2b00      	cmp	r3, #0
 8010424:	d05c      	beq.n	80104e0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8010426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010428:	2b00      	cmp	r3, #0
 801042a:	d059      	beq.n	80104e0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 801042c:	2300      	movs	r3, #0
 801042e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010430:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010434:	4413      	add	r3, r2
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fd f824 	bl	800d486 <_ZN12SimpleString7ToLowerEc>
 801043e:	4603      	mov	r3, r0
 8010440:	461c      	mov	r4, r3
 8010442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010446:	4413      	add	r3, r2
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	4618      	mov	r0, r3
 801044c:	f7fd f81b 	bl	800d486 <_ZN12SimpleString7ToLowerEc>
 8010450:	4603      	mov	r3, r0
 8010452:	429c      	cmp	r4, r3
 8010454:	bf0c      	ite	eq
 8010456:	2301      	moveq	r3, #1
 8010458:	2300      	movne	r3, #0
 801045a:	b2db      	uxtb	r3, r3
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8010460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010462:	3301      	adds	r3, #1
 8010464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010466:	e7e3      	b.n	8010430 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8010468:	2300      	movs	r3, #0
 801046a:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 801046c:	f107 0310 	add.w	r3, r7, #16
 8010470:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd fe19 	bl	800e0aa <_ZNK12SimpleString2atEj>
 8010478:	4603      	mov	r3, r0
 801047a:	4618      	mov	r0, r3
 801047c:	f7fd f803 	bl	800d486 <_ZN12SimpleString7ToLowerEc>
 8010480:	4603      	mov	r3, r0
 8010482:	461c      	mov	r4, r3
 8010484:	f107 0318 	add.w	r3, r7, #24
 8010488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801048a:	4618      	mov	r0, r3
 801048c:	f7fd fe0d 	bl	800e0aa <_ZNK12SimpleString2atEj>
 8010490:	4603      	mov	r3, r0
 8010492:	4618      	mov	r0, r3
 8010494:	f7fc fff7 	bl	800d486 <_ZN12SimpleString7ToLowerEc>
 8010498:	4603      	mov	r3, r0
 801049a:	429c      	cmp	r4, r3
 801049c:	bf0c      	ite	eq
 801049e:	2301      	moveq	r3, #1
 80104a0:	2300      	movne	r3, #0
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d003      	beq.n	80104b0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 80104a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104aa:	3301      	adds	r3, #1
 80104ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80104ae:	e7dd      	b.n	801046c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80104bc:	f107 0210 	add.w	r2, r7, #16
 80104c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	f7ff f8cd 	bl	800f664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80104ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104ce:	4619      	mov	r1, r3
 80104d0:	4620      	mov	r0, r4
 80104d2:	f7fd fd03 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 80104d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fd fc81 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80104e0:	f107 0310 	add.w	r3, r7, #16
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd fc7c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80104ea:	f107 0318 	add.w	r3, r7, #24
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fd fc77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
}
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	4618      	mov	r0, r3
 80104f8:	3744      	adds	r7, #68	; 0x44
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd90      	pop	{r4, r7, pc}
 80104fe:	bf00      	nop
 8010500:	080292a8 	.word	0x080292a8

08010504 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8010504:	b5b0      	push	{r4, r5, r7, lr}
 8010506:	b092      	sub	sp, #72	; 0x48
 8010508:	af02      	add	r7, sp, #8
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	68b9      	ldr	r1, [r7, #8]
 801051a:	f7fe ff47 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 801051e:	4a40      	ldr	r2, [pc, #256]	; (8010620 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801052a:	68f9      	ldr	r1, [r7, #12]
 801052c:	f107 031c 	add.w	r3, r7, #28
 8010530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f942 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010538:	f107 031c 	add.w	r3, r7, #28
 801053c:	4619      	mov	r1, r3
 801053e:	4620      	mov	r0, r4
 8010540:	f7fd f903 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 8010544:	f107 031c 	add.w	r3, r7, #28
 8010548:	4618      	mov	r0, r3
 801054a:	f7fd fc4a 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 801054e:	f107 0314 	add.w	r3, r7, #20
 8010552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010556:	4618      	mov	r0, r3
 8010558:	f7fe fa4c 	bl	800e9f4 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010562:	68fd      	ldr	r5, [r7, #12]
 8010564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010568:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801056a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801056c:	4618      	mov	r0, r3
 801056e:	f7fe fa41 	bl	800e9f4 <_Z22StringFromBinaryOrNullPKhj>
 8010572:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010576:	f107 0314 	add.w	r3, r7, #20
 801057a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801057e:	4629      	mov	r1, r5
 8010580:	f7ff f856 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010588:	4619      	mov	r1, r3
 801058a:	4620      	mov	r0, r4
 801058c:	f7fd fca6 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010594:	4618      	mov	r0, r3
 8010596:	f7fd fc24 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801059a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fd fc1f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 80105a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d02f      	beq.n	801060a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 80105aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d02c      	beq.n	801060a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 80105b0:	2300      	movs	r3, #0
 80105b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b8:	4413      	add	r3, r2
 80105ba:	781a      	ldrb	r2, [r3, #0]
 80105bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c0:	440b      	add	r3, r1
 80105c2:	781b      	ldrb	r3, [r3, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d103      	bne.n	80105d0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 80105c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ca:	3301      	adds	r3, #1
 80105cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105ce:	e7f1      	b.n	80105b4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105da:	4613      	mov	r3, r2
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	4413      	add	r3, r2
 80105e0:	1c5d      	adds	r5, r3, #1
 80105e2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80105e6:	f107 0214 	add.w	r2, r7, #20
 80105ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	462b      	mov	r3, r5
 80105f0:	f7ff f838 	bl	800f664 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80105f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105f8:	4619      	mov	r1, r3
 80105fa:	4620      	mov	r0, r4
 80105fc:	f7fd fc6e 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8010600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd fbec 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 801060a:	f107 0314 	add.w	r3, r7, #20
 801060e:	4618      	mov	r0, r3
 8010610:	f7fd fbe7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
	}
}
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	4618      	mov	r0, r3
 8010618:	3740      	adds	r7, #64	; 0x40
 801061a:	46bd      	mov	sp, r7
 801061c:	bdb0      	pop	{r4, r5, r7, pc}
 801061e:	bf00      	nop
 8010620:	0802927c 	.word	0x0802927c

08010624 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8010624:	b5b0      	push	{r4, r5, r7, lr}
 8010626:	b08c      	sub	sp, #48	; 0x30
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010632:	68f8      	ldr	r0, [r7, #12]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	68b9      	ldr	r1, [r7, #8]
 801063a:	f7fe feb7 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 801063e:	4a26      	ldr	r2, [pc, #152]	; (80106d8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801064a:	68f9      	ldr	r1, [r7, #12]
 801064c:	f107 0310 	add.w	r3, r7, #16
 8010650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010652:	4618      	mov	r0, r3
 8010654:	f7ff f8b2 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010658:	f107 0310 	add.w	r3, r7, #16
 801065c:	4619      	mov	r1, r3
 801065e:	4620      	mov	r0, r4
 8010660:	f7fd f873 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 8010664:	f107 0310 	add.w	r3, r7, #16
 8010668:	4618      	mov	r0, r3
 801066a:	f7fd fbba 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010674:	68fd      	ldr	r5, [r7, #12]
 8010676:	f107 0020 	add.w	r0, r7, #32
 801067a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801067e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010680:	f7fe fa24 	bl	800eacc <_Z20StringFromMaskedBitsmmj>
 8010684:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801068a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801068c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801068e:	f7fe fa1d 	bl	800eacc <_Z20StringFromMaskedBitsmmj>
 8010692:	f107 0018 	add.w	r0, r7, #24
 8010696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801069a:	f107 0220 	add.w	r2, r7, #32
 801069e:	4629      	mov	r1, r5
 80106a0:	f7fe ffc6 	bl	800f630 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80106a4:	f107 0318 	add.w	r3, r7, #24
 80106a8:	4619      	mov	r1, r3
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7fd fc16 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 80106b0:	f107 0318 	add.w	r3, r7, #24
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd fb94 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80106ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fd fb8f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80106c4:	f107 0320 	add.w	r3, r7, #32
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fd fb8a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	4618      	mov	r0, r3
 80106d2:	3730      	adds	r7, #48	; 0x30
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bdb0      	pop	{r4, r5, r7, pc}
 80106d8:	08029250 	.word	0x08029250

080106dc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 80106dc:	b590      	push	{r4, r7, lr}
 80106de:	b089      	sub	sp, #36	; 0x24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	607a      	str	r2, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	68b9      	ldr	r1, [r7, #8]
 80106f2:	f7fe fe5b 	bl	800f3ac <_ZN11TestFailureC1EP10UtestShellPKcj>
 80106f6:	4a1a      	ldr	r2, [pc, #104]	; (8010760 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010702:	68f9      	ldr	r1, [r7, #12]
 8010704:	f107 0310 	add.w	r3, r7, #16
 8010708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801070a:	4618      	mov	r0, r3
 801070c:	f7ff f856 	bl	800f7bc <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010710:	f107 0310 	add.w	r3, r7, #16
 8010714:	4619      	mov	r1, r3
 8010716:	4620      	mov	r0, r4
 8010718:	f7fd f817 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801071c:	f107 0310 	add.w	r3, r7, #16
 8010720:	4618      	mov	r0, r3
 8010722:	f7fd fb5e 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801072c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801072e:	f7fd fb2b 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8010732:	4602      	mov	r2, r0
 8010734:	f107 0318 	add.w	r3, r7, #24
 8010738:	490a      	ldr	r1, [pc, #40]	; (8010764 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 801073a:	4618      	mov	r0, r3
 801073c:	f7fe f858 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 8010740:	f107 0318 	add.w	r3, r7, #24
 8010744:	4619      	mov	r1, r3
 8010746:	4620      	mov	r0, r4
 8010748:	f7fd fbc8 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801074c:	f107 0318 	add.w	r3, r7, #24
 8010750:	4618      	mov	r0, r3
 8010752:	f7fd fb46 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	4618      	mov	r0, r3
 801075a:	3724      	adds	r7, #36	; 0x24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd90      	pop	{r4, r7, pc}
 8010760:	08029224 	.word	0x08029224
 8010764:	08025564 	.word	0x08025564

08010768 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	4a05      	ldr	r2, [pc, #20]	; (8010788 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe fe99 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	08029224 	.word	0x08029224

0801078c <_ZN25FeatureUnsupportedFailureD0Ev>:
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff ffe7 	bl	8010768 <_ZN25FeatureUnsupportedFailureD1Ev>
 801079a:	2134      	movs	r1, #52	; 0x34
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7fa fbb9 	bl	800af14 <_ZdlPvj>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	4a05      	ldr	r2, [pc, #20]	; (80107cc <_ZN16BitsEqualFailureD1Ev+0x20>)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fe fe77 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	08029250 	.word	0x08029250

080107d0 <_ZN16BitsEqualFailureD0Ev>:
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff ffe7 	bl	80107ac <_ZN16BitsEqualFailureD1Ev>
 80107de:	2134      	movs	r1, #52	; 0x34
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7fa fb97 	bl	800af14 <_ZdlPvj>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	4a05      	ldr	r2, [pc, #20]	; (8010810 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	601a      	str	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4618      	mov	r0, r3
 8010802:	f7fe fe55 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	0802927c 	.word	0x0802927c

08010814 <_ZN18BinaryEqualFailureD0Ev>:
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff ffe7 	bl	80107f0 <_ZN18BinaryEqualFailureD1Ev>
 8010822:	2134      	movs	r1, #52	; 0x34
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7fa fb75 	bl	800af14 <_ZdlPvj>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	4a05      	ldr	r2, [pc, #20]	; (8010854 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	f7fe fe33 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	080292a8 	.word	0x080292a8

08010858 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff ffe7 	bl	8010834 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010866:	2134      	movs	r1, #52	; 0x34
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7fa fb53 	bl	800af14 <_ZdlPvj>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	4a05      	ldr	r2, [pc, #20]	; (8010898 <_ZN18StringEqualFailureD1Ev+0x20>)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	f7fe fe11 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	080292d4 	.word	0x080292d4

0801089c <_ZN18StringEqualFailureD0Ev>:
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7ff ffe7 	bl	8010878 <_ZN18StringEqualFailureD1Ev>
 80108aa:	2134      	movs	r1, #52	; 0x34
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fa fb31 	bl	800af14 <_ZdlPvj>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4618      	mov	r0, r3
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	4a05      	ldr	r2, [pc, #20]	; (80108dc <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fe fdef 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	08029300 	.word	0x08029300

080108e0 <_ZN23SignedBytesEqualFailureD0Ev>:
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff ffe7 	bl	80108bc <_ZN23SignedBytesEqualFailureD1Ev>
 80108ee:	2134      	movs	r1, #52	; 0x34
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7fa fb0f 	bl	800af14 <_ZdlPvj>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	4a05      	ldr	r2, [pc, #20]	; (8010920 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	601a      	str	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe fdcd 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	3708      	adds	r7, #8
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	0802932c 	.word	0x0802932c

08010924 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f7ff ffe7 	bl	8010900 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8010932:	2134      	movs	r1, #52	; 0x34
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7fa faed 	bl	800af14 <_ZdlPvj>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	4a05      	ldr	r2, [pc, #20]	; (8010964 <_ZN17LongsEqualFailureD1Ev+0x20>)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe fdab 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4618      	mov	r0, r3
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}
 8010964:	08029358 	.word	0x08029358

08010968 <_ZN17LongsEqualFailureD0Ev>:
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff ffe7 	bl	8010944 <_ZN17LongsEqualFailureD1Ev>
 8010976:	2134      	movs	r1, #52	; 0x34
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7fa facb 	bl	800af14 <_ZdlPvj>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	4618      	mov	r0, r3
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	4a05      	ldr	r2, [pc, #20]	; (80109a8 <_ZN12CheckFailureD1Ev+0x20>)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	601a      	str	r2, [r3, #0]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	f7fe fd89 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	08029384 	.word	0x08029384

080109ac <_ZN12CheckFailureD0Ev>:
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f7ff ffe7 	bl	8010988 <_ZN12CheckFailureD1Ev>
 80109ba:	2134      	movs	r1, #52	; 0x34
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7fa faa9 	bl	800af14 <_ZdlPvj>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	4a05      	ldr	r2, [pc, #20]	; (80109ec <_ZN15ContainsFailureD1Ev+0x20>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fd67 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	080293b0 	.word	0x080293b0

080109f0 <_ZN15ContainsFailureD0Ev>:
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ffe7 	bl	80109cc <_ZN15ContainsFailureD1Ev>
 80109fe:	2134      	movs	r1, #52	; 0x34
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7fa fa87 	bl	800af14 <_ZdlPvj>
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	4a05      	ldr	r2, [pc, #20]	; (8010a30 <_ZN17ComparisonFailureD1Ev+0x20>)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fe fd45 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	080293dc 	.word	0x080293dc

08010a34 <_ZN17ComparisonFailureD0Ev>:
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff ffe7 	bl	8010a10 <_ZN17ComparisonFailureD1Ev>
 8010a42:	2134      	movs	r1, #52	; 0x34
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7fa fa65 	bl	800af14 <_ZdlPvj>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	4a05      	ldr	r2, [pc, #20]	; (8010a74 <_ZN17CheckEqualFailureD1Ev+0x20>)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fe fd23 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	08029408 	.word	0x08029408

08010a78 <_ZN17CheckEqualFailureD0Ev>:
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ffe7 	bl	8010a54 <_ZN17CheckEqualFailureD1Ev>
 8010a86:	2134      	movs	r1, #52	; 0x34
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7fa fa43 	bl	800af14 <_ZdlPvj>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b082      	sub	sp, #8
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	4a05      	ldr	r2, [pc, #20]	; (8010ab8 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	601a      	str	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fe fd01 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	08029434 	.word	0x08029434

08010abc <_ZN19DoublesEqualFailureD0Ev>:
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6878      	ldr	r0, [r7, #4]
 8010ac6:	f7ff ffe7 	bl	8010a98 <_ZN19DoublesEqualFailureD1Ev>
 8010aca:	2134      	movs	r1, #52	; 0x34
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7fa fa21 	bl	800af14 <_ZdlPvj>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	4a05      	ldr	r2, [pc, #20]	; (8010afc <_ZN13EqualsFailureD1Ev+0x20>)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	601a      	str	r2, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fcdf 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	08029460 	.word	0x08029460

08010b00 <_ZN13EqualsFailureD0Ev>:
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ffe7 	bl	8010adc <_ZN13EqualsFailureD1Ev>
 8010b0e:	2134      	movs	r1, #52	; 0x34
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f7fa f9ff 	bl	800af14 <_ZdlPvj>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8010b20:	b5b0      	push	{r4, r5, r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af02      	add	r7, sp, #8
 8010b26:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8010b28:	4b0d      	ldr	r3, [pc, #52]	; (8010b60 <_ZL13checkedMallocj+0x40>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	4798      	blx	r3
 8010b30:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d10e      	bne.n	8010b56 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8010b38:	f004 f97e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	6823      	ldr	r3, [r4, #0]
 8010b40:	3368      	adds	r3, #104	; 0x68
 8010b42:	681d      	ldr	r5, [r3, #0]
 8010b44:	f004 f988 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	2325      	movs	r3, #37	; 0x25
 8010b4e:	4a05      	ldr	r2, [pc, #20]	; (8010b64 <_ZL13checkedMallocj+0x44>)
 8010b50:	4905      	ldr	r1, [pc, #20]	; (8010b68 <_ZL13checkedMallocj+0x48>)
 8010b52:	4620      	mov	r0, r4
 8010b54:	47a8      	blx	r5
    return mem;
 8010b56:	68fb      	ldr	r3, [r7, #12]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3710      	adds	r7, #16
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b60:	200000c8 	.word	0x200000c8
 8010b64:	080255d8 	.word	0x080255d8
 8010b68:	080255f8 	.word	0x080255f8

08010b6c <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8010b70:	4b04      	ldr	r3, [pc, #16]	; (8010b84 <_Z22getCurrentNewAllocatorv+0x18>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <_Z22getCurrentNewAllocatorv+0x10>
 8010b78:	f000 f806 	bl	8010b88 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8010b7c:	4b01      	ldr	r3, [pc, #4]	; (8010b84 <_Z22getCurrentNewAllocatorv+0x18>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	20000924 	.word	0x20000924

08010b88 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8010b8c:	f000 f810 	bl	8010bb0 <_Z19defaultNewAllocatorv>
 8010b90:	4603      	mov	r3, r0
 8010b92:	4a02      	ldr	r2, [pc, #8]	; (8010b9c <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8010b94:	6013      	str	r3, [r2, #0]
}
 8010b96:	bf00      	nop
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20000924 	.word	0x20000924

08010ba0 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	4801      	ldr	r0, [pc, #4]	; (8010bac <__tcf_0+0xc>)
 8010ba6:	f000 f909 	bl	8010dbc <_ZN19TestMemoryAllocatorD1Ev>
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20000930 	.word	0x20000930

08010bb0 <_Z19defaultNewAllocatorv>:
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8010bb4:	4b13      	ldr	r3, [pc, #76]	; (8010c04 <_Z19defaultNewAllocatorv+0x54>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	f3bf 8f5b 	dmb	ish
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	bf0c      	ite	eq
 8010bc6:	2301      	moveq	r3, #1
 8010bc8:	2300      	movne	r3, #0
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d016      	beq.n	8010bfe <_Z19defaultNewAllocatorv+0x4e>
 8010bd0:	480c      	ldr	r0, [pc, #48]	; (8010c04 <_Z19defaultNewAllocatorv+0x54>)
 8010bd2:	f00f fc0d 	bl	80203f0 <__cxa_guard_acquire>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	bf14      	ite	ne
 8010bdc:	2301      	movne	r3, #1
 8010bde:	2300      	moveq	r3, #0
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00b      	beq.n	8010bfe <_Z19defaultNewAllocatorv+0x4e>
 8010be6:	4b08      	ldr	r3, [pc, #32]	; (8010c08 <_Z19defaultNewAllocatorv+0x58>)
 8010be8:	4a08      	ldr	r2, [pc, #32]	; (8010c0c <_Z19defaultNewAllocatorv+0x5c>)
 8010bea:	4909      	ldr	r1, [pc, #36]	; (8010c10 <_Z19defaultNewAllocatorv+0x60>)
 8010bec:	4809      	ldr	r0, [pc, #36]	; (8010c14 <_Z19defaultNewAllocatorv+0x64>)
 8010bee:	f000 f8c5 	bl	8010d7c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010bf2:	4804      	ldr	r0, [pc, #16]	; (8010c04 <_Z19defaultNewAllocatorv+0x54>)
 8010bf4:	f00f fc08 	bl	8020408 <__cxa_guard_release>
 8010bf8:	4807      	ldr	r0, [pc, #28]	; (8010c18 <_Z19defaultNewAllocatorv+0x68>)
 8010bfa:	f00f fc2c 	bl	8020456 <atexit>
    return &allocator;
 8010bfe:	4b05      	ldr	r3, [pc, #20]	; (8010c14 <_Z19defaultNewAllocatorv+0x64>)
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	20000944 	.word	0x20000944
 8010c08:	08025618 	.word	0x08025618
 8010c0c:	08025620 	.word	0x08025620
 8010c10:	08025624 	.word	0x08025624
 8010c14:	20000930 	.word	0x20000930
 8010c18:	08010ba1 	.word	0x08010ba1

08010c1c <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8010c20:	4b04      	ldr	r3, [pc, #16]	; (8010c34 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d101      	bne.n	8010c2c <_Z27getCurrentNewArrayAllocatorv+0x10>
 8010c28:	f000 f806 	bl	8010c38 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8010c2c:	4b01      	ldr	r3, [pc, #4]	; (8010c34 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	20000928 	.word	0x20000928

08010c38 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8010c3c:	f000 f810 	bl	8010c60 <_Z24defaultNewArrayAllocatorv>
 8010c40:	4603      	mov	r3, r0
 8010c42:	4a02      	ldr	r2, [pc, #8]	; (8010c4c <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8010c44:	6013      	str	r3, [r2, #0]
}
 8010c46:	bf00      	nop
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	20000928 	.word	0x20000928

08010c50 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	4801      	ldr	r0, [pc, #4]	; (8010c5c <__tcf_1+0xc>)
 8010c56:	f000 f8b1 	bl	8010dbc <_ZN19TestMemoryAllocatorD1Ev>
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	20000948 	.word	0x20000948

08010c60 <_Z24defaultNewArrayAllocatorv>:
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8010c64:	4b13      	ldr	r3, [pc, #76]	; (8010cb4 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	f3bf 8f5b 	dmb	ish
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	f003 0301 	and.w	r3, r3, #1
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	bf0c      	ite	eq
 8010c76:	2301      	moveq	r3, #1
 8010c78:	2300      	movne	r3, #0
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d016      	beq.n	8010cae <_Z24defaultNewArrayAllocatorv+0x4e>
 8010c80:	480c      	ldr	r0, [pc, #48]	; (8010cb4 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010c82:	f00f fbb5 	bl	80203f0 <__cxa_guard_acquire>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	bf14      	ite	ne
 8010c8c:	2301      	movne	r3, #1
 8010c8e:	2300      	moveq	r3, #0
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d00b      	beq.n	8010cae <_Z24defaultNewArrayAllocatorv+0x4e>
 8010c96:	4b08      	ldr	r3, [pc, #32]	; (8010cb8 <_Z24defaultNewArrayAllocatorv+0x58>)
 8010c98:	4a08      	ldr	r2, [pc, #32]	; (8010cbc <_Z24defaultNewArrayAllocatorv+0x5c>)
 8010c9a:	4909      	ldr	r1, [pc, #36]	; (8010cc0 <_Z24defaultNewArrayAllocatorv+0x60>)
 8010c9c:	4809      	ldr	r0, [pc, #36]	; (8010cc4 <_Z24defaultNewArrayAllocatorv+0x64>)
 8010c9e:	f000 f86d 	bl	8010d7c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010ca2:	4804      	ldr	r0, [pc, #16]	; (8010cb4 <_Z24defaultNewArrayAllocatorv+0x54>)
 8010ca4:	f00f fbb0 	bl	8020408 <__cxa_guard_release>
 8010ca8:	4807      	ldr	r0, [pc, #28]	; (8010cc8 <_Z24defaultNewArrayAllocatorv+0x68>)
 8010caa:	f00f fbd4 	bl	8020456 <atexit>
    return &allocator;
 8010cae:	4b05      	ldr	r3, [pc, #20]	; (8010cc4 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	2000095c 	.word	0x2000095c
 8010cb8:	0802563c 	.word	0x0802563c
 8010cbc:	08025648 	.word	0x08025648
 8010cc0:	08025650 	.word	0x08025650
 8010cc4:	20000948 	.word	0x20000948
 8010cc8:	08010c51 	.word	0x08010c51

08010ccc <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8010cd0:	4b04      	ldr	r3, [pc, #16]	; (8010ce4 <_Z25getCurrentMallocAllocatorv+0x18>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d101      	bne.n	8010cdc <_Z25getCurrentMallocAllocatorv+0x10>
 8010cd8:	f000 f806 	bl	8010ce8 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8010cdc:	4b01      	ldr	r3, [pc, #4]	; (8010ce4 <_Z25getCurrentMallocAllocatorv+0x18>)
 8010cde:	681b      	ldr	r3, [r3, #0]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	2000092c 	.word	0x2000092c

08010ce8 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8010cec:	f000 f810 	bl	8010d10 <_Z22defaultMallocAllocatorv>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	4a02      	ldr	r2, [pc, #8]	; (8010cfc <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8010cf4:	6013      	str	r3, [r2, #0]
}
 8010cf6:	bf00      	nop
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	2000092c 	.word	0x2000092c

08010d00 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	4801      	ldr	r0, [pc, #4]	; (8010d0c <__tcf_2+0xc>)
 8010d06:	f000 f859 	bl	8010dbc <_ZN19TestMemoryAllocatorD1Ev>
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	20000960 	.word	0x20000960

08010d10 <_Z22defaultMallocAllocatorv>:
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8010d14:	4b13      	ldr	r3, [pc, #76]	; (8010d64 <_Z22defaultMallocAllocatorv+0x54>)
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	f3bf 8f5b 	dmb	ish
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	f003 0301 	and.w	r3, r3, #1
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	bf0c      	ite	eq
 8010d26:	2301      	moveq	r3, #1
 8010d28:	2300      	movne	r3, #0
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d016      	beq.n	8010d5e <_Z22defaultMallocAllocatorv+0x4e>
 8010d30:	480c      	ldr	r0, [pc, #48]	; (8010d64 <_Z22defaultMallocAllocatorv+0x54>)
 8010d32:	f00f fb5d 	bl	80203f0 <__cxa_guard_acquire>
 8010d36:	4603      	mov	r3, r0
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	bf14      	ite	ne
 8010d3c:	2301      	movne	r3, #1
 8010d3e:	2300      	moveq	r3, #0
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00b      	beq.n	8010d5e <_Z22defaultMallocAllocatorv+0x4e>
 8010d46:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <_Z22defaultMallocAllocatorv+0x58>)
 8010d48:	4a08      	ldr	r2, [pc, #32]	; (8010d6c <_Z22defaultMallocAllocatorv+0x5c>)
 8010d4a:	4909      	ldr	r1, [pc, #36]	; (8010d70 <_Z22defaultMallocAllocatorv+0x60>)
 8010d4c:	4809      	ldr	r0, [pc, #36]	; (8010d74 <_Z22defaultMallocAllocatorv+0x64>)
 8010d4e:	f000 f815 	bl	8010d7c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010d52:	4804      	ldr	r0, [pc, #16]	; (8010d64 <_Z22defaultMallocAllocatorv+0x54>)
 8010d54:	f00f fb58 	bl	8020408 <__cxa_guard_release>
 8010d58:	4807      	ldr	r0, [pc, #28]	; (8010d78 <_Z22defaultMallocAllocatorv+0x68>)
 8010d5a:	f00f fb7c 	bl	8020456 <atexit>
    return &allocator;
 8010d5e:	4b05      	ldr	r3, [pc, #20]	; (8010d74 <_Z22defaultMallocAllocatorv+0x64>)
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	20000974 	.word	0x20000974
 8010d68:	0802566c 	.word	0x0802566c
 8010d6c:	08025674 	.word	0x08025674
 8010d70:	0802567c 	.word	0x0802567c
 8010d74:	20000960 	.word	0x20000960
 8010d78:	08010d01 	.word	0x08010d01

08010d7c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
 8010d88:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8010d8a:	4a0b      	ldr	r2, [pc, #44]	; (8010db8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	601a      	str	r2, [r3, #0]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	605a      	str	r2, [r3, #4]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	609a      	str	r2, [r3, #8]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	683a      	ldr	r2, [r7, #0]
 8010da0:	60da      	str	r2, [r3, #12]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2200      	movs	r2, #0
 8010da6:	741a      	strb	r2, [r3, #16]
{
}
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	4618      	mov	r0, r3
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	080294ec 	.word	0x080294ec

08010dbc <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	4a06      	ldr	r2, [pc, #24]	; (8010de0 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2201      	movs	r2, #1
 8010dce:	741a      	strb	r2, [r3, #16]
}
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	370c      	adds	r7, #12
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	080294ec 	.word	0x080294ec

08010de4 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
}
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7ff ffe5 	bl	8010dbc <_ZN19TestMemoryAllocatorD1Ev>
 8010df2:	2114      	movs	r1, #20
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7fa f88d 	bl	800af14 <_ZdlPvj>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}

08010e04 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	7c1b      	ldrb	r3, [r3, #16]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8010e1c:	b590      	push	{r4, r7, lr}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	3310      	adds	r3, #16
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	4798      	blx	r3
 8010e32:	4604      	mov	r4, r0
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	3310      	adds	r3, #16
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	6838      	ldr	r0, [r7, #0]
 8010e3e:	4798      	blx	r3
 8010e40:	4603      	mov	r3, r0
 8010e42:	4619      	mov	r1, r3
 8010e44:	4620      	mov	r0, r4
 8010e46:	f7fc fa51 	bl	800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2db      	uxtb	r3, r3
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd90      	pop	{r4, r7, pc}
	...

08010e60 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8010e60:	b590      	push	{r4, r7, lr}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	3308      	adds	r3, #8
 8010e70:	681c      	ldr	r4, [r3, #0]
 8010e72:	2301      	movs	r3, #1
 8010e74:	4a04      	ldr	r2, [pc, #16]	; (8010e88 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8010e76:	6839      	ldr	r1, [r7, #0]
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	47a0      	blx	r4
 8010e7c:	4603      	mov	r3, r0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	370c      	adds	r7, #12
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd90      	pop	{r4, r7, pc}
 8010e86:	bf00      	nop
 8010e88:	08025698 	.word	0x08025698

08010e8c <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8010e8c:	b590      	push	{r4, r7, lr}
 8010e8e:	b085      	sub	sp, #20
 8010e90:	af02      	add	r7, sp, #8
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	330c      	adds	r3, #12
 8010e9c:	681c      	ldr	r4, [r3, #0]
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	47a0      	blx	r4
}
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}
 8010eb4:	08025698 	.word	0x08025698

08010eb8 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
 8010ec4:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8010ec6:	68b8      	ldr	r0, [r7, #8]
 8010ec8:	f7ff fe2a 	bl	8010b20 <_ZL13checkedMallocj>
 8010ecc:	4603      	mov	r3, r0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
	...

08010ed8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
 8010ee4:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8010ee6:	4b04      	ldr	r3, [pc, #16]	; (8010ef8 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68b8      	ldr	r0, [r7, #8]
 8010eec:	4798      	blx	r3
}
 8010eee:	bf00      	nop
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	200000d0 	.word	0x200000d0

08010efc <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
    return name_;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	370c      	adds	r7, #12
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	689b      	ldr	r3, [r3, #8]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
    return free_name_;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68db      	ldr	r3, [r3, #12]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	370c      	adds	r7, #12
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
    return this;
 8010f4c:	687b      	ldr	r3, [r7, #4]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
	...

08010f5c <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	4a05      	ldr	r2, [pc, #20]	; (8010f7c <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	601a      	str	r2, [r3, #0]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7ff ff25 	bl	8010dbc <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	080294b8 	.word	0x080294b8

08010f80 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
}
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f7ff ffe7 	bl	8010f5c <_ZN20NullUnknownAllocatorD1Ev>
 8010f8e:	2114      	movs	r1, #20
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7f9 ffbf 	bl	800af14 <_ZdlPvj>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
 8010fac:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3714      	adds	r7, #20
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b085      	sub	sp, #20
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	607a      	str	r2, [r7, #4]
 8010fc8:	603b      	str	r3, [r7, #0]
}
 8010fca:	bf00      	nop
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
	...

08010fd8 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	4b06      	ldr	r3, [pc, #24]	; (8010ffc <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010fe4:	4a05      	ldr	r2, [pc, #20]	; (8010ffc <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8010fe6:	4906      	ldr	r1, [pc, #24]	; (8011000 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8010fe8:	f7ff fec8 	bl	8010d7c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8010fec:	4a05      	ldr	r2, [pc, #20]	; (8011004 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	601a      	str	r2, [r3, #0]
{
}
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	080256cc 	.word	0x080256cc
 8011000:	080256d4 	.word	0x080256d4
 8011004:	080294b8 	.word	0x080294b8

08011008 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8011008:	b580      	push	{r7, lr}
 801100a:	af00      	add	r7, sp, #0
 801100c:	4801      	ldr	r0, [pc, #4]	; (8011014 <__tcf_3+0xc>)
 801100e:	f7ff ffa5 	bl	8010f5c <_ZN20NullUnknownAllocatorD1Ev>
 8011012:	bd80      	pop	{r7, pc}
 8011014:	20000978 	.word	0x20000978

08011018 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8011018:	b580      	push	{r7, lr}
 801101a:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 801101c:	4b12      	ldr	r3, [pc, #72]	; (8011068 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	f3bf 8f5b 	dmb	ish
 8011024:	b2db      	uxtb	r3, r3
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	bf0c      	ite	eq
 801102e:	2301      	moveq	r3, #1
 8011030:	2300      	movne	r3, #0
 8011032:	b2db      	uxtb	r3, r3
 8011034:	2b00      	cmp	r3, #0
 8011036:	d013      	beq.n	8011060 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8011038:	480b      	ldr	r0, [pc, #44]	; (8011068 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801103a:	f00f f9d9 	bl	80203f0 <__cxa_guard_acquire>
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	bf14      	ite	ne
 8011044:	2301      	movne	r3, #1
 8011046:	2300      	moveq	r3, #0
 8011048:	b2db      	uxtb	r3, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d008      	beq.n	8011060 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 801104e:	4807      	ldr	r0, [pc, #28]	; (801106c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8011050:	f7ff ffc2 	bl	8010fd8 <_ZN20NullUnknownAllocatorC1Ev>
 8011054:	4804      	ldr	r0, [pc, #16]	; (8011068 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8011056:	f00f f9d7 	bl	8020408 <__cxa_guard_release>
 801105a:	4805      	ldr	r0, [pc, #20]	; (8011070 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 801105c:	f00f f9fb 	bl	8020456 <atexit>
    return &allocator;
 8011060:	4b02      	ldr	r3, [pc, #8]	; (801106c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8011062:	4618      	mov	r0, r3
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	2000098c 	.word	0x2000098c
 801106c:	20000978 	.word	0x20000978
 8011070:	08011009 	.word	0x08011009

08011074 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8011074:	b480      	push	{r7}
 8011076:	b083      	sub	sp, #12
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
        return testCount_;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	689b      	ldr	r3, [r3, #8]
    }
 8011080:	4618      	mov	r0, r3
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr

0801108c <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	699b      	ldr	r3, [r3, #24]
    }
 8011098:	4618      	mov	r0, r3
 801109a:	370c      	adds	r7, #12
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 80110a8:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	2b02      	cmp	r3, #2
 80110ae:	d103      	bne.n	80110b8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 80110b0:	f004 fa4a 	bl	8015548 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 80110b4:	4603      	mov	r3, r0
 80110b6:	e001      	b.n	80110bc <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 80110b8:	4b01      	ldr	r3, [pc, #4]	; (80110c0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80110ba:	781b      	ldrb	r3, [r3, #0]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20000088 	.word	0x20000088

080110c4 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 80110cc:	4a0a      	ldr	r2, [pc, #40]	; (80110f8 <_ZN10TestOutputC1Ev+0x34>)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2200      	movs	r2, #0
 80110d6:	605a      	str	r2, [r3, #4]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	721a      	strb	r2, [r3, #8]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	725a      	strb	r2, [r3, #9]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4a05      	ldr	r2, [pc, #20]	; (80110fc <_ZN10TestOutputC1Ev+0x38>)
 80110e8:	60da      	str	r2, [r3, #12]
{
}
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	4618      	mov	r0, r3
 80110ee:	370c      	adds	r7, #12
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	080295f0 	.word	0x080295f0
 80110fc:	08025ad4 	.word	0x08025ad4

08011100 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	4a04      	ldr	r2, [pc, #16]	; (801111c <_ZN10TestOutputD1Ev+0x1c>)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	601a      	str	r2, [r3, #0]
{
}
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr
 801111c:	080295f0 	.word	0x080295f0

08011120 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	460b      	mov	r3, r1
 801112a:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	78fa      	ldrb	r2, [r7, #3]
 8011130:	721a      	strb	r2, [r3, #8]
}
 8011132:	bf00      	nop
 8011134:	370c      	adds	r7, #12
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 801113e:	b480      	push	{r7}
 8011140:	b083      	sub	sp, #12
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
    color_ = true;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2201      	movs	r2, #1
 801114a:	725a      	strb	r2, [r3, #9]
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	3328      	adds	r3, #40	; 0x28
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6839      	ldr	r1, [r7, #0]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	4798      	blx	r3
}
 8011170:	bf00      	nop
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8011178:	b590      	push	{r4, r7, lr}
 801117a:	b085      	sub	sp, #20
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	332c      	adds	r3, #44	; 0x2c
 8011188:	681c      	ldr	r4, [r3, #0]
 801118a:	f107 0308 	add.w	r3, r7, #8
 801118e:	6839      	ldr	r1, [r7, #0]
 8011190:	4618      	mov	r0, r3
 8011192:	f7fd f8ff 	bl	800e394 <_Z10StringFroml>
 8011196:	f107 0308 	add.w	r3, r7, #8
 801119a:	4618      	mov	r0, r3
 801119c:	f7fc fdf4 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 80111a0:	4603      	mov	r3, r0
 80111a2:	4619      	mov	r1, r3
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	47a0      	blx	r4
 80111a8:	f107 0308 	add.w	r3, r7, #8
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fc fe18 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80111b2:	bf00      	nop
 80111b4:	3714      	adds	r7, #20
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd90      	pop	{r4, r7, pc}

080111ba <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 80111ba:	b590      	push	{r4, r7, lr}
 80111bc:	b085      	sub	sp, #20
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	332c      	adds	r3, #44	; 0x2c
 80111ca:	681c      	ldr	r4, [r3, #0]
 80111cc:	f107 0308 	add.w	r3, r7, #8
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fd fb34 	bl	800e840 <_Z10StringFromj>
 80111d8:	f107 0308 	add.w	r3, r7, #8
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fc fdd3 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 80111e2:	4603      	mov	r3, r0
 80111e4:	4619      	mov	r1, r3
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	47a0      	blx	r4
 80111ea:	f107 0308 	add.w	r3, r7, #8
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fc fdf7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80111f4:	bf00      	nop
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd90      	pop	{r4, r7, pc}

080111fc <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 80111fc:	b590      	push	{r4, r7, lr}
 80111fe:	b087      	sub	sp, #28
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	332c      	adds	r3, #44	; 0x2c
 801120e:	681c      	ldr	r4, [r3, #0]
 8011210:	f107 0310 	add.w	r3, r7, #16
 8011214:	2106      	movs	r1, #6
 8011216:	ed97 0b00 	vldr	d0, [r7]
 801121a:	4618      	mov	r0, r3
 801121c:	f7fd faa6 	bl	800e76c <_Z10StringFromdi>
 8011220:	f107 0310 	add.w	r3, r7, #16
 8011224:	4618      	mov	r0, r3
 8011226:	f7fc fdaf 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801122a:	4603      	mov	r3, r0
 801122c:	4619      	mov	r1, r3
 801122e:	68f8      	ldr	r0, [r7, #12]
 8011230:	47a0      	blx	r4
 8011232:	f107 0310 	add.w	r3, r7, #16
 8011236:	4618      	mov	r0, r3
 8011238:	f7fc fdd3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801123c:	bf00      	nop
 801123e:	371c      	adds	r7, #28
 8011240:	46bd      	mov	sp, r7
 8011242:	bd90      	pop	{r4, r7, pc}

08011244 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
    p.print(s);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	332c      	adds	r3, #44	; 0x2c
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	4798      	blx	r3
    return p;
 801125c:	687b      	ldr	r3, [r7, #4]
}
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
	...

08011268 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	7a1b      	ldrb	r3, [r3, #8]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d01a      	beq.n	80112b0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	332c      	adds	r3, #44	; 0x2c
 8011280:	681c      	ldr	r4, [r3, #0]
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	3314      	adds	r3, #20
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f107 0208 	add.w	r2, r7, #8
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	4610      	mov	r0, r2
 8011292:	4798      	blx	r3
 8011294:	f107 0308 	add.w	r3, r7, #8
 8011298:	4618      	mov	r0, r3
 801129a:	f7fc fd75 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801129e:	4603      	mov	r3, r0
 80112a0:	4619      	mov	r1, r3
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	47a0      	blx	r4
 80112a6:	f107 0308 	add.w	r3, r7, #8
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fc fd99 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	3318      	adds	r3, #24
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6838      	ldr	r0, [r7, #0]
 80112ba:	4798      	blx	r3
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d007      	beq.n	80112d2 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3344      	adds	r3, #68	; 0x44
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4907      	ldr	r1, [pc, #28]	; (80112e8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 80112d0:	e006      	b.n	80112e0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	3344      	adds	r3, #68	; 0x44
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4904      	ldr	r1, [pc, #16]	; (80112ec <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	4798      	blx	r3
}
 80112e0:	bf00      	nop
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd90      	pop	{r4, r7, pc}
 80112e8:	08025ad4 	.word	0x08025ad4
 80112ec:	08025ad8 	.word	0x08025ad8

080112f0 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	7a1b      	ldrb	r3, [r3, #8]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d019      	beq.n	8011336 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	332c      	adds	r3, #44	; 0x2c
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4910      	ldr	r1, [pc, #64]	; (801134c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	3334      	adds	r3, #52	; 0x34
 8011316:	681c      	ldr	r4, [r3, #0]
 8011318:	6838      	ldr	r0, [r7, #0]
 801131a:	f002 f845 	bl	80133a8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 801131e:	4603      	mov	r3, r0
 8011320:	4619      	mov	r1, r3
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	47a0      	blx	r4
        print(" ms\n");
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	332c      	adds	r3, #44	; 0x2c
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	4908      	ldr	r1, [pc, #32]	; (8011350 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8011334:	e005      	b.n	8011342 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	3358      	adds	r3, #88	; 0x58
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	4798      	blx	r3
}
 8011342:	bf00      	nop
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	bd90      	pop	{r4, r7, pc}
 801134a:	bf00      	nop
 801134c:	08025adc 	.word	0x08025adc
 8011350:	08025ae0 	.word	0x08025ae0

08011354 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	332c      	adds	r3, #44	; 0x2c
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	687a      	ldr	r2, [r7, #4]
 8011366:	68d2      	ldr	r2, [r2, #12]
 8011368:	4611      	mov	r1, r2
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	605a      	str	r2, [r3, #4]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685a      	ldr	r2, [r3, #4]
 801137c:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 801137e:	fb83 1302 	smull	r1, r3, r3, r2
 8011382:	1119      	asrs	r1, r3, #4
 8011384:	17d3      	asrs	r3, r2, #31
 8011386:	1acb      	subs	r3, r1, r3
 8011388:	2132      	movs	r1, #50	; 0x32
 801138a:	fb01 f303 	mul.w	r3, r1, r3
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	2b00      	cmp	r3, #0
 8011392:	bf0c      	ite	eq
 8011394:	2301      	moveq	r3, #1
 8011396:	2300      	movne	r3, #0
 8011398:	b2db      	uxtb	r3, r3
 801139a:	2b00      	cmp	r3, #0
 801139c:	d006      	beq.n	80113ac <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	332c      	adds	r3, #44	; 0x2c
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4904      	ldr	r1, [pc, #16]	; (80113b8 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	4798      	blx	r3
}
 80113ac:	bf00      	nop
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	51eb851f 	.word	0x51eb851f
 80113b8:	08025ae8 	.word	0x08025ae8

080113bc <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	60da      	str	r2, [r3, #12]
}
 80113cc:	bf00      	nop
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr

080113d8 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
}
 80113e0:	bf00      	nop
 80113e2:	370c      	adds	r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
}
 80113f6:	bf00      	nop
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8011402:	b480      	push	{r7}
 8011404:	b083      	sub	sp, #12
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	6039      	str	r1, [r7, #0]
}
 801140c:	bf00      	nop
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	6039      	str	r1, [r7, #0]
    print("\n");
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	332c      	adds	r3, #44	; 0x2c
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	496f      	ldr	r1, [pc, #444]	; (80115e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8011430:	6838      	ldr	r0, [r7, #0]
 8011432:	f7f8 f83d 	bl	80094b0 <_ZNK10TestResult9isFailureEv>
 8011436:	4603      	mov	r3, r0
 8011438:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 801143a:	6838      	ldr	r0, [r7, #0]
 801143c:	f7f8 f82c 	bl	8009498 <_ZNK10TestResult15getFailureCountEv>
 8011440:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8011442:	7bfb      	ldrb	r3, [r7, #15]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d02b      	beq.n	80114a0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7a5b      	ldrb	r3, [r3, #9]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d006      	beq.n	801145e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	332c      	adds	r3, #44	; 0x2c
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4964      	ldr	r1, [pc, #400]	; (80115ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	4798      	blx	r3
        }
        print("Errors (");
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	332c      	adds	r3, #44	; 0x2c
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	4962      	ldr	r1, [pc, #392]	; (80115f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	4798      	blx	r3
        if (failureCount > 0) {
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00e      	beq.n	8011490 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	3334      	adds	r3, #52	; 0x34
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	68b9      	ldr	r1, [r7, #8]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	4798      	blx	r3
            print(" failures, ");
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	332c      	adds	r3, #44	; 0x2c
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	495a      	ldr	r1, [pc, #360]	; (80115f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	4798      	blx	r3
 801148e:	e019      	b.n	80114c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	332c      	adds	r3, #44	; 0x2c
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4957      	ldr	r1, [pc, #348]	; (80115f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	4798      	blx	r3
 801149e:	e011      	b.n	80114c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7a5b      	ldrb	r3, [r3, #9]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d006      	beq.n	80114b6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	332c      	adds	r3, #44	; 0x2c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4952      	ldr	r1, [pc, #328]	; (80115fc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	4798      	blx	r3
        }
        print("OK (");
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	332c      	adds	r3, #44	; 0x2c
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4950      	ldr	r1, [pc, #320]	; (8011600 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	4798      	blx	r3
    }
    print(result.getTestCount());
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	3334      	adds	r3, #52	; 0x34
 80114ca:	681c      	ldr	r4, [r3, #0]
 80114cc:	6838      	ldr	r0, [r7, #0]
 80114ce:	f7ff fdd1 	bl	8011074 <_ZNK10TestResult12getTestCountEv>
 80114d2:	4603      	mov	r3, r0
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	47a0      	blx	r4
    print(" tests, ");
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	332c      	adds	r3, #44	; 0x2c
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4948      	ldr	r1, [pc, #288]	; (8011604 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	4798      	blx	r3
    print(result.getRunCount());
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	3334      	adds	r3, #52	; 0x34
 80114ee:	681c      	ldr	r4, [r3, #0]
 80114f0:	6838      	ldr	r0, [r7, #0]
 80114f2:	f7f7 ffb9 	bl	8009468 <_ZNK10TestResult11getRunCountEv>
 80114f6:	4603      	mov	r3, r0
 80114f8:	4619      	mov	r1, r3
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	47a0      	blx	r4
    print(" ran, ");
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	332c      	adds	r3, #44	; 0x2c
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	4940      	ldr	r1, [pc, #256]	; (8011608 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	4798      	blx	r3
    print(result.getCheckCount());
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	3334      	adds	r3, #52	; 0x34
 8011512:	681c      	ldr	r4, [r3, #0]
 8011514:	6838      	ldr	r0, [r7, #0]
 8011516:	f7f8 fc13 	bl	8009d40 <_ZNK10TestResult13getCheckCountEv>
 801151a:	4603      	mov	r3, r0
 801151c:	4619      	mov	r1, r3
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	47a0      	blx	r4
    print(" checks, ");
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	332c      	adds	r3, #44	; 0x2c
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4938      	ldr	r1, [pc, #224]	; (801160c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	4798      	blx	r3
    print(result.getIgnoredCount());
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	3334      	adds	r3, #52	; 0x34
 8011536:	681c      	ldr	r4, [r3, #0]
 8011538:	6838      	ldr	r0, [r7, #0]
 801153a:	f7f7 ffa1 	bl	8009480 <_ZNK10TestResult15getIgnoredCountEv>
 801153e:	4603      	mov	r3, r0
 8011540:	4619      	mov	r1, r3
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	47a0      	blx	r4
    print(" ignored, ");
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	332c      	adds	r3, #44	; 0x2c
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4930      	ldr	r1, [pc, #192]	; (8011610 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	3334      	adds	r3, #52	; 0x34
 801155a:	681c      	ldr	r4, [r3, #0]
 801155c:	6838      	ldr	r0, [r7, #0]
 801155e:	f7ff fd95 	bl	801108c <_ZNK10TestResult19getFilteredOutCountEv>
 8011562:	4603      	mov	r3, r0
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	47a0      	blx	r4
    print(" filtered out, ");
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	332c      	adds	r3, #44	; 0x2c
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	4928      	ldr	r1, [pc, #160]	; (8011614 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	3334      	adds	r3, #52	; 0x34
 801157e:	681c      	ldr	r4, [r3, #0]
 8011580:	6838      	ldr	r0, [r7, #0]
 8011582:	f001 ff05 	bl	8013390 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8011586:	4603      	mov	r3, r0
 8011588:	4619      	mov	r1, r3
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	47a0      	blx	r4
    print(" ms)");
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	332c      	adds	r3, #44	; 0x2c
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4920      	ldr	r1, [pc, #128]	; (8011618 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	4798      	blx	r3
    if (color_) {
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	7a5b      	ldrb	r3, [r3, #9]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d006      	beq.n	80115b2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	332c      	adds	r3, #44	; 0x2c
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	491b      	ldr	r1, [pc, #108]	; (801161c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d009      	beq.n	80115cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	332c      	adds	r3, #44	; 0x2c
 80115c4:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80115c6:	4916      	ldr	r1, [pc, #88]	; (8011620 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	4798      	blx	r3
    }
    print("\n\n");
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	332c      	adds	r3, #44	; 0x2c
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4913      	ldr	r1, [pc, #76]	; (8011624 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	4798      	blx	r3

    dotCount_ = 0;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2200      	movs	r2, #0
 80115de:	605a      	str	r2, [r3, #4]
}
 80115e0:	bf00      	nop
 80115e2:	3714      	adds	r7, #20
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd90      	pop	{r4, r7, pc}
 80115e8:	08025ae8 	.word	0x08025ae8
 80115ec:	08025aec 	.word	0x08025aec
 80115f0:	08025af4 	.word	0x08025af4
 80115f4:	08025b00 	.word	0x08025b00
 80115f8:	08025b0c 	.word	0x08025b0c
 80115fc:	08025b1c 	.word	0x08025b1c
 8011600:	08025b24 	.word	0x08025b24
 8011604:	08025b2c 	.word	0x08025b2c
 8011608:	08025b38 	.word	0x08025b38
 801160c:	08025b40 	.word	0x08025b40
 8011610:	08025b4c 	.word	0x08025b4c
 8011614:	08025b58 	.word	0x08025b58
 8011618:	08025b68 	.word	0x08025b68
 801161c:	08025b70 	.word	0x08025b70
 8011620:	08025b74 	.word	0x08025b74
 8011624:	08025c18 	.word	0x08025c18

08011628 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d922      	bls.n	8011680 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	332c      	adds	r3, #44	; 0x2c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	4911      	ldr	r1, [pc, #68]	; (8011688 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	4798      	blx	r3
        print(number);
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	3334      	adds	r3, #52	; 0x34
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	68b9      	ldr	r1, [r7, #8]
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	4798      	blx	r3
        print(" of ");
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	332c      	adds	r3, #44	; 0x2c
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	490b      	ldr	r1, [pc, #44]	; (801168c <_ZN10TestOutput12printTestRunEjj+0x64>)
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	4798      	blx	r3
        print(total);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	3334      	adds	r3, #52	; 0x34
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	6879      	ldr	r1, [r7, #4]
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	4798      	blx	r3
        print("\n");
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	332c      	adds	r3, #44	; 0x2c
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4905      	ldr	r1, [pc, #20]	; (8011690 <_ZN10TestOutput12printTestRunEjj+0x68>)
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	4798      	blx	r3
    }
}
 8011680:	bf00      	nop
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08025c1c 	.word	0x08025c1c
 801168c:	08025c28 	.word	0x08025c28
 8011690:	08025ae8 	.word	0x08025ae8

08011694 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 801169e:	6838      	ldr	r0, [r7, #0]
 80116a0:	f7fd ffa1 	bl	800f5e6 <_ZNK11TestFailure17isOutsideTestFileEv>
 80116a4:	4603      	mov	r3, r0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d105      	bne.n	80116b6 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 80116aa:	6838      	ldr	r0, [r7, #0]
 80116ac:	f7fd ffad 	bl	800f60a <_ZNK11TestFailure18isInHelperFunctionEv>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d001      	beq.n	80116ba <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 80116b6:	2301      	movs	r3, #1
 80116b8:	e000      	b.n	80116bc <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 80116ba:	2300      	movs	r3, #0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d004      	beq.n	80116ca <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80116c0:	6839      	ldr	r1, [r7, #0]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 f81d 	bl	8011702 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80116c8:	e003      	b.n	80116d2 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f86b 	bl	80117a8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3318      	adds	r3, #24
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f107 0208 	add.w	r2, r7, #8
 80116de:	6839      	ldr	r1, [r7, #0]
 80116e0:	4610      	mov	r0, r2
 80116e2:	4798      	blx	r3
 80116e4:	f107 0308 	add.w	r3, r7, #8
 80116e8:	4619      	mov	r1, r3
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 f8b2 	bl	8011854 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 80116f0:	f107 0308 	add.w	r3, r7, #8
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fc fb74 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b088      	sub	sp, #32
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
 801170a:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	331c      	adds	r3, #28
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f107 0208 	add.w	r2, r7, #8
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	4610      	mov	r0, r2
 801171c:	4798      	blx	r3
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	3320      	adds	r3, #32
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	6838      	ldr	r0, [r7, #0]
 8011728:	4798      	blx	r3
 801172a:	4602      	mov	r2, r0
 801172c:	f107 0308 	add.w	r3, r7, #8
 8011730:	4619      	mov	r1, r3
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 f8be 	bl	80118b4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011738:	f107 0308 	add.w	r3, r7, #8
 801173c:	4618      	mov	r0, r3
 801173e:	f7fc fb50 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	330c      	adds	r3, #12
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f107 0210 	add.w	r2, r7, #16
 801174e:	6839      	ldr	r1, [r7, #0]
 8011750:	4610      	mov	r0, r2
 8011752:	4798      	blx	r3
 8011754:	f107 0310 	add.w	r3, r7, #16
 8011758:	4619      	mov	r1, r3
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f85c 	bl	8011818 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8011760:	f107 0310 	add.w	r3, r7, #16
 8011764:	4618      	mov	r0, r3
 8011766:	f7fc fb3c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	3308      	adds	r3, #8
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f107 0218 	add.w	r2, r7, #24
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	4610      	mov	r0, r2
 801177a:	4798      	blx	r3
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	3314      	adds	r3, #20
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	6838      	ldr	r0, [r7, #0]
 8011786:	4798      	blx	r3
 8011788:	4602      	mov	r2, r0
 801178a:	f107 0318 	add.w	r3, r7, #24
 801178e:	4619      	mov	r1, r3
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f000 f88f 	bl	80118b4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8011796:	f107 0318 	add.w	r3, r7, #24
 801179a:	4618      	mov	r0, r3
 801179c:	f7fc fb21 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80117a0:	bf00      	nop
 80117a2:	3720      	adds	r7, #32
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b086      	sub	sp, #24
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	3308      	adds	r3, #8
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f107 0208 	add.w	r2, r7, #8
 80117be:	6839      	ldr	r1, [r7, #0]
 80117c0:	4610      	mov	r0, r2
 80117c2:	4798      	blx	r3
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	3314      	adds	r3, #20
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	6838      	ldr	r0, [r7, #0]
 80117ce:	4798      	blx	r3
 80117d0:	4602      	mov	r2, r0
 80117d2:	f107 0308 	add.w	r3, r7, #8
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f86b 	bl	80118b4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80117de:	f107 0308 	add.w	r3, r7, #8
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fc fafd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	330c      	adds	r3, #12
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f107 0210 	add.w	r2, r7, #16
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	4610      	mov	r0, r2
 80117f8:	4798      	blx	r3
 80117fa:	f107 0310 	add.w	r3, r7, #16
 80117fe:	4619      	mov	r1, r3
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 f809 	bl	8011818 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8011806:	f107 0310 	add.w	r3, r7, #16
 801180a:	4618      	mov	r0, r3
 801180c:	f7fc fae9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8011810:	bf00      	nop
 8011812:	3718      	adds	r7, #24
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}

08011818 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8011818:	b590      	push	{r4, r7, lr}
 801181a:	b083      	sub	sp, #12
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	332c      	adds	r3, #44	; 0x2c
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	4909      	ldr	r1, [pc, #36]	; (8011850 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	4798      	blx	r3
    print(testName.asCharString());
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	332c      	adds	r3, #44	; 0x2c
 8011836:	681c      	ldr	r4, [r3, #0]
 8011838:	6838      	ldr	r0, [r7, #0]
 801183a:	f7fc faa5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801183e:	4603      	mov	r3, r0
 8011840:	4619      	mov	r1, r3
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	47a0      	blx	r4
}
 8011846:	bf00      	nop
 8011848:	370c      	adds	r7, #12
 801184a:	46bd      	mov	sp, r7
 801184c:	bd90      	pop	{r4, r7, pc}
 801184e:	bf00      	nop
 8011850:	08025c30 	.word	0x08025c30

08011854 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8011854:	b590      	push	{r4, r7, lr}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
    print("\n");
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	332c      	adds	r3, #44	; 0x2c
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4910      	ldr	r1, [pc, #64]	; (80118a8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	4798      	blx	r3
    print("\t");
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	332c      	adds	r3, #44	; 0x2c
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	490d      	ldr	r1, [pc, #52]	; (80118ac <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	4798      	blx	r3
    print(reason.asCharString());
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	332c      	adds	r3, #44	; 0x2c
 8011880:	681c      	ldr	r4, [r3, #0]
 8011882:	6838      	ldr	r0, [r7, #0]
 8011884:	f7fc fa80 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8011888:	4603      	mov	r3, r0
 801188a:	4619      	mov	r1, r3
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	47a0      	blx	r4
    print("\n\n");
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	332c      	adds	r3, #44	; 0x2c
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4905      	ldr	r1, [pc, #20]	; (80118b0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	4798      	blx	r3
}
 801189e:	bf00      	nop
 80118a0:	370c      	adds	r7, #12
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd90      	pop	{r4, r7, pc}
 80118a6:	bf00      	nop
 80118a8:	08025ae8 	.word	0x08025ae8
 80118ac:	08025c40 	.word	0x08025c40
 80118b0:	08025c18 	.word	0x08025c18

080118b4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80118b4:	b590      	push	{r4, r7, lr}
 80118b6:	b089      	sub	sp, #36	; 0x24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80118c0:	f7ff fbf0 	bl	80110a4 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80118c4:	4603      	mov	r3, r0
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	bf0c      	ite	eq
 80118ca:	2301      	moveq	r3, #1
 80118cc:	2300      	movne	r3, #0
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d015      	beq.n	8011900 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3354      	adds	r3, #84	; 0x54
 80118da:	681c      	ldr	r4, [r3, #0]
 80118dc:	f107 0310 	add.w	r3, r7, #16
 80118e0:	68b9      	ldr	r1, [r7, #8]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fb ff19 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 80118e8:	f107 0310 	add.w	r3, r7, #16
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	4619      	mov	r1, r3
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	47a0      	blx	r4
 80118f4:	f107 0310 	add.w	r3, r7, #16
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7fc fa72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 80118fe:	e014      	b.n	801192a <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	3350      	adds	r3, #80	; 0x50
 8011906:	681c      	ldr	r4, [r3, #0]
 8011908:	f107 0318 	add.w	r3, r7, #24
 801190c:	68b9      	ldr	r1, [r7, #8]
 801190e:	4618      	mov	r0, r3
 8011910:	f7fb ff03 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 8011914:	f107 0318 	add.w	r3, r7, #24
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	4619      	mov	r1, r3
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	47a0      	blx	r4
 8011920:	f107 0318 	add.w	r3, r7, #24
 8011924:	4618      	mov	r0, r3
 8011926:	f7fc fa5c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801192a:	bf00      	nop
 801192c:	3724      	adds	r7, #36	; 0x24
 801192e:	46bd      	mov	sp, r7
 8011930:	bd90      	pop	{r4, r7, pc}
	...

08011934 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b085      	sub	sp, #20
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
    print("\n");
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	332c      	adds	r3, #44	; 0x2c
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4916      	ldr	r1, [pc, #88]	; (80119a4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	4798      	blx	r3
    print(file.asCharString());
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	332c      	adds	r3, #44	; 0x2c
 8011954:	681c      	ldr	r4, [r3, #0]
 8011956:	68b8      	ldr	r0, [r7, #8]
 8011958:	f7fc fa16 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801195c:	4603      	mov	r3, r0
 801195e:	4619      	mov	r1, r3
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	47a0      	blx	r4
    print(":");
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	332c      	adds	r3, #44	; 0x2c
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	490e      	ldr	r1, [pc, #56]	; (80119a8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	4798      	blx	r3
    print(lineNumber);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3334      	adds	r3, #52	; 0x34
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	6879      	ldr	r1, [r7, #4]
 801197c:	68f8      	ldr	r0, [r7, #12]
 801197e:	4798      	blx	r3
    print(":");
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	332c      	adds	r3, #44	; 0x2c
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4907      	ldr	r1, [pc, #28]	; (80119a8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	4798      	blx	r3
    print(" error:");
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	332c      	adds	r3, #44	; 0x2c
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4905      	ldr	r1, [pc, #20]	; (80119ac <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	4798      	blx	r3
}
 801199c:	bf00      	nop
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd90      	pop	{r4, r7, pc}
 80119a4:	08025ae8 	.word	0x08025ae8
 80119a8:	08025c44 	.word	0x08025c44
 80119ac:	08025c48 	.word	0x08025c48

080119b0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80119b0:	b590      	push	{r4, r7, lr}
 80119b2:	b085      	sub	sp, #20
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
    print("\n");
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	332c      	adds	r3, #44	; 0x2c
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4916      	ldr	r1, [pc, #88]	; (8011a20 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	4798      	blx	r3
    print(file.asCharString());
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	332c      	adds	r3, #44	; 0x2c
 80119d0:	681c      	ldr	r4, [r3, #0]
 80119d2:	68b8      	ldr	r0, [r7, #8]
 80119d4:	f7fc f9d8 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 80119d8:	4603      	mov	r3, r0
 80119da:	4619      	mov	r1, r3
 80119dc:	68f8      	ldr	r0, [r7, #12]
 80119de:	47a0      	blx	r4
    print("(");
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	332c      	adds	r3, #44	; 0x2c
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	490e      	ldr	r1, [pc, #56]	; (8011a24 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	4798      	blx	r3
    print(lineNumber);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	3334      	adds	r3, #52	; 0x34
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	6879      	ldr	r1, [r7, #4]
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	4798      	blx	r3
    print("):");
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	332c      	adds	r3, #44	; 0x2c
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4908      	ldr	r1, [pc, #32]	; (8011a28 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	4798      	blx	r3
    print(" error:");
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	332c      	adds	r3, #44	; 0x2c
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4906      	ldr	r1, [pc, #24]	; (8011a2c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8011a14:	68f8      	ldr	r0, [r7, #12]
 8011a16:	4798      	blx	r3
}
 8011a18:	bf00      	nop
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd90      	pop	{r4, r7, pc}
 8011a20:	08025ae8 	.word	0x08025ae8
 8011a24:	08025c50 	.word	0x08025c50
 8011a28:	08025c54 	.word	0x08025c54
 8011a2c:	08025c48 	.word	0x08025c48

08011a30 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7a1b      	ldrb	r3, [r3, #8]
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d106      	bne.n	8011a50 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3328      	adds	r3, #40	; 0x28
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	6839      	ldr	r1, [r7, #0]
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	4798      	blx	r3
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
    while (*s) {
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d009      	beq.n	8011a7e <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8011a6a:	4b0a      	ldr	r3, [pc, #40]	; (8011a94 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	7812      	ldrb	r2, [r2, #0]
 8011a72:	4610      	mov	r0, r2
 8011a74:	4798      	blx	r3
        s++;
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	603b      	str	r3, [r7, #0]
    while (*s) {
 8011a7c:	e7f1      	b.n	8011a62 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	334c      	adds	r3, #76	; 0x4c
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	4798      	blx	r3
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	200000c0 	.word	0x200000c0

08011a98 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 8011aa0:	4b03      	ldr	r3, [pc, #12]	; (8011ab0 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4798      	blx	r3
}
 8011aa6:	bf00      	nop
 8011aa8:	3708      	adds	r7, #8
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	200000c4 	.word	0x200000c4

08011ab4 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7ff fb00 	bl	80110c4 <_ZN10TestOutputC1Ev>
 8011ac4:	4a06      	ldr	r2, [pc, #24]	; (8011ae0 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	611a      	str	r2, [r3, #16]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	615a      	str	r2, [r3, #20]
{
}
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3708      	adds	r7, #8
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}
 8011ae0:	08029520 	.word	0x08029520

08011ae4 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	4a0e      	ldr	r2, [pc, #56]	; (8011b28 <_ZN19CompositeTestOutputD1Ev+0x44>)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	691b      	ldr	r3, [r3, #16]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d004      	beq.n	8011b04 <_ZN19CompositeTestOutputD1Ev+0x20>
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	3204      	adds	r2, #4
 8011afe:	6812      	ldr	r2, [r2, #0]
 8011b00:	4618      	mov	r0, r3
 8011b02:	4790      	blx	r2
  delete outputTwo_;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d004      	beq.n	8011b16 <_ZN19CompositeTestOutputD1Ev+0x32>
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	3204      	adds	r2, #4
 8011b10:	6812      	ldr	r2, [r2, #0]
 8011b12:	4618      	mov	r0, r3
 8011b14:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7ff faf1 	bl	8011100 <_ZN10TestOutputD1Ev>
}
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	4618      	mov	r0, r3
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	08029520 	.word	0x08029520

08011b2c <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
}
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7ff ffd5 	bl	8011ae4 <_ZN19CompositeTestOutputD1Ev>
 8011b3a:	2118      	movs	r1, #24
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7f9 f9e9 	bl	800af14 <_ZdlPvj>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	3708      	adds	r7, #8
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d004      	beq.n	8011b68 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	3204      	adds	r2, #4
 8011b62:	6812      	ldr	r2, [r2, #0]
 8011b64:	4618      	mov	r0, r3
 8011b66:	4790      	blx	r2
  outputOne_ = output;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	683a      	ldr	r2, [r7, #0]
 8011b6c:	611a      	str	r2, [r3, #16]
}
 8011b6e:	bf00      	nop
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b082      	sub	sp, #8
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 8011b88:	681a      	ldr	r2, [r3, #0]
 8011b8a:	3204      	adds	r2, #4
 8011b8c:	6812      	ldr	r2, [r2, #0]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	4790      	blx	r2
  outputTwo_ = output;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	615a      	str	r2, [r3, #20]
}
 8011b98:	bf00      	nop
 8011b9a:	3708      	adds	r7, #8
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d008      	beq.n	8011bc2 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	691a      	ldr	r2, [r3, #16]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	691b      	ldr	r3, [r3, #16]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	3308      	adds	r3, #8
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	4610      	mov	r0, r2
 8011bc0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	695b      	ldr	r3, [r3, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d008      	beq.n	8011bdc <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	695a      	ldr	r2, [r3, #20]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	695b      	ldr	r3, [r3, #20]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	3308      	adds	r3, #8
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4610      	mov	r0, r2
 8011bda:	4798      	blx	r3
}
 8011bdc:	bf00      	nop
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d009      	beq.n	8011c0a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	691a      	ldr	r2, [r3, #16]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	330c      	adds	r3, #12
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	4610      	mov	r0, r2
 8011c08:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d009      	beq.n	8011c26 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	695a      	ldr	r2, [r3, #20]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	695b      	ldr	r3, [r3, #20]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	330c      	adds	r3, #12
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	6839      	ldr	r1, [r7, #0]
 8011c22:	4610      	mov	r0, r2
 8011c24:	4798      	blx	r3
}
 8011c26:	bf00      	nop
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}

08011c2e <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b082      	sub	sp, #8
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d009      	beq.n	8011c54 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	691a      	ldr	r2, [r3, #16]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	3310      	adds	r3, #16
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	4610      	mov	r0, r2
 8011c52:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	695b      	ldr	r3, [r3, #20]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d009      	beq.n	8011c70 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	695a      	ldr	r2, [r3, #20]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	3310      	adds	r3, #16
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	4798      	blx	r3
}
 8011c70:	bf00      	nop
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	691a      	ldr	r2, [r3, #16]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3314      	adds	r3, #20
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	695b      	ldr	r3, [r3, #20]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d009      	beq.n	8011cba <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	695a      	ldr	r2, [r3, #20]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	695b      	ldr	r3, [r3, #20]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	3314      	adds	r3, #20
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	4798      	blx	r3
}
 8011cba:	bf00      	nop
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b082      	sub	sp, #8
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
 8011cca:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	691b      	ldr	r3, [r3, #16]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d009      	beq.n	8011ce8 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	691a      	ldr	r2, [r3, #16]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	691b      	ldr	r3, [r3, #16]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	3318      	adds	r3, #24
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	6839      	ldr	r1, [r7, #0]
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	695b      	ldr	r3, [r3, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d009      	beq.n	8011d04 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	695a      	ldr	r2, [r3, #20]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	695b      	ldr	r3, [r3, #20]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	3318      	adds	r3, #24
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	6839      	ldr	r1, [r7, #0]
 8011d00:	4610      	mov	r0, r2
 8011d02:	4798      	blx	r3
}
 8011d04:	bf00      	nop
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	691b      	ldr	r3, [r3, #16]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d009      	beq.n	8011d32 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	691a      	ldr	r2, [r3, #16]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	691b      	ldr	r3, [r3, #16]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	331c      	adds	r3, #28
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6839      	ldr	r1, [r7, #0]
 8011d2e:	4610      	mov	r0, r2
 8011d30:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	695b      	ldr	r3, [r3, #20]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d009      	beq.n	8011d4e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	695a      	ldr	r2, [r3, #20]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	695b      	ldr	r3, [r3, #20]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	331c      	adds	r3, #28
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	6839      	ldr	r1, [r7, #0]
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	4798      	blx	r3
}
 8011d4e:	bf00      	nop
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b082      	sub	sp, #8
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	460b      	mov	r3, r1
 8011d60:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	691b      	ldr	r3, [r3, #16]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d009      	beq.n	8011d7e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	691a      	ldr	r2, [r3, #16]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	691b      	ldr	r3, [r3, #16]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	3320      	adds	r3, #32
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	78f9      	ldrb	r1, [r7, #3]
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	695b      	ldr	r3, [r3, #20]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d009      	beq.n	8011d9a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	695a      	ldr	r2, [r3, #20]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	695b      	ldr	r3, [r3, #20]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3320      	adds	r3, #32
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	78f9      	ldrb	r1, [r7, #3]
 8011d96:	4610      	mov	r0, r2
 8011d98:	4798      	blx	r3
}
 8011d9a:	bf00      	nop
 8011d9c:	3708      	adds	r7, #8
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b082      	sub	sp, #8
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d008      	beq.n	8011dc4 <_ZN19CompositeTestOutput5colorEv+0x22>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	691a      	ldr	r2, [r3, #16]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	691b      	ldr	r3, [r3, #16]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	3324      	adds	r3, #36	; 0x24
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4610      	mov	r0, r2
 8011dc2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	695b      	ldr	r3, [r3, #20]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d008      	beq.n	8011dde <_ZN19CompositeTestOutput5colorEv+0x3c>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	695a      	ldr	r2, [r3, #20]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	695b      	ldr	r3, [r3, #20]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	3324      	adds	r3, #36	; 0x24
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	4610      	mov	r0, r2
 8011ddc:	4798      	blx	r3
}
 8011dde:	bf00      	nop
 8011de0:	3708      	adds	r7, #8
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d009      	beq.n	8011e0c <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	691a      	ldr	r2, [r3, #16]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	3328      	adds	r3, #40	; 0x28
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	4610      	mov	r0, r2
 8011e0a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	695b      	ldr	r3, [r3, #20]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d009      	beq.n	8011e28 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	695a      	ldr	r2, [r3, #20]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	3328      	adds	r3, #40	; 0x28
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	6839      	ldr	r1, [r7, #0]
 8011e24:	4610      	mov	r0, r2
 8011e26:	4798      	blx	r3
}
 8011e28:	bf00      	nop
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d009      	beq.n	8011e56 <_ZN19CompositeTestOutput5printEPKc+0x26>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	691a      	ldr	r2, [r3, #16]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	332c      	adds	r3, #44	; 0x2c
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	4610      	mov	r0, r2
 8011e54:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	695b      	ldr	r3, [r3, #20]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d009      	beq.n	8011e72 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	695a      	ldr	r2, [r3, #20]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	695b      	ldr	r3, [r3, #20]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	332c      	adds	r3, #44	; 0x2c
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	4610      	mov	r0, r2
 8011e70:	4798      	blx	r3
}
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8011e7a:	b580      	push	{r7, lr}
 8011e7c:	b082      	sub	sp, #8
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d009      	beq.n	8011ea0 <_ZN19CompositeTestOutput5printEl+0x26>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	691a      	ldr	r2, [r3, #16]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	691b      	ldr	r3, [r3, #16]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	3330      	adds	r3, #48	; 0x30
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d009      	beq.n	8011ebc <_ZN19CompositeTestOutput5printEl+0x42>
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	695a      	ldr	r2, [r3, #20]
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	695b      	ldr	r3, [r3, #20]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	3330      	adds	r3, #48	; 0x30
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	4610      	mov	r0, r2
 8011eba:	4798      	blx	r3
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	691b      	ldr	r3, [r3, #16]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d009      	beq.n	8011eea <_ZN19CompositeTestOutput5printEj+0x26>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	691a      	ldr	r2, [r3, #16]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	691b      	ldr	r3, [r3, #16]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3334      	adds	r3, #52	; 0x34
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	4610      	mov	r0, r2
 8011ee8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	695b      	ldr	r3, [r3, #20]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d009      	beq.n	8011f06 <_ZN19CompositeTestOutput5printEj+0x42>
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	695a      	ldr	r2, [r3, #20]
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	695b      	ldr	r3, [r3, #20]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	3334      	adds	r3, #52	; 0x34
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	6839      	ldr	r1, [r7, #0]
 8011f02:	4610      	mov	r0, r2
 8011f04:	4798      	blx	r3
}
 8011f06:	bf00      	nop
 8011f08:	3708      	adds	r7, #8
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b084      	sub	sp, #16
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	60f8      	str	r0, [r7, #12]
 8011f16:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00a      	beq.n	8011f38 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	691a      	ldr	r2, [r3, #16]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	691b      	ldr	r3, [r3, #16]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	3338      	adds	r3, #56	; 0x38
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	ed97 0b00 	vldr	d0, [r7]
 8011f34:	4610      	mov	r0, r2
 8011f36:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	695b      	ldr	r3, [r3, #20]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00a      	beq.n	8011f56 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	695a      	ldr	r2, [r3, #20]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	695b      	ldr	r3, [r3, #20]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	3338      	adds	r3, #56	; 0x38
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	ed97 0b00 	vldr	d0, [r7]
 8011f52:	4610      	mov	r0, r2
 8011f54:	4798      	blx	r3
}
 8011f56:	bf00      	nop
 8011f58:	3710      	adds	r7, #16
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}

08011f5e <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8011f5e:	b580      	push	{r7, lr}
 8011f60:	b082      	sub	sp, #8
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	691b      	ldr	r3, [r3, #16]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d009      	beq.n	8011f84 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	691a      	ldr	r2, [r3, #16]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	333c      	adds	r3, #60	; 0x3c
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	6839      	ldr	r1, [r7, #0]
 8011f80:	4610      	mov	r0, r2
 8011f82:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	695b      	ldr	r3, [r3, #20]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d009      	beq.n	8011fa0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	695a      	ldr	r2, [r3, #20]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	695b      	ldr	r3, [r3, #20]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	333c      	adds	r3, #60	; 0x3c
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	4610      	mov	r0, r2
 8011f9e:	4798      	blx	r3
}
 8011fa0:	bf00      	nop
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d009      	beq.n	8011fce <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	691a      	ldr	r2, [r3, #16]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3344      	adds	r3, #68	; 0x44
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	4610      	mov	r0, r2
 8011fcc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	695b      	ldr	r3, [r3, #20]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d009      	beq.n	8011fea <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	695a      	ldr	r2, [r3, #20]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	695b      	ldr	r3, [r3, #20]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	3344      	adds	r3, #68	; 0x44
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	6839      	ldr	r1, [r7, #0]
 8011fe6:	4610      	mov	r0, r2
 8011fe8:	4798      	blx	r3
}
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b082      	sub	sp, #8
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d008      	beq.n	8012014 <_ZN19CompositeTestOutput5flushEv+0x22>
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	691a      	ldr	r2, [r3, #16]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	334c      	adds	r3, #76	; 0x4c
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4610      	mov	r0, r2
 8012012:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	695b      	ldr	r3, [r3, #20]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d008      	beq.n	801202e <_ZN19CompositeTestOutput5flushEv+0x3c>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	695a      	ldr	r2, [r3, #20]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	695b      	ldr	r3, [r3, #20]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	334c      	adds	r3, #76	; 0x4c
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4610      	mov	r0, r2
 801202c:	4798      	blx	r3
}
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8012036:	b480      	push	{r7}
 8012038:	b085      	sub	sp, #20
 801203a:	af00      	add	r7, sp, #0
 801203c:	60f8      	str	r0, [r7, #12]
 801203e:	60b9      	str	r1, [r7, #8]
 8012040:	607a      	str	r2, [r7, #4]
    }
 8012042:	bf00      	nop
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr

0801204e <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 801204e:	b480      	push	{r7}
 8012050:	b085      	sub	sp, #20
 8012052:	af00      	add	r7, sp, #0
 8012054:	60f8      	str	r0, [r7, #12]
 8012056:	60b9      	str	r1, [r7, #8]
 8012058:	607a      	str	r2, [r7, #4]
    }
 801205a:	bf00      	nop
 801205c:	3714      	adds	r7, #20
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr
	...

08012068 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8012072:	4a0b      	ldr	r2, [pc, #44]	; (80120a0 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	601a      	str	r2, [r3, #0]
 8012078:	f000 f9ce 	bl	8012418 <_ZN14NullTestPlugin8instanceEv>
 801207c:	4602      	mov	r2, r0
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	605a      	str	r2, [r3, #4]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	3308      	adds	r3, #8
 8012086:	6839      	ldr	r1, [r7, #0]
 8012088:	4618      	mov	r0, r3
 801208a:	f7fb fb46 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2201      	movs	r2, #1
 8012092:	741a      	strb	r2, [r3, #16]
{
}
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	4618      	mov	r0, r3
 8012098:	3708      	adds	r7, #8
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	080296dc 	.word	0x080296dc

080120a4 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80120ae:	4a0a      	ldr	r2, [pc, #40]	; (80120d8 <_ZN10TestPluginC1EPS_+0x34>)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	601a      	str	r2, [r3, #0]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	683a      	ldr	r2, [r7, #0]
 80120b8:	605a      	str	r2, [r3, #4]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	3308      	adds	r3, #8
 80120be:	4907      	ldr	r1, [pc, #28]	; (80120dc <_ZN10TestPluginC1EPS_+0x38>)
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fb fad6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2201      	movs	r2, #1
 80120ca:	741a      	strb	r2, [r3, #16]
{
}
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	080296dc 	.word	0x080296dc
 80120dc:	08025c58 	.word	0x08025c58

080120e0 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	4a06      	ldr	r2, [pc, #24]	; (8012104 <_ZN10TestPluginD1Ev+0x24>)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	601a      	str	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3308      	adds	r3, #8
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fb fe75 	bl	800dde2 <_ZN12SimpleStringD1Ev>
{
}
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	4618      	mov	r0, r3
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	080296dc 	.word	0x080296dc

08012108 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
}
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff ffe5 	bl	80120e0 <_ZN10TestPluginD1Ev>
 8012116:	2114      	movs	r1, #20
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f7f8 fefb 	bl	800af14 <_ZdlPvj>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4618      	mov	r0, r3
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	683a      	ldr	r2, [r7, #0]
 8012136:	605a      	str	r2, [r3, #4]
    return this;
 8012138:	687b      	ldr	r3, [r7, #4]
}
 801213a:	4618      	mov	r0, r3
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr

08012146 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8012146:	b580      	push	{r7, lr}
 8012148:	b084      	sub	sp, #16
 801214a:	af00      	add	r7, sp, #0
 801214c:	60f8      	str	r0, [r7, #12]
 801214e:	60b9      	str	r1, [r7, #8]
 8012150:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	7c1b      	ldrb	r3, [r3, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d007      	beq.n	801216a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	3308      	adds	r3, #8
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	68b9      	ldr	r1, [r7, #8]
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6858      	ldr	r0, [r3, #4]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	3314      	adds	r3, #20
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	68b9      	ldr	r1, [r7, #8]
 801217c:	4798      	blx	r3
}
 801217e:	bf00      	nop
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8012186:	b580      	push	{r7, lr}
 8012188:	b084      	sub	sp, #16
 801218a:	af00      	add	r7, sp, #0
 801218c:	60f8      	str	r0, [r7, #12]
 801218e:	60b9      	str	r1, [r7, #8]
 8012190:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	6858      	ldr	r0, [r3, #4]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	3318      	adds	r3, #24
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	68b9      	ldr	r1, [r7, #8]
 80121a4:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	7c1b      	ldrb	r3, [r3, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d007      	beq.n	80121be <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	330c      	adds	r3, #12
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	68b9      	ldr	r1, [r7, #8]
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	4798      	blx	r3
}
 80121be:	bf00      	nop
 80121c0:	3710      	adds	r7, #16
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}

080121c6 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 80121c6:	b590      	push	{r4, r7, lr}
 80121c8:	b085      	sub	sp, #20
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	60f8      	str	r0, [r7, #12]
 80121ce:	60b9      	str	r1, [r7, #8]
 80121d0:	607a      	str	r2, [r7, #4]
 80121d2:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	331c      	adds	r3, #28
 80121da:	681c      	ldr	r4, [r3, #0]
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	68b9      	ldr	r1, [r7, #8]
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	47a0      	blx	r4
 80121e6:	4603      	mov	r3, r0
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3714      	adds	r7, #20
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd90      	pop	{r4, r7, pc}

080121f0 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 80121f0:	b590      	push	{r4, r7, lr}
 80121f2:	b085      	sub	sp, #20
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	607a      	str	r2, [r7, #4]
 80121fc:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3310      	adds	r3, #16
 8012204:	681c      	ldr	r4, [r3, #0]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	687a      	ldr	r2, [r7, #4]
 801220a:	68b9      	ldr	r1, [r7, #8]
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	47a0      	blx	r4
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8012216:	2301      	movs	r3, #1
 8012218:	e011      	b.n	801223e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d00c      	beq.n	801223c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6858      	ldr	r0, [r3, #4]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	331c      	adds	r3, #28
 801222e:	681c      	ldr	r4, [r3, #0]
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	68b9      	ldr	r1, [r7, #8]
 8012236:	47a0      	blx	r4
 8012238:	4603      	mov	r3, r0
 801223a:	e000      	b.n	801223e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	bd90      	pop	{r4, r7, pc}

08012246 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8012246:	b480      	push	{r7}
 8012248:	b083      	sub	sp, #12
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
    return name_;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	3308      	adds	r3, #8
}
 8012252:	4618      	mov	r0, r3
 8012254:	370c      	adds	r7, #12
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr

0801225e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 801225e:	b580      	push	{r7, lr}
 8012260:	b082      	sub	sp, #8
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
 8012266:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	3308      	adds	r3, #8
 801226c:	4619      	mov	r1, r3
 801226e:	6838      	ldr	r0, [r7, #0]
 8012270:	f7fb fdc3 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	e00d      	b.n	801229a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d007      	beq.n	8012296 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	6839      	ldr	r1, [r7, #0]
 801228c:	4618      	mov	r0, r3
 801228e:	f7ff ffe6 	bl	801225e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8012292:	4603      	mov	r3, r0
 8012294:	e001      	b.n	801229a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	685b      	ldr	r3, [r3, #4]
}
 801229a:	4618      	mov	r0, r3
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 80122a2:	b480      	push	{r7}
 80122a4:	b083      	sub	sp, #12
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
    return next_;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	685b      	ldr	r3, [r3, #4]
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	370c      	adds	r7, #12
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
 80122c2:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 80122c4:	2300      	movs	r3, #0
 80122c6:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00e      	beq.n	80122ee <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7ff ffb6 	bl	8012246 <_ZN10TestPlugin7getNameEv>
 80122da:	4603      	mov	r3, r0
 80122dc:	6839      	ldr	r1, [r7, #0]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fb fd8b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d001      	beq.n	80122ee <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e000      	b.n	80122f0 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 80122ee:	2300      	movs	r3, #0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d007      	beq.n	8012304 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	685a      	ldr	r2, [r3, #4]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8012304:	68fb      	ldr	r3, [r7, #12]
}
 8012306:	4618      	mov	r0, r3
 8012308:	3710      	adds	r7, #16
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801230e:	b480      	push	{r7}
 8012310:	b083      	sub	sp, #12
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2200      	movs	r2, #0
 801231a:	741a      	strb	r2, [r3, #16]
}
 801231c:	bf00      	nop
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2201      	movs	r2, #1
 8012334:	741a      	strb	r2, [r3, #16]
}
 8012336:	bf00      	nop
 8012338:	370c      	adds	r7, #12
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr

08012342 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8012342:	b480      	push	{r7}
 8012344:	b083      	sub	sp, #12
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
    return enabled_;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	7c1b      	ldrb	r3, [r3, #16]
}
 801234e:	4618      	mov	r0, r3
 8012350:	370c      	adds	r7, #12
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
	...

0801235c <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff fe7c 	bl	8012068 <_ZN10TestPluginC1ERK12SimpleString>
 8012370:	4a05      	ldr	r2, [pc, #20]	; (8012388 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8012376:	4b05      	ldr	r3, [pc, #20]	; (801238c <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8012378:	2200      	movs	r2, #0
 801237a:	601a      	str	r2, [r3, #0]
}
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	4618      	mov	r0, r3
 8012380:	3708      	adds	r7, #8
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	08029698 	.word	0x08029698
 801238c:	20000990 	.word	0x20000990

08012390 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8012390:	b480      	push	{r7}
 8012392:	b087      	sub	sp, #28
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 801239c:	4b0e      	ldr	r3, [pc, #56]	; (80123d8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	3b01      	subs	r3, #1
 80123a2:	617b      	str	r3, [r7, #20]
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	db0d      	blt.n	80123c6 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80123aa:	4a0c      	ldr	r2, [pc, #48]	; (80123dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80123b2:	490a      	ldr	r1, [pc, #40]	; (80123dc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	00db      	lsls	r3, r3, #3
 80123b8:	440b      	add	r3, r1
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	3b01      	subs	r3, #1
 80123c2:	617b      	str	r3, [r7, #20]
 80123c4:	e7ee      	b.n	80123a4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80123c6:	4b04      	ldr	r3, [pc, #16]	; (80123d8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80123c8:	2200      	movs	r2, #0
 80123ca:	601a      	str	r2, [r3, #0]
}
 80123cc:	bf00      	nop
 80123ce:	371c      	adds	r7, #28
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr
 80123d8:	20000990 	.word	0x20000990
 80123dc:	20000994 	.word	0x20000994

080123e0 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2100      	movs	r1, #0
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7ff fe59 	bl	80120a4 <_ZN10TestPluginC1EPS_>
 80123f2:	4a04      	ldr	r2, [pc, #16]	; (8012404 <_ZN14NullTestPluginC1Ev+0x24>)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	601a      	str	r2, [r3, #0]
{
}
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	08029654 	.word	0x08029654

08012408 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8012408:	b580      	push	{r7, lr}
 801240a:	af00      	add	r7, sp, #0
 801240c:	4801      	ldr	r0, [pc, #4]	; (8012414 <__tcf_0+0xc>)
 801240e:	f000 f849 	bl	80124a4 <_ZN14NullTestPluginD1Ev>
 8012412:	bd80      	pop	{r7, pc}
 8012414:	20000a94 	.word	0x20000a94

08012418 <_ZN14NullTestPlugin8instanceEv>:
{
 8012418:	b580      	push	{r7, lr}
 801241a:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 801241c:	4b12      	ldr	r3, [pc, #72]	; (8012468 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	f3bf 8f5b 	dmb	ish
 8012424:	b2db      	uxtb	r3, r3
 8012426:	f003 0301 	and.w	r3, r3, #1
 801242a:	2b00      	cmp	r3, #0
 801242c:	bf0c      	ite	eq
 801242e:	2301      	moveq	r3, #1
 8012430:	2300      	movne	r3, #0
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2b00      	cmp	r3, #0
 8012436:	d013      	beq.n	8012460 <_ZN14NullTestPlugin8instanceEv+0x48>
 8012438:	480b      	ldr	r0, [pc, #44]	; (8012468 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801243a:	f00d ffd9 	bl	80203f0 <__cxa_guard_acquire>
 801243e:	4603      	mov	r3, r0
 8012440:	2b00      	cmp	r3, #0
 8012442:	bf14      	ite	ne
 8012444:	2301      	movne	r3, #1
 8012446:	2300      	moveq	r3, #0
 8012448:	b2db      	uxtb	r3, r3
 801244a:	2b00      	cmp	r3, #0
 801244c:	d008      	beq.n	8012460 <_ZN14NullTestPlugin8instanceEv+0x48>
 801244e:	4807      	ldr	r0, [pc, #28]	; (801246c <_ZN14NullTestPlugin8instanceEv+0x54>)
 8012450:	f7ff ffc6 	bl	80123e0 <_ZN14NullTestPluginC1Ev>
 8012454:	4804      	ldr	r0, [pc, #16]	; (8012468 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012456:	f00d ffd7 	bl	8020408 <__cxa_guard_release>
 801245a:	4805      	ldr	r0, [pc, #20]	; (8012470 <_ZN14NullTestPlugin8instanceEv+0x58>)
 801245c:	f00d fffb 	bl	8020456 <atexit>
    return &_instance;
 8012460:	4b02      	ldr	r3, [pc, #8]	; (801246c <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8012462:	4618      	mov	r0, r3
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	20000aa8 	.word	0x20000aa8
 801246c:	20000a94 	.word	0x20000a94
 8012470:	08012409 	.word	0x08012409

08012474 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8012474:	b480      	push	{r7}
 8012476:	b085      	sub	sp, #20
 8012478:	af00      	add	r7, sp, #0
 801247a:	60f8      	str	r0, [r7, #12]
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
}
 8012480:	bf00      	nop
 8012482:	3714      	adds	r7, #20
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr

0801248c <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 801248c:	b480      	push	{r7}
 801248e:	b085      	sub	sp, #20
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
}
 8012498:	bf00      	nop
 801249a:	3714      	adds	r7, #20
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	4a05      	ldr	r2, [pc, #20]	; (80124c4 <_ZN14NullTestPluginD1Ev+0x20>)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	601a      	str	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7ff fe13 	bl	80120e0 <_ZN10TestPluginD1Ev>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4618      	mov	r0, r3
 80124be:	3708      	adds	r7, #8
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	08029654 	.word	0x08029654

080124c8 <_ZN14NullTestPluginD0Ev>:
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff ffe7 	bl	80124a4 <_ZN14NullTestPluginD1Ev>
 80124d6:	2114      	movs	r1, #20
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f7f8 fd1b 	bl	800af14 <_ZdlPvj>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 80124f0:	4a0f      	ldr	r2, [pc, #60]	; (8012530 <_ZN12TestRegistryC1Ev+0x48>)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2200      	movs	r2, #0
 80124fa:	605a      	str	r2, [r3, #4]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	609a      	str	r2, [r3, #8]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2200      	movs	r2, #0
 8012506:	60da      	str	r2, [r3, #12]
 8012508:	f7ff ff86 	bl	8012418 <_ZN14NullTestPlugin8instanceEv>
 801250c:	4602      	mov	r2, r0
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	611a      	str	r2, [r3, #16]
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	751a      	strb	r2, [r3, #20]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	619a      	str	r2, [r3, #24]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	771a      	strb	r2, [r3, #28]
{
}
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	08029720 	.word	0x08029720

08012534 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	4a04      	ldr	r2, [pc, #16]	; (8012550 <_ZN12TestRegistryD1Ev+0x1c>)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	601a      	str	r2, [r3, #0]
{
}
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4618      	mov	r0, r3
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	08029720 	.word	0x08029720

08012554 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
}
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f7ff ffe9 	bl	8012534 <_ZN12TestRegistryD1Ev>
 8012562:	2120      	movs	r1, #32
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7f8 fcd5 	bl	800af14 <_ZdlPvj>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	3308      	adds	r3, #8
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	6852      	ldr	r2, [r2, #4]
 801258a:	4611      	mov	r1, r2
 801258c:	6838      	ldr	r0, [r7, #0]
 801258e:	4798      	blx	r3
 8012590:	4602      	mov	r2, r0
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	605a      	str	r2, [r3, #4]
}
 8012596:	bf00      	nop
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b084      	sub	sp, #16
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
 80125a6:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80125a8:	2301      	movs	r3, #1
 80125aa:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	3308      	adds	r3, #8
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	6838      	ldr	r0, [r7, #0]
 80125b6:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	60bb      	str	r3, [r7, #8]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d05c      	beq.n	801267e <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	7d1b      	ldrb	r3, [r3, #20]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d005      	beq.n	80125d8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	3380      	adds	r3, #128	; 0x80
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	68b8      	ldr	r0, [r7, #8]
 80125d6:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	7f1b      	ldrb	r3, [r3, #28]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d005      	beq.n	80125ec <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	3384      	adds	r3, #132	; 0x84
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	68b8      	ldr	r0, [r7, #8]
 80125ea:	4798      	blx	r3

        if (groupStart) {
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d008      	beq.n	8012604 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3310      	adds	r3, #16
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	68b9      	ldr	r1, [r7, #8]
 80125fc:	6838      	ldr	r0, [r7, #0]
 80125fe:	4798      	blx	r3
            groupStart = false;
 8012600:	2300      	movs	r3, #0
 8012602:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	3320      	adds	r3, #32
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	6838      	ldr	r0, [r7, #0]
 801260e:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8012610:	683a      	ldr	r2, [r7, #0]
 8012612:	68b9      	ldr	r1, [r7, #8]
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f000 fb79 	bl	8012d0c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d016      	beq.n	801264e <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	3318      	adds	r3, #24
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	68b9      	ldr	r1, [r7, #8]
 801262a:	6838      	ldr	r0, [r7, #0]
 801262c:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	3390      	adds	r3, #144	; 0x90
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6911      	ldr	r1, [r2, #16]
 801263a:	683a      	ldr	r2, [r7, #0]
 801263c:	68b8      	ldr	r0, [r7, #8]
 801263e:	4798      	blx	r3
            result.currentTestEnded(test);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	331c      	adds	r3, #28
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68b9      	ldr	r1, [r7, #8]
 801264a:	6838      	ldr	r0, [r7, #0]
 801264c:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801264e:	68b9      	ldr	r1, [r7, #8]
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f000 fa5b 	bl	8012b0c <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d008      	beq.n	801266e <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 801265c:	2301      	movs	r3, #1
 801265e:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	3314      	adds	r3, #20
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	68b9      	ldr	r1, [r7, #8]
 801266a:	6838      	ldr	r0, [r7, #0]
 801266c:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	330c      	adds	r3, #12
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68b8      	ldr	r0, [r7, #8]
 8012678:	4798      	blx	r3
 801267a:	60b8      	str	r0, [r7, #8]
 801267c:	e79f      	b.n	80125be <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	330c      	adds	r3, #12
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6838      	ldr	r0, [r7, #0]
 8012688:	4798      	blx	r3
    currentRepetition_++;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	699b      	ldr	r3, [r3, #24]
 801268e:	1c5a      	adds	r2, r3, #1
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	619a      	str	r2, [r3, #24]
}
 8012694:	bf00      	nop
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 801269c:	b590      	push	{r4, r7, lr}
 801269e:	b08f      	sub	sp, #60	; 0x3c
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80126a6:	f107 0314 	add.w	r3, r7, #20
 80126aa:	4953      	ldr	r1, [pc, #332]	; (80127f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7fa ffe0 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	637b      	str	r3, [r7, #52]	; 0x34
 80126b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d04d      	beq.n	801275a <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80126be:	f107 030c 	add.w	r3, r7, #12
 80126c2:	494d      	ldr	r1, [pc, #308]	; (80127f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fa ffd4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80126ca:	f107 030c 	add.w	r3, r7, #12
 80126ce:	494b      	ldr	r1, [pc, #300]	; (80127fc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fb fc15 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80126d6:	f107 031c 	add.w	r3, r7, #28
 80126da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80126dc:	4618      	mov	r0, r3
 80126de:	f001 f9d2 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 80126e2:	f107 021c 	add.w	r2, r7, #28
 80126e6:	f107 030c 	add.w	r3, r7, #12
 80126ea:	4611      	mov	r1, r2
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7fb fbf5 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 80126f2:	f107 031c 	add.w	r3, r7, #28
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fb fb73 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        gname += "#";
 80126fc:	f107 030c 	add.w	r3, r7, #12
 8012700:	493e      	ldr	r1, [pc, #248]	; (80127fc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012702:	4618      	mov	r0, r3
 8012704:	f7fb fbfc 	bl	800df00 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8012708:	f107 020c 	add.w	r2, r7, #12
 801270c:	f107 0314 	add.w	r3, r7, #20
 8012710:	4611      	mov	r1, r2
 8012712:	4618      	mov	r0, r3
 8012714:	f7fb f82b 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 8012718:	4603      	mov	r3, r0
 801271a:	f083 0301 	eor.w	r3, r3, #1
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00d      	beq.n	8012740 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8012724:	f107 020c 	add.w	r2, r7, #12
 8012728:	f107 0314 	add.w	r3, r7, #20
 801272c:	4611      	mov	r1, r2
 801272e:	4618      	mov	r0, r3
 8012730:	f7fb fbd4 	bl	800dedc <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8012734:	f107 0314 	add.w	r3, r7, #20
 8012738:	4931      	ldr	r1, [pc, #196]	; (8012800 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801273a:	4618      	mov	r0, r3
 801273c:	f7fb fbe0 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8012740:	f107 030c 	add.w	r3, r7, #12
 8012744:	4618      	mov	r0, r3
 8012746:	f7fb fb4c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	330c      	adds	r3, #12
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012754:	4798      	blx	r3
 8012756:	6378      	str	r0, [r7, #52]	; 0x34
 8012758:	e7ae      	b.n	80126b8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801275a:	f107 0314 	add.w	r3, r7, #20
 801275e:	4a26      	ldr	r2, [pc, #152]	; (80127f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012760:	4926      	ldr	r1, [pc, #152]	; (80127fc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012762:	4618      	mov	r0, r3
 8012764:	f7fb f99a 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8012768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801276c:	4924      	ldr	r1, [pc, #144]	; (8012800 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801276e:	4618      	mov	r0, r3
 8012770:	f7fa ff7f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8012774:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012778:	f107 0314 	add.w	r3, r7, #20
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f7fb f874 	bl	800d86c <_ZNK12SimpleString8endsWithERKS_>
 8012784:	4603      	mov	r3, r0
 8012786:	461c      	mov	r4, r3
 8012788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801278c:	4618      	mov	r0, r3
 801278e:	f7fb fb28 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8012792:	2c00      	cmp	r4, #0
 8012794:	d01a      	beq.n	80127cc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8012796:	f107 0314 	add.w	r3, r7, #20
 801279a:	4618      	mov	r0, r3
 801279c:	f7fb fb00 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 80127a0:	4603      	mov	r3, r0
 80127a2:	3b01      	subs	r3, #1
 80127a4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80127a8:	f107 0114 	add.w	r1, r7, #20
 80127ac:	2200      	movs	r2, #0
 80127ae:	f7fb fc21 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 80127b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80127b6:	f107 0314 	add.w	r3, r7, #20
 80127ba:	4611      	mov	r1, r2
 80127bc:	4618      	mov	r0, r3
 80127be:	f7fa ffc4 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 80127c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fb fb0b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	3338      	adds	r3, #56	; 0x38
 80127d2:	681c      	ldr	r4, [r3, #0]
 80127d4:	f107 0314 	add.w	r3, r7, #20
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fb fad5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 80127de:	4603      	mov	r3, r0
 80127e0:	4619      	mov	r1, r3
 80127e2:	6838      	ldr	r0, [r7, #0]
 80127e4:	47a0      	blx	r4
    SimpleString groupList;
 80127e6:	f107 0314 	add.w	r3, r7, #20
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fb faf9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80127f0:	bf00      	nop
 80127f2:	373c      	adds	r7, #60	; 0x3c
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd90      	pop	{r4, r7, pc}
 80127f8:	08025ca8 	.word	0x08025ca8
 80127fc:	08025cac 	.word	0x08025cac
 8012800:	08025cb0 	.word	0x08025cb0

08012804 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8012804:	b590      	push	{r4, r7, lr}
 8012806:	b091      	sub	sp, #68	; 0x44
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801280e:	f107 0314 	add.w	r3, r7, #20
 8012812:	4964      	ldr	r1, [pc, #400]	; (80129a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8012814:	4618      	mov	r0, r3
 8012816:	f7fa ff2c 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012822:	2b00      	cmp	r3, #0
 8012824:	d06e      	beq.n	8012904 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8012826:	683a      	ldr	r2, [r7, #0]
 8012828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 fa6e 	bl	8012d0c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d05e      	beq.n	80128f4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8012836:	f107 030c 	add.w	r3, r7, #12
 801283a:	495a      	ldr	r1, [pc, #360]	; (80129a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801283c:	4618      	mov	r0, r3
 801283e:	f7fa ff18 	bl	800d672 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8012842:	f107 030c 	add.w	r3, r7, #12
 8012846:	4958      	ldr	r1, [pc, #352]	; (80129a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8012848:	4618      	mov	r0, r3
 801284a:	f7fb fb59 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801284e:	f107 031c 	add.w	r3, r7, #28
 8012852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012854:	4618      	mov	r0, r3
 8012856:	f001 f916 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 801285a:	f107 021c 	add.w	r2, r7, #28
 801285e:	f107 030c 	add.w	r3, r7, #12
 8012862:	4611      	mov	r1, r2
 8012864:	4618      	mov	r0, r3
 8012866:	f7fb fb39 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801286a:	f107 031c 	add.w	r3, r7, #28
 801286e:	4618      	mov	r0, r3
 8012870:	f7fb fab7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8012874:	f107 030c 	add.w	r3, r7, #12
 8012878:	494c      	ldr	r1, [pc, #304]	; (80129ac <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 801287a:	4618      	mov	r0, r3
 801287c:	f7fb fb40 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8012880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012886:	4618      	mov	r0, r3
 8012888:	f001 f8ee 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 801288c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012890:	f107 030c 	add.w	r3, r7, #12
 8012894:	4611      	mov	r1, r2
 8012896:	4618      	mov	r0, r3
 8012898:	f7fb fb20 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801289c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fb fa9e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80128a6:	f107 030c 	add.w	r3, r7, #12
 80128aa:	493f      	ldr	r1, [pc, #252]	; (80129a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fb fb27 	bl	800df00 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80128b2:	f107 020c 	add.w	r2, r7, #12
 80128b6:	f107 0314 	add.w	r3, r7, #20
 80128ba:	4611      	mov	r1, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fa ff56 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 80128c2:	4603      	mov	r3, r0
 80128c4:	f083 0301 	eor.w	r3, r3, #1
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00d      	beq.n	80128ea <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80128ce:	f107 020c 	add.w	r2, r7, #12
 80128d2:	f107 0314 	add.w	r3, r7, #20
 80128d6:	4611      	mov	r1, r2
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fb faff 	bl	800dedc <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80128de:	f107 0314 	add.w	r3, r7, #20
 80128e2:	4933      	ldr	r1, [pc, #204]	; (80129b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fb fb0b 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 80128ea:	f107 030c 	add.w	r3, r7, #12
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fb fa77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80128f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	330c      	adds	r3, #12
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80128fe:	4798      	blx	r3
 8012900:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012902:	e78d      	b.n	8012820 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8012904:	f107 0314 	add.w	r3, r7, #20
 8012908:	4a26      	ldr	r2, [pc, #152]	; (80129a4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801290a:	4927      	ldr	r1, [pc, #156]	; (80129a8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 801290c:	4618      	mov	r0, r3
 801290e:	f7fb f8c5 	bl	800da9c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8012912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012916:	4926      	ldr	r1, [pc, #152]	; (80129b0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8012918:	4618      	mov	r0, r3
 801291a:	f7fa feaa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801291e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012922:	f107 0314 	add.w	r3, r7, #20
 8012926:	4611      	mov	r1, r2
 8012928:	4618      	mov	r0, r3
 801292a:	f7fa ff9f 	bl	800d86c <_ZNK12SimpleString8endsWithERKS_>
 801292e:	4603      	mov	r3, r0
 8012930:	461c      	mov	r4, r3
 8012932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012936:	4618      	mov	r0, r3
 8012938:	f7fb fa53 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801293c:	2c00      	cmp	r4, #0
 801293e:	d01a      	beq.n	8012976 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8012940:	f107 0314 	add.w	r3, r7, #20
 8012944:	4618      	mov	r0, r3
 8012946:	f7fb fa2b 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 801294a:	4603      	mov	r3, r0
 801294c:	3b01      	subs	r3, #1
 801294e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8012952:	f107 0114 	add.w	r1, r7, #20
 8012956:	2200      	movs	r2, #0
 8012958:	f7fb fb4c 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 801295c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012960:	f107 0314 	add.w	r3, r7, #20
 8012964:	4611      	mov	r1, r2
 8012966:	4618      	mov	r0, r3
 8012968:	f7fa feef 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801296c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012970:	4618      	mov	r0, r3
 8012972:	f7fb fa36 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	3338      	adds	r3, #56	; 0x38
 801297c:	681c      	ldr	r4, [r3, #0]
 801297e:	f107 0314 	add.w	r3, r7, #20
 8012982:	4618      	mov	r0, r3
 8012984:	f7fb fa00 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8012988:	4603      	mov	r3, r0
 801298a:	4619      	mov	r1, r3
 801298c:	6838      	ldr	r0, [r7, #0]
 801298e:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8012990:	f107 0314 	add.w	r3, r7, #20
 8012994:	4618      	mov	r0, r3
 8012996:	f7fb fa24 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801299a:	bf00      	nop
 801299c:	3744      	adds	r7, #68	; 0x44
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd90      	pop	{r4, r7, pc}
 80129a2:	bf00      	nop
 80129a4:	08025ca8 	.word	0x08025ca8
 80129a8:	08025cac 	.word	0x08025cac
 80129ac:	08025cb4 	.word	0x08025cb4
 80129b0:	08025cb0 	.word	0x08025cb0

080129b4 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80129b4:	b590      	push	{r4, r7, lr}
 80129b6:	b091      	sub	sp, #68	; 0x44
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80129be:	f107 0314 	add.w	r3, r7, #20
 80129c2:	494f      	ldr	r1, [pc, #316]	; (8012b00 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fa fe54 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d07d      	beq.n	8012ad2 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80129d6:	f107 030c 	add.w	r3, r7, #12
 80129da:	4949      	ldr	r1, [pc, #292]	; (8012b00 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fa fe48 	bl	800d672 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80129e2:	f107 031c 	add.w	r3, r7, #28
 80129e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129e8:	4618      	mov	r0, r3
 80129ea:	f001 f84c 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 80129ee:	f107 021c 	add.w	r2, r7, #28
 80129f2:	f107 030c 	add.w	r3, r7, #12
 80129f6:	4611      	mov	r1, r2
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7fb fa6f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 80129fe:	f107 031c 	add.w	r3, r7, #28
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fb f9ed 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012a08:	f107 030c 	add.w	r3, r7, #12
 8012a0c:	493d      	ldr	r1, [pc, #244]	; (8012b04 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fb fa76 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8012a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f001 f824 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 8012a20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012a24:	f107 030c 	add.w	r3, r7, #12
 8012a28:	4611      	mov	r1, r2
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7fb fa56 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8012a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fb f9d4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012a3a:	f107 030c 	add.w	r3, r7, #12
 8012a3e:	4931      	ldr	r1, [pc, #196]	; (8012b04 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7fb fa5d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8012a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f001 f8dc 	bl	8013c0a <_ZNK10UtestShell7getFileEv>
 8012a52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a56:	f107 030c 	add.w	r3, r7, #12
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fb fa3d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8012a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7fb f9bb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8012a6c:	f107 030c 	add.w	r3, r7, #12
 8012a70:	4924      	ldr	r1, [pc, #144]	; (8012b04 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fb fa44 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8012a78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a7a:	f001 f8d5 	bl	8013c28 <_ZNK10UtestShell13getLineNumberEv>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	461a      	mov	r2, r3
 8012a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012a86:	4920      	ldr	r1, [pc, #128]	; (8012b08 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fb feb1 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 8012a8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012a92:	f107 030c 	add.w	r3, r7, #12
 8012a96:	4611      	mov	r1, r2
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fb fa1f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8012a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fb f99d 	bl	800dde2 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8012aa8:	f107 020c 	add.w	r2, r7, #12
 8012aac:	f107 0314 	add.w	r3, r7, #20
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fb fa12 	bl	800dedc <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8012ab8:	f107 030c 	add.w	r3, r7, #12
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fb f990 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	330c      	adds	r3, #12
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012acc:	4798      	blx	r3
 8012ace:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012ad0:	e77e      	b.n	80129d0 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	3338      	adds	r3, #56	; 0x38
 8012ad8:	681c      	ldr	r4, [r3, #0]
 8012ada:	f107 0314 	add.w	r3, r7, #20
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7fb f952 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	6838      	ldr	r0, [r7, #0]
 8012aea:	47a0      	blx	r4
    SimpleString testLocations;
 8012aec:	f107 0314 	add.w	r3, r7, #20
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7fb f976 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8012af6:	bf00      	nop
 8012af8:	3744      	adds	r7, #68	; 0x44
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd90      	pop	{r4, r7, pc}
 8012afe:	bf00      	nop
 8012b00:	08025ca8 	.word	0x08025ca8
 8012b04:	08025cb4 	.word	0x08025cb4
 8012b08:	08025cb8 	.word	0x08025cb8

08012b0c <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8012b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b0e:	b087      	sub	sp, #28
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8012b16:	2400      	movs	r4, #0
 8012b18:	2500      	movs	r5, #0
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d028      	beq.n	8012b72 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	330c      	adds	r3, #12
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	6838      	ldr	r0, [r7, #0]
 8012b2a:	4798      	blx	r3
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d01f      	beq.n	8012b72 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8012b32:	f107 0308 	add.w	r3, r7, #8
 8012b36:	6839      	ldr	r1, [r7, #0]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f000 ffa4 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 8012b3e:	2401      	movs	r4, #1
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	330c      	adds	r3, #12
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	6838      	ldr	r0, [r7, #0]
 8012b4a:	4798      	blx	r3
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	f107 0310 	add.w	r3, r7, #16
 8012b52:	4611      	mov	r1, r2
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 ff96 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 8012b5a:	2501      	movs	r5, #1
 8012b5c:	f107 0210 	add.w	r2, r7, #16
 8012b60:	f107 0308 	add.w	r3, r7, #8
 8012b64:	4611      	mov	r1, r2
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fb f98c 	bl	800de84 <_ZneRK12SimpleStringS1_>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8012b72:	2601      	movs	r6, #1
 8012b74:	e000      	b.n	8012b78 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8012b76:	2600      	movs	r6, #0
 8012b78:	2d00      	cmp	r5, #0
 8012b7a:	d004      	beq.n	8012b86 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8012b7c:	f107 0310 	add.w	r3, r7, #16
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fb f92e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8012b86:	2c00      	cmp	r4, #0
 8012b88:	d004      	beq.n	8012b94 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8012b8a:	f107 0308 	add.w	r3, r7, #8
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fb f927 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8012b94:	4633      	mov	r3, r6
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	371c      	adds	r7, #28
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b9e <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b082      	sub	sp, #8
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00a      	beq.n	8012bc4 <_ZN12TestRegistry10countTestsEv+0x26>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	685a      	ldr	r2, [r3, #4]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	3310      	adds	r3, #16
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	4798      	blx	r3
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	e000      	b.n	8012bc6 <_ZN12TestRegistry10countTestsEv+0x28>
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3708      	adds	r7, #8
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
	...

08012bd0 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	4801      	ldr	r0, [pc, #4]	; (8012bdc <__tcf_0+0xc>)
 8012bd6:	f7ff fcad 	bl	8012534 <_ZN12TestRegistryD1Ev>
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	20000ab0 	.word	0x20000ab0

08012be0 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8012be4:	4b15      	ldr	r3, [pc, #84]	; (8012c3c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	f3bf 8f5b 	dmb	ish
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	f003 0301 	and.w	r3, r3, #1
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bf0c      	ite	eq
 8012bf6:	2301      	moveq	r3, #1
 8012bf8:	2300      	movne	r3, #0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d013      	beq.n	8012c28 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012c00:	480e      	ldr	r0, [pc, #56]	; (8012c3c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012c02:	f00d fbf5 	bl	80203f0 <__cxa_guard_acquire>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	bf14      	ite	ne
 8012c0c:	2301      	movne	r3, #1
 8012c0e:	2300      	moveq	r3, #0
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d008      	beq.n	8012c28 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8012c16:	480a      	ldr	r0, [pc, #40]	; (8012c40 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8012c18:	f7ff fc66 	bl	80124e8 <_ZN12TestRegistryC1Ev>
 8012c1c:	4807      	ldr	r0, [pc, #28]	; (8012c3c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8012c1e:	f00d fbf3 	bl	8020408 <__cxa_guard_release>
 8012c22:	4808      	ldr	r0, [pc, #32]	; (8012c44 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8012c24:	f00d fc17 	bl	8020456 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8012c28:	4b07      	ldr	r3, [pc, #28]	; (8012c48 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d002      	beq.n	8012c36 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8012c30:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	e000      	b.n	8012c38 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8012c36:	4b02      	ldr	r3, [pc, #8]	; (8012c40 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	20000ad0 	.word	0x20000ad0
 8012c40:	20000ab0 	.word	0x20000ab0
 8012c44:	08012bd1 	.word	0x08012bd1
 8012c48:	20000aac 	.word	0x20000aac

08012c4c <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8012c56:	4a04      	ldr	r2, [pc, #16]	; (8012c68 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	6013      	str	r3, [r2, #0]
}
 8012c5c:	bf00      	nop
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr
 8012c68:	20000aac 	.word	0x20000aac

08012c6c <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d00a      	beq.n	8012c92 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	685a      	ldr	r2, [r3, #4]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	330c      	adds	r3, #12
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	4798      	blx	r3
 8012c8e:	4603      	mov	r3, r0
 8012c90:	e000      	b.n	8012c94 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8012c92:	2300      	movs	r3, #0
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	6053      	str	r3, [r2, #4]

}
 8012c98:	bf00      	nop
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	683a      	ldr	r2, [r7, #0]
 8012cae:	609a      	str	r2, [r3, #8]
}
 8012cb0:	bf00      	nop
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr

08012cbc <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	60da      	str	r2, [r3, #12]
}
 8012ccc:	bf00      	nop
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	771a      	strb	r2, [r3, #28]
}
 8012ce6:	bf00      	nop
 8012ce8:	370c      	adds	r7, #12
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr

08012cf2 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8012cf2:	b480      	push	{r7}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	751a      	strb	r2, [r3, #20]
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	68d9      	ldr	r1, [r3, #12]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	461a      	mov	r2, r3
 8012d22:	68b8      	ldr	r0, [r7, #8]
 8012d24:	f000 ffbb 	bl	8013c9e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d001      	beq.n	8012d32 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e006      	b.n	8012d40 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	332c      	adds	r3, #44	; 0x2c
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	4798      	blx	r3
        return false;
 8012d3e:	2300      	movs	r3, #0
    }
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8012d50:	f7ff fb62 	bl	8012418 <_ZN14NullTestPlugin8instanceEv>
 8012d54:	4602      	mov	r2, r0
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	611a      	str	r2, [r3, #16]
}
 8012d5a:	bf00      	nop
 8012d5c:	3708      	adds	r7, #8
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b082      	sub	sp, #8
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]
 8012d6a:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	3324      	adds	r3, #36	; 0x24
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	6912      	ldr	r2, [r2, #16]
 8012d78:	4611      	mov	r1, r2
 8012d7a:	6838      	ldr	r0, [r7, #0]
 8012d7c:	4798      	blx	r3
 8012d7e:	4602      	mov	r2, r0
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	611a      	str	r2, [r3, #16]
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	691b      	ldr	r3, [r3, #16]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	370c      	adds	r7, #12
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr

08012da4 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7ff fa52 	bl	801225e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8012dba:	4603      	mov	r3, r0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	691a      	ldr	r2, [r3, #16]
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	691b      	ldr	r3, [r3, #16]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	3328      	adds	r3, #40	; 0x28
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	6839      	ldr	r1, [r7, #0]
 8012dde:	4610      	mov	r0, r2
 8012de0:	4798      	blx	r3
 8012de2:	4602      	mov	r2, r0
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	691b      	ldr	r3, [r3, #16]
 8012de8:	429a      	cmp	r2, r3
 8012dea:	bf0c      	ite	eq
 8012dec:	2301      	moveq	r3, #1
 8012dee:	2300      	movne	r3, #0
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00b      	beq.n	8012e0e <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	691a      	ldr	r2, [r3, #16]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	332c      	adds	r3, #44	; 0x2c
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4610      	mov	r0, r2
 8012e06:	4798      	blx	r3
 8012e08:	4602      	mov	r2, r0
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	691b      	ldr	r3, [r3, #16]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ff fa17 	bl	8012246 <_ZN10TestPlugin7getNameEv>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	6839      	ldr	r1, [r7, #0]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fa ffec 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8012e22:	4603      	mov	r3, r0
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00b      	beq.n	8012e40 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	691a      	ldr	r2, [r3, #16]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	332c      	adds	r3, #44	; 0x2c
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	4610      	mov	r0, r2
 8012e38:	4798      	blx	r3
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	691a      	ldr	r2, [r3, #16]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	3328      	adds	r3, #40	; 0x28
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	4610      	mov	r0, r2
 8012e52:	4798      	blx	r3
}
 8012e54:	bf00      	nop
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
    int count = 0;
 8012e64:	2300      	movs	r3, #0
 8012e66:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	60bb      	str	r3, [r7, #8]
 8012e6e:	f7ff fad3 	bl	8012418 <_ZN14NullTestPlugin8instanceEv>
 8012e72:	4602      	mov	r2, r0
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	4293      	cmp	r3, r2
 8012e78:	bf14      	ite	ne
 8012e7a:	2301      	movne	r3, #1
 8012e7c:	2300      	moveq	r3, #0
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00a      	beq.n	8012e9a <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	3301      	adds	r3, #1
 8012e88:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	332c      	adds	r3, #44	; 0x2c
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	68b8      	ldr	r0, [r7, #8]
 8012e94:	4798      	blx	r3
 8012e96:	60b8      	str	r0, [r7, #8]
 8012e98:	e7e9      	b.n	8012e6e <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3710      	adds	r7, #16
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
    return tests_;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	370c      	adds	r7, #12
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eba:	4770      	bx	lr

08012ebc <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
 8012ec4:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	334c      	adds	r3, #76	; 0x4c
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	4798      	blx	r3
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	f107 0308 	add.w	r3, r7, #8
 8012ed8:	4611      	mov	r1, r2
 8012eda:	4618      	mov	r0, r3
 8012edc:	f002 f8f8 	bl	80150d0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8012ee0:	f107 0308 	add.w	r3, r7, #8
 8012ee4:	6839      	ldr	r1, [r7, #0]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f002 f980 	bl	80151ec <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8012eec:	f107 0308 	add.w	r3, r7, #8
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f002 fa13 	bl	801531c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012efc:	f107 0308 	add.w	r3, r7, #8
 8012f00:	4618      	mov	r0, r3
 8012f02:	f002 f939 	bl	8015178 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012f06:	bf00      	nop
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b084      	sub	sp, #16
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	334c      	adds	r3, #76	; 0x4c
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	4798      	blx	r3
 8012f22:	4602      	mov	r2, r0
 8012f24:	f107 0308 	add.w	r3, r7, #8
 8012f28:	4611      	mov	r1, r2
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f002 f8d0 	bl	80150d0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8012f30:	f107 0308 	add.w	r3, r7, #8
 8012f34:	4618      	mov	r0, r3
 8012f36:	f002 f995 	bl	8015264 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8012f3a:	f107 0308 	add.w	r3, r7, #8
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f002 f9ec 	bl	801531c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8012f44:	4602      	mov	r2, r0
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8012f4a:	f107 0308 	add.w	r3, r7, #8
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f002 f912 	bl	8015178 <_ZN22UtestShellPointerArrayD1Ev>
}
 8012f54:	bf00      	nop
 8012f56:	3710      	adds	r7, #16
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00b      	beq.n	8012f8a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	330c      	adds	r3, #12
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	4798      	blx	r3
 8012f7e:	4602      	mov	r2, r0
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d001      	beq.n	8012f8a <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8012f86:	2301      	movs	r3, #1
 8012f88:	e000      	b.n	8012f8c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d007      	beq.n	8012fa0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	330c      	adds	r3, #12
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	4798      	blx	r3
 8012f9c:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8012f9e:	e7e5      	b.n	8012f6c <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8012faa:	b590      	push	{r4, r7, lr}
 8012fac:	b087      	sub	sp, #28
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
 8012fb2:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	617b      	str	r3, [r7, #20]
    while (current) {
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d01e      	beq.n	8012ffe <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8012fc0:	f107 030c 	add.w	r3, r7, #12
 8012fc4:	6979      	ldr	r1, [r7, #20]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f000 fd4e 	bl	8013a68 <_ZNK10UtestShell7getNameEv>
 8012fcc:	f107 030c 	add.w	r3, r7, #12
 8012fd0:	6839      	ldr	r1, [r7, #0]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fa ff11 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	461c      	mov	r4, r3
 8012fdc:	f107 030c 	add.w	r3, r7, #12
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fa fefe 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8012fe6:	2c00      	cmp	r4, #0
 8012fe8:	d001      	beq.n	8012fee <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	e008      	b.n	8013000 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	330c      	adds	r3, #12
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	6978      	ldr	r0, [r7, #20]
 8012ff8:	4798      	blx	r3
 8012ffa:	6178      	str	r0, [r7, #20]
    while (current) {
 8012ffc:	e7dd      	b.n	8012fba <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8012ffe:	2300      	movs	r3, #0
}
 8013000:	4618      	mov	r0, r3
 8013002:	371c      	adds	r7, #28
 8013004:	46bd      	mov	sp, r7
 8013006:	bd90      	pop	{r4, r7, pc}

08013008 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8013008:	b590      	push	{r4, r7, lr}
 801300a:	b087      	sub	sp, #28
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	617b      	str	r3, [r7, #20]
    while (current) {
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d01e      	beq.n	801305c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801301e:	f107 030c 	add.w	r3, r7, #12
 8013022:	6979      	ldr	r1, [r7, #20]
 8013024:	4618      	mov	r0, r3
 8013026:	f000 fd2e 	bl	8013a86 <_ZNK10UtestShell8getGroupEv>
 801302a:	f107 030c 	add.w	r3, r7, #12
 801302e:	6839      	ldr	r1, [r7, #0]
 8013030:	4618      	mov	r0, r3
 8013032:	f7fa fee2 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8013036:	4603      	mov	r3, r0
 8013038:	461c      	mov	r4, r3
 801303a:	f107 030c 	add.w	r3, r7, #12
 801303e:	4618      	mov	r0, r3
 8013040:	f7fa fecf 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8013044:	2c00      	cmp	r4, #0
 8013046:	d001      	beq.n	801304c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	e008      	b.n	801305e <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	330c      	adds	r3, #12
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	6978      	ldr	r0, [r7, #20]
 8013056:	4798      	blx	r3
 8013058:	6178      	str	r0, [r7, #20]
    while (current) {
 801305a:	e7dd      	b.n	8013018 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	371c      	adds	r7, #28
 8013062:	46bd      	mov	sp, r7
 8013064:	bd90      	pop	{r4, r7, pc}
	...

08013068 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8013068:	b480      	push	{r7}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8013072:	4a18      	ldr	r2, [pc, #96]	; (80130d4 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	601a      	str	r2, [r3, #0]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	683a      	ldr	r2, [r7, #0]
 801307c:	605a      	str	r2, [r3, #4]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2200      	movs	r2, #0
 8013082:	609a      	str	r2, [r3, #8]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	60da      	str	r2, [r3, #12]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2200      	movs	r2, #0
 801308e:	611a      	str	r2, [r3, #16]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	615a      	str	r2, [r3, #20]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2200      	movs	r2, #0
 801309a:	619a      	str	r2, [r3, #24]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2200      	movs	r2, #0
 80130a0:	61da      	str	r2, [r3, #28]
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	621a      	str	r2, [r3, #32]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	625a      	str	r2, [r3, #36]	; 0x24
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2200      	movs	r2, #0
 80130b2:	629a      	str	r2, [r3, #40]	; 0x28
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2200      	movs	r2, #0
 80130be:	631a      	str	r2, [r3, #48]	; 0x30
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4618      	mov	r0, r3
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	0802978c 	.word	0x0802978c

080130d8 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	4a04      	ldr	r2, [pc, #16]	; (80130f4 <_ZN10TestResultD1Ev+0x1c>)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	601a      	str	r2, [r3, #0]
{
}
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	0802978c 	.word	0x0802978c

080130f8 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
}
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7ff ffe9 	bl	80130d8 <_ZN10TestResultD1Ev>
 8013106:	2138      	movs	r1, #56	; 0x38
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7f7 ff03 	bl	800af14 <_ZdlPvj>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	685a      	ldr	r2, [r3, #4]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	3318      	adds	r3, #24
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	6839      	ldr	r1, [r7, #0]
 8013132:	4610      	mov	r0, r2
 8013134:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013136:	4b05      	ldr	r3, [pc, #20]	; (801314c <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4798      	blx	r3
 801313c:	4603      	mov	r3, r0
 801313e:	461a      	mov	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013144:	bf00      	nop
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	200000a8 	.word	0x200000a8

08013150 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 801315a:	4b0c      	ldr	r3, [pc, #48]	; (801318c <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4798      	blx	r3
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013168:	1ad2      	subs	r2, r2, r3
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	685a      	ldr	r2, [r3, #4]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	331c      	adds	r3, #28
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	4610      	mov	r0, r2
 8013180:	4798      	blx	r3
}
 8013182:	bf00      	nop
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	200000a8 	.word	0x200000a8

08013190 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	685a      	ldr	r2, [r3, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	3310      	adds	r3, #16
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	4610      	mov	r0, r2
 80131ac:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80131ae:	4b05      	ldr	r3, [pc, #20]	; (80131c4 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4798      	blx	r3
 80131b4:	4603      	mov	r3, r0
 80131b6:	461a      	mov	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80131bc:	bf00      	nop
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	200000a8 	.word	0x200000a8

080131c8 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b082      	sub	sp, #8
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
    output_.print(text);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	685a      	ldr	r2, [r3, #4]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	332c      	adds	r3, #44	; 0x2c
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	6839      	ldr	r1, [r7, #0]
 80131e2:	4610      	mov	r0, r2
 80131e4:	4798      	blx	r3
}
 80131e6:	bf00      	nop
 80131e8:	3708      	adds	r7, #8
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}

080131ee <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b082      	sub	sp, #8
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
 80131f6:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	685a      	ldr	r2, [r3, #4]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	3348      	adds	r3, #72	; 0x48
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	4610      	mov	r0, r2
 801320a:	4798      	blx	r3
}
 801320c:	bf00      	nop
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801321e:	4b0c      	ldr	r3, [pc, #48]	; (8013250 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4798      	blx	r3
 8013224:	4603      	mov	r3, r0
 8013226:	461a      	mov	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801322c:	1ad2      	subs	r2, r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685a      	ldr	r2, [r3, #4]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	685b      	ldr	r3, [r3, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	3314      	adds	r3, #20
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	6879      	ldr	r1, [r7, #4]
 8013242:	4610      	mov	r0, r2
 8013244:	4798      	blx	r3

}
 8013246:	bf00      	nop
 8013248:	3708      	adds	r7, #8
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	200000a8 	.word	0x200000a8

08013254 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	685a      	ldr	r2, [r3, #4]
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	333c      	adds	r3, #60	; 0x3c
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6839      	ldr	r1, [r7, #0]
 801326e:	4610      	mov	r0, r2
 8013270:	4798      	blx	r3
    failureCount_++;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	695b      	ldr	r3, [r3, #20]
 8013276:	1c5a      	adds	r2, r3, #1
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	615a      	str	r2, [r3, #20]
}
 801327c:	bf00      	nop
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8013284:	b480      	push	{r7}
 8013286:	b083      	sub	sp, #12
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
    testCount_++;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	1c5a      	adds	r2, r3, #1
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	609a      	str	r2, [r3, #8]
}
 8013296:	bf00      	nop
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a0:	4770      	bx	lr

080132a2 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80132a2:	b480      	push	{r7}
 80132a4:	b083      	sub	sp, #12
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	6078      	str	r0, [r7, #4]
    runCount_++;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	1c5a      	adds	r2, r3, #1
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	60da      	str	r2, [r3, #12]
}
 80132b4:	bf00      	nop
 80132b6:	370c      	adds	r7, #12
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr

080132c0 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
    checkCount_++;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	691b      	ldr	r3, [r3, #16]
 80132cc:	1c5a      	adds	r2, r3, #1
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	611a      	str	r2, [r3, #16]
}
 80132d2:	bf00      	nop
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr

080132de <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 80132de:	b480      	push	{r7}
 80132e0:	b083      	sub	sp, #12
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	699b      	ldr	r3, [r3, #24]
 80132ea:	1c5a      	adds	r2, r3, #1
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	619a      	str	r2, [r3, #24]
}
 80132f0:	bf00      	nop
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr

080132fc <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 80132fc:	b480      	push	{r7}
 80132fe:	b083      	sub	sp, #12
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	69db      	ldr	r3, [r3, #28]
 8013308:	1c5a      	adds	r2, r3, #1
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	61da      	str	r2, [r3, #28]
}
 801330e:	bf00      	nop
 8013310:	370c      	adds	r7, #12
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr
	...

0801331c <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013324:	4b09      	ldr	r3, [pc, #36]	; (801334c <_ZN10TestResult12testsStartedEv+0x30>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	4798      	blx	r3
 801332a:	4603      	mov	r3, r0
 801332c:	461a      	mov	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	3308      	adds	r3, #8
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4610      	mov	r0, r2
 8013342:	4798      	blx	r3
}
 8013344:	bf00      	nop
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	200000a8 	.word	0x200000a8

08013350 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8013358:	4b0c      	ldr	r3, [pc, #48]	; (801338c <_ZN10TestResult10testsEndedEv+0x3c>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4798      	blx	r3
 801335e:	4603      	mov	r3, r0
 8013360:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	1ad2      	subs	r2, r2, r3
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685a      	ldr	r2, [r3, #4]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	330c      	adds	r3, #12
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	6879      	ldr	r1, [r7, #4]
 801337e:	4610      	mov	r0, r2
 8013380:	4798      	blx	r3
}
 8013382:	bf00      	nop
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	200000a8 	.word	0x200000a8

08013390 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8013390:	b480      	push	{r7}
 8013392:	b083      	sub	sp, #12
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6a1b      	ldr	r3, [r3, #32]
}
 801339c:	4618      	mov	r0, r3
 801339e:	370c      	adds	r7, #12
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr

080133a8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	370c      	adds	r7, #12
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr

080133d8 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80133d8:	b590      	push	{r4, r7, lr}
 80133da:	b087      	sub	sp, #28
 80133dc:	af00      	add	r7, sp, #0
 80133de:	ed87 0b04 	vstr	d0, [r7, #16]
 80133e2:	ed87 1b02 	vstr	d1, [r7, #8]
 80133e6:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 80133ea:	4b2c      	ldr	r3, [pc, #176]	; (801349c <_Z13doubles_equalddd+0xc4>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	ed97 0b04 	vldr	d0, [r7, #16]
 80133f2:	4798      	blx	r3
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d10f      	bne.n	801341a <_Z13doubles_equalddd+0x42>
 80133fa:	4b28      	ldr	r3, [pc, #160]	; (801349c <_Z13doubles_equalddd+0xc4>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8013402:	4798      	blx	r3
 8013404:	4603      	mov	r3, r0
 8013406:	2b00      	cmp	r3, #0
 8013408:	d107      	bne.n	801341a <_Z13doubles_equalddd+0x42>
 801340a:	4b24      	ldr	r3, [pc, #144]	; (801349c <_Z13doubles_equalddd+0xc4>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	ed97 0b00 	vldr	d0, [r7]
 8013412:	4798      	blx	r3
 8013414:	4603      	mov	r3, r0
 8013416:	2b00      	cmp	r3, #0
 8013418:	d001      	beq.n	801341e <_Z13doubles_equalddd+0x46>
 801341a:	2301      	movs	r3, #1
 801341c:	e000      	b.n	8013420 <_Z13doubles_equalddd+0x48>
 801341e:	2300      	movs	r3, #0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d001      	beq.n	8013428 <_Z13doubles_equalddd+0x50>
        return false;
 8013424:	2300      	movs	r3, #0
 8013426:	e035      	b.n	8013494 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8013428:	4b1d      	ldr	r3, [pc, #116]	; (80134a0 <_Z13doubles_equalddd+0xc8>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	ed97 0b04 	vldr	d0, [r7, #16]
 8013430:	4798      	blx	r3
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d009      	beq.n	801344c <_Z13doubles_equalddd+0x74>
 8013438:	4b19      	ldr	r3, [pc, #100]	; (80134a0 <_Z13doubles_equalddd+0xc8>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	ed97 0b02 	vldr	d0, [r7, #8]
 8013440:	4798      	blx	r3
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d001      	beq.n	801344c <_Z13doubles_equalddd+0x74>
 8013448:	2301      	movs	r3, #1
 801344a:	e000      	b.n	801344e <_Z13doubles_equalddd+0x76>
 801344c:	2300      	movs	r3, #0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d001      	beq.n	8013456 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8013452:	2301      	movs	r3, #1
 8013454:	e01e      	b.n	8013494 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8013456:	4b13      	ldr	r3, [pc, #76]	; (80134a4 <_Z13doubles_equalddd+0xcc>)
 8013458:	681c      	ldr	r4, [r3, #0]
 801345a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801345e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013462:	f7ec ff51 	bl	8000308 <__aeabi_dsub>
 8013466:	4602      	mov	r2, r0
 8013468:	460b      	mov	r3, r1
 801346a:	ec43 2b17 	vmov	d7, r2, r3
 801346e:	eeb0 0a47 	vmov.f32	s0, s14
 8013472:	eef0 0a67 	vmov.f32	s1, s15
 8013476:	47a0      	blx	r4
 8013478:	ec53 2b10 	vmov	r2, r3, d0
 801347c:	2101      	movs	r1, #1
 801347e:	460c      	mov	r4, r1
 8013480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013484:	f7ed f96c 	bl	8000760 <__aeabi_dcmpge>
 8013488:	4603      	mov	r3, r0
 801348a:	2b00      	cmp	r3, #0
 801348c:	d101      	bne.n	8013492 <_Z13doubles_equalddd+0xba>
 801348e:	2300      	movs	r3, #0
 8013490:	461c      	mov	r4, r3
 8013492:	b2e3      	uxtb	r3, r4
}
 8013494:	4618      	mov	r0, r3
 8013496:	371c      	adds	r7, #28
 8013498:	46bd      	mov	sp, r7
 801349a:	bd90      	pop	{r4, r7, pc}
 801349c:	200000e8 	.word	0x200000e8
 80134a0:	200000ec 	.word	0x200000ec
 80134a4:	200000dc 	.word	0x200000dc

080134a8 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	332c      	adds	r3, #44	; 0x2c
    }
 80134b4:	4618      	mov	r0, r3
 80134b6:	370c      	adds	r7, #12
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr

080134c0 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
    {
 80134c8:	4a0a      	ldr	r2, [pc, #40]	; (80134f4 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	332c      	adds	r3, #44	; 0x2c
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7ff fe00 	bl	80130d8 <_ZN10TestResultD1Ev>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	331c      	adds	r3, #28
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f6 f815 	bl	800950c <_ZN17ConsoleTestOutputD1Ev>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f000 f943 	bl	8013770 <_ZN10UtestShellD1Ev>
    }
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	4618      	mov	r0, r3
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	080297d4 	.word	0x080297d4

080134f8 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
    }
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7ff ffdd 	bl	80134c0 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013506:	2164      	movs	r1, #100	; 0x64
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f7f7 fd03 	bl	800af14 <_ZdlPvj>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af02      	add	r7, sp, #8
 801351e:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	2300      	movs	r3, #0
 8013524:	9300      	str	r3, [sp, #0]
 8013526:	4b0d      	ldr	r3, [pc, #52]	; (801355c <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8013528:	4a0d      	ldr	r2, [pc, #52]	; (8013560 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801352a:	490e      	ldr	r1, [pc, #56]	; (8013564 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 801352c:	f000 f8f8 	bl	8013720 <_ZN10UtestShellC1EPKcS1_S1_j>
 8013530:	4a0d      	ldr	r2, [pc, #52]	; (8013568 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	331c      	adds	r3, #28
 801353a:	4618      	mov	r0, r3
 801353c:	f7f5 ffd4 	bl	80094e8 <_ZN17ConsoleTestOutputC1Ev>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	331c      	adds	r3, #28
 801354a:	4619      	mov	r1, r3
 801354c:	4610      	mov	r0, r2
 801354e:	f7ff fd8b 	bl	8013068 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	08025cbc 	.word	0x08025cbc
 8013560:	08025ccc 	.word	0x08025ccc
 8013564:	08025d0c 	.word	0x08025d0c
 8013568:	080297d4 	.word	0x080297d4

0801356c <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
 8013570:	4801      	ldr	r0, [pc, #4]	; (8013578 <__tcf_0+0xc>)
 8013572:	f7ff ffa5 	bl	80134c0 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20000ad4 	.word	0x20000ad4

0801357c <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 801357c:	b580      	push	{r7, lr}
 801357e:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8013580:	4b12      	ldr	r3, [pc, #72]	; (80135cc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	f3bf 8f5b 	dmb	ish
 8013588:	b2db      	uxtb	r3, r3
 801358a:	f003 0301 	and.w	r3, r3, #1
 801358e:	2b00      	cmp	r3, #0
 8013590:	bf0c      	ite	eq
 8013592:	2301      	moveq	r3, #1
 8013594:	2300      	movne	r3, #0
 8013596:	b2db      	uxtb	r3, r3
 8013598:	2b00      	cmp	r3, #0
 801359a:	d013      	beq.n	80135c4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 801359c:	480b      	ldr	r0, [pc, #44]	; (80135cc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801359e:	f00c ff27 	bl	80203f0 <__cxa_guard_acquire>
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	bf14      	ite	ne
 80135a8:	2301      	movne	r3, #1
 80135aa:	2300      	moveq	r3, #0
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d008      	beq.n	80135c4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80135b2:	4807      	ldr	r0, [pc, #28]	; (80135d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80135b4:	f7ff ffb0 	bl	8013518 <_ZN22OutsideTestRunnerUTestC1Ev>
 80135b8:	4804      	ldr	r0, [pc, #16]	; (80135cc <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80135ba:	f00c ff25 	bl	8020408 <__cxa_guard_release>
 80135be:	4805      	ldr	r0, [pc, #20]	; (80135d4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80135c0:	f00c ff49 	bl	8020456 <atexit>
    return instance_;
 80135c4:	4b02      	ldr	r3, [pc, #8]	; (80135d0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20000b38 	.word	0x20000b38
 80135d0:	20000ad4 	.word	0x20000ad4
 80135d4:	0801356d 	.word	0x0801356d

080135d8 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	330c      	adds	r3, #12
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	4798      	blx	r3
    }
 80135ec:	bf00      	nop
 80135ee:	3708      	adds	r7, #8
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	3314      	adds	r3, #20
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	4798      	blx	r3
    }
 8013608:	bf00      	nop
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	3310      	adds	r3, #16
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	4798      	blx	r3
    }
 8013624:	bf00      	nop
 8013626:	3708      	adds	r7, #8
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
 8013638:	603b      	str	r3, [r7, #0]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	601a      	str	r2, [r3, #0]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	605a      	str	r2, [r3, #4]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	609a      	str	r2, [r3, #8]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	4618      	mov	r0, r3
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801365a:	b580      	push	{r7, lr}
 801365c:	b086      	sub	sp, #24
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	685b      	ldr	r3, [r3, #4]
 8013670:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	689b      	ldr	r3, [r3, #8]
 8013676:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	3394      	adds	r3, #148	; 0x94
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	68ba      	ldr	r2, [r7, #8]
 8013682:	68f9      	ldr	r1, [r7, #12]
 8013684:	6938      	ldr	r0, [r7, #16]
 8013686:	4798      	blx	r3
    }
 8013688:	bf00      	nop
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8013690:	b580      	push	{r7, lr}
 8013692:	b086      	sub	sp, #24
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	685b      	ldr	r3, [r3, #4]
 80136a6:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	689b      	ldr	r3, [r3, #8]
 80136ac:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80136ae:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <helperDoRunOneTestSeperateProcess+0x34>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	68ba      	ldr	r2, [r7, #8]
 80136b4:	68f9      	ldr	r1, [r7, #12]
 80136b6:	6938      	ldr	r0, [r7, #16]
 80136b8:	4798      	blx	r3
    }
 80136ba:	bf00      	nop
 80136bc:	3718      	adds	r7, #24
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	2000009c 	.word	0x2000009c

080136c8 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80136c8:	b480      	push	{r7}
 80136ca:	b083      	sub	sp, #12
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80136d0:	4a0f      	ldr	r2, [pc, #60]	; (8013710 <_ZN10UtestShellC1Ev+0x48>)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	601a      	str	r2, [r3, #0]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4a0e      	ldr	r2, [pc, #56]	; (8013714 <_ZN10UtestShellC1Ev+0x4c>)
 80136da:	605a      	str	r2, [r3, #4]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	4a0e      	ldr	r2, [pc, #56]	; (8013718 <_ZN10UtestShellC1Ev+0x50>)
 80136e0:	609a      	str	r2, [r3, #8]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4a0d      	ldr	r2, [pc, #52]	; (801371c <_ZN10UtestShellC1Ev+0x54>)
 80136e6:	60da      	str	r2, [r3, #12]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2200      	movs	r2, #0
 80136ec:	611a      	str	r2, [r3, #16]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2200      	movs	r2, #0
 80136f2:	615a      	str	r2, [r3, #20]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	761a      	strb	r2, [r3, #24]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2200      	movs	r2, #0
 80136fe:	765a      	strb	r2, [r3, #25]
{
}
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	4618      	mov	r0, r3
 8013704:	370c      	adds	r7, #12
 8013706:	46bd      	mov	sp, r7
 8013708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop
 8013710:	08029894 	.word	0x08029894
 8013714:	08025d58 	.word	0x08025d58
 8013718:	08025d6c 	.word	0x08025d6c
 801371c:	08025d7c 	.word	0x08025d7c

08013720 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
 801372c:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801372e:	4a0f      	ldr	r2, [pc, #60]	; (801376c <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	68ba      	ldr	r2, [r7, #8]
 8013738:	605a      	str	r2, [r3, #4]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	609a      	str	r2, [r3, #8]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	683a      	ldr	r2, [r7, #0]
 8013744:	60da      	str	r2, [r3, #12]
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	69ba      	ldr	r2, [r7, #24]
 801374a:	611a      	str	r2, [r3, #16]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2200      	movs	r2, #0
 8013750:	615a      	str	r2, [r3, #20]
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2200      	movs	r2, #0
 8013756:	761a      	strb	r2, [r3, #24]
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2200      	movs	r2, #0
 801375c:	765a      	strb	r2, [r3, #25]
{
}
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	4618      	mov	r0, r3
 8013762:	3714      	adds	r7, #20
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr
 801376c:	08029894 	.word	0x08029894

08013770 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8013770:	b480      	push	{r7}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	4a04      	ldr	r2, [pc, #16]	; (801378c <_ZN10UtestShellD1Ev+0x1c>)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
{
}
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	370c      	adds	r7, #12
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr
 801378c:	08029894 	.word	0x08029894

08013790 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
}
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7ff ffe9 	bl	8013770 <_ZN10UtestShellD1Ev>
 801379e:	211c      	movs	r1, #28
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7f7 fbb7 	bl	800af14 <_ZdlPvj>
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80137b6:	2300      	movs	r3, #0
 80137b8:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	3310      	adds	r3, #16
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	4798      	blx	r3
}
 80137c6:	bf00      	nop
 80137c8:	3708      	adds	r7, #8
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
	...

080137d0 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80137d4:	4b02      	ldr	r3, [pc, #8]	; (80137e0 <_ZN10UtestShell5crashEv+0x10>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	4798      	blx	r3
}
 80137da:	bf00      	nop
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	20000098 	.word	0x20000098

080137e4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b088      	sub	sp, #32
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	765a      	strb	r2, [r3, #25]
    result.countRun();
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	3324      	adds	r3, #36	; 0x24
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8013802:	f107 0014 	add.w	r0, r7, #20
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	68f9      	ldr	r1, [r7, #12]
 801380c:	f7ff ff0e 	bl	801362c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	337c      	adds	r3, #124	; 0x7c
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	4798      	blx	r3
 801381c:	4603      	mov	r3, r0
 801381e:	2b00      	cmp	r3, #0
 8013820:	d007      	beq.n	8013832 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8013822:	4b09      	ldr	r3, [pc, #36]	; (8013848 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f107 0214 	add.w	r2, r7, #20
 801382a:	4611      	mov	r1, r2
 801382c:	4807      	ldr	r0, [pc, #28]	; (801384c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801382e:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8013830:	e006      	b.n	8013840 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8013832:	4b05      	ldr	r3, [pc, #20]	; (8013848 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f107 0214 	add.w	r2, r7, #20
 801383a:	4611      	mov	r1, r2
 801383c:	4804      	ldr	r0, [pc, #16]	; (8013850 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801383e:	4798      	blx	r3
}
 8013840:	bf00      	nop
 8013842:	3720      	adds	r7, #32
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	200000a4 	.word	0x200000a4
 801384c:	08013691 	.word	0x08013691
 8013850:	0801365b 	.word	0x0801365b

08013854 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8013854:	b590      	push	{r4, r7, lr}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
    return new Utest();
 801385c:	22d3      	movs	r2, #211	; 0xd3
 801385e:	4906      	ldr	r1, [pc, #24]	; (8013878 <_ZN10UtestShell10createTestEv+0x24>)
 8013860:	2004      	movs	r0, #4
 8013862:	f7f7 fb43 	bl	800aeec <_ZnwjPKci>
 8013866:	4604      	mov	r4, r0
 8013868:	4620      	mov	r0, r4
 801386a:	f001 fb0f 	bl	8014e8c <_ZN5UtestC1Ev>
 801386e:	4623      	mov	r3, r4
}
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	bd90      	pop	{r4, r7, pc}
 8013878:	08025d8c 	.word	0x08025d8c

0801387c <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
 8013884:	6039      	str	r1, [r7, #0]
    delete test;
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d004      	beq.n	8013896 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	3204      	adds	r2, #4
 8013890:	6812      	ldr	r2, [r2, #0]
 8013892:	4618      	mov	r0, r3
 8013894:	4790      	blx	r2
}
 8013896:	bf00      	nop
 8013898:	3708      	adds	r7, #8
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}
	...

080138a0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	333c      	adds	r3, #60	; 0x3c
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	4940      	ldr	r1, [pc, #256]	; (80139b8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	3314      	adds	r3, #20
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	68f9      	ldr	r1, [r7, #12]
 80138c6:	68b8      	ldr	r0, [r7, #8]
 80138c8:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	333c      	adds	r3, #60	; 0x3c
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	493a      	ldr	r1, [pc, #232]	; (80139bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80138d8:	f001 faae 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80138dc:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80138de:	68f8      	ldr	r0, [r7, #12]
 80138e0:	f001 fa90 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80138e4:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 80138e6:	6879      	ldr	r1, [r7, #4]
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	f001 fa6b 	bl	8014dc4 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 80138ee:	68f9      	ldr	r1, [r7, #12]
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f001 fa77 	bl	8014de4 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	333c      	adds	r3, #60	; 0x3c
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	4930      	ldr	r1, [pc, #192]	; (80139c0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	4798      	blx	r3
    Utest* testToRun = createTest();
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	3388      	adds	r3, #136	; 0x88
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	4798      	blx	r3
 8013910:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	333c      	adds	r3, #60	; 0x3c
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	492a      	ldr	r1, [pc, #168]	; (80139c4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	333c      	adds	r3, #60	; 0x3c
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	4927      	ldr	r1, [pc, #156]	; (80139c8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	4798      	blx	r3
    testToRun->run();
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	3308      	adds	r3, #8
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	6978      	ldr	r0, [r7, #20]
 8013938:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	333c      	adds	r3, #60	; 0x3c
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	4922      	ldr	r1, [pc, #136]	; (80139cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8013948:	69f9      	ldr	r1, [r7, #28]
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f001 fa4a 	bl	8014de4 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8013950:	69b9      	ldr	r1, [r7, #24]
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f001 fa36 	bl	8014dc4 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	333c      	adds	r3, #60	; 0x3c
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	491b      	ldr	r1, [pc, #108]	; (80139d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	4798      	blx	r3
    destroyTest(testToRun);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	338c      	adds	r3, #140	; 0x8c
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	6979      	ldr	r1, [r7, #20]
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	333c      	adds	r3, #60	; 0x3c
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4915      	ldr	r1, [pc, #84]	; (80139d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	333c      	adds	r3, #60	; 0x3c
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4913      	ldr	r1, [pc, #76]	; (80139d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	3318      	adds	r3, #24
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	68f9      	ldr	r1, [r7, #12]
 801399c:	68b8      	ldr	r0, [r7, #8]
 801399e:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	333c      	adds	r3, #60	; 0x3c
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	490c      	ldr	r1, [pc, #48]	; (80139dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	4798      	blx	r3
}
 80139ae:	bf00      	nop
 80139b0:	3720      	adds	r7, #32
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	08025da0 	.word	0x08025da0
 80139bc:	08025dc4 	.word	0x08025dc4
 80139c0:	08025de4 	.word	0x08025de4
 80139c4:	08025e00 	.word	0x08025e00
 80139c8:	08025e1c 	.word	0x08025e1c
 80139cc:	08025e38 	.word	0x08025e38
 80139d0:	08025e50 	.word	0x08025e50
 80139d4:	08025e6c 	.word	0x08025e6c
 80139d8:	08025e88 	.word	0x08025e88
 80139dc:	08025eac 	.word	0x08025eac

080139e0 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
    return next_;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	695b      	ldr	r3, [r3, #20]
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	370c      	adds	r7, #12
 80139f0:	46bd      	mov	sp, r7
 80139f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f6:	4770      	bx	lr

080139f8 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
    next_ = test;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	683a      	ldr	r2, [r7, #0]
 8013a06:	615a      	str	r2, [r3, #20]
    return this;
 8013a08:	687b      	ldr	r3, [r7, #4]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr

08013a16 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8013a16:	b580      	push	{r7, lr}
 8013a18:	b082      	sub	sp, #8
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	695b      	ldr	r3, [r3, #20]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00b      	beq.n	8013a3e <_ZN10UtestShell10countTestsEv+0x28>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	695a      	ldr	r2, [r3, #20]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	695b      	ldr	r3, [r3, #20]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	3310      	adds	r3, #16
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4610      	mov	r0, r2
 8013a36:	4798      	blx	r3
 8013a38:	4603      	mov	r3, r0
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	e000      	b.n	8013a40 <_ZN10UtestShell10countTestsEv+0x2a>
 8013a3e:	2301      	movs	r3, #1
}
 8013a40:	4618      	mov	r0, r3
 8013a42:	3708      	adds	r7, #8
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}

08013a48 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
    return "TEST";
 8013a52:	4904      	ldr	r1, [pc, #16]	; (8013a64 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7f9 fe0c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	3708      	adds	r7, #8
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	08025ed0 	.word	0x08025ed0

08013a68 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	689b      	ldr	r3, [r3, #8]
 8013a76:	4619      	mov	r1, r3
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7f9 fdfa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	3708      	adds	r7, #8
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b082      	sub	sp, #8
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	4619      	mov	r1, r3
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7f9 fdeb 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	33a0      	adds	r3, #160	; 0xa0
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	6839      	ldr	r1, [r7, #0]
 8013aba:	4610      	mov	r0, r2
 8013abc:	4798      	blx	r3
    formattedName += "(";
 8013abe:	490e      	ldr	r1, [pc, #56]	; (8013af8 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7fa fa1d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	4619      	mov	r1, r3
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7fa fa17 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8013ad2:	490a      	ldr	r1, [pc, #40]	; (8013afc <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7fa fa13 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	689b      	ldr	r3, [r3, #8]
 8013ade:	4619      	mov	r1, r3
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7fa fa0d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8013ae6:	4906      	ldr	r1, [pc, #24]	; (8013b00 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f7fa fa09 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8013aee:	bf00      	nop
}
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	08025ed8 	.word	0x08025ed8
 8013afc:	08025edc 	.word	0x08025edc
 8013b00:	08025ee0 	.word	0x08025ee0

08013b04 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	7e5b      	ldrb	r3, [r3, #25]
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f001 f96d 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	3228      	adds	r2, #40	; 0x28
 8013b30:	6812      	ldr	r2, [r2, #0]
 8013b32:	4618      	mov	r0, r3
 8013b34:	4790      	blx	r2
}
 8013b36:	bf00      	nop
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}

08013b3e <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8013b3e:	b480      	push	{r7}
 8013b40:	b083      	sub	sp, #12
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	6078      	str	r0, [r7, #4]
    return true;
 8013b46:	2301      	movs	r3, #1
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	370c      	adds	r7, #12
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8013b54:	b480      	push	{r7}
 8013b56:	b083      	sub	sp, #12
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	7e1b      	ldrb	r3, [r3, #24]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	370c      	adds	r7, #12
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2201      	movs	r2, #1
 8013b78:	761a      	strb	r2, [r3, #24]
}
 8013b7a:	bf00      	nop
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr

08013b86 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8013b86:	b480      	push	{r7}
 8013b88:	b083      	sub	sp, #12
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]

}
 8013b8e:	bf00      	nop
 8013b90:	370c      	adds	r7, #12
 8013b92:	46bd      	mov	sp, r7
 8013b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b98:	4770      	bx	lr

08013b9a <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8013b9a:	b480      	push	{r7}
 8013b9c:	b083      	sub	sp, #12
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	60da      	str	r2, [r3, #12]
}
 8013baa:	bf00      	nop
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8013bb6:	b480      	push	{r7}
 8013bb8:	b083      	sub	sp, #12
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	683a      	ldr	r2, [r7, #0]
 8013bc4:	611a      	str	r2, [r3, #16]
}
 8013bc6:	bf00      	nop
 8013bc8:	370c      	adds	r7, #12
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr

08013bd2 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8013bd2:	b480      	push	{r7}
 8013bd4:	b083      	sub	sp, #12
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
 8013bda:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	683a      	ldr	r2, [r7, #0]
 8013be0:	605a      	str	r2, [r3, #4]
}
 8013be2:	bf00      	nop
 8013be4:	370c      	adds	r7, #12
 8013be6:	46bd      	mov	sp, r7
 8013be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bec:	4770      	bx	lr

08013bee <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8013bee:	b480      	push	{r7}
 8013bf0:	b083      	sub	sp, #12
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
 8013bf6:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	683a      	ldr	r2, [r7, #0]
 8013bfc:	609a      	str	r2, [r3, #8]
}
 8013bfe:	bf00      	nop
 8013c00:	370c      	adds	r7, #12
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr

08013c0a <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b082      	sub	sp, #8
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
 8013c12:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	4619      	mov	r1, r3
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f7f9 fd29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	691b      	ldr	r3, [r3, #16]
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	370c      	adds	r7, #12
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr

08013c40 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8013c40:	b590      	push	{r4, r7, lr}
 8013c42:	b087      	sub	sp, #28
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d101      	bne.n	8013c56 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8013c52:	2301      	movs	r3, #1
 8013c54:	e01f      	b.n	8013c96 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d01b      	beq.n	8013c94 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8013c5c:	f107 0310 	add.w	r3, r7, #16
 8013c60:	68b9      	ldr	r1, [r7, #8]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f9 fd05 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013c68:	f107 0310 	add.w	r3, r7, #16
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f00c fb91 	bl	8020396 <_ZNK10TestFilter5matchERK12SimpleString>
 8013c74:	4603      	mov	r3, r0
 8013c76:	461c      	mov	r4, r3
 8013c78:	f107 0310 	add.w	r3, r7, #16
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7fa f8b0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8013c82:	2c00      	cmp	r4, #0
 8013c84:	d001      	beq.n	8013c8a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8013c86:	2301      	movs	r3, #1
 8013c88:	e005      	b.n	8013c96 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f00c fb5d 	bl	802034a <_ZNK10TestFilter7getNextEv>
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	e7e0      	b.n	8013c56 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	371c      	adds	r7, #28
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd90      	pop	{r4, r7, pc}

08013c9e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b084      	sub	sp, #16
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	60f8      	str	r0, [r7, #12]
 8013ca6:	60b9      	str	r1, [r7, #8]
 8013ca8:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	685b      	ldr	r3, [r3, #4]
 8013cae:	68ba      	ldr	r2, [r7, #8]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f7ff ffc4 	bl	8013c40 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00b      	beq.n	8013cd6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	689b      	ldr	r3, [r3, #8]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	68f8      	ldr	r0, [r7, #12]
 8013cc8:	f7ff ffba 	bl	8013c40 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e000      	b.n	8013cd8 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8013cd6:	2300      	movs	r3, #0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3710      	adds	r7, #16
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8013ce0:	b590      	push	{r4, r7, lr}
 8013ce2:	b083      	sub	sp, #12
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	339c      	adds	r3, #156	; 0x9c
 8013cf0:	681c      	ldr	r4, [r3, #0]
 8013cf2:	f001 f8b1 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	6839      	ldr	r1, [r7, #0]
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8013d00:	bf00      	nop
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd90      	pop	{r4, r7, pc}

08013d08 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2201      	movs	r2, #1
 8013d18:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f001 f872 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013d20:	4603      	mov	r3, r0
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	3234      	adds	r2, #52	; 0x34
 8013d26:	6812      	ldr	r2, [r2, #0]
 8013d28:	68b9      	ldr	r1, [r7, #8]
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	4790      	blx	r2
    terminator.exitCurrentTest();
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013d38:	bf00      	nop
 8013d3a:	3710      	adds	r7, #16
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	6838      	ldr	r0, [r7, #0]
 8013d52:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013d5c:	b590      	push	{r4, r7, lr}
 8013d5e:	b09d      	sub	sp, #116	; 0x74
 8013d60:	af04      	add	r7, sp, #16
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	607a      	str	r2, [r7, #4]
 8013d66:	603b      	str	r3, [r7, #0]
 8013d68:	460b      	mov	r3, r1
 8013d6a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f001 f849 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013d72:	4603      	mov	r3, r0
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	3228      	adds	r2, #40	; 0x28
 8013d78:	6812      	ldr	r2, [r2, #0]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	4790      	blx	r2
    if (!condition)
 8013d7e:	7afb      	ldrb	r3, [r7, #11]
 8013d80:	f083 0301 	eor.w	r3, r3, #1
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d03f      	beq.n	8013e0a <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	339c      	adds	r3, #156	; 0x9c
 8013d90:	681c      	ldr	r4, [r3, #0]
 8013d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d96:	6879      	ldr	r1, [r7, #4]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7f9 fc6a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013d9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013da2:	6839      	ldr	r1, [r7, #0]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7f9 fc64 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013dae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7f9 fc5e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013db6:	f107 0014 	add.w	r0, r7, #20
 8013dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013dbe:	9302      	str	r3, [sp, #8]
 8013dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dc4:	9301      	str	r3, [sp, #4]
 8013dc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013dce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013dd0:	68f9      	ldr	r1, [r7, #12]
 8013dd2:	f7fb ff6b 	bl	800fcac <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8013dd6:	f107 0314 	add.w	r3, r7, #20
 8013dda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013ddc:	4619      	mov	r1, r3
 8013dde:	68f8      	ldr	r0, [r7, #12]
 8013de0:	47a0      	blx	r4
 8013de2:	f107 0314 	add.w	r3, r7, #20
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fc fdce 	bl	8010988 <_ZN12CheckFailureD1Ev>
 8013dec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f9 fff6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8013df6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7f9 fff1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8013e00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f9 ffec 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8013e0a:	bf00      	nop
 8013e0c:	3764      	adds	r7, #100	; 0x64
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd90      	pop	{r4, r7, pc}

08013e12 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e12:	b590      	push	{r4, r7, lr}
 8013e14:	b097      	sub	sp, #92	; 0x5c
 8013e16:	af02      	add	r7, sp, #8
 8013e18:	60f8      	str	r0, [r7, #12]
 8013e1a:	60b9      	str	r1, [r7, #8]
 8013e1c:	607a      	str	r2, [r7, #4]
 8013e1e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f000 ffef 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013e26:	4603      	mov	r3, r0
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	3228      	adds	r2, #40	; 0x28
 8013e2c:	6812      	ldr	r2, [r2, #0]
 8013e2e:	4618      	mov	r0, r3
 8013e30:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	339c      	adds	r3, #156	; 0x9c
 8013e38:	681c      	ldr	r4, [r3, #0]
 8013e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e3e:	68b9      	ldr	r1, [r7, #8]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f9 fc16 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013e46:	f107 0014 	add.w	r0, r7, #20
 8013e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	68f9      	ldr	r1, [r7, #12]
 8013e56:	f7fb ff71 	bl	800fd3c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8013e5a:	f107 0314 	add.w	r3, r7, #20
 8013e5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013e60:	4619      	mov	r1, r3
 8013e62:	68f8      	ldr	r0, [r7, #12]
 8013e64:	47a0      	blx	r4
 8013e66:	f107 0314 	add.w	r3, r7, #20
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7f7 fc16 	bl	800b69c <_ZN11FailFailureD1Ev>
 8013e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f9 ffb4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8013e7a:	bf00      	nop
 8013e7c:	3754      	adds	r7, #84	; 0x54
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd90      	pop	{r4, r7, pc}

08013e82 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013e82:	b590      	push	{r4, r7, lr}
 8013e84:	b0a7      	sub	sp, #156	; 0x9c
 8013e86:	af04      	add	r7, sp, #16
 8013e88:	60f8      	str	r0, [r7, #12]
 8013e8a:	60b9      	str	r1, [r7, #8]
 8013e8c:	607a      	str	r2, [r7, #4]
 8013e8e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	f000 ffb7 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013e96:	4603      	mov	r3, r0
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	3228      	adds	r2, #40	; 0x28
 8013e9c:	6812      	ldr	r2, [r2, #0]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d102      	bne.n	8013eae <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d068      	beq.n	8013f80 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d002      	beq.n	8013eba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d12a      	bne.n	8013f10 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	339c      	adds	r3, #156	; 0x9c
 8013ec0:	681c      	ldr	r4, [r3, #0]
 8013ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ec6:	6839      	ldr	r1, [r7, #0]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f9 fbd2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013ece:	f107 0010 	add.w	r0, r7, #16
 8013ed2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013ed6:	9302      	str	r3, [sp, #8]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	9301      	str	r3, [sp, #4]
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	9300      	str	r3, [sp, #0]
 8013ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013ee4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013ee8:	68f9      	ldr	r1, [r7, #12]
 8013eea:	f7fc f9ad 	bl	8010248 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013eee:	f107 0310 	add.w	r3, r7, #16
 8013ef2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	47a0      	blx	r4
 8013efc:	f107 0310 	add.w	r3, r7, #16
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7fc fcb9 	bl	8010878 <_ZN18StringEqualFailureD1Ev>
 8013f06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f9 ff69 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8013f10:	6879      	ldr	r1, [r7, #4]
 8013f12:	68b8      	ldr	r0, [r7, #8]
 8013f14:	f7f9 f9ea 	bl	800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bf14      	ite	ne
 8013f1e:	2301      	movne	r3, #1
 8013f20:	2300      	moveq	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d02c      	beq.n	8013f82 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	339c      	adds	r3, #156	; 0x9c
 8013f2e:	681c      	ldr	r4, [r3, #0]
 8013f30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013f34:	6839      	ldr	r1, [r7, #0]
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7f9 fb9b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013f3c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8013f40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013f44:	9302      	str	r3, [sp, #8]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	9301      	str	r3, [sp, #4]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8013f56:	68f9      	ldr	r1, [r7, #12]
 8013f58:	f7fc f976 	bl	8010248 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013f60:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8013f64:	4619      	mov	r1, r3
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	47a0      	blx	r4
 8013f6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7fc fc82 	bl	8010878 <_ZN18StringEqualFailureD1Ev>
 8013f74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7f9 ff32 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8013f7e:	e000      	b.n	8013f82 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013f80:	bf00      	nop
}
 8013f82:	378c      	adds	r7, #140	; 0x8c
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd90      	pop	{r4, r7, pc}

08013f88 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8013f88:	b590      	push	{r4, r7, lr}
 8013f8a:	b0a7      	sub	sp, #156	; 0x9c
 8013f8c:	af04      	add	r7, sp, #16
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	607a      	str	r2, [r7, #4]
 8013f94:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f000 ff34 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	3228      	adds	r2, #40	; 0x28
 8013fa2:	6812      	ldr	r2, [r2, #0]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d102      	bne.n	8013fb4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d06b      	beq.n	801408c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d002      	beq.n	8013fc0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d12b      	bne.n	8014018 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	339c      	adds	r3, #156	; 0x9c
 8013fc6:	681c      	ldr	r4, [r3, #0]
 8013fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fcc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7f9 fb4e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8013fd6:	f107 0010 	add.w	r0, r7, #16
 8013fda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013fde:	9302      	str	r3, [sp, #8]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013fec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013ff0:	68f9      	ldr	r1, [r7, #12]
 8013ff2:	f7fc f929 	bl	8010248 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8013ff6:	f107 0310 	add.w	r3, r7, #16
 8013ffa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013ffe:	4619      	mov	r1, r3
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	47a0      	blx	r4
 8014004:	f107 0310 	add.w	r3, r7, #16
 8014008:	4618      	mov	r0, r3
 801400a:	f7fc fc35 	bl	8010878 <_ZN18StringEqualFailureD1Ev>
 801400e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014012:	4618      	mov	r0, r3
 8014014:	f7f9 fee5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8014018:	683a      	ldr	r2, [r7, #0]
 801401a:	6879      	ldr	r1, [r7, #4]
 801401c:	68b8      	ldr	r0, [r7, #8]
 801401e:	f7f9 f9a4 	bl	800d36a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8014022:	4603      	mov	r3, r0
 8014024:	2b00      	cmp	r3, #0
 8014026:	bf14      	ite	ne
 8014028:	2301      	movne	r3, #1
 801402a:	2300      	moveq	r3, #0
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b00      	cmp	r3, #0
 8014030:	d02d      	beq.n	801408e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	339c      	adds	r3, #156	; 0x9c
 8014038:	681c      	ldr	r4, [r3, #0]
 801403a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801403e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014042:	4618      	mov	r0, r3
 8014044:	f7f9 fb15 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014048:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801404c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014050:	9302      	str	r3, [sp, #8]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	9301      	str	r3, [sp, #4]
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801405e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014062:	68f9      	ldr	r1, [r7, #12]
 8014064:	f7fc f8f0 	bl	8010248 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801406c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014070:	4619      	mov	r1, r3
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	47a0      	blx	r4
 8014076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801407a:	4618      	mov	r0, r3
 801407c:	f7fc fbfc 	bl	8010878 <_ZN18StringEqualFailureD1Ev>
 8014080:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014084:	4618      	mov	r0, r3
 8014086:	f7f9 feac 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801408a:	e000      	b.n	801408e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801408c:	bf00      	nop
}
 801408e:	378c      	adds	r7, #140	; 0x8c
 8014090:	46bd      	mov	sp, r7
 8014092:	bd90      	pop	{r4, r7, pc}

08014094 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8014094:	b590      	push	{r4, r7, lr}
 8014096:	b0ab      	sub	sp, #172	; 0xac
 8014098:	af04      	add	r7, sp, #16
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80140a2:	68f8      	ldr	r0, [r7, #12]
 80140a4:	f000 feae 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80140a8:	4603      	mov	r3, r0
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	3228      	adds	r2, #40	; 0x28
 80140ae:	6812      	ldr	r2, [r2, #0]
 80140b0:	4618      	mov	r0, r3
 80140b2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d102      	bne.n	80140c0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d07c      	beq.n	80141ba <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d002      	beq.n	80140cc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d128      	bne.n	801411e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	3398      	adds	r3, #152	; 0x98
 80140d2:	681c      	ldr	r4, [r3, #0]
 80140d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80140d8:	6839      	ldr	r1, [r7, #0]
 80140da:	4618      	mov	r0, r3
 80140dc:	f7f9 fac9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80140e0:	f107 0010 	add.w	r0, r7, #16
 80140e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80140e8:	9302      	str	r3, [sp, #8]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	9301      	str	r3, [sp, #4]
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80140f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80140fa:	68f9      	ldr	r1, [r7, #12]
 80140fc:	f7fc f948 	bl	8010390 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014100:	f107 0310 	add.w	r3, r7, #16
 8014104:	4619      	mov	r1, r3
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	47a0      	blx	r4
 801410a:	f107 0310 	add.w	r3, r7, #16
 801410e:	4618      	mov	r0, r3
 8014110:	f7fc fb90 	bl	8010834 <_ZN24StringEqualNoCaseFailureD1Ev>
 8014114:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014118:	4618      	mov	r0, r3
 801411a:	f7f9 fe62 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 801411e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014122:	68b9      	ldr	r1, [r7, #8]
 8014124:	4618      	mov	r0, r3
 8014126:	f7f9 faa4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801412a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801412e:	6879      	ldr	r1, [r7, #4]
 8014130:	4618      	mov	r0, r3
 8014132:	f7f9 fa9e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014136:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801413a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801413e:	4611      	mov	r1, r2
 8014140:	4618      	mov	r0, r3
 8014142:	f7f9 fe75 	bl	800de30 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8014146:	4603      	mov	r3, r0
 8014148:	f083 0301 	eor.w	r3, r3, #1
 801414c:	b2dc      	uxtb	r4, r3
 801414e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014152:	4618      	mov	r0, r3
 8014154:	f7f9 fe45 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014158:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801415c:	4618      	mov	r0, r3
 801415e:	f7f9 fe40 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014162:	2c00      	cmp	r4, #0
 8014164:	d02a      	beq.n	80141bc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	3398      	adds	r3, #152	; 0x98
 801416c:	681c      	ldr	r4, [r3, #0]
 801416e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014172:	6839      	ldr	r1, [r7, #0]
 8014174:	4618      	mov	r0, r3
 8014176:	f7f9 fa7c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801417a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801417e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014182:	9302      	str	r3, [sp, #8]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	9301      	str	r3, [sp, #4]
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	9300      	str	r3, [sp, #0]
 801418c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014190:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014194:	68f9      	ldr	r1, [r7, #12]
 8014196:	f7fc f8fb 	bl	8010390 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801419a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801419e:	4619      	mov	r1, r3
 80141a0:	68f8      	ldr	r0, [r7, #12]
 80141a2:	47a0      	blx	r4
 80141a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fc fb43 	bl	8010834 <_ZN24StringEqualNoCaseFailureD1Ev>
 80141ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f9 fe15 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80141b8:	e000      	b.n	80141bc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80141ba:	bf00      	nop
}
 80141bc:	379c      	adds	r7, #156	; 0x9c
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd90      	pop	{r4, r7, pc}

080141c2 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80141c2:	b590      	push	{r4, r7, lr}
 80141c4:	b0b3      	sub	sp, #204	; 0xcc
 80141c6:	af04      	add	r7, sp, #16
 80141c8:	60f8      	str	r0, [r7, #12]
 80141ca:	60b9      	str	r1, [r7, #8]
 80141cc:	607a      	str	r2, [r7, #4]
 80141ce:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f000 fe17 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80141d6:	4603      	mov	r3, r0
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	3228      	adds	r2, #40	; 0x28
 80141dc:	6812      	ldr	r2, [r2, #0]
 80141de:	4618      	mov	r0, r3
 80141e0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d103      	bne.n	80141f0 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f000 80ad 	beq.w	801434a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d002      	beq.n	80141fc <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d140      	bne.n	801427e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	3398      	adds	r3, #152	; 0x98
 8014202:	681c      	ldr	r4, [r3, #0]
 8014204:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014208:	68b9      	ldr	r1, [r7, #8]
 801420a:	4618      	mov	r0, r3
 801420c:	f7f9 fa31 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014210:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014214:	6879      	ldr	r1, [r7, #4]
 8014216:	4618      	mov	r0, r3
 8014218:	f7f9 fa2b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801421c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014220:	6839      	ldr	r1, [r7, #0]
 8014222:	4618      	mov	r0, r3
 8014224:	f7f9 fa25 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014228:	f107 0010 	add.w	r0, r7, #16
 801422c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014230:	9302      	str	r3, [sp, #8]
 8014232:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014242:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014246:	68f9      	ldr	r1, [r7, #12]
 8014248:	f7fb fce6 	bl	800fc18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801424c:	f107 0310 	add.w	r3, r7, #16
 8014250:	4619      	mov	r1, r3
 8014252:	68f8      	ldr	r0, [r7, #12]
 8014254:	47a0      	blx	r4
 8014256:	f107 0310 	add.w	r3, r7, #16
 801425a:	4618      	mov	r0, r3
 801425c:	f7fc fbb6 	bl	80109cc <_ZN15ContainsFailureD1Ev>
 8014260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014264:	4618      	mov	r0, r3
 8014266:	f7f9 fdbc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801426a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801426e:	4618      	mov	r0, r3
 8014270:	f7f9 fdb7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014278:	4618      	mov	r0, r3
 801427a:	f7f9 fdb2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 801427e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014282:	6879      	ldr	r1, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	f7f9 f9f4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801428a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801428e:	68b9      	ldr	r1, [r7, #8]
 8014290:	4618      	mov	r0, r3
 8014292:	f7f9 f9ee 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014296:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801429a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801429e:	4611      	mov	r1, r2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f9 fa64 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f083 0301 	eor.w	r3, r3, #1
 80142ac:	b2dc      	uxtb	r4, r3
 80142ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7f9 fd95 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80142b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f9 fd90 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80142c2:	2c00      	cmp	r4, #0
 80142c4:	d042      	beq.n	801434c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	3398      	adds	r3, #152	; 0x98
 80142cc:	681c      	ldr	r4, [r3, #0]
 80142ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80142d2:	68b9      	ldr	r1, [r7, #8]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f9 f9cc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80142da:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f9 f9c6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80142e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7f9 f9c0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80142f2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80142f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80142fa:	9302      	str	r3, [sp, #8]
 80142fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014300:	9301      	str	r3, [sp, #4]
 8014302:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801430c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014310:	68f9      	ldr	r1, [r7, #12]
 8014312:	f7fb fc81 	bl	800fc18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014316:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801431a:	4619      	mov	r1, r3
 801431c:	68f8      	ldr	r0, [r7, #12]
 801431e:	47a0      	blx	r4
 8014320:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014324:	4618      	mov	r0, r3
 8014326:	f7fc fb51 	bl	80109cc <_ZN15ContainsFailureD1Ev>
 801432a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801432e:	4618      	mov	r0, r3
 8014330:	f7f9 fd57 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014334:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014338:	4618      	mov	r0, r3
 801433a:	f7f9 fd52 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801433e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014342:	4618      	mov	r0, r3
 8014344:	f7f9 fd4d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014348:	e000      	b.n	801434c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801434a:	bf00      	nop
}
 801434c:	37bc      	adds	r7, #188	; 0xbc
 801434e:	46bd      	mov	sp, r7
 8014350:	bd90      	pop	{r4, r7, pc}

08014352 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8014352:	b590      	push	{r4, r7, lr}
 8014354:	b0b3      	sub	sp, #204	; 0xcc
 8014356:	af04      	add	r7, sp, #16
 8014358:	60f8      	str	r0, [r7, #12]
 801435a:	60b9      	str	r1, [r7, #8]
 801435c:	607a      	str	r2, [r7, #4]
 801435e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014360:	68f8      	ldr	r0, [r7, #12]
 8014362:	f000 fd4f 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014366:	4603      	mov	r3, r0
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	3228      	adds	r2, #40	; 0x28
 801436c:	6812      	ldr	r2, [r2, #0]
 801436e:	4618      	mov	r0, r3
 8014370:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d103      	bne.n	8014380 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	f000 80ad 	beq.w	80144da <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d002      	beq.n	801438c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d140      	bne.n	801440e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	3398      	adds	r3, #152	; 0x98
 8014392:	681c      	ldr	r4, [r3, #0]
 8014394:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014398:	68b9      	ldr	r1, [r7, #8]
 801439a:	4618      	mov	r0, r3
 801439c:	f7f9 f969 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80143a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80143a4:	6879      	ldr	r1, [r7, #4]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7f9 f963 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80143ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80143b0:	6839      	ldr	r1, [r7, #0]
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7f9 f95d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80143b8:	f107 0010 	add.w	r0, r7, #16
 80143bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80143c0:	9302      	str	r3, [sp, #8]
 80143c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80143c6:	9301      	str	r3, [sp, #4]
 80143c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80143d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80143d6:	68f9      	ldr	r1, [r7, #12]
 80143d8:	f7fb fc1e 	bl	800fc18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80143dc:	f107 0310 	add.w	r3, r7, #16
 80143e0:	4619      	mov	r1, r3
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	47a0      	blx	r4
 80143e6:	f107 0310 	add.w	r3, r7, #16
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fc faee 	bl	80109cc <_ZN15ContainsFailureD1Ev>
 80143f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7f9 fcf4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80143fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80143fe:	4618      	mov	r0, r3
 8014400:	f7f9 fcef 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014408:	4618      	mov	r0, r3
 801440a:	f7f9 fcea 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801440e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014412:	6879      	ldr	r1, [r7, #4]
 8014414:	4618      	mov	r0, r3
 8014416:	f7f9 f92c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801441a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801441e:	68b9      	ldr	r1, [r7, #8]
 8014420:	4618      	mov	r0, r3
 8014422:	f7f9 f926 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014426:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801442a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801442e:	4611      	mov	r1, r2
 8014430:	4618      	mov	r0, r3
 8014432:	f7f9 f9b7 	bl	800d7a4 <_ZNK12SimpleString14containsNoCaseERKS_>
 8014436:	4603      	mov	r3, r0
 8014438:	f083 0301 	eor.w	r3, r3, #1
 801443c:	b2dc      	uxtb	r4, r3
 801443e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014442:	4618      	mov	r0, r3
 8014444:	f7f9 fccd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014448:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801444c:	4618      	mov	r0, r3
 801444e:	f7f9 fcc8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014452:	2c00      	cmp	r4, #0
 8014454:	d042      	beq.n	80144dc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	3398      	adds	r3, #152	; 0x98
 801445c:	681c      	ldr	r4, [r3, #0]
 801445e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014462:	68b9      	ldr	r1, [r7, #8]
 8014464:	4618      	mov	r0, r3
 8014466:	f7f9 f904 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801446a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801446e:	6879      	ldr	r1, [r7, #4]
 8014470:	4618      	mov	r0, r3
 8014472:	f7f9 f8fe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014476:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801447a:	6839      	ldr	r1, [r7, #0]
 801447c:	4618      	mov	r0, r3
 801447e:	f7f9 f8f8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014482:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014486:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014490:	9301      	str	r3, [sp, #4]
 8014492:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801449c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80144a0:	68f9      	ldr	r1, [r7, #12]
 80144a2:	f7fb fbb9 	bl	800fc18 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80144a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144aa:	4619      	mov	r1, r3
 80144ac:	68f8      	ldr	r0, [r7, #12]
 80144ae:	47a0      	blx	r4
 80144b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fc fa89 	bl	80109cc <_ZN15ContainsFailureD1Ev>
 80144ba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80144be:	4618      	mov	r0, r3
 80144c0:	f7f9 fc8f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80144c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7f9 fc8a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80144ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7f9 fc85 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80144d8:	e000      	b.n	80144dc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80144da:	bf00      	nop
}
 80144dc:	37bc      	adds	r7, #188	; 0xbc
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd90      	pop	{r4, r7, pc}

080144e2 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80144e2:	b590      	push	{r4, r7, lr}
 80144e4:	b099      	sub	sp, #100	; 0x64
 80144e6:	af04      	add	r7, sp, #16
 80144e8:	60f8      	str	r0, [r7, #12]
 80144ea:	60b9      	str	r1, [r7, #8]
 80144ec:	607a      	str	r2, [r7, #4]
 80144ee:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f000 fc87 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80144f6:	4603      	mov	r3, r0
 80144f8:	681a      	ldr	r2, [r3, #0]
 80144fa:	3228      	adds	r2, #40	; 0x28
 80144fc:	6812      	ldr	r2, [r2, #0]
 80144fe:	4618      	mov	r0, r3
 8014500:	4790      	blx	r2
    if (expected != actual)
 8014502:	68ba      	ldr	r2, [r7, #8]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	429a      	cmp	r2, r3
 8014508:	d027      	beq.n	801455a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	339c      	adds	r3, #156	; 0x9c
 8014510:	681c      	ldr	r4, [r3, #0]
 8014512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014516:	6839      	ldr	r1, [r7, #0]
 8014518:	4618      	mov	r0, r3
 801451a:	f7f9 f8aa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801451e:	f107 0014 	add.w	r0, r7, #20
 8014522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014526:	9302      	str	r3, [sp, #8]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	9301      	str	r3, [sp, #4]
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014534:	68f9      	ldr	r1, [r7, #12]
 8014536:	f7fb fc1f 	bl	800fd78 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801453a:	f107 0314 	add.w	r3, r7, #20
 801453e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014540:	4619      	mov	r1, r3
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	47a0      	blx	r4
 8014546:	f107 0314 	add.w	r3, r7, #20
 801454a:	4618      	mov	r0, r3
 801454c:	f7fc f9fa 	bl	8010944 <_ZN17LongsEqualFailureD1Ev>
 8014550:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014554:	4618      	mov	r0, r3
 8014556:	f7f9 fc44 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801455a:	bf00      	nop
 801455c:	3754      	adds	r7, #84	; 0x54
 801455e:	46bd      	mov	sp, r7
 8014560:	bd90      	pop	{r4, r7, pc}

08014562 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014562:	b590      	push	{r4, r7, lr}
 8014564:	b099      	sub	sp, #100	; 0x64
 8014566:	af04      	add	r7, sp, #16
 8014568:	60f8      	str	r0, [r7, #12]
 801456a:	60b9      	str	r1, [r7, #8]
 801456c:	607a      	str	r2, [r7, #4]
 801456e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	f000 fc47 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014576:	4603      	mov	r3, r0
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	3228      	adds	r2, #40	; 0x28
 801457c:	6812      	ldr	r2, [r2, #0]
 801457e:	4618      	mov	r0, r3
 8014580:	4790      	blx	r2
    if (expected != actual)
 8014582:	68ba      	ldr	r2, [r7, #8]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	429a      	cmp	r2, r3
 8014588:	d027      	beq.n	80145da <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	339c      	adds	r3, #156	; 0x9c
 8014590:	681c      	ldr	r4, [r3, #0]
 8014592:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014596:	6839      	ldr	r1, [r7, #0]
 8014598:	4618      	mov	r0, r3
 801459a:	f7f9 f86a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801459e:	f107 0014 	add.w	r0, r7, #20
 80145a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80145a6:	9302      	str	r3, [sp, #8]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	9301      	str	r3, [sp, #4]
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80145b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80145b4:	68f9      	ldr	r1, [r7, #12]
 80145b6:	f7fb fcab 	bl	800ff10 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80145ba:	f107 0314 	add.w	r3, r7, #20
 80145be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80145c0:	4619      	mov	r1, r3
 80145c2:	68f8      	ldr	r0, [r7, #12]
 80145c4:	47a0      	blx	r4
 80145c6:	f107 0314 	add.w	r3, r7, #20
 80145ca:	4618      	mov	r0, r3
 80145cc:	f7fc f998 	bl	8010900 <_ZN25UnsignedLongsEqualFailureD1Ev>
 80145d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f9 fc04 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80145da:	bf00      	nop
 80145dc:	3754      	adds	r7, #84	; 0x54
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd90      	pop	{r4, r7, pc}
	...

080145e4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80145e4:	b082      	sub	sp, #8
 80145e6:	b590      	push	{r4, r7, lr}
 80145e8:	b099      	sub	sp, #100	; 0x64
 80145ea:	af02      	add	r7, sp, #8
 80145ec:	60f8      	str	r0, [r7, #12]
 80145ee:	1d38      	adds	r0, r7, #4
 80145f0:	e880 0006 	stmia.w	r0, {r1, r2}
 80145f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f000 fc04 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80145fc:	4603      	mov	r3, r0
 80145fe:	681a      	ldr	r2, [r3, #0]
 8014600:	3228      	adds	r2, #40	; 0x28
 8014602:	6812      	ldr	r2, [r2, #0]
 8014604:	4618      	mov	r0, r3
 8014606:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	339c      	adds	r3, #156	; 0x9c
 801460e:	681c      	ldr	r4, [r3, #0]
 8014610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014614:	4919      	ldr	r1, [pc, #100]	; (801467c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014616:	4618      	mov	r0, r3
 8014618:	f7f9 f82b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801461c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014620:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014622:	4618      	mov	r0, r3
 8014624:	f7f9 f825 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014628:	f107 0014 	add.w	r0, r7, #20
 801462c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801463a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801463c:	68f9      	ldr	r1, [r7, #12]
 801463e:	f7fc f84d 	bl	80106dc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8014642:	f107 0314 	add.w	r3, r7, #20
 8014646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801464a:	4619      	mov	r1, r3
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	47a0      	blx	r4
 8014650:	f107 0314 	add.w	r3, r7, #20
 8014654:	4618      	mov	r0, r3
 8014656:	f7fc f887 	bl	8010768 <_ZN25FeatureUnsupportedFailureD1Ev>
 801465a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801465e:	4618      	mov	r0, r3
 8014660:	f7f9 fbbf 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014668:	4618      	mov	r0, r3
 801466a:	f7f9 fbba 	bl	800dde2 <_ZN12SimpleStringD1Ev>
#endif
}
 801466e:	bf00      	nop
 8014670:	375c      	adds	r7, #92	; 0x5c
 8014672:	46bd      	mov	sp, r7
 8014674:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014678:	b002      	add	sp, #8
 801467a:	4770      	bx	lr
 801467c:	08025ee4 	.word	0x08025ee4

08014680 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014680:	b082      	sub	sp, #8
 8014682:	b590      	push	{r4, r7, lr}
 8014684:	b099      	sub	sp, #100	; 0x64
 8014686:	af02      	add	r7, sp, #8
 8014688:	60f8      	str	r0, [r7, #12]
 801468a:	1d38      	adds	r0, r7, #4
 801468c:	e880 0006 	stmia.w	r0, {r1, r2}
 8014690:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f000 fbb6 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014698:	4603      	mov	r3, r0
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	3228      	adds	r2, #40	; 0x28
 801469e:	6812      	ldr	r2, [r2, #0]
 80146a0:	4618      	mov	r0, r3
 80146a2:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	339c      	adds	r3, #156	; 0x9c
 80146aa:	681c      	ldr	r4, [r3, #0]
 80146ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146b0:	4919      	ldr	r1, [pc, #100]	; (8014718 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7f8 ffdd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80146b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80146bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80146be:	4618      	mov	r0, r3
 80146c0:	f7f8 ffd7 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80146c4:	f107 0014 	add.w	r0, r7, #20
 80146c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80146cc:	9301      	str	r3, [sp, #4]
 80146ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146d2:	9300      	str	r3, [sp, #0]
 80146d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80146d8:	68f9      	ldr	r1, [r7, #12]
 80146da:	f7fb ffff 	bl	80106dc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80146de:	f107 0314 	add.w	r3, r7, #20
 80146e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80146e6:	4619      	mov	r1, r3
 80146e8:	68f8      	ldr	r0, [r7, #12]
 80146ea:	47a0      	blx	r4
 80146ec:	f107 0314 	add.w	r3, r7, #20
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7fc f839 	bl	8010768 <_ZN25FeatureUnsupportedFailureD1Ev>
 80146f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7f9 fb71 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014700:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014704:	4618      	mov	r0, r3
 8014706:	f7f9 fb6c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
#endif
}
 801470a:	bf00      	nop
 801470c:	375c      	adds	r7, #92	; 0x5c
 801470e:	46bd      	mov	sp, r7
 8014710:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014714:	b002      	add	sp, #8
 8014716:	4770      	bx	lr
 8014718:	08025ee4 	.word	0x08025ee4

0801471c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801471c:	b590      	push	{r4, r7, lr}
 801471e:	b099      	sub	sp, #100	; 0x64
 8014720:	af04      	add	r7, sp, #16
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	607b      	str	r3, [r7, #4]
 8014726:	460b      	mov	r3, r1
 8014728:	72fb      	strb	r3, [r7, #11]
 801472a:	4613      	mov	r3, r2
 801472c:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801472e:	68f8      	ldr	r0, [r7, #12]
 8014730:	f000 fb68 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014734:	4603      	mov	r3, r0
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	3228      	adds	r2, #40	; 0x28
 801473a:	6812      	ldr	r2, [r2, #0]
 801473c:	4618      	mov	r0, r3
 801473e:	4790      	blx	r2
    if (expected != actual)
 8014740:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014744:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8014748:	429a      	cmp	r2, r3
 801474a:	d029      	beq.n	80147a0 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	339c      	adds	r3, #156	; 0x9c
 8014752:	681c      	ldr	r4, [r3, #0]
 8014754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014758:	6879      	ldr	r1, [r7, #4]
 801475a:	4618      	mov	r0, r3
 801475c:	f7f8 ff89 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014760:	f107 0014 	add.w	r0, r7, #20
 8014764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014768:	9302      	str	r3, [sp, #8]
 801476a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801476e:	9301      	str	r3, [sp, #4]
 8014770:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014774:	9300      	str	r3, [sp, #0]
 8014776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801477a:	68f9      	ldr	r1, [r7, #12]
 801477c:	f7fb fc94 	bl	80100a8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8014780:	f107 0314 	add.w	r3, r7, #20
 8014784:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014786:	4619      	mov	r1, r3
 8014788:	68f8      	ldr	r0, [r7, #12]
 801478a:	47a0      	blx	r4
 801478c:	f107 0314 	add.w	r3, r7, #20
 8014790:	4618      	mov	r0, r3
 8014792:	f7fc f893 	bl	80108bc <_ZN23SignedBytesEqualFailureD1Ev>
 8014796:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801479a:	4618      	mov	r0, r3
 801479c:	f7f9 fb21 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80147a0:	bf00      	nop
 80147a2:	3754      	adds	r7, #84	; 0x54
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd90      	pop	{r4, r7, pc}

080147a8 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80147a8:	b590      	push	{r4, r7, lr}
 80147aa:	b09d      	sub	sp, #116	; 0x74
 80147ac:	af04      	add	r7, sp, #16
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
 80147b4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80147b6:	68f8      	ldr	r0, [r7, #12]
 80147b8:	f000 fb24 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80147bc:	4603      	mov	r3, r0
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	3228      	adds	r2, #40	; 0x28
 80147c2:	6812      	ldr	r2, [r2, #0]
 80147c4:	4618      	mov	r0, r3
 80147c6:	4790      	blx	r2
    if (expected != actual)
 80147c8:	68ba      	ldr	r2, [r7, #8]
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d03f      	beq.n	8014850 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	339c      	adds	r3, #156	; 0x9c
 80147d6:	681c      	ldr	r4, [r3, #0]
 80147d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80147dc:	68b9      	ldr	r1, [r7, #8]
 80147de:	4618      	mov	r0, r3
 80147e0:	f7f9 fdea 	bl	800e3b8 <_Z10StringFromPKv>
 80147e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7f9 fde4 	bl	800e3b8 <_Z10StringFromPKv>
 80147f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80147f4:	6839      	ldr	r1, [r7, #0]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7f8 ff3b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80147fc:	f107 0014 	add.w	r0, r7, #20
 8014800:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014804:	9302      	str	r3, [sp, #8]
 8014806:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801480a:	9301      	str	r3, [sp, #4]
 801480c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014814:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014816:	68f9      	ldr	r1, [r7, #12]
 8014818:	f7fb f814 	bl	800f844 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801481c:	f107 0314 	add.w	r3, r7, #20
 8014820:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014822:	4619      	mov	r1, r3
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	47a0      	blx	r4
 8014828:	f107 0314 	add.w	r3, r7, #20
 801482c:	4618      	mov	r0, r3
 801482e:	f7fc f955 	bl	8010adc <_ZN13EqualsFailureD1Ev>
 8014832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014836:	4618      	mov	r0, r3
 8014838:	f7f9 fad3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801483c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014840:	4618      	mov	r0, r3
 8014842:	f7f9 face 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014846:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801484a:	4618      	mov	r0, r3
 801484c:	f7f9 fac9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014850:	bf00      	nop
 8014852:	3764      	adds	r7, #100	; 0x64
 8014854:	46bd      	mov	sp, r7
 8014856:	bd90      	pop	{r4, r7, pc}

08014858 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014858:	b590      	push	{r4, r7, lr}
 801485a:	b09d      	sub	sp, #116	; 0x74
 801485c:	af04      	add	r7, sp, #16
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014866:	68f8      	ldr	r0, [r7, #12]
 8014868:	f000 facc 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 801486c:	4603      	mov	r3, r0
 801486e:	681a      	ldr	r2, [r3, #0]
 8014870:	3228      	adds	r2, #40	; 0x28
 8014872:	6812      	ldr	r2, [r2, #0]
 8014874:	4618      	mov	r0, r3
 8014876:	4790      	blx	r2
    if (expected != actual)
 8014878:	68ba      	ldr	r2, [r7, #8]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	429a      	cmp	r2, r3
 801487e:	d03f      	beq.n	8014900 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	339c      	adds	r3, #156	; 0x9c
 8014886:	681c      	ldr	r4, [r3, #0]
 8014888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801488c:	68b9      	ldr	r1, [r7, #8]
 801488e:	4618      	mov	r0, r3
 8014890:	f7f9 fdbc 	bl	800e40c <_Z10StringFromPFvvE>
 8014894:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014898:	6879      	ldr	r1, [r7, #4]
 801489a:	4618      	mov	r0, r3
 801489c:	f7f9 fdb6 	bl	800e40c <_Z10StringFromPFvvE>
 80148a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148a4:	6839      	ldr	r1, [r7, #0]
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7f8 fee3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80148ac:	f107 0014 	add.w	r0, r7, #20
 80148b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148b4:	9302      	str	r3, [sp, #8]
 80148b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80148ba:	9301      	str	r3, [sp, #4]
 80148bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148c0:	9300      	str	r3, [sp, #0]
 80148c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80148c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80148c6:	68f9      	ldr	r1, [r7, #12]
 80148c8:	f7fa ffbc 	bl	800f844 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80148cc:	f107 0314 	add.w	r3, r7, #20
 80148d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80148d2:	4619      	mov	r1, r3
 80148d4:	68f8      	ldr	r0, [r7, #12]
 80148d6:	47a0      	blx	r4
 80148d8:	f107 0314 	add.w	r3, r7, #20
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fc f8fd 	bl	8010adc <_ZN13EqualsFailureD1Ev>
 80148e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7f9 fa7b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80148ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f9 fa76 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80148f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7f9 fa71 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014900:	bf00      	nop
 8014902:	3764      	adds	r7, #100	; 0x64
 8014904:	46bd      	mov	sp, r7
 8014906:	bd90      	pop	{r4, r7, pc}

08014908 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014908:	b590      	push	{r4, r7, lr}
 801490a:	b09d      	sub	sp, #116	; 0x74
 801490c:	af02      	add	r7, sp, #8
 801490e:	6278      	str	r0, [r7, #36]	; 0x24
 8014910:	ed87 0b06 	vstr	d0, [r7, #24]
 8014914:	ed87 1b04 	vstr	d1, [r7, #16]
 8014918:	ed87 2b02 	vstr	d2, [r7, #8]
 801491c:	6239      	str	r1, [r7, #32]
 801491e:	607a      	str	r2, [r7, #4]
 8014920:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014924:	f000 fa6e 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014928:	4603      	mov	r3, r0
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	3228      	adds	r2, #40	; 0x28
 801492e:	6812      	ldr	r2, [r2, #0]
 8014930:	4618      	mov	r0, r3
 8014932:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8014934:	ed97 2b02 	vldr	d2, [r7, #8]
 8014938:	ed97 1b04 	vldr	d1, [r7, #16]
 801493c:	ed97 0b06 	vldr	d0, [r7, #24]
 8014940:	f7fe fd4a 	bl	80133d8 <_Z13doubles_equalddd>
 8014944:	4603      	mov	r3, r0
 8014946:	f083 0301 	eor.w	r3, r3, #1
 801494a:	b2db      	uxtb	r3, r3
 801494c:	2b00      	cmp	r3, #0
 801494e:	d029      	beq.n	80149a4 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	339c      	adds	r3, #156	; 0x9c
 8014956:	681c      	ldr	r4, [r3, #0]
 8014958:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801495c:	6a39      	ldr	r1, [r7, #32]
 801495e:	4618      	mov	r0, r3
 8014960:	f7f8 fe87 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014964:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8014968:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801496c:	9300      	str	r3, [sp, #0]
 801496e:	ed97 2b02 	vldr	d2, [r7, #8]
 8014972:	ed97 1b04 	vldr	d1, [r7, #16]
 8014976:	ed97 0b06 	vldr	d0, [r7, #24]
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014980:	f7fa ffa2 	bl	800f8c8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8014984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801498a:	4619      	mov	r1, r3
 801498c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801498e:	47a0      	blx	r4
 8014990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014994:	4618      	mov	r0, r3
 8014996:	f7fc f87f 	bl	8010a98 <_ZN19DoublesEqualFailureD1Ev>
 801499a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801499e:	4618      	mov	r0, r3
 80149a0:	f7f9 fa1f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80149a4:	bf00      	nop
 80149a6:	376c      	adds	r7, #108	; 0x6c
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd90      	pop	{r4, r7, pc}

080149ac <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80149ac:	b590      	push	{r4, r7, lr}
 80149ae:	b0a7      	sub	sp, #156	; 0x9c
 80149b0:	af04      	add	r7, sp, #16
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
 80149b8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80149ba:	68f8      	ldr	r0, [r7, #12]
 80149bc:	f000 fa22 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 80149c0:	4603      	mov	r3, r0
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	3228      	adds	r2, #40	; 0x28
 80149c6:	6812      	ldr	r2, [r2, #0]
 80149c8:	4618      	mov	r0, r3
 80149ca:	4790      	blx	r2
	if (length == 0) return;
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d075      	beq.n	8014abe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d102      	bne.n	80149de <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d071      	beq.n	8014ac2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d12d      	bne.n	8014a46 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	339c      	adds	r3, #156	; 0x9c
 80149f0:	681c      	ldr	r4, [r3, #0]
 80149f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80149f6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7f8 fe39 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014a00:	f107 0010 	add.w	r0, r7, #16
 8014a04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a08:	9303      	str	r3, [sp, #12]
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	9302      	str	r3, [sp, #8]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	9301      	str	r3, [sp, #4]
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a1a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014a1e:	68f9      	ldr	r1, [r7, #12]
 8014a20:	f7fb fd70 	bl	8010504 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8014a24:	f107 0310 	add.w	r3, r7, #16
 8014a28:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	47a0      	blx	r4
 8014a32:	f107 0310 	add.w	r3, r7, #16
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fb feda 	bl	80107f0 <_ZN18BinaryEqualFailureD1Ev>
 8014a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7f9 f9ce 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8014a46:	683a      	ldr	r2, [r7, #0]
 8014a48:	6879      	ldr	r1, [r7, #4]
 8014a4a:	68b8      	ldr	r0, [r7, #8]
 8014a4c:	f7f8 fd30 	bl	800d4b0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	bf14      	ite	ne
 8014a56:	2301      	movne	r3, #1
 8014a58:	2300      	moveq	r3, #0
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d031      	beq.n	8014ac4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	339c      	adds	r3, #156	; 0x9c
 8014a66:	681c      	ldr	r4, [r3, #0]
 8014a68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014a6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f8 fdfe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014a76:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014a7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014a7e:	9303      	str	r3, [sp, #12]
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	9302      	str	r3, [sp, #8]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	9301      	str	r3, [sp, #4]
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014a90:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014a94:	68f9      	ldr	r1, [r7, #12]
 8014a96:	f7fb fd35 	bl	8010504 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8014a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	68f8      	ldr	r0, [r7, #12]
 8014aa6:	47a0      	blx	r4
 8014aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7fb fe9f 	bl	80107f0 <_ZN18BinaryEqualFailureD1Ev>
 8014ab2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7f9 f993 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014abc:	e002      	b.n	8014ac4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8014abe:	bf00      	nop
 8014ac0:	e000      	b.n	8014ac4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014ac2:	bf00      	nop
}
 8014ac4:	378c      	adds	r7, #140	; 0x8c
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd90      	pop	{r4, r7, pc}

08014aca <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014aca:	b590      	push	{r4, r7, lr}
 8014acc:	b09b      	sub	sp, #108	; 0x6c
 8014ace:	af06      	add	r7, sp, #24
 8014ad0:	60f8      	str	r0, [r7, #12]
 8014ad2:	60b9      	str	r1, [r7, #8]
 8014ad4:	607a      	str	r2, [r7, #4]
 8014ad6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014ad8:	68f8      	ldr	r0, [r7, #12]
 8014ada:	f000 f993 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	3228      	adds	r2, #40	; 0x28
 8014ae4:	6812      	ldr	r2, [r2, #0]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	405a      	eors	r2, r3
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	4013      	ands	r3, r2
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d02b      	beq.n	8014b50 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	339c      	adds	r3, #156	; 0x9c
 8014afe:	681c      	ldr	r4, [r3, #0]
 8014b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b04:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7f8 fdb3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014b0c:	f107 0014 	add.w	r0, r7, #20
 8014b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b14:	9304      	str	r3, [sp, #16]
 8014b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014b18:	9303      	str	r3, [sp, #12]
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	9302      	str	r3, [sp, #8]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	9301      	str	r3, [sp, #4]
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	9300      	str	r3, [sp, #0]
 8014b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014b2a:	68f9      	ldr	r1, [r7, #12]
 8014b2c:	f7fb fd7a 	bl	8010624 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8014b30:	f107 0314 	add.w	r3, r7, #20
 8014b34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014b36:	4619      	mov	r1, r3
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	47a0      	blx	r4
 8014b3c:	f107 0314 	add.w	r3, r7, #20
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fb fe33 	bl	80107ac <_ZN16BitsEqualFailureD1Ev>
 8014b46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7f9 f949 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014b50:	bf00      	nop
 8014b52:	3754      	adds	r7, #84	; 0x54
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd90      	pop	{r4, r7, pc}

08014b58 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8014b58:	b590      	push	{r4, r7, lr}
 8014b5a:	b09d      	sub	sp, #116	; 0x74
 8014b5c:	af04      	add	r7, sp, #16
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	607a      	str	r2, [r7, #4]
 8014b62:	603b      	str	r3, [r7, #0]
 8014b64:	460b      	mov	r3, r1
 8014b66:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f000 f94b 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	3228      	adds	r2, #40	; 0x28
 8014b74:	6812      	ldr	r2, [r2, #0]
 8014b76:	4618      	mov	r0, r3
 8014b78:	4790      	blx	r2
    if (failed)
 8014b7a:	7afb      	ldrb	r3, [r7, #11]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d03f      	beq.n	8014c00 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	339c      	adds	r3, #156	; 0x9c
 8014b86:	681c      	ldr	r4, [r3, #0]
 8014b88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014b8c:	6879      	ldr	r1, [r7, #4]
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7f8 fd6f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014b98:	6839      	ldr	r1, [r7, #0]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7f8 fd69 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014ba0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014ba4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f8 fd63 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014bac:	f107 0014 	add.w	r0, r7, #20
 8014bb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014bb4:	9302      	str	r3, [sp, #8]
 8014bb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014bba:	9301      	str	r3, [sp, #4]
 8014bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014bc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014bc6:	68f9      	ldr	r1, [r7, #12]
 8014bc8:	f7fa ff30 	bl	800fa2c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014bcc:	f107 0314 	add.w	r3, r7, #20
 8014bd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	68f8      	ldr	r0, [r7, #12]
 8014bd6:	47a0      	blx	r4
 8014bd8:	f107 0314 	add.w	r3, r7, #20
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fb ff39 	bl	8010a54 <_ZN17CheckEqualFailureD1Ev>
 8014be2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f9 f8fb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014bec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7f9 f8f6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014bf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7f9 f8f1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014c00:	bf00      	nop
 8014c02:	3764      	adds	r7, #100	; 0x64
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd90      	pop	{r4, r7, pc}

08014c08 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8014c08:	b590      	push	{r4, r7, lr}
 8014c0a:	b09d      	sub	sp, #116	; 0x74
 8014c0c:	af04      	add	r7, sp, #16
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	607a      	str	r2, [r7, #4]
 8014c12:	603b      	str	r3, [r7, #0]
 8014c14:	460b      	mov	r3, r1
 8014c16:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014c18:	68f8      	ldr	r0, [r7, #12]
 8014c1a:	f000 f8f3 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	3228      	adds	r2, #40	; 0x28
 8014c24:	6812      	ldr	r2, [r2, #0]
 8014c26:	4618      	mov	r0, r3
 8014c28:	4790      	blx	r2
    if (!comparison)
 8014c2a:	7afb      	ldrb	r3, [r7, #11]
 8014c2c:	f083 0301 	eor.w	r3, r3, #1
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d03f      	beq.n	8014cb6 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	339c      	adds	r3, #156	; 0x9c
 8014c3c:	681c      	ldr	r4, [r3, #0]
 8014c3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014c42:	6879      	ldr	r1, [r7, #4]
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7f8 fd14 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014c4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014c4e:	6839      	ldr	r1, [r7, #0]
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7f8 fd0e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014c5a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7f8 fd08 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8014c62:	f107 0014 	add.w	r0, r7, #20
 8014c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014c6a:	9302      	str	r3, [sp, #8]
 8014c6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014c70:	9301      	str	r3, [sp, #4]
 8014c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014c7c:	68f9      	ldr	r1, [r7, #12]
 8014c7e:	f7fa ff83 	bl	800fb88 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014c82:	f107 0314 	add.w	r3, r7, #20
 8014c86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014c88:	4619      	mov	r1, r3
 8014c8a:	68f8      	ldr	r0, [r7, #12]
 8014c8c:	47a0      	blx	r4
 8014c8e:	f107 0314 	add.w	r3, r7, #20
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fb febc 	bl	8010a10 <_ZN17ComparisonFailureD1Ev>
 8014c98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7f9 f8a0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014ca2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7f9 f89b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8014cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f9 f896 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014cb6:	bf00      	nop
 8014cb8:	3764      	adds	r7, #100	; 0x64
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd90      	pop	{r4, r7, pc}
	...

08014cc0 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8014cc0:	b5b0      	push	{r4, r5, r7, lr}
 8014cc2:	b088      	sub	sp, #32
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8014cce:	f107 0310 	add.w	r3, r7, #16
 8014cd2:	4924      	ldr	r1, [pc, #144]	; (8014d64 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7f8 fccc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8014cda:	f107 0310 	add.w	r3, r7, #16
 8014cde:	6879      	ldr	r1, [r7, #4]
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f9 f90d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8014ce6:	f107 0310 	add.w	r3, r7, #16
 8014cea:	491f      	ldr	r1, [pc, #124]	; (8014d68 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7f9 f907 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8014cf2:	f107 0318 	add.w	r3, r7, #24
 8014cf6:	6839      	ldr	r1, [r7, #0]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f7f9 fda1 	bl	800e840 <_Z10StringFromj>
 8014cfe:	f107 0218 	add.w	r2, r7, #24
 8014d02:	f107 0310 	add.w	r3, r7, #16
 8014d06:	4611      	mov	r1, r2
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f9 f8e7 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8014d0e:	f107 0318 	add.w	r3, r7, #24
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f9 f865 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8014d18:	f107 0310 	add.w	r3, r7, #16
 8014d1c:	4913      	ldr	r1, [pc, #76]	; (8014d6c <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7f9 f8ee 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8014d24:	f107 0310 	add.w	r3, r7, #16
 8014d28:	68b9      	ldr	r1, [r7, #8]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7f9 f8e8 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f000 f867 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014d36:	4604      	mov	r4, r0
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	3338      	adds	r3, #56	; 0x38
 8014d3c:	681d      	ldr	r5, [r3, #0]
 8014d3e:	f107 0310 	add.w	r3, r7, #16
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7f9 f820 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8014d50:	f107 0310 	add.w	r3, r7, #16
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f9 f844 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8014d5a:	bf00      	nop
 8014d5c:	3720      	adds	r7, #32
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bdb0      	pop	{r4, r5, r7, pc}
 8014d62:	bf00      	nop
 8014d64:	08025efc 	.word	0x08025efc
 8014d68:	08025f00 	.word	0x08025f00
 8014d6c:	08025f04 	.word	0x08025f04

08014d70 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8014d70:	b590      	push	{r4, r7, lr}
 8014d72:	b085      	sub	sp, #20
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
 8014d7c:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3370      	adds	r3, #112	; 0x70
 8014d84:	681c      	ldr	r4, [r3, #0]
 8014d86:	68b8      	ldr	r0, [r7, #8]
 8014d88:	f7f8 fffe 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 8014d8c:	4601      	mov	r1, r0
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	68f8      	ldr	r0, [r7, #12]
 8014d94:	47a0      	blx	r4
}
 8014d96:	bf00      	nop
 8014d98:	3714      	adds	r7, #20
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd90      	pop	{r4, r7, pc}

08014d9e <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b082      	sub	sp, #8
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	6078      	str	r0, [r7, #4]
 8014da6:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f82b 	bl	8014e04 <_ZN10UtestShell13getTestResultEv>
 8014dae:	4603      	mov	r3, r0
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	323c      	adds	r2, #60	; 0x3c
 8014db4:	6812      	ldr	r2, [r2, #0]
 8014db6:	6839      	ldr	r1, [r7, #0]
 8014db8:	4618      	mov	r0, r3
 8014dba:	4790      	blx	r2
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8014dce:	4a04      	ldr	r2, [pc, #16]	; (8014de0 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	6013      	str	r3, [r2, #0]
}
 8014dd4:	bf00      	nop
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr
 8014de0:	20000b3c 	.word	0x20000b3c

08014de4 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b083      	sub	sp, #12
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8014dee:	4a04      	ldr	r2, [pc, #16]	; (8014e00 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8014df0:	683b      	ldr	r3, [r7, #0]
 8014df2:	6013      	str	r3, [r2, #0]
}
 8014df4:	bf00      	nop
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr
 8014e00:	20000b40 	.word	0x20000b40

08014e04 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8014e0c:	4b09      	ldr	r3, [pc, #36]	; (8014e34 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d109      	bne.n	8014e28 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8014e14:	f7fe fbb2 	bl	801357c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	32a4      	adds	r2, #164	; 0xa4
 8014e1e:	6812      	ldr	r2, [r2, #0]
 8014e20:	4618      	mov	r0, r3
 8014e22:	4790      	blx	r2
 8014e24:	4603      	mov	r3, r0
 8014e26:	e001      	b.n	8014e2c <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8014e28:	4b02      	ldr	r3, [pc, #8]	; (8014e34 <_ZN10UtestShell13getTestResultEv+0x30>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	20000b3c 	.word	0x20000b3c

08014e38 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8014e3c:	4b05      	ldr	r3, [pc, #20]	; (8014e54 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d103      	bne.n	8014e4c <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8014e44:	f7fe fb9a 	bl	801357c <_ZN22OutsideTestRunnerUTest8instanceEv>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	e001      	b.n	8014e50 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8014e4c:	4b01      	ldr	r3, [pc, #4]	; (8014e54 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	20000b40 	.word	0x20000b40

08014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8014e5c:	4b03      	ldr	r3, [pc, #12]	; (8014e6c <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr
 8014e6a:	bf00      	nop
 8014e6c:	20000094 	.word	0x20000094

08014e70 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8014e70:	b480      	push	{r7}
 8014e72:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8014e74:	4b03      	ldr	r3, [pc, #12]	; (8014e84 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8014e76:	4a04      	ldr	r2, [pc, #16]	; (8014e88 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8014e78:	601a      	str	r2, [r3, #0]
}
 8014e7a:	bf00      	nop
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e82:	4770      	bx	lr
 8014e84:	20000094 	.word	0x20000094
 8014e88:	20000090 	.word	0x20000090

08014e8c <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	4a04      	ldr	r2, [pc, #16]	; (8014ea8 <_ZN5UtestC1Ev+0x1c>)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	601a      	str	r2, [r3, #0]
{
}
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	370c      	adds	r7, #12
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea6:	4770      	bx	lr
 8014ea8:	08029990 	.word	0x08029990

08014eac <_ZN5UtestD1Ev>:

Utest::~Utest()
 8014eac:	b480      	push	{r7}
 8014eae:	b083      	sub	sp, #12
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	4a04      	ldr	r2, [pc, #16]	; (8014ec8 <_ZN5UtestD1Ev+0x1c>)
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	601a      	str	r2, [r3, #0]
{
}
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	370c      	adds	r7, #12
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec6:	4770      	bx	lr
 8014ec8:	08029990 	.word	0x08029990

08014ecc <_ZN5UtestD0Ev>:
Utest::~Utest()
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
}
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7ff ffe9 	bl	8014eac <_ZN5UtestD1Ev>
 8014eda:	2104      	movs	r1, #4
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7f6 f819 	bl	800af14 <_ZdlPvj>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}

08014eec <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8014ef4:	4b0d      	ldr	r3, [pc, #52]	; (8014f2c <_ZN5Utest3runEv+0x40>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	6879      	ldr	r1, [r7, #4]
 8014efa:	480d      	ldr	r0, [pc, #52]	; (8014f30 <_ZN5Utest3runEv+0x44>)
 8014efc:	4798      	blx	r3
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	bf14      	ite	ne
 8014f04:	2301      	movne	r3, #1
 8014f06:	2300      	moveq	r3, #0
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d004      	beq.n	8014f18 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8014f0e:	4b07      	ldr	r3, [pc, #28]	; (8014f2c <_ZN5Utest3runEv+0x40>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	6879      	ldr	r1, [r7, #4]
 8014f14:	4807      	ldr	r0, [pc, #28]	; (8014f34 <_ZN5Utest3runEv+0x48>)
 8014f16:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8014f18:	4b04      	ldr	r3, [pc, #16]	; (8014f2c <_ZN5Utest3runEv+0x40>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	6879      	ldr	r1, [r7, #4]
 8014f1e:	4806      	ldr	r0, [pc, #24]	; (8014f38 <_ZN5Utest3runEv+0x4c>)
 8014f20:	4798      	blx	r3
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	200000a4 	.word	0x200000a4
 8014f30:	080135d9 	.word	0x080135d9
 8014f34:	080135f5 	.word	0x080135f5
 8014f38:	08013611 	.word	0x08013611

08014f3c <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
}
 8014f44:	bf00      	nop
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr

08014f50 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
}
 8014f58:	bf00      	nop
 8014f5a:	370c      	adds	r7, #12
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8014f64:	b480      	push	{r7}
 8014f66:	b083      	sub	sp, #12
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
}
 8014f6c:	bf00      	nop
 8014f6e:	370c      	adds	r7, #12
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr

08014f78 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	4a04      	ldr	r2, [pc, #16]	; (8014f94 <_ZN14TestTerminatorD1Ev+0x1c>)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	601a      	str	r2, [r3, #0]
{
}
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	4618      	mov	r0, r3
 8014f8a:	370c      	adds	r7, #12
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f92:	4770      	bx	lr
 8014f94:	0802997c 	.word	0x0802997c

08014f98 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	f107 030c 	add.w	r3, r7, #12
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7f6 f975 	bl	800b298 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8014fae:	f107 030c 	add.w	r3, r7, #12
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f000 f82c 	bl	8015010 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8014fb8:	f107 030c 	add.w	r3, r7, #12
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f000 f835 	bl	801502c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8014fc2:	bf00      	nop
 8014fc4:	3710      	adds	r7, #16
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
	...

08014fcc <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	4a05      	ldr	r2, [pc, #20]	; (8014fec <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	601a      	str	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7ff ffcb 	bl	8014f78 <_ZN14TestTerminatorD1Ev>
{
}
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	08029968 	.word	0x08029968

08014ff0 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
}
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f7ff ffe7 	bl	8014fcc <_ZN20NormalTestTerminatorD1Ev>
 8014ffe:	2104      	movs	r1, #4
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7f5 ff87 	bl	800af14 <_ZdlPvj>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	4618      	mov	r0, r3
 801500a:	3708      	adds	r7, #8
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b082      	sub	sp, #8
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8015018:	4b03      	ldr	r3, [pc, #12]	; (8015028 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	200000a0 	.word	0x200000a0

0801502c <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	4a05      	ldr	r2, [pc, #20]	; (801504c <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	601a      	str	r2, [r3, #0]
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4618      	mov	r0, r3
 801503e:	f7ff ff9b 	bl	8014f78 <_ZN14TestTerminatorD1Ev>
{
}
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	08029954 	.word	0x08029954

08015050 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8015050:	b580      	push	{r7, lr}
 8015052:	b082      	sub	sp, #8
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
}
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7ff ffe7 	bl	801502c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 801505e:	2104      	movs	r1, #4
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7f5 ff57 	bl	800af14 <_ZdlPvj>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8015078:	f7fe fbaa 	bl	80137d0 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4618      	mov	r0, r3
 8015080:	f7ff ff8a 	bl	8014f98 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8015084:	bf00      	nop
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	4a05      	ldr	r2, [pc, #20]	; (80150ac <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	601a      	str	r2, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	f7ff ff95 	bl	8014fcc <_ZN20NormalTestTerminatorD1Ev>
{
}
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4618      	mov	r0, r3
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	08029940 	.word	0x08029940

080150b0 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
}
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7ff ffe7 	bl	801508c <_ZN22CrashingTestTerminatorD1Ev>
 80150be:	2104      	movs	r1, #4
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f7f5 ff27 	bl	800af14 <_ZdlPvj>
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	601a      	str	r2, [r3, #0]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2200      	movs	r2, #0
 80150e4:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d007      	beq.n	80150fc <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	3310      	adds	r3, #16
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	6838      	ldr	r0, [r7, #0]
 80150f6:	4798      	blx	r3
 80150f8:	4603      	mov	r3, r0
 80150fa:	e000      	b.n	80150fe <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 80150fc:	2300      	movs	r3, #0
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d02d      	beq.n	8015166 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8015112:	4293      	cmp	r3, r2
 8015114:	d201      	bcs.n	801511a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	e001      	b.n	801511e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 801511a:	f04f 33ff 	mov.w	r3, #4294967295
 801511e:	f240 3237 	movw	r2, #823	; 0x337
 8015122:	4914      	ldr	r1, [pc, #80]	; (8015174 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8015124:	4618      	mov	r0, r3
 8015126:	f7f5 ff05 	bl	800af34 <_ZnajPKci>
 801512a:	4602      	mov	r2, r0
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015134:	2300      	movs	r3, #0
 8015136:	60bb      	str	r3, [r7, #8]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	68ba      	ldr	r2, [r7, #8]
 801513e:	429a      	cmp	r2, r3
 8015140:	d212      	bcs.n	8015168 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681a      	ldr	r2, [r3, #0]
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	009b      	lsls	r3, r3, #2
 801514a:	4413      	add	r3, r2
 801514c:	68fa      	ldr	r2, [r7, #12]
 801514e:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	330c      	adds	r3, #12
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	68f8      	ldr	r0, [r7, #12]
 801515a:	4798      	blx	r3
 801515c:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	3301      	adds	r3, #1
 8015162:	60bb      	str	r3, [r7, #8]
 8015164:	e7e8      	b.n	8015138 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8015166:	bf00      	nop
    }
}
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	4618      	mov	r0, r3
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	08025d8c 	.word	0x08025d8c

08015178 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d004      	beq.n	8015192 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4618      	mov	r0, r3
 801518e:	f7f5 fee5 	bl	800af5c <_ZdaPv>
}
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	4618      	mov	r0, r3
 8015196:	3708      	adds	r7, #8
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}

0801519c <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 801519c:	b480      	push	{r7}
 801519e:	b087      	sub	sp, #28
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4413      	add	r3, r2
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	009b      	lsls	r3, r3, #2
 80151be:	4413      	add	r3, r2
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	009b      	lsls	r3, r3, #2
 80151cc:	4413      	add	r3, r2
 80151ce:	697a      	ldr	r2, [r7, #20]
 80151d0:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	4413      	add	r3, r2
 80151dc:	693a      	ldr	r2, [r7, #16]
 80151de:	601a      	str	r2, [r3, #0]
}
 80151e0:	bf00      	nop
 80151e2:	371c      	adds	r7, #28
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	685b      	ldr	r3, [r3, #4]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d028      	beq.n	8015250 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 80151fe:	4b17      	ldr	r3, [pc, #92]	; (801525c <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	6838      	ldr	r0, [r7, #0]
 8015204:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	3b01      	subs	r3, #1
 801520c:	60fb      	str	r3, [r7, #12]
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d019      	beq.n	8015248 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d01b      	beq.n	8015254 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 801521c:	4b10      	ldr	r3, [pc, #64]	; (8015260 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4798      	blx	r3
 8015222:	4603      	mov	r3, r0
 8015224:	461a      	mov	r2, r3
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	3301      	adds	r3, #1
 801522a:	fbb2 f1f3 	udiv	r1, r2, r3
 801522e:	fb03 f301 	mul.w	r3, r3, r1
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	68f9      	ldr	r1, [r7, #12]
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f7ff ffae 	bl	801519c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	3b01      	subs	r3, #1
 8015244:	60fb      	str	r3, [r7, #12]
 8015246:	e7e2      	b.n	801520e <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f000 f834 	bl	80152b6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801524e:	e002      	b.n	8015256 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8015250:	bf00      	nop
 8015252:	e000      	b.n	8015256 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8015254:	bf00      	nop
}
 8015256:	3710      	adds	r7, #16
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	200000e0 	.word	0x200000e0
 8015260:	200000e4 	.word	0x200000e4

08015264 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b086      	sub	sp, #24
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d01c      	beq.n	80152ae <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	085b      	lsrs	r3, r3, #1
 801527a:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 801527c:	2300      	movs	r3, #0
 801527e:	617b      	str	r3, [r7, #20]
 8015280:	697a      	ldr	r2, [r7, #20]
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	429a      	cmp	r2, r3
 8015286:	d20e      	bcs.n	80152a6 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	685a      	ldr	r2, [r3, #4]
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	1ad3      	subs	r3, r2, r3
 8015290:	3b01      	subs	r3, #1
 8015292:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8015294:	68fa      	ldr	r2, [r7, #12]
 8015296:	6979      	ldr	r1, [r7, #20]
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7ff ff7f 	bl	801519c <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	3301      	adds	r3, #1
 80152a2:	617b      	str	r3, [r7, #20]
 80152a4:	e7ec      	b.n	8015280 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 f805 	bl	80152b6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80152ac:	e000      	b.n	80152b0 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80152ae:	bf00      	nop
}
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b084      	sub	sp, #16
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80152be:	2300      	movs	r3, #0
 80152c0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 80152c2:	2300      	movs	r3, #0
 80152c4:	60bb      	str	r3, [r7, #8]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d221      	bcs.n	8015314 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6859      	ldr	r1, [r3, #4]
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	1acb      	subs	r3, r1, r3
 80152dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80152e0:	3b01      	subs	r3, #1
 80152e2:	009b      	lsls	r3, r3, #2
 80152e4:	4413      	add	r3, r2
 80152e6:	6818      	ldr	r0, [r3, #0]
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6859      	ldr	r1, [r3, #4]
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	1acb      	subs	r3, r1, r3
 80152f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80152f8:	3b01      	subs	r3, #1
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	4413      	add	r3, r2
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	3308      	adds	r3, #8
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	68f9      	ldr	r1, [r7, #12]
 8015308:	4798      	blx	r3
 801530a:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	3301      	adds	r3, #1
 8015310:	60bb      	str	r3, [r7, #8]
 8015312:	e7d8      	b.n	80152c6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8015314:	bf00      	nop
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
    return get(0);
 8015324:	2100      	movs	r1, #0
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 f805 	bl	8015336 <_ZNK22UtestShellPointerArray3getEj>
 801532c:	4603      	mov	r3, r0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3708      	adds	r7, #8
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}

08015336 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	683a      	ldr	r2, [r7, #0]
 8015346:	429a      	cmp	r2, r3
 8015348:	d301      	bcc.n	801534e <_ZNK22UtestShellPointerArray3getEj+0x18>
 801534a:	2300      	movs	r3, #0
 801534c:	e005      	b.n	801535a <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	4413      	add	r3, r2
 8015358:	681b      	ldr	r3, [r3, #0]
}
 801535a:	4618      	mov	r0, r3
 801535c:	370c      	adds	r7, #12
 801535e:	46bd      	mov	sp, r7
 8015360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015364:	4770      	bx	lr
	...

08015368 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	60b9      	str	r1, [r7, #8]
 8015372:	607a      	str	r2, [r7, #4]
 8015374:	603b      	str	r3, [r7, #0]
 8015376:	4a10      	ldr	r2, [pc, #64]	; (80153b8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 801537c:	6879      	ldr	r1, [r7, #4]
 801537e:	68b8      	ldr	r0, [r7, #8]
 8015380:	f7fe fc27 	bl	8013bd2 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8015384:	6839      	ldr	r1, [r7, #0]
 8015386:	68b8      	ldr	r0, [r7, #8]
 8015388:	f7fe fc31 	bl	8013bee <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 801538c:	69b9      	ldr	r1, [r7, #24]
 801538e:	68b8      	ldr	r0, [r7, #8]
 8015390:	f7fe fc03 	bl	8013b9a <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8015394:	69f9      	ldr	r1, [r7, #28]
 8015396:	68b8      	ldr	r0, [r7, #8]
 8015398:	f7fe fc0d 	bl	8013bb6 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 801539c:	f7fd fc20 	bl	8012be0 <_ZN12TestRegistry18getCurrentRegistryEv>
 80153a0:	4603      	mov	r3, r0
 80153a2:	681a      	ldr	r2, [r3, #0]
 80153a4:	3208      	adds	r2, #8
 80153a6:	6812      	ldr	r2, [r2, #0]
 80153a8:	68b9      	ldr	r1, [r7, #8]
 80153aa:	4618      	mov	r0, r3
 80153ac:	4790      	blx	r2
}
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	4618      	mov	r0, r3
 80153b2:	3710      	adds	r7, #16
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}
 80153b8:	08029884 	.word	0x08029884

080153bc <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	4a04      	ldr	r2, [pc, #16]	; (80153d8 <_ZN13TestInstallerD1Ev+0x1c>)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	601a      	str	r2, [r3, #0]
{
}
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr
 80153d8:	08029884 	.word	0x08029884

080153dc <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
}
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7ff ffe9 	bl	80153bc <_ZN13TestInstallerD1Ev>
 80153ea:	2104      	movs	r1, #4
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7f5 fd91 	bl	800af14 <_ZdlPvj>
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4618      	mov	r0, r3
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b082      	sub	sp, #8
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d10a      	bne.n	8015422 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015412:	4293      	cmp	r3, r2
 8015414:	d105      	bne.n	8015422 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015416:	4805      	ldr	r0, [pc, #20]	; (801542c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8015418:	f7ff fe38 	bl	801508c <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 801541c:	4804      	ldr	r0, [pc, #16]	; (8015430 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801541e:	f7ff fdd5 	bl	8014fcc <_ZN20NormalTestTerminatorD1Ev>
}
 8015422:	bf00      	nop
 8015424:	3708      	adds	r7, #8
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	20000090 	.word	0x20000090
 8015430:	2000008c 	.word	0x2000008c

08015434 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8015434:	b580      	push	{r7, lr}
 8015436:	af00      	add	r7, sp, #0
 8015438:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801543c:	2001      	movs	r0, #1
 801543e:	f7ff ffdd 	bl	80153fc <_Z41__static_initialization_and_destruction_0ii>
 8015442:	bd80      	pop	{r7, pc}

08015444 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8015444:	b580      	push	{r7, lr}
 8015446:	af00      	add	r7, sp, #0
 8015448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801544c:	2000      	movs	r0, #0
 801544e:	f7ff ffd5 	bl	80153fc <_Z41__static_initialization_and_destruction_0ii>
 8015452:	bd80      	pop	{r7, pc}

08015454 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8015454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	ed87 0b00 	vstr	d0, [r7]
 801545e:	683c      	ldr	r4, [r7, #0]
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015466:	2301      	movs	r3, #1
 8015468:	461e      	mov	r6, r3
 801546a:	f04f 32ff 	mov.w	r2, #4294967295
 801546e:	4b10      	ldr	r3, [pc, #64]	; (80154b0 <_ZSt5isinfd+0x5c>)
 8015470:	4620      	mov	r0, r4
 8015472:	4629      	mov	r1, r5
 8015474:	f7eb f988 	bl	8000788 <__aeabi_dcmpun>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d10b      	bne.n	8015496 <_ZSt5isinfd+0x42>
 801547e:	f04f 32ff 	mov.w	r2, #4294967295
 8015482:	4b0b      	ldr	r3, [pc, #44]	; (80154b0 <_ZSt5isinfd+0x5c>)
 8015484:	4620      	mov	r0, r4
 8015486:	4629      	mov	r1, r5
 8015488:	f7eb f960 	bl	800074c <__aeabi_dcmple>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d101      	bne.n	8015496 <_ZSt5isinfd+0x42>
 8015492:	2300      	movs	r3, #0
 8015494:	461e      	mov	r6, r3
 8015496:	b2f3      	uxtb	r3, r6
 8015498:	f083 0301 	eor.w	r3, r3, #1
 801549c:	b2db      	uxtb	r3, r3
 801549e:	2b00      	cmp	r3, #0
 80154a0:	bf14      	ite	ne
 80154a2:	2301      	movne	r3, #1
 80154a4:	2300      	moveq	r3, #0
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	4618      	mov	r0, r3
 80154aa:	370c      	adds	r7, #12
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154b0:	7fefffff 	.word	0x7fefffff

080154b4 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80154b4:	b590      	push	{r4, r7, lr}
 80154b6:	b083      	sub	sp, #12
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	ed87 0b00 	vstr	d0, [r7]
 80154be:	2301      	movs	r3, #1
 80154c0:	461c      	mov	r4, r3
 80154c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80154ca:	f7eb f95d 	bl	8000788 <__aeabi_dcmpun>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d101      	bne.n	80154d8 <_ZSt5isnand+0x24>
 80154d4:	2300      	movs	r3, #0
 80154d6:	461c      	mov	r4, r3
 80154d8:	b2e3      	uxtb	r3, r4
 80154da:	2b00      	cmp	r3, #0
 80154dc:	bf14      	ite	ne
 80154de:	2301      	movne	r3, #1
 80154e0:	2300      	moveq	r3, #0
 80154e2:	b2db      	uxtb	r3, r3
 80154e4:	4618      	mov	r0, r3
 80154e6:	370c      	adds	r7, #12
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd90      	pop	{r4, r7, pc}

080154ec <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 80154ec:	b590      	push	{r4, r7, lr}
 80154ee:	b095      	sub	sp, #84	; 0x54
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	3334      	adds	r3, #52	; 0x34
 80154fe:	681c      	ldr	r4, [r3, #0]
 8015500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015504:	490f      	ldr	r1, [pc, #60]	; (8015544 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8015506:	4618      	mov	r0, r3
 8015508:	f7f8 f8b3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801550c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015510:	f107 0314 	add.w	r3, r7, #20
 8015514:	68f9      	ldr	r1, [r7, #12]
 8015516:	4618      	mov	r0, r3
 8015518:	f7f9 ff0a 	bl	800f330 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801551c:	f107 0314 	add.w	r3, r7, #20
 8015520:	4619      	mov	r1, r3
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	47a0      	blx	r4
 8015526:	f107 0314 	add.w	r3, r7, #20
 801552a:	4618      	mov	r0, r3
 801552c:	f7f9 ffc0 	bl	800f4b0 <_ZN11TestFailureD1Ev>
 8015530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015534:	4618      	mov	r0, r3
 8015536:	f7f8 fc54 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801553a:	bf00      	nop
 801553c:	3754      	adds	r7, #84	; 0x54
 801553e:	46bd      	mov	sp, r7
 8015540:	bd90      	pop	{r4, r7, pc}
 8015542:	bf00      	nop
 8015544:	08025f14 	.word	0x08025f14

08015548 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8015548:	b480      	push	{r7}
 801554a:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 801554c:	2301      	movs	r3, #1
}
 801554e:	4618      	mov	r0, r3
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr

08015558 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8015562:	4b13      	ldr	r3, [pc, #76]	; (80155b0 <PlatformSpecificSetJmpImplementation+0x58>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	225c      	movs	r2, #92	; 0x5c
 8015568:	fb02 f303 	mul.w	r3, r2, r3
 801556c:	4a11      	ldr	r2, [pc, #68]	; (80155b4 <PlatformSpecificSetJmpImplementation+0x5c>)
 801556e:	4413      	add	r3, r2
 8015570:	4618      	mov	r0, r3
 8015572:	f7ea fe55 	bl	8000220 <setjmp>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	bf0c      	ite	eq
 801557c:	2301      	moveq	r3, #1
 801557e:	2300      	movne	r3, #0
 8015580:	b2db      	uxtb	r3, r3
 8015582:	2b00      	cmp	r3, #0
 8015584:	d00e      	beq.n	80155a4 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8015586:	4b0a      	ldr	r3, [pc, #40]	; (80155b0 <PlatformSpecificSetJmpImplementation+0x58>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	3301      	adds	r3, #1
 801558c:	4a08      	ldr	r2, [pc, #32]	; (80155b0 <PlatformSpecificSetJmpImplementation+0x58>)
 801558e:	6013      	str	r3, [r2, #0]
        function(data);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6838      	ldr	r0, [r7, #0]
 8015594:	4798      	blx	r3
        jmp_buf_index--;
 8015596:	4b06      	ldr	r3, [pc, #24]	; (80155b0 <PlatformSpecificSetJmpImplementation+0x58>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	3b01      	subs	r3, #1
 801559c:	4a04      	ldr	r2, [pc, #16]	; (80155b0 <PlatformSpecificSetJmpImplementation+0x58>)
 801559e:	6013      	str	r3, [r2, #0]
        return 1;
 80155a0:	2301      	movs	r3, #1
 80155a2:	e000      	b.n	80155a6 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80155a4:	2300      	movs	r3, #0
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3708      	adds	r7, #8
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd80      	pop	{r7, pc}
 80155ae:	bf00      	nop
 80155b0:	20000edc 	.word	0x20000edc
 80155b4:	20000b44 	.word	0x20000b44

080155b8 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80155bc:	4b07      	ldr	r3, [pc, #28]	; (80155dc <PlatformSpecificLongJmpImplementation+0x24>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3b01      	subs	r3, #1
 80155c2:	4a06      	ldr	r2, [pc, #24]	; (80155dc <PlatformSpecificLongJmpImplementation+0x24>)
 80155c4:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80155c6:	4b05      	ldr	r3, [pc, #20]	; (80155dc <PlatformSpecificLongJmpImplementation+0x24>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	225c      	movs	r2, #92	; 0x5c
 80155cc:	fb02 f303 	mul.w	r3, r2, r3
 80155d0:	4a03      	ldr	r2, [pc, #12]	; (80155e0 <PlatformSpecificLongJmpImplementation+0x28>)
 80155d2:	4413      	add	r3, r2
 80155d4:	2101      	movs	r1, #1
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7ea fe28 	bl	800022c <longjmp>
 80155dc:	20000edc 	.word	0x20000edc
 80155e0:	20000b44 	.word	0x20000b44

080155e4 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 80155e4:	b480      	push	{r7}
 80155e6:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 80155e8:	2300      	movs	r3, #0
#endif
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 80155fa:	2000      	movs	r0, #0
 80155fc:	f00e ec4c 	blx	8023e98 <__time_veneer>
 8015600:	4602      	mov	r2, r0
 8015602:	460b      	mov	r3, r1
 8015604:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8015608:	463b      	mov	r3, r7
 801560a:	4618      	mov	r0, r3
 801560c:	f00b fb78 	bl	8020d00 <localtime>
 8015610:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	4a04      	ldr	r2, [pc, #16]	; (8015628 <TimeStringImplementation+0x34>)
 8015616:	2150      	movs	r1, #80	; 0x50
 8015618:	4804      	ldr	r0, [pc, #16]	; (801562c <TimeStringImplementation+0x38>)
 801561a:	f00c fc81 	bl	8021f20 <strftime>
    return dateTime;
 801561e:	4b03      	ldr	r3, [pc, #12]	; (801562c <TimeStringImplementation+0x38>)
}
 8015620:	4618      	mov	r0, r3
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}
 8015628:	08025f50 	.word	0x08025f50
 801562c:	20000ee0 	.word	0x20000ee0

08015630 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801563a:	6839      	ldr	r1, [r7, #0]
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f00b f995 	bl	802096c <fopen>
 8015642:	4603      	mov	r3, r0
#endif
}
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8015656:	6839      	ldr	r1, [r7, #0]
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f00b f9f5 	bl	8020a48 <fputs>
}
 801565e:	bf00      	nop
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f00a ff76 	bl	8020560 <fclose>
}
 8015674:	bf00      	nop
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 801567c:	b580      	push	{r7, lr}
 801567e:	af00      	add	r7, sp, #0
  fflush(stdout);
 8015680:	4b03      	ldr	r3, [pc, #12]	; (8015690 <PlatformSpecificFlushImplementation+0x14>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	4618      	mov	r0, r3
 8015688:	f00b f834 	bl	80206f4 <fflush>
}
 801568c:	bf00      	nop
 801568e:	bd80      	pop	{r7, pc}
 8015690:	20000108 	.word	0x20000108

08015694 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b082      	sub	sp, #8
 8015698:	af00      	add	r7, sp, #0
 801569a:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 801569e:	ed97 0b00 	vldr	d0, [r7]
 80156a2:	f7ff ff07 	bl	80154b4 <_ZSt5isnand>
 80156a6:	4603      	mov	r3, r0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80156ba:	ed97 0b00 	vldr	d0, [r7]
 80156be:	f7ff fec9 	bl	8015454 <_ZSt5isinfd>
 80156c2:	4603      	mov	r3, r0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80156cc:	b480      	push	{r7}
 80156ce:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80156d0:	2300      	movs	r3, #0
#endif

}
 80156d2:	4618      	mov	r0, r3
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr

080156dc <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80156dc:	b480      	push	{r7}
 80156de:	b083      	sub	sp, #12
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
}
 80156e4:	bf00      	nop
 80156e6:	370c      	adds	r7, #12
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 80156f0:	b480      	push	{r7}
 80156f2:	b083      	sub	sp, #12
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
}
 80156f8:	bf00      	nop
 80156fa:	370c      	adds	r7, #12
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
}
 801570c:	bf00      	nop
 801570e:	370c      	adds	r7, #12
 8015710:	46bd      	mov	sp, r7
 8015712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015716:	4770      	bx	lr

08015718 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8015724:	4a25      	ldr	r2, [pc, #148]	; (80157bc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	601a      	str	r2, [r3, #0]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	68ba      	ldr	r2, [r7, #8]
 801572e:	605a      	str	r2, [r3, #4]
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	609a      	str	r2, [r3, #8]
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2200      	movs	r2, #0
 801573a:	731a      	strb	r2, [r3, #12]
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	2200      	movs	r2, #0
 8015740:	735a      	strb	r2, [r3, #13]
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	2200      	movs	r2, #0
 8015746:	739a      	strb	r2, [r3, #14]
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2200      	movs	r2, #0
 801574c:	73da      	strb	r2, [r3, #15]
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2200      	movs	r2, #0
 8015752:	741a      	strb	r2, [r3, #16]
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2200      	movs	r2, #0
 8015758:	745a      	strb	r2, [r3, #17]
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2200      	movs	r2, #0
 801575e:	749a      	strb	r2, [r3, #18]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	74da      	strb	r2, [r3, #19]
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	751a      	strb	r2, [r3, #20]
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	2200      	movs	r2, #0
 8015770:	755a      	strb	r2, [r3, #21]
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2200      	movs	r2, #0
 8015776:	759a      	strb	r2, [r3, #22]
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	2200      	movs	r2, #0
 801577c:	75da      	strb	r2, [r3, #23]
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	2200      	movs	r2, #0
 8015782:	761a      	strb	r2, [r3, #24]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2201      	movs	r2, #1
 8015788:	61da      	str	r2, [r3, #28]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2200      	movs	r2, #0
 801578e:	621a      	str	r2, [r3, #32]
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2200      	movs	r2, #0
 8015794:	625a      	str	r2, [r3, #36]	; 0x24
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2200      	movs	r2, #0
 801579a:	629a      	str	r2, [r3, #40]	; 0x28
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2200      	movs	r2, #0
 80157a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	3330      	adds	r3, #48	; 0x30
 80157a8:	4905      	ldr	r1, [pc, #20]	; (80157c0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7f7 ff61 	bl	800d672 <_ZN12SimpleStringC1EPKc>
{
}
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	4618      	mov	r0, r3
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	080299b0 	.word	0x080299b0
 80157c0:	08025f64 	.word	0x08025f64

080157c4 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7f8 fb07 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	4618      	mov	r0, r3
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
	...

080157e0 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80157e0:	b590      	push	{r4, r7, lr}
 80157e2:	b085      	sub	sp, #20
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	4a20      	ldr	r2, [pc, #128]	; (801586c <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d015      	beq.n	8015822 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157fa:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	4618      	mov	r0, r3
 8015802:	f00a fda2 	bl	802034a <_ZNK10TestFilter7getNextEv>
 8015806:	4602      	mov	r2, r0
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 801580c:	68fc      	ldr	r4, [r7, #12]
 801580e:	2c00      	cmp	r4, #0
 8015810:	d0ed      	beq.n	80157ee <_ZN20CommandLineArgumentsD1Ev+0xe>
 8015812:	4620      	mov	r0, r4
 8015814:	f7ff ffd6 	bl	80157c4 <_ZN10TestFilterD1Ev>
 8015818:	2110      	movs	r1, #16
 801581a:	4620      	mov	r0, r4
 801581c:	f7f5 fb7a 	bl	800af14 <_ZdlPvj>
    while(groupFilters_) {
 8015820:	e7e5      	b.n	80157ee <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015826:	2b00      	cmp	r3, #0
 8015828:	d015      	beq.n	8015856 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801582e:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015834:	4618      	mov	r0, r3
 8015836:	f00a fd88 	bl	802034a <_ZNK10TestFilter7getNextEv>
 801583a:	4602      	mov	r2, r0
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8015840:	68bc      	ldr	r4, [r7, #8]
 8015842:	2c00      	cmp	r4, #0
 8015844:	d0ed      	beq.n	8015822 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8015846:	4620      	mov	r0, r4
 8015848:	f7ff ffbc 	bl	80157c4 <_ZN10TestFilterD1Ev>
 801584c:	2110      	movs	r1, #16
 801584e:	4620      	mov	r0, r4
 8015850:	f7f5 fb60 	bl	800af14 <_ZdlPvj>
    while(nameFilters_) {
 8015854:	e7e5      	b.n	8015822 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	3330      	adds	r3, #48	; 0x30
 801585a:	4618      	mov	r0, r3
 801585c:	f7f8 fac1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
}
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4618      	mov	r0, r3
 8015864:	3714      	adds	r7, #20
 8015866:	46bd      	mov	sp, r7
 8015868:	bd90      	pop	{r4, r7, pc}
 801586a:	bf00      	nop
 801586c:	080299b0 	.word	0x080299b0

08015870 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
}
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f7ff ffb1 	bl	80157e0 <_ZN20CommandLineArgumentsD1Ev>
 801587e:	2138      	movs	r1, #56	; 0x38
 8015880:	6878      	ldr	r0, [r7, #4]
 8015882:	f7f5 fb47 	bl	800af14 <_ZdlPvj>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 8015890:	b5b0      	push	{r4, r5, r7, lr}
 8015892:	b0be      	sub	sp, #248	; 0xf8
 8015894:	af02      	add	r7, sp, #8
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
 801589a:	2400      	movs	r4, #0
    bool correctParameters = true;
 801589c:	2301      	movs	r3, #1
 801589e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80158a2:	2301      	movs	r3, #1
 80158a4:	613b      	str	r3, [r7, #16]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	685a      	ldr	r2, [r3, #4]
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	f340 83a4 	ble.w	8015ffa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	689a      	ldr	r2, [r3, #8]
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	4413      	add	r3, r2
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	f107 0308 	add.w	r3, r7, #8
 80158c2:	4611      	mov	r1, r2
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7f7 fed4 	bl	800d672 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80158ca:	f107 0314 	add.w	r3, r7, #20
 80158ce:	49c8      	ldr	r1, [pc, #800]	; (8015bf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f7 fece 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80158d6:	f107 0214 	add.w	r2, r7, #20
 80158da:	f107 0308 	add.w	r3, r7, #8
 80158de:	4611      	mov	r1, r2
 80158e0:	4618      	mov	r0, r3
 80158e2:	f7f8 fa8a 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 80158e6:	4603      	mov	r3, r0
 80158e8:	461d      	mov	r5, r3
 80158ea:	f107 0314 	add.w	r3, r7, #20
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f8 fa77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80158f4:	2d00      	cmp	r5, #0
 80158f6:	d006      	beq.n	8015906 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2201      	movs	r2, #1
 80158fc:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 80158fe:	2300      	movs	r3, #0
 8015900:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015904:	e366      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8015906:	f107 031c 	add.w	r3, r7, #28
 801590a:	49ba      	ldr	r1, [pc, #744]	; (8015bf4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 801590c:	4618      	mov	r0, r3
 801590e:	f7f7 feb0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015912:	f107 021c 	add.w	r2, r7, #28
 8015916:	f107 0308 	add.w	r3, r7, #8
 801591a:	4611      	mov	r1, r2
 801591c:	4618      	mov	r0, r3
 801591e:	f7f8 fa6c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015922:	4603      	mov	r3, r0
 8015924:	461d      	mov	r5, r3
 8015926:	f107 031c 	add.w	r3, r7, #28
 801592a:	4618      	mov	r0, r3
 801592c:	f7f8 fa59 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015930:	2d00      	cmp	r5, #0
 8015932:	d003      	beq.n	801593c <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	2201      	movs	r2, #1
 8015938:	735a      	strb	r2, [r3, #13]
 801593a:	e34b      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 801593c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015940:	49ad      	ldr	r1, [pc, #692]	; (8015bf8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8015942:	4618      	mov	r0, r3
 8015944:	f7f7 fe95 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015948:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801594c:	f107 0308 	add.w	r3, r7, #8
 8015950:	4611      	mov	r1, r2
 8015952:	4618      	mov	r0, r3
 8015954:	f7f8 fa51 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015958:	4603      	mov	r3, r0
 801595a:	461d      	mov	r5, r3
 801595c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015960:	4618      	mov	r0, r3
 8015962:	f7f8 fa3e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015966:	2d00      	cmp	r5, #0
 8015968:	d003      	beq.n	8015972 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2201      	movs	r2, #1
 801596e:	739a      	strb	r2, [r3, #14]
 8015970:	e330      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8015972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015976:	49a1      	ldr	r1, [pc, #644]	; (8015bfc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8015978:	4618      	mov	r0, r3
 801597a:	f7f7 fe7a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801597e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015982:	f107 0308 	add.w	r3, r7, #8
 8015986:	4611      	mov	r1, r2
 8015988:	4618      	mov	r0, r3
 801598a:	f7f8 fa36 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801598e:	4603      	mov	r3, r0
 8015990:	461d      	mov	r5, r3
 8015992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015996:	4618      	mov	r0, r3
 8015998:	f7f8 fa23 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801599c:	2d00      	cmp	r5, #0
 801599e:	d003      	beq.n	80159a8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2201      	movs	r2, #1
 80159a4:	73da      	strb	r2, [r3, #15]
 80159a6:	e315      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80159a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159ac:	4994      	ldr	r1, [pc, #592]	; (8015c00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f7 fe5f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80159b4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80159b8:	f107 0308 	add.w	r3, r7, #8
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f8 fa1b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 80159c4:	4603      	mov	r3, r0
 80159c6:	461d      	mov	r5, r3
 80159c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7f8 fa08 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80159d2:	2d00      	cmp	r5, #0
 80159d4:	d003      	beq.n	80159de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2201      	movs	r2, #1
 80159da:	741a      	strb	r2, [r3, #16]
 80159dc:	e2fa      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80159de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80159e2:	4988      	ldr	r1, [pc, #544]	; (8015c04 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7f7 fe44 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80159ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80159ee:	f107 0308 	add.w	r3, r7, #8
 80159f2:	4611      	mov	r1, r2
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7f8 fa00 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 80159fa:	4603      	mov	r3, r0
 80159fc:	461d      	mov	r5, r3
 80159fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f8 f9ed 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015a08:	2d00      	cmp	r5, #0
 8015a0a:	d003      	beq.n	8015a14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2201      	movs	r2, #1
 8015a10:	755a      	strb	r2, [r3, #21]
 8015a12:	e2df      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8015a14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a18:	497b      	ldr	r1, [pc, #492]	; (8015c08 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7f7 fe29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015a20:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8015a24:	f107 0308 	add.w	r3, r7, #8
 8015a28:	4611      	mov	r1, r2
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f8 f9e5 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015a30:	4603      	mov	r3, r0
 8015a32:	461d      	mov	r5, r3
 8015a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f8 f9d2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015a3e:	2d00      	cmp	r5, #0
 8015a40:	d003      	beq.n	8015a4a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2201      	movs	r2, #1
 8015a46:	745a      	strb	r2, [r3, #17]
 8015a48:	e2c4      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8015a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015a4e:	496f      	ldr	r1, [pc, #444]	; (8015c0c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f7 fe0e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015a56:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8015a5a:	f107 0308 	add.w	r3, r7, #8
 8015a5e:	4611      	mov	r1, r2
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f8 f9ca 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015a66:	4603      	mov	r3, r0
 8015a68:	461d      	mov	r5, r3
 8015a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7f8 f9b7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015a74:	2d00      	cmp	r5, #0
 8015a76:	d003      	beq.n	8015a80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	749a      	strb	r2, [r3, #18]
 8015a7e:	e2a9      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8015a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a84:	4962      	ldr	r1, [pc, #392]	; (8015c10 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f7 fdf3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015a8c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015a90:	f107 0308 	add.w	r3, r7, #8
 8015a94:	4611      	mov	r1, r2
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f8 f9af 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	461d      	mov	r5, r3
 8015aa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f8 f99c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015aaa:	2d00      	cmp	r5, #0
 8015aac:	d003      	beq.n	8015ab6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	74da      	strb	r2, [r3, #19]
 8015ab4:	e28e      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8015ab6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015aba:	4956      	ldr	r1, [pc, #344]	; (8015c14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7f7 fdd8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015ac2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8015ac6:	f107 0308 	add.w	r3, r7, #8
 8015aca:	4611      	mov	r1, r2
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f8 f994 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	461d      	mov	r5, r3
 8015ad6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7f8 f981 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015ae0:	2d00      	cmp	r5, #0
 8015ae2:	d003      	beq.n	8015aec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	751a      	strb	r2, [r3, #20]
 8015aea:	e273      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8015aec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015af0:	4949      	ldr	r1, [pc, #292]	; (8015c18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7f7 fdbd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015af8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015afc:	f107 0308 	add.w	r3, r7, #8
 8015b00:	4611      	mov	r1, r2
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7f8 f979 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	461d      	mov	r5, r3
 8015b0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f8 f966 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015b16:	2d00      	cmp	r5, #0
 8015b18:	d003      	beq.n	8015b22 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	759a      	strb	r2, [r3, #22]
 8015b20:	e258      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8015b22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b26:	493d      	ldr	r1, [pc, #244]	; (8015c1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f7 fda2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015b2e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8015b32:	f107 0308 	add.w	r3, r7, #8
 8015b36:	4611      	mov	r1, r2
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7f7 fe5e 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	461d      	mov	r5, r3
 8015b42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7f8 f94b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015b4c:	2d00      	cmp	r5, #0
 8015b4e:	d009      	beq.n	8015b64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6859      	ldr	r1, [r3, #4]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	689a      	ldr	r2, [r3, #8]
 8015b58:	f107 0310 	add.w	r3, r7, #16
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fb33 	bl	80161c8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8015b62:	e237      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8015b64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015b68:	492d      	ldr	r1, [pc, #180]	; (8015c20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7f7 fd81 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015b70:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8015b74:	f107 0308 	add.w	r3, r7, #8
 8015b78:	4611      	mov	r1, r2
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7f7 fe3d 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015b80:	4603      	mov	r3, r0
 8015b82:	461d      	mov	r5, r3
 8015b84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7f8 f92a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015b8e:	2d00      	cmp	r5, #0
 8015b90:	d009      	beq.n	8015ba6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6859      	ldr	r1, [r3, #4]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	689a      	ldr	r2, [r3, #8]
 8015b9a:	f107 0310 	add.w	r3, r7, #16
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 fc40 	bl	8016424 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8015ba4:	e216      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8015ba6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015baa:	491e      	ldr	r1, [pc, #120]	; (8015c24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7f7 fd60 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015bb2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8015bb6:	f107 0308 	add.w	r3, r7, #8
 8015bba:	4611      	mov	r1, r2
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7f7 fe1c 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	461d      	mov	r5, r3
 8015bc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7f8 f909 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015bd0:	2d00      	cmp	r5, #0
 8015bd2:	d029      	beq.n	8015c28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6859      	ldr	r1, [r3, #4]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	689a      	ldr	r2, [r3, #8]
 8015bdc:	f107 0310 	add.w	r3, r7, #16
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 fc61 	bl	80164a8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8015be6:	4603      	mov	r3, r0
 8015be8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015bec:	e1f2      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8015bee:	bf00      	nop
 8015bf0:	08025f68 	.word	0x08025f68
 8015bf4:	08025f6c 	.word	0x08025f6c
 8015bf8:	08025f70 	.word	0x08025f70
 8015bfc:	08025f74 	.word	0x08025f74
 8015c00:	08025f78 	.word	0x08025f78
 8015c04:	08025f7c 	.word	0x08025f7c
 8015c08:	08025f80 	.word	0x08025f80
 8015c0c:	08025f84 	.word	0x08025f84
 8015c10:	08025f88 	.word	0x08025f88
 8015c14:	08025f8c 	.word	0x08025f8c
 8015c18:	08025f90 	.word	0x08025f90
 8015c1c:	08025f94 	.word	0x08025f94
 8015c20:	08025f98 	.word	0x08025f98
 8015c24:	08025f9c 	.word	0x08025f9c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8015c28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015c2c:	49b9      	ldr	r1, [pc, #740]	; (8015f14 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7f7 fd1f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015c34:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8015c38:	f107 0308 	add.w	r3, r7, #8
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7f7 fddb 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015c44:	4603      	mov	r3, r0
 8015c46:	461d      	mov	r5, r3
 8015c48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7f8 f8c8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015c52:	2d00      	cmp	r5, #0
 8015c54:	d009      	beq.n	8015c6a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6859      	ldr	r1, [r3, #4]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	689a      	ldr	r2, [r3, #8]
 8015c5e:	f107 0310 	add.w	r3, r7, #16
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fccc 	bl	8016600 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8015c68:	e1b4      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8015c6a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015c6e:	49aa      	ldr	r1, [pc, #680]	; (8015f18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7f7 fcfe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015c76:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8015c7a:	f107 0308 	add.w	r3, r7, #8
 8015c7e:	4611      	mov	r1, r2
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7f7 fdba 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015c86:	4603      	mov	r3, r0
 8015c88:	461d      	mov	r5, r3
 8015c8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7f8 f8a7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015c94:	2d00      	cmp	r5, #0
 8015c96:	d009      	beq.n	8015cac <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6859      	ldr	r1, [r3, #4]
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	689a      	ldr	r2, [r3, #8]
 8015ca0:	f107 0310 	add.w	r3, r7, #16
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f000 fcf1 	bl	801668c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8015caa:	e193      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8015cac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015cb0:	499a      	ldr	r1, [pc, #616]	; (8015f1c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7f7 fcdd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015cb8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8015cbc:	f107 0308 	add.w	r3, r7, #8
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7f7 fd99 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	461d      	mov	r5, r3
 8015ccc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	f7f8 f886 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015cd6:	2d00      	cmp	r5, #0
 8015cd8:	d009      	beq.n	8015cee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6859      	ldr	r1, [r3, #4]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	689a      	ldr	r2, [r3, #8]
 8015ce2:	f107 0310 	add.w	r3, r7, #16
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f000 fd16 	bl	8016718 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8015cec:	e172      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8015cee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015cf2:	498b      	ldr	r1, [pc, #556]	; (8015f20 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f7 fcbc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015cfa:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8015cfe:	f107 0308 	add.w	r3, r7, #8
 8015d02:	4611      	mov	r1, r2
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7f7 fd78 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	461d      	mov	r5, r3
 8015d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f8 f865 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	d009      	beq.n	8015d30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6859      	ldr	r1, [r3, #4]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	689a      	ldr	r2, [r3, #8]
 8015d24:	f107 0310 	add.w	r3, r7, #16
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 fd3d 	bl	80167a8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8015d2e:	e151      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8015d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015d34:	497b      	ldr	r1, [pc, #492]	; (8015f24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f7 fc9b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015d3c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8015d40:	f107 0308 	add.w	r3, r7, #8
 8015d44:	4611      	mov	r1, r2
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f7 fd57 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	461d      	mov	r5, r3
 8015d50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7f8 f844 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015d5a:	2d00      	cmp	r5, #0
 8015d5c:	d009      	beq.n	8015d72 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6859      	ldr	r1, [r3, #4]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	689a      	ldr	r2, [r3, #8]
 8015d66:	f107 0310 	add.w	r3, r7, #16
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f000 fd5e 	bl	801682c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8015d70:	e130      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8015d72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015d76:	496c      	ldr	r1, [pc, #432]	; (8015f28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7f7 fc7a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015d7e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8015d82:	f107 0308 	add.w	r3, r7, #8
 8015d86:	4611      	mov	r1, r2
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7f7 fd36 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	461d      	mov	r5, r3
 8015d92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f8 f823 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015d9c:	2d00      	cmp	r5, #0
 8015d9e:	d009      	beq.n	8015db4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6859      	ldr	r1, [r3, #4]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	689a      	ldr	r2, [r3, #8]
 8015da8:	f107 0310 	add.w	r3, r7, #16
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f000 fd83 	bl	80168b8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8015db2:	e10f      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8015db4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015db8:	495c      	ldr	r1, [pc, #368]	; (8015f2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7f7 fc59 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015dc0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015dc4:	f107 0308 	add.w	r3, r7, #8
 8015dc8:	4611      	mov	r1, r2
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7f7 fd15 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	461d      	mov	r5, r3
 8015dd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7f8 f802 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015dde:	2d00      	cmp	r5, #0
 8015de0:	d009      	beq.n	8015df6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6859      	ldr	r1, [r3, #4]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	689a      	ldr	r2, [r3, #8]
 8015dea:	f107 0310 	add.w	r3, r7, #16
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f000 fda8 	bl	8016944 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8015df4:	e0ee      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8015df6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015dfa:	494d      	ldr	r1, [pc, #308]	; (8015f30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f7f7 fc38 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015e02:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8015e06:	f107 0308 	add.w	r3, r7, #8
 8015e0a:	4611      	mov	r1, r2
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f7 fcf4 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015e12:	4603      	mov	r3, r0
 8015e14:	461d      	mov	r5, r3
 8015e16:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f7 ffe1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015e20:	2d00      	cmp	r5, #0
 8015e22:	d00c      	beq.n	8015e3e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	6859      	ldr	r1, [r3, #4]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	689a      	ldr	r2, [r3, #8]
 8015e2c:	f107 0310 	add.w	r3, r7, #16
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 fa29 	bl	8016288 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8015e36:	4603      	mov	r3, r0
 8015e38:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015e3c:	e0ca      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8015e3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015e42:	493c      	ldr	r1, [pc, #240]	; (8015f34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f7 fc14 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015e4a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8015e4e:	f107 0308 	add.w	r3, r7, #8
 8015e52:	4611      	mov	r1, r2
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7f7 fcd0 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	461d      	mov	r5, r3
 8015e5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7f7 ffbd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015e68:	2d00      	cmp	r5, #0
 8015e6a:	d00b      	beq.n	8015e84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6859      	ldr	r1, [r3, #4]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	689a      	ldr	r2, [r3, #8]
 8015e74:	f107 0310 	add.w	r3, r7, #16
 8015e78:	482e      	ldr	r0, [pc, #184]	; (8015f34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8015e7a:	9000      	str	r0, [sp, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 fda9 	bl	80169d4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015e82:	e0a7      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8015e84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015e88:	492b      	ldr	r1, [pc, #172]	; (8015f38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f7 fbf1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015e90:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015e94:	f107 0308 	add.w	r3, r7, #8
 8015e98:	4611      	mov	r1, r2
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	f7f7 fcad 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	461d      	mov	r5, r3
 8015ea4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f7 ff9a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015eae:	2d00      	cmp	r5, #0
 8015eb0:	d00b      	beq.n	8015eca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6859      	ldr	r1, [r3, #4]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	689a      	ldr	r2, [r3, #8]
 8015eba:	f107 0310 	add.w	r3, r7, #16
 8015ebe:	481e      	ldr	r0, [pc, #120]	; (8015f38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8015ec0:	9000      	str	r0, [sp, #0]
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 fd86 	bl	80169d4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8015ec8:	e084      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8015eca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015ece:	491b      	ldr	r1, [pc, #108]	; (8015f3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f7 fbce 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015ed6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8015eda:	f107 0308 	add.w	r3, r7, #8
 8015ede:	4611      	mov	r1, r2
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7f7 fc8a 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	461d      	mov	r5, r3
 8015eea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7f7 ff77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015ef4:	2d00      	cmp	r5, #0
 8015ef6:	d023      	beq.n	8015f40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	6859      	ldr	r1, [r3, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	689a      	ldr	r2, [r3, #8]
 8015f00:	f107 0310 	add.w	r3, r7, #16
 8015f04:	6878      	ldr	r0, [r7, #4]
 8015f06:	f000 fe3b 	bl	8016b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015f10:	e060      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8015f12:	bf00      	nop
 8015f14:	08025fa0 	.word	0x08025fa0
 8015f18:	08025fa4 	.word	0x08025fa4
 8015f1c:	08025fa8 	.word	0x08025fa8
 8015f20:	08025fb0 	.word	0x08025fb0
 8015f24:	08025fb4 	.word	0x08025fb4
 8015f28:	08025fb8 	.word	0x08025fb8
 8015f2c:	08025fbc 	.word	0x08025fbc
 8015f30:	08025fc4 	.word	0x08025fc4
 8015f34:	08025fc8 	.word	0x08025fc8
 8015f38:	08025fd0 	.word	0x08025fd0
 8015f3c:	08025fe0 	.word	0x08025fe0
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8015f40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015f44:	4930      	ldr	r1, [pc, #192]	; (8016008 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7f7 fb93 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015f4c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8015f50:	f107 0308 	add.w	r3, r7, #8
 8015f54:	4611      	mov	r1, r2
 8015f56:	4618      	mov	r0, r3
 8015f58:	f7f7 fc4f 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	461d      	mov	r5, r3
 8015f60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7f7 ff3c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015f6a:	2d00      	cmp	r5, #0
 8015f6c:	d00e      	beq.n	8015f8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	331c      	adds	r3, #28
 8015f74:	681d      	ldr	r5, [r3, #0]
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6859      	ldr	r1, [r3, #4]
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	689a      	ldr	r2, [r3, #8]
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	6838      	ldr	r0, [r7, #0]
 8015f82:	47a8      	blx	r5
 8015f84:	4603      	mov	r3, r0
 8015f86:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8015f8a:	e023      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8015f8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015f90:	491e      	ldr	r1, [pc, #120]	; (801600c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7f7 fb6d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8015f98:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8015f9c:	f107 0308 	add.w	r3, r7, #8
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7f7 fc29 	bl	800d7fa <_ZNK12SimpleString10startsWithERKS_>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	461d      	mov	r5, r3
 8015fac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f7 ff16 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015fb6:	2d00      	cmp	r5, #0
 8015fb8:	d009      	beq.n	8015fce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	6859      	ldr	r1, [r3, #4]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	689a      	ldr	r2, [r3, #8]
 8015fc2:	f107 0310 	add.w	r3, r7, #16
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 fd98 	bl	8016afc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8015fcc:	e002      	b.n	8015fd4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8015fd4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d102      	bne.n	8015fe2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8015fdc:	2400      	movs	r4, #0
 8015fde:	2500      	movs	r5, #0
 8015fe0:	e000      	b.n	8015fe4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8015fe2:	2501      	movs	r5, #1
 8015fe4:	f107 0308 	add.w	r3, r7, #8
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f7 fefa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8015fee:	2d01      	cmp	r5, #1
 8015ff0:	d104      	bne.n	8015ffc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	613b      	str	r3, [r7, #16]
 8015ff8:	e455      	b.n	80158a6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8015ffa:	2401      	movs	r4, #1
 8015ffc:	4623      	mov	r3, r4
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	37f0      	adds	r7, #240	; 0xf0
 8016002:	46bd      	mov	sp, r7
 8016004:	bdb0      	pop	{r4, r5, r7, pc}
 8016006:	bf00      	nop
 8016008:	08025f78 	.word	0x08025f78
 801600c:	08025fe4 	.word	0x08025fe4

08016010 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8016010:	b480      	push	{r7}
 8016012:	b083      	sub	sp, #12
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8016018:	4b03      	ldr	r3, [pc, #12]	; (8016028 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801601a:	4618      	mov	r0, r3
 801601c:	370c      	adds	r7, #12
 801601e:	46bd      	mov	sp, r7
 8016020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016024:	4770      	bx	lr
 8016026:	bf00      	nop
 8016028:	08025fe8 	.word	0x08025fe8

0801602c <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 801602c:	b480      	push	{r7}
 801602e:	b083      	sub	sp, #12
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8016034:	4b03      	ldr	r3, [pc, #12]	; (8016044 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8016036:	4618      	mov	r0, r3
 8016038:	370c      	adds	r7, #12
 801603a:	46bd      	mov	sp, r7
 801603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016040:	4770      	bx	lr
 8016042:	bf00      	nop
 8016044:	08026118 	.word	0x08026118

08016048 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8016048:	b480      	push	{r7}
 801604a:	b083      	sub	sp, #12
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	7b1b      	ldrb	r3, [r3, #12]
}
 8016054:	4618      	mov	r0, r3
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8016060:	b480      	push	{r7}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
    return verbose_;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	7b5b      	ldrb	r3, [r3, #13]
}
 801606c:	4618      	mov	r0, r3
 801606e:	370c      	adds	r7, #12
 8016070:	46bd      	mov	sp, r7
 8016072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016076:	4770      	bx	lr

08016078 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8016078:	b480      	push	{r7}
 801607a:	b083      	sub	sp, #12
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	7b9b      	ldrb	r3, [r3, #14]
}
 8016084:	4618      	mov	r0, r3
 8016086:	370c      	adds	r7, #12
 8016088:	46bd      	mov	sp, r7
 801608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608e:	4770      	bx	lr

08016090 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8016090:	b480      	push	{r7}
 8016092:	b083      	sub	sp, #12
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
    return color_;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	7bdb      	ldrb	r3, [r3, #15]
}
 801609c:	4618      	mov	r0, r3
 801609e:	370c      	adds	r7, #12
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80160a8:	b480      	push	{r7}
 80160aa:	b083      	sub	sp, #12
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	7c5b      	ldrb	r3, [r3, #17]
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	370c      	adds	r7, #12
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr

080160c0 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80160c0:	b480      	push	{r7}
 80160c2:	b083      	sub	sp, #12
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	7c9b      	ldrb	r3, [r3, #18]
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	370c      	adds	r7, #12
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr

080160d8 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	7cdb      	ldrb	r3, [r3, #19]
}
 80160e4:	4618      	mov	r0, r3
 80160e6:	370c      	adds	r7, #12
 80160e8:	46bd      	mov	sp, r7
 80160ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ee:	4770      	bx	lr

080160f0 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 80160f0:	b480      	push	{r7}
 80160f2:	b083      	sub	sp, #12
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	7d1b      	ldrb	r3, [r3, #20]
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	7c1b      	ldrb	r3, [r3, #16]
}
 8016114:	4618      	mov	r0, r3
 8016116:	370c      	adds	r7, #12
 8016118:	46bd      	mov	sp, r7
 801611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611e:	4770      	bx	lr

08016120 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8016120:	b480      	push	{r7}
 8016122:	b083      	sub	sp, #12
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
    return repeat_;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	69db      	ldr	r3, [r3, #28]
}
 801612c:	4618      	mov	r0, r3
 801612e:	370c      	adds	r7, #12
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr

08016138 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8016138:	b480      	push	{r7}
 801613a:	b083      	sub	sp, #12
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
    return reversing_;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	7d5b      	ldrb	r3, [r3, #21]
}
 8016144:	4618      	mov	r0, r3
 8016146:	370c      	adds	r7, #12
 8016148:	46bd      	mov	sp, r7
 801614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614e:	4770      	bx	lr

08016150 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8016150:	b480      	push	{r7}
 8016152:	b083      	sub	sp, #12
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	7d9b      	ldrb	r3, [r3, #22]
}
 801615c:	4618      	mov	r0, r3
 801615e:	370c      	adds	r7, #12
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8016168:	b480      	push	{r7}
 801616a:	b083      	sub	sp, #12
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	7ddb      	ldrb	r3, [r3, #23]
}
 8016174:	4618      	mov	r0, r3
 8016176:	370c      	adds	r7, #12
 8016178:	46bd      	mov	sp, r7
 801617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617e:	4770      	bx	lr

08016180 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8016180:	b480      	push	{r7}
 8016182:	b083      	sub	sp, #12
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6a1b      	ldr	r3, [r3, #32]
}
 801618c:	4618      	mov	r0, r3
 801618e:	370c      	adds	r7, #12
 8016190:	46bd      	mov	sp, r7
 8016192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016196:	4770      	bx	lr

08016198 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8016198:	b480      	push	{r7}
 801619a:	b083      	sub	sp, #12
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	370c      	adds	r7, #12
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80161b0:	b480      	push	{r7}
 80161b2:	b083      	sub	sp, #12
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80161bc:	4618      	mov	r0, r3
 80161be:	370c      	adds	r7, #12
 80161c0:	46bd      	mov	sp, r7
 80161c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c6:	4770      	bx	lr

080161c8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b086      	sub	sp, #24
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	607a      	str	r2, [r7, #4]
 80161d4:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	2200      	movs	r2, #0
 80161da:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	009b      	lsls	r3, r3, #2
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	4413      	add	r3, r2
 80161e6:	681a      	ldr	r2, [r3, #0]
 80161e8:	f107 0310 	add.w	r3, r7, #16
 80161ec:	4611      	mov	r1, r2
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7f7 fa3f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 80161f4:	f107 0310 	add.w	r3, r7, #16
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7f7 fdd1 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b02      	cmp	r3, #2
 8016202:	bf8c      	ite	hi
 8016204:	2301      	movhi	r3, #1
 8016206:	2300      	movls	r3, #0
 8016208:	b2db      	uxtb	r3, r3
 801620a:	2b00      	cmp	r3, #0
 801620c:	d00e      	beq.n	801622c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	4413      	add	r3, r2
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	3302      	adds	r3, #2
 801621c:	4618      	mov	r0, r3
 801621e:	f7f7 f824 	bl	800d26a <_ZN12SimpleString4AtoIEPKc>
 8016222:	4603      	mov	r3, r0
 8016224:	461a      	mov	r2, r3
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	61da      	str	r2, [r3, #28]
 801622a:	e01c      	b.n	8016266 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	3301      	adds	r3, #1
 8016232:	68ba      	ldr	r2, [r7, #8]
 8016234:	429a      	cmp	r2, r3
 8016236:	dd16      	ble.n	8016266 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	3301      	adds	r3, #1
 801623e:	009b      	lsls	r3, r3, #2
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	4413      	add	r3, r2
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	4618      	mov	r0, r3
 8016248:	f7f7 f80f 	bl	800d26a <_ZN12SimpleString4AtoIEPKc>
 801624c:	4603      	mov	r3, r0
 801624e:	461a      	mov	r2, r3
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	69db      	ldr	r3, [r3, #28]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d004      	beq.n	8016266 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	1c5a      	adds	r2, r3, #1
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	69db      	ldr	r3, [r3, #28]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d102      	bne.n	8016274 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2202      	movs	r2, #2
 8016272:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8016274:	f107 0310 	add.w	r3, r7, #16
 8016278:	4618      	mov	r0, r3
 801627a:	f7f7 fdb2 	bl	800dde2 <_ZN12SimpleStringD1Ev>

}
 801627e:	bf00      	nop
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
	...

08016288 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8016288:	b590      	push	{r4, r7, lr}
 801628a:	b089      	sub	sp, #36	; 0x24
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
 8016294:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2201      	movs	r2, #1
 801629a:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 801629c:	4b34      	ldr	r3, [pc, #208]	; (8016370 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	4798      	blx	r3
 80162a2:	4603      	mov	r3, r0
 80162a4:	461a      	mov	r2, r3
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	6a1b      	ldr	r3, [r3, #32]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d104      	bne.n	80162bc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	6a1b      	ldr	r3, [r3, #32]
 80162b6:	1c5a      	adds	r2, r3, #1
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	009b      	lsls	r3, r3, #2
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	4413      	add	r3, r2
 80162c6:	681a      	ldr	r2, [r3, #0]
 80162c8:	f107 0314 	add.w	r3, r7, #20
 80162cc:	4611      	mov	r1, r2
 80162ce:	4618      	mov	r0, r3
 80162d0:	f7f7 f9cf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 80162d4:	f107 0314 	add.w	r3, r7, #20
 80162d8:	4618      	mov	r0, r3
 80162da:	f7f7 fd61 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 80162de:	4603      	mov	r3, r0
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	bf8c      	ite	hi
 80162e4:	2301      	movhi	r3, #1
 80162e6:	2300      	movls	r3, #0
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d010      	beq.n	8016310 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2201      	movs	r2, #1
 80162f2:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	009b      	lsls	r3, r3, #2
 80162fa:	687a      	ldr	r2, [r7, #4]
 80162fc:	4413      	add	r3, r2
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	3302      	adds	r3, #2
 8016302:	4618      	mov	r0, r3
 8016304:	f7f6 ff78 	bl	800d1f8 <_ZN12SimpleString4AtoUEPKc>
 8016308:	4602      	mov	r2, r0
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	621a      	str	r2, [r3, #32]
 801630e:	e01e      	b.n	801634e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	3301      	adds	r3, #1
 8016316:	68ba      	ldr	r2, [r7, #8]
 8016318:	429a      	cmp	r2, r3
 801631a:	dd18      	ble.n	801634e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 801631c:	683b      	ldr	r3, [r7, #0]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	3301      	adds	r3, #1
 8016322:	009b      	lsls	r3, r3, #2
 8016324:	687a      	ldr	r2, [r7, #4]
 8016326:	4413      	add	r3, r2
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	4618      	mov	r0, r3
 801632c:	f7f6 ff64 	bl	800d1f8 <_ZN12SimpleString4AtoUEPKc>
 8016330:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00a      	beq.n	801634e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	2201      	movs	r2, #1
 801633c:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	69fa      	ldr	r2, [r7, #28]
 8016342:	621a      	str	r2, [r3, #32]
            i++;
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	1c5a      	adds	r2, r3, #1
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	6a1b      	ldr	r3, [r3, #32]
 8016352:	2b00      	cmp	r3, #0
 8016354:	bf14      	ite	ne
 8016356:	2301      	movne	r3, #1
 8016358:	2300      	moveq	r3, #0
 801635a:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 801635c:	f107 0314 	add.w	r3, r7, #20
 8016360:	4618      	mov	r0, r3
 8016362:	f7f7 fd3e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8016366:	4623      	mov	r3, r4
}
 8016368:	4618      	mov	r0, r3
 801636a:	3724      	adds	r7, #36	; 0x24
 801636c:	46bd      	mov	sp, r7
 801636e:	bd90      	pop	{r4, r7, pc}
 8016370:	200000a8 	.word	0x200000a8

08016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b088      	sub	sp, #32
 8016378:	af00      	add	r7, sp, #0
 801637a:	60f8      	str	r0, [r7, #12]
 801637c:	60b9      	str	r1, [r7, #8]
 801637e:	607a      	str	r2, [r7, #4]
 8016380:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8016382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016384:	f7f7 fd0c 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 8016388:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 801638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	009b      	lsls	r3, r3, #2
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	4413      	add	r3, r2
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	f107 0314 	add.w	r3, r7, #20
 801639a:	4611      	mov	r1, r2
 801639c:	4618      	mov	r0, r3
 801639e:	f7f7 f968 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80163a2:	f107 0314 	add.w	r3, r7, #20
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7f7 fcfa 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 80163ac:	4602      	mov	r2, r0
 80163ae:	69fb      	ldr	r3, [r7, #28]
 80163b0:	4293      	cmp	r3, r2
 80163b2:	bf34      	ite	cc
 80163b4:	2301      	movcc	r3, #1
 80163b6:	2300      	movcs	r3, #0
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00c      	beq.n	80163d8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80163be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	009b      	lsls	r3, r3, #2
 80163c4:	683a      	ldr	r2, [r7, #0]
 80163c6:	4413      	add	r3, r2
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	69fb      	ldr	r3, [r7, #28]
 80163cc:	4413      	add	r3, r2
 80163ce:	4619      	mov	r1, r3
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f7f7 f94e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80163d6:	e019      	b.n	801640c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80163d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3301      	adds	r3, #1
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	429a      	cmp	r2, r3
 80163e2:	dd0f      	ble.n	8016404 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 80163e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	1c5a      	adds	r2, r3, #1
 80163ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ec:	601a      	str	r2, [r3, #0]
 80163ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	009b      	lsls	r3, r3, #2
 80163f4:	683a      	ldr	r2, [r7, #0]
 80163f6:	4413      	add	r3, r2
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	4619      	mov	r1, r3
 80163fc:	68f8      	ldr	r0, [r7, #12]
 80163fe:	f7f7 f938 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016402:	e003      	b.n	801640c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8016404:	4906      	ldr	r1, [pc, #24]	; (8016420 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8016406:	68f8      	ldr	r0, [r7, #12]
 8016408:	f7f7 f933 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 801640c:	f107 0314 	add.w	r3, r7, #20
 8016410:	4618      	mov	r0, r3
 8016412:	f7f7 fce6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8016416:	68f8      	ldr	r0, [r7, #12]
 8016418:	3720      	adds	r7, #32
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	08025f64 	.word	0x08025f64

08016424 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8016424:	b5b0      	push	{r4, r5, r7, lr}
 8016426:	b08c      	sub	sp, #48	; 0x30
 8016428:	af02      	add	r7, sp, #8
 801642a:	60f8      	str	r0, [r7, #12]
 801642c:	60b9      	str	r1, [r7, #8]
 801642e:	607a      	str	r2, [r7, #4]
 8016430:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8016432:	f107 031c 	add.w	r3, r7, #28
 8016436:	491a      	ldr	r1, [pc, #104]	; (80164a0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8016438:	4618      	mov	r0, r3
 801643a:	f7f7 f91a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801643e:	f107 0014 	add.w	r0, r7, #20
 8016442:	f107 031c 	add.w	r3, r7, #28
 8016446:	9301      	str	r3, [sp, #4]
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	9300      	str	r3, [sp, #0]
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	68ba      	ldr	r2, [r7, #8]
 8016450:	68f9      	ldr	r1, [r7, #12]
 8016452:	f7ff ff8f 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016456:	f107 0514 	add.w	r5, r7, #20
 801645a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801645e:	4911      	ldr	r1, [pc, #68]	; (80164a4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8016460:	2010      	movs	r0, #16
 8016462:	f7f4 fd43 	bl	800aeec <_ZnwjPKci>
 8016466:	4604      	mov	r4, r0
 8016468:	4629      	mov	r1, r5
 801646a:	4620      	mov	r0, r4
 801646c:	f009 ff3e 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016470:	627c      	str	r4, [r7, #36]	; 0x24
 8016472:	f107 0314 	add.w	r3, r7, #20
 8016476:	4618      	mov	r0, r3
 8016478:	f7f7 fcb3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801647c:	f107 031c 	add.w	r3, r7, #28
 8016480:	4618      	mov	r0, r3
 8016482:	f7f7 fcae 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801648a:	4619      	mov	r1, r3
 801648c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801648e:	f009 ff4d 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016492:	4602      	mov	r2, r0
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016498:	bf00      	nop
 801649a:	3728      	adds	r7, #40	; 0x28
 801649c:	46bd      	mov	sp, r7
 801649e:	bdb0      	pop	{r4, r5, r7, pc}
 80164a0:	08025f98 	.word	0x08025f98
 80164a4:	0802692c 	.word	0x0802692c

080164a8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80164a8:	b5b0      	push	{r4, r5, r7, lr}
 80164aa:	b092      	sub	sp, #72	; 0x48
 80164ac:	af02      	add	r7, sp, #8
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
 80164b4:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80164b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164ba:	494e      	ldr	r1, [pc, #312]	; (80165f4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80164bc:	4618      	mov	r0, r3
 80164be:	f7f7 f8d8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80164c2:	f107 0020 	add.w	r0, r7, #32
 80164c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164ca:	9301      	str	r3, [sp, #4]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	68ba      	ldr	r2, [r7, #8]
 80164d4:	68f9      	ldr	r1, [r7, #12]
 80164d6:	f7ff ff4d 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80164da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f7 fc7f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 80164e4:	f107 0310 	add.w	r3, r7, #16
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f8 fb8f 	bl	800ec0c <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 80164ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80164f2:	4941      	ldr	r1, [pc, #260]	; (80165f8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 80164f4:	4618      	mov	r0, r3
 80164f6:	f7f7 f8bc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80164fa:	f107 0210 	add.w	r2, r7, #16
 80164fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016502:	f107 0320 	add.w	r3, r7, #32
 8016506:	4618      	mov	r0, r3
 8016508:	f7f7 fa1f 	bl	800d94a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 801650c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016510:	4618      	mov	r0, r3
 8016512:	f7f7 fc66 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8016516:	f107 0310 	add.w	r3, r7, #16
 801651a:	4618      	mov	r0, r3
 801651c:	f7f8 fc1b 	bl	800ed56 <_ZNK22SimpleStringCollection4sizeEv>
 8016520:	4603      	mov	r3, r0
 8016522:	2b02      	cmp	r3, #2
 8016524:	bf14      	ite	ne
 8016526:	2301      	movne	r3, #1
 8016528:	2300      	moveq	r3, #0
 801652a:	b2db      	uxtb	r3, r3
 801652c:	2b00      	cmp	r3, #0
 801652e:	d001      	beq.n	8016534 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8016530:	2400      	movs	r4, #0
 8016532:	e04f      	b.n	80165d4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8016534:	f107 0310 	add.w	r3, r7, #16
 8016538:	2100      	movs	r1, #0
 801653a:	4618      	mov	r0, r3
 801653c:	f7f8 fc18 	bl	800ed70 <_ZN22SimpleStringCollectionixEj>
 8016540:	4604      	mov	r4, r0
 8016542:	f107 0310 	add.w	r3, r7, #16
 8016546:	2100      	movs	r1, #0
 8016548:	4618      	mov	r0, r3
 801654a:	f7f8 fc11 	bl	800ed70 <_ZN22SimpleStringCollectionixEj>
 801654e:	4603      	mov	r3, r0
 8016550:	4618      	mov	r0, r3
 8016552:	f7f7 fc25 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 8016556:	4603      	mov	r3, r0
 8016558:	3b01      	subs	r3, #1
 801655a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801655e:	2200      	movs	r2, #0
 8016560:	4621      	mov	r1, r4
 8016562:	f7f7 fd47 	bl	800dff4 <_ZNK12SimpleString9subStringEjj>
 8016566:	f107 0538 	add.w	r5, r7, #56	; 0x38
 801656a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801656e:	4923      	ldr	r1, [pc, #140]	; (80165fc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8016570:	2010      	movs	r0, #16
 8016572:	f7f4 fcbb 	bl	800aeec <_ZnwjPKci>
 8016576:	4604      	mov	r4, r0
 8016578:	4629      	mov	r1, r5
 801657a:	4620      	mov	r0, r4
 801657c:	f009 feb6 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016584:	4619      	mov	r1, r3
 8016586:	4620      	mov	r0, r4
 8016588:	f009 fed0 	bl	802032c <_ZN10TestFilter3addEPS_>
 801658c:	4602      	mov	r2, r0
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	625a      	str	r2, [r3, #36]	; 0x24
 8016592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016596:	4618      	mov	r0, r3
 8016598:	f7f7 fc23 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 801659c:	f107 0310 	add.w	r3, r7, #16
 80165a0:	2101      	movs	r1, #1
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f8 fbe4 	bl	800ed70 <_ZN22SimpleStringCollectionixEj>
 80165a8:	4605      	mov	r5, r0
 80165aa:	f240 121f 	movw	r2, #287	; 0x11f
 80165ae:	4913      	ldr	r1, [pc, #76]	; (80165fc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80165b0:	2010      	movs	r0, #16
 80165b2:	f7f4 fc9b 	bl	800aeec <_ZnwjPKci>
 80165b6:	4604      	mov	r4, r0
 80165b8:	4629      	mov	r1, r5
 80165ba:	4620      	mov	r0, r4
 80165bc:	f009 fe96 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165c4:	4619      	mov	r1, r3
 80165c6:	4620      	mov	r0, r4
 80165c8:	f009 feb0 	bl	802032c <_ZN10TestFilter3addEPS_>
 80165cc:	4602      	mov	r2, r0
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80165d2:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80165d4:	f107 0310 	add.w	r3, r7, #16
 80165d8:	4618      	mov	r0, r3
 80165da:	f7f8 fb8b 	bl	800ecf4 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80165de:	f107 0320 	add.w	r3, r7, #32
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f7 fbfd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80165e8:	4623      	mov	r3, r4
}
 80165ea:	4618      	mov	r0, r3
 80165ec:	3740      	adds	r7, #64	; 0x40
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bdb0      	pop	{r4, r5, r7, pc}
 80165f2:	bf00      	nop
 80165f4:	08025f9c 	.word	0x08025f9c
 80165f8:	0802694c 	.word	0x0802694c
 80165fc:	0802692c 	.word	0x0802692c

08016600 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016600:	b5b0      	push	{r4, r5, r7, lr}
 8016602:	b08c      	sub	sp, #48	; 0x30
 8016604:	af02      	add	r7, sp, #8
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
 801660c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801660e:	f107 031c 	add.w	r3, r7, #28
 8016612:	491c      	ldr	r1, [pc, #112]	; (8016684 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8016614:	4618      	mov	r0, r3
 8016616:	f7f7 f82c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801661a:	f107 0014 	add.w	r0, r7, #20
 801661e:	f107 031c 	add.w	r3, r7, #28
 8016622:	9301      	str	r3, [sp, #4]
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	9300      	str	r3, [sp, #0]
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	68ba      	ldr	r2, [r7, #8]
 801662c:	68f9      	ldr	r1, [r7, #12]
 801662e:	f7ff fea1 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016632:	f107 0514 	add.w	r5, r7, #20
 8016636:	f240 1225 	movw	r2, #293	; 0x125
 801663a:	4913      	ldr	r1, [pc, #76]	; (8016688 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 801663c:	2010      	movs	r0, #16
 801663e:	f7f4 fc55 	bl	800aeec <_ZnwjPKci>
 8016642:	4604      	mov	r4, r0
 8016644:	4629      	mov	r1, r5
 8016646:	4620      	mov	r0, r4
 8016648:	f009 fe50 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 801664c:	627c      	str	r4, [r7, #36]	; 0x24
 801664e:	f107 0314 	add.w	r3, r7, #20
 8016652:	4618      	mov	r0, r3
 8016654:	f7f7 fbc5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016658:	f107 031c 	add.w	r3, r7, #28
 801665c:	4618      	mov	r0, r3
 801665e:	f7f7 fbc0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016664:	f009 fe7d 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666c:	4619      	mov	r1, r3
 801666e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016670:	f009 fe5c 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016674:	4602      	mov	r2, r0
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	625a      	str	r2, [r3, #36]	; 0x24
}
 801667a:	bf00      	nop
 801667c:	3728      	adds	r7, #40	; 0x28
 801667e:	46bd      	mov	sp, r7
 8016680:	bdb0      	pop	{r4, r5, r7, pc}
 8016682:	bf00      	nop
 8016684:	08025fa0 	.word	0x08025fa0
 8016688:	0802692c 	.word	0x0802692c

0801668c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 801668c:	b5b0      	push	{r4, r5, r7, lr}
 801668e:	b08c      	sub	sp, #48	; 0x30
 8016690:	af02      	add	r7, sp, #8
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
 8016698:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 801669a:	f107 031c 	add.w	r3, r7, #28
 801669e:	491c      	ldr	r1, [pc, #112]	; (8016710 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7f6 ffe6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80166a6:	f107 0014 	add.w	r0, r7, #20
 80166aa:	f107 031c 	add.w	r3, r7, #28
 80166ae:	9301      	str	r3, [sp, #4]
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	9300      	str	r3, [sp, #0]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	68ba      	ldr	r2, [r7, #8]
 80166b8:	68f9      	ldr	r1, [r7, #12]
 80166ba:	f7ff fe5b 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80166be:	f107 0514 	add.w	r5, r7, #20
 80166c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80166c6:	4913      	ldr	r1, [pc, #76]	; (8016714 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80166c8:	2010      	movs	r0, #16
 80166ca:	f7f4 fc0f 	bl	800aeec <_ZnwjPKci>
 80166ce:	4604      	mov	r4, r0
 80166d0:	4629      	mov	r1, r5
 80166d2:	4620      	mov	r0, r4
 80166d4:	f009 fe0a 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 80166d8:	627c      	str	r4, [r7, #36]	; 0x24
 80166da:	f107 0314 	add.w	r3, r7, #20
 80166de:	4618      	mov	r0, r3
 80166e0:	f7f7 fb7f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80166e4:	f107 031c 	add.w	r3, r7, #28
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7f7 fb7a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 80166ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166f0:	f009 fe44 	bl	802037c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166f8:	4619      	mov	r1, r3
 80166fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166fc:	f009 fe16 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016700:	4602      	mov	r2, r0
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016706:	bf00      	nop
 8016708:	3728      	adds	r7, #40	; 0x28
 801670a:	46bd      	mov	sp, r7
 801670c:	bdb0      	pop	{r4, r5, r7, pc}
 801670e:	bf00      	nop
 8016710:	08025fa4 	.word	0x08025fa4
 8016714:	0802692c 	.word	0x0802692c

08016718 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016718:	b5b0      	push	{r4, r5, r7, lr}
 801671a:	b08c      	sub	sp, #48	; 0x30
 801671c:	af02      	add	r7, sp, #8
 801671e:	60f8      	str	r0, [r7, #12]
 8016720:	60b9      	str	r1, [r7, #8]
 8016722:	607a      	str	r2, [r7, #4]
 8016724:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8016726:	f107 031c 	add.w	r3, r7, #28
 801672a:	491d      	ldr	r1, [pc, #116]	; (80167a0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 801672c:	4618      	mov	r0, r3
 801672e:	f7f6 ffa0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016732:	f107 0014 	add.w	r0, r7, #20
 8016736:	f107 031c 	add.w	r3, r7, #28
 801673a:	9301      	str	r3, [sp, #4]
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	9300      	str	r3, [sp, #0]
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	68ba      	ldr	r2, [r7, #8]
 8016744:	68f9      	ldr	r1, [r7, #12]
 8016746:	f7ff fe15 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801674a:	f107 0514 	add.w	r5, r7, #20
 801674e:	f240 1233 	movw	r2, #307	; 0x133
 8016752:	4914      	ldr	r1, [pc, #80]	; (80167a4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8016754:	2010      	movs	r0, #16
 8016756:	f7f4 fbc9 	bl	800aeec <_ZnwjPKci>
 801675a:	4604      	mov	r4, r0
 801675c:	4629      	mov	r1, r5
 801675e:	4620      	mov	r0, r4
 8016760:	f009 fdc4 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016764:	627c      	str	r4, [r7, #36]	; 0x24
 8016766:	f107 0314 	add.w	r3, r7, #20
 801676a:	4618      	mov	r0, r3
 801676c:	f7f7 fb39 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016770:	f107 031c 	add.w	r3, r7, #28
 8016774:	4618      	mov	r0, r3
 8016776:	f7f7 fb34 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801677a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801677c:	f009 fdf1 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8016780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016782:	f009 fdfb 	bl	802037c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801678a:	4619      	mov	r1, r3
 801678c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801678e:	f009 fdcd 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016792:	4602      	mov	r2, r0
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016798:	bf00      	nop
 801679a:	3728      	adds	r7, #40	; 0x28
 801679c:	46bd      	mov	sp, r7
 801679e:	bdb0      	pop	{r4, r5, r7, pc}
 80167a0:	08025fa8 	.word	0x08025fa8
 80167a4:	0802692c 	.word	0x0802692c

080167a8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80167a8:	b5b0      	push	{r4, r5, r7, lr}
 80167aa:	b08c      	sub	sp, #48	; 0x30
 80167ac:	af02      	add	r7, sp, #8
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80167b6:	f107 031c 	add.w	r3, r7, #28
 80167ba:	491a      	ldr	r1, [pc, #104]	; (8016824 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80167bc:	4618      	mov	r0, r3
 80167be:	f7f6 ff58 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80167c2:	f107 0014 	add.w	r0, r7, #20
 80167c6:	f107 031c 	add.w	r3, r7, #28
 80167ca:	9301      	str	r3, [sp, #4]
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	9300      	str	r3, [sp, #0]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	68ba      	ldr	r2, [r7, #8]
 80167d4:	68f9      	ldr	r1, [r7, #12]
 80167d6:	f7ff fdcd 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80167da:	f107 0514 	add.w	r5, r7, #20
 80167de:	f240 123b 	movw	r2, #315	; 0x13b
 80167e2:	4911      	ldr	r1, [pc, #68]	; (8016828 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80167e4:	2010      	movs	r0, #16
 80167e6:	f7f4 fb81 	bl	800aeec <_ZnwjPKci>
 80167ea:	4604      	mov	r4, r0
 80167ec:	4629      	mov	r1, r5
 80167ee:	4620      	mov	r0, r4
 80167f0:	f009 fd7c 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 80167f4:	627c      	str	r4, [r7, #36]	; 0x24
 80167f6:	f107 0314 	add.w	r3, r7, #20
 80167fa:	4618      	mov	r0, r3
 80167fc:	f7f7 faf1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016800:	f107 031c 	add.w	r3, r7, #28
 8016804:	4618      	mov	r0, r3
 8016806:	f7f7 faec 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801680e:	4619      	mov	r1, r3
 8016810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016812:	f009 fd8b 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016816:	4602      	mov	r2, r0
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801681c:	bf00      	nop
 801681e:	3728      	adds	r7, #40	; 0x28
 8016820:	46bd      	mov	sp, r7
 8016822:	bdb0      	pop	{r4, r5, r7, pc}
 8016824:	08025fb0 	.word	0x08025fb0
 8016828:	0802692c 	.word	0x0802692c

0801682c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 801682c:	b5b0      	push	{r4, r5, r7, lr}
 801682e:	b08c      	sub	sp, #48	; 0x30
 8016830:	af02      	add	r7, sp, #8
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
 8016838:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 801683a:	f107 031c 	add.w	r3, r7, #28
 801683e:	491c      	ldr	r1, [pc, #112]	; (80168b0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8016840:	4618      	mov	r0, r3
 8016842:	f7f6 ff16 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016846:	f107 0014 	add.w	r0, r7, #20
 801684a:	f107 031c 	add.w	r3, r7, #28
 801684e:	9301      	str	r3, [sp, #4]
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	9300      	str	r3, [sp, #0]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	68ba      	ldr	r2, [r7, #8]
 8016858:	68f9      	ldr	r1, [r7, #12]
 801685a:	f7ff fd8b 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801685e:	f107 0514 	add.w	r5, r7, #20
 8016862:	f240 1241 	movw	r2, #321	; 0x141
 8016866:	4913      	ldr	r1, [pc, #76]	; (80168b4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8016868:	2010      	movs	r0, #16
 801686a:	f7f4 fb3f 	bl	800aeec <_ZnwjPKci>
 801686e:	4604      	mov	r4, r0
 8016870:	4629      	mov	r1, r5
 8016872:	4620      	mov	r0, r4
 8016874:	f009 fd3a 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016878:	627c      	str	r4, [r7, #36]	; 0x24
 801687a:	f107 0314 	add.w	r3, r7, #20
 801687e:	4618      	mov	r0, r3
 8016880:	f7f7 faaf 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016884:	f107 031c 	add.w	r3, r7, #28
 8016888:	4618      	mov	r0, r3
 801688a:	f7f7 faaa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 801688e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016890:	f009 fd67 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016898:	4619      	mov	r1, r3
 801689a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801689c:	f009 fd46 	bl	802032c <_ZN10TestFilter3addEPS_>
 80168a0:	4602      	mov	r2, r0
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80168a6:	bf00      	nop
 80168a8:	3728      	adds	r7, #40	; 0x28
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bdb0      	pop	{r4, r5, r7, pc}
 80168ae:	bf00      	nop
 80168b0:	08025fb4 	.word	0x08025fb4
 80168b4:	0802692c 	.word	0x0802692c

080168b8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80168b8:	b5b0      	push	{r4, r5, r7, lr}
 80168ba:	b08c      	sub	sp, #48	; 0x30
 80168bc:	af02      	add	r7, sp, #8
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
 80168c4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80168c6:	f107 031c 	add.w	r3, r7, #28
 80168ca:	491c      	ldr	r1, [pc, #112]	; (801693c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f6 fed0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80168d2:	f107 0014 	add.w	r0, r7, #20
 80168d6:	f107 031c 	add.w	r3, r7, #28
 80168da:	9301      	str	r3, [sp, #4]
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	68ba      	ldr	r2, [r7, #8]
 80168e4:	68f9      	ldr	r1, [r7, #12]
 80168e6:	f7ff fd45 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80168ea:	f107 0514 	add.w	r5, r7, #20
 80168ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80168f2:	4913      	ldr	r1, [pc, #76]	; (8016940 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 80168f4:	2010      	movs	r0, #16
 80168f6:	f7f4 faf9 	bl	800aeec <_ZnwjPKci>
 80168fa:	4604      	mov	r4, r0
 80168fc:	4629      	mov	r1, r5
 80168fe:	4620      	mov	r0, r4
 8016900:	f009 fcf4 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016904:	627c      	str	r4, [r7, #36]	; 0x24
 8016906:	f107 0314 	add.w	r3, r7, #20
 801690a:	4618      	mov	r0, r3
 801690c:	f7f7 fa69 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016910:	f107 031c 	add.w	r3, r7, #28
 8016914:	4618      	mov	r0, r3
 8016916:	f7f7 fa64 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801691a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801691c:	f009 fd2e 	bl	802037c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016924:	4619      	mov	r1, r3
 8016926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016928:	f009 fd00 	bl	802032c <_ZN10TestFilter3addEPS_>
 801692c:	4602      	mov	r2, r0
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016932:	bf00      	nop
 8016934:	3728      	adds	r7, #40	; 0x28
 8016936:	46bd      	mov	sp, r7
 8016938:	bdb0      	pop	{r4, r5, r7, pc}
 801693a:	bf00      	nop
 801693c:	08025fb8 	.word	0x08025fb8
 8016940:	0802692c 	.word	0x0802692c

08016944 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8016944:	b5b0      	push	{r4, r5, r7, lr}
 8016946:	b08c      	sub	sp, #48	; 0x30
 8016948:	af02      	add	r7, sp, #8
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	607a      	str	r2, [r7, #4]
 8016950:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8016952:	f107 031c 	add.w	r3, r7, #28
 8016956:	491d      	ldr	r1, [pc, #116]	; (80169cc <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8016958:	4618      	mov	r0, r3
 801695a:	f7f6 fe8a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801695e:	f107 0014 	add.w	r0, r7, #20
 8016962:	f107 031c 	add.w	r3, r7, #28
 8016966:	9301      	str	r3, [sp, #4]
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	68ba      	ldr	r2, [r7, #8]
 8016970:	68f9      	ldr	r1, [r7, #12]
 8016972:	f7ff fcff 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016976:	f107 0514 	add.w	r5, r7, #20
 801697a:	f240 124f 	movw	r2, #335	; 0x14f
 801697e:	4914      	ldr	r1, [pc, #80]	; (80169d0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8016980:	2010      	movs	r0, #16
 8016982:	f7f4 fab3 	bl	800aeec <_ZnwjPKci>
 8016986:	4604      	mov	r4, r0
 8016988:	4629      	mov	r1, r5
 801698a:	4620      	mov	r0, r4
 801698c:	f009 fcae 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016990:	627c      	str	r4, [r7, #36]	; 0x24
 8016992:	f107 0314 	add.w	r3, r7, #20
 8016996:	4618      	mov	r0, r3
 8016998:	f7f7 fa23 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801699c:	f107 031c 	add.w	r3, r7, #28
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7f7 fa1e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80169a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169a8:	f009 fce8 	bl	802037c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80169ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169ae:	f009 fcd8 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169b6:	4619      	mov	r1, r3
 80169b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169ba:	f009 fcb7 	bl	802032c <_ZN10TestFilter3addEPS_>
 80169be:	4602      	mov	r2, r0
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80169c4:	bf00      	nop
 80169c6:	3728      	adds	r7, #40	; 0x28
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bdb0      	pop	{r4, r5, r7, pc}
 80169cc:	08025fbc 	.word	0x08025fbc
 80169d0:	0802692c 	.word	0x0802692c

080169d4 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80169d4:	b5b0      	push	{r4, r5, r7, lr}
 80169d6:	b092      	sub	sp, #72	; 0x48
 80169d8:	af02      	add	r7, sp, #8
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
 80169e0:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80169e2:	f107 0320 	add.w	r3, r7, #32
 80169e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7f6 fe42 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80169ee:	f107 0018 	add.w	r0, r7, #24
 80169f2:	f107 0320 	add.w	r3, r7, #32
 80169f6:	9301      	str	r3, [sp, #4]
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	68ba      	ldr	r2, [r7, #8]
 8016a00:	68f9      	ldr	r1, [r7, #12]
 8016a02:	f7ff fcb7 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016a06:	f107 0320 	add.w	r3, r7, #32
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7f7 f9e9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8016a10:	f107 0010 	add.w	r0, r7, #16
 8016a14:	f107 0118 	add.w	r1, r7, #24
 8016a18:	2329      	movs	r3, #41	; 0x29
 8016a1a:	222c      	movs	r2, #44	; 0x2c
 8016a1c:	f7f7 fb92 	bl	800e144 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8016a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a24:	f107 0110 	add.w	r1, r7, #16
 8016a28:	2202      	movs	r2, #2
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f7 fb2c 	bl	800e088 <_ZNK12SimpleString9subStringEj>
 8016a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016a34:	f107 0310 	add.w	r3, r7, #16
 8016a38:	4611      	mov	r1, r2
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7f6 fe85 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 8016a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f7 f9cc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8016a4a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8016a4e:	492a      	ldr	r1, [pc, #168]	; (8016af8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8016a50:	2010      	movs	r0, #16
 8016a52:	f7f4 fa4b 	bl	800aeec <_ZnwjPKci>
 8016a56:	4604      	mov	r4, r0
 8016a58:	f107 0310 	add.w	r3, r7, #16
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	4620      	mov	r0, r4
 8016a60:	f009 fc44 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016a64:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8016a66:	f107 0318 	add.w	r3, r7, #24
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f7 fb1c 	bl	800e0aa <_ZNK12SimpleString2atEj>
 8016a72:	4603      	mov	r3, r0
 8016a74:	461a      	mov	r2, r3
 8016a76:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8016a7a:	f107 0118 	add.w	r1, r7, #24
 8016a7e:	232c      	movs	r3, #44	; 0x2c
 8016a80:	f7f7 fb60 	bl	800e144 <_ZNK12SimpleString17subStringFromTillEcc>
 8016a84:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8016a88:	f240 125b 	movw	r2, #347	; 0x15b
 8016a8c:	491a      	ldr	r1, [pc, #104]	; (8016af8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8016a8e:	2010      	movs	r0, #16
 8016a90:	f7f4 fa2c 	bl	800aeec <_ZnwjPKci>
 8016a94:	4604      	mov	r4, r0
 8016a96:	4629      	mov	r1, r5
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f009 fc27 	bl	80202ec <_ZN10TestFilterC1ERK12SimpleString>
 8016a9e:	63bc      	str	r4, [r7, #56]	; 0x38
 8016aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7f7 f99c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8016aaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016aac:	f009 fc59 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8016ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ab2:	f009 fc56 	bl	8020362 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aba:	4619      	mov	r1, r3
 8016abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016abe:	f009 fc35 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016acc:	4619      	mov	r1, r3
 8016ace:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016ad0:	f009 fc2c 	bl	802032c <_ZN10TestFilter3addEPS_>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8016ada:	f107 0310 	add.w	r3, r7, #16
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f7 f97f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8016ae4:	f107 0318 	add.w	r3, r7, #24
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f7 f97a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 8016aee:	bf00      	nop
 8016af0:	3740      	adds	r7, #64	; 0x40
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bdb0      	pop	{r4, r5, r7, pc}
 8016af6:	bf00      	nop
 8016af8:	0802692c 	.word	0x0802692c

08016afc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8016afc:	b590      	push	{r4, r7, lr}
 8016afe:	b08b      	sub	sp, #44	; 0x2c
 8016b00:	af02      	add	r7, sp, #8
 8016b02:	60f8      	str	r0, [r7, #12]
 8016b04:	60b9      	str	r1, [r7, #8]
 8016b06:	607a      	str	r2, [r7, #4]
 8016b08:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016b0a:	f107 0318 	add.w	r3, r7, #24
 8016b0e:	491b      	ldr	r1, [pc, #108]	; (8016b7c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7f6 fdae 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016b16:	f107 0010 	add.w	r0, r7, #16
 8016b1a:	f107 0318 	add.w	r3, r7, #24
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	683b      	ldr	r3, [r7, #0]
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	68ba      	ldr	r2, [r7, #8]
 8016b28:	68f9      	ldr	r1, [r7, #12]
 8016b2a:	f7ff fc23 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016b2e:	f107 0318 	add.w	r3, r7, #24
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7f7 f955 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8016b38:	f107 0310 	add.w	r3, r7, #16
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f7f7 f92f 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 8016b42:	4603      	mov	r3, r0
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	bf0c      	ite	eq
 8016b48:	2301      	moveq	r3, #1
 8016b4a:	2300      	movne	r3, #0
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d001      	beq.n	8016b56 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8016b52:	2400      	movs	r4, #0
 8016b54:	e008      	b.n	8016b68 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	3330      	adds	r3, #48	; 0x30
 8016b5a:	f107 0210 	add.w	r2, r7, #16
 8016b5e:	4611      	mov	r1, r2
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7f6 fdf2 	bl	800d74a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8016b66:	2401      	movs	r4, #1
 8016b68:	f107 0310 	add.w	r3, r7, #16
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7f7 f938 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016b72:	2c01      	cmp	r4, #1
}
 8016b74:	3724      	adds	r7, #36	; 0x24
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd90      	pop	{r4, r7, pc}
 8016b7a:	bf00      	nop
 8016b7c:	08025fe4 	.word	0x08025fe4

08016b80 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8016b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b82:	b093      	sub	sp, #76	; 0x4c
 8016b84:	af02      	add	r7, sp, #8
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
 8016b8c:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8016b8e:	f107 0318 	add.w	r3, r7, #24
 8016b92:	4953      	ldr	r1, [pc, #332]	; (8016ce0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7f6 fd6c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016b9a:	f107 0010 	add.w	r0, r7, #16
 8016b9e:	f107 0318 	add.w	r3, r7, #24
 8016ba2:	9301      	str	r3, [sp, #4]
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	9300      	str	r3, [sp, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	68f9      	ldr	r1, [r7, #12]
 8016bae:	f7ff fbe1 	bl	8016374 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016bb2:	f107 0318 	add.w	r3, r7, #24
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7f7 f913 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8016bbc:	f107 0310 	add.w	r3, r7, #16
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f7 f8ed 	bl	800dda0 <_ZNK12SimpleString4sizeEv>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	bf0c      	ite	eq
 8016bcc:	2301      	moveq	r3, #1
 8016bce:	2300      	movne	r3, #0
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d001      	beq.n	8016bda <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8016bd6:	2400      	movs	r4, #0
 8016bd8:	e078      	b.n	8016ccc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8016bda:	2500      	movs	r5, #0
 8016bdc:	f107 0320 	add.w	r3, r7, #32
 8016be0:	4940      	ldr	r1, [pc, #256]	; (8016ce4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7f6 fd45 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016be8:	2601      	movs	r6, #1
 8016bea:	f107 0220 	add.w	r2, r7, #32
 8016bee:	f107 0310 	add.w	r3, r7, #16
 8016bf2:	4611      	mov	r1, r2
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7f7 f900 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d111      	bne.n	8016c24 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8016c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c04:	4938      	ldr	r1, [pc, #224]	; (8016ce8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7f6 fd33 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016c0c:	2501      	movs	r5, #1
 8016c0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016c12:	f107 0310 	add.w	r3, r7, #16
 8016c16:	4611      	mov	r1, r2
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7f7 f8ee 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d001      	beq.n	8016c28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8016c24:	2401      	movs	r4, #1
 8016c26:	e000      	b.n	8016c2a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8016c28:	2400      	movs	r4, #0
 8016c2a:	2d00      	cmp	r5, #0
 8016c2c:	d004      	beq.n	8016c38 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8016c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7f7 f8d5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016c38:	2e00      	cmp	r6, #0
 8016c3a:	d004      	beq.n	8016c46 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8016c3c:	f107 0320 	add.w	r3, r7, #32
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f7 f8ce 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016c46:	2c00      	cmp	r4, #0
 8016c48:	d005      	beq.n	8016c56 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016c52:	2401      	movs	r4, #1
 8016c54:	e03a      	b.n	8016ccc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8016c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c5a:	4924      	ldr	r1, [pc, #144]	; (8016cec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f6 fd08 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016c62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016c66:	f107 0310 	add.w	r3, r7, #16
 8016c6a:	4611      	mov	r1, r2
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f7f7 f8c4 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8016c72:	4603      	mov	r3, r0
 8016c74:	461c      	mov	r4, r3
 8016c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7f7 f8b1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016c80:	2c00      	cmp	r4, #0
 8016c82:	d005      	beq.n	8016c90 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	2201      	movs	r2, #1
 8016c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016c8c:	2401      	movs	r4, #1
 8016c8e:	e01d      	b.n	8016ccc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8016c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c94:	4916      	ldr	r1, [pc, #88]	; (8016cf0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7f6 fceb 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8016c9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8016ca0:	f107 0310 	add.w	r3, r7, #16
 8016ca4:	4611      	mov	r1, r2
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7f7 f8a7 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8016cac:	4603      	mov	r3, r0
 8016cae:	461c      	mov	r4, r3
 8016cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7f7 f894 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016cba:	2c00      	cmp	r4, #0
 8016cbc:	d005      	beq.n	8016cca <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	2202      	movs	r2, #2
 8016cc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8016cc6:	2401      	movs	r4, #1
 8016cc8:	e000      	b.n	8016ccc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8016cca:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8016ccc:	f107 0310 	add.w	r3, r7, #16
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f7 f886 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8016cd6:	4623      	mov	r3, r4
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	3744      	adds	r7, #68	; 0x44
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce0:	08025fe0 	.word	0x08025fe0
 8016ce4:	08026950 	.word	0x08026950
 8016ce8:	08026958 	.word	0x08026958
 8016cec:	08026960 	.word	0x08026960
 8016cf0:	08026968 	.word	0x08026968

08016cf4 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	b083      	sub	sp, #12
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d02:	2b01      	cmp	r3, #1
 8016d04:	bf0c      	ite	eq
 8016d06:	2301      	moveq	r3, #1
 8016d08:	2300      	movne	r3, #0
 8016d0a:	b2db      	uxtb	r3, r3
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	370c      	adds	r7, #12
 8016d10:	46bd      	mov	sp, r7
 8016d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d16:	4770      	bx	lr

08016d18 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b083      	sub	sp, #12
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d26:	2b02      	cmp	r3, #2
 8016d28:	bf0c      	ite	eq
 8016d2a:	2301      	moveq	r3, #1
 8016d2c:	2300      	movne	r3, #0
 8016d2e:	b2db      	uxtb	r3, r3
}
 8016d30:	4618      	mov	r0, r3
 8016d32:	370c      	adds	r7, #12
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	b083      	sub	sp, #12
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	6078      	str	r0, [r7, #4]
    return packageName_;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	3330      	adds	r3, #48	; 0x30
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	370c      	adds	r7, #12
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr

08016d54 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2200      	movs	r2, #0
 8016d60:	601a      	str	r2, [r3, #0]
    {}
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4618      	mov	r0, r3
 8016d66:	370c      	adds	r7, #12
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6e:	4770      	bx	lr

08016d70 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8016d70:	b480      	push	{r7}
 8016d72:	b083      	sub	sp, #12
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d7e:	2200      	movs	r2, #0
 8016d80:	601a      	str	r2, [r3, #0]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d88:	3304      	adds	r3, #4
 8016d8a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016d8e:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2200      	movs	r2, #0
 8016d94:	701a      	strb	r2, [r3, #0]
}
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	370c      	adds	r7, #12
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8016da4:	b480      	push	{r7}
 8016da6:	b083      	sub	sp, #12
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016db2:	2200      	movs	r2, #0
 8016db4:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2200      	movs	r2, #0
 8016dba:	701a      	strb	r2, [r3, #0]
}
 8016dbc:	bf00      	nop
 8016dbe:	370c      	adds	r7, #12
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr

08016dc8 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8016dc8:	b40e      	push	{r1, r2, r3}
 8016dca:	b590      	push	{r4, r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dd8:	3304      	adds	r3, #4
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d032      	beq.n	8016e54 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8016dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016df2:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8016df4:	4b1b      	ldr	r3, [pc, #108]	; (8016e64 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8016df6:	681c      	ldr	r4, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	18d0      	adds	r0, r2, r3
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	1c59      	adds	r1, r3, #1
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e0c:	47a0      	blx	r4
 8016e0e:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	dd09      	ble.n	8016e2a <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	441a      	add	r2, r3
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e28:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e30:	681a      	ldr	r2, [r3, #0]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e38:	3304      	adds	r3, #4
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d90a      	bls.n	8016e56 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e46:	3304      	adds	r3, #4
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e50:	601a      	str	r2, [r3, #0]
 8016e52:	e000      	b.n	8016e56 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8016e54:	bf00      	nop
    va_end(arguments);
}
 8016e56:	3718      	adds	r7, #24
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016e5e:	b003      	add	sp, #12
 8016e60:	4770      	bx	lr
 8016e62:	bf00      	nop
 8016e64:	200000b0 	.word	0x200000b0

08016e68 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b08c      	sub	sp, #48	; 0x30
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
 8016e72:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8016e78:	2310      	movs	r3, #16
 8016e7a:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8016e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	429a      	cmp	r2, r3
 8016e86:	d273      	bcs.n	8016f70 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8016e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e8a:	493b      	ldr	r1, [pc, #236]	; (8016f78 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8016e8c:	68f8      	ldr	r0, [r7, #12]
 8016e8e:	f7ff ff9b 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e96:	1ad3      	subs	r3, r2, r3
 8016e98:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	2b10      	cmp	r3, #16
 8016e9e:	d901      	bls.n	8016ea4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8016ea0:	2310      	movs	r3, #16
 8016ea2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8016ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea6:	f1c3 0310 	rsb	r3, r3, #16
 8016eaa:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8016eac:	2300      	movs	r3, #0
 8016eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8016eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb4:	429a      	cmp	r2, r3
 8016eb6:	d215      	bcs.n	8016ee4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8016eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ebc:	4413      	add	r3, r2
 8016ebe:	69fa      	ldr	r2, [r7, #28]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	461a      	mov	r2, r3
 8016ec6:	492d      	ldr	r1, [pc, #180]	; (8016f7c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8016ec8:	68f8      	ldr	r0, [r7, #12]
 8016eca:	f7ff ff7d 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8016ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed0:	2b07      	cmp	r3, #7
 8016ed2:	d103      	bne.n	8016edc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8016ed4:	492a      	ldr	r1, [pc, #168]	; (8016f80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016ed6:	68f8      	ldr	r0, [r7, #12]
 8016ed8:	f7ff ff76 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ede:	3301      	adds	r3, #1
 8016ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ee2:	e7e5      	b.n	8016eb0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d207      	bcs.n	8016f00 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8016ef0:	4924      	ldr	r1, [pc, #144]	; (8016f84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f7ff ff68 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8016ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efa:	3301      	adds	r3, #1
 8016efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8016efe:	e7f3      	b.n	8016ee8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8016f00:	697b      	ldr	r3, [r7, #20]
 8016f02:	2b08      	cmp	r3, #8
 8016f04:	d903      	bls.n	8016f0e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8016f06:	491e      	ldr	r1, [pc, #120]	; (8016f80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f7ff ff5d 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8016f0e:	491e      	ldr	r1, [pc, #120]	; (8016f88 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f7ff ff59 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016f16:	2300      	movs	r3, #0
 8016f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d21d      	bcs.n	8016f5e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8016f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f26:	4413      	add	r3, r2
 8016f28:	69fa      	ldr	r2, [r7, #28]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8016f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f36:	2b1f      	cmp	r3, #31
 8016f38:	d903      	bls.n	8016f42 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8016f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f3e:	2b7e      	cmp	r3, #126	; 0x7e
 8016f40:	d902      	bls.n	8016f48 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8016f42:	232e      	movs	r3, #46	; 0x2e
 8016f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8016f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	490f      	ldr	r1, [pc, #60]	; (8016f8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f7ff ff39 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8016f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f58:	3301      	adds	r3, #1
 8016f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f5c:	e7dd      	b.n	8016f1a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8016f5e:	490c      	ldr	r1, [pc, #48]	; (8016f90 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8016f60:	68f8      	ldr	r0, [r7, #12]
 8016f62:	f7ff ff31 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8016f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6a:	4413      	add	r3, r2
 8016f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8016f6e:	e787      	b.n	8016e80 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8016f70:	bf00      	nop
 8016f72:	3730      	adds	r7, #48	; 0x30
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	08026980 	.word	0x08026980
 8016f7c:	0802698c 	.word	0x0802698c
 8016f80:	08026994 	.word	0x08026994
 8016f84:	08026998 	.word	0x08026998
 8016f88:	0802699c 	.word	0x0802699c
 8016f8c:	080269a0 	.word	0x080269a0
 8016f90:	080269a4 	.word	0x080269a4

08016f94 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8016f94:	b480      	push	{r7}
 8016f96:	b083      	sub	sp, #12
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
    return buffer_;
 8016f9c:	687b      	ldr	r3, [r7, #4]
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	370c      	adds	r7, #12
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa8:	4770      	bx	lr

08016faa <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8016faa:	b480      	push	{r7}
 8016fac:	b083      	sub	sp, #12
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	6078      	str	r0, [r7, #4]
 8016fb2:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016fba:	3304      	adds	r3, #4
 8016fbc:	683a      	ldr	r2, [r7, #0]
 8016fbe:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016fc6:	3304      	adds	r3, #4
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016fce:	d306      	bcc.n	8016fde <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016fd6:	3304      	adds	r3, #4
 8016fd8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016fdc:	601a      	str	r2, [r3, #0]
}
 8016fde:	bf00      	nop
 8016fe0:	370c      	adds	r7, #12
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe8:	4770      	bx	lr

08016fea <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8016fea:	b480      	push	{r7}
 8016fec:	b083      	sub	sp, #12
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ff8:	3304      	adds	r3, #4
 8016ffa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016ffe:	601a      	str	r2, [r3, #0]
}
 8017000:	bf00      	nop
 8017002:	370c      	adds	r7, #12
 8017004:	46bd      	mov	sp, r7
 8017006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700a:	4770      	bx	lr

0801700c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 801700c:	b480      	push	{r7}
 801700e:	b083      	sub	sp, #12
 8017010:	af00      	add	r7, sp, #0
 8017012:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801701a:	681a      	ldr	r2, [r3, #0]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017022:	3304      	adds	r3, #4
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	429a      	cmp	r2, r3
 8017028:	bf2c      	ite	cs
 801702a:	2301      	movcs	r3, #1
 801702c:	2300      	movcc	r3, #0
 801702e:	b2db      	uxtb	r3, r3
}
 8017030:	4618      	mov	r0, r3
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2200      	movs	r2, #0
 8017048:	601a      	str	r2, [r3, #0]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2200      	movs	r2, #0
 801704e:	711a      	strb	r2, [r3, #4]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	3308      	adds	r3, #8
 8017054:	4618      	mov	r0, r3
 8017056:	f7ff fe8b 	bl	8016d70 <_ZN18SimpleStringBufferC1Ev>
{
}
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	4618      	mov	r0, r3
 801705e:	3708      	adds	r7, #8
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8017064:	b5b0      	push	{r4, r5, r7, lr}
 8017066:	b086      	sub	sp, #24
 8017068:	af02      	add	r7, sp, #8
 801706a:	60f8      	str	r0, [r7, #12]
 801706c:	60b9      	str	r1, [r7, #8]
 801706e:	607a      	str	r2, [r7, #4]
 8017070:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	f103 0408 	add.w	r4, r3, #8
 8017078:	687d      	ldr	r5, [r7, #4]
 801707a:	6a3b      	ldr	r3, [r7, #32]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	3314      	adds	r3, #20
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	6a38      	ldr	r0, [r7, #32]
 8017084:	4798      	blx	r3
 8017086:	4603      	mov	r3, r0
 8017088:	9301      	str	r3, [sp, #4]
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	462b      	mov	r3, r5
 8017090:	68ba      	ldr	r2, [r7, #8]
 8017092:	4904      	ldr	r1, [pc, #16]	; (80170a4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8017094:	4620      	mov	r0, r4
 8017096:	f7ff fe97 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801709a:	bf00      	nop
 801709c:	3710      	adds	r7, #16
 801709e:	46bd      	mov	sp, r7
 80170a0:	bdb0      	pop	{r4, r5, r7, pc}
 80170a2:	bf00      	nop
 80170a4:	080269a8 	.word	0x080269a8

080170a8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80170a8:	b5b0      	push	{r4, r5, r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af02      	add	r7, sp, #8
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
 80170b4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	f103 0408 	add.w	r4, r3, #8
 80170bc:	687d      	ldr	r5, [r7, #4]
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	3318      	adds	r3, #24
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	6838      	ldr	r0, [r7, #0]
 80170c8:	4798      	blx	r3
 80170ca:	4603      	mov	r3, r0
 80170cc:	9300      	str	r3, [sp, #0]
 80170ce:	462b      	mov	r3, r5
 80170d0:	68ba      	ldr	r2, [r7, #8]
 80170d2:	4904      	ldr	r1, [pc, #16]	; (80170e4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80170d4:	4620      	mov	r0, r4
 80170d6:	f7ff fe77 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80170da:	bf00      	nop
 80170dc:	3710      	adds	r7, #16
 80170de:	46bd      	mov	sp, r7
 80170e0:	bdb0      	pop	{r4, r5, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	080269e0 	.word	0x080269e0

080170e8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	3308      	adds	r3, #8
 80170f4:	4903      	ldr	r1, [pc, #12]	; (8017104 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7ff fe66 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80170fc:	bf00      	nop
 80170fe:	3708      	adds	r7, #8
 8017100:	46bd      	mov	sp, r7
 8017102:	bd80      	pop	{r7, pc}
 8017104:	08026a10 	.word	0x08026a10

08017108 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b084      	sub	sp, #16
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2200      	movs	r2, #0
 8017114:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2200      	movs	r2, #0
 801711a:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 801711c:	2367      	movs	r3, #103	; 0x67
 801711e:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	f203 1311 	addw	r3, r3, #273	; 0x111
 8017126:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	f103 0208 	add.w	r2, r3, #8
 801712e:	68bb      	ldr	r3, [r7, #8]
 8017130:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8017134:	4619      	mov	r1, r3
 8017136:	4610      	mov	r0, r2
 8017138:	f7ff ff37 	bl	8016faa <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 801713c:	bf00      	nop
 801713e:	3710      	adds	r7, #16
 8017140:	46bd      	mov	sp, r7
 8017142:	bd80      	pop	{r7, pc}

08017144 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8017144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017146:	b089      	sub	sp, #36	; 0x24
 8017148:	af04      	add	r7, sp, #16
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d102      	bne.n	801715c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8017156:	68f8      	ldr	r0, [r7, #12]
 8017158:	f000 f882 	bl	8017260 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	1c5a      	adds	r2, r3, #1
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	f103 0508 	add.w	r5, r3, #8
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801717e:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	695a      	ldr	r2, [r3, #20]
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	695b      	ldr	r3, [r3, #20]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	3314      	adds	r3, #20
 801718c:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801718e:	4610      	mov	r0, r2
 8017190:	4798      	blx	r3
 8017192:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017198:	9303      	str	r3, [sp, #12]
 801719a:	9202      	str	r2, [sp, #8]
 801719c:	683a      	ldr	r2, [r7, #0]
 801719e:	9201      	str	r2, [sp, #4]
 80171a0:	9400      	str	r4, [sp, #0]
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4632      	mov	r2, r6
 80171a6:	4915      	ldr	r1, [pc, #84]	; (80171fc <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80171a8:	4628      	mov	r0, r5
 80171aa:	f7ff fe0d 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	f103 0008 	add.w	r0, r3, #8
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	6899      	ldr	r1, [r3, #8]
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	461a      	mov	r2, r3
 80171be:	f7ff fe53 	bl	8016e68 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	695a      	ldr	r2, [r3, #20]
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	695b      	ldr	r3, [r3, #20]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	3314      	adds	r3, #20
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	4610      	mov	r0, r2
 80171d2:	4798      	blx	r3
 80171d4:	4603      	mov	r3, r0
 80171d6:	490a      	ldr	r1, [pc, #40]	; (8017200 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 80171d8:	4618      	mov	r0, r3
 80171da:	f7f6 f887 	bl	800d2ec <_ZN12SimpleString6StrCmpEPKcS1_>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	bf0c      	ite	eq
 80171e4:	2301      	moveq	r3, #1
 80171e6:	2300      	movne	r3, #0
 80171e8:	b2db      	uxtb	r3, r3
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d002      	beq.n	80171f4 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	2201      	movs	r2, #1
 80171f2:	711a      	strb	r2, [r3, #4]
}
 80171f4:	bf00      	nop
 80171f6:	3714      	adds	r7, #20
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171fc:	08026a30 	.word	0x08026a30
 8017200:	08026a90 	.word	0x08026a90

08017204 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b084      	sub	sp, #16
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d103      	bne.n	801721c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f7ff ff67 	bl	80170e8 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801721a:	e01e      	b.n	801725a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	3308      	adds	r3, #8
 8017220:	4618      	mov	r0, r3
 8017222:	f7ff fef3 	bl	801700c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8017226:	4603      	mov	r3, r0
 8017228:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	3308      	adds	r3, #8
 801722e:	4618      	mov	r0, r3
 8017230:	f7ff fedb 	bl	8016fea <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8017234:	7bfb      	ldrb	r3, [r7, #15]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d002      	beq.n	8017240 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f000 f820 	bl	8017280 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	4619      	mov	r1, r3
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f000 f82a 	bl	80172a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	791b      	ldrb	r3, [r3, #4]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d002      	beq.n	801725a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f000 f839 	bl	80172cc <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801725a:	3710      	adds	r7, #16
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}

08017260 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	3308      	adds	r3, #8
 801726c:	4903      	ldr	r1, [pc, #12]	; (801727c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 801726e:	4618      	mov	r0, r3
 8017270:	f7ff fdaa 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017274:	bf00      	nop
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}
 801727c:	08026a98 	.word	0x08026a98

08017280 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	3308      	adds	r3, #8
 801728c:	4903      	ldr	r1, [pc, #12]	; (801729c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 801728e:	4618      	mov	r0, r3
 8017290:	f7ff fd9a 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017294:	bf00      	nop
 8017296:	3708      	adds	r7, #8
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}
 801729c:	08026ab0 	.word	0x08026ab0

080172a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b082      	sub	sp, #8
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
 80172a8:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	f103 0008 	add.w	r0, r3, #8
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	4a04      	ldr	r2, [pc, #16]	; (80172c4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80172b4:	4904      	ldr	r1, [pc, #16]	; (80172c8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80172b6:	f7ff fd87 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80172ba:	bf00      	nop
 80172bc:	3708      	adds	r7, #8
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	08026af8 	.word	0x08026af8
 80172c8:	08026b10 	.word	0x08026b10

080172cc <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	3308      	adds	r3, #8
 80172d8:	4903      	ldr	r1, [pc, #12]	; (80172e8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 80172da:	4618      	mov	r0, r3
 80172dc:	f7ff fd74 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80172e0:	bf00      	nop
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	08026b18 	.word	0x08026b18

080172ec <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b08a      	sub	sp, #40	; 0x28
 80172f0:	af06      	add	r7, sp, #24
 80172f2:	60f8      	str	r0, [r7, #12]
 80172f4:	60b9      	str	r1, [r7, #8]
 80172f6:	607a      	str	r2, [r7, #4]
 80172f8:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 80172fa:	f7f9 fe8d 	bl	8011018 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 80172fe:	4602      	mov	r2, r0
 8017300:	69bb      	ldr	r3, [r7, #24]
 8017302:	9305      	str	r3, [sp, #20]
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	9304      	str	r3, [sp, #16]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	9303      	str	r3, [sp, #12]
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	9302      	str	r3, [sp, #8]
 8017310:	9201      	str	r2, [sp, #4]
 8017312:	2300      	movs	r3, #0
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	2300      	movs	r3, #0
 8017318:	4a04      	ldr	r2, [pc, #16]	; (801732c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801731a:	4905      	ldr	r1, [pc, #20]	; (8017330 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	f000 f855 	bl	80173cc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017322:	bf00      	nop
 8017324:	3710      	adds	r7, #16
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}
 801732a:	bf00      	nop
 801732c:	08026974 	.word	0x08026974
 8017330:	08026c2c 	.word	0x08026c2c

08017334 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017334:	b590      	push	{r4, r7, lr}
 8017336:	b08b      	sub	sp, #44	; 0x2c
 8017338:	af06      	add	r7, sp, #24
 801733a:	60f8      	str	r0, [r7, #12]
 801733c:	60b9      	str	r1, [r7, #8]
 801733e:	607a      	str	r2, [r7, #4]
 8017340:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	68d8      	ldr	r0, [r3, #12]
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	691c      	ldr	r4, [r3, #16]
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	68ba      	ldr	r2, [r7, #8]
 8017350:	6952      	ldr	r2, [r2, #20]
 8017352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017354:	9105      	str	r1, [sp, #20]
 8017356:	6a39      	ldr	r1, [r7, #32]
 8017358:	9104      	str	r1, [sp, #16]
 801735a:	6839      	ldr	r1, [r7, #0]
 801735c:	9103      	str	r1, [sp, #12]
 801735e:	6879      	ldr	r1, [r7, #4]
 8017360:	9102      	str	r1, [sp, #8]
 8017362:	9201      	str	r2, [sp, #4]
 8017364:	9300      	str	r3, [sp, #0]
 8017366:	4623      	mov	r3, r4
 8017368:	4602      	mov	r2, r0
 801736a:	4904      	ldr	r1, [pc, #16]	; (801737c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 801736c:	68f8      	ldr	r0, [r7, #12]
 801736e:	f000 f82d 	bl	80173cc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017372:	bf00      	nop
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	bd90      	pop	{r4, r7, pc}
 801737a:	bf00      	nop
 801737c:	08026c50 	.word	0x08026c50

08017380 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017380:	b590      	push	{r4, r7, lr}
 8017382:	b08b      	sub	sp, #44	; 0x2c
 8017384:	af06      	add	r7, sp, #24
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
 801738c:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	68d8      	ldr	r0, [r3, #12]
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	691c      	ldr	r4, [r3, #16]
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	68ba      	ldr	r2, [r7, #8]
 801739c:	6952      	ldr	r2, [r2, #20]
 801739e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173a0:	9105      	str	r1, [sp, #20]
 80173a2:	6a39      	ldr	r1, [r7, #32]
 80173a4:	9104      	str	r1, [sp, #16]
 80173a6:	6839      	ldr	r1, [r7, #0]
 80173a8:	9103      	str	r1, [sp, #12]
 80173aa:	6879      	ldr	r1, [r7, #4]
 80173ac:	9102      	str	r1, [sp, #8]
 80173ae:	9201      	str	r2, [sp, #4]
 80173b0:	9300      	str	r3, [sp, #0]
 80173b2:	4623      	mov	r3, r4
 80173b4:	4602      	mov	r2, r0
 80173b6:	4904      	ldr	r1, [pc, #16]	; (80173c8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f000 f807 	bl	80173cc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80173be:	bf00      	nop
 80173c0:	3714      	adds	r7, #20
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd90      	pop	{r4, r7, pc}
 80173c6:	bf00      	nop
 80173c8:	08026c78 	.word	0x08026c78

080173cc <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80173cc:	b590      	push	{r4, r7, lr}
 80173ce:	b087      	sub	sp, #28
 80173d0:	af02      	add	r7, sp, #8
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
 80173d8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	3308      	adds	r3, #8
 80173de:	68ba      	ldr	r2, [r7, #8]
 80173e0:	4910      	ldr	r1, [pc, #64]	; (8017424 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7ff fcf0 	bl	8016dc8 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 80173e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	6a3b      	ldr	r3, [r7, #32]
 80173ee:	683a      	ldr	r2, [r7, #0]
 80173f0:	6879      	ldr	r1, [r7, #4]
 80173f2:	68f8      	ldr	r0, [r7, #12]
 80173f4:	f7ff fe36 	bl	8017064 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 80173f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80173fe:	68f8      	ldr	r0, [r7, #12]
 8017400:	f7ff fe52 	bl	80170a8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8017404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	3308      	adds	r3, #8
 801740a:	681c      	ldr	r4, [r3, #0]
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f000 f80b 	bl	8017428 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8017412:	4603      	mov	r3, r0
 8017414:	4619      	mov	r1, r3
 8017416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017418:	47a0      	blx	r4
}
 801741a:	bf00      	nop
 801741c:	3714      	adds	r7, #20
 801741e:	46bd      	mov	sp, r7
 8017420:	bd90      	pop	{r4, r7, pc}
 8017422:	bf00      	nop
 8017424:	08026ca4 	.word	0x08026ca4

08017428 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	3308      	adds	r3, #8
 8017434:	4618      	mov	r0, r3
 8017436:	f7ff fdad 	bl	8016f94 <_ZN18SimpleStringBuffer8toStringEv>
 801743a:	4603      	mov	r3, r0
}
 801743c:	4618      	mov	r0, r3
 801743e:	3708      	adds	r7, #8
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}

08017444 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	3308      	adds	r3, #8
 8017450:	4618      	mov	r0, r3
 8017452:	f7ff fca7 	bl	8016da4 <_ZN18SimpleStringBuffer5clearEv>
}
 8017456:	bf00      	nop
 8017458:	3708      	adds	r7, #8
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}

0801745e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801745e:	b480      	push	{r7}
 8017460:	b085      	sub	sp, #20
 8017462:	af00      	add	r7, sp, #0
 8017464:	60f8      	str	r0, [r7, #12]
 8017466:	60b9      	str	r1, [r7, #8]
 8017468:	607a      	str	r2, [r7, #4]
 801746a:	603b      	str	r3, [r7, #0]
    number_ = number;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	68ba      	ldr	r2, [r7, #8]
 8017476:	609a      	str	r2, [r3, #8]
    size_ = size;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	683a      	ldr	r2, [r7, #0]
 801747c:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	69ba      	ldr	r2, [r7, #24]
 8017482:	615a      	str	r2, [r3, #20]
    period_ = period;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	7f3a      	ldrb	r2, [r7, #28]
 8017488:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017490:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017496:	60da      	str	r2, [r3, #12]
    line_ = line;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801749c:	611a      	str	r2, [r3, #16]
}
 801749e:	bf00      	nop
 80174a0:	3714      	adds	r7, #20
 80174a2:	46bd      	mov	sp, r7
 80174a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a8:	4770      	bx	lr

080174aa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80174aa:	b480      	push	{r7}
 80174ac:	b085      	sub	sp, #20
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	60f8      	str	r0, [r7, #12]
 80174b2:	60b9      	str	r1, [r7, #8]
 80174b4:	4613      	mov	r3, r2
 80174b6:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80174b8:	79fb      	ldrb	r3, [r7, #7]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d00b      	beq.n	80174d6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80174be:	68bb      	ldr	r3, [r7, #8]
 80174c0:	7e1b      	ldrb	r3, [r3, #24]
 80174c2:	79fa      	ldrb	r2, [r7, #7]
 80174c4:	429a      	cmp	r2, r3
 80174c6:	d006      	beq.n	80174d6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80174c8:	68bb      	ldr	r3, [r7, #8]
 80174ca:	7e1b      	ldrb	r3, [r3, #24]
 80174cc:	2b01      	cmp	r3, #1
 80174ce:	d004      	beq.n	80174da <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80174d0:	79fb      	ldrb	r3, [r7, #7]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	d101      	bne.n	80174da <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80174d6:	2301      	movs	r3, #1
 80174d8:	e000      	b.n	80174dc <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80174da:	2300      	movs	r3, #0
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3714      	adds	r7, #20
 80174e0:	46bd      	mov	sp, r7
 80174e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e6:	4770      	bx	lr

080174e8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b083      	sub	sp, #12
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681a      	ldr	r2, [r3, #0]
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	61da      	str	r2, [r3, #28]
    head_ = node;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	683a      	ldr	r2, [r7, #0]
 80174fe:	601a      	str	r2, [r3, #0]
}
 8017500:	bf00      	nop
 8017502:	370c      	adds	r7, #12
 8017504:	46bd      	mov	sp, r7
 8017506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750a:	4770      	bx	lr

0801750c <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 801750c:	b480      	push	{r7}
 801750e:	b085      	sub	sp, #20
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 801751c:	2300      	movs	r3, #0
 801751e:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d019      	beq.n	801755a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	689b      	ldr	r3, [r3, #8]
 801752a:	683a      	ldr	r2, [r7, #0]
 801752c:	429a      	cmp	r2, r3
 801752e:	d10e      	bne.n	801754e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d005      	beq.n	8017542 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	69da      	ldr	r2, [r3, #28]
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	61da      	str	r2, [r3, #28]
                return cur;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	e00c      	b.n	801755c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	69da      	ldr	r2, [r3, #28]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	601a      	str	r2, [r3, #0]
                return cur;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	e006      	b.n	801755c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	69db      	ldr	r3, [r3, #28]
 8017556:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8017558:	e7e2      	b.n	8017520 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801755a:	2300      	movs	r3, #0
}
 801755c:	4618      	mov	r0, r3
 801755e:	3714      	adds	r7, #20
 8017560:	46bd      	mov	sp, r7
 8017562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017566:	4770      	bx	lr

08017568 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8017568:	b480      	push	{r7}
 801756a:	b085      	sub	sp, #20
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d00a      	beq.n	8017594 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	689b      	ldr	r3, [r3, #8]
 8017582:	683a      	ldr	r2, [r7, #0]
 8017584:	429a      	cmp	r2, r3
 8017586:	d101      	bne.n	801758c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	e004      	b.n	8017596 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	69db      	ldr	r3, [r3, #28]
 8017590:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017592:	e7f1      	b.n	8017578 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8017594:	2300      	movs	r3, #0
}
 8017596:	4618      	mov	r0, r3
 8017598:	3714      	adds	r7, #20
 801759a:	46bd      	mov	sp, r7
 801759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a0:	4770      	bx	lr

080175a2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80175a2:	b580      	push	{r7, lr}
 80175a4:	b086      	sub	sp, #24
 80175a6:	af00      	add	r7, sp, #0
 80175a8:	60f8      	str	r0, [r7, #12]
 80175aa:	60b9      	str	r1, [r7, #8]
 80175ac:	4613      	mov	r3, r2
 80175ae:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	617b      	str	r3, [r7, #20]
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d00e      	beq.n	80175d8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80175ba:	79fb      	ldrb	r3, [r7, #7]
 80175bc:	461a      	mov	r2, r3
 80175be:	6979      	ldr	r1, [r7, #20]
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f7ff ff72 	bl	80174aa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d001      	beq.n	80175d0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	e004      	b.n	80175da <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	69db      	ldr	r3, [r3, #28]
 80175d4:	617b      	str	r3, [r7, #20]
 80175d6:	e7ed      	b.n	80175b4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80175d8:	2300      	movs	r3, #0
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3718      	adds	r7, #24
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	460b      	mov	r3, r1
 80175ec:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	78fa      	ldrb	r2, [r7, #3]
 80175f4:	4619      	mov	r1, r3
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7ff ffd3 	bl	80175a2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80175fc:	4603      	mov	r3, r0
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3708      	adds	r7, #8
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}

08017606 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017606:	b580      	push	{r7, lr}
 8017608:	b084      	sub	sp, #16
 801760a:	af00      	add	r7, sp, #0
 801760c:	60f8      	str	r0, [r7, #12]
 801760e:	60b9      	str	r1, [r7, #8]
 8017610:	4613      	mov	r3, r2
 8017612:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	69db      	ldr	r3, [r3, #28]
 8017618:	79fa      	ldrb	r2, [r7, #7]
 801761a:	4619      	mov	r1, r3
 801761c:	68f8      	ldr	r0, [r7, #12]
 801761e:	f7ff ffc0 	bl	80175a2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017622:	4603      	mov	r3, r0
}
 8017624:	4618      	mov	r0, r3
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	460b      	mov	r3, r1
 8017636:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8017638:	2300      	movs	r3, #0
 801763a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	60bb      	str	r3, [r7, #8]
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d00f      	beq.n	8017668 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8017648:	78fb      	ldrb	r3, [r7, #3]
 801764a:	461a      	mov	r2, r3
 801764c:	68b9      	ldr	r1, [r7, #8]
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff ff2b 	bl	80174aa <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d002      	beq.n	8017660 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	3301      	adds	r3, #1
 801765e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	69db      	ldr	r3, [r3, #28]
 8017664:	60bb      	str	r3, [r7, #8]
 8017666:	e7ec      	b.n	8017642 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8017668:	68fb      	ldr	r3, [r7, #12]
}
 801766a:	4618      	mov	r0, r3
 801766c:	3710      	adds	r7, #16
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}
	...

08017674 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801767e:	6839      	ldr	r1, [r7, #0]
 8017680:	4b09      	ldr	r3, [pc, #36]	; (80176a8 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8017682:	fba3 2301 	umull	r2, r3, r3, r1
 8017686:	1aca      	subs	r2, r1, r3
 8017688:	0852      	lsrs	r2, r2, #1
 801768a:	4413      	add	r3, r2
 801768c:	099a      	lsrs	r2, r3, #6
 801768e:	4613      	mov	r3, r2
 8017690:	00db      	lsls	r3, r3, #3
 8017692:	4413      	add	r3, r2
 8017694:	00db      	lsls	r3, r3, #3
 8017696:	4413      	add	r3, r2
 8017698:	1aca      	subs	r2, r1, r3
 801769a:	4613      	mov	r3, r2
}
 801769c:	4618      	mov	r0, r3
 801769e:	370c      	adds	r7, #12
 80176a0:	46bd      	mov	sp, r7
 80176a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a6:	4770      	bx	lr
 80176a8:	c0e07039 	.word	0xc0e07039

080176ac <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	689b      	ldr	r3, [r3, #8]
 80176ba:	4619      	mov	r1, r3
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f7ff ffd9 	bl	8017674 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80176c2:	4603      	mov	r3, r0
 80176c4:	009b      	lsls	r3, r3, #2
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	4413      	add	r3, r2
 80176ca:	6839      	ldr	r1, [r7, #0]
 80176cc:	4618      	mov	r0, r3
 80176ce:	f7ff ff0b 	bl	80174e8 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80176d2:	bf00      	nop
 80176d4:	3708      	adds	r7, #8
 80176d6:	46bd      	mov	sp, r7
 80176d8:	bd80      	pop	{r7, pc}

080176da <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80176da:	b580      	push	{r7, lr}
 80176dc:	b082      	sub	sp, #8
 80176de:	af00      	add	r7, sp, #0
 80176e0:	6078      	str	r0, [r7, #4]
 80176e2:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 80176e4:	6839      	ldr	r1, [r7, #0]
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7ff ffc4 	bl	8017674 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80176ec:	4603      	mov	r3, r0
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	687a      	ldr	r2, [r7, #4]
 80176f2:	4413      	add	r3, r2
 80176f4:	6839      	ldr	r1, [r7, #0]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7ff ff08 	bl	801750c <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 80176fc:	4603      	mov	r3, r0
}
 80176fe:	4618      	mov	r0, r3
 8017700:	3708      	adds	r7, #8
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}

08017706 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8017706:	b580      	push	{r7, lr}
 8017708:	b082      	sub	sp, #8
 801770a:	af00      	add	r7, sp, #0
 801770c:	6078      	str	r0, [r7, #4]
 801770e:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8017710:	6839      	ldr	r1, [r7, #0]
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f7ff ffae 	bl	8017674 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017718:	4603      	mov	r3, r0
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	4413      	add	r3, r2
 8017720:	6839      	ldr	r1, [r7, #0]
 8017722:	4618      	mov	r0, r3
 8017724:	f7ff ff20 	bl	8017568 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8017728:	4603      	mov	r3, r0
}
 801772a:	4618      	mov	r0, r3
 801772c:	3708      	adds	r7, #8
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}

08017732 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8017732:	b580      	push	{r7, lr}
 8017734:	b084      	sub	sp, #16
 8017736:	af00      	add	r7, sp, #0
 8017738:	6078      	str	r0, [r7, #4]
 801773a:	460b      	mov	r3, r1
 801773c:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801773e:	2300      	movs	r3, #0
 8017740:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017742:	2300      	movs	r3, #0
 8017744:	60bb      	str	r3, [r7, #8]
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	2b48      	cmp	r3, #72	; 0x48
 801774a:	dc10      	bgt.n	801776e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 801774c:	68bb      	ldr	r3, [r7, #8]
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	687a      	ldr	r2, [r7, #4]
 8017752:	4413      	add	r3, r2
 8017754:	78fa      	ldrb	r2, [r7, #3]
 8017756:	4611      	mov	r1, r2
 8017758:	4618      	mov	r0, r3
 801775a:	f7ff ff67 	bl	801762c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801775e:	4602      	mov	r2, r0
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	4413      	add	r3, r2
 8017764:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	3301      	adds	r3, #1
 801776a:	60bb      	str	r3, [r7, #8]
 801776c:	e7eb      	b.n	8017746 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801776e:	68fb      	ldr	r3, [r7, #12]
}
 8017770:	4618      	mov	r0, r3
 8017772:	3710      	adds	r7, #16
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}

08017778 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b084      	sub	sp, #16
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	460b      	mov	r3, r1
 8017782:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8017784:	2300      	movs	r3, #0
 8017786:	60fb      	str	r3, [r7, #12]
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	2b48      	cmp	r3, #72	; 0x48
 801778c:	dc12      	bgt.n	80177b4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	687a      	ldr	r2, [r7, #4]
 8017794:	4413      	add	r3, r2
 8017796:	78fa      	ldrb	r2, [r7, #3]
 8017798:	4611      	mov	r1, r2
 801779a:	4618      	mov	r0, r3
 801779c:	f7ff ff21 	bl	80175e2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80177a0:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d001      	beq.n	80177ac <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80177a8:	68bb      	ldr	r3, [r7, #8]
 80177aa:	e004      	b.n	80177b6 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	3301      	adds	r3, #1
 80177b0:	60fb      	str	r3, [r7, #12]
 80177b2:	e7e9      	b.n	8017788 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80177b4:	2300      	movs	r3, #0
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3710      	adds	r7, #16
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}

080177be <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80177be:	b580      	push	{r7, lr}
 80177c0:	b086      	sub	sp, #24
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	60f8      	str	r0, [r7, #12]
 80177c6:	60b9      	str	r1, [r7, #8]
 80177c8:	4613      	mov	r3, r2
 80177ca:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	689b      	ldr	r3, [r3, #8]
 80177d0:	4619      	mov	r1, r3
 80177d2:	68f8      	ldr	r0, [r7, #12]
 80177d4:	f7ff ff4e 	bl	8017674 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80177d8:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80177da:	697b      	ldr	r3, [r7, #20]
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	68fa      	ldr	r2, [r7, #12]
 80177e0:	4413      	add	r3, r2
 80177e2:	79fa      	ldrb	r2, [r7, #7]
 80177e4:	68b9      	ldr	r1, [r7, #8]
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7ff ff0d 	bl	8017606 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80177ec:	6138      	str	r0, [r7, #16]
    if (node) return node;
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d001      	beq.n	80177f8 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 80177f4:	693b      	ldr	r3, [r7, #16]
 80177f6:	e019      	b.n	801782c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	3301      	adds	r3, #1
 80177fc:	617b      	str	r3, [r7, #20]
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	2b48      	cmp	r3, #72	; 0x48
 8017802:	d812      	bhi.n	801782a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	009b      	lsls	r3, r3, #2
 8017808:	68fa      	ldr	r2, [r7, #12]
 801780a:	4413      	add	r3, r2
 801780c:	79fa      	ldrb	r2, [r7, #7]
 801780e:	4611      	mov	r1, r2
 8017810:	4618      	mov	r0, r3
 8017812:	f7ff fee6 	bl	80175e2 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8017816:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8017818:	693b      	ldr	r3, [r7, #16]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d001      	beq.n	8017822 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	e004      	b.n	801782c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	3301      	adds	r3, #1
 8017826:	617b      	str	r3, [r7, #20]
 8017828:	e7e9      	b.n	80177fe <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801782a:	2300      	movs	r3, #0
}
 801782c:	4618      	mov	r0, r3
 801782e:	3718      	adds	r7, #24
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}

08017834 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8017834:	b5b0      	push	{r4, r5, r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2448      	movs	r4, #72	; 0x48
 8017840:	461d      	mov	r5, r3
 8017842:	2c00      	cmp	r4, #0
 8017844:	db05      	blt.n	8017852 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8017846:	4628      	mov	r0, r5
 8017848:	f7ff fa84 	bl	8016d54 <_ZN22MemoryLeakDetectorListC1Ev>
 801784c:	3504      	adds	r5, #4
 801784e:	3c01      	subs	r4, #1
 8017850:	e7f7      	b.n	8017842 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	4618      	mov	r0, r3
 8017856:	3708      	adds	r7, #8
 8017858:	46bd      	mov	sp, r7
 801785a:	bdb0      	pop	{r4, r5, r7, pc}

0801785c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 801785c:	b590      	push	{r4, r7, lr}
 801785e:	b083      	sub	sp, #12
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
 8017866:	4a1d      	ldr	r2, [pc, #116]	; (80178dc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	601a      	str	r2, [r3, #0]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	330c      	adds	r3, #12
 8017870:	4618      	mov	r0, r3
 8017872:	f7ff fbe3 	bl	801703c <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801787c:	331c      	adds	r3, #28
 801787e:	4618      	mov	r0, r3
 8017880:	f7ff ffd8 	bl	8017834 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801788a:	2201      	movs	r2, #1
 801788c:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017894:	3304      	adds	r3, #4
 8017896:	2201      	movs	r2, #1
 8017898:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	2201      	movs	r2, #1
 801789e:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80178a6:	3308      	adds	r3, #8
 80178a8:	2200      	movs	r2, #0
 80178aa:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	683a      	ldr	r2, [r7, #0]
 80178b0:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80178b2:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80178b6:	490a      	ldr	r1, [pc, #40]	; (80178e0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80178b8:	2004      	movs	r0, #4
 80178ba:	f7f3 fb17 	bl	800aeec <_ZnwjPKci>
 80178be:	4604      	mov	r4, r0
 80178c0:	4620      	mov	r0, r4
 80178c2:	f7f5 fbe7 	bl	800d094 <_ZN11SimpleMutexC1Ev>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80178cc:	330c      	adds	r3, #12
 80178ce:	601c      	str	r4, [r3, #0]
}
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	4618      	mov	r0, r3
 80178d4:	370c      	adds	r7, #12
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bd90      	pop	{r4, r7, pc}
 80178da:	bf00      	nop
 80178dc:	080299c4 	.word	0x080299c4
 80178e0:	08026ca8 	.word	0x08026ca8

080178e4 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80178e4:	b590      	push	{r4, r7, lr}
 80178e6:	b083      	sub	sp, #12
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	4a0e      	ldr	r2, [pc, #56]	; (8017928 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80178f8:	330c      	adds	r3, #12
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00d      	beq.n	801791c <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017906:	330c      	adds	r3, #12
 8017908:	681c      	ldr	r4, [r3, #0]
 801790a:	2c00      	cmp	r4, #0
 801790c:	d006      	beq.n	801791c <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801790e:	4620      	mov	r0, r4
 8017910:	f7f5 fbd2 	bl	800d0b8 <_ZN11SimpleMutexD1Ev>
 8017914:	2104      	movs	r1, #4
 8017916:	4620      	mov	r0, r4
 8017918:	f7f3 fafc 	bl	800af14 <_ZdlPvj>
    }
}
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	4618      	mov	r0, r3
 8017920:	370c      	adds	r7, #12
 8017922:	46bd      	mov	sp, r7
 8017924:	bd90      	pop	{r4, r7, pc}
 8017926:	bf00      	nop
 8017928:	080299c4 	.word	0x080299c4

0801792c <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
}
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7ff ffd5 	bl	80178e4 <_ZN18MemoryLeakDetectorD1Ev>
 801793a:	f241 1150 	movw	r1, #4432	; 0x1150
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7f3 fae8 	bl	800af14 <_ZdlPvj>
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	4618      	mov	r0, r3
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801794e:	b580      	push	{r7, lr}
 8017950:	b082      	sub	sp, #8
 8017952:	af00      	add	r7, sp, #0
 8017954:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	330c      	adds	r3, #12
 801795a:	4618      	mov	r0, r3
 801795c:	f7ff fd72 	bl	8017444 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2203      	movs	r2, #3
 8017964:	721a      	strb	r2, [r3, #8]
}
 8017966:	bf00      	nop
 8017968:	3708      	adds	r7, #8
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}

0801796e <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801796e:	b480      	push	{r7}
 8017970:	b083      	sub	sp, #12
 8017972:	af00      	add	r7, sp, #0
 8017974:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	2202      	movs	r2, #2
 801797a:	721a      	strb	r2, [r3, #8]
}
 801797c:	bf00      	nop
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr

08017988 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2202      	movs	r2, #2
 8017994:	721a      	strb	r2, [r3, #8]
}
 8017996:	bf00      	nop
 8017998:	370c      	adds	r7, #12
 801799a:	46bd      	mov	sp, r7
 801799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a0:	4770      	bx	lr

080179a2 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80179a2:	b480      	push	{r7}
 80179a4:	b083      	sub	sp, #12
 80179a6:	af00      	add	r7, sp, #0
 80179a8:	6078      	str	r0, [r7, #4]
    return mutex_;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80179b0:	330c      	adds	r3, #12
 80179b2:	681b      	ldr	r3, [r3, #0]
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	370c      	adds	r7, #12
 80179b8:	46bd      	mov	sp, r7
 80179ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179be:	4770      	bx	lr

080179c0 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80179c0:	b480      	push	{r7}
 80179c2:	b083      	sub	sp, #12
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f023 0303 	bic.w	r3, r3, #3
 80179ce:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	370c      	adds	r7, #12
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr

080179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b082      	sub	sp, #8
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
 80179e4:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	3303      	adds	r3, #3
 80179ea:	4618      	mov	r0, r3
 80179ec:	f7ff ffe8 	bl	80179c0 <_ZL31calculateVoidPointerAlignedSizej>
 80179f0:	4603      	mov	r3, r0
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3708      	adds	r7, #8
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}

080179fa <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b084      	sub	sp, #16
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	60f8      	str	r0, [r7, #12]
 8017a02:	60b9      	str	r1, [r7, #8]
 8017a04:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	68f8      	ldr	r0, [r7, #12]
 8017a0a:	f7ff ffe7 	bl	80179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017a0e:	4602      	mov	r2, r0
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	4413      	add	r3, r2
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3710      	adds	r7, #16
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd80      	pop	{r7, pc}

08017a1c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08a      	sub	sp, #40	; 0x28
 8017a20:	af06      	add	r7, sp, #24
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	60b9      	str	r1, [r7, #8]
 8017a26:	607a      	str	r2, [r7, #4]
 8017a28:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017a30:	3304      	adds	r3, #4
 8017a32:	681a      	ldr	r2, [r3, #0]
 8017a34:	1c51      	adds	r1, r2, #1
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017a3c:	3304      	adds	r3, #4
 8017a3e:	6019      	str	r1, [r3, #0]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	7a19      	ldrb	r1, [r3, #8]
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017a4a:	3308      	adds	r3, #8
 8017a4c:	781b      	ldrb	r3, [r3, #0]
 8017a4e:	6a38      	ldr	r0, [r7, #32]
 8017a50:	9004      	str	r0, [sp, #16]
 8017a52:	69f8      	ldr	r0, [r7, #28]
 8017a54:	9003      	str	r0, [sp, #12]
 8017a56:	9302      	str	r3, [sp, #8]
 8017a58:	9101      	str	r1, [sp, #4]
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	9300      	str	r3, [sp, #0]
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	6879      	ldr	r1, [r7, #4]
 8017a62:	68b8      	ldr	r0, [r7, #8]
 8017a64:	f7ff fcfb 	bl	801745e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	689a      	ldr	r2, [r3, #8]
 8017a6c:	68bb      	ldr	r3, [r7, #8]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	4413      	add	r3, r2
 8017a72:	4619      	mov	r1, r3
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f000 f861 	bl	8017b3c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017a80:	331c      	adds	r3, #28
 8017a82:	68b9      	ldr	r1, [r7, #8]
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7ff fe11 	bl	80176ac <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017a8a:	bf00      	nop
 8017a8c:	3710      	adds	r7, #16
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}

08017a92 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017a92:	b580      	push	{r7, lr}
 8017a94:	b08a      	sub	sp, #40	; 0x28
 8017a96:	af04      	add	r7, sp, #16
 8017a98:	60f8      	str	r0, [r7, #12]
 8017a9a:	60b9      	str	r1, [r7, #8]
 8017a9c:	607a      	str	r2, [r7, #4]
 8017a9e:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017aa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017aa4:	9302      	str	r3, [sp, #8]
 8017aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa8:	9301      	str	r3, [sp, #4]
 8017aaa:	6a3b      	ldr	r3, [r7, #32]
 8017aac:	9300      	str	r3, [sp, #0]
 8017aae:	683b      	ldr	r3, [r7, #0]
 8017ab0:	687a      	ldr	r2, [r7, #4]
 8017ab2:	68b9      	ldr	r1, [r7, #8]
 8017ab4:	68f8      	ldr	r0, [r7, #12]
 8017ab6:	f000 f96f 	bl	8017d98 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8017aba:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8017abc:	697b      	ldr	r3, [r7, #20]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d101      	bne.n	8017ac6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	e017      	b.n	8017af6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8017ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017aca:	9300      	str	r3, [sp, #0]
 8017acc:	697b      	ldr	r3, [r7, #20]
 8017ace:	683a      	ldr	r2, [r7, #0]
 8017ad0:	68b9      	ldr	r1, [r7, #8]
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f000 f98a 	bl	8017dec <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017ad8:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8017ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017adc:	9302      	str	r3, [sp, #8]
 8017ade:	6a3b      	ldr	r3, [r7, #32]
 8017ae0:	9301      	str	r3, [sp, #4]
 8017ae2:	68bb      	ldr	r3, [r7, #8]
 8017ae4:	9300      	str	r3, [sp, #0]
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	697a      	ldr	r2, [r7, #20]
 8017aea:	6939      	ldr	r1, [r7, #16]
 8017aec:	68f8      	ldr	r0, [r7, #12]
 8017aee:	f7ff ff95 	bl	8017a1c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017af2:	693b      	ldr	r3, [r7, #16]
 8017af4:	689b      	ldr	r3, [r3, #8]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
	...

08017b00 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b084      	sub	sp, #16
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
 8017b08:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b10:	331c      	adds	r3, #28
 8017b12:	6839      	ldr	r1, [r7, #0]
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7ff fdf6 	bl	8017706 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8017b1a:	60f8      	str	r0, [r7, #12]
  if (node)
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d006      	beq.n	8017b30 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8017b22:	4b05      	ldr	r3, [pc, #20]	; (8017b38 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	68fa      	ldr	r2, [r7, #12]
 8017b28:	6812      	ldr	r2, [r2, #0]
 8017b2a:	21cd      	movs	r1, #205	; 0xcd
 8017b2c:	6838      	ldr	r0, [r7, #0]
 8017b2e:	4798      	blx	r3
#endif
}
 8017b30:	bf00      	nop
 8017b32:	3710      	adds	r7, #16
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	200000d8 	.word	0x200000d8

08017b3c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	b085      	sub	sp, #20
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017b46:	2300      	movs	r3, #0
 8017b48:	60fb      	str	r3, [r7, #12]
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	2b02      	cmp	r3, #2
 8017b4e:	d812      	bhi.n	8017b76 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8017b50:	68f9      	ldr	r1, [r7, #12]
 8017b52:	4b0c      	ldr	r3, [pc, #48]	; (8017b84 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8017b54:	fba3 2301 	umull	r2, r3, r3, r1
 8017b58:	085a      	lsrs	r2, r3, #1
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	005b      	lsls	r3, r3, #1
 8017b5e:	4413      	add	r3, r2
 8017b60:	1aca      	subs	r2, r1, r3
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	440b      	add	r3, r1
 8017b68:	4907      	ldr	r1, [pc, #28]	; (8017b88 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8017b6a:	5c8a      	ldrb	r2, [r1, r2]
 8017b6c:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	3301      	adds	r3, #1
 8017b72:	60fb      	str	r3, [r7, #12]
 8017b74:	e7e9      	b.n	8017b4a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8017b76:	bf00      	nop
 8017b78:	3714      	adds	r7, #20
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	aaaaaaab 	.word	0xaaaaaaab
 8017b88:	080299b8 	.word	0x080299b8

08017b8c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8017b8c:	b480      	push	{r7}
 8017b8e:	b085      	sub	sp, #20
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
 8017b94:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017b96:	2300      	movs	r3, #0
 8017b98:	60fb      	str	r3, [r7, #12]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	2b02      	cmp	r3, #2
 8017b9e:	d816      	bhi.n	8017bce <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8017ba0:	683a      	ldr	r2, [r7, #0]
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	4413      	add	r3, r2
 8017ba6:	7818      	ldrb	r0, [r3, #0]
 8017ba8:	68f9      	ldr	r1, [r7, #12]
 8017baa:	4b0c      	ldr	r3, [pc, #48]	; (8017bdc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8017bac:	fba3 2301 	umull	r2, r3, r3, r1
 8017bb0:	085a      	lsrs	r2, r3, #1
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	005b      	lsls	r3, r3, #1
 8017bb6:	4413      	add	r3, r2
 8017bb8:	1aca      	subs	r2, r1, r3
 8017bba:	4b09      	ldr	r3, [pc, #36]	; (8017be0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8017bbc:	5c9b      	ldrb	r3, [r3, r2]
 8017bbe:	4298      	cmp	r0, r3
 8017bc0:	d001      	beq.n	8017bc6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	e004      	b.n	8017bd0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	3301      	adds	r3, #1
 8017bca:	60fb      	str	r3, [r7, #12]
 8017bcc:	e7e5      	b.n	8017b9a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8017bce:	2301      	movs	r3, #1
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3714      	adds	r7, #20
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr
 8017bdc:	aaaaaaab 	.word	0xaaaaaaab
 8017be0:	080299b8 	.word	0x080299b8

08017be4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b084      	sub	sp, #16
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	60b9      	str	r1, [r7, #8]
 8017bee:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8017bf0:	68ba      	ldr	r2, [r7, #8]
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	429a      	cmp	r2, r3
 8017bf6:	d101      	bne.n	8017bfc <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e013      	b.n	8017c24 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	f083 0301 	eor.w	r3, r3, #1
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d001      	beq.n	8017c12 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8017c0e:	2301      	movs	r3, #1
 8017c10:	e008      	b.n	8017c24 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	331c      	adds	r3, #28
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	68b9      	ldr	r1, [r7, #8]
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	4798      	blx	r3
 8017c20:	4603      	mov	r3, r0
 8017c22:	bf00      	nop
}
 8017c24:	4618      	mov	r0, r3
 8017c26:	3710      	adds	r7, #16
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}

08017c2c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8017c2c:	b590      	push	{r4, r7, lr}
 8017c2e:	b087      	sub	sp, #28
 8017c30:	af02      	add	r7, sp, #8
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
 8017c38:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8017c3a:	68bb      	ldr	r3, [r7, #8]
 8017c3c:	695a      	ldr	r2, [r3, #20]
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	695b      	ldr	r3, [r3, #20]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	3328      	adds	r3, #40	; 0x28
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	4610      	mov	r0, r2
 8017c4a:	4798      	blx	r3
 8017c4c:	4604      	mov	r4, r0
 8017c4e:	6a3b      	ldr	r3, [r7, #32]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	3328      	adds	r3, #40	; 0x28
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	6a38      	ldr	r0, [r7, #32]
 8017c58:	4798      	blx	r3
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	461a      	mov	r2, r3
 8017c5e:	4621      	mov	r1, r4
 8017c60:	68f8      	ldr	r0, [r7, #12]
 8017c62:	f7ff ffbf 	bl	8017be4 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8017c66:	4603      	mov	r3, r0
 8017c68:	f083 0301 	eor.w	r3, r3, #1
 8017c6c:	b2db      	uxtb	r3, r3
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d014      	beq.n	8017c9c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	f103 040c 	add.w	r4, r3, #12
 8017c78:	6a3b      	ldr	r3, [r7, #32]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	3328      	adds	r3, #40	; 0x28
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	6a38      	ldr	r0, [r7, #32]
 8017c82:	4798      	blx	r3
 8017c84:	4602      	mov	r2, r0
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	685b      	ldr	r3, [r3, #4]
 8017c8a:	9301      	str	r3, [sp, #4]
 8017c8c:	9200      	str	r2, [sp, #0]
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	68b9      	ldr	r1, [r7, #8]
 8017c94:	4620      	mov	r0, r4
 8017c96:	f7ff fb4d 	bl	8017334 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8017c9a:	e02e      	b.n	8017cfa <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	689a      	ldr	r2, [r3, #8]
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	4413      	add	r3, r2
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	68f8      	ldr	r0, [r7, #12]
 8017caa:	f7ff ff6f 	bl	8017b8c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	f083 0301 	eor.w	r3, r3, #1
 8017cb4:	b2db      	uxtb	r3, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d014      	beq.n	8017ce4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	f103 040c 	add.w	r4, r3, #12
 8017cc0:	6a3b      	ldr	r3, [r7, #32]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	3328      	adds	r3, #40	; 0x28
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	6a38      	ldr	r0, [r7, #32]
 8017cca:	4798      	blx	r3
 8017ccc:	4602      	mov	r2, r0
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	685b      	ldr	r3, [r3, #4]
 8017cd2:	9301      	str	r3, [sp, #4]
 8017cd4:	9200      	str	r2, [sp, #0]
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	687a      	ldr	r2, [r7, #4]
 8017cda:	68b9      	ldr	r1, [r7, #8]
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f7ff fb4f 	bl	8017380 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8017ce2:	e00a      	b.n	8017cfa <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8017ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d006      	beq.n	8017cfa <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8017cec:	6a3b      	ldr	r3, [r7, #32]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	3324      	adds	r3, #36	; 0x24
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	68b9      	ldr	r1, [r7, #8]
 8017cf6:	6a38      	ldr	r0, [r7, #32]
 8017cf8:	4798      	blx	r3
}
 8017cfa:	bf00      	nop
 8017cfc:	3714      	adds	r7, #20
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd90      	pop	{r4, r7, pc}
	...

08017d04 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af02      	add	r7, sp, #8
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
 8017d10:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8017d12:	4b08      	ldr	r3, [pc, #32]	; (8017d34 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8017d14:	681a      	ldr	r2, [r3, #0]
 8017d16:	78fb      	ldrb	r3, [r7, #3]
 8017d18:	9301      	str	r3, [sp, #4]
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	9300      	str	r3, [sp, #0]
 8017d1e:	4613      	mov	r3, r2
 8017d20:	687a      	ldr	r2, [r7, #4]
 8017d22:	68b9      	ldr	r1, [r7, #8]
 8017d24:	68f8      	ldr	r0, [r7, #12]
 8017d26:	f000 f87f 	bl	8017e28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8017d2a:	4603      	mov	r3, r0
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	3710      	adds	r7, #16
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}
 8017d34:	20000100 	.word	0x20000100

08017d38 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017d38:	b590      	push	{r4, r7, lr}
 8017d3a:	b085      	sub	sp, #20
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	60f8      	str	r0, [r7, #12]
 8017d40:	60b9      	str	r1, [r7, #8]
 8017d42:	607a      	str	r2, [r7, #4]
 8017d44:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8017d46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d00e      	beq.n	8017d6c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	3308      	adds	r3, #8
 8017d54:	681c      	ldr	r4, [r3, #0]
 8017d56:	6879      	ldr	r1, [r7, #4]
 8017d58:	68f8      	ldr	r0, [r7, #12]
 8017d5a:	f7ff fe3f 	bl	80179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017d5e:	4601      	mov	r1, r0
 8017d60:	6a3b      	ldr	r3, [r7, #32]
 8017d62:	683a      	ldr	r2, [r7, #0]
 8017d64:	68b8      	ldr	r0, [r7, #8]
 8017d66:	47a0      	blx	r4
 8017d68:	4603      	mov	r3, r0
 8017d6a:	e010      	b.n	8017d8e <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	3308      	adds	r3, #8
 8017d72:	681c      	ldr	r4, [r3, #0]
 8017d74:	6879      	ldr	r1, [r7, #4]
 8017d76:	68f8      	ldr	r0, [r7, #12]
 8017d78:	f7ff fe30 	bl	80179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	f103 0120 	add.w	r1, r3, #32
 8017d82:	6a3b      	ldr	r3, [r7, #32]
 8017d84:	683a      	ldr	r2, [r7, #0]
 8017d86:	68b8      	ldr	r0, [r7, #8]
 8017d88:	47a0      	blx	r4
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	bf00      	nop
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3714      	adds	r7, #20
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd90      	pop	{r4, r7, pc}
	...

08017d98 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8017d98:	b590      	push	{r4, r7, lr}
 8017d9a:	b085      	sub	sp, #20
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	60b9      	str	r1, [r7, #8]
 8017da2:	607a      	str	r2, [r7, #4]
 8017da4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8017da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d00b      	beq.n	8017dc6 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8017dae:	4b0e      	ldr	r3, [pc, #56]	; (8017de8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017db0:	681c      	ldr	r4, [r3, #0]
 8017db2:	6839      	ldr	r1, [r7, #0]
 8017db4:	68f8      	ldr	r0, [r7, #12]
 8017db6:	f7ff fe11 	bl	80179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017dba:	4603      	mov	r3, r0
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	47a0      	blx	r4
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	e00c      	b.n	8017de0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8017dc6:	4b08      	ldr	r3, [pc, #32]	; (8017de8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8017dc8:	681c      	ldr	r4, [r3, #0]
 8017dca:	6839      	ldr	r1, [r7, #0]
 8017dcc:	68f8      	ldr	r0, [r7, #12]
 8017dce:	f7ff fe05 	bl	80179dc <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8017dd2:	4603      	mov	r3, r0
 8017dd4:	3320      	adds	r3, #32
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	47a0      	blx	r4
 8017ddc:	4603      	mov	r3, r0
 8017dde:	bf00      	nop
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	3714      	adds	r7, #20
 8017de4:	46bd      	mov	sp, r7
 8017de6:	bd90      	pop	{r4, r7, pc}
 8017de8:	200000cc 	.word	0x200000cc

08017dec <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b084      	sub	sp, #16
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	60f8      	str	r0, [r7, #12]
 8017df4:	60b9      	str	r1, [r7, #8]
 8017df6:	607a      	str	r2, [r7, #4]
 8017df8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8017dfa:	7e3b      	ldrb	r3, [r7, #24]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d008      	beq.n	8017e12 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	3320      	adds	r3, #32
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	2120      	movs	r1, #32
 8017e0a:	68b8      	ldr	r0, [r7, #8]
 8017e0c:	4798      	blx	r3
 8017e0e:	4603      	mov	r3, r0
 8017e10:	e006      	b.n	8017e20 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	6839      	ldr	r1, [r7, #0]
 8017e16:	68f8      	ldr	r0, [r7, #12]
 8017e18:	f7ff fdef 	bl	80179fa <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	bf00      	nop
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	3710      	adds	r7, #16
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b08a      	sub	sp, #40	; 0x28
 8017e2c:	af04      	add	r7, sp, #16
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
 8017e34:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8017e36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e3a:	9301      	str	r3, [sp, #4]
 8017e3c:	6a3b      	ldr	r3, [r7, #32]
 8017e3e:	9300      	str	r3, [sp, #0]
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	687a      	ldr	r2, [r7, #4]
 8017e44:	68b9      	ldr	r1, [r7, #8]
 8017e46:	68f8      	ldr	r0, [r7, #12]
 8017e48:	f7ff ff76 	bl	8017d38 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8017e4c:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8017e4e:	697b      	ldr	r3, [r7, #20]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d101      	bne.n	8017e58 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8017e54:	2300      	movs	r3, #0
 8017e56:	e017      	b.n	8017e88 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8017e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e5c:	9300      	str	r3, [sp, #0]
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	68b9      	ldr	r1, [r7, #8]
 8017e64:	68f8      	ldr	r0, [r7, #12]
 8017e66:	f7ff ffc1 	bl	8017dec <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8017e6a:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8017e6c:	6a3b      	ldr	r3, [r7, #32]
 8017e6e:	9302      	str	r3, [sp, #8]
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	9301      	str	r3, [sp, #4]
 8017e74:	68bb      	ldr	r3, [r7, #8]
 8017e76:	9300      	str	r3, [sp, #0]
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	697a      	ldr	r2, [r7, #20]
 8017e7c:	6939      	ldr	r1, [r7, #16]
 8017e7e:	68f8      	ldr	r0, [r7, #12]
 8017e80:	f7ff fdcc 	bl	8017a1c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8017e84:	693b      	ldr	r3, [r7, #16]
 8017e86:	689b      	ldr	r3, [r3, #8]
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3718      	adds	r7, #24
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017e90:	b590      	push	{r4, r7, lr}
 8017e92:	b089      	sub	sp, #36	; 0x24
 8017e94:	af02      	add	r7, sp, #8
 8017e96:	60f8      	str	r0, [r7, #12]
 8017e98:	60b9      	str	r1, [r7, #8]
 8017e9a:	607a      	str	r2, [r7, #4]
 8017e9c:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d03a      	beq.n	8017f1a <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017eaa:	331c      	adds	r3, #28
 8017eac:	6879      	ldr	r1, [r7, #4]
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f7ff fc13 	bl	80176da <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017eb4:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d10b      	bne.n	8017ed4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	f103 000c 	add.w	r0, r3, #12
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	9300      	str	r3, [sp, #0]
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ecc:	6839      	ldr	r1, [r7, #0]
 8017ece:	f7ff fa0d 	bl	80172ec <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8017ed2:	e023      	b.n	8017f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8017ed4:	68b8      	ldr	r0, [r7, #8]
 8017ed6:	f7f8 ff95 	bl	8010e04 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8017eda:	4603      	mov	r3, r0
 8017edc:	f083 0301 	eor.w	r3, r3, #1
 8017ee0:	b2db      	uxtb	r3, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d01a      	beq.n	8017f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017ef0:	9301      	str	r3, [sp, #4]
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef8:	683a      	ldr	r2, [r7, #0]
 8017efa:	6979      	ldr	r1, [r7, #20]
 8017efc:	68f8      	ldr	r0, [r7, #12]
 8017efe:	f7ff fe95 	bl	8017c2c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	330c      	adds	r3, #12
 8017f08:	681c      	ldr	r4, [r3, #0]
 8017f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	683b      	ldr	r3, [r7, #0]
 8017f10:	693a      	ldr	r2, [r7, #16]
 8017f12:	6879      	ldr	r1, [r7, #4]
 8017f14:	68b8      	ldr	r0, [r7, #8]
 8017f16:	47a0      	blx	r4
 8017f18:	e000      	b.n	8017f1c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8017f1a:	bf00      	nop
    }
}
 8017f1c:	371c      	adds	r7, #28
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd90      	pop	{r4, r7, pc}
	...

08017f24 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af02      	add	r7, sp, #8
 8017f2a:	60f8      	str	r0, [r7, #12]
 8017f2c:	60b9      	str	r1, [r7, #8]
 8017f2e:	607a      	str	r2, [r7, #4]
 8017f30:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8017f32:	4b08      	ldr	r3, [pc, #32]	; (8017f54 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8017f34:	681a      	ldr	r2, [r3, #0]
 8017f36:	78fb      	ldrb	r3, [r7, #3]
 8017f38:	9301      	str	r3, [sp, #4]
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	68b9      	ldr	r1, [r7, #8]
 8017f44:	68f8      	ldr	r0, [r7, #12]
 8017f46:	f7ff ffa3 	bl	8017e90 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8017f4a:	bf00      	nop
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	20000100 	.word	0x20000100

08017f58 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b08a      	sub	sp, #40	; 0x28
 8017f5c:	af04      	add	r7, sp, #16
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	607a      	str	r2, [r7, #4]
 8017f64:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d023      	beq.n	8017fb4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017f72:	331c      	adds	r3, #28
 8017f74:	6879      	ldr	r1, [r7, #4]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7ff fbaf 	bl	80176da <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8017f7c:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d10c      	bne.n	8017f9e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	f103 000c 	add.w	r0, r3, #12
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	9300      	str	r3, [sp, #0]
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f94:	6a39      	ldr	r1, [r7, #32]
 8017f96:	f7ff f9a9 	bl	80172ec <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	e019      	b.n	8017fd2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8017f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017fa2:	9301      	str	r3, [sp, #4]
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017faa:	6a3a      	ldr	r2, [r7, #32]
 8017fac:	6979      	ldr	r1, [r7, #20]
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f7ff fe3c 	bl	8017c2c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8017fb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017fb8:	9302      	str	r3, [sp, #8]
 8017fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fbc:	9301      	str	r3, [sp, #4]
 8017fbe:	6a3b      	ldr	r3, [r7, #32]
 8017fc0:	9300      	str	r3, [sp, #0]
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	687a      	ldr	r2, [r7, #4]
 8017fc6:	68b9      	ldr	r1, [r7, #8]
 8017fc8:	68f8      	ldr	r0, [r7, #12]
 8017fca:	f7ff fd62 	bl	8017a92 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	bf00      	nop
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3718      	adds	r7, #24
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}

08017fda <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b084      	sub	sp, #16
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	6078      	str	r0, [r7, #4]
 8017fe2:	460b      	mov	r3, r1
 8017fe4:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017fec:	331c      	adds	r3, #28
 8017fee:	78fa      	ldrb	r2, [r7, #3]
 8017ff0:	4611      	mov	r1, r2
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7ff fbc0 	bl	8017778 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8017ff8:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	330c      	adds	r3, #12
 8017ffe:	4618      	mov	r0, r3
 8018000:	f7ff f882 	bl	8017108 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d010      	beq.n	801802c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	330c      	adds	r3, #12
 801800e:	68f9      	ldr	r1, [r7, #12]
 8018010:	4618      	mov	r0, r3
 8018012:	f7ff f897 	bl	8017144 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801801c:	331c      	adds	r3, #28
 801801e:	78fa      	ldrb	r2, [r7, #3]
 8018020:	68f9      	ldr	r1, [r7, #12]
 8018022:	4618      	mov	r0, r3
 8018024:	f7ff fbcb 	bl	80177be <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018028:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801802a:	e7eb      	b.n	8018004 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	330c      	adds	r3, #12
 8018030:	4618      	mov	r0, r3
 8018032:	f7ff f8e7 	bl	8017204 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8018036:	bf00      	nop
 8018038:	3710      	adds	r7, #16
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}

0801803e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801803e:	b580      	push	{r7, lr}
 8018040:	b082      	sub	sp, #8
 8018042:	af00      	add	r7, sp, #0
 8018044:	6078      	str	r0, [r7, #4]
 8018046:	460b      	mov	r3, r1
 8018048:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801804a:	78fb      	ldrb	r3, [r7, #3]
 801804c:	4619      	mov	r1, r3
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f7ff ffc3 	bl	8017fda <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	330c      	adds	r3, #12
 8018058:	4618      	mov	r0, r3
 801805a:	f7ff f9e5 	bl	8017428 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801805e:	4603      	mov	r3, r0
}
 8018060:	4618      	mov	r0, r3
 8018062:	3708      	adds	r7, #8
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}

08018068 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b084      	sub	sp, #16
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018076:	331c      	adds	r3, #28
 8018078:	2103      	movs	r1, #3
 801807a:	4618      	mov	r0, r3
 801807c:	f7ff fb7c 	bl	8017778 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8018080:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d011      	beq.n	80180ac <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	7e1b      	ldrb	r3, [r3, #24]
 801808c:	2b03      	cmp	r3, #3
 801808e:	d102      	bne.n	8018096 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	2202      	movs	r2, #2
 8018094:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801809c:	331c      	adds	r3, #28
 801809e:	2203      	movs	r2, #3
 80180a0:	68f9      	ldr	r1, [r7, #12]
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7ff fb8b 	bl	80177be <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80180a8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80180aa:	e7ea      	b.n	8018082 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80180ac:	bf00      	nop
 80180ae:	3710      	adds	r7, #16
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}

080180b4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b082      	sub	sp, #8
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	460b      	mov	r3, r1
 80180be:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80180c6:	331c      	adds	r3, #28
 80180c8:	78fa      	ldrb	r2, [r7, #3]
 80180ca:	4611      	mov	r1, r2
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7ff fb30 	bl	8017732 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80180d2:	4603      	mov	r3, r0
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}

080180dc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	60f8      	str	r0, [r7, #12]
 80180e4:	60b9      	str	r1, [r7, #8]
 80180e6:	607a      	str	r2, [r7, #4]
 80180e8:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	68b9      	ldr	r1, [r7, #8]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7f5 fb13 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	3308      	adds	r3, #8
 80180f8:	6879      	ldr	r1, [r7, #4]
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7f5 fb0d 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	683a      	ldr	r2, [r7, #0]
 8018104:	611a      	str	r2, [r3, #16]
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	2200      	movs	r2, #0
 801810a:	615a      	str	r2, [r3, #20]
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	4618      	mov	r0, r3
 8018110:	3710      	adds	r7, #16
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}

08018116 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8018116:	b480      	push	{r7}
 8018118:	b083      	sub	sp, #12
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
 801811e:	6039      	str	r1, [r7, #0]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	4618      	mov	r0, r3
 8018124:	370c      	adds	r7, #12
 8018126:	46bd      	mov	sp, r7
 8018128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801812c:	4770      	bx	lr

0801812e <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 801812e:	b480      	push	{r7}
 8018130:	b083      	sub	sp, #12
 8018132:	af00      	add	r7, sp, #0
 8018134:	6078      	str	r0, [r7, #4]
 8018136:	6039      	str	r1, [r7, #0]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	4618      	mov	r0, r3
 801813c:	370c      	adds	r7, #12
 801813e:	46bd      	mov	sp, r7
 8018140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018144:	4770      	bx	lr

08018146 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8018146:	b480      	push	{r7}
 8018148:	b085      	sub	sp, #20
 801814a:	af00      	add	r7, sp, #0
 801814c:	60f8      	str	r0, [r7, #12]
 801814e:	60b9      	str	r1, [r7, #8]
 8018150:	4613      	mov	r3, r2
 8018152:	71fb      	strb	r3, [r7, #7]
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	4618      	mov	r0, r3
 8018158:	3714      	adds	r7, #20
 801815a:	46bd      	mov	sp, r7
 801815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018160:	4770      	bx	lr

08018162 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8018162:	b480      	push	{r7}
 8018164:	b085      	sub	sp, #20
 8018166:	af00      	add	r7, sp, #0
 8018168:	60f8      	str	r0, [r7, #12]
 801816a:	60b9      	str	r1, [r7, #8]
 801816c:	607a      	str	r2, [r7, #4]
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	4618      	mov	r0, r3
 8018172:	3714      	adds	r7, #20
 8018174:	46bd      	mov	sp, r7
 8018176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817a:	4770      	bx	lr

0801817c <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 801817c:	b480      	push	{r7}
 801817e:	b085      	sub	sp, #20
 8018180:	af00      	add	r7, sp, #0
 8018182:	60f8      	str	r0, [r7, #12]
 8018184:	60b9      	str	r1, [r7, #8]
 8018186:	607a      	str	r2, [r7, #4]
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	4618      	mov	r0, r3
 801818c:	3714      	adds	r7, #20
 801818e:	46bd      	mov	sp, r7
 8018190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018194:	4770      	bx	lr

08018196 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8018196:	b480      	push	{r7}
 8018198:	b085      	sub	sp, #20
 801819a:	af00      	add	r7, sp, #0
 801819c:	60f8      	str	r0, [r7, #12]
 801819e:	60b9      	str	r1, [r7, #8]
 80181a0:	607a      	str	r2, [r7, #4]
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	4618      	mov	r0, r3
 80181a6:	3714      	adds	r7, #20
 80181a8:	46bd      	mov	sp, r7
 80181aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ae:	4770      	bx	lr

080181b0 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80181b0:	b480      	push	{r7}
 80181b2:	b085      	sub	sp, #20
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	607a      	str	r2, [r7, #4]
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	4618      	mov	r0, r3
 80181c0:	3714      	adds	r7, #20
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr

080181ca <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80181ca:	b480      	push	{r7}
 80181cc:	b085      	sub	sp, #20
 80181ce:	af00      	add	r7, sp, #0
 80181d0:	60f8      	str	r0, [r7, #12]
 80181d2:	60b9      	str	r1, [r7, #8]
 80181d4:	4639      	mov	r1, r7
 80181d6:	e881 000c 	stmia.w	r1, {r2, r3}
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	4618      	mov	r0, r3
 80181de:	3714      	adds	r7, #20
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80181e8:	b480      	push	{r7}
 80181ea:	b085      	sub	sp, #20
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	4639      	mov	r1, r7
 80181f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	4618      	mov	r0, r3
 80181fc:	3714      	adds	r7, #20
 80181fe:	46bd      	mov	sp, r7
 8018200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018204:	4770      	bx	lr

08018206 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018206:	b480      	push	{r7}
 8018208:	b085      	sub	sp, #20
 801820a:	af00      	add	r7, sp, #0
 801820c:	60f8      	str	r0, [r7, #12]
 801820e:	60b9      	str	r1, [r7, #8]
 8018210:	ed87 0b00 	vstr	d0, [r7]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	4618      	mov	r0, r3
 8018218:	3714      	adds	r7, #20
 801821a:	46bd      	mov	sp, r7
 801821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018220:	4770      	bx	lr

08018222 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8018222:	b480      	push	{r7}
 8018224:	b085      	sub	sp, #20
 8018226:	af00      	add	r7, sp, #0
 8018228:	60f8      	str	r0, [r7, #12]
 801822a:	60b9      	str	r1, [r7, #8]
 801822c:	607a      	str	r2, [r7, #4]
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	4618      	mov	r0, r3
 8018232:	3714      	adds	r7, #20
 8018234:	46bd      	mov	sp, r7
 8018236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801823a:	4770      	bx	lr

0801823c <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801823c:	b480      	push	{r7}
 801823e:	b085      	sub	sp, #20
 8018240:	af00      	add	r7, sp, #0
 8018242:	60f8      	str	r0, [r7, #12]
 8018244:	60b9      	str	r1, [r7, #8]
 8018246:	607a      	str	r2, [r7, #4]
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	4618      	mov	r0, r3
 801824c:	3714      	adds	r7, #20
 801824e:	46bd      	mov	sp, r7
 8018250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018254:	4770      	bx	lr

08018256 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018256:	b480      	push	{r7}
 8018258:	b085      	sub	sp, #20
 801825a:	af00      	add	r7, sp, #0
 801825c:	60f8      	str	r0, [r7, #12]
 801825e:	60b9      	str	r1, [r7, #8]
 8018260:	607a      	str	r2, [r7, #4]
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	4618      	mov	r0, r3
 8018266:	3714      	adds	r7, #20
 8018268:	46bd      	mov	sp, r7
 801826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826e:	4770      	bx	lr

08018270 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8018270:	b480      	push	{r7}
 8018272:	b085      	sub	sp, #20
 8018274:	af00      	add	r7, sp, #0
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	607a      	str	r2, [r7, #4]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	4618      	mov	r0, r3
 8018280:	3714      	adds	r7, #20
 8018282:	46bd      	mov	sp, r7
 8018284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018288:	4770      	bx	lr

0801828a <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 801828a:	b480      	push	{r7}
 801828c:	b085      	sub	sp, #20
 801828e:	af00      	add	r7, sp, #0
 8018290:	60f8      	str	r0, [r7, #12]
 8018292:	60b9      	str	r1, [r7, #8]
 8018294:	607a      	str	r2, [r7, #4]
 8018296:	603b      	str	r3, [r7, #0]
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	4618      	mov	r0, r3
 801829c:	3714      	adds	r7, #20
 801829e:	46bd      	mov	sp, r7
 80182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a4:	4770      	bx	lr

080182a6 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80182a6:	b480      	push	{r7}
 80182a8:	b085      	sub	sp, #20
 80182aa:	af00      	add	r7, sp, #0
 80182ac:	60f8      	str	r0, [r7, #12]
 80182ae:	60b9      	str	r1, [r7, #8]
 80182b0:	607a      	str	r2, [r7, #4]
 80182b2:	603b      	str	r3, [r7, #0]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	4618      	mov	r0, r3
 80182b8:	3714      	adds	r7, #20
 80182ba:	46bd      	mov	sp, r7
 80182bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c0:	4770      	bx	lr

080182c2 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 80182c2:	b480      	push	{r7}
 80182c4:	b085      	sub	sp, #20
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	60f8      	str	r0, [r7, #12]
 80182ca:	60b9      	str	r1, [r7, #8]
 80182cc:	607a      	str	r2, [r7, #4]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	4618      	mov	r0, r3
 80182d2:	3714      	adds	r7, #20
 80182d4:	46bd      	mov	sp, r7
 80182d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182da:	4770      	bx	lr

080182dc <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 80182dc:	b480      	push	{r7}
 80182de:	b085      	sub	sp, #20
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
 80182e8:	603b      	str	r3, [r7, #0]
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	4618      	mov	r0, r3
 80182ee:	3714      	adds	r7, #20
 80182f0:	46bd      	mov	sp, r7
 80182f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f6:	4770      	bx	lr

080182f8 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 80182f8:	b480      	push	{r7}
 80182fa:	b083      	sub	sp, #12
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	2300      	movs	r3, #0
 8018302:	4618      	mov	r0, r3
 8018304:	370c      	adds	r7, #12
 8018306:	46bd      	mov	sp, r7
 8018308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801830c:	4770      	bx	lr
	...

08018310 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8018310:	b580      	push	{r7, lr}
 8018312:	b084      	sub	sp, #16
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	6039      	str	r1, [r7, #0]
 801831a:	f107 0308 	add.w	r3, r7, #8
 801831e:	4909      	ldr	r1, [pc, #36]	; (8018344 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8018320:	4618      	mov	r0, r3
 8018322:	f7f5 f9a6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8018326:	f107 0308 	add.w	r3, r7, #8
 801832a:	4619      	mov	r1, r3
 801832c:	6878      	ldr	r0, [r7, #4]
 801832e:	f005 fec5 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 8018332:	f107 0308 	add.w	r3, r7, #8
 8018336:	4618      	mov	r0, r3
 8018338:	f7f5 fd53 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	3710      	adds	r7, #16
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	08026cc8 	.word	0x08026cc8

08018348 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8018348:	b480      	push	{r7}
 801834a:	b083      	sub	sp, #12
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
 8018350:	460b      	mov	r3, r1
 8018352:	70fb      	strb	r3, [r7, #3]
 8018354:	78fb      	ldrb	r3, [r7, #3]
 8018356:	4618      	mov	r0, r3
 8018358:	370c      	adds	r7, #12
 801835a:	46bd      	mov	sp, r7
 801835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018360:	4770      	bx	lr

08018362 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8018362:	b480      	push	{r7}
 8018364:	b083      	sub	sp, #12
 8018366:	af00      	add	r7, sp, #0
 8018368:	6078      	str	r0, [r7, #4]
 801836a:	2300      	movs	r3, #0
 801836c:	4618      	mov	r0, r3
 801836e:	370c      	adds	r7, #12
 8018370:	46bd      	mov	sp, r7
 8018372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018376:	4770      	bx	lr

08018378 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8018378:	b480      	push	{r7}
 801837a:	b083      	sub	sp, #12
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
 8018380:	2300      	movs	r3, #0
 8018382:	4618      	mov	r0, r3
 8018384:	370c      	adds	r7, #12
 8018386:	46bd      	mov	sp, r7
 8018388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838c:	4770      	bx	lr

0801838e <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 801838e:	b480      	push	{r7}
 8018390:	b083      	sub	sp, #12
 8018392:	af00      	add	r7, sp, #0
 8018394:	6078      	str	r0, [r7, #4]
 8018396:	6039      	str	r1, [r7, #0]
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	4618      	mov	r0, r3
 801839c:	370c      	adds	r7, #12
 801839e:	46bd      	mov	sp, r7
 80183a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a4:	4770      	bx	lr

080183a6 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80183a6:	b480      	push	{r7}
 80183a8:	b083      	sub	sp, #12
 80183aa:	af00      	add	r7, sp, #0
 80183ac:	6078      	str	r0, [r7, #4]
 80183ae:	2300      	movs	r3, #0
 80183b0:	4618      	mov	r0, r3
 80183b2:	370c      	adds	r7, #12
 80183b4:	46bd      	mov	sp, r7
 80183b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ba:	4770      	bx	lr

080183bc <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80183bc:	b480      	push	{r7}
 80183be:	b083      	sub	sp, #12
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
 80183c4:	6039      	str	r1, [r7, #0]
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	4618      	mov	r0, r3
 80183ca:	370c      	adds	r7, #12
 80183cc:	46bd      	mov	sp, r7
 80183ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d2:	4770      	bx	lr

080183d4 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 80183d4:	b480      	push	{r7}
 80183d6:	b083      	sub	sp, #12
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	2300      	movs	r3, #0
 80183de:	4618      	mov	r0, r3
 80183e0:	370c      	adds	r7, #12
 80183e2:	46bd      	mov	sp, r7
 80183e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e8:	4770      	bx	lr

080183ea <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 80183ea:	b480      	push	{r7}
 80183ec:	b083      	sub	sp, #12
 80183ee:	af00      	add	r7, sp, #0
 80183f0:	6078      	str	r0, [r7, #4]
 80183f2:	6039      	str	r1, [r7, #0]
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	4618      	mov	r0, r3
 80183f8:	370c      	adds	r7, #12
 80183fa:	46bd      	mov	sp, r7
 80183fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018400:	4770      	bx	lr

08018402 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8018402:	b580      	push	{r7, lr}
 8018404:	b082      	sub	sp, #8
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
 801840a:	6039      	str	r1, [r7, #0]
 801840c:	2100      	movs	r1, #0
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f7f3 f972 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	3708      	adds	r7, #8
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 801841c:	b480      	push	{r7}
 801841e:	b085      	sub	sp, #20
 8018420:	af00      	add	r7, sp, #0
 8018422:	60f8      	str	r0, [r7, #12]
 8018424:	60b9      	str	r1, [r7, #8]
 8018426:	4639      	mov	r1, r7
 8018428:	e881 000c 	stmia.w	r1, {r2, r3}
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	461a      	mov	r2, r3
 8018430:	463b      	mov	r3, r7
 8018432:	cb03      	ldmia	r3!, {r0, r1}
 8018434:	6010      	str	r0, [r2, #0]
 8018436:	6051      	str	r1, [r2, #4]
 8018438:	68f8      	ldr	r0, [r7, #12]
 801843a:	3714      	adds	r7, #20
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr

08018444 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8018444:	b580      	push	{r7, lr}
 8018446:	b082      	sub	sp, #8
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
 801844c:	6039      	str	r1, [r7, #0]
 801844e:	2100      	movs	r1, #0
 8018450:	6878      	ldr	r0, [r7, #4]
 8018452:	f7f3 f945 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
 8018456:	6878      	ldr	r0, [r7, #4]
 8018458:	3708      	adds	r7, #8
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}

0801845e <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801845e:	b480      	push	{r7}
 8018460:	b085      	sub	sp, #20
 8018462:	af00      	add	r7, sp, #0
 8018464:	60f8      	str	r0, [r7, #12]
 8018466:	60b9      	str	r1, [r7, #8]
 8018468:	4639      	mov	r1, r7
 801846a:	e881 000c 	stmia.w	r1, {r2, r3}
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	461a      	mov	r2, r3
 8018472:	463b      	mov	r3, r7
 8018474:	cb03      	ldmia	r3!, {r0, r1}
 8018476:	6010      	str	r0, [r2, #0]
 8018478:	6051      	str	r1, [r2, #4]
 801847a:	68f8      	ldr	r0, [r7, #12]
 801847c:	3714      	adds	r7, #20
 801847e:	46bd      	mov	sp, r7
 8018480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018484:	4770      	bx	lr

08018486 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8018486:	b480      	push	{r7}
 8018488:	b083      	sub	sp, #12
 801848a:	af00      	add	r7, sp, #0
 801848c:	6078      	str	r0, [r7, #4]
 801848e:	2300      	movs	r3, #0
 8018490:	4618      	mov	r0, r3
 8018492:	370c      	adds	r7, #12
 8018494:	46bd      	mov	sp, r7
 8018496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849a:	4770      	bx	lr

0801849c <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 801849c:	b480      	push	{r7}
 801849e:	b083      	sub	sp, #12
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	6039      	str	r1, [r7, #0]
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	4618      	mov	r0, r3
 80184aa:	370c      	adds	r7, #12
 80184ac:	46bd      	mov	sp, r7
 80184ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b2:	4770      	bx	lr

080184b4 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
 80184bc:	f04f 0200 	mov.w	r2, #0
 80184c0:	f04f 0300 	mov.w	r3, #0
 80184c4:	ec43 2b17 	vmov	d7, r2, r3
 80184c8:	eeb0 0a47 	vmov.f32	s0, s14
 80184cc:	eef0 0a67 	vmov.f32	s1, s15
 80184d0:	370c      	adds	r7, #12
 80184d2:	46bd      	mov	sp, r7
 80184d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d8:	4770      	bx	lr

080184da <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 80184da:	b480      	push	{r7}
 80184dc:	b085      	sub	sp, #20
 80184de:	af00      	add	r7, sp, #0
 80184e0:	60f8      	str	r0, [r7, #12]
 80184e2:	ed87 0b00 	vstr	d0, [r7]
 80184e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80184ea:	ec43 2b17 	vmov	d7, r2, r3
 80184ee:	eeb0 0a47 	vmov.f32	s0, s14
 80184f2:	eef0 0a67 	vmov.f32	s1, s15
 80184f6:	3714      	adds	r7, #20
 80184f8:	46bd      	mov	sp, r7
 80184fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184fe:	4770      	bx	lr

08018500 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8018500:	b480      	push	{r7}
 8018502:	b083      	sub	sp, #12
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	4b03      	ldr	r3, [pc, #12]	; (8018518 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801850a:	4618      	mov	r0, r3
 801850c:	370c      	adds	r7, #12
 801850e:	46bd      	mov	sp, r7
 8018510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018514:	4770      	bx	lr
 8018516:	bf00      	nop
 8018518:	08026cc8 	.word	0x08026cc8

0801851c <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 801851c:	b480      	push	{r7}
 801851e:	b083      	sub	sp, #12
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	4618      	mov	r0, r3
 801852a:	370c      	adds	r7, #12
 801852c:	46bd      	mov	sp, r7
 801852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018532:	4770      	bx	lr

08018534 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8018534:	b480      	push	{r7}
 8018536:	b083      	sub	sp, #12
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	2300      	movs	r3, #0
 801853e:	4618      	mov	r0, r3
 8018540:	370c      	adds	r7, #12
 8018542:	46bd      	mov	sp, r7
 8018544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018548:	4770      	bx	lr

0801854a <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801854a:	b480      	push	{r7}
 801854c:	b083      	sub	sp, #12
 801854e:	af00      	add	r7, sp, #0
 8018550:	6078      	str	r0, [r7, #4]
 8018552:	6039      	str	r1, [r7, #0]
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	4618      	mov	r0, r3
 8018558:	370c      	adds	r7, #12
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr

08018562 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8018562:	b480      	push	{r7}
 8018564:	b083      	sub	sp, #12
 8018566:	af00      	add	r7, sp, #0
 8018568:	6078      	str	r0, [r7, #4]
 801856a:	2300      	movs	r3, #0
 801856c:	4618      	mov	r0, r3
 801856e:	370c      	adds	r7, #12
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr

08018578 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8018578:	b480      	push	{r7}
 801857a:	b083      	sub	sp, #12
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	4618      	mov	r0, r3
 8018586:	370c      	adds	r7, #12
 8018588:	46bd      	mov	sp, r7
 801858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858e:	4770      	bx	lr

08018590 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8018590:	b480      	push	{r7}
 8018592:	b083      	sub	sp, #12
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	2300      	movs	r3, #0
 801859a:	4618      	mov	r0, r3
 801859c:	370c      	adds	r7, #12
 801859e:	46bd      	mov	sp, r7
 80185a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a4:	4770      	bx	lr

080185a6 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80185a6:	b480      	push	{r7}
 80185a8:	b083      	sub	sp, #12
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	6078      	str	r0, [r7, #4]
 80185ae:	6039      	str	r1, [r7, #0]
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	4618      	mov	r0, r3
 80185b4:	370c      	adds	r7, #12
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr

080185be <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80185be:	b480      	push	{r7}
 80185c0:	b083      	sub	sp, #12
 80185c2:	af00      	add	r7, sp, #0
 80185c4:	6078      	str	r0, [r7, #4]
 80185c6:	6039      	str	r1, [r7, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	4618      	mov	r0, r3
 80185cc:	370c      	adds	r7, #12
 80185ce:	46bd      	mov	sp, r7
 80185d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d4:	4770      	bx	lr
	...

080185d8 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 80185d8:	b480      	push	{r7}
 80185da:	b083      	sub	sp, #12
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	4a04      	ldr	r2, [pc, #16]	; (80185f4 <_ZN14MockActualCallC1Ev+0x1c>)
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	601a      	str	r2, [r3, #0]
{
}
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	4618      	mov	r0, r3
 80185ea:	370c      	adds	r7, #12
 80185ec:	46bd      	mov	sp, r7
 80185ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f2:	4770      	bx	lr
 80185f4:	08029dbc 	.word	0x08029dbc

080185f8 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 80185f8:	b480      	push	{r7}
 80185fa:	b083      	sub	sp, #12
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	4a04      	ldr	r2, [pc, #16]	; (8018614 <_ZN14MockActualCallD1Ev+0x1c>)
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	601a      	str	r2, [r3, #0]
{
}
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	4618      	mov	r0, r3
 801860a:	370c      	adds	r7, #12
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr
 8018614:	08029dbc 	.word	0x08029dbc

08018618 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	3304      	adds	r3, #4
 8018626:	6839      	ldr	r1, [r7, #0]
 8018628:	4618      	mov	r0, r3
 801862a:	f7f5 f88e 	bl	800d74a <_ZN12SimpleStringaSERKS_>
}
 801862e:	bf00      	nop
 8018630:	3708      	adds	r7, #8
 8018632:	46bd      	mov	sp, r7
 8018634:	bd80      	pop	{r7, pc}

08018636 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8018636:	b580      	push	{r7, lr}
 8018638:	b082      	sub	sp, #8
 801863a:	af00      	add	r7, sp, #0
 801863c:	6078      	str	r0, [r7, #4]
 801863e:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	3304      	adds	r3, #4
 8018644:	4619      	mov	r1, r3
 8018646:	6878      	ldr	r0, [r7, #4]
 8018648:	f7f5 f867 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	3708      	adds	r7, #8
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}

08018654 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8018654:	b580      	push	{r7, lr}
 8018656:	b084      	sub	sp, #16
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	60b9      	str	r1, [r7, #8]
 801865e:	607a      	str	r2, [r7, #4]
 8018660:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	4618      	mov	r0, r3
 8018666:	f7ff ffb7 	bl	80185d8 <_ZN14MockActualCallC1Ev>
 801866a:	4a17      	ldr	r2, [pc, #92]	; (80186c8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	601a      	str	r2, [r3, #0]
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	3304      	adds	r3, #4
 8018674:	4915      	ldr	r1, [pc, #84]	; (80186cc <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8018676:	4618      	mov	r0, r3
 8018678:	f7f4 fffb 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	68ba      	ldr	r2, [r7, #8]
 8018680:	60da      	str	r2, [r3, #12]
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	611a      	str	r2, [r3, #16]
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	2202      	movs	r2, #2
 801868c:	751a      	strb	r2, [r3, #20]
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	2200      	movs	r2, #0
 8018692:	755a      	strb	r2, [r3, #21]
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2200      	movs	r2, #0
 8018698:	619a      	str	r2, [r3, #24]
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	331c      	adds	r3, #28
 801869e:	4618      	mov	r0, r3
 80186a0:	f004 f814 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	683a      	ldr	r2, [r7, #0]
 80186a8:	625a      	str	r2, [r3, #36]	; 0x24
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	2200      	movs	r2, #0
 80186ae:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	331c      	adds	r3, #28
 80186b4:	6839      	ldr	r1, [r7, #0]
 80186b6:	4618      	mov	r0, r3
 80186b8:	f004 f986 	bl	801c9c8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	4618      	mov	r0, r3
 80186c0:	3710      	adds	r7, #16
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bd80      	pop	{r7, pc}
 80186c6:	bf00      	nop
 80186c8:	08029cbc 	.word	0x08029cbc
 80186cc:	08026cc8 	.word	0x08026cc8

080186d0 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
 80186d8:	4a0c      	ldr	r2, [pc, #48]	; (801870c <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 80186de:	6878      	ldr	r0, [r7, #4]
 80186e0:	f001 fae4 	bl	8019cac <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	331c      	adds	r3, #28
 80186e8:	4618      	mov	r0, r3
 80186ea:	f004 f803 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	3304      	adds	r3, #4
 80186f2:	4618      	mov	r0, r3
 80186f4:	f7f5 fb75 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7ff ff7c 	bl	80185f8 <_ZN14MockActualCallD1Ev>
}
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	4618      	mov	r0, r3
 8018704:	3708      	adds	r7, #8
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	08029cbc 	.word	0x08029cbc

08018710 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
}
 8018718:	6878      	ldr	r0, [r7, #4]
 801871a:	f7ff ffd9 	bl	80186d0 <_ZN21MockCheckedActualCallD1Ev>
 801871e:	212c      	movs	r1, #44	; 0x2c
 8018720:	6878      	ldr	r0, [r7, #4]
 8018722:	f7f2 fbf7 	bl	800af14 <_ZdlPvj>
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	4618      	mov	r0, r3
 801872a:	3708      	adds	r7, #8
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8018730:	b480      	push	{r7}
 8018732:	b083      	sub	sp, #12
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	683a      	ldr	r2, [r7, #0]
 801873e:	611a      	str	r2, [r3, #16]
}
 8018740:	bf00      	nop
 8018742:	370c      	adds	r7, #12
 8018744:	46bd      	mov	sp, r7
 8018746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874a:	4770      	bx	lr

0801874c <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	691a      	ldr	r2, [r3, #16]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	691b      	ldr	r3, [r3, #16]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	330c      	adds	r3, #12
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	4610      	mov	r0, r2
 8018764:	4798      	blx	r3
 8018766:	4603      	mov	r3, r0
}
 8018768:	4618      	mov	r0, r3
 801876a:	3708      	adds	r7, #8
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b082      	sub	sp, #8
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
 8018778:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	33c0      	adds	r3, #192	; 0xc0
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	4798      	blx	r3
 8018786:	4603      	mov	r3, r0
 8018788:	f083 0301 	eor.w	r3, r3, #1
 801878c:	b2db      	uxtb	r3, r3
 801878e:	2b00      	cmp	r3, #0
 8018790:	d010      	beq.n	80187b4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	33ec      	adds	r3, #236	; 0xec
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2101      	movs	r1, #1
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	4798      	blx	r3
        reporter_->failTest(failure);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	691a      	ldr	r2, [r3, #16]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	691b      	ldr	r3, [r3, #16]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	3308      	adds	r3, #8
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	6839      	ldr	r1, [r7, #0]
 80187b0:	4610      	mov	r0, r2
 80187b2:	4798      	blx	r3
    }
}
 80187b4:	bf00      	nop
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80187bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c0:	b0bc      	sub	sp, #240	; 0xf0
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	6078      	str	r0, [r7, #4]
 80187c6:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80187d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	f000 80f5 	beq.w	80189c4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	339c      	adds	r3, #156	; 0x9c
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80187e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80187ea:	6839      	ldr	r1, [r7, #0]
 80187ec:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 80187ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187f2:	4618      	mov	r0, r3
 80187f4:	f006 fa6c 	bl	801ecd0 <_ZNK14MockNamedValue9getCopierEv>
 80187f8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 80187fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018800:	2b00      	cmp	r3, #0
 8018802:	d013      	beq.n	801882c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8018804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	3308      	adds	r3, #8
 801880c:	681c      	ldr	r4, [r3, #0]
 801880e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018812:	691d      	ldr	r5, [r3, #16]
 8018814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018818:	4618      	mov	r0, r3
 801881a:	f006 fa29 	bl	801ec70 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801881e:	4603      	mov	r3, r0
 8018820:	461a      	mov	r2, r3
 8018822:	4629      	mov	r1, r5
 8018824:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8018828:	47a0      	blx	r4
 801882a:	e0c0      	b.n	80189ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 801882c:	2500      	movs	r5, #0
 801882e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018832:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018836:	4611      	mov	r1, r2
 8018838:	4618      	mov	r0, r3
 801883a:	f005 ff0c 	bl	801e656 <_ZNK14MockNamedValue7getTypeEv>
 801883e:	2601      	movs	r6, #1
 8018840:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8018844:	4962      	ldr	r1, [pc, #392]	; (80189d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8018846:	4618      	mov	r0, r3
 8018848:	f7f4 ff13 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801884c:	f04f 0801 	mov.w	r8, #1
 8018850:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8018854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018858:	4611      	mov	r1, r2
 801885a:	4618      	mov	r0, r3
 801885c:	f7f5 facd 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8018860:	4603      	mov	r3, r0
 8018862:	2b00      	cmp	r3, #0
 8018864:	d015      	beq.n	8018892 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 8018866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801886a:	f103 0408 	add.w	r4, r3, #8
 801886e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018872:	4958      	ldr	r1, [pc, #352]	; (80189d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8018874:	4618      	mov	r0, r3
 8018876:	f7f4 fefc 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801887a:	2501      	movs	r5, #1
 801887c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018880:	4619      	mov	r1, r3
 8018882:	4620      	mov	r0, r4
 8018884:	f7f5 fab9 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8018888:	4603      	mov	r3, r0
 801888a:	2b00      	cmp	r3, #0
 801888c:	d001      	beq.n	8018892 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801888e:	2401      	movs	r4, #1
 8018890:	e000      	b.n	8018894 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 8018892:	2400      	movs	r4, #0
 8018894:	2d00      	cmp	r5, #0
 8018896:	d004      	beq.n	80188a2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 8018898:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801889c:	4618      	mov	r0, r3
 801889e:	f7f5 faa0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80188a2:	f1b8 0f00 	cmp.w	r8, #0
 80188a6:	d004      	beq.n	80188b2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80188a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7f5 fa98 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80188b2:	2e00      	cmp	r6, #0
 80188b4:	d004      	beq.n	80188c0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80188b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7f5 fa91 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 80188c0:	2c00      	cmp	r4, #0
 80188c2:	d018      	beq.n	80188f6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80188c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188c8:	4618      	mov	r0, r3
 80188ca:	f006 f959 	bl	801eb80 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80188ce:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80188d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80188d6:	4618      	mov	r0, r3
 80188d8:	f006 f9e2 	bl	801eca0 <_ZNK14MockNamedValue7getSizeEv>
 80188dc:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 80188e0:	4b3d      	ldr	r3, [pc, #244]	; (80189d8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80188e8:	6910      	ldr	r0, [r2, #16]
 80188ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80188ee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80188f2:	4798      	blx	r3
 80188f4:	e05b      	b.n	80189ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 80188f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80188fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80188fe:	4611      	mov	r1, r2
 8018900:	4618      	mov	r0, r3
 8018902:	f005 fe99 	bl	801e638 <_ZNK14MockNamedValue7getNameEv>
 8018906:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801890a:	4934      	ldr	r1, [pc, #208]	; (80189dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 801890c:	4618      	mov	r0, r3
 801890e:	f7f4 feb0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8018912:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8018916:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801891a:	4611      	mov	r1, r2
 801891c:	4618      	mov	r0, r3
 801891e:	f7f5 fab1 	bl	800de84 <_ZneRK12SimpleStringS1_>
 8018922:	4603      	mov	r3, r0
 8018924:	461c      	mov	r4, r3
 8018926:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801892a:	4618      	mov	r0, r3
 801892c:	f7f5 fa59 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8018930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018934:	4618      	mov	r0, r3
 8018936:	f7f5 fa54 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801893a:	2c00      	cmp	r4, #0
 801893c:	d037      	beq.n	80189ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	339c      	adds	r3, #156	; 0x9c
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801894a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801894e:	6839      	ldr	r1, [r7, #0]
 8018950:	4798      	blx	r3
 8018952:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018956:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801895a:	4611      	mov	r1, r2
 801895c:	4618      	mov	r0, r3
 801895e:	f005 fe7a 	bl	801e656 <_ZNK14MockNamedValue7getTypeEv>
 8018962:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8018966:	4618      	mov	r0, r3
 8018968:	f005 fbd2 	bl	801e110 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	33cc      	adds	r3, #204	; 0xcc
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	4798      	blx	r3
 8018978:	4601      	mov	r1, r0
 801897a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801897e:	f107 030c 	add.w	r3, r7, #12
 8018982:	4618      	mov	r0, r3
 8018984:	f005 faee 	bl	801df64 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	33dc      	adds	r3, #220	; 0xdc
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f107 020c 	add.w	r2, r7, #12
 8018994:	4611      	mov	r1, r2
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801899a:	f107 030c 	add.w	r3, r7, #12
 801899e:	4618      	mov	r0, r3
 80189a0:	f001 ffe2 	bl	801a968 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80189a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7f5 fa1a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80189ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80189b2:	4618      	mov	r0, r3
 80189b4:	f005 fbac 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80189b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80189bc:	695b      	ldr	r3, [r3, #20]
 80189be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80189c2:	e705      	b.n	80187d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80189c4:	bf00      	nop
 80189c6:	37f0      	adds	r7, #240	; 0xf0
 80189c8:	46bd      	mov	sp, r7
 80189ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189ce:	bf00      	nop
 80189d0:	08026ccc 	.word	0x08026ccc
 80189d4:	08026cd8 	.word	0x08026cd8
 80189d8:	200000d4 	.word	0x200000d4
 80189dc:	08026cc8 	.word	0x08026cc8

080189e0 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b084      	sub	sp, #16
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	331c      	adds	r3, #28
 80189ec:	4618      	mov	r0, r3
 80189ee:	f004 f9bb 	bl	801cd68 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 80189f2:	4602      	mov	r2, r0
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	699b      	ldr	r3, [r3, #24]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00f      	beq.n	8018a20 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	33d4      	adds	r3, #212	; 0xd4
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	6992      	ldr	r2, [r2, #24]
 8018a0c:	4611      	mov	r1, r2
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	4798      	blx	r3
        callHasSucceeded();
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	33d0      	adds	r3, #208	; 0xd0
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8018a1e:	e00f      	b.n	8018a40 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	331c      	adds	r3, #28
 8018a24:	4618      	mov	r0, r3
 8018a26:	f004 f9cc 	bl	801cdc2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8018a2a:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d006      	beq.n	8018a40 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	33d4      	adds	r3, #212	; 0xd4
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	68f9      	ldr	r1, [r7, #12]
 8018a3c:	6878      	ldr	r0, [r7, #4]
 8018a3e:	4798      	blx	r3
}
 8018a40:	bf00      	nop
 8018a42:	3710      	adds	r7, #16
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}

08018a48 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	b082      	sub	sp, #8
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	33ec      	adds	r3, #236	; 0xec
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	2102      	movs	r1, #2
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	4798      	blx	r3
}
 8018a5e:	bf00      	nop
 8018a60:	3708      	adds	r7, #8
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}

08018a66 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8018a66:	b580      	push	{r7, lr}
 8018a68:	b082      	sub	sp, #8
 8018a6a:	af00      	add	r7, sp, #0
 8018a6c:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	699b      	ldr	r3, [r3, #24]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d00b      	beq.n	8018a8e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	699a      	ldr	r2, [r3, #24]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	699b      	ldr	r3, [r3, #24]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	33ec      	adds	r3, #236	; 0xec
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	4610      	mov	r0, r2
 8018a86:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	331c      	adds	r3, #28
 8018a92:	4618      	mov	r0, r3
 8018a94:	f004 f85c 	bl	801cb50 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8018a98:	bf00      	nop
 8018a9a:	3708      	adds	r7, #8
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}

08018aa0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8018aa0:	b590      	push	{r4, r7, lr}
 8018aa2:	b091      	sub	sp, #68	; 0x44
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
 8018aa8:	6039      	str	r1, [r7, #0]
    setName(name);
 8018aaa:	6839      	ldr	r1, [r7, #0]
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f7ff fdb3 	bl	8018618 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	33ec      	adds	r3, #236	; 0xec
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	2100      	movs	r1, #0
 8018abc:	6878      	ldr	r0, [r7, #4]
 8018abe:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	331c      	adds	r3, #28
 8018ac4:	6839      	ldr	r1, [r7, #0]
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f003 ffec 	bl	801caa4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	331c      	adds	r3, #28
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f003 fe7c 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d01d      	beq.n	8018b18 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	33cc      	adds	r3, #204	; 0xcc
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	6878      	ldr	r0, [r7, #4]
 8018ae6:	4798      	blx	r3
 8018ae8:	4601      	mov	r1, r0
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aee:	f107 000c 	add.w	r0, r7, #12
 8018af2:	683a      	ldr	r2, [r7, #0]
 8018af4:	f004 fe24 	bl	801d740 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	33dc      	adds	r3, #220	; 0xdc
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	f107 020c 	add.w	r2, r7, #12
 8018b04:	4611      	mov	r1, r2
 8018b06:	6878      	ldr	r0, [r7, #4]
 8018b08:	4798      	blx	r3
        return *this;
 8018b0a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8018b0c:	f107 030c 	add.w	r3, r7, #12
 8018b10:	4618      	mov	r0, r3
 8018b12:	f001 ff4b 	bl	801a9ac <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018b16:	e006      	b.n	8018b26 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	33d8      	adds	r3, #216	; 0xd8
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	4798      	blx	r3

    return *this;
 8018b24:	687c      	ldr	r4, [r7, #4]
 8018b26:	4623      	mov	r3, r4
}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3744      	adds	r7, #68	; 0x44
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd90      	pop	{r4, r7, pc}

08018b30 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8018b30:	b480      	push	{r7}
 8018b32:	b083      	sub	sp, #12
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
    return *this;
 8018b3a:	687b      	ldr	r3, [r7, #4]
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	370c      	adds	r7, #12
 8018b40:	46bd      	mov	sp, r7
 8018b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b46:	4770      	bx	lr

08018b48 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8018b48:	b590      	push	{r4, r7, lr}
 8018b4a:	b097      	sub	sp, #92	; 0x5c
 8018b4c:	af02      	add	r7, sp, #8
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	33c0      	adds	r3, #192	; 0xc0
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	4798      	blx	r3
 8018b5e:	4603      	mov	r3, r0
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d164      	bne.n	8018c2e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	33ec      	adds	r3, #236	; 0xec
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2100      	movs	r1, #0
 8018b6e:	6878      	ldr	r0, [r7, #4]
 8018b70:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	33e8      	adds	r3, #232	; 0xe8
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	331c      	adds	r3, #28
 8018b82:	6839      	ldr	r1, [r7, #0]
 8018b84:	4618      	mov	r0, r3
 8018b86:	f004 f86b 	bl	801cc60 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	331c      	adds	r3, #28
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f003 fe1d 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018b94:	4603      	mov	r3, r0
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d02b      	beq.n	8018bf2 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	33cc      	adds	r3, #204	; 0xcc
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	6878      	ldr	r0, [r7, #4]
 8018ba4:	4798      	blx	r3
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018bac:	6879      	ldr	r1, [r7, #4]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7ff fd41 	bl	8018636 <_ZNK21MockCheckedActualCall7getNameEv>
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018bbc:	f107 000c 	add.w	r0, r7, #12
 8018bc0:	9300      	str	r3, [sp, #0]
 8018bc2:	683b      	ldr	r3, [r7, #0]
 8018bc4:	4621      	mov	r1, r4
 8018bc6:	f004 fe7f 	bl	801d8c8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8018bca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7f5 f907 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	33dc      	adds	r3, #220	; 0xdc
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f107 020c 	add.w	r2, r7, #12
 8018be0:	4611      	mov	r1, r2
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8018be6:	f107 030c 	add.w	r3, r7, #12
 8018bea:	4618      	mov	r0, r3
 8018bec:	f001 ff00 	bl	801a9f0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8018bf0:	e01e      	b.n	8018c30 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	f103 041c 	add.w	r4, r3, #28
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	335c      	adds	r3, #92	; 0x5c
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018c04:	6839      	ldr	r1, [r7, #0]
 8018c06:	4610      	mov	r0, r2
 8018c08:	4798      	blx	r3
 8018c0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018c0e:	4619      	mov	r1, r3
 8018c10:	4620      	mov	r0, r4
 8018c12:	f004 f9b8 	bl	801cf86 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8018c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7f5 f8e1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	33d8      	adds	r3, #216	; 0xd8
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	4798      	blx	r3
 8018c2c:	e000      	b.n	8018c30 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8018c2e:	bf00      	nop
}
 8018c30:	3754      	adds	r7, #84	; 0x54
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd90      	pop	{r4, r7, pc}

08018c36 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8018c36:	b590      	push	{r4, r7, lr}
 8018c38:	b097      	sub	sp, #92	; 0x5c
 8018c3a:	af02      	add	r7, sp, #8
 8018c3c:	6078      	str	r0, [r7, #4]
 8018c3e:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	33c0      	adds	r3, #192	; 0xc0
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	6878      	ldr	r0, [r7, #4]
 8018c4a:	4798      	blx	r3
 8018c4c:	4603      	mov	r3, r0
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d164      	bne.n	8018d1c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	33ec      	adds	r3, #236	; 0xec
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	2100      	movs	r1, #0
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	33e8      	adds	r3, #232	; 0xe8
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	331c      	adds	r3, #28
 8018c70:	6839      	ldr	r1, [r7, #0]
 8018c72:	4618      	mov	r0, r3
 8018c74:	f004 f820 	bl	801ccb8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	331c      	adds	r3, #28
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f003 fda6 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 8018c82:	4603      	mov	r3, r0
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d02b      	beq.n	8018ce0 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	33cc      	adds	r3, #204	; 0xcc
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	6878      	ldr	r0, [r7, #4]
 8018c92:	4798      	blx	r3
 8018c94:	4604      	mov	r4, r0
 8018c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018c9a:	6879      	ldr	r1, [r7, #4]
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7ff fcca 	bl	8018636 <_ZNK21MockCheckedActualCall7getNameEv>
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ca6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8018caa:	f107 000c 	add.w	r0, r7, #12
 8018cae:	9300      	str	r3, [sp, #0]
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	4621      	mov	r1, r4
 8018cb4:	f004 ff6a 	bl	801db8c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8018cb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7f5 f890 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	33dc      	adds	r3, #220	; 0xdc
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	f107 020c 	add.w	r2, r7, #12
 8018cce:	4611      	mov	r1, r2
 8018cd0:	6878      	ldr	r0, [r7, #4]
 8018cd2:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8018cd4:	f107 030c 	add.w	r3, r7, #12
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f001 feab 	bl	801aa34 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8018cde:	e01e      	b.n	8018d1e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f103 041c 	add.w	r4, r3, #28
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	335c      	adds	r3, #92	; 0x5c
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8018cf2:	6839      	ldr	r1, [r7, #0]
 8018cf4:	4610      	mov	r0, r2
 8018cf6:	4798      	blx	r3
 8018cf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018cfc:	4619      	mov	r1, r3
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f004 f95e 	bl	801cfc0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8018d04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7f5 f86a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	33d8      	adds	r3, #216	; 0xd8
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	4798      	blx	r3
 8018d1a:	e000      	b.n	8018d1e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8018d1c:	bf00      	nop
}
 8018d1e:	3754      	adds	r7, #84	; 0x54
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd90      	pop	{r4, r7, pc}

08018d24 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8018d24:	b590      	push	{r4, r7, lr}
 8018d26:	b093      	sub	sp, #76	; 0x4c
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	60f8      	str	r0, [r7, #12]
 8018d2c:	60b9      	str	r1, [r7, #8]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8018d32:	f107 0310 	add.w	r3, r7, #16
 8018d36:	68b9      	ldr	r1, [r7, #8]
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f005 f9bf 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018d3e:	79fa      	ldrb	r2, [r7, #7]
 8018d40:	f107 0310 	add.w	r3, r7, #16
 8018d44:	4611      	mov	r1, r2
 8018d46:	4618      	mov	r0, r3
 8018d48:	f005 fa0a 	bl	801e160 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	33e0      	adds	r3, #224	; 0xe0
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f107 0210 	add.w	r2, r7, #16
 8018d58:	4611      	mov	r1, r2
 8018d5a:	68f8      	ldr	r0, [r7, #12]
 8018d5c:	4798      	blx	r3
    return *this;
 8018d5e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018d60:	f107 0310 	add.w	r3, r7, #16
 8018d64:	4618      	mov	r0, r3
 8018d66:	f005 f9d3 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018d6a:	4623      	mov	r3, r4
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	374c      	adds	r7, #76	; 0x4c
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd90      	pop	{r4, r7, pc}

08018d74 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8018d74:	b590      	push	{r4, r7, lr}
 8018d76:	b093      	sub	sp, #76	; 0x4c
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60f8      	str	r0, [r7, #12]
 8018d7c:	60b9      	str	r1, [r7, #8]
 8018d7e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018d80:	f107 0310 	add.w	r3, r7, #16
 8018d84:	68b9      	ldr	r1, [r7, #8]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f005 f998 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018d8c:	f107 0310 	add.w	r3, r7, #16
 8018d90:	6879      	ldr	r1, [r7, #4]
 8018d92:	4618      	mov	r0, r3
 8018d94:	f005 fa08 	bl	801e1a8 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	33e0      	adds	r3, #224	; 0xe0
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	f107 0210 	add.w	r2, r7, #16
 8018da4:	4611      	mov	r1, r2
 8018da6:	68f8      	ldr	r0, [r7, #12]
 8018da8:	4798      	blx	r3
    return *this;
 8018daa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018dac:	f107 0310 	add.w	r3, r7, #16
 8018db0:	4618      	mov	r0, r3
 8018db2:	f005 f9ad 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018db6:	4623      	mov	r3, r4
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	374c      	adds	r7, #76	; 0x4c
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd90      	pop	{r4, r7, pc}

08018dc0 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8018dc0:	b590      	push	{r4, r7, lr}
 8018dc2:	b093      	sub	sp, #76	; 0x4c
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018dcc:	f107 0310 	add.w	r3, r7, #16
 8018dd0:	68b9      	ldr	r1, [r7, #8]
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f005 f972 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018dd8:	f107 0310 	add.w	r3, r7, #16
 8018ddc:	6879      	ldr	r1, [r7, #4]
 8018dde:	4618      	mov	r0, r3
 8018de0:	f005 fa04 	bl	801e1ec <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	33e0      	adds	r3, #224	; 0xe0
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	f107 0210 	add.w	r2, r7, #16
 8018df0:	4611      	mov	r1, r2
 8018df2:	68f8      	ldr	r0, [r7, #12]
 8018df4:	4798      	blx	r3
    return *this;
 8018df6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018df8:	f107 0310 	add.w	r3, r7, #16
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	f005 f987 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018e02:	4623      	mov	r3, r4
}
 8018e04:	4618      	mov	r0, r3
 8018e06:	374c      	adds	r7, #76	; 0x4c
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd90      	pop	{r4, r7, pc}

08018e0c <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018e0c:	b590      	push	{r4, r7, lr}
 8018e0e:	b093      	sub	sp, #76	; 0x4c
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	60f8      	str	r0, [r7, #12]
 8018e14:	60b9      	str	r1, [r7, #8]
 8018e16:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018e18:	f107 0310 	add.w	r3, r7, #16
 8018e1c:	68b9      	ldr	r1, [r7, #8]
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f005 f94c 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018e24:	f107 0310 	add.w	r3, r7, #16
 8018e28:	6879      	ldr	r1, [r7, #4]
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f005 fa22 	bl	801e274 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	33e0      	adds	r3, #224	; 0xe0
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	f107 0210 	add.w	r2, r7, #16
 8018e3c:	4611      	mov	r1, r2
 8018e3e:	68f8      	ldr	r0, [r7, #12]
 8018e40:	4798      	blx	r3
    return *this;
 8018e42:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018e44:	f107 0310 	add.w	r3, r7, #16
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f005 f961 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018e4e:	4623      	mov	r3, r4
}
 8018e50:	4618      	mov	r0, r3
 8018e52:	374c      	adds	r7, #76	; 0x4c
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bd90      	pop	{r4, r7, pc}

08018e58 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8018e58:	b590      	push	{r4, r7, lr}
 8018e5a:	b093      	sub	sp, #76	; 0x4c
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	60f8      	str	r0, [r7, #12]
 8018e60:	60b9      	str	r1, [r7, #8]
 8018e62:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018e64:	f107 0310 	add.w	r3, r7, #16
 8018e68:	68b9      	ldr	r1, [r7, #8]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f005 f926 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018e70:	f107 0310 	add.w	r3, r7, #16
 8018e74:	6879      	ldr	r1, [r7, #4]
 8018e76:	4618      	mov	r0, r3
 8018e78:	f005 f9da 	bl	801e230 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	33e0      	adds	r3, #224	; 0xe0
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	f107 0210 	add.w	r2, r7, #16
 8018e88:	4611      	mov	r1, r2
 8018e8a:	68f8      	ldr	r0, [r7, #12]
 8018e8c:	4798      	blx	r3
    return *this;
 8018e8e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018e90:	f107 0310 	add.w	r3, r7, #16
 8018e94:	4618      	mov	r0, r3
 8018e96:	f005 f93b 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018e9a:	4623      	mov	r3, r4
}
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	374c      	adds	r7, #76	; 0x4c
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd90      	pop	{r4, r7, pc}

08018ea4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8018ea4:	b5b0      	push	{r4, r5, r7, lr}
 8018ea6:	b086      	sub	sp, #24
 8018ea8:	af02      	add	r7, sp, #8
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	4639      	mov	r1, r7
 8018eb0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8018eb4:	f7fb ffc0 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8018eb8:	4604      	mov	r4, r0
 8018eba:	6823      	ldr	r3, [r4, #0]
 8018ebc:	3368      	adds	r3, #104	; 0x68
 8018ebe:	681d      	ldr	r5, [r3, #0]
 8018ec0:	f7fb ffca 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	9300      	str	r3, [sp, #0]
 8018ec8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8018ecc:	4a04      	ldr	r2, [pc, #16]	; (8018ee0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018ece:	4905      	ldr	r1, [pc, #20]	; (8018ee4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	47a8      	blx	r5
    return *this;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3710      	adds	r7, #16
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bdb0      	pop	{r4, r5, r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	08026ce0 	.word	0x08026ce0
 8018ee4:	08026cfc 	.word	0x08026cfc

08018ee8 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8018ee8:	b5b0      	push	{r4, r5, r7, lr}
 8018eea:	b086      	sub	sp, #24
 8018eec:	af02      	add	r7, sp, #8
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	4639      	mov	r1, r7
 8018ef4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018ef8:	f7fb ff9e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8018efc:	4604      	mov	r4, r0
 8018efe:	6823      	ldr	r3, [r4, #0]
 8018f00:	3368      	adds	r3, #104	; 0x68
 8018f02:	681d      	ldr	r5, [r3, #0]
 8018f04:	f7fb ffa8 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	9300      	str	r3, [sp, #0]
 8018f0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8018f10:	4a04      	ldr	r2, [pc, #16]	; (8018f24 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8018f12:	4905      	ldr	r1, [pc, #20]	; (8018f28 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8018f14:	4620      	mov	r0, r4
 8018f16:	47a8      	blx	r5
    return *this;
 8018f18:	68fb      	ldr	r3, [r7, #12]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3710      	adds	r7, #16
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bdb0      	pop	{r4, r5, r7, pc}
 8018f22:	bf00      	nop
 8018f24:	08026ce0 	.word	0x08026ce0
 8018f28:	08026d28 	.word	0x08026d28

08018f2c <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8018f2c:	b590      	push	{r4, r7, lr}
 8018f2e:	b093      	sub	sp, #76	; 0x4c
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	60b9      	str	r1, [r7, #8]
 8018f36:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8018f3a:	f107 0310 	add.w	r3, r7, #16
 8018f3e:	68b9      	ldr	r1, [r7, #8]
 8018f40:	4618      	mov	r0, r3
 8018f42:	f005 f8bb 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018f46:	f107 0310 	add.w	r3, r7, #16
 8018f4a:	ed97 0b00 	vldr	d0, [r7]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f005 f9ee 	bl	801e330 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	33e0      	adds	r3, #224	; 0xe0
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	f107 0210 	add.w	r2, r7, #16
 8018f60:	4611      	mov	r1, r2
 8018f62:	68f8      	ldr	r0, [r7, #12]
 8018f64:	4798      	blx	r3
    return *this;
 8018f66:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018f68:	f107 0310 	add.w	r3, r7, #16
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f005 f8cf 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018f72:	4623      	mov	r3, r4
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	374c      	adds	r7, #76	; 0x4c
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd90      	pop	{r4, r7, pc}

08018f7c <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8018f7c:	b590      	push	{r4, r7, lr}
 8018f7e:	b093      	sub	sp, #76	; 0x4c
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	60f8      	str	r0, [r7, #12]
 8018f84:	60b9      	str	r1, [r7, #8]
 8018f86:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018f88:	f107 0310 	add.w	r3, r7, #16
 8018f8c:	68b9      	ldr	r1, [r7, #8]
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f005 f894 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018f94:	f107 0310 	add.w	r3, r7, #16
 8018f98:	6879      	ldr	r1, [r7, #4]
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f005 fa72 	bl	801e484 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	33e0      	adds	r3, #224	; 0xe0
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	f107 0210 	add.w	r2, r7, #16
 8018fac:	4611      	mov	r1, r2
 8018fae:	68f8      	ldr	r0, [r7, #12]
 8018fb0:	4798      	blx	r3
    return *this;
 8018fb2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8018fb4:	f107 0310 	add.w	r3, r7, #16
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f005 f8a9 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8018fbe:	4623      	mov	r3, r4
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	374c      	adds	r7, #76	; 0x4c
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd90      	pop	{r4, r7, pc}

08018fc8 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8018fc8:	b590      	push	{r4, r7, lr}
 8018fca:	b093      	sub	sp, #76	; 0x4c
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8018fd4:	f107 0310 	add.w	r3, r7, #16
 8018fd8:	68b9      	ldr	r1, [r7, #8]
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f005 f86e 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8018fe0:	f107 0310 	add.w	r3, r7, #16
 8018fe4:	6879      	ldr	r1, [r7, #4]
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f005 f9e6 	bl	801e3b8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	33e0      	adds	r3, #224	; 0xe0
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	f107 0210 	add.w	r2, r7, #16
 8018ff8:	4611      	mov	r1, r2
 8018ffa:	68f8      	ldr	r0, [r7, #12]
 8018ffc:	4798      	blx	r3
    return *this;
 8018ffe:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019000:	f107 0310 	add.w	r3, r7, #16
 8019004:	4618      	mov	r0, r3
 8019006:	f005 f883 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 801900a:	4623      	mov	r3, r4
}
 801900c:	4618      	mov	r0, r3
 801900e:	374c      	adds	r7, #76	; 0x4c
 8019010:	46bd      	mov	sp, r7
 8019012:	bd90      	pop	{r4, r7, pc}

08019014 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019014:	b590      	push	{r4, r7, lr}
 8019016:	b093      	sub	sp, #76	; 0x4c
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019020:	f107 0310 	add.w	r3, r7, #16
 8019024:	68b9      	ldr	r1, [r7, #8]
 8019026:	4618      	mov	r0, r3
 8019028:	f005 f848 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801902c:	f107 0310 	add.w	r3, r7, #16
 8019030:	6879      	ldr	r1, [r7, #4]
 8019032:	4618      	mov	r0, r3
 8019034:	f005 f9e2 	bl	801e3fc <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8019038:	68fb      	ldr	r3, [r7, #12]
 801903a:	681b      	ldr	r3, [r3, #0]
 801903c:	33e0      	adds	r3, #224	; 0xe0
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	f107 0210 	add.w	r2, r7, #16
 8019044:	4611      	mov	r1, r2
 8019046:	68f8      	ldr	r0, [r7, #12]
 8019048:	4798      	blx	r3
    return *this;
 801904a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801904c:	f107 0310 	add.w	r3, r7, #16
 8019050:	4618      	mov	r0, r3
 8019052:	f005 f85d 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019056:	4623      	mov	r3, r4
}
 8019058:	4618      	mov	r0, r3
 801905a:	374c      	adds	r7, #76	; 0x4c
 801905c:	46bd      	mov	sp, r7
 801905e:	bd90      	pop	{r4, r7, pc}

08019060 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019060:	b590      	push	{r4, r7, lr}
 8019062:	b093      	sub	sp, #76	; 0x4c
 8019064:	af00      	add	r7, sp, #0
 8019066:	60f8      	str	r0, [r7, #12]
 8019068:	60b9      	str	r1, [r7, #8]
 801906a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801906c:	f107 0310 	add.w	r3, r7, #16
 8019070:	68b9      	ldr	r1, [r7, #8]
 8019072:	4618      	mov	r0, r3
 8019074:	f005 f822 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019078:	f107 0310 	add.w	r3, r7, #16
 801907c:	6879      	ldr	r1, [r7, #4]
 801907e:	4618      	mov	r0, r3
 8019080:	f005 f9de 	bl	801e440 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	33e0      	adds	r3, #224	; 0xe0
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	f107 0210 	add.w	r2, r7, #16
 8019090:	4611      	mov	r1, r2
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	4798      	blx	r3
    return *this;
 8019096:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019098:	f107 0310 	add.w	r3, r7, #16
 801909c:	4618      	mov	r0, r3
 801909e:	f005 f837 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 80190a2:	4623      	mov	r3, r4
}
 80190a4:	4618      	mov	r0, r3
 80190a6:	374c      	adds	r7, #76	; 0x4c
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd90      	pop	{r4, r7, pc}

080190ac <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80190ac:	b590      	push	{r4, r7, lr}
 80190ae:	b093      	sub	sp, #76	; 0x4c
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	60f8      	str	r0, [r7, #12]
 80190b4:	60b9      	str	r1, [r7, #8]
 80190b6:	607a      	str	r2, [r7, #4]
 80190b8:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80190ba:	f107 0310 	add.w	r3, r7, #16
 80190be:	68b9      	ldr	r1, [r7, #8]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f004 fffb 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80190c6:	f107 0310 	add.w	r3, r7, #16
 80190ca:	683a      	ldr	r2, [r7, #0]
 80190cc:	6879      	ldr	r1, [r7, #4]
 80190ce:	4618      	mov	r0, r3
 80190d0:	f005 f9fa 	bl	801e4c8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	33e0      	adds	r3, #224	; 0xe0
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	f107 0210 	add.w	r2, r7, #16
 80190e0:	4611      	mov	r1, r2
 80190e2:	68f8      	ldr	r0, [r7, #12]
 80190e4:	4798      	blx	r3
    return *this;
 80190e6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80190e8:	f107 0310 	add.w	r3, r7, #16
 80190ec:	4618      	mov	r0, r3
 80190ee:	f005 f80f 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 80190f2:	4623      	mov	r3, r4
}
 80190f4:	4618      	mov	r0, r3
 80190f6:	374c      	adds	r7, #76	; 0x4c
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd90      	pop	{r4, r7, pc}

080190fc <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80190fc:	b590      	push	{r4, r7, lr}
 80190fe:	b0a1      	sub	sp, #132	; 0x84
 8019100:	af00      	add	r7, sp, #0
 8019102:	60f8      	str	r0, [r7, #12]
 8019104:	60b9      	str	r1, [r7, #8]
 8019106:	607a      	str	r2, [r7, #4]
 8019108:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801910a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801910e:	6879      	ldr	r1, [r7, #4]
 8019110:	4618      	mov	r0, r3
 8019112:	f004 ffd3 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8019116:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	68b9      	ldr	r1, [r7, #8]
 801911e:	4618      	mov	r0, r3
 8019120:	f005 f9f8 	bl	801e514 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8019124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019128:	4618      	mov	r0, r3
 801912a:	f005 fdc5 	bl	801ecb8 <_ZNK14MockNamedValue13getComparatorEv>
 801912e:	4603      	mov	r3, r0
 8019130:	2b00      	cmp	r3, #0
 8019132:	bf0c      	ite	eq
 8019134:	2301      	moveq	r3, #1
 8019136:	2300      	movne	r3, #0
 8019138:	b2db      	uxtb	r3, r3
 801913a:	2b00      	cmp	r3, #0
 801913c:	d01c      	beq.n	8019178 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	33cc      	adds	r3, #204	; 0xcc
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	68f8      	ldr	r0, [r7, #12]
 8019148:	4798      	blx	r3
 801914a:	4601      	mov	r1, r0
 801914c:	f107 0314 	add.w	r3, r7, #20
 8019150:	68ba      	ldr	r2, [r7, #8]
 8019152:	4618      	mov	r0, r3
 8019154:	f004 fed6 	bl	801df04 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	33dc      	adds	r3, #220	; 0xdc
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f107 0214 	add.w	r2, r7, #20
 8019164:	4611      	mov	r1, r2
 8019166:	68f8      	ldr	r0, [r7, #12]
 8019168:	4798      	blx	r3
        return *this;
 801916a:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801916c:	f107 0314 	add.w	r3, r7, #20
 8019170:	4618      	mov	r0, r3
 8019172:	f001 fc81 	bl	801aa78 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8019176:	e009      	b.n	801918c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	33e0      	adds	r3, #224	; 0xe0
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019184:	4611      	mov	r1, r2
 8019186:	68f8      	ldr	r0, [r7, #12]
 8019188:	4798      	blx	r3
    return *this;
 801918a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801918c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019190:	4618      	mov	r0, r3
 8019192:	f004 ffbd 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019196:	4623      	mov	r3, r4
}
 8019198:	4618      	mov	r0, r3
 801919a:	3784      	adds	r7, #132	; 0x84
 801919c:	46bd      	mov	sp, r7
 801919e:	bd90      	pop	{r4, r7, pc}

080191a0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80191a0:	b590      	push	{r4, r7, lr}
 80191a2:	b095      	sub	sp, #84	; 0x54
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	60f8      	str	r0, [r7, #12]
 80191a8:	60b9      	str	r1, [r7, #8]
 80191aa:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	33f0      	adds	r3, #240	; 0xf0
 80191b2:	681c      	ldr	r4, [r3, #0]
 80191b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80191b8:	4917      	ldr	r1, [pc, #92]	; (8019218 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80191ba:	4618      	mov	r0, r3
 80191bc:	f7f4 fa59 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80191c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	68b9      	ldr	r1, [r7, #8]
 80191c8:	68f8      	ldr	r0, [r7, #12]
 80191ca:	47a0      	blx	r4
 80191cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80191d0:	4618      	mov	r0, r3
 80191d2:	f7f4 fe06 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 80191d6:	f107 0310 	add.w	r3, r7, #16
 80191da:	68b9      	ldr	r1, [r7, #8]
 80191dc:	4618      	mov	r0, r3
 80191de:	f004 ff6d 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 80191e2:	f107 0310 	add.w	r3, r7, #16
 80191e6:	6879      	ldr	r1, [r7, #4]
 80191e8:	4618      	mov	r0, r3
 80191ea:	f005 f8e5 	bl	801e3b8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	33e4      	adds	r3, #228	; 0xe4
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f107 0210 	add.w	r2, r7, #16
 80191fa:	4611      	mov	r1, r2
 80191fc:	68f8      	ldr	r0, [r7, #12]
 80191fe:	4798      	blx	r3

    return *this;
 8019200:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8019202:	f107 0310 	add.w	r3, r7, #16
 8019206:	4618      	mov	r0, r3
 8019208:	f004 ff82 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 801920c:	4623      	mov	r3, r4
}
 801920e:	4618      	mov	r0, r3
 8019210:	3754      	adds	r7, #84	; 0x54
 8019212:	46bd      	mov	sp, r7
 8019214:	bd90      	pop	{r4, r7, pc}
 8019216:	bf00      	nop
 8019218:	08026cd8 	.word	0x08026cd8

0801921c <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801921c:	b590      	push	{r4, r7, lr}
 801921e:	b093      	sub	sp, #76	; 0x4c
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
 8019228:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	33f0      	adds	r3, #240	; 0xf0
 8019230:	681c      	ldr	r4, [r3, #0]
 8019232:	683b      	ldr	r3, [r7, #0]
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	6879      	ldr	r1, [r7, #4]
 8019238:	68f8      	ldr	r0, [r7, #12]
 801923a:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801923c:	f107 0310 	add.w	r3, r7, #16
 8019240:	6879      	ldr	r1, [r7, #4]
 8019242:	4618      	mov	r0, r3
 8019244:	f004 ff3a 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8019248:	f107 0310 	add.w	r3, r7, #16
 801924c:	683a      	ldr	r2, [r7, #0]
 801924e:	68b9      	ldr	r1, [r7, #8]
 8019250:	4618      	mov	r0, r3
 8019252:	f005 f95f 	bl	801e514 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	33e4      	adds	r3, #228	; 0xe4
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f107 0210 	add.w	r2, r7, #16
 8019262:	4611      	mov	r1, r2
 8019264:	68f8      	ldr	r0, [r7, #12]
 8019266:	4798      	blx	r3

    return *this;
 8019268:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801926a:	f107 0310 	add.w	r3, r7, #16
 801926e:	4618      	mov	r0, r3
 8019270:	f004 ff4e 	bl	801e110 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019274:	4623      	mov	r3, r4
}
 8019276:	4618      	mov	r0, r3
 8019278:	374c      	adds	r7, #76	; 0x4c
 801927a:	46bd      	mov	sp, r7
 801927c:	bd90      	pop	{r4, r7, pc}

0801927e <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801927e:	b480      	push	{r7}
 8019280:	b083      	sub	sp, #12
 8019282:	af00      	add	r7, sp, #0
 8019284:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	7d1b      	ldrb	r3, [r3, #20]
 801928a:	2b02      	cmp	r3, #2
 801928c:	bf0c      	ite	eq
 801928e:	2301      	moveq	r3, #1
 8019290:	2300      	movne	r3, #0
 8019292:	b2db      	uxtb	r3, r3
}
 8019294:	4618      	mov	r0, r3
 8019296:	370c      	adds	r7, #12
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr

080192a0 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80192a0:	b480      	push	{r7}
 80192a2:	b083      	sub	sp, #12
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	7d1b      	ldrb	r3, [r3, #20]
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	bf0c      	ite	eq
 80192b0:	2301      	moveq	r3, #1
 80192b2:	2300      	movne	r3, #0
 80192b4:	b2db      	uxtb	r3, r3
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	370c      	adds	r7, #12
 80192ba:	46bd      	mov	sp, r7
 80192bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c0:	4770      	bx	lr
	...

080192c4 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 80192c4:	b5b0      	push	{r4, r5, r7, lr}
 80192c6:	b096      	sub	sp, #88	; 0x58
 80192c8:	af02      	add	r7, sp, #8
 80192ca:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	7d5b      	ldrb	r3, [r3, #21]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	f040 80bc 	bne.w	801944e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	2201      	movs	r2, #1
 80192da:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	7d1b      	ldrb	r3, [r3, #20]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d014      	beq.n	801930e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	7d1b      	ldrb	r3, [r3, #20]
 80192e8:	2b02      	cmp	r3, #2
 80192ea:	d10a      	bne.n	8019302 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6998      	ldr	r0, [r3, #24]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	699b      	ldr	r3, [r3, #24]
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	33d8      	adds	r3, #216	; 0xd8
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	68d2      	ldr	r2, [r2, #12]
 80192fe:	4611      	mov	r1, r2
 8019300:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	331c      	adds	r3, #28
 8019306:	4618      	mov	r0, r3
 8019308:	f003 fe07 	bl	801cf1a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801930c:	e0a0      	b.n	8019450 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	331c      	adds	r3, #28
 8019312:	4618      	mov	r0, r3
 8019314:	f003 fac3 	bl	801c89e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	d00f      	beq.n	801933e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801931e:	f7fb fd8b 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8019322:	4604      	mov	r4, r0
 8019324:	6823      	ldr	r3, [r4, #0]
 8019326:	3368      	adds	r3, #104	; 0x68
 8019328:	681d      	ldr	r5, [r3, #0]
 801932a:	f7fb fd95 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801932e:	4603      	mov	r3, r0
 8019330:	9300      	str	r3, [sp, #0]
 8019332:	f240 1385 	movw	r3, #389	; 0x185
 8019336:	4a48      	ldr	r2, [pc, #288]	; (8019458 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8019338:	4948      	ldr	r1, [pc, #288]	; (801945c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801933a:	4620      	mov	r0, r4
 801933c:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	331c      	adds	r3, #28
 8019342:	4618      	mov	r0, r3
 8019344:	f003 fd5f 	bl	801ce06 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8019348:	4602      	mov	r2, r0
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	699b      	ldr	r3, [r3, #24]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d01f      	beq.n	8019396 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	699a      	ldr	r2, [r3, #24]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	699b      	ldr	r3, [r3, #24]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	33e4      	adds	r3, #228	; 0xe4
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4610      	mov	r0, r2
 8019366:	4798      	blx	r3
        callHasSucceeded();
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	33d0      	adds	r3, #208	; 0xd0
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	6878      	ldr	r0, [r7, #4]
 8019372:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	6998      	ldr	r0, [r3, #24]
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	699b      	ldr	r3, [r3, #24]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	33d8      	adds	r3, #216	; 0xd8
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	687a      	ldr	r2, [r7, #4]
 8019384:	68d2      	ldr	r2, [r2, #12]
 8019386:	4611      	mov	r1, r2
 8019388:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	331c      	adds	r3, #28
 801938e:	4618      	mov	r0, r3
 8019390:	f003 fdc3 	bl	801cf1a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8019394:	e05c      	b.n	8019450 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	331c      	adds	r3, #28
 801939a:	4618      	mov	r0, r3
 801939c:	f003 ffc4 	bl	801d328 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80193a0:	4603      	mov	r3, r0
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d029      	beq.n	80193fa <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	33cc      	adds	r3, #204	; 0xcc
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	6878      	ldr	r0, [r7, #4]
 80193b0:	4798      	blx	r3
 80193b2:	4604      	mov	r4, r0
 80193b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80193b8:	6879      	ldr	r1, [r7, #4]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7ff f93b 	bl	8018636 <_ZNK21MockCheckedActualCall7getNameEv>
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80193c8:	f107 000c 	add.w	r0, r7, #12
 80193cc:	4621      	mov	r1, r4
 80193ce:	f004 fd21 	bl	801de14 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 80193d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7f4 fd03 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	33dc      	adds	r3, #220	; 0xdc
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	f107 020c 	add.w	r2, r7, #12
 80193e8:	4611      	mov	r1, r2
 80193ea:	6878      	ldr	r0, [r7, #4]
 80193ec:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80193ee:	f107 030c 	add.w	r3, r7, #12
 80193f2:	4618      	mov	r0, r3
 80193f4:	f001 fb62 	bl	801aabc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 80193f8:	e02a      	b.n	8019450 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	33cc      	adds	r3, #204	; 0xcc
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	4798      	blx	r3
 8019406:	4604      	mov	r4, r0
 8019408:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801940c:	6879      	ldr	r1, [r7, #4]
 801940e:	4618      	mov	r0, r3
 8019410:	f7ff f911 	bl	8018636 <_ZNK21MockCheckedActualCall7getNameEv>
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019418:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801941c:	f107 000c 	add.w	r0, r7, #12
 8019420:	4621      	mov	r1, r4
 8019422:	f004 fe05 	bl	801e030 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801942a:	4618      	mov	r0, r3
 801942c:	f7f4 fcd9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	33dc      	adds	r3, #220	; 0xdc
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	f107 020c 	add.w	r2, r7, #12
 801943c:	4611      	mov	r1, r2
 801943e:	6878      	ldr	r0, [r7, #4]
 8019440:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019442:	f107 030c 	add.w	r3, r7, #12
 8019446:	4618      	mov	r0, r3
 8019448:	f001 fb5a 	bl	801ab00 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801944c:	e000      	b.n	8019450 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801944e:	bf00      	nop
    }
}
 8019450:	3750      	adds	r7, #80	; 0x50
 8019452:	46bd      	mov	sp, r7
 8019454:	bdb0      	pop	{r4, r5, r7, pc}
 8019456:	bf00      	nop
 8019458:	08026ce0 	.word	0x08026ce0
 801945c:	08026d48 	.word	0x08026d48

08019460 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8019460:	b480      	push	{r7}
 8019462:	b083      	sub	sp, #12
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]
 8019468:	460b      	mov	r3, r1
 801946a:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	78fa      	ldrb	r2, [r7, #3]
 8019470:	751a      	strb	r2, [r3, #20]
}
 8019472:	bf00      	nop
 8019474:	370c      	adds	r7, #12
 8019476:	46bd      	mov	sp, r7
 8019478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947c:	4770      	bx	lr
	...

08019480 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b084      	sub	sp, #16
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	33c4      	adds	r3, #196	; 0xc4
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	6838      	ldr	r0, [r7, #0]
 8019494:	4798      	blx	r3
    if (matchingExpectation_)
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	699b      	ldr	r3, [r3, #24]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d00a      	beq.n	80194b4 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	6999      	ldr	r1, [r3, #24]
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	699b      	ldr	r3, [r3, #24]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	3394      	adds	r3, #148	; 0x94
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	687a      	ldr	r2, [r7, #4]
 80194ae:	4610      	mov	r0, r2
 80194b0:	4798      	blx	r3
 80194b2:	e010      	b.n	80194d6 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80194b4:	f107 0308 	add.w	r3, r7, #8
 80194b8:	4909      	ldr	r1, [pc, #36]	; (80194e0 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7f4 f8d9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 80194c0:	f107 0308 	add.w	r3, r7, #8
 80194c4:	4619      	mov	r1, r3
 80194c6:	6878      	ldr	r0, [r7, #4]
 80194c8:	f004 fdf8 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 80194cc:	f107 0308 	add.w	r3, r7, #8
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7f4 fc86 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 80194d6:	6878      	ldr	r0, [r7, #4]
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	08026dc4 	.word	0x08026dc4

080194e4 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
 80194ec:	460b      	mov	r3, r1
 80194ee:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	3350      	adds	r3, #80	; 0x50
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	6878      	ldr	r0, [r7, #4]
 80194fa:	4798      	blx	r3
 80194fc:	4603      	mov	r3, r0
 80194fe:	f083 0301 	eor.w	r3, r3, #1
 8019502:	b2db      	uxtb	r3, r3
 8019504:	2b00      	cmp	r3, #0
 8019506:	d001      	beq.n	801950c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8019508:	78fb      	ldrb	r3, [r7, #3]
 801950a:	e007      	b.n	801951c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	335c      	adds	r3, #92	; 0x5c
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	4798      	blx	r3
 8019518:	4603      	mov	r3, r0
 801951a:	bf00      	nop
}
 801951c:	4618      	mov	r0, r3
 801951e:	3708      	adds	r7, #8
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8019524:	b590      	push	{r4, r7, lr}
 8019526:	b091      	sub	sp, #68	; 0x44
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	3354      	adds	r3, #84	; 0x54
 8019532:	681b      	ldr	r3, [r3, #0]
 8019534:	f107 0208 	add.w	r2, r7, #8
 8019538:	6879      	ldr	r1, [r7, #4]
 801953a:	4610      	mov	r0, r2
 801953c:	4798      	blx	r3
 801953e:	f107 0308 	add.w	r3, r7, #8
 8019542:	4618      	mov	r0, r3
 8019544:	f005 f896 	bl	801e674 <_ZNK14MockNamedValue12getBoolValueEv>
 8019548:	4603      	mov	r3, r0
 801954a:	461c      	mov	r4, r3
 801954c:	bf00      	nop
 801954e:	f107 0308 	add.w	r3, r7, #8
 8019552:	4618      	mov	r0, r3
 8019554:	f004 fddc 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019558:	4623      	mov	r3, r4
}
 801955a:	4618      	mov	r0, r3
 801955c:	3744      	adds	r7, #68	; 0x44
 801955e:	46bd      	mov	sp, r7
 8019560:	bd90      	pop	{r4, r7, pc}

08019562 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8019562:	b580      	push	{r7, lr}
 8019564:	b082      	sub	sp, #8
 8019566:	af00      	add	r7, sp, #0
 8019568:	6078      	str	r0, [r7, #4]
 801956a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	3350      	adds	r3, #80	; 0x50
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	4798      	blx	r3
 8019578:	4603      	mov	r3, r0
 801957a:	f083 0301 	eor.w	r3, r3, #1
 801957e:	b2db      	uxtb	r3, r3
 8019580:	2b00      	cmp	r3, #0
 8019582:	d001      	beq.n	8019588 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8019584:	683b      	ldr	r3, [r7, #0]
 8019586:	e007      	b.n	8019598 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	3364      	adds	r3, #100	; 0x64
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	4798      	blx	r3
 8019594:	4603      	mov	r3, r0
 8019596:	bf00      	nop
}
 8019598:	4618      	mov	r0, r3
 801959a:	3708      	adds	r7, #8
 801959c:	46bd      	mov	sp, r7
 801959e:	bd80      	pop	{r7, pc}

080195a0 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80195a0:	b590      	push	{r4, r7, lr}
 80195a2:	b091      	sub	sp, #68	; 0x44
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	3354      	adds	r3, #84	; 0x54
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	f107 0208 	add.w	r2, r7, #8
 80195b4:	6879      	ldr	r1, [r7, #4]
 80195b6:	4610      	mov	r0, r2
 80195b8:	4798      	blx	r3
 80195ba:	f107 0308 	add.w	r3, r7, #8
 80195be:	4618      	mov	r0, r3
 80195c0:	f005 f8d0 	bl	801e764 <_ZNK14MockNamedValue11getIntValueEv>
 80195c4:	4604      	mov	r4, r0
 80195c6:	bf00      	nop
 80195c8:	f107 0308 	add.w	r3, r7, #8
 80195cc:	4618      	mov	r0, r3
 80195ce:	f004 fd9f 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 80195d2:	4623      	mov	r3, r4
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3744      	adds	r7, #68	; 0x44
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd90      	pop	{r4, r7, pc}

080195dc <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 80195dc:	b590      	push	{r4, r7, lr}
 80195de:	b091      	sub	sp, #68	; 0x44
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	3354      	adds	r3, #84	; 0x54
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	f107 0208 	add.w	r2, r7, #8
 80195f0:	6879      	ldr	r1, [r7, #4]
 80195f2:	4610      	mov	r0, r2
 80195f4:	4798      	blx	r3
 80195f6:	f107 0308 	add.w	r3, r7, #8
 80195fa:	4618      	mov	r0, r3
 80195fc:	f005 f93c 	bl	801e878 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8019600:	4604      	mov	r4, r0
 8019602:	bf00      	nop
 8019604:	f107 0308 	add.w	r3, r7, #8
 8019608:	4618      	mov	r0, r3
 801960a:	f004 fd81 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801960e:	4623      	mov	r3, r4
}
 8019610:	4618      	mov	r0, r3
 8019612:	3744      	adds	r7, #68	; 0x44
 8019614:	46bd      	mov	sp, r7
 8019616:	bd90      	pop	{r4, r7, pc}

08019618 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b082      	sub	sp, #8
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
 8019620:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	3350      	adds	r3, #80	; 0x50
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	6878      	ldr	r0, [r7, #4]
 801962c:	4798      	blx	r3
 801962e:	4603      	mov	r3, r0
 8019630:	f083 0301 	eor.w	r3, r3, #1
 8019634:	b2db      	uxtb	r3, r3
 8019636:	2b00      	cmp	r3, #0
 8019638:	d001      	beq.n	801963e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801963a:	683b      	ldr	r3, [r7, #0]
 801963c:	e007      	b.n	801964e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	3368      	adds	r3, #104	; 0x68
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	4798      	blx	r3
 801964a:	4603      	mov	r3, r0
 801964c:	bf00      	nop
}
 801964e:	4618      	mov	r0, r3
 8019650:	3708      	adds	r7, #8
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}

08019656 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8019656:	b590      	push	{r4, r7, lr}
 8019658:	b091      	sub	sp, #68	; 0x44
 801965a:	af00      	add	r7, sp, #0
 801965c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	3354      	adds	r3, #84	; 0x54
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	f107 0208 	add.w	r2, r7, #8
 801966a:	6879      	ldr	r1, [r7, #4]
 801966c:	4610      	mov	r0, r2
 801966e:	4798      	blx	r3
 8019670:	f107 0308 	add.w	r3, r7, #8
 8019674:	4618      	mov	r0, r3
 8019676:	f005 f89d 	bl	801e7b4 <_ZNK14MockNamedValue15getLongIntValueEv>
 801967a:	4604      	mov	r4, r0
 801967c:	bf00      	nop
 801967e:	f107 0308 	add.w	r3, r7, #8
 8019682:	4618      	mov	r0, r3
 8019684:	f004 fd44 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019688:	4623      	mov	r3, r4
}
 801968a:	4618      	mov	r0, r3
 801968c:	3744      	adds	r7, #68	; 0x44
 801968e:	46bd      	mov	sp, r7
 8019690:	bd90      	pop	{r4, r7, pc}

08019692 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8019692:	b580      	push	{r7, lr}
 8019694:	b082      	sub	sp, #8
 8019696:	af00      	add	r7, sp, #0
 8019698:	6078      	str	r0, [r7, #4]
 801969a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	3350      	adds	r3, #80	; 0x50
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	6878      	ldr	r0, [r7, #4]
 80196a6:	4798      	blx	r3
 80196a8:	4603      	mov	r3, r0
 80196aa:	f083 0301 	eor.w	r3, r3, #1
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d001      	beq.n	80196b8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80196b4:	683b      	ldr	r3, [r7, #0]
 80196b6:	e007      	b.n	80196c8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	3370      	adds	r3, #112	; 0x70
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	6878      	ldr	r0, [r7, #4]
 80196c2:	4798      	blx	r3
 80196c4:	4603      	mov	r3, r0
 80196c6:	bf00      	nop
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3708      	adds	r7, #8
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd80      	pop	{r7, pc}

080196d0 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 80196d0:	b5b0      	push	{r4, r5, r7, lr}
 80196d2:	b084      	sub	sp, #16
 80196d4:	af02      	add	r7, sp, #8
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80196da:	f7fb fbad 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80196de:	4604      	mov	r4, r0
 80196e0:	6823      	ldr	r3, [r4, #0]
 80196e2:	3368      	adds	r3, #104	; 0x68
 80196e4:	681d      	ldr	r5, [r3, #0]
 80196e6:	f7fb fbb7 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80196ea:	4603      	mov	r3, r0
 80196ec:	9300      	str	r3, [sp, #0]
 80196ee:	f240 13fb 	movw	r3, #507	; 0x1fb
 80196f2:	4a06      	ldr	r2, [pc, #24]	; (801970c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 80196f4:	4906      	ldr	r1, [pc, #24]	; (8019710 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 80196f6:	4620      	mov	r0, r4
 80196f8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80196fa:	2100      	movs	r1, #0
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f7f1 fffb 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
}
 8019702:	6878      	ldr	r0, [r7, #4]
 8019704:	3708      	adds	r7, #8
 8019706:	46bd      	mov	sp, r7
 8019708:	bdb0      	pop	{r4, r5, r7, pc}
 801970a:	bf00      	nop
 801970c:	08026ce0 	.word	0x08026ce0
 8019710:	08026cfc 	.word	0x08026cfc

08019714 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8019714:	b5b0      	push	{r4, r5, r7, lr}
 8019716:	b086      	sub	sp, #24
 8019718:	af02      	add	r7, sp, #8
 801971a:	60f8      	str	r0, [r7, #12]
 801971c:	60b9      	str	r1, [r7, #8]
 801971e:	4639      	mov	r1, r7
 8019720:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019724:	f7fb fb88 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 8019728:	4604      	mov	r4, r0
 801972a:	6823      	ldr	r3, [r4, #0]
 801972c:	3368      	adds	r3, #104	; 0x68
 801972e:	681d      	ldr	r5, [r3, #0]
 8019730:	f7fb fb92 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019734:	4603      	mov	r3, r0
 8019736:	9300      	str	r3, [sp, #0]
 8019738:	f240 2301 	movw	r3, #513	; 0x201
 801973c:	4a06      	ldr	r2, [pc, #24]	; (8019758 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801973e:	4907      	ldr	r1, [pc, #28]	; (801975c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8019740:	4620      	mov	r0, r4
 8019742:	47a8      	blx	r5
    return default_value;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	461a      	mov	r2, r3
 8019748:	463b      	mov	r3, r7
 801974a:	cb03      	ldmia	r3!, {r0, r1}
 801974c:	6010      	str	r0, [r2, #0]
 801974e:	6051      	str	r1, [r2, #4]
}
 8019750:	68f8      	ldr	r0, [r7, #12]
 8019752:	3710      	adds	r7, #16
 8019754:	46bd      	mov	sp, r7
 8019756:	bdb0      	pop	{r4, r5, r7, pc}
 8019758:	08026ce0 	.word	0x08026ce0
 801975c:	08026cfc 	.word	0x08026cfc

08019760 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 8019760:	b5b0      	push	{r4, r5, r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af02      	add	r7, sp, #8
 8019766:	6078      	str	r0, [r7, #4]
 8019768:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801976a:	f7fb fb65 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801976e:	4604      	mov	r4, r0
 8019770:	6823      	ldr	r3, [r4, #0]
 8019772:	3368      	adds	r3, #104	; 0x68
 8019774:	681d      	ldr	r5, [r3, #0]
 8019776:	f7fb fb6f 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801977a:	4603      	mov	r3, r0
 801977c:	9300      	str	r3, [sp, #0]
 801977e:	f240 2307 	movw	r3, #519	; 0x207
 8019782:	4a06      	ldr	r2, [pc, #24]	; (801979c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 8019784:	4906      	ldr	r1, [pc, #24]	; (80197a0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 8019786:	4620      	mov	r0, r4
 8019788:	47a8      	blx	r5
    return cpputest_longlong(0);
 801978a:	2100      	movs	r1, #0
 801978c:	6878      	ldr	r0, [r7, #4]
 801978e:	f7f1 ffa7 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
}
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	3708      	adds	r7, #8
 8019796:	46bd      	mov	sp, r7
 8019798:	bdb0      	pop	{r4, r5, r7, pc}
 801979a:	bf00      	nop
 801979c:	08026ce0 	.word	0x08026ce0
 80197a0:	08026d28 	.word	0x08026d28

080197a4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80197a4:	b5b0      	push	{r4, r5, r7, lr}
 80197a6:	b086      	sub	sp, #24
 80197a8:	af02      	add	r7, sp, #8
 80197aa:	60f8      	str	r0, [r7, #12]
 80197ac:	60b9      	str	r1, [r7, #8]
 80197ae:	4639      	mov	r1, r7
 80197b0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80197b4:	f7fb fb40 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 80197b8:	4604      	mov	r4, r0
 80197ba:	6823      	ldr	r3, [r4, #0]
 80197bc:	3368      	adds	r3, #104	; 0x68
 80197be:	681d      	ldr	r5, [r3, #0]
 80197c0:	f7fb fb4a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80197c4:	4603      	mov	r3, r0
 80197c6:	9300      	str	r3, [sp, #0]
 80197c8:	f240 230d 	movw	r3, #525	; 0x20d
 80197cc:	4a06      	ldr	r2, [pc, #24]	; (80197e8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 80197ce:	4907      	ldr	r1, [pc, #28]	; (80197ec <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 80197d0:	4620      	mov	r0, r4
 80197d2:	47a8      	blx	r5
    return default_value;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	461a      	mov	r2, r3
 80197d8:	463b      	mov	r3, r7
 80197da:	cb03      	ldmia	r3!, {r0, r1}
 80197dc:	6010      	str	r0, [r2, #0]
 80197de:	6051      	str	r1, [r2, #4]
}
 80197e0:	68f8      	ldr	r0, [r7, #12]
 80197e2:	3710      	adds	r7, #16
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bdb0      	pop	{r4, r5, r7, pc}
 80197e8:	08026ce0 	.word	0x08026ce0
 80197ec:	08026d28 	.word	0x08026d28

080197f0 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	ed2d 8b02 	vpush	{d8}
 80197f6:	b090      	sub	sp, #64	; 0x40
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	3354      	adds	r3, #84	; 0x54
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	f107 0208 	add.w	r2, r7, #8
 8019808:	6879      	ldr	r1, [r7, #4]
 801980a:	4610      	mov	r0, r2
 801980c:	4798      	blx	r3
 801980e:	f107 0308 	add.w	r3, r7, #8
 8019812:	4618      	mov	r0, r3
 8019814:	f005 f908 	bl	801ea28 <_ZNK14MockNamedValue14getDoubleValueEv>
 8019818:	eeb0 8a40 	vmov.f32	s16, s0
 801981c:	eef0 8a60 	vmov.f32	s17, s1
 8019820:	bf00      	nop
 8019822:	f107 0308 	add.w	r3, r7, #8
 8019826:	4618      	mov	r0, r3
 8019828:	f004 fc72 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801982c:	eeb0 7a48 	vmov.f32	s14, s16
 8019830:	eef0 7a68 	vmov.f32	s15, s17
}
 8019834:	eeb0 0a47 	vmov.f32	s0, s14
 8019838:	eef0 0a67 	vmov.f32	s1, s15
 801983c:	3740      	adds	r7, #64	; 0x40
 801983e:	46bd      	mov	sp, r7
 8019840:	ecbd 8b02 	vpop	{d8}
 8019844:	bd80      	pop	{r7, pc}

08019846 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8019846:	b580      	push	{r7, lr}
 8019848:	b084      	sub	sp, #16
 801984a:	af00      	add	r7, sp, #0
 801984c:	60f8      	str	r0, [r7, #12]
 801984e:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	3350      	adds	r3, #80	; 0x50
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	68f8      	ldr	r0, [r7, #12]
 801985c:	4798      	blx	r3
 801985e:	4603      	mov	r3, r0
 8019860:	f083 0301 	eor.w	r3, r3, #1
 8019864:	b2db      	uxtb	r3, r3
 8019866:	2b00      	cmp	r3, #0
 8019868:	d002      	beq.n	8019870 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801986a:	ed97 7b00 	vldr	d7, [r7]
 801986e:	e00a      	b.n	8019886 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	3398      	adds	r3, #152	; 0x98
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	68f8      	ldr	r0, [r7, #12]
 801987a:	4798      	blx	r3
 801987c:	eeb0 7a40 	vmov.f32	s14, s0
 8019880:	eef0 7a60 	vmov.f32	s15, s1
 8019884:	bf00      	nop
}
 8019886:	eeb0 0a47 	vmov.f32	s0, s14
 801988a:	eef0 0a67 	vmov.f32	s1, s15
 801988e:	3710      	adds	r7, #16
 8019890:	46bd      	mov	sp, r7
 8019892:	bd80      	pop	{r7, pc}

08019894 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 8019894:	b590      	push	{r4, r7, lr}
 8019896:	b091      	sub	sp, #68	; 0x44
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	3354      	adds	r3, #84	; 0x54
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	f107 0208 	add.w	r2, r7, #8
 80198a8:	6879      	ldr	r1, [r7, #4]
 80198aa:	4610      	mov	r0, r2
 80198ac:	4798      	blx	r3
 80198ae:	f107 0308 	add.w	r3, r7, #8
 80198b2:	4618      	mov	r0, r3
 80198b4:	f004 ff06 	bl	801e6c4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80198b8:	4604      	mov	r4, r0
 80198ba:	bf00      	nop
 80198bc:	f107 0308 	add.w	r3, r7, #8
 80198c0:	4618      	mov	r0, r3
 80198c2:	f004 fc25 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 80198c6:	4623      	mov	r3, r4
}
 80198c8:	4618      	mov	r0, r3
 80198ca:	3744      	adds	r7, #68	; 0x44
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd90      	pop	{r4, r7, pc}

080198d0 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b082      	sub	sp, #8
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
 80198d8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	3350      	adds	r3, #80	; 0x50
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	6878      	ldr	r0, [r7, #4]
 80198e4:	4798      	blx	r3
 80198e6:	4603      	mov	r3, r0
 80198e8:	f083 0301 	eor.w	r3, r3, #1
 80198ec:	b2db      	uxtb	r3, r3
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d001      	beq.n	80198f6 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	e007      	b.n	8019906 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	3388      	adds	r3, #136	; 0x88
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	6878      	ldr	r0, [r7, #4]
 8019900:	4798      	blx	r3
 8019902:	4603      	mov	r3, r0
 8019904:	bf00      	nop
}
 8019906:	4618      	mov	r0, r3
 8019908:	3708      	adds	r7, #8
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801990e:	b580      	push	{r7, lr}
 8019910:	b082      	sub	sp, #8
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
 8019916:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	3350      	adds	r3, #80	; 0x50
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	4798      	blx	r3
 8019924:	4603      	mov	r3, r0
 8019926:	f083 0301 	eor.w	r3, r3, #1
 801992a:	b2db      	uxtb	r3, r3
 801992c:	2b00      	cmp	r3, #0
 801992e:	d001      	beq.n	8019934 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8019930:	683b      	ldr	r3, [r7, #0]
 8019932:	e007      	b.n	8019944 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	33a0      	adds	r3, #160	; 0xa0
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	4798      	blx	r3
 8019940:	4603      	mov	r3, r0
 8019942:	bf00      	nop
}
 8019944:	4618      	mov	r0, r3
 8019946:	3708      	adds	r7, #8
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801994c:	b590      	push	{r4, r7, lr}
 801994e:	b091      	sub	sp, #68	; 0x44
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	3354      	adds	r3, #84	; 0x54
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	f107 0208 	add.w	r2, r7, #8
 8019960:	6879      	ldr	r1, [r7, #4]
 8019962:	4610      	mov	r0, r2
 8019964:	4798      	blx	r3
 8019966:	f107 0308 	add.w	r3, r7, #8
 801996a:	4618      	mov	r0, r3
 801996c:	f005 f8e0 	bl	801eb30 <_ZNK14MockNamedValue15getPointerValueEv>
 8019970:	4604      	mov	r4, r0
 8019972:	bf00      	nop
 8019974:	f107 0308 	add.w	r3, r7, #8
 8019978:	4618      	mov	r0, r3
 801997a:	f004 fbc9 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801997e:	4623      	mov	r3, r4
}
 8019980:	4618      	mov	r0, r3
 8019982:	3744      	adds	r7, #68	; 0x44
 8019984:	46bd      	mov	sp, r7
 8019986:	bd90      	pop	{r4, r7, pc}

08019988 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8019988:	b590      	push	{r4, r7, lr}
 801998a:	b091      	sub	sp, #68	; 0x44
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	3354      	adds	r3, #84	; 0x54
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	f107 0208 	add.w	r2, r7, #8
 801999c:	6879      	ldr	r1, [r7, #4]
 801999e:	4610      	mov	r0, r2
 80199a0:	4798      	blx	r3
 80199a2:	f107 0308 	add.w	r3, r7, #8
 80199a6:	4618      	mov	r0, r3
 80199a8:	f005 f8ea 	bl	801eb80 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80199ac:	4604      	mov	r4, r0
 80199ae:	bf00      	nop
 80199b0:	f107 0308 	add.w	r3, r7, #8
 80199b4:	4618      	mov	r0, r3
 80199b6:	f004 fbab 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 80199ba:	4623      	mov	r3, r4
}
 80199bc:	4618      	mov	r0, r3
 80199be:	3744      	adds	r7, #68	; 0x44
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd90      	pop	{r4, r7, pc}

080199c4 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b082      	sub	sp, #8
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
 80199cc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	3350      	adds	r3, #80	; 0x50
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	4798      	blx	r3
 80199da:	4603      	mov	r3, r0
 80199dc:	f083 0301 	eor.w	r3, r3, #1
 80199e0:	b2db      	uxtb	r3, r3
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d001      	beq.n	80199ea <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 80199e6:	683b      	ldr	r3, [r7, #0]
 80199e8:	e007      	b.n	80199fa <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	33a8      	adds	r3, #168	; 0xa8
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	6878      	ldr	r0, [r7, #4]
 80199f4:	4798      	blx	r3
 80199f6:	4603      	mov	r3, r0
 80199f8:	bf00      	nop
}
 80199fa:	4618      	mov	r0, r3
 80199fc:	3708      	adds	r7, #8
 80199fe:	46bd      	mov	sp, r7
 8019a00:	bd80      	pop	{r7, pc}

08019a02 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8019a02:	b590      	push	{r4, r7, lr}
 8019a04:	b091      	sub	sp, #68	; 0x44
 8019a06:	af00      	add	r7, sp, #0
 8019a08:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	3354      	adds	r3, #84	; 0x54
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	f107 0208 	add.w	r2, r7, #8
 8019a16:	6879      	ldr	r1, [r7, #4]
 8019a18:	4610      	mov	r0, r2
 8019a1a:	4798      	blx	r3
 8019a1c:	f107 0308 	add.w	r3, r7, #8
 8019a20:	4618      	mov	r0, r3
 8019a22:	f005 f8d5 	bl	801ebd0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8019a26:	4604      	mov	r4, r0
 8019a28:	bf00      	nop
 8019a2a:	f107 0308 	add.w	r3, r7, #8
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f004 fb6e 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019a34:	4623      	mov	r3, r4
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3744      	adds	r7, #68	; 0x44
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	bd90      	pop	{r4, r7, pc}

08019a3e <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8019a3e:	b580      	push	{r7, lr}
 8019a40:	b082      	sub	sp, #8
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	3350      	adds	r3, #80	; 0x50
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	4798      	blx	r3
 8019a54:	4603      	mov	r3, r0
 8019a56:	f083 0301 	eor.w	r3, r3, #1
 8019a5a:	b2db      	uxtb	r3, r3
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d001      	beq.n	8019a64 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	e007      	b.n	8019a74 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	33b0      	adds	r3, #176	; 0xb0
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	4798      	blx	r3
 8019a70:	4603      	mov	r3, r0
 8019a72:	bf00      	nop
}
 8019a74:	4618      	mov	r0, r3
 8019a76:	3708      	adds	r7, #8
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd80      	pop	{r7, pc}

08019a7c <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
 8019a84:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	3350      	adds	r3, #80	; 0x50
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	4798      	blx	r3
 8019a92:	4603      	mov	r3, r0
 8019a94:	f083 0301 	eor.w	r3, r3, #1
 8019a98:	b2db      	uxtb	r3, r3
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d001      	beq.n	8019aa2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	e007      	b.n	8019ab2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	3394      	adds	r3, #148	; 0x94
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	6878      	ldr	r0, [r7, #4]
 8019aac:	4798      	blx	r3
 8019aae:	4603      	mov	r3, r0
 8019ab0:	bf00      	nop
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3708      	adds	r7, #8
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}

08019aba <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8019aba:	b590      	push	{r4, r7, lr}
 8019abc:	b091      	sub	sp, #68	; 0x44
 8019abe:	af00      	add	r7, sp, #0
 8019ac0:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	3354      	adds	r3, #84	; 0x54
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	f107 0208 	add.w	r2, r7, #8
 8019ace:	6879      	ldr	r1, [r7, #4]
 8019ad0:	4610      	mov	r0, r2
 8019ad2:	4798      	blx	r3
 8019ad4:	f107 0308 	add.w	r3, r7, #8
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f005 f801 	bl	801eae0 <_ZNK14MockNamedValue14getStringValueEv>
 8019ade:	4604      	mov	r4, r0
 8019ae0:	bf00      	nop
 8019ae2:	f107 0308 	add.w	r3, r7, #8
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f004 fb12 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019aec:	4623      	mov	r3, r4
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3744      	adds	r7, #68	; 0x44
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd90      	pop	{r4, r7, pc}

08019af6 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8019af6:	b590      	push	{r4, r7, lr}
 8019af8:	b093      	sub	sp, #76	; 0x4c
 8019afa:	af00      	add	r7, sp, #0
 8019afc:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	3354      	adds	r3, #84	; 0x54
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	f107 0210 	add.w	r2, r7, #16
 8019b0a:	6879      	ldr	r1, [r7, #4]
 8019b0c:	4610      	mov	r0, r2
 8019b0e:	4798      	blx	r3
 8019b10:	f107 0308 	add.w	r3, r7, #8
 8019b14:	f107 0210 	add.w	r2, r7, #16
 8019b18:	4611      	mov	r1, r2
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f004 fd8c 	bl	801e638 <_ZNK14MockNamedValue7getNameEv>
 8019b20:	f107 0308 	add.w	r3, r7, #8
 8019b24:	4618      	mov	r0, r3
 8019b26:	f7f4 f94b 	bl	800ddc0 <_ZNK12SimpleString7isEmptyEv>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	f083 0301 	eor.w	r3, r3, #1
 8019b30:	b2dc      	uxtb	r4, r3
 8019b32:	f107 0308 	add.w	r3, r7, #8
 8019b36:	4618      	mov	r0, r3
 8019b38:	f7f4 f953 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019b3c:	f107 0310 	add.w	r3, r7, #16
 8019b40:	4618      	mov	r0, r3
 8019b42:	f004 fae5 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 8019b46:	4623      	mov	r3, r4
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	374c      	adds	r7, #76	; 0x4c
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd90      	pop	{r4, r7, pc}

08019b50 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8019b50:	b590      	push	{r4, r7, lr}
 8019b52:	b095      	sub	sp, #84	; 0x54
 8019b54:	af02      	add	r7, sp, #8
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	33c0      	adds	r3, #192	; 0xc0
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	4798      	blx	r3
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d001      	beq.n	8019b70 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8019b6c:	687c      	ldr	r4, [r7, #4]
 8019b6e:	e053      	b.n	8019c18 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	331c      	adds	r3, #28
 8019b74:	6839      	ldr	r1, [r7, #0]
 8019b76:	4618      	mov	r0, r3
 8019b78:	f003 f8ca 	bl	801cd10 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	699b      	ldr	r3, [r3, #24]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d109      	bne.n	8019b98 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	331c      	adds	r3, #28
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f002 fe20 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019b8e:	4603      	mov	r3, r0
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d001      	beq.n	8019b98 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8019b94:	2301      	movs	r3, #1
 8019b96:	e000      	b.n	8019b9a <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8019b98:	2300      	movs	r3, #0
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d02c      	beq.n	8019bf8 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	33cc      	adds	r3, #204	; 0xcc
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	4798      	blx	r3
 8019baa:	4604      	mov	r4, r0
 8019bac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019bb0:	6879      	ldr	r1, [r7, #4]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f7fe fd3f 	bl	8018636 <_ZNK21MockCheckedActualCall7getNameEv>
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bbc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019bc0:	f107 000c 	add.w	r0, r7, #12
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	4621      	mov	r1, r4
 8019bca:	f004 f9fb 	bl	801dfc4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8019bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f7f4 f905 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	33dc      	adds	r3, #220	; 0xdc
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f107 020c 	add.w	r2, r7, #12
 8019be4:	4611      	mov	r1, r2
 8019be6:	6878      	ldr	r0, [r7, #4]
 8019be8:	4798      	blx	r3
        return *this;
 8019bea:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8019bec:	f107 030c 	add.w	r3, r7, #12
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f000 ffa7 	bl	801ab44 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8019bf6:	e00f      	b.n	8019c18 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	331c      	adds	r3, #28
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	f003 f9a7 	bl	801cf50 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	699b      	ldr	r3, [r3, #24]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d105      	bne.n	8019c16 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	33d8      	adds	r3, #216	; 0xd8
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	6878      	ldr	r0, [r7, #4]
 8019c14:	4798      	blx	r3
    }

    return *this;
 8019c16:	687c      	ldr	r4, [r7, #4]
 8019c18:	4623      	mov	r3, r4
}
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	374c      	adds	r7, #76	; 0x4c
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd90      	pop	{r4, r7, pc}
	...

08019c24 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8019c24:	b590      	push	{r4, r7, lr}
 8019c26:	b087      	sub	sp, #28
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	60f8      	str	r0, [r7, #12]
 8019c2c:	60b9      	str	r1, [r7, #8]
 8019c2e:	607a      	str	r2, [r7, #4]
 8019c30:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8019c32:	f240 2282 	movw	r2, #642	; 0x282
 8019c36:	4913      	ldr	r1, [pc, #76]	; (8019c84 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8019c38:	2018      	movs	r0, #24
 8019c3a:	f7f1 f957 	bl	800aeec <_ZnwjPKci>
 8019c3e:	4604      	mov	r4, r0
 8019c40:	683b      	ldr	r3, [r7, #0]
 8019c42:	687a      	ldr	r2, [r7, #4]
 8019c44:	68b9      	ldr	r1, [r7, #8]
 8019c46:	4620      	mov	r0, r4
 8019c48:	f7fe fa48 	bl	80180dc <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8019c4c:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d103      	bne.n	8019c5e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	693a      	ldr	r2, [r7, #16]
 8019c5a:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8019c5c:	e00d      	b.n	8019c7a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c62:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8019c64:	697b      	ldr	r3, [r7, #20]
 8019c66:	695b      	ldr	r3, [r3, #20]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d003      	beq.n	8019c74 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	695b      	ldr	r3, [r3, #20]
 8019c70:	617b      	str	r3, [r7, #20]
 8019c72:	e7f7      	b.n	8019c64 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	693a      	ldr	r2, [r7, #16]
 8019c78:	615a      	str	r2, [r3, #20]
}
 8019c7a:	bf00      	nop
 8019c7c:	371c      	adds	r7, #28
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd90      	pop	{r4, r7, pc}
 8019c82:	bf00      	nop
 8019c84:	08026ce0 	.word	0x08026ce0

08019c88 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	3308      	adds	r3, #8
 8019c94:	4618      	mov	r0, r3
 8019c96:	f7f4 f8a4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7f4 f8a0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3708      	adds	r7, #8
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}

08019cac <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8019cac:	b590      	push	{r4, r7, lr}
 8019cae:	b085      	sub	sp, #20
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cb8:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	60bb      	str	r3, [r7, #8]

    while (current) {
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d012      	beq.n	8019cea <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	695b      	ldr	r3, [r3, #20]
 8019ccc:	60fb      	str	r3, [r7, #12]
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	68fa      	ldr	r2, [r7, #12]
 8019cd2:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8019cd4:	68bc      	ldr	r4, [r7, #8]
 8019cd6:	2c00      	cmp	r4, #0
 8019cd8:	d0f1      	beq.n	8019cbe <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8019cda:	4620      	mov	r0, r4
 8019cdc:	f7ff ffd4 	bl	8019c88 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8019ce0:	2118      	movs	r1, #24
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	f7f1 f916 	bl	800af14 <_ZdlPvj>
    while (current) {
 8019ce8:	e7e9      	b.n	8019cbe <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8019cea:	bf00      	nop
 8019cec:	3714      	adds	r7, #20
 8019cee:	46bd      	mov	sp, r7
 8019cf0:	bd90      	pop	{r4, r7, pc}
	...

08019cf4 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f7fe fc6a 	bl	80185d8 <_ZN14MockActualCallC1Ev>
 8019d04:	4a06      	ldr	r2, [pc, #24]	; (8019d20 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	601a      	str	r2, [r3, #0]
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	3304      	adds	r3, #4
 8019d0e:	4905      	ldr	r1, [pc, #20]	; (8019d24 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7f3 fcae 	bl	800d672 <_ZN12SimpleStringC1EPKc>
{
}
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3708      	adds	r7, #8
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	08029bf8 	.word	0x08029bf8
 8019d24:	08026cc8 	.word	0x08026cc8

08019d28 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	4a08      	ldr	r2, [pc, #32]	; (8019d54 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	601a      	str	r2, [r3, #0]
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	3304      	adds	r3, #4
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	f7f4 f851 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	4618      	mov	r0, r3
 8019d44:	f7fe fc58 	bl	80185f8 <_ZN14MockActualCallD1Ev>
{
}
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	3708      	adds	r7, #8
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bd80      	pop	{r7, pc}
 8019d52:	bf00      	nop
 8019d54:	08029bf8 	.word	0x08029bf8

08019d58 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8019d58:	b580      	push	{r7, lr}
 8019d5a:	b082      	sub	sp, #8
 8019d5c:	af00      	add	r7, sp, #0
 8019d5e:	6078      	str	r0, [r7, #4]
}
 8019d60:	6878      	ldr	r0, [r7, #4]
 8019d62:	f7ff ffe1 	bl	8019d28 <_ZN19MockActualCallTraceD1Ev>
 8019d66:	210c      	movs	r1, #12
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f7f1 f8d3 	bl	800af14 <_ZdlPvj>
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	4618      	mov	r0, r3
 8019d72:	3708      	adds	r7, #8
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}

08019d78 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b082      	sub	sp, #8
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
 8019d80:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	3304      	adds	r3, #4
 8019d86:	4907      	ldr	r1, [pc, #28]	; (8019da4 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7f4 f8b9 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	3304      	adds	r3, #4
 8019d92:	6839      	ldr	r1, [r7, #0]
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7f4 f8a1 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    return *this;
 8019d9a:	687b      	ldr	r3, [r7, #4]
}
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	3708      	adds	r7, #8
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}
 8019da4:	08026dd4 	.word	0x08026dd4

08019da8 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8019da8:	b590      	push	{r4, r7, lr}
 8019daa:	b085      	sub	sp, #20
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	6078      	str	r0, [r7, #4]
 8019db0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	3304      	adds	r3, #4
 8019db6:	490e      	ldr	r1, [pc, #56]	; (8019df0 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8019db8:	4618      	mov	r0, r3
 8019dba:	f7f4 f8a1 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	1d1c      	adds	r4, r3, #4
 8019dc2:	f107 0308 	add.w	r3, r7, #8
 8019dc6:	6839      	ldr	r1, [r7, #0]
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f7f4 fd39 	bl	800e840 <_Z10StringFromj>
 8019dce:	f107 0308 	add.w	r3, r7, #8
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	f7f4 f881 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8019dda:	f107 0308 	add.w	r3, r7, #8
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7f3 ffff 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019de4:	687b      	ldr	r3, [r7, #4]
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3714      	adds	r7, #20
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd90      	pop	{r4, r7, pc}
 8019dee:	bf00      	nop
 8019df0:	08026de4 	.word	0x08026de4

08019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
 8019dfc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	3304      	adds	r3, #4
 8019e02:	490a      	ldr	r1, [pc, #40]	; (8019e2c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8019e04:	4618      	mov	r0, r3
 8019e06:	f7f4 f87b 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	3304      	adds	r3, #4
 8019e0e:	6839      	ldr	r1, [r7, #0]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7f4 f863 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	3304      	adds	r3, #4
 8019e1a:	4905      	ldr	r1, [pc, #20]	; (8019e30 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7f4 f86f 	bl	800df00 <_ZN12SimpleStringpLEPKc>
}
 8019e22:	bf00      	nop
 8019e24:	3708      	adds	r7, #8
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	08026df4 	.word	0x08026df4
 8019e30:	08026df8 	.word	0x08026df8

08019e34 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8019e34:	b590      	push	{r4, r7, lr}
 8019e36:	b087      	sub	sp, #28
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	4613      	mov	r3, r2
 8019e40:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8019e42:	68b9      	ldr	r1, [r7, #8]
 8019e44:	68f8      	ldr	r0, [r7, #12]
 8019e46:	f7ff ffd5 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	1d1c      	adds	r4, r3, #4
 8019e4e:	f107 0310 	add.w	r3, r7, #16
 8019e52:	79fa      	ldrb	r2, [r7, #7]
 8019e54:	4611      	mov	r1, r2
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7f4 fa34 	bl	800e2c4 <_Z10StringFromb>
 8019e5c:	f107 0310 	add.w	r3, r7, #16
 8019e60:	4619      	mov	r1, r3
 8019e62:	4620      	mov	r0, r4
 8019e64:	f7f4 f83a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8019e68:	f107 0310 	add.w	r3, r7, #16
 8019e6c:	4618      	mov	r0, r3
 8019e6e:	f7f3 ffb8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019e72:	68fb      	ldr	r3, [r7, #12]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	371c      	adds	r7, #28
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd90      	pop	{r4, r7, pc}

08019e7c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019e7c:	b590      	push	{r4, r7, lr}
 8019e7e:	b08f      	sub	sp, #60	; 0x3c
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	60f8      	str	r0, [r7, #12]
 8019e84:	60b9      	str	r1, [r7, #8]
 8019e86:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019e88:	68b9      	ldr	r1, [r7, #8]
 8019e8a:	68f8      	ldr	r0, [r7, #12]
 8019e8c:	f7ff ffb2 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	1d1c      	adds	r4, r3, #4
 8019e94:	f107 0320 	add.w	r3, r7, #32
 8019e98:	6879      	ldr	r1, [r7, #4]
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f7f4 fcd0 	bl	800e840 <_Z10StringFromj>
 8019ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ea4:	491f      	ldr	r1, [pc, #124]	; (8019f24 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f7f3 fbe3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8019eac:	f107 0318 	add.w	r3, r7, #24
 8019eb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019eb4:	f107 0120 	add.w	r1, r7, #32
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7f3 fff4 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8019ebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ec2:	6879      	ldr	r1, [r7, #4]
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f7f4 fb5f 	bl	800e588 <_Z30BracketsFormattedHexStringFromj>
 8019eca:	f107 0310 	add.w	r3, r7, #16
 8019ece:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019ed2:	f107 0118 	add.w	r1, r7, #24
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f7f3 ffe5 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8019edc:	f107 0310 	add.w	r3, r7, #16
 8019ee0:	4619      	mov	r1, r3
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	f7f3 fffa 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8019ee8:	f107 0310 	add.w	r3, r7, #16
 8019eec:	4618      	mov	r0, r3
 8019eee:	f7f3 ff78 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	f7f3 ff73 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019efc:	f107 0318 	add.w	r3, r7, #24
 8019f00:	4618      	mov	r0, r3
 8019f02:	f7f3 ff6e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7f3 ff69 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019f10:	f107 0320 	add.w	r3, r7, #32
 8019f14:	4618      	mov	r0, r3
 8019f16:	f7f3 ff64 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019f1a:	68fb      	ldr	r3, [r7, #12]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	373c      	adds	r7, #60	; 0x3c
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd90      	pop	{r4, r7, pc}
 8019f24:	08026df4 	.word	0x08026df4

08019f28 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8019f28:	b590      	push	{r4, r7, lr}
 8019f2a:	b08f      	sub	sp, #60	; 0x3c
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	60f8      	str	r0, [r7, #12]
 8019f30:	60b9      	str	r1, [r7, #8]
 8019f32:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019f34:	68b9      	ldr	r1, [r7, #8]
 8019f36:	68f8      	ldr	r0, [r7, #12]
 8019f38:	f7ff ff5c 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	1d1c      	adds	r4, r3, #4
 8019f40:	f107 0320 	add.w	r3, r7, #32
 8019f44:	6879      	ldr	r1, [r7, #4]
 8019f46:	4618      	mov	r0, r3
 8019f48:	f7f4 fa12 	bl	800e370 <_Z10StringFromi>
 8019f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019f50:	491f      	ldr	r1, [pc, #124]	; (8019fd0 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7f3 fb8d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8019f58:	f107 0318 	add.w	r3, r7, #24
 8019f5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019f60:	f107 0120 	add.w	r1, r7, #32
 8019f64:	4618      	mov	r0, r3
 8019f66:	f7f3 ff9e 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8019f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019f6e:	6879      	ldr	r1, [r7, #4]
 8019f70:	4618      	mov	r0, r3
 8019f72:	f7f4 faed 	bl	800e550 <_Z30BracketsFormattedHexStringFromi>
 8019f76:	f107 0310 	add.w	r3, r7, #16
 8019f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019f7e:	f107 0118 	add.w	r1, r7, #24
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7f3 ff8f 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 8019f88:	f107 0310 	add.w	r3, r7, #16
 8019f8c:	4619      	mov	r1, r3
 8019f8e:	4620      	mov	r0, r4
 8019f90:	f7f3 ffa4 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 8019f94:	f107 0310 	add.w	r3, r7, #16
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7f3 ff22 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f7f3 ff1d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019fa8:	f107 0318 	add.w	r3, r7, #24
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7f3 ff18 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f7f3 ff13 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8019fbc:	f107 0320 	add.w	r3, r7, #32
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f3 ff0e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 8019fc6:	68fb      	ldr	r3, [r7, #12]
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	373c      	adds	r7, #60	; 0x3c
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bd90      	pop	{r4, r7, pc}
 8019fd0:	08026df4 	.word	0x08026df4

08019fd4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019fd4:	b590      	push	{r4, r7, lr}
 8019fd6:	b08f      	sub	sp, #60	; 0x3c
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	60f8      	str	r0, [r7, #12]
 8019fdc:	60b9      	str	r1, [r7, #8]
 8019fde:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8019fe0:	68b9      	ldr	r1, [r7, #8]
 8019fe2:	68f8      	ldr	r0, [r7, #12]
 8019fe4:	f7ff ff06 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	1d1c      	adds	r4, r3, #4
 8019fec:	f107 0320 	add.w	r3, r7, #32
 8019ff0:	6879      	ldr	r1, [r7, #4]
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7f4 fc36 	bl	800e864 <_Z10StringFromm>
 8019ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019ffc:	491f      	ldr	r1, [pc, #124]	; (801a07c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8019ffe:	4618      	mov	r0, r3
 801a000:	f7f3 fb37 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801a004:	f107 0318 	add.w	r3, r7, #24
 801a008:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a00c:	f107 0120 	add.w	r1, r7, #32
 801a010:	4618      	mov	r0, r3
 801a012:	f7f3 ff48 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801a016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a01a:	6879      	ldr	r1, [r7, #4]
 801a01c:	4618      	mov	r0, r3
 801a01e:	f7f4 faeb 	bl	800e5f8 <_Z30BracketsFormattedHexStringFromm>
 801a022:	f107 0310 	add.w	r3, r7, #16
 801a026:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a02a:	f107 0118 	add.w	r1, r7, #24
 801a02e:	4618      	mov	r0, r3
 801a030:	f7f3 ff39 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801a034:	f107 0310 	add.w	r3, r7, #16
 801a038:	4619      	mov	r1, r3
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7f3 ff4e 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a040:	f107 0310 	add.w	r3, r7, #16
 801a044:	4618      	mov	r0, r3
 801a046:	f7f3 fecc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a04a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a04e:	4618      	mov	r0, r3
 801a050:	f7f3 fec7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a054:	f107 0318 	add.w	r3, r7, #24
 801a058:	4618      	mov	r0, r3
 801a05a:	f7f3 fec2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a05e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a062:	4618      	mov	r0, r3
 801a064:	f7f3 febd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a068:	f107 0320 	add.w	r3, r7, #32
 801a06c:	4618      	mov	r0, r3
 801a06e:	f7f3 feb8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a072:	68fb      	ldr	r3, [r7, #12]
}
 801a074:	4618      	mov	r0, r3
 801a076:	373c      	adds	r7, #60	; 0x3c
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd90      	pop	{r4, r7, pc}
 801a07c:	08026df4 	.word	0x08026df4

0801a080 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801a080:	b590      	push	{r4, r7, lr}
 801a082:	b08f      	sub	sp, #60	; 0x3c
 801a084:	af00      	add	r7, sp, #0
 801a086:	60f8      	str	r0, [r7, #12]
 801a088:	60b9      	str	r1, [r7, #8]
 801a08a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a08c:	68b9      	ldr	r1, [r7, #8]
 801a08e:	68f8      	ldr	r0, [r7, #12]
 801a090:	f7ff feb0 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	1d1c      	adds	r4, r3, #4
 801a098:	f107 0320 	add.w	r3, r7, #32
 801a09c:	6879      	ldr	r1, [r7, #4]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7f4 f978 	bl	800e394 <_Z10StringFroml>
 801a0a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a0a8:	491f      	ldr	r1, [pc, #124]	; (801a128 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f7f3 fae1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801a0b0:	f107 0318 	add.w	r3, r7, #24
 801a0b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a0b8:	f107 0120 	add.w	r1, r7, #32
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7f3 fef2 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801a0c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a0c6:	6879      	ldr	r1, [r7, #4]
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7f4 fa79 	bl	800e5c0 <_Z30BracketsFormattedHexStringFroml>
 801a0ce:	f107 0310 	add.w	r3, r7, #16
 801a0d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a0d6:	f107 0118 	add.w	r1, r7, #24
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7f3 fee3 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801a0e0:	f107 0310 	add.w	r3, r7, #16
 801a0e4:	4619      	mov	r1, r3
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	f7f3 fef8 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a0ec:	f107 0310 	add.w	r3, r7, #16
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7f3 fe76 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a0f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7f3 fe71 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a100:	f107 0318 	add.w	r3, r7, #24
 801a104:	4618      	mov	r0, r3
 801a106:	f7f3 fe6c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a10a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a10e:	4618      	mov	r0, r3
 801a110:	f7f3 fe67 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801a114:	f107 0320 	add.w	r3, r7, #32
 801a118:	4618      	mov	r0, r3
 801a11a:	f7f3 fe62 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a11e:	68fb      	ldr	r3, [r7, #12]
}
 801a120:	4618      	mov	r0, r3
 801a122:	373c      	adds	r7, #60	; 0x3c
 801a124:	46bd      	mov	sp, r7
 801a126:	bd90      	pop	{r4, r7, pc}
 801a128:	08026df4 	.word	0x08026df4

0801a12c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a12c:	b5b0      	push	{r4, r5, r7, lr}
 801a12e:	b086      	sub	sp, #24
 801a130:	af02      	add	r7, sp, #8
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	60b9      	str	r1, [r7, #8]
 801a136:	4639      	mov	r1, r7
 801a138:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a13c:	f7fa fe7c 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a140:	4604      	mov	r4, r0
 801a142:	6823      	ldr	r3, [r4, #0]
 801a144:	3368      	adds	r3, #104	; 0x68
 801a146:	681d      	ldr	r5, [r3, #0]
 801a148:	f7fa fe86 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a14c:	4603      	mov	r3, r0
 801a14e:	9300      	str	r3, [sp, #0]
 801a150:	f240 23ee 	movw	r3, #750	; 0x2ee
 801a154:	4a04      	ldr	r2, [pc, #16]	; (801a168 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a156:	4905      	ldr	r1, [pc, #20]	; (801a16c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801a158:	4620      	mov	r0, r4
 801a15a:	47a8      	blx	r5
    return *this;
 801a15c:	68fb      	ldr	r3, [r7, #12]
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3710      	adds	r7, #16
 801a162:	46bd      	mov	sp, r7
 801a164:	bdb0      	pop	{r4, r5, r7, pc}
 801a166:	bf00      	nop
 801a168:	08026ce0 	.word	0x08026ce0
 801a16c:	08026cfc 	.word	0x08026cfc

0801a170 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a170:	b5b0      	push	{r4, r5, r7, lr}
 801a172:	b086      	sub	sp, #24
 801a174:	af02      	add	r7, sp, #8
 801a176:	60f8      	str	r0, [r7, #12]
 801a178:	60b9      	str	r1, [r7, #8]
 801a17a:	4639      	mov	r1, r7
 801a17c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a180:	f7fa fe5a 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a184:	4604      	mov	r4, r0
 801a186:	6823      	ldr	r3, [r4, #0]
 801a188:	3368      	adds	r3, #104	; 0x68
 801a18a:	681d      	ldr	r5, [r3, #0]
 801a18c:	f7fa fe64 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a190:	4603      	mov	r3, r0
 801a192:	9300      	str	r3, [sp, #0]
 801a194:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801a198:	4a04      	ldr	r2, [pc, #16]	; (801a1ac <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a19a:	4905      	ldr	r1, [pc, #20]	; (801a1b0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801a19c:	4620      	mov	r0, r4
 801a19e:	47a8      	blx	r5
    return *this;
 801a1a0:	68fb      	ldr	r3, [r7, #12]
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3710      	adds	r7, #16
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a1aa:	bf00      	nop
 801a1ac:	08026ce0 	.word	0x08026ce0
 801a1b0:	08026d28 	.word	0x08026d28

0801a1b4 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801a1b4:	b590      	push	{r4, r7, lr}
 801a1b6:	b087      	sub	sp, #28
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	60f8      	str	r0, [r7, #12]
 801a1bc:	60b9      	str	r1, [r7, #8]
 801a1be:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801a1c2:	68b9      	ldr	r1, [r7, #8]
 801a1c4:	68f8      	ldr	r0, [r7, #12]
 801a1c6:	f7ff fe15 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	1d1c      	adds	r4, r3, #4
 801a1ce:	f107 0310 	add.w	r3, r7, #16
 801a1d2:	2106      	movs	r1, #6
 801a1d4:	ed97 0b00 	vldr	d0, [r7]
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f4 fac7 	bl	800e76c <_Z10StringFromdi>
 801a1de:	f107 0310 	add.w	r3, r7, #16
 801a1e2:	4619      	mov	r1, r3
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	f7f3 fe79 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a1ea:	f107 0310 	add.w	r3, r7, #16
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7f3 fdf7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a1f4:	68fb      	ldr	r3, [r7, #12]
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	371c      	adds	r7, #28
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd90      	pop	{r4, r7, pc}

0801a1fe <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801a1fe:	b590      	push	{r4, r7, lr}
 801a200:	b087      	sub	sp, #28
 801a202:	af00      	add	r7, sp, #0
 801a204:	60f8      	str	r0, [r7, #12]
 801a206:	60b9      	str	r1, [r7, #8]
 801a208:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a20a:	68b9      	ldr	r1, [r7, #8]
 801a20c:	68f8      	ldr	r0, [r7, #12]
 801a20e:	f7ff fdf1 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	1d1c      	adds	r4, r3, #4
 801a216:	f107 0310 	add.w	r3, r7, #16
 801a21a:	6879      	ldr	r1, [r7, #4]
 801a21c:	4618      	mov	r0, r3
 801a21e:	f7f4 f86d 	bl	800e2fc <_Z10StringFromPKc>
 801a222:	f107 0310 	add.w	r3, r7, #16
 801a226:	4619      	mov	r1, r3
 801a228:	4620      	mov	r0, r4
 801a22a:	f7f3 fe57 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a22e:	f107 0310 	add.w	r3, r7, #16
 801a232:	4618      	mov	r0, r3
 801a234:	f7f3 fdd5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a238:	68fb      	ldr	r3, [r7, #12]
}
 801a23a:	4618      	mov	r0, r3
 801a23c:	371c      	adds	r7, #28
 801a23e:	46bd      	mov	sp, r7
 801a240:	bd90      	pop	{r4, r7, pc}

0801a242 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801a242:	b590      	push	{r4, r7, lr}
 801a244:	b087      	sub	sp, #28
 801a246:	af00      	add	r7, sp, #0
 801a248:	60f8      	str	r0, [r7, #12]
 801a24a:	60b9      	str	r1, [r7, #8]
 801a24c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a24e:	68b9      	ldr	r1, [r7, #8]
 801a250:	68f8      	ldr	r0, [r7, #12]
 801a252:	f7ff fdcf 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	1d1c      	adds	r4, r3, #4
 801a25a:	f107 0310 	add.w	r3, r7, #16
 801a25e:	6879      	ldr	r1, [r7, #4]
 801a260:	4618      	mov	r0, r3
 801a262:	f7f4 f8a9 	bl	800e3b8 <_Z10StringFromPKv>
 801a266:	f107 0310 	add.w	r3, r7, #16
 801a26a:	4619      	mov	r1, r3
 801a26c:	4620      	mov	r0, r4
 801a26e:	f7f3 fe35 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a272:	f107 0310 	add.w	r3, r7, #16
 801a276:	4618      	mov	r0, r3
 801a278:	f7f3 fdb3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a27c:	68fb      	ldr	r3, [r7, #12]
}
 801a27e:	4618      	mov	r0, r3
 801a280:	371c      	adds	r7, #28
 801a282:	46bd      	mov	sp, r7
 801a284:	bd90      	pop	{r4, r7, pc}

0801a286 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a286:	b590      	push	{r4, r7, lr}
 801a288:	b087      	sub	sp, #28
 801a28a:	af00      	add	r7, sp, #0
 801a28c:	60f8      	str	r0, [r7, #12]
 801a28e:	60b9      	str	r1, [r7, #8]
 801a290:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a292:	68b9      	ldr	r1, [r7, #8]
 801a294:	68f8      	ldr	r0, [r7, #12]
 801a296:	f7ff fdad 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	1d1c      	adds	r4, r3, #4
 801a29e:	f107 0310 	add.w	r3, r7, #16
 801a2a2:	6879      	ldr	r1, [r7, #4]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7f4 f887 	bl	800e3b8 <_Z10StringFromPKv>
 801a2aa:	f107 0310 	add.w	r3, r7, #16
 801a2ae:	4619      	mov	r1, r3
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f7f3 fe13 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a2b6:	f107 0310 	add.w	r3, r7, #16
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f7f3 fd91 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a2c0:	68fb      	ldr	r3, [r7, #12]
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	371c      	adds	r7, #28
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bd90      	pop	{r4, r7, pc}

0801a2ca <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a2ca:	b590      	push	{r4, r7, lr}
 801a2cc:	b087      	sub	sp, #28
 801a2ce:	af00      	add	r7, sp, #0
 801a2d0:	60f8      	str	r0, [r7, #12]
 801a2d2:	60b9      	str	r1, [r7, #8]
 801a2d4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a2d6:	68b9      	ldr	r1, [r7, #8]
 801a2d8:	68f8      	ldr	r0, [r7, #12]
 801a2da:	f7ff fd8b 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	1d1c      	adds	r4, r3, #4
 801a2e2:	f107 0310 	add.w	r3, r7, #16
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f7f4 f88f 	bl	800e40c <_Z10StringFromPFvvE>
 801a2ee:	f107 0310 	add.w	r3, r7, #16
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	f7f3 fdf1 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a2fa:	f107 0310 	add.w	r3, r7, #16
 801a2fe:	4618      	mov	r0, r3
 801a300:	f7f3 fd6f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a304:	68fb      	ldr	r3, [r7, #12]
}
 801a306:	4618      	mov	r0, r3
 801a308:	371c      	adds	r7, #28
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd90      	pop	{r4, r7, pc}

0801a30e <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a30e:	b590      	push	{r4, r7, lr}
 801a310:	b087      	sub	sp, #28
 801a312:	af00      	add	r7, sp, #0
 801a314:	60f8      	str	r0, [r7, #12]
 801a316:	60b9      	str	r1, [r7, #8]
 801a318:	607a      	str	r2, [r7, #4]
 801a31a:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801a31c:	68b9      	ldr	r1, [r7, #8]
 801a31e:	68f8      	ldr	r0, [r7, #12]
 801a320:	f7ff fd68 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	1d1c      	adds	r4, r3, #4
 801a328:	f107 0310 	add.w	r3, r7, #16
 801a32c:	683a      	ldr	r2, [r7, #0]
 801a32e:	6879      	ldr	r1, [r7, #4]
 801a330:	4618      	mov	r0, r3
 801a332:	f7f4 fbaf 	bl	800ea94 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801a336:	f107 0310 	add.w	r3, r7, #16
 801a33a:	4619      	mov	r1, r3
 801a33c:	4620      	mov	r0, r4
 801a33e:	f7f3 fdcd 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a342:	f107 0310 	add.w	r3, r7, #16
 801a346:	4618      	mov	r0, r3
 801a348:	f7f3 fd4b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a34c:	68fb      	ldr	r3, [r7, #12]
}
 801a34e:	4618      	mov	r0, r3
 801a350:	371c      	adds	r7, #28
 801a352:	46bd      	mov	sp, r7
 801a354:	bd90      	pop	{r4, r7, pc}
	...

0801a358 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801a358:	b590      	push	{r4, r7, lr}
 801a35a:	b087      	sub	sp, #28
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	60f8      	str	r0, [r7, #12]
 801a360:	60b9      	str	r1, [r7, #8]
 801a362:	607a      	str	r2, [r7, #4]
 801a364:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	3304      	adds	r3, #4
 801a36a:	4913      	ldr	r1, [pc, #76]	; (801a3b8 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801a36c:	4618      	mov	r0, r3
 801a36e:	f7f3 fdc7 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	3304      	adds	r3, #4
 801a376:	68b9      	ldr	r1, [r7, #8]
 801a378:	4618      	mov	r0, r3
 801a37a:	f7f3 fdaf 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801a37e:	6879      	ldr	r1, [r7, #4]
 801a380:	68f8      	ldr	r0, [r7, #12]
 801a382:	f7ff fd37 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	1d1c      	adds	r4, r3, #4
 801a38a:	f107 0310 	add.w	r3, r7, #16
 801a38e:	6839      	ldr	r1, [r7, #0]
 801a390:	4618      	mov	r0, r3
 801a392:	f7f4 f811 	bl	800e3b8 <_Z10StringFromPKv>
 801a396:	f107 0310 	add.w	r3, r7, #16
 801a39a:	4619      	mov	r1, r3
 801a39c:	4620      	mov	r0, r4
 801a39e:	f7f3 fd9d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a3a2:	f107 0310 	add.w	r3, r7, #16
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	f7f3 fd1b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a3ac:	68fb      	ldr	r3, [r7, #12]
}
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	371c      	adds	r7, #28
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bd90      	pop	{r4, r7, pc}
 801a3b6:	bf00      	nop
 801a3b8:	08026df4 	.word	0x08026df4

0801a3bc <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801a3bc:	b590      	push	{r4, r7, lr}
 801a3be:	b087      	sub	sp, #28
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	60f8      	str	r0, [r7, #12]
 801a3c4:	60b9      	str	r1, [r7, #8]
 801a3c6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a3c8:	68b9      	ldr	r1, [r7, #8]
 801a3ca:	68f8      	ldr	r0, [r7, #12]
 801a3cc:	f7ff fd12 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	1d1c      	adds	r4, r3, #4
 801a3d4:	f107 0310 	add.w	r3, r7, #16
 801a3d8:	6879      	ldr	r1, [r7, #4]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7f3 ffec 	bl	800e3b8 <_Z10StringFromPKv>
 801a3e0:	f107 0310 	add.w	r3, r7, #16
 801a3e4:	4619      	mov	r1, r3
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	f7f3 fd78 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a3ec:	f107 0310 	add.w	r3, r7, #16
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f7f3 fcf6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	371c      	adds	r7, #28
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd90      	pop	{r4, r7, pc}

0801a400 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801a400:	b590      	push	{r4, r7, lr}
 801a402:	b087      	sub	sp, #28
 801a404:	af00      	add	r7, sp, #0
 801a406:	60f8      	str	r0, [r7, #12]
 801a408:	60b9      	str	r1, [r7, #8]
 801a40a:	607a      	str	r2, [r7, #4]
 801a40c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	3304      	adds	r3, #4
 801a412:	4913      	ldr	r1, [pc, #76]	; (801a460 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801a414:	4618      	mov	r0, r3
 801a416:	f7f3 fd73 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	3304      	adds	r3, #4
 801a41e:	68b9      	ldr	r1, [r7, #8]
 801a420:	4618      	mov	r0, r3
 801a422:	f7f3 fd5b 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801a426:	6879      	ldr	r1, [r7, #4]
 801a428:	68f8      	ldr	r0, [r7, #12]
 801a42a:	f7ff fce3 	bl	8019df4 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	1d1c      	adds	r4, r3, #4
 801a432:	f107 0310 	add.w	r3, r7, #16
 801a436:	6839      	ldr	r1, [r7, #0]
 801a438:	4618      	mov	r0, r3
 801a43a:	f7f3 ffbd 	bl	800e3b8 <_Z10StringFromPKv>
 801a43e:	f107 0310 	add.w	r3, r7, #16
 801a442:	4619      	mov	r1, r3
 801a444:	4620      	mov	r0, r4
 801a446:	f7f3 fd49 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a44a:	f107 0310 	add.w	r3, r7, #16
 801a44e:	4618      	mov	r0, r3
 801a450:	f7f3 fcc7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a454:	68fb      	ldr	r3, [r7, #12]
}
 801a456:	4618      	mov	r0, r3
 801a458:	371c      	adds	r7, #28
 801a45a:	46bd      	mov	sp, r7
 801a45c:	bd90      	pop	{r4, r7, pc}
 801a45e:	bf00      	nop
 801a460:	08026df4 	.word	0x08026df4

0801a464 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801a464:	b480      	push	{r7}
 801a466:	b083      	sub	sp, #12
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
    return false;
 801a46c:	2300      	movs	r3, #0
}
 801a46e:	4618      	mov	r0, r3
 801a470:	370c      	adds	r7, #12
 801a472:	46bd      	mov	sp, r7
 801a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a478:	4770      	bx	lr
	...

0801a47c <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
 801a484:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801a486:	f107 0308 	add.w	r3, r7, #8
 801a48a:	4909      	ldr	r1, [pc, #36]	; (801a4b0 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7f3 f8f0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801a492:	f107 0308 	add.w	r3, r7, #8
 801a496:	4619      	mov	r1, r3
 801a498:	6878      	ldr	r0, [r7, #4]
 801a49a:	f003 fe0f 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 801a49e:	f107 0308 	add.w	r3, r7, #8
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7f3 fc9d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801a4a8:	6878      	ldr	r0, [r7, #4]
 801a4aa:	3710      	adds	r7, #16
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd80      	pop	{r7, pc}
 801a4b0:	08026cc8 	.word	0x08026cc8

0801a4b4 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b083      	sub	sp, #12
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
    return 0;
 801a4bc:	2300      	movs	r3, #0
}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	370c      	adds	r7, #12
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c8:	4770      	bx	lr

0801a4ca <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801a4ca:	b480      	push	{r7}
 801a4cc:	b083      	sub	sp, #12
 801a4ce:	af00      	add	r7, sp, #0
 801a4d0:	6078      	str	r0, [r7, #4]
    return 0;
 801a4d2:	2300      	movs	r3, #0
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	370c      	adds	r7, #12
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4de:	4770      	bx	lr

0801a4e0 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801a4e0:	b480      	push	{r7}
 801a4e2:	b083      	sub	sp, #12
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
 801a4e8:	6039      	str	r1, [r7, #0]
    return 0;
 801a4ea:	2300      	movs	r3, #0
}
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	370c      	adds	r7, #12
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f6:	4770      	bx	lr

0801a4f8 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
    return 0;
 801a502:	2300      	movs	r3, #0
}
 801a504:	4618      	mov	r0, r3
 801a506:	370c      	adds	r7, #12
 801a508:	46bd      	mov	sp, r7
 801a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50e:	4770      	bx	lr

0801a510 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801a510:	b5b0      	push	{r4, r5, r7, lr}
 801a512:	b084      	sub	sp, #16
 801a514:	af02      	add	r7, sp, #8
 801a516:	6078      	str	r0, [r7, #4]
 801a518:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801a51a:	f7fa fc8d 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a51e:	4604      	mov	r4, r0
 801a520:	6823      	ldr	r3, [r4, #0]
 801a522:	3368      	adds	r3, #104	; 0x68
 801a524:	681d      	ldr	r5, [r3, #0]
 801a526:	f7fa fc97 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a52a:	4603      	mov	r3, r0
 801a52c:	9300      	str	r3, [sp, #0]
 801a52e:	f240 3375 	movw	r3, #885	; 0x375
 801a532:	4a06      	ldr	r2, [pc, #24]	; (801a54c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801a534:	4906      	ldr	r1, [pc, #24]	; (801a550 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801a536:	4620      	mov	r0, r4
 801a538:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a53a:	2100      	movs	r1, #0
 801a53c:	6878      	ldr	r0, [r7, #4]
 801a53e:	f7f1 f8cf 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
}
 801a542:	6878      	ldr	r0, [r7, #4]
 801a544:	3708      	adds	r7, #8
 801a546:	46bd      	mov	sp, r7
 801a548:	bdb0      	pop	{r4, r5, r7, pc}
 801a54a:	bf00      	nop
 801a54c:	08026ce0 	.word	0x08026ce0
 801a550:	08026d28 	.word	0x08026d28

0801a554 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801a554:	b5b0      	push	{r4, r5, r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af02      	add	r7, sp, #8
 801a55a:	6078      	str	r0, [r7, #4]
 801a55c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801a55e:	f7fa fc6b 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a562:	4604      	mov	r4, r0
 801a564:	6823      	ldr	r3, [r4, #0]
 801a566:	3368      	adds	r3, #104	; 0x68
 801a568:	681d      	ldr	r5, [r3, #0]
 801a56a:	f7fa fc75 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a56e:	4603      	mov	r3, r0
 801a570:	9300      	str	r3, [sp, #0]
 801a572:	f240 337b 	movw	r3, #891	; 0x37b
 801a576:	4a06      	ldr	r2, [pc, #24]	; (801a590 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801a578:	4906      	ldr	r1, [pc, #24]	; (801a594 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801a57a:	4620      	mov	r0, r4
 801a57c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a57e:	2100      	movs	r1, #0
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	f7f1 f8b9 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
}
 801a586:	6878      	ldr	r0, [r7, #4]
 801a588:	3708      	adds	r7, #8
 801a58a:	46bd      	mov	sp, r7
 801a58c:	bdb0      	pop	{r4, r5, r7, pc}
 801a58e:	bf00      	nop
 801a590:	08026ce0 	.word	0x08026ce0
 801a594:	08026cfc 	.word	0x08026cfc

0801a598 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801a598:	b5b0      	push	{r4, r5, r7, lr}
 801a59a:	b086      	sub	sp, #24
 801a59c:	af02      	add	r7, sp, #8
 801a59e:	60f8      	str	r0, [r7, #12]
 801a5a0:	60b9      	str	r1, [r7, #8]
 801a5a2:	4639      	mov	r1, r7
 801a5a4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a5a8:	f7fa fc46 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a5ac:	4604      	mov	r4, r0
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	3368      	adds	r3, #104	; 0x68
 801a5b2:	681d      	ldr	r5, [r3, #0]
 801a5b4:	f7fa fc50 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	9300      	str	r3, [sp, #0]
 801a5bc:	f240 3381 	movw	r3, #897	; 0x381
 801a5c0:	4a05      	ldr	r2, [pc, #20]	; (801a5d8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801a5c2:	4906      	ldr	r1, [pc, #24]	; (801a5dc <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a5c8:	2100      	movs	r1, #0
 801a5ca:	68f8      	ldr	r0, [r7, #12]
 801a5cc:	f7f1 f894 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
}
 801a5d0:	68f8      	ldr	r0, [r7, #12]
 801a5d2:	3710      	adds	r7, #16
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bdb0      	pop	{r4, r5, r7, pc}
 801a5d8:	08026ce0 	.word	0x08026ce0
 801a5dc:	08026cfc 	.word	0x08026cfc

0801a5e0 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801a5e0:	b5b0      	push	{r4, r5, r7, lr}
 801a5e2:	b086      	sub	sp, #24
 801a5e4:	af02      	add	r7, sp, #8
 801a5e6:	60f8      	str	r0, [r7, #12]
 801a5e8:	60b9      	str	r1, [r7, #8]
 801a5ea:	4639      	mov	r1, r7
 801a5ec:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a5f0:	f7fa fc22 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801a5f4:	4604      	mov	r4, r0
 801a5f6:	6823      	ldr	r3, [r4, #0]
 801a5f8:	3368      	adds	r3, #104	; 0x68
 801a5fa:	681d      	ldr	r5, [r3, #0]
 801a5fc:	f7fa fc2c 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a600:	4603      	mov	r3, r0
 801a602:	9300      	str	r3, [sp, #0]
 801a604:	f240 3387 	movw	r3, #903	; 0x387
 801a608:	4a05      	ldr	r2, [pc, #20]	; (801a620 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801a60a:	4906      	ldr	r1, [pc, #24]	; (801a624 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801a60c:	4620      	mov	r0, r4
 801a60e:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a610:	2100      	movs	r1, #0
 801a612:	68f8      	ldr	r0, [r7, #12]
 801a614:	f7f1 f864 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
}
 801a618:	68f8      	ldr	r0, [r7, #12]
 801a61a:	3710      	adds	r7, #16
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bdb0      	pop	{r4, r5, r7, pc}
 801a620:	08026ce0 	.word	0x08026ce0
 801a624:	08026d28 	.word	0x08026d28

0801a628 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801a628:	b480      	push	{r7}
 801a62a:	b083      	sub	sp, #12
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
    return false;
 801a630:	2300      	movs	r3, #0
}
 801a632:	4618      	mov	r0, r3
 801a634:	370c      	adds	r7, #12
 801a636:	46bd      	mov	sp, r7
 801a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a63c:	4770      	bx	lr

0801a63e <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801a63e:	b480      	push	{r7}
 801a640:	b083      	sub	sp, #12
 801a642:	af00      	add	r7, sp, #0
 801a644:	6078      	str	r0, [r7, #4]
 801a646:	460b      	mov	r3, r1
 801a648:	70fb      	strb	r3, [r7, #3]
    return false;
 801a64a:	2300      	movs	r3, #0
}
 801a64c:	4618      	mov	r0, r3
 801a64e:	370c      	adds	r7, #12
 801a650:	46bd      	mov	sp, r7
 801a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a656:	4770      	bx	lr

0801a658 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801a658:	b480      	push	{r7}
 801a65a:	b083      	sub	sp, #12
 801a65c:	af00      	add	r7, sp, #0
 801a65e:	6078      	str	r0, [r7, #4]
    return 0;
 801a660:	2300      	movs	r3, #0
}
 801a662:	4618      	mov	r0, r3
 801a664:	370c      	adds	r7, #12
 801a666:	46bd      	mov	sp, r7
 801a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66c:	4770      	bx	lr

0801a66e <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801a66e:	b480      	push	{r7}
 801a670:	b083      	sub	sp, #12
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
    return 0.0;
 801a676:	f04f 0200 	mov.w	r2, #0
 801a67a:	f04f 0300 	mov.w	r3, #0
 801a67e:	ec43 2b17 	vmov	d7, r2, r3
}
 801a682:	eeb0 0a47 	vmov.f32	s0, s14
 801a686:	eef0 0a67 	vmov.f32	s1, s15
 801a68a:	370c      	adds	r7, #12
 801a68c:	46bd      	mov	sp, r7
 801a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a692:	4770      	bx	lr

0801a694 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b084      	sub	sp, #16
 801a698:	af00      	add	r7, sp, #0
 801a69a:	60f8      	str	r0, [r7, #12]
 801a69c:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	3398      	adds	r3, #152	; 0x98
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	68f8      	ldr	r0, [r7, #12]
 801a6aa:	4798      	blx	r3
 801a6ac:	eeb0 7a40 	vmov.f32	s14, s0
 801a6b0:	eef0 7a60 	vmov.f32	s15, s1
}
 801a6b4:	eeb0 0a47 	vmov.f32	s0, s14
 801a6b8:	eef0 0a67 	vmov.f32	s1, s15
 801a6bc:	3710      	adds	r7, #16
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	bd80      	pop	{r7, pc}

0801a6c2 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801a6c2:	b480      	push	{r7}
 801a6c4:	b083      	sub	sp, #12
 801a6c6:	af00      	add	r7, sp, #0
 801a6c8:	6078      	str	r0, [r7, #4]
    return 0;
 801a6ca:	2300      	movs	r3, #0
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	370c      	adds	r7, #12
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d6:	4770      	bx	lr

0801a6d8 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b083      	sub	sp, #12
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a6e0:	2300      	movs	r3, #0
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	370c      	adds	r7, #12
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ec:	4770      	bx	lr

0801a6ee <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801a6ee:	b480      	push	{r7}
 801a6f0:	b083      	sub	sp, #12
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	370c      	adds	r7, #12
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a702:	4770      	bx	lr

0801a704 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801a704:	b480      	push	{r7}
 801a706:	b083      	sub	sp, #12
 801a708:	af00      	add	r7, sp, #0
 801a70a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801a70c:	2300      	movs	r3, #0
}
 801a70e:	4618      	mov	r0, r3
 801a710:	370c      	adds	r7, #12
 801a712:	46bd      	mov	sp, r7
 801a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a718:	4770      	bx	lr

0801a71a <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801a71a:	b580      	push	{r7, lr}
 801a71c:	b082      	sub	sp, #8
 801a71e:	af00      	add	r7, sp, #0
 801a720:	6078      	str	r0, [r7, #4]
 801a722:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	33a8      	adds	r3, #168	; 0xa8
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	6878      	ldr	r0, [r7, #4]
 801a72e:	4798      	blx	r3
 801a730:	4603      	mov	r3, r0
}
 801a732:	4618      	mov	r0, r3
 801a734:	3708      	adds	r7, #8
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}

0801a73a <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801a73a:	b580      	push	{r7, lr}
 801a73c:	b082      	sub	sp, #8
 801a73e:	af00      	add	r7, sp, #0
 801a740:	6078      	str	r0, [r7, #4]
 801a742:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	33a0      	adds	r3, #160	; 0xa0
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	4798      	blx	r3
 801a750:	4603      	mov	r3, r0
}
 801a752:	4618      	mov	r0, r3
 801a754:	3708      	adds	r7, #8
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}

0801a75a <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801a75a:	b580      	push	{r7, lr}
 801a75c:	b082      	sub	sp, #8
 801a75e:	af00      	add	r7, sp, #0
 801a760:	6078      	str	r0, [r7, #4]
 801a762:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	33b0      	adds	r3, #176	; 0xb0
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	4798      	blx	r3
 801a770:	4603      	mov	r3, r0
}
 801a772:	4618      	mov	r0, r3
 801a774:	3708      	adds	r7, #8
 801a776:	46bd      	mov	sp, r7
 801a778:	bd80      	pop	{r7, pc}
	...

0801a77c <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801a77c:	b480      	push	{r7}
 801a77e:	b083      	sub	sp, #12
 801a780:	af00      	add	r7, sp, #0
 801a782:	6078      	str	r0, [r7, #4]
    return "";
 801a784:	4b03      	ldr	r3, [pc, #12]	; (801a794 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801a786:	4618      	mov	r0, r3
 801a788:	370c      	adds	r7, #12
 801a78a:	46bd      	mov	sp, r7
 801a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a790:	4770      	bx	lr
 801a792:	bf00      	nop
 801a794:	08026cc8 	.word	0x08026cc8

0801a798 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
 801a7a0:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	3394      	adds	r3, #148	; 0x94
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	6878      	ldr	r0, [r7, #4]
 801a7ac:	4798      	blx	r3
 801a7ae:	4603      	mov	r3, r0
}
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	3708      	adds	r7, #8
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd80      	pop	{r7, pc}

0801a7b8 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	6039      	str	r1, [r7, #0]
    return 0;
 801a7c2:	2300      	movs	r3, #0
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	370c      	adds	r7, #12
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr

0801a7d0 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b082      	sub	sp, #8
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	3388      	adds	r3, #136	; 0x88
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	6878      	ldr	r0, [r7, #4]
 801a7e4:	4798      	blx	r3
 801a7e6:	4603      	mov	r3, r0
}
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	3708      	adds	r7, #8
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}

0801a7f0 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801a7f0:	b590      	push	{r4, r7, lr}
 801a7f2:	b085      	sub	sp, #20
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
 801a7f8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	3304      	adds	r3, #4
 801a7fe:	490e      	ldr	r1, [pc, #56]	; (801a838 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801a800:	4618      	mov	r0, r3
 801a802:	f7f3 fb7d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	1d1c      	adds	r4, r3, #4
 801a80a:	f107 0308 	add.w	r3, r7, #8
 801a80e:	6839      	ldr	r1, [r7, #0]
 801a810:	4618      	mov	r0, r3
 801a812:	f7f3 fdd1 	bl	800e3b8 <_Z10StringFromPKv>
 801a816:	f107 0308 	add.w	r3, r7, #8
 801a81a:	4619      	mov	r1, r3
 801a81c:	4620      	mov	r0, r4
 801a81e:	f7f3 fb5d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801a822:	f107 0308 	add.w	r3, r7, #8
 801a826:	4618      	mov	r0, r3
 801a828:	f7f3 fadb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return *this;
 801a82c:	687b      	ldr	r3, [r7, #4]
}
 801a82e:	4618      	mov	r0, r3
 801a830:	3714      	adds	r7, #20
 801a832:	46bd      	mov	sp, r7
 801a834:	bd90      	pop	{r4, r7, pc}
 801a836:	bf00      	nop
 801a838:	08026dfc 	.word	0x08026dfc

0801a83c <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801a83c:	b598      	push	{r3, r4, r7, lr}
 801a83e:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801a840:	4b09      	ldr	r3, [pc, #36]	; (801a868 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d10b      	bne.n	801a860 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801a848:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801a84c:	4907      	ldr	r1, [pc, #28]	; (801a86c <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801a84e:	200c      	movs	r0, #12
 801a850:	f7f0 fb4c 	bl	800aeec <_ZnwjPKci>
 801a854:	4604      	mov	r4, r0
 801a856:	4620      	mov	r0, r4
 801a858:	f7ff fa4c 	bl	8019cf4 <_ZN19MockActualCallTraceC1Ev>
 801a85c:	4b02      	ldr	r3, [pc, #8]	; (801a868 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a85e:	601c      	str	r4, [r3, #0]
    return *instance_;
 801a860:	4b01      	ldr	r3, [pc, #4]	; (801a868 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801a862:	681b      	ldr	r3, [r3, #0]
}
 801a864:	4618      	mov	r0, r3
 801a866:	bd98      	pop	{r3, r4, r7, pc}
 801a868:	20000f30 	.word	0x20000f30
 801a86c:	08026ce0 	.word	0x08026ce0

0801a870 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801a870:	b580      	push	{r7, lr}
 801a872:	af00      	add	r7, sp, #0
    delete instance_;
 801a874:	4b06      	ldr	r3, [pc, #24]	; (801a890 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d004      	beq.n	801a886 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801a87c:	681a      	ldr	r2, [r3, #0]
 801a87e:	3204      	adds	r2, #4
 801a880:	6812      	ldr	r2, [r2, #0]
 801a882:	4618      	mov	r0, r3
 801a884:	4790      	blx	r2
    instance_ = NULLPTR;
 801a886:	4b02      	ldr	r3, [pc, #8]	; (801a890 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801a888:	2200      	movs	r2, #0
 801a88a:	601a      	str	r2, [r3, #0]
}
 801a88c:	bf00      	nop
 801a88e:	bd80      	pop	{r7, pc}
 801a890:	20000f30 	.word	0x20000f30

0801a894 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801a894:	b580      	push	{r7, lr}
 801a896:	b082      	sub	sp, #8
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7fd fe9a 	bl	80185d8 <_ZN14MockActualCallC1Ev>
 801a8a4:	4a03      	ldr	r2, [pc, #12]	; (801a8b4 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	601a      	str	r2, [r3, #0]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	3708      	adds	r7, #8
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}
 801a8b4:	08029b34 	.word	0x08029b34

0801a8b8 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	af00      	add	r7, sp, #0
 801a8bc:	4801      	ldr	r0, [pc, #4]	; (801a8c4 <__tcf_0+0xc>)
 801a8be:	f000 f831 	bl	801a924 <_ZN21MockIgnoredActualCallD1Ev>
 801a8c2:	bd80      	pop	{r7, pc}
 801a8c4:	20000f34 	.word	0x20000f34

0801a8c8 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801a8cc:	4b12      	ldr	r3, [pc, #72]	; (801a918 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a8ce:	781b      	ldrb	r3, [r3, #0]
 801a8d0:	f3bf 8f5b 	dmb	ish
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	f003 0301 	and.w	r3, r3, #1
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	bf0c      	ite	eq
 801a8de:	2301      	moveq	r3, #1
 801a8e0:	2300      	movne	r3, #0
 801a8e2:	b2db      	uxtb	r3, r3
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d013      	beq.n	801a910 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a8e8:	480b      	ldr	r0, [pc, #44]	; (801a918 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a8ea:	f005 fd81 	bl	80203f0 <__cxa_guard_acquire>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	bf14      	ite	ne
 801a8f4:	2301      	movne	r3, #1
 801a8f6:	2300      	moveq	r3, #0
 801a8f8:	b2db      	uxtb	r3, r3
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d008      	beq.n	801a910 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801a8fe:	4807      	ldr	r0, [pc, #28]	; (801a91c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801a900:	f7ff ffc8 	bl	801a894 <_ZN21MockIgnoredActualCallC1Ev>
 801a904:	4804      	ldr	r0, [pc, #16]	; (801a918 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801a906:	f005 fd7f 	bl	8020408 <__cxa_guard_release>
 801a90a:	4805      	ldr	r0, [pc, #20]	; (801a920 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801a90c:	f005 fda3 	bl	8020456 <atexit>
    return call;
 801a910:	4b02      	ldr	r3, [pc, #8]	; (801a91c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801a912:	4618      	mov	r0, r3
 801a914:	bd80      	pop	{r7, pc}
 801a916:	bf00      	nop
 801a918:	20000f38 	.word	0x20000f38
 801a91c:	20000f34 	.word	0x20000f34
 801a920:	0801a8b9 	.word	0x0801a8b9

0801a924 <_ZN21MockIgnoredActualCallD1Ev>:
 801a924:	b580      	push	{r7, lr}
 801a926:	b082      	sub	sp, #8
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
 801a92c:	4a05      	ldr	r2, [pc, #20]	; (801a944 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	601a      	str	r2, [r3, #0]
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	4618      	mov	r0, r3
 801a936:	f7fd fe5f 	bl	80185f8 <_ZN14MockActualCallD1Ev>
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	4618      	mov	r0, r3
 801a93e:	3708      	adds	r7, #8
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	08029b34 	.word	0x08029b34

0801a948 <_ZN21MockIgnoredActualCallD0Ev>:
 801a948:	b580      	push	{r7, lr}
 801a94a:	b082      	sub	sp, #8
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
 801a950:	6878      	ldr	r0, [r7, #4]
 801a952:	f7ff ffe7 	bl	801a924 <_ZN21MockIgnoredActualCallD1Ev>
 801a956:	2104      	movs	r1, #4
 801a958:	6878      	ldr	r0, [r7, #4]
 801a95a:	f7f0 fadb 	bl	800af14 <_ZdlPvj>
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	4618      	mov	r0, r3
 801a962:	3708      	adds	r7, #8
 801a964:	46bd      	mov	sp, r7
 801a966:	bd80      	pop	{r7, pc}

0801a968 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801a968:	b580      	push	{r7, lr}
 801a96a:	b082      	sub	sp, #8
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	4a05      	ldr	r2, [pc, #20]	; (801a988 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	601a      	str	r2, [r3, #0]
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	4618      	mov	r0, r3
 801a97a:	f7f0 fefd 	bl	800b778 <_ZN11MockFailureD1Ev>
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	4618      	mov	r0, r3
 801a982:	3708      	adds	r7, #8
 801a984:	46bd      	mov	sp, r7
 801a986:	bd80      	pop	{r7, pc}
 801a988:	08029a2c 	.word	0x08029a2c

0801a98c <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
 801a994:	6878      	ldr	r0, [r7, #4]
 801a996:	f7ff ffe7 	bl	801a968 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801a99a:	2134      	movs	r1, #52	; 0x34
 801a99c:	6878      	ldr	r0, [r7, #4]
 801a99e:	f7f0 fab9 	bl	800af14 <_ZdlPvj>
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	3708      	adds	r7, #8
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	bd80      	pop	{r7, pc}

0801a9ac <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
 801a9b4:	4a05      	ldr	r2, [pc, #20]	; (801a9cc <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	601a      	str	r2, [r3, #0]
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	4618      	mov	r0, r3
 801a9be:	f7f0 fedb 	bl	800b778 <_ZN11MockFailureD1Ev>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	08029b08 	.word	0x08029b08

0801a9d0 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b082      	sub	sp, #8
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	6878      	ldr	r0, [r7, #4]
 801a9da:	f7ff ffe7 	bl	801a9ac <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a9de:	2134      	movs	r1, #52	; 0x34
 801a9e0:	6878      	ldr	r0, [r7, #4]
 801a9e2:	f7f0 fa97 	bl	800af14 <_ZdlPvj>
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	4618      	mov	r0, r3
 801a9ea:	3708      	adds	r7, #8
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}

0801a9f0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	4a05      	ldr	r2, [pc, #20]	; (801aa10 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	601a      	str	r2, [r3, #0]
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7f0 feb9 	bl	800b778 <_ZN11MockFailureD1Ev>
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	4618      	mov	r0, r3
 801aa0a:	3708      	adds	r7, #8
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	bd80      	pop	{r7, pc}
 801aa10:	08029adc 	.word	0x08029adc

0801aa14 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801aa14:	b580      	push	{r7, lr}
 801aa16:	b082      	sub	sp, #8
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	6078      	str	r0, [r7, #4]
 801aa1c:	6878      	ldr	r0, [r7, #4]
 801aa1e:	f7ff ffe7 	bl	801a9f0 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801aa22:	2134      	movs	r1, #52	; 0x34
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7f0 fa75 	bl	800af14 <_ZdlPvj>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	3708      	adds	r7, #8
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}

0801aa34 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b082      	sub	sp, #8
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
 801aa3c:	4a05      	ldr	r2, [pc, #20]	; (801aa54 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	601a      	str	r2, [r3, #0]
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7f0 fe97 	bl	800b778 <_ZN11MockFailureD1Ev>
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	3708      	adds	r7, #8
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	08029ab0 	.word	0x08029ab0

0801aa58 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b082      	sub	sp, #8
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	6878      	ldr	r0, [r7, #4]
 801aa62:	f7ff ffe7 	bl	801aa34 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801aa66:	2134      	movs	r1, #52	; 0x34
 801aa68:	6878      	ldr	r0, [r7, #4]
 801aa6a:	f7f0 fa53 	bl	800af14 <_ZdlPvj>
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	4618      	mov	r0, r3
 801aa72:	3708      	adds	r7, #8
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}

0801aa78 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b082      	sub	sp, #8
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
 801aa80:	4a05      	ldr	r2, [pc, #20]	; (801aa98 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	601a      	str	r2, [r3, #0]
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7f0 fe75 	bl	800b778 <_ZN11MockFailureD1Ev>
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	4618      	mov	r0, r3
 801aa92:	3708      	adds	r7, #8
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd80      	pop	{r7, pc}
 801aa98:	08029a58 	.word	0x08029a58

0801aa9c <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b082      	sub	sp, #8
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	6078      	str	r0, [r7, #4]
 801aaa4:	6878      	ldr	r0, [r7, #4]
 801aaa6:	f7ff ffe7 	bl	801aa78 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801aaaa:	2134      	movs	r1, #52	; 0x34
 801aaac:	6878      	ldr	r0, [r7, #4]
 801aaae:	f7f0 fa31 	bl	800af14 <_ZdlPvj>
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	4618      	mov	r0, r3
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
 801aac4:	4a05      	ldr	r2, [pc, #20]	; (801aadc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	601a      	str	r2, [r3, #0]
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	4618      	mov	r0, r3
 801aace:	f7f0 fe53 	bl	800b778 <_ZN11MockFailureD1Ev>
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	4618      	mov	r0, r3
 801aad6:	3708      	adds	r7, #8
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}
 801aadc:	08029a84 	.word	0x08029a84

0801aae0 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b082      	sub	sp, #8
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	6078      	str	r0, [r7, #4]
 801aae8:	6878      	ldr	r0, [r7, #4]
 801aaea:	f7ff ffe7 	bl	801aabc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801aaee:	2134      	movs	r1, #52	; 0x34
 801aaf0:	6878      	ldr	r0, [r7, #4]
 801aaf2:	f7f0 fa0f 	bl	800af14 <_ZdlPvj>
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	4618      	mov	r0, r3
 801aafa:	3708      	adds	r7, #8
 801aafc:	46bd      	mov	sp, r7
 801aafe:	bd80      	pop	{r7, pc}

0801ab00 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b082      	sub	sp, #8
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
 801ab08:	4a05      	ldr	r2, [pc, #20]	; (801ab20 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	601a      	str	r2, [r3, #0]
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	4618      	mov	r0, r3
 801ab12:	f7f0 fe31 	bl	800b778 <_ZN11MockFailureD1Ev>
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	4618      	mov	r0, r3
 801ab1a:	3708      	adds	r7, #8
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	bd80      	pop	{r7, pc}
 801ab20:	080299d4 	.word	0x080299d4

0801ab24 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b082      	sub	sp, #8
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
 801ab2c:	6878      	ldr	r0, [r7, #4]
 801ab2e:	f7ff ffe7 	bl	801ab00 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801ab32:	2134      	movs	r1, #52	; 0x34
 801ab34:	6878      	ldr	r0, [r7, #4]
 801ab36:	f7f0 f9ed 	bl	800af14 <_ZdlPvj>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	3708      	adds	r7, #8
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bd80      	pop	{r7, pc}

0801ab44 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b082      	sub	sp, #8
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
 801ab4c:	4a05      	ldr	r2, [pc, #20]	; (801ab64 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	601a      	str	r2, [r3, #0]
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	4618      	mov	r0, r3
 801ab56:	f7f0 fe0f 	bl	800b778 <_ZN11MockFailureD1Ev>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3708      	adds	r7, #8
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}
 801ab64:	08029a00 	.word	0x08029a00

0801ab68 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b082      	sub	sp, #8
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
 801ab70:	6878      	ldr	r0, [r7, #4]
 801ab72:	f7ff ffe7 	bl	801ab44 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801ab76:	2134      	movs	r1, #52	; 0x34
 801ab78:	6878      	ldr	r0, [r7, #4]
 801ab7a:	f7f0 f9cb 	bl	800af14 <_ZdlPvj>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	4618      	mov	r0, r3
 801ab82:	3708      	adds	r7, #8
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}

0801ab88 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801ab88:	b580      	push	{r7, lr}
 801ab8a:	b082      	sub	sp, #8
 801ab8c:	af00      	add	r7, sp, #0
 801ab8e:	6078      	str	r0, [r7, #4]
 801ab90:	6039      	str	r1, [r7, #0]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	3310      	adds	r3, #16
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	6839      	ldr	r1, [r7, #0]
 801ab9e:	6878      	ldr	r0, [r7, #4]
 801aba0:	4798      	blx	r3
 801aba2:	4603      	mov	r3, r0
 801aba4:	4618      	mov	r0, r3
 801aba6:	3708      	adds	r7, #8
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801abac:	b480      	push	{r7}
 801abae:	b083      	sub	sp, #12
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	6039      	str	r1, [r7, #0]
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	4618      	mov	r0, r3
 801abba:	370c      	adds	r7, #12
 801abbc:	46bd      	mov	sp, r7
 801abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc2:	4770      	bx	lr

0801abc4 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801abc4:	b480      	push	{r7}
 801abc6:	b083      	sub	sp, #12
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
 801abcc:	6039      	str	r1, [r7, #0]
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	4618      	mov	r0, r3
 801abd2:	370c      	adds	r7, #12
 801abd4:	46bd      	mov	sp, r7
 801abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abda:	4770      	bx	lr

0801abdc <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801abdc:	b480      	push	{r7}
 801abde:	b085      	sub	sp, #20
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	60f8      	str	r0, [r7, #12]
 801abe4:	60b9      	str	r1, [r7, #8]
 801abe6:	607a      	str	r2, [r7, #4]
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	4618      	mov	r0, r3
 801abec:	3714      	adds	r7, #20
 801abee:	46bd      	mov	sp, r7
 801abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf4:	4770      	bx	lr

0801abf6 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801abf6:	b480      	push	{r7}
 801abf8:	b085      	sub	sp, #20
 801abfa:	af00      	add	r7, sp, #0
 801abfc:	60f8      	str	r0, [r7, #12]
 801abfe:	60b9      	str	r1, [r7, #8]
 801ac00:	4613      	mov	r3, r2
 801ac02:	71fb      	strb	r3, [r7, #7]
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	4618      	mov	r0, r3
 801ac08:	3714      	adds	r7, #20
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac10:	4770      	bx	lr

0801ac12 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801ac12:	b480      	push	{r7}
 801ac14:	b085      	sub	sp, #20
 801ac16:	af00      	add	r7, sp, #0
 801ac18:	60f8      	str	r0, [r7, #12]
 801ac1a:	60b9      	str	r1, [r7, #8]
 801ac1c:	607a      	str	r2, [r7, #4]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	4618      	mov	r0, r3
 801ac22:	3714      	adds	r7, #20
 801ac24:	46bd      	mov	sp, r7
 801ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac2a:	4770      	bx	lr

0801ac2c <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801ac2c:	b480      	push	{r7}
 801ac2e:	b085      	sub	sp, #20
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	60f8      	str	r0, [r7, #12]
 801ac34:	60b9      	str	r1, [r7, #8]
 801ac36:	607a      	str	r2, [r7, #4]
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	3714      	adds	r7, #20
 801ac3e:	46bd      	mov	sp, r7
 801ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac44:	4770      	bx	lr

0801ac46 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801ac46:	b480      	push	{r7}
 801ac48:	b085      	sub	sp, #20
 801ac4a:	af00      	add	r7, sp, #0
 801ac4c:	60f8      	str	r0, [r7, #12]
 801ac4e:	60b9      	str	r1, [r7, #8]
 801ac50:	607a      	str	r2, [r7, #4]
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	4618      	mov	r0, r3
 801ac56:	3714      	adds	r7, #20
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5e:	4770      	bx	lr

0801ac60 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801ac60:	b480      	push	{r7}
 801ac62:	b085      	sub	sp, #20
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	60f8      	str	r0, [r7, #12]
 801ac68:	60b9      	str	r1, [r7, #8]
 801ac6a:	607a      	str	r2, [r7, #4]
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	3714      	adds	r7, #20
 801ac72:	46bd      	mov	sp, r7
 801ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac78:	4770      	bx	lr

0801ac7a <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801ac7a:	b480      	push	{r7}
 801ac7c:	b085      	sub	sp, #20
 801ac7e:	af00      	add	r7, sp, #0
 801ac80:	60f8      	str	r0, [r7, #12]
 801ac82:	60b9      	str	r1, [r7, #8]
 801ac84:	4639      	mov	r1, r7
 801ac86:	e881 000c 	stmia.w	r1, {r2, r3}
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3714      	adds	r7, #20
 801ac90:	46bd      	mov	sp, r7
 801ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac96:	4770      	bx	lr

0801ac98 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801ac98:	b480      	push	{r7}
 801ac9a:	b085      	sub	sp, #20
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	60f8      	str	r0, [r7, #12]
 801aca0:	60b9      	str	r1, [r7, #8]
 801aca2:	4639      	mov	r1, r7
 801aca4:	e881 000c 	stmia.w	r1, {r2, r3}
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	4618      	mov	r0, r3
 801acac:	3714      	adds	r7, #20
 801acae:	46bd      	mov	sp, r7
 801acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb4:	4770      	bx	lr

0801acb6 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801acb6:	b480      	push	{r7}
 801acb8:	b085      	sub	sp, #20
 801acba:	af00      	add	r7, sp, #0
 801acbc:	60f8      	str	r0, [r7, #12]
 801acbe:	60b9      	str	r1, [r7, #8]
 801acc0:	ed87 0b00 	vstr	d0, [r7]
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	4618      	mov	r0, r3
 801acc8:	3714      	adds	r7, #20
 801acca:	46bd      	mov	sp, r7
 801accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd0:	4770      	bx	lr

0801acd2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801acd2:	b480      	push	{r7}
 801acd4:	b087      	sub	sp, #28
 801acd6:	af00      	add	r7, sp, #0
 801acd8:	6178      	str	r0, [r7, #20]
 801acda:	6139      	str	r1, [r7, #16]
 801acdc:	ed87 0b02 	vstr	d0, [r7, #8]
 801ace0:	ed87 1b00 	vstr	d1, [r7]
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	4618      	mov	r0, r3
 801ace8:	371c      	adds	r7, #28
 801acea:	46bd      	mov	sp, r7
 801acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf0:	4770      	bx	lr

0801acf2 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801acf2:	b480      	push	{r7}
 801acf4:	b085      	sub	sp, #20
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	60f8      	str	r0, [r7, #12]
 801acfa:	60b9      	str	r1, [r7, #8]
 801acfc:	607a      	str	r2, [r7, #4]
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	4618      	mov	r0, r3
 801ad02:	3714      	adds	r7, #20
 801ad04:	46bd      	mov	sp, r7
 801ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0a:	4770      	bx	lr

0801ad0c <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801ad0c:	b480      	push	{r7}
 801ad0e:	b085      	sub	sp, #20
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	60f8      	str	r0, [r7, #12]
 801ad14:	60b9      	str	r1, [r7, #8]
 801ad16:	607a      	str	r2, [r7, #4]
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	4618      	mov	r0, r3
 801ad1c:	3714      	adds	r7, #20
 801ad1e:	46bd      	mov	sp, r7
 801ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad24:	4770      	bx	lr

0801ad26 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801ad26:	b480      	push	{r7}
 801ad28:	b085      	sub	sp, #20
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	60f8      	str	r0, [r7, #12]
 801ad2e:	60b9      	str	r1, [r7, #8]
 801ad30:	607a      	str	r2, [r7, #4]
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	4618      	mov	r0, r3
 801ad36:	3714      	adds	r7, #20
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3e:	4770      	bx	lr

0801ad40 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801ad40:	b480      	push	{r7}
 801ad42:	b085      	sub	sp, #20
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	60f8      	str	r0, [r7, #12]
 801ad48:	60b9      	str	r1, [r7, #8]
 801ad4a:	607a      	str	r2, [r7, #4]
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3714      	adds	r7, #20
 801ad52:	46bd      	mov	sp, r7
 801ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad58:	4770      	bx	lr

0801ad5a <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801ad5a:	b480      	push	{r7}
 801ad5c:	b085      	sub	sp, #20
 801ad5e:	af00      	add	r7, sp, #0
 801ad60:	60f8      	str	r0, [r7, #12]
 801ad62:	60b9      	str	r1, [r7, #8]
 801ad64:	607a      	str	r2, [r7, #4]
 801ad66:	603b      	str	r3, [r7, #0]
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3714      	adds	r7, #20
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad74:	4770      	bx	lr

0801ad76 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801ad76:	b480      	push	{r7}
 801ad78:	b085      	sub	sp, #20
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	60f8      	str	r0, [r7, #12]
 801ad7e:	60b9      	str	r1, [r7, #8]
 801ad80:	607a      	str	r2, [r7, #4]
 801ad82:	603b      	str	r3, [r7, #0]
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	4618      	mov	r0, r3
 801ad88:	3714      	adds	r7, #20
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad90:	4770      	bx	lr

0801ad92 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801ad92:	b480      	push	{r7}
 801ad94:	b085      	sub	sp, #20
 801ad96:	af00      	add	r7, sp, #0
 801ad98:	60f8      	str	r0, [r7, #12]
 801ad9a:	60b9      	str	r1, [r7, #8]
 801ad9c:	607a      	str	r2, [r7, #4]
 801ad9e:	603b      	str	r3, [r7, #0]
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	4618      	mov	r0, r3
 801ada4:	3714      	adds	r7, #20
 801ada6:	46bd      	mov	sp, r7
 801ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adac:	4770      	bx	lr

0801adae <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801adae:	b480      	push	{r7}
 801adb0:	b085      	sub	sp, #20
 801adb2:	af00      	add	r7, sp, #0
 801adb4:	60f8      	str	r0, [r7, #12]
 801adb6:	60b9      	str	r1, [r7, #8]
 801adb8:	607a      	str	r2, [r7, #4]
 801adba:	603b      	str	r3, [r7, #0]
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	4618      	mov	r0, r3
 801adc0:	3714      	adds	r7, #20
 801adc2:	46bd      	mov	sp, r7
 801adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc8:	4770      	bx	lr

0801adca <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801adca:	b480      	push	{r7}
 801adcc:	b083      	sub	sp, #12
 801adce:	af00      	add	r7, sp, #0
 801add0:	6078      	str	r0, [r7, #4]
 801add2:	6039      	str	r1, [r7, #0]
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	4618      	mov	r0, r3
 801add8:	370c      	adds	r7, #12
 801adda:	46bd      	mov	sp, r7
 801addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade0:	4770      	bx	lr

0801ade2 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801ade2:	b480      	push	{r7}
 801ade4:	b083      	sub	sp, #12
 801ade6:	af00      	add	r7, sp, #0
 801ade8:	6078      	str	r0, [r7, #4]
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	4618      	mov	r0, r3
 801adee:	370c      	adds	r7, #12
 801adf0:	46bd      	mov	sp, r7
 801adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf6:	4770      	bx	lr

0801adf8 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801adf8:	b480      	push	{r7}
 801adfa:	b083      	sub	sp, #12
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	460b      	mov	r3, r1
 801ae02:	70fb      	strb	r3, [r7, #3]
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	4618      	mov	r0, r3
 801ae08:	370c      	adds	r7, #12
 801ae0a:	46bd      	mov	sp, r7
 801ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae10:	4770      	bx	lr

0801ae12 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801ae12:	b480      	push	{r7}
 801ae14:	b083      	sub	sp, #12
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	6078      	str	r0, [r7, #4]
 801ae1a:	6039      	str	r1, [r7, #0]
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	4618      	mov	r0, r3
 801ae20:	370c      	adds	r7, #12
 801ae22:	46bd      	mov	sp, r7
 801ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae28:	4770      	bx	lr

0801ae2a <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801ae2a:	b480      	push	{r7}
 801ae2c:	b083      	sub	sp, #12
 801ae2e:	af00      	add	r7, sp, #0
 801ae30:	6078      	str	r0, [r7, #4]
 801ae32:	6039      	str	r1, [r7, #0]
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	4618      	mov	r0, r3
 801ae38:	370c      	adds	r7, #12
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae40:	4770      	bx	lr

0801ae42 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801ae42:	b480      	push	{r7}
 801ae44:	b083      	sub	sp, #12
 801ae46:	af00      	add	r7, sp, #0
 801ae48:	6078      	str	r0, [r7, #4]
 801ae4a:	6039      	str	r1, [r7, #0]
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	4618      	mov	r0, r3
 801ae50:	370c      	adds	r7, #12
 801ae52:	46bd      	mov	sp, r7
 801ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae58:	4770      	bx	lr

0801ae5a <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801ae5a:	b480      	push	{r7}
 801ae5c:	b083      	sub	sp, #12
 801ae5e:	af00      	add	r7, sp, #0
 801ae60:	6078      	str	r0, [r7, #4]
 801ae62:	6039      	str	r1, [r7, #0]
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	4618      	mov	r0, r3
 801ae68:	370c      	adds	r7, #12
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae70:	4770      	bx	lr

0801ae72 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801ae72:	b480      	push	{r7}
 801ae74:	b085      	sub	sp, #20
 801ae76:	af00      	add	r7, sp, #0
 801ae78:	60f8      	str	r0, [r7, #12]
 801ae7a:	1d3b      	adds	r3, r7, #4
 801ae7c:	e883 0006 	stmia.w	r3, {r1, r2}
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	4618      	mov	r0, r3
 801ae84:	3714      	adds	r7, #20
 801ae86:	46bd      	mov	sp, r7
 801ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8c:	4770      	bx	lr

0801ae8e <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801ae8e:	b480      	push	{r7}
 801ae90:	b085      	sub	sp, #20
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	60f8      	str	r0, [r7, #12]
 801ae96:	1d3b      	adds	r3, r7, #4
 801ae98:	e883 0006 	stmia.w	r3, {r1, r2}
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3714      	adds	r7, #20
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr

0801aeaa <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801aeaa:	b480      	push	{r7}
 801aeac:	b085      	sub	sp, #20
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	60f8      	str	r0, [r7, #12]
 801aeb2:	ed87 0b00 	vstr	d0, [r7]
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	4618      	mov	r0, r3
 801aeba:	3714      	adds	r7, #20
 801aebc:	46bd      	mov	sp, r7
 801aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec2:	4770      	bx	lr

0801aec4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801aec4:	b480      	push	{r7}
 801aec6:	b083      	sub	sp, #12
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	6078      	str	r0, [r7, #4]
 801aecc:	6039      	str	r1, [r7, #0]
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	4618      	mov	r0, r3
 801aed2:	370c      	adds	r7, #12
 801aed4:	46bd      	mov	sp, r7
 801aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeda:	4770      	bx	lr

0801aedc <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801aedc:	b480      	push	{r7}
 801aede:	b083      	sub	sp, #12
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
 801aee4:	6039      	str	r1, [r7, #0]
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	4618      	mov	r0, r3
 801aeea:	370c      	adds	r7, #12
 801aeec:	46bd      	mov	sp, r7
 801aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef2:	4770      	bx	lr

0801aef4 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801aef4:	b480      	push	{r7}
 801aef6:	b083      	sub	sp, #12
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
 801aefc:	6039      	str	r1, [r7, #0]
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	4618      	mov	r0, r3
 801af02:	370c      	adds	r7, #12
 801af04:	46bd      	mov	sp, r7
 801af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0a:	4770      	bx	lr

0801af0c <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801af0c:	b480      	push	{r7}
 801af0e:	b083      	sub	sp, #12
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
 801af14:	6039      	str	r1, [r7, #0]
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	4618      	mov	r0, r3
 801af1a:	370c      	adds	r7, #12
 801af1c:	46bd      	mov	sp, r7
 801af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af22:	4770      	bx	lr

0801af24 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801af24:	b480      	push	{r7}
 801af26:	b083      	sub	sp, #12
 801af28:	af00      	add	r7, sp, #0
 801af2a:	6078      	str	r0, [r7, #4]
 801af2c:	6039      	str	r1, [r7, #0]
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	4618      	mov	r0, r3
 801af32:	370c      	adds	r7, #12
 801af34:	46bd      	mov	sp, r7
 801af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3a:	4770      	bx	lr

0801af3c <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801af3c:	b480      	push	{r7}
 801af3e:	b083      	sub	sp, #12
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
 801af44:	4a04      	ldr	r2, [pc, #16]	; (801af58 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	601a      	str	r2, [r3, #0]
{
}
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	4618      	mov	r0, r3
 801af4e:	370c      	adds	r7, #12
 801af50:	46bd      	mov	sp, r7
 801af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af56:	4770      	bx	lr
 801af58:	0802a0d8 	.word	0x0802a0d8

0801af5c <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801af5c:	b480      	push	{r7}
 801af5e:	b083      	sub	sp, #12
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
 801af64:	4a04      	ldr	r2, [pc, #16]	; (801af78 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	601a      	str	r2, [r3, #0]
{
}
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	4618      	mov	r0, r3
 801af6e:	370c      	adds	r7, #12
 801af70:	46bd      	mov	sp, r7
 801af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af76:	4770      	bx	lr
 801af78:	0802a0d8 	.word	0x0802a0d8

0801af7c <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b082      	sub	sp, #8
 801af80:	af00      	add	r7, sp, #0
 801af82:	6078      	str	r0, [r7, #4]
 801af84:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	3358      	adds	r3, #88	; 0x58
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	6839      	ldr	r1, [r7, #0]
 801af92:	4610      	mov	r0, r2
 801af94:	4798      	blx	r3
}
 801af96:	6878      	ldr	r0, [r7, #4]
 801af98:	3708      	adds	r7, #8
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bd80      	pop	{r7, pc}

0801af9e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801af9e:	b580      	push	{r7, lr}
 801afa0:	b082      	sub	sp, #8
 801afa2:	af00      	add	r7, sp, #0
 801afa4:	6078      	str	r0, [r7, #4]
 801afa6:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	3304      	adds	r3, #4
 801afac:	6839      	ldr	r1, [r7, #0]
 801afae:	4618      	mov	r0, r3
 801afb0:	f7f2 fbcb 	bl	800d74a <_ZN12SimpleStringaSERKS_>
}
 801afb4:	bf00      	nop
 801afb6:	3708      	adds	r7, #8
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}

0801afbc <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b082      	sub	sp, #8
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
 801afc4:	6039      	str	r1, [r7, #0]
    return functionName_;
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	3304      	adds	r3, #4
 801afca:	4619      	mov	r1, r3
 801afcc:	6878      	ldr	r0, [r7, #4]
 801afce:	f7f2 fba4 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 801afd2:	6878      	ldr	r0, [r7, #4]
 801afd4:	3708      	adds	r7, #8
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}
	...

0801afdc <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801afdc:	b590      	push	{r4, r7, lr}
 801afde:	b085      	sub	sp, #20
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
 801afe4:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	4618      	mov	r0, r3
 801afea:	f7ff ffa7 	bl	801af3c <_ZN16MockExpectedCallC1Ev>
 801afee:	4a2c      	ldr	r2, [pc, #176]	; (801b0a0 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	601a      	str	r2, [r3, #0]
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	3304      	adds	r3, #4
 801aff8:	492a      	ldr	r1, [pc, #168]	; (801b0a4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801affa:	4618      	mov	r0, r3
 801affc:	f7f2 fb39 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	2200      	movs	r2, #0
 801b004:	731a      	strb	r2, [r3, #12]
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2200      	movs	r2, #0
 801b00a:	735a      	strb	r2, [r3, #13]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	2200      	movs	r2, #0
 801b010:	611a      	str	r2, [r3, #16]
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2200      	movs	r2, #0
 801b016:	615a      	str	r2, [r3, #20]
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2200      	movs	r2, #0
 801b01c:	761a      	strb	r2, [r3, #24]
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801b024:	f107 0308 	add.w	r3, r7, #8
 801b028:	491e      	ldr	r1, [pc, #120]	; (801b0a4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7f2 fb21 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801b030:	f107 0308 	add.w	r3, r7, #8
 801b034:	4619      	mov	r1, r3
 801b036:	4620      	mov	r0, r4
 801b038:	f003 f840 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 801b03c:	f107 0308 	add.w	r3, r7, #8
 801b040:	4618      	mov	r0, r3
 801b042:	f7f2 fece 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	2200      	movs	r2, #0
 801b04a:	661a      	str	r2, [r3, #96]	; 0x60
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2200      	movs	r2, #0
 801b050:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2201      	movs	r2, #1
 801b058:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2200      	movs	r2, #0
 801b060:	669a      	str	r2, [r3, #104]	; 0x68
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	683a      	ldr	r2, [r7, #0]
 801b066:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801b068:	2246      	movs	r2, #70	; 0x46
 801b06a:	490f      	ldr	r1, [pc, #60]	; (801b0a8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b06c:	2004      	movs	r0, #4
 801b06e:	f7ef ff3d 	bl	800aeec <_ZnwjPKci>
 801b072:	4604      	mov	r4, r0
 801b074:	4620      	mov	r0, r4
 801b076:	f004 ff34 	bl	801fee2 <_ZN18MockNamedValueListC1Ev>
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801b07e:	2247      	movs	r2, #71	; 0x47
 801b080:	4909      	ldr	r1, [pc, #36]	; (801b0a8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b082:	2004      	movs	r0, #4
 801b084:	f7ef ff32 	bl	800aeec <_ZnwjPKci>
 801b088:	4604      	mov	r4, r0
 801b08a:	4620      	mov	r0, r4
 801b08c:	f004 ff29 	bl	801fee2 <_ZN18MockNamedValueListC1Ev>
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	621c      	str	r4, [r3, #32]
}
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	4618      	mov	r0, r3
 801b098:	3714      	adds	r7, #20
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bd90      	pop	{r4, r7, pc}
 801b09e:	bf00      	nop
 801b0a0:	08029f1c 	.word	0x08029f1c
 801b0a4:	08026e08 	.word	0x08026e08
 801b0a8:	08026e0c 	.word	0x08026e0c

0801b0ac <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	4a17      	ldr	r2, [pc, #92]	; (801b114 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	69db      	ldr	r3, [r3, #28]
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f004 ff1d 	bl	801fefe <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	69db      	ldr	r3, [r3, #28]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d003      	beq.n	801b0d4 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801b0cc:	2104      	movs	r1, #4
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7ef ff20 	bl	800af14 <_ZdlPvj>
    outputParameters_->clear();
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6a1b      	ldr	r3, [r3, #32]
 801b0d8:	4618      	mov	r0, r3
 801b0da:	f004 ff10 	bl	801fefe <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6a1b      	ldr	r3, [r3, #32]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d003      	beq.n	801b0ee <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801b0e6:	2104      	movs	r1, #4
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	f7ef ff13 	bl	800af14 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	3328      	adds	r3, #40	; 0x28
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f003 f80c 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	3304      	adds	r3, #4
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f2 fe70 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	4618      	mov	r0, r3
 801b106:	f7ff ff29 	bl	801af5c <_ZN16MockExpectedCallD1Ev>
}
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	4618      	mov	r0, r3
 801b10e:	3708      	adds	r7, #8
 801b110:	46bd      	mov	sp, r7
 801b112:	bd80      	pop	{r7, pc}
 801b114:	08029f1c 	.word	0x08029f1c

0801b118 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b118:	b580      	push	{r7, lr}
 801b11a:	b082      	sub	sp, #8
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
}
 801b120:	6878      	ldr	r0, [r7, #4]
 801b122:	f7ff ffc3 	bl	801b0ac <_ZN23MockCheckedExpectedCallD1Ev>
 801b126:	2170      	movs	r1, #112	; 0x70
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f7ef fef3 	bl	800af14 <_ZdlPvj>
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	4618      	mov	r0, r3
 801b132:	3708      	adds	r7, #8
 801b134:	46bd      	mov	sp, r7
 801b136:	bd80      	pop	{r7, pc}

0801b138 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	b082      	sub	sp, #8
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	6039      	str	r1, [r7, #0]
    setName(name);
 801b142:	6839      	ldr	r1, [r7, #0]
 801b144:	6878      	ldr	r0, [r7, #4]
 801b146:	f7ff ff2a 	bl	801af9e <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801b14a:	687b      	ldr	r3, [r7, #4]
}
 801b14c:	4618      	mov	r0, r3
 801b14e:	3708      	adds	r7, #8
 801b150:	46bd      	mov	sp, r7
 801b152:	bd80      	pop	{r7, pc}

0801b154 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801b154:	b590      	push	{r4, r7, lr}
 801b156:	b087      	sub	sp, #28
 801b158:	af00      	add	r7, sp, #0
 801b15a:	60f8      	str	r0, [r7, #12]
 801b15c:	60b9      	str	r1, [r7, #8]
 801b15e:	4613      	mov	r3, r2
 801b160:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b162:	225a      	movs	r2, #90	; 0x5a
 801b164:	490e      	ldr	r1, [pc, #56]	; (801b1a0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801b166:	2038      	movs	r0, #56	; 0x38
 801b168:	f7ef fec0 	bl	800aeec <_ZnwjPKci>
 801b16c:	4604      	mov	r4, r0
 801b16e:	68b9      	ldr	r1, [r7, #8]
 801b170:	4620      	mov	r0, r4
 801b172:	f001 f851 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b176:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	69db      	ldr	r3, [r3, #28]
 801b17c:	6979      	ldr	r1, [r7, #20]
 801b17e:	4618      	mov	r0, r3
 801b180:	f004 fee0 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	3308      	adds	r3, #8
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	79fa      	ldrb	r2, [r7, #7]
 801b18e:	4611      	mov	r1, r2
 801b190:	6978      	ldr	r0, [r7, #20]
 801b192:	4798      	blx	r3
    return *this;
 801b194:	68fb      	ldr	r3, [r7, #12]
}
 801b196:	4618      	mov	r0, r3
 801b198:	371c      	adds	r7, #28
 801b19a:	46bd      	mov	sp, r7
 801b19c:	bd90      	pop	{r4, r7, pc}
 801b19e:	bf00      	nop
 801b1a0:	08026e0c 	.word	0x08026e0c

0801b1a4 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801b1a4:	b590      	push	{r4, r7, lr}
 801b1a6:	b087      	sub	sp, #28
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	60f8      	str	r0, [r7, #12]
 801b1ac:	60b9      	str	r1, [r7, #8]
 801b1ae:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b1b0:	2262      	movs	r2, #98	; 0x62
 801b1b2:	490e      	ldr	r1, [pc, #56]	; (801b1ec <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801b1b4:	2038      	movs	r0, #56	; 0x38
 801b1b6:	f7ef fe99 	bl	800aeec <_ZnwjPKci>
 801b1ba:	4604      	mov	r4, r0
 801b1bc:	68b9      	ldr	r1, [r7, #8]
 801b1be:	4620      	mov	r0, r4
 801b1c0:	f001 f82a 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b1c4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	69db      	ldr	r3, [r3, #28]
 801b1ca:	6979      	ldr	r1, [r7, #20]
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	f004 feb9 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b1d2:	697b      	ldr	r3, [r7, #20]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	3310      	adds	r3, #16
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	6879      	ldr	r1, [r7, #4]
 801b1dc:	6978      	ldr	r0, [r7, #20]
 801b1de:	4798      	blx	r3
    return *this;
 801b1e0:	68fb      	ldr	r3, [r7, #12]
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	371c      	adds	r7, #28
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd90      	pop	{r4, r7, pc}
 801b1ea:	bf00      	nop
 801b1ec:	08026e0c 	.word	0x08026e0c

0801b1f0 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801b1f0:	b590      	push	{r4, r7, lr}
 801b1f2:	b087      	sub	sp, #28
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	60b9      	str	r1, [r7, #8]
 801b1fa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b1fc:	226a      	movs	r2, #106	; 0x6a
 801b1fe:	490e      	ldr	r1, [pc, #56]	; (801b238 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801b200:	2038      	movs	r0, #56	; 0x38
 801b202:	f7ef fe73 	bl	800aeec <_ZnwjPKci>
 801b206:	4604      	mov	r4, r0
 801b208:	68b9      	ldr	r1, [r7, #8]
 801b20a:	4620      	mov	r0, r4
 801b20c:	f001 f804 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b210:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	69db      	ldr	r3, [r3, #28]
 801b216:	6979      	ldr	r1, [r7, #20]
 801b218:	4618      	mov	r0, r3
 801b21a:	f004 fe93 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b21e:	697b      	ldr	r3, [r7, #20]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	330c      	adds	r3, #12
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	6879      	ldr	r1, [r7, #4]
 801b228:	6978      	ldr	r0, [r7, #20]
 801b22a:	4798      	blx	r3
    return *this;
 801b22c:	68fb      	ldr	r3, [r7, #12]
}
 801b22e:	4618      	mov	r0, r3
 801b230:	371c      	adds	r7, #28
 801b232:	46bd      	mov	sp, r7
 801b234:	bd90      	pop	{r4, r7, pc}
 801b236:	bf00      	nop
 801b238:	08026e0c 	.word	0x08026e0c

0801b23c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801b23c:	b590      	push	{r4, r7, lr}
 801b23e:	b087      	sub	sp, #28
 801b240:	af00      	add	r7, sp, #0
 801b242:	60f8      	str	r0, [r7, #12]
 801b244:	60b9      	str	r1, [r7, #8]
 801b246:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b248:	2272      	movs	r2, #114	; 0x72
 801b24a:	490e      	ldr	r1, [pc, #56]	; (801b284 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801b24c:	2038      	movs	r0, #56	; 0x38
 801b24e:	f7ef fe4d 	bl	800aeec <_ZnwjPKci>
 801b252:	4604      	mov	r4, r0
 801b254:	68b9      	ldr	r1, [r7, #8]
 801b256:	4620      	mov	r0, r4
 801b258:	f000 ffde 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b25c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	69db      	ldr	r3, [r3, #28]
 801b262:	6979      	ldr	r1, [r7, #20]
 801b264:	4618      	mov	r0, r3
 801b266:	f004 fe6d 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	3314      	adds	r3, #20
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	6879      	ldr	r1, [r7, #4]
 801b274:	6978      	ldr	r0, [r7, #20]
 801b276:	4798      	blx	r3
    return *this;
 801b278:	68fb      	ldr	r3, [r7, #12]
}
 801b27a:	4618      	mov	r0, r3
 801b27c:	371c      	adds	r7, #28
 801b27e:	46bd      	mov	sp, r7
 801b280:	bd90      	pop	{r4, r7, pc}
 801b282:	bf00      	nop
 801b284:	08026e0c 	.word	0x08026e0c

0801b288 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801b288:	b590      	push	{r4, r7, lr}
 801b28a:	b087      	sub	sp, #28
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	60f8      	str	r0, [r7, #12]
 801b290:	60b9      	str	r1, [r7, #8]
 801b292:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b294:	227a      	movs	r2, #122	; 0x7a
 801b296:	490e      	ldr	r1, [pc, #56]	; (801b2d0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801b298:	2038      	movs	r0, #56	; 0x38
 801b29a:	f7ef fe27 	bl	800aeec <_ZnwjPKci>
 801b29e:	4604      	mov	r4, r0
 801b2a0:	68b9      	ldr	r1, [r7, #8]
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	f000 ffb8 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b2a8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	69db      	ldr	r3, [r3, #28]
 801b2ae:	6979      	ldr	r1, [r7, #20]
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f004 fe47 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b2b6:	697b      	ldr	r3, [r7, #20]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	3318      	adds	r3, #24
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	6879      	ldr	r1, [r7, #4]
 801b2c0:	6978      	ldr	r0, [r7, #20]
 801b2c2:	4798      	blx	r3
    return *this;
 801b2c4:	68fb      	ldr	r3, [r7, #12]
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	371c      	adds	r7, #28
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd90      	pop	{r4, r7, pc}
 801b2ce:	bf00      	nop
 801b2d0:	08026e0c 	.word	0x08026e0c

0801b2d4 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801b2d4:	b5b0      	push	{r4, r5, r7, lr}
 801b2d6:	b086      	sub	sp, #24
 801b2d8:	af02      	add	r7, sp, #8
 801b2da:	60f8      	str	r0, [r7, #12]
 801b2dc:	60b9      	str	r1, [r7, #8]
 801b2de:	4639      	mov	r1, r7
 801b2e0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801b2e4:	f7f9 fda8 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801b2e8:	4604      	mov	r4, r0
 801b2ea:	6823      	ldr	r3, [r4, #0]
 801b2ec:	3368      	adds	r3, #104	; 0x68
 801b2ee:	681d      	ldr	r5, [r3, #0]
 801b2f0:	f7f9 fdb2 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	9300      	str	r3, [sp, #0]
 801b2f8:	2396      	movs	r3, #150	; 0x96
 801b2fa:	4a04      	ldr	r2, [pc, #16]	; (801b30c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801b2fc:	4904      	ldr	r1, [pc, #16]	; (801b310 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801b2fe:	4620      	mov	r0, r4
 801b300:	47a8      	blx	r5
    return *this;
 801b302:	68fb      	ldr	r3, [r7, #12]
}
 801b304:	4618      	mov	r0, r3
 801b306:	3710      	adds	r7, #16
 801b308:	46bd      	mov	sp, r7
 801b30a:	bdb0      	pop	{r4, r5, r7, pc}
 801b30c:	08026e0c 	.word	0x08026e0c
 801b310:	08026e28 	.word	0x08026e28

0801b314 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801b314:	b5b0      	push	{r4, r5, r7, lr}
 801b316:	b086      	sub	sp, #24
 801b318:	af02      	add	r7, sp, #8
 801b31a:	60f8      	str	r0, [r7, #12]
 801b31c:	60b9      	str	r1, [r7, #8]
 801b31e:	4639      	mov	r1, r7
 801b320:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801b324:	f7f9 fd88 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801b328:	4604      	mov	r4, r0
 801b32a:	6823      	ldr	r3, [r4, #0]
 801b32c:	3368      	adds	r3, #104	; 0x68
 801b32e:	681d      	ldr	r5, [r3, #0]
 801b330:	f7f9 fd92 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b334:	4603      	mov	r3, r0
 801b336:	9300      	str	r3, [sp, #0]
 801b338:	239c      	movs	r3, #156	; 0x9c
 801b33a:	4a04      	ldr	r2, [pc, #16]	; (801b34c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801b33c:	4904      	ldr	r1, [pc, #16]	; (801b350 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801b33e:	4620      	mov	r0, r4
 801b340:	47a8      	blx	r5
    return *this;
 801b342:	68fb      	ldr	r3, [r7, #12]
}
 801b344:	4618      	mov	r0, r3
 801b346:	3710      	adds	r7, #16
 801b348:	46bd      	mov	sp, r7
 801b34a:	bdb0      	pop	{r4, r5, r7, pc}
 801b34c:	08026e0c 	.word	0x08026e0c
 801b350:	08026e48 	.word	0x08026e48

0801b354 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801b354:	b590      	push	{r4, r7, lr}
 801b356:	b087      	sub	sp, #28
 801b358:	af00      	add	r7, sp, #0
 801b35a:	60f8      	str	r0, [r7, #12]
 801b35c:	60b9      	str	r1, [r7, #8]
 801b35e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b362:	22a4      	movs	r2, #164	; 0xa4
 801b364:	490e      	ldr	r1, [pc, #56]	; (801b3a0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801b366:	2038      	movs	r0, #56	; 0x38
 801b368:	f7ef fdc0 	bl	800aeec <_ZnwjPKci>
 801b36c:	4604      	mov	r4, r0
 801b36e:	68b9      	ldr	r1, [r7, #8]
 801b370:	4620      	mov	r0, r4
 801b372:	f000 ff51 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b376:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	69db      	ldr	r3, [r3, #28]
 801b37c:	6979      	ldr	r1, [r7, #20]
 801b37e:	4618      	mov	r0, r3
 801b380:	f004 fde0 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	3324      	adds	r3, #36	; 0x24
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	ed97 0b00 	vldr	d0, [r7]
 801b390:	6978      	ldr	r0, [r7, #20]
 801b392:	4798      	blx	r3
    return *this;
 801b394:	68fb      	ldr	r3, [r7, #12]
}
 801b396:	4618      	mov	r0, r3
 801b398:	371c      	adds	r7, #28
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd90      	pop	{r4, r7, pc}
 801b39e:	bf00      	nop
 801b3a0:	08026e0c 	.word	0x08026e0c

0801b3a4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801b3a4:	b590      	push	{r4, r7, lr}
 801b3a6:	b089      	sub	sp, #36	; 0x24
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6178      	str	r0, [r7, #20]
 801b3ac:	6139      	str	r1, [r7, #16]
 801b3ae:	ed87 0b02 	vstr	d0, [r7, #8]
 801b3b2:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b3b6:	22ac      	movs	r2, #172	; 0xac
 801b3b8:	490f      	ldr	r1, [pc, #60]	; (801b3f8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801b3ba:	2038      	movs	r0, #56	; 0x38
 801b3bc:	f7ef fd96 	bl	800aeec <_ZnwjPKci>
 801b3c0:	4604      	mov	r4, r0
 801b3c2:	6939      	ldr	r1, [r7, #16]
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f000 ff27 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b3ca:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	69db      	ldr	r3, [r3, #28]
 801b3d0:	69f9      	ldr	r1, [r7, #28]
 801b3d2:	4618      	mov	r0, r3
 801b3d4:	f004 fdb6 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801b3d8:	69fb      	ldr	r3, [r7, #28]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	3328      	adds	r3, #40	; 0x28
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	ed97 1b00 	vldr	d1, [r7]
 801b3e4:	ed97 0b02 	vldr	d0, [r7, #8]
 801b3e8:	69f8      	ldr	r0, [r7, #28]
 801b3ea:	4798      	blx	r3
    return *this;
 801b3ec:	697b      	ldr	r3, [r7, #20]
}
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	3724      	adds	r7, #36	; 0x24
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bd90      	pop	{r4, r7, pc}
 801b3f6:	bf00      	nop
 801b3f8:	08026e0c 	.word	0x08026e0c

0801b3fc <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801b3fc:	b590      	push	{r4, r7, lr}
 801b3fe:	b087      	sub	sp, #28
 801b400:	af00      	add	r7, sp, #0
 801b402:	60f8      	str	r0, [r7, #12]
 801b404:	60b9      	str	r1, [r7, #8]
 801b406:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b408:	22b4      	movs	r2, #180	; 0xb4
 801b40a:	490e      	ldr	r1, [pc, #56]	; (801b444 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801b40c:	2038      	movs	r0, #56	; 0x38
 801b40e:	f7ef fd6d 	bl	800aeec <_ZnwjPKci>
 801b412:	4604      	mov	r4, r0
 801b414:	68b9      	ldr	r1, [r7, #8]
 801b416:	4620      	mov	r0, r4
 801b418:	f000 fefe 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b41c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	69db      	ldr	r3, [r3, #28]
 801b422:	6979      	ldr	r1, [r7, #20]
 801b424:	4618      	mov	r0, r3
 801b426:	f004 fd8d 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b42a:	697b      	ldr	r3, [r7, #20]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	3338      	adds	r3, #56	; 0x38
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	6879      	ldr	r1, [r7, #4]
 801b434:	6978      	ldr	r0, [r7, #20]
 801b436:	4798      	blx	r3
    return *this;
 801b438:	68fb      	ldr	r3, [r7, #12]
}
 801b43a:	4618      	mov	r0, r3
 801b43c:	371c      	adds	r7, #28
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd90      	pop	{r4, r7, pc}
 801b442:	bf00      	nop
 801b444:	08026e0c 	.word	0x08026e0c

0801b448 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801b448:	b590      	push	{r4, r7, lr}
 801b44a:	b087      	sub	sp, #28
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	60f8      	str	r0, [r7, #12]
 801b450:	60b9      	str	r1, [r7, #8]
 801b452:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b454:	22bc      	movs	r2, #188	; 0xbc
 801b456:	490e      	ldr	r1, [pc, #56]	; (801b490 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801b458:	2038      	movs	r0, #56	; 0x38
 801b45a:	f7ef fd47 	bl	800aeec <_ZnwjPKci>
 801b45e:	4604      	mov	r4, r0
 801b460:	68b9      	ldr	r1, [r7, #8]
 801b462:	4620      	mov	r0, r4
 801b464:	f000 fed8 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b468:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	69db      	ldr	r3, [r3, #28]
 801b46e:	6979      	ldr	r1, [r7, #20]
 801b470:	4618      	mov	r0, r3
 801b472:	f004 fd67 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b476:	697b      	ldr	r3, [r7, #20]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	332c      	adds	r3, #44	; 0x2c
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	6879      	ldr	r1, [r7, #4]
 801b480:	6978      	ldr	r0, [r7, #20]
 801b482:	4798      	blx	r3
    return *this;
 801b484:	68fb      	ldr	r3, [r7, #12]
}
 801b486:	4618      	mov	r0, r3
 801b488:	371c      	adds	r7, #28
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bd90      	pop	{r4, r7, pc}
 801b48e:	bf00      	nop
 801b490:	08026e0c 	.word	0x08026e0c

0801b494 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801b494:	b590      	push	{r4, r7, lr}
 801b496:	b087      	sub	sp, #28
 801b498:	af00      	add	r7, sp, #0
 801b49a:	60f8      	str	r0, [r7, #12]
 801b49c:	60b9      	str	r1, [r7, #8]
 801b49e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b4a0:	22c4      	movs	r2, #196	; 0xc4
 801b4a2:	490e      	ldr	r1, [pc, #56]	; (801b4dc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801b4a4:	2038      	movs	r0, #56	; 0x38
 801b4a6:	f7ef fd21 	bl	800aeec <_ZnwjPKci>
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	68b9      	ldr	r1, [r7, #8]
 801b4ae:	4620      	mov	r0, r4
 801b4b0:	f000 feb2 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b4b4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	69db      	ldr	r3, [r3, #28]
 801b4ba:	6979      	ldr	r1, [r7, #20]
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f004 fd41 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b4c2:	697b      	ldr	r3, [r7, #20]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	3330      	adds	r3, #48	; 0x30
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	6879      	ldr	r1, [r7, #4]
 801b4cc:	6978      	ldr	r0, [r7, #20]
 801b4ce:	4798      	blx	r3
    return *this;
 801b4d0:	68fb      	ldr	r3, [r7, #12]
}
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	371c      	adds	r7, #28
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	bd90      	pop	{r4, r7, pc}
 801b4da:	bf00      	nop
 801b4dc:	08026e0c 	.word	0x08026e0c

0801b4e0 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801b4e0:	b590      	push	{r4, r7, lr}
 801b4e2:	b087      	sub	sp, #28
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	60f8      	str	r0, [r7, #12]
 801b4e8:	60b9      	str	r1, [r7, #8]
 801b4ea:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b4ec:	22cc      	movs	r2, #204	; 0xcc
 801b4ee:	490e      	ldr	r1, [pc, #56]	; (801b528 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801b4f0:	2038      	movs	r0, #56	; 0x38
 801b4f2:	f7ef fcfb 	bl	800aeec <_ZnwjPKci>
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	68b9      	ldr	r1, [r7, #8]
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f000 fe8c 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b500:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	69db      	ldr	r3, [r3, #28]
 801b506:	6979      	ldr	r1, [r7, #20]
 801b508:	4618      	mov	r0, r3
 801b50a:	f004 fd1b 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b50e:	697b      	ldr	r3, [r7, #20]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	3334      	adds	r3, #52	; 0x34
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	6879      	ldr	r1, [r7, #4]
 801b518:	6978      	ldr	r0, [r7, #20]
 801b51a:	4798      	blx	r3
    return *this;
 801b51c:	68fb      	ldr	r3, [r7, #12]
}
 801b51e:	4618      	mov	r0, r3
 801b520:	371c      	adds	r7, #28
 801b522:	46bd      	mov	sp, r7
 801b524:	bd90      	pop	{r4, r7, pc}
 801b526:	bf00      	nop
 801b528:	08026e0c 	.word	0x08026e0c

0801b52c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801b52c:	b590      	push	{r4, r7, lr}
 801b52e:	b087      	sub	sp, #28
 801b530:	af00      	add	r7, sp, #0
 801b532:	60f8      	str	r0, [r7, #12]
 801b534:	60b9      	str	r1, [r7, #8]
 801b536:	607a      	str	r2, [r7, #4]
 801b538:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b53a:	22d4      	movs	r2, #212	; 0xd4
 801b53c:	490e      	ldr	r1, [pc, #56]	; (801b578 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801b53e:	2038      	movs	r0, #56	; 0x38
 801b540:	f7ef fcd4 	bl	800aeec <_ZnwjPKci>
 801b544:	4604      	mov	r4, r0
 801b546:	68b9      	ldr	r1, [r7, #8]
 801b548:	4620      	mov	r0, r4
 801b54a:	f000 fe65 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b54e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	69db      	ldr	r3, [r3, #28]
 801b554:	6979      	ldr	r1, [r7, #20]
 801b556:	4618      	mov	r0, r3
 801b558:	f004 fcf4 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	333c      	adds	r3, #60	; 0x3c
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	683a      	ldr	r2, [r7, #0]
 801b566:	6879      	ldr	r1, [r7, #4]
 801b568:	6978      	ldr	r0, [r7, #20]
 801b56a:	4798      	blx	r3
    return *this;
 801b56c:	68fb      	ldr	r3, [r7, #12]
}
 801b56e:	4618      	mov	r0, r3
 801b570:	371c      	adds	r7, #28
 801b572:	46bd      	mov	sp, r7
 801b574:	bd90      	pop	{r4, r7, pc}
 801b576:	bf00      	nop
 801b578:	08026e0c 	.word	0x08026e0c

0801b57c <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801b57c:	b590      	push	{r4, r7, lr}
 801b57e:	b087      	sub	sp, #28
 801b580:	af00      	add	r7, sp, #0
 801b582:	60f8      	str	r0, [r7, #12]
 801b584:	60b9      	str	r1, [r7, #8]
 801b586:	607a      	str	r2, [r7, #4]
 801b588:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b58a:	22dc      	movs	r2, #220	; 0xdc
 801b58c:	490e      	ldr	r1, [pc, #56]	; (801b5c8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801b58e:	2038      	movs	r0, #56	; 0x38
 801b590:	f7ef fcac 	bl	800aeec <_ZnwjPKci>
 801b594:	4604      	mov	r4, r0
 801b596:	6879      	ldr	r1, [r7, #4]
 801b598:	4620      	mov	r0, r4
 801b59a:	f000 fe3d 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b59e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	69db      	ldr	r3, [r3, #28]
 801b5a4:	6979      	ldr	r1, [r7, #20]
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	f004 fccc 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801b5ac:	697b      	ldr	r3, [r7, #20]
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	3340      	adds	r3, #64	; 0x40
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	683a      	ldr	r2, [r7, #0]
 801b5b6:	68b9      	ldr	r1, [r7, #8]
 801b5b8:	6978      	ldr	r0, [r7, #20]
 801b5ba:	4798      	blx	r3
    return *this;
 801b5bc:	68fb      	ldr	r3, [r7, #12]
}
 801b5be:	4618      	mov	r0, r3
 801b5c0:	371c      	adds	r7, #28
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	bd90      	pop	{r4, r7, pc}
 801b5c6:	bf00      	nop
 801b5c8:	08026e0c 	.word	0x08026e0c

0801b5cc <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801b5cc:	b590      	push	{r4, r7, lr}
 801b5ce:	b087      	sub	sp, #28
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	60f8      	str	r0, [r7, #12]
 801b5d4:	60b9      	str	r1, [r7, #8]
 801b5d6:	607a      	str	r2, [r7, #4]
 801b5d8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b5da:	22e4      	movs	r2, #228	; 0xe4
 801b5dc:	4911      	ldr	r1, [pc, #68]	; (801b624 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801b5de:	2038      	movs	r0, #56	; 0x38
 801b5e0:	f7ef fc84 	bl	800aeec <_ZnwjPKci>
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	68b9      	ldr	r1, [r7, #8]
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f000 fe15 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b5ee:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	6a1b      	ldr	r3, [r3, #32]
 801b5f4:	6979      	ldr	r1, [r7, #20]
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f004 fca4 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801b5fc:	697b      	ldr	r3, [r7, #20]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	3330      	adds	r3, #48	; 0x30
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	6879      	ldr	r1, [r7, #4]
 801b606:	6978      	ldr	r0, [r7, #20]
 801b608:	4798      	blx	r3
    newParameter->setSize(size);
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	3348      	adds	r3, #72	; 0x48
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	6839      	ldr	r1, [r7, #0]
 801b614:	6978      	ldr	r0, [r7, #20]
 801b616:	4798      	blx	r3
    return *this;
 801b618:	68fb      	ldr	r3, [r7, #12]
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	371c      	adds	r7, #28
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd90      	pop	{r4, r7, pc}
 801b622:	bf00      	nop
 801b624:	08026e0c 	.word	0x08026e0c

0801b628 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801b628:	b590      	push	{r4, r7, lr}
 801b62a:	b087      	sub	sp, #28
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	60f8      	str	r0, [r7, #12]
 801b630:	60b9      	str	r1, [r7, #8]
 801b632:	607a      	str	r2, [r7, #4]
 801b634:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801b636:	22ed      	movs	r2, #237	; 0xed
 801b638:	490e      	ldr	r1, [pc, #56]	; (801b674 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801b63a:	2038      	movs	r0, #56	; 0x38
 801b63c:	f7ef fc56 	bl	800aeec <_ZnwjPKci>
 801b640:	4604      	mov	r4, r0
 801b642:	6879      	ldr	r1, [r7, #4]
 801b644:	4620      	mov	r0, r4
 801b646:	f000 fde7 	bl	801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801b64a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	6a1b      	ldr	r3, [r3, #32]
 801b650:	6979      	ldr	r1, [r7, #20]
 801b652:	4618      	mov	r0, r3
 801b654:	f004 fc76 	bl	801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801b658:	697b      	ldr	r3, [r7, #20]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	3340      	adds	r3, #64	; 0x40
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	683a      	ldr	r2, [r7, #0]
 801b662:	68b9      	ldr	r1, [r7, #8]
 801b664:	6978      	ldr	r0, [r7, #20]
 801b666:	4798      	blx	r3
    return *this;
 801b668:	68fb      	ldr	r3, [r7, #12]
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	371c      	adds	r7, #28
 801b66e:	46bd      	mov	sp, r7
 801b670:	bd90      	pop	{r4, r7, pc}
 801b672:	bf00      	nop
 801b674:	08026e0c 	.word	0x08026e0c

0801b678 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801b678:	b590      	push	{r4, r7, lr}
 801b67a:	b083      	sub	sp, #12
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	3318      	adds	r3, #24
 801b688:	681c      	ldr	r4, [r3, #0]
 801b68a:	2300      	movs	r3, #0
 801b68c:	2200      	movs	r2, #0
 801b68e:	6839      	ldr	r1, [r7, #0]
 801b690:	6878      	ldr	r0, [r7, #4]
 801b692:	47a0      	blx	r4
 801b694:	4603      	mov	r3, r0
}
 801b696:	4618      	mov	r0, r3
 801b698:	370c      	adds	r7, #12
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd90      	pop	{r4, r7, pc}
	...

0801b6a0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b086      	sub	sp, #24
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	60f8      	str	r0, [r7, #12]
 801b6a8:	60b9      	str	r1, [r7, #8]
 801b6aa:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	69db      	ldr	r3, [r3, #28]
 801b6b0:	6879      	ldr	r1, [r7, #4]
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	f004 fc7c 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b6b8:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d008      	beq.n	801b6d2 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801b6c0:	697b      	ldr	r3, [r7, #20]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	3360      	adds	r3, #96	; 0x60
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	68fa      	ldr	r2, [r7, #12]
 801b6ca:	6979      	ldr	r1, [r7, #20]
 801b6cc:	4610      	mov	r0, r2
 801b6ce:	4798      	blx	r3
 801b6d0:	e004      	b.n	801b6dc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801b6d2:	68fb      	ldr	r3, [r7, #12]
 801b6d4:	4903      	ldr	r1, [pc, #12]	; (801b6e4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	f7f2 fe10 	bl	800e2fc <_Z10StringFromPKc>
}
 801b6dc:	68f8      	ldr	r0, [r7, #12]
 801b6de:	3718      	adds	r7, #24
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}
 801b6e4:	08026e08 	.word	0x08026e08

0801b6e8 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b084      	sub	sp, #16
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
 801b6f0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	69db      	ldr	r3, [r3, #28]
 801b6f6:	6839      	ldr	r1, [r7, #0]
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f004 fc59 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b6fe:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	2b00      	cmp	r3, #0
 801b704:	bf14      	ite	ne
 801b706:	2301      	movne	r3, #1
 801b708:	2300      	moveq	r3, #0
 801b70a:	b2db      	uxtb	r3, r3
}
 801b70c:	4618      	mov	r0, r3
 801b70e:	3710      	adds	r7, #16
 801b710:	46bd      	mov	sp, r7
 801b712:	bd80      	pop	{r7, pc}

0801b714 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b084      	sub	sp, #16
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
 801b71c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	6a1b      	ldr	r3, [r3, #32]
 801b722:	6839      	ldr	r1, [r7, #0]
 801b724:	4618      	mov	r0, r3
 801b726:	f004 fc43 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b72a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	bf14      	ite	ne
 801b732:	2301      	movne	r3, #1
 801b734:	2300      	moveq	r3, #0
 801b736:	b2db      	uxtb	r3, r3
}
 801b738:	4618      	mov	r0, r3
 801b73a:	3710      	adds	r7, #16
 801b73c:	46bd      	mov	sp, r7
 801b73e:	bd80      	pop	{r7, pc}

0801b740 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801b740:	b590      	push	{r4, r7, lr}
 801b742:	b089      	sub	sp, #36	; 0x24
 801b744:	af00      	add	r7, sp, #0
 801b746:	60f8      	str	r0, [r7, #12]
 801b748:	60b9      	str	r1, [r7, #8]
 801b74a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801b74c:	68bb      	ldr	r3, [r7, #8]
 801b74e:	69db      	ldr	r3, [r3, #28]
 801b750:	6879      	ldr	r1, [r7, #4]
 801b752:	4618      	mov	r0, r3
 801b754:	f004 fc2c 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b758:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b75a:	2400      	movs	r4, #0
 801b75c:	69fb      	ldr	r3, [r7, #28]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d004      	beq.n	801b76c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801b762:	69f9      	ldr	r1, [r7, #28]
 801b764:	68f8      	ldr	r0, [r7, #12]
 801b766:	f7f0 f829 	bl	800b7bc <_ZN14MockNamedValueC1ERKS_>
 801b76a:	e00c      	b.n	801b786 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801b76c:	f107 0314 	add.w	r3, r7, #20
 801b770:	490a      	ldr	r1, [pc, #40]	; (801b79c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801b772:	4618      	mov	r0, r3
 801b774:	f7f1 ff7d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801b778:	2401      	movs	r4, #1
 801b77a:	f107 0314 	add.w	r3, r7, #20
 801b77e:	4619      	mov	r1, r3
 801b780:	68f8      	ldr	r0, [r7, #12]
 801b782:	f002 fc9b 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 801b786:	2c00      	cmp	r4, #0
 801b788:	d004      	beq.n	801b794 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801b78a:	f107 0314 	add.w	r3, r7, #20
 801b78e:	4618      	mov	r0, r3
 801b790:	f7f2 fb27 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801b794:	68f8      	ldr	r0, [r7, #12]
 801b796:	3724      	adds	r7, #36	; 0x24
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd90      	pop	{r4, r7, pc}
 801b79c:	08026e08 	.word	0x08026e08

0801b7a0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801b7a0:	b590      	push	{r4, r7, lr}
 801b7a2:	b089      	sub	sp, #36	; 0x24
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	60f8      	str	r0, [r7, #12]
 801b7a8:	60b9      	str	r1, [r7, #8]
 801b7aa:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	6a1b      	ldr	r3, [r3, #32]
 801b7b0:	6879      	ldr	r1, [r7, #4]
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f004 fbfc 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801b7b8:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801b7ba:	2400      	movs	r4, #0
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d004      	beq.n	801b7cc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801b7c2:	69f9      	ldr	r1, [r7, #28]
 801b7c4:	68f8      	ldr	r0, [r7, #12]
 801b7c6:	f7ef fff9 	bl	800b7bc <_ZN14MockNamedValueC1ERKS_>
 801b7ca:	e00c      	b.n	801b7e6 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801b7cc:	f107 0314 	add.w	r3, r7, #20
 801b7d0:	490a      	ldr	r1, [pc, #40]	; (801b7fc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f7f1 ff4d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801b7d8:	2401      	movs	r4, #1
 801b7da:	f107 0314 	add.w	r3, r7, #20
 801b7de:	4619      	mov	r1, r3
 801b7e0:	68f8      	ldr	r0, [r7, #12]
 801b7e2:	f002 fc6b 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 801b7e6:	2c00      	cmp	r4, #0
 801b7e8:	d004      	beq.n	801b7f4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801b7ea:	f107 0314 	add.w	r3, r7, #20
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f7f2 faf7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801b7f4:	68f8      	ldr	r0, [r7, #12]
 801b7f6:	3724      	adds	r7, #36	; 0x24
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	bd90      	pop	{r4, r7, pc}
 801b7fc:	08026e08 	.word	0x08026e08

0801b800 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801b800:	b580      	push	{r7, lr}
 801b802:	b084      	sub	sp, #16
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	69db      	ldr	r3, [r3, #28]
 801b80c:	4618      	mov	r0, r3
 801b80e:	f004 fbfe 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801b812:	60f8      	str	r0, [r7, #12]
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d014      	beq.n	801b844 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801b81a:	68f9      	ldr	r1, [r7, #12]
 801b81c:	6878      	ldr	r0, [r7, #4]
 801b81e:	f000 fced 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b822:	4603      	mov	r3, r0
 801b824:	4618      	mov	r0, r3
 801b826:	f000 fd1f 	bl	801c268 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b82a:	4603      	mov	r3, r0
 801b82c:	f083 0301 	eor.w	r3, r3, #1
 801b830:	b2db      	uxtb	r3, r3
 801b832:	2b00      	cmp	r3, #0
 801b834:	d001      	beq.n	801b83a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801b836:	2300      	movs	r3, #0
 801b838:	e023      	b.n	801b882 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801b83a:	68f8      	ldr	r0, [r7, #12]
 801b83c:	f004 faf0 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801b840:	60f8      	str	r0, [r7, #12]
 801b842:	e7e7      	b.n	801b814 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	6a1b      	ldr	r3, [r3, #32]
 801b848:	4618      	mov	r0, r3
 801b84a:	f004 fbe0 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801b84e:	60f8      	str	r0, [r7, #12]
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d014      	beq.n	801b880 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801b856:	68f9      	ldr	r1, [r7, #12]
 801b858:	6878      	ldr	r0, [r7, #4]
 801b85a:	f000 fccf 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801b85e:	4603      	mov	r3, r0
 801b860:	4618      	mov	r0, r3
 801b862:	f000 fd01 	bl	801c268 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801b866:	4603      	mov	r3, r0
 801b868:	f083 0301 	eor.w	r3, r3, #1
 801b86c:	b2db      	uxtb	r3, r3
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d001      	beq.n	801b876 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801b872:	2300      	movs	r3, #0
 801b874:	e005      	b.n	801b882 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801b876:	68f8      	ldr	r0, [r7, #12]
 801b878:	f004 fad2 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801b87c:	60f8      	str	r0, [r7, #12]
 801b87e:	e7e7      	b.n	801b850 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801b880:	2301      	movs	r3, #1
}
 801b882:	4618      	mov	r0, r3
 801b884:	3710      	adds	r7, #16
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}

0801b88a <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801b88a:	b480      	push	{r7}
 801b88c:	b083      	sub	sp, #12
 801b88e:	af00      	add	r7, sp, #0
 801b890:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	2201      	movs	r2, #1
 801b896:	731a      	strb	r2, [r3, #12]
    return *this;
 801b898:	687b      	ldr	r3, [r7, #4]
}
 801b89a:	4618      	mov	r0, r3
 801b89c:	370c      	adds	r7, #12
 801b89e:	46bd      	mov	sp, r7
 801b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a4:	4770      	bx	lr

0801b8a6 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801b8a6:	b480      	push	{r7}
 801b8a8:	b083      	sub	sp, #12
 801b8aa:	af00      	add	r7, sp, #0
 801b8ac:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	bf0c      	ite	eq
 801b8ba:	2301      	moveq	r3, #1
 801b8bc:	2300      	movne	r3, #0
 801b8be:	b2db      	uxtb	r3, r3
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	370c      	adds	r7, #12
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ca:	4770      	bx	lr

0801b8cc <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801b8cc:	b480      	push	{r7}
 801b8ce:	b083      	sub	sp, #12
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	bf34      	ite	cc
 801b8e0:	2301      	movcc	r3, #1
 801b8e2:	2300      	movcs	r3, #0
 801b8e4:	b2db      	uxtb	r3, r3
}
 801b8e6:	4618      	mov	r0, r3
 801b8e8:	370c      	adds	r7, #12
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f0:	4770      	bx	lr

0801b8f2 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801b8f2:	b580      	push	{r7, lr}
 801b8f4:	b082      	sub	sp, #8
 801b8f6:	af00      	add	r7, sp, #0
 801b8f8:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	33cc      	adds	r3, #204	; 0xcc
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	6878      	ldr	r0, [r7, #4]
 801b904:	4798      	blx	r3
 801b906:	4603      	mov	r3, r0
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d00c      	beq.n	801b926 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	7b1b      	ldrb	r3, [r3, #12]
 801b910:	f083 0301 	eor.w	r3, r3, #1
 801b914:	b2db      	uxtb	r3, r3
 801b916:	2b00      	cmp	r3, #0
 801b918:	d103      	bne.n	801b922 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	7b5b      	ldrb	r3, [r3, #13]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d001      	beq.n	801b926 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801b922:	2301      	movs	r3, #1
 801b924:	e000      	b.n	801b928 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801b926:	2300      	movs	r3, #0
}
 801b928:	4618      	mov	r0, r3
 801b92a:	3708      	adds	r7, #8
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}

0801b930 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b082      	sub	sp, #8
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	33d0      	adds	r3, #208	; 0xd0
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	4798      	blx	r3
 801b944:	4603      	mov	r3, r0
 801b946:	2b00      	cmp	r3, #0
 801b948:	d006      	beq.n	801b958 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801b950:	2b00      	cmp	r3, #0
 801b952:	d001      	beq.n	801b958 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801b954:	2301      	movs	r3, #1
 801b956:	e000      	b.n	801b95a <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801b958:	2300      	movs	r3, #0
}
 801b95a:	4618      	mov	r0, r3
 801b95c:	3708      	adds	r7, #8
 801b95e:	46bd      	mov	sp, r7
 801b960:	bd80      	pop	{r7, pc}

0801b962 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801b962:	b580      	push	{r7, lr}
 801b964:	b082      	sub	sp, #8
 801b966:	af00      	add	r7, sp, #0
 801b968:	6078      	str	r0, [r7, #4]
 801b96a:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b970:	1c5a      	adds	r2, r3, #1
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	691b      	ldr	r3, [r3, #16]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d00c      	beq.n	801b998 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801b982:	683a      	ldr	r2, [r7, #0]
 801b984:	429a      	cmp	r2, r3
 801b986:	d304      	bcc.n	801b992 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	695b      	ldr	r3, [r3, #20]
 801b98c:	683a      	ldr	r2, [r7, #0]
 801b98e:	429a      	cmp	r2, r3
 801b990:	d902      	bls.n	801b998 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	2201      	movs	r2, #1
 801b996:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	33ec      	adds	r3, #236	; 0xec
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	6878      	ldr	r0, [r7, #4]
 801b9a2:	4798      	blx	r3
}
 801b9a4:	bf00      	nop
 801b9a6:	3708      	adds	r7, #8
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	bd80      	pop	{r7, pc}

0801b9ac <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801b9ac:	b480      	push	{r7}
 801b9ae:	b083      	sub	sp, #12
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	2201      	movs	r2, #1
 801b9b8:	735a      	strb	r2, [r3, #13]
}
 801b9ba:	bf00      	nop
 801b9bc:	370c      	adds	r7, #12
 801b9be:	46bd      	mov	sp, r7
 801b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c4:	4770      	bx	lr

0801b9c6 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801b9c6:	b480      	push	{r7}
 801b9c8:	b083      	sub	sp, #12
 801b9ca:	af00      	add	r7, sp, #0
 801b9cc:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	2201      	movs	r2, #1
 801b9d2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801b9d6:	bf00      	nop
 801b9d8:	370c      	adds	r7, #12
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e0:	4770      	bx	lr

0801b9e2 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801b9e2:	b580      	push	{r7, lr}
 801b9e4:	b084      	sub	sp, #16
 801b9e6:	af00      	add	r7, sp, #0
 801b9e8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801b9f0:	f083 0301 	eor.w	r3, r3, #1
 801b9f4:	b2da      	uxtb	r2, r3
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	2200      	movs	r2, #0
 801ba00:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	69db      	ldr	r3, [r3, #28]
 801ba06:	4618      	mov	r0, r3
 801ba08:	f004 fb01 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801ba0c:	60f8      	str	r0, [r7, #12]
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d00d      	beq.n	801ba30 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801ba14:	68f9      	ldr	r1, [r7, #12]
 801ba16:	6878      	ldr	r0, [r7, #4]
 801ba18:	f000 fbf0 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	2100      	movs	r1, #0
 801ba20:	4618      	mov	r0, r3
 801ba22:	f000 fc11 	bl	801c248 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801ba26:	68f8      	ldr	r0, [r7, #12]
 801ba28:	f004 f9fa 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801ba2c:	60f8      	str	r0, [r7, #12]
 801ba2e:	e7ee      	b.n	801ba0e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	6a1b      	ldr	r3, [r3, #32]
 801ba34:	4618      	mov	r0, r3
 801ba36:	f004 faea 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801ba3a:	60f8      	str	r0, [r7, #12]
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d00d      	beq.n	801ba5e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801ba42:	68f9      	ldr	r1, [r7, #12]
 801ba44:	6878      	ldr	r0, [r7, #4]
 801ba46:	f000 fbd9 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	2100      	movs	r1, #0
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f000 fbfa 	bl	801c248 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801ba54:	68f8      	ldr	r0, [r7, #12]
 801ba56:	f004 f9e3 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801ba5a:	60f8      	str	r0, [r7, #12]
 801ba5c:	e7ee      	b.n	801ba3c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801ba5e:	bf00      	nop
 801ba60:	3710      	adds	r7, #16
 801ba62:	46bd      	mov	sp, r7
 801ba64:	bd80      	pop	{r7, pc}

0801ba66 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801ba66:	b590      	push	{r4, r7, lr}
 801ba68:	b087      	sub	sp, #28
 801ba6a:	af00      	add	r7, sp, #0
 801ba6c:	6078      	str	r0, [r7, #4]
 801ba6e:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	69db      	ldr	r3, [r3, #28]
 801ba74:	4618      	mov	r0, r3
 801ba76:	f004 faca 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801ba7a:	6178      	str	r0, [r7, #20]
 801ba7c:	697b      	ldr	r3, [r7, #20]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d022      	beq.n	801bac8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801ba82:	f107 030c 	add.w	r3, r7, #12
 801ba86:	6979      	ldr	r1, [r7, #20]
 801ba88:	4618      	mov	r0, r3
 801ba8a:	f004 fa04 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801ba8e:	f107 030c 	add.w	r3, r7, #12
 801ba92:	6839      	ldr	r1, [r7, #0]
 801ba94:	4618      	mov	r0, r3
 801ba96:	f7f2 f9b0 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	461c      	mov	r4, r3
 801ba9e:	f107 030c 	add.w	r3, r7, #12
 801baa2:	4618      	mov	r0, r3
 801baa4:	f7f2 f99d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801baa8:	2c00      	cmp	r4, #0
 801baaa:	d008      	beq.n	801babe <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801baac:	6979      	ldr	r1, [r7, #20]
 801baae:	6878      	ldr	r0, [r7, #4]
 801bab0:	f000 fba4 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801bab4:	4603      	mov	r3, r0
 801bab6:	2101      	movs	r1, #1
 801bab8:	4618      	mov	r0, r3
 801baba:	f000 fbc5 	bl	801c248 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801babe:	6978      	ldr	r0, [r7, #20]
 801bac0:	f004 f9ae 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801bac4:	6178      	str	r0, [r7, #20]
 801bac6:	e7d9      	b.n	801ba7c <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801bac8:	bf00      	nop
 801baca:	371c      	adds	r7, #28
 801bacc:	46bd      	mov	sp, r7
 801bace:	bd90      	pop	{r4, r7, pc}

0801bad0 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801bad0:	b590      	push	{r4, r7, lr}
 801bad2:	b087      	sub	sp, #28
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	6a1b      	ldr	r3, [r3, #32]
 801bade:	4618      	mov	r0, r3
 801bae0:	f004 fa95 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801bae4:	6178      	str	r0, [r7, #20]
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d022      	beq.n	801bb32 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801baec:	f107 030c 	add.w	r3, r7, #12
 801baf0:	6979      	ldr	r1, [r7, #20]
 801baf2:	4618      	mov	r0, r3
 801baf4:	f004 f9cf 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801baf8:	f107 030c 	add.w	r3, r7, #12
 801bafc:	6839      	ldr	r1, [r7, #0]
 801bafe:	4618      	mov	r0, r3
 801bb00:	f7f2 f97b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801bb04:	4603      	mov	r3, r0
 801bb06:	461c      	mov	r4, r3
 801bb08:	f107 030c 	add.w	r3, r7, #12
 801bb0c:	4618      	mov	r0, r3
 801bb0e:	f7f2 f968 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801bb12:	2c00      	cmp	r4, #0
 801bb14:	d008      	beq.n	801bb28 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801bb16:	6979      	ldr	r1, [r7, #20]
 801bb18:	6878      	ldr	r0, [r7, #4]
 801bb1a:	f000 fb6f 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801bb1e:	4603      	mov	r3, r0
 801bb20:	2101      	movs	r1, #1
 801bb22:	4618      	mov	r0, r3
 801bb24:	f000 fb90 	bl	801c248 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801bb28:	6978      	ldr	r0, [r7, #20]
 801bb2a:	f004 f979 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801bb2e:	6178      	str	r0, [r7, #20]
 801bb30:	e7d9      	b.n	801bae6 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801bb32:	bf00      	nop
 801bb34:	371c      	adds	r7, #28
 801bb36:	46bd      	mov	sp, r7
 801bb38:	bd90      	pop	{r4, r7, pc}
	...

0801bb3c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b086      	sub	sp, #24
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	60f8      	str	r0, [r7, #12]
 801bb44:	60b9      	str	r1, [r7, #8]
 801bb46:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	69db      	ldr	r3, [r3, #28]
 801bb4c:	6879      	ldr	r1, [r7, #4]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f004 fa2e 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bb54:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801bb56:	697b      	ldr	r3, [r7, #20]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d005      	beq.n	801bb68 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	6979      	ldr	r1, [r7, #20]
 801bb60:	4618      	mov	r0, r3
 801bb62:	f7ff fa0b 	bl	801af7c <_Z10StringFromRK14MockNamedValue>
 801bb66:	e003      	b.n	801bb70 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801bb68:	4903      	ldr	r1, [pc, #12]	; (801bb78 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801bb6a:	68f8      	ldr	r0, [r7, #12]
 801bb6c:	f7f1 fd81 	bl	800d672 <_ZN12SimpleStringC1EPKc>
}
 801bb70:	68f8      	ldr	r0, [r7, #12]
 801bb72:	3718      	adds	r7, #24
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}
 801bb78:	08026e74 	.word	0x08026e74

0801bb7c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801bb7c:	b590      	push	{r4, r7, lr}
 801bb7e:	b087      	sub	sp, #28
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
 801bb84:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	69dc      	ldr	r4, [r3, #28]
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	335c      	adds	r3, #92	; 0x5c
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f107 020c 	add.w	r2, r7, #12
 801bb96:	6839      	ldr	r1, [r7, #0]
 801bb98:	4610      	mov	r0, r2
 801bb9a:	4798      	blx	r3
 801bb9c:	f107 030c 	add.w	r3, r7, #12
 801bba0:	4619      	mov	r1, r3
 801bba2:	4620      	mov	r0, r4
 801bba4:	f004 fa04 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bba8:	6178      	str	r0, [r7, #20]
 801bbaa:	f107 030c 	add.w	r3, r7, #12
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f7f2 f917 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801bbb4:	697b      	ldr	r3, [r7, #20]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d00d      	beq.n	801bbd6 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801bbba:	697b      	ldr	r3, [r7, #20]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	3350      	adds	r3, #80	; 0x50
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	6839      	ldr	r1, [r7, #0]
 801bbc4:	6978      	ldr	r0, [r7, #20]
 801bbc6:	4798      	blx	r3
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	bf14      	ite	ne
 801bbce:	2301      	movne	r3, #1
 801bbd0:	2300      	moveq	r3, #0
 801bbd2:	b2db      	uxtb	r3, r3
 801bbd4:	e006      	b.n	801bbe4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	7b1b      	ldrb	r3, [r3, #12]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	bf14      	ite	ne
 801bbde:	2301      	movne	r3, #1
 801bbe0:	2300      	moveq	r3, #0
 801bbe2:	b2db      	uxtb	r3, r3
}
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	371c      	adds	r7, #28
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bd90      	pop	{r4, r7, pc}

0801bbec <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801bbec:	b590      	push	{r4, r7, lr}
 801bbee:	b087      	sub	sp, #28
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]
 801bbf4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6a1c      	ldr	r4, [r3, #32]
 801bbfa:	683b      	ldr	r3, [r7, #0]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	335c      	adds	r3, #92	; 0x5c
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	f107 020c 	add.w	r2, r7, #12
 801bc06:	6839      	ldr	r1, [r7, #0]
 801bc08:	4610      	mov	r0, r2
 801bc0a:	4798      	blx	r3
 801bc0c:	f107 030c 	add.w	r3, r7, #12
 801bc10:	4619      	mov	r1, r3
 801bc12:	4620      	mov	r0, r4
 801bc14:	f004 f9cc 	bl	801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bc18:	6178      	str	r0, [r7, #20]
 801bc1a:	f107 030c 	add.w	r3, r7, #12
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7f2 f8df 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d00d      	beq.n	801bc46 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	3354      	adds	r3, #84	; 0x54
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	6839      	ldr	r1, [r7, #0]
 801bc34:	6978      	ldr	r0, [r7, #20]
 801bc36:	4798      	blx	r3
 801bc38:	4603      	mov	r3, r0
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	bf14      	ite	ne
 801bc3e:	2301      	movne	r3, #1
 801bc40:	2300      	moveq	r3, #0
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	e006      	b.n	801bc54 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	7b1b      	ldrb	r3, [r3, #12]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	bf14      	ite	ne
 801bc4e:	2301      	movne	r3, #1
 801bc50:	2300      	moveq	r3, #0
 801bc52:	b2db      	uxtb	r3, r3
}
 801bc54:	4618      	mov	r0, r3
 801bc56:	371c      	adds	r7, #28
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd90      	pop	{r4, r7, pc}

0801bc5c <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801bc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc5e:	b0a1      	sub	sp, #132	; 0x84
 801bc60:	af02      	add	r7, sp, #8
 801bc62:	6078      	str	r0, [r7, #4]
 801bc64:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801bc66:	49bc      	ldr	r1, [pc, #752]	; (801bf58 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f7f1 fd02 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d012      	beq.n	801bc9e <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801bc7c:	f107 030c 	add.w	r3, r7, #12
 801bc80:	49b6      	ldr	r1, [pc, #728]	; (801bf5c <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7f2 fdb4 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801bc88:	f107 030c 	add.w	r3, r7, #12
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	6878      	ldr	r0, [r7, #4]
 801bc90:	f7f1 fd5b 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801bc94:	f107 030c 	add.w	r3, r7, #12
 801bc98:	4618      	mov	r0, r3
 801bc9a:	f7f2 f8a2 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    str += getName();
 801bc9e:	f107 0314 	add.w	r3, r7, #20
 801bca2:	6839      	ldr	r1, [r7, #0]
 801bca4:	4618      	mov	r0, r3
 801bca6:	f7ff f989 	bl	801afbc <_ZNK23MockCheckedExpectedCall7getNameEv>
 801bcaa:	f107 0314 	add.w	r3, r7, #20
 801bcae:	4619      	mov	r1, r3
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f7f2 f913 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bcb6:	f107 0314 	add.w	r3, r7, #20
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7f2 f891 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801bcc0:	49a7      	ldr	r1, [pc, #668]	; (801bf60 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f7f2 f91c 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801bcc8:	683b      	ldr	r3, [r7, #0]
 801bcca:	691b      	ldr	r3, [r3, #16]
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d02d      	beq.n	801bd2c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	691a      	ldr	r2, [r3, #16]
 801bcd4:	683b      	ldr	r3, [r7, #0]
 801bcd6:	695b      	ldr	r3, [r3, #20]
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	d113      	bne.n	801bd04 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	691a      	ldr	r2, [r3, #16]
 801bce0:	f107 031c 	add.w	r3, r7, #28
 801bce4:	499f      	ldr	r1, [pc, #636]	; (801bf64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801bce6:	4618      	mov	r0, r3
 801bce8:	f7f2 fd82 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801bcec:	f107 031c 	add.w	r3, r7, #28
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	6878      	ldr	r0, [r7, #4]
 801bcf4:	f7f2 f8f2 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bcf8:	f107 031c 	add.w	r3, r7, #28
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	f7f2 f870 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801bd02:	e013      	b.n	801bd2c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801bd04:	683b      	ldr	r3, [r7, #0]
 801bd06:	691a      	ldr	r2, [r3, #16]
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	695b      	ldr	r3, [r3, #20]
 801bd0c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801bd10:	4995      	ldr	r1, [pc, #596]	; (801bf68 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801bd12:	f7f2 fd6d 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801bd16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bd1a:	4619      	mov	r1, r3
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	f7f2 f8dd 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bd22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bd26:	4618      	mov	r0, r3
 801bd28:	f7f2 f85b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801bd2c:	683b      	ldr	r3, [r7, #0]
 801bd2e:	69db      	ldr	r3, [r3, #28]
 801bd30:	4618      	mov	r0, r3
 801bd32:	f004 f96c 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801bd36:	4603      	mov	r3, r0
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d109      	bne.n	801bd50 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801bd3c:	683b      	ldr	r3, [r7, #0]
 801bd3e:	6a1b      	ldr	r3, [r3, #32]
 801bd40:	4618      	mov	r0, r3
 801bd42:	f004 f964 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801bd46:	4603      	mov	r3, r0
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d101      	bne.n	801bd50 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	e000      	b.n	801bd52 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801bd50:	2300      	movs	r3, #0
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d00b      	beq.n	801bd6e <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801bd56:	683b      	ldr	r3, [r7, #0]
 801bd58:	7b1b      	ldrb	r3, [r3, #12]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d001      	beq.n	801bd62 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801bd5e:	4b83      	ldr	r3, [pc, #524]	; (801bf6c <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801bd60:	e000      	b.n	801bd64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801bd62:	4b83      	ldr	r3, [pc, #524]	; (801bf70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801bd64:	4619      	mov	r1, r3
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f7f2 f8ca 	bl	800df00 <_ZN12SimpleStringpLEPKc>
 801bd6c:	e0e3      	b.n	801bf36 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801bd6e:	683b      	ldr	r3, [r7, #0]
 801bd70:	69db      	ldr	r3, [r3, #28]
 801bd72:	4618      	mov	r0, r3
 801bd74:	f004 f94b 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801bd78:	6778      	str	r0, [r7, #116]	; 0x74
 801bd7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d069      	beq.n	801be54 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801bd80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bd84:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bd86:	4618      	mov	r0, r3
 801bd88:	f004 f898 	bl	801febc <_ZNK22MockNamedValueListNode7getTypeEv>
 801bd8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bd90:	4618      	mov	r0, r3
 801bd92:	f7f1 fff9 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801bd96:	4605      	mov	r5, r0
 801bd98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bd9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bd9e:	4618      	mov	r0, r3
 801bda0:	f004 f879 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801bda4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f7f1 ffed 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801bdae:	4606      	mov	r6, r0
 801bdb0:	683b      	ldr	r3, [r7, #0]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	33a4      	adds	r3, #164	; 0xa4
 801bdb6:	681c      	ldr	r4, [r3, #0]
 801bdb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801bdbc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f004 f869 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801bdc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bdc8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801bdcc:	6839      	ldr	r1, [r7, #0]
 801bdce:	4618      	mov	r0, r3
 801bdd0:	47a0      	blx	r4
 801bdd2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7f1 ffd6 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801bddc:	4603      	mov	r3, r0
 801bdde:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801bde2:	9300      	str	r3, [sp, #0]
 801bde4:	4633      	mov	r3, r6
 801bde6:	462a      	mov	r2, r5
 801bde8:	4962      	ldr	r1, [pc, #392]	; (801bf74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801bdea:	f7f2 fd01 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801bdee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bdf2:	4619      	mov	r1, r3
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	f7f2 f871 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bdfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7f1 ffef 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801be04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801be08:	4618      	mov	r0, r3
 801be0a:	f7f1 ffea 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801be0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801be12:	4618      	mov	r0, r3
 801be14:	f7f1 ffe5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801be18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7f1 ffe0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801be22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801be26:	4618      	mov	r0, r3
 801be28:	f7f1 ffdb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801be2c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801be2e:	f003 fff7 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801be32:	4603      	mov	r3, r0
 801be34:	2b00      	cmp	r3, #0
 801be36:	bf14      	ite	ne
 801be38:	2301      	movne	r3, #1
 801be3a:	2300      	moveq	r3, #0
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d003      	beq.n	801be4a <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801be42:	494d      	ldr	r1, [pc, #308]	; (801bf78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801be44:	6878      	ldr	r0, [r7, #4]
 801be46:	f7f2 f85b 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801be4a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801be4c:	f003 ffe8 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801be50:	6778      	str	r0, [r7, #116]	; 0x74
 801be52:	e792      	b.n	801bd7a <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801be54:	683b      	ldr	r3, [r7, #0]
 801be56:	69db      	ldr	r3, [r3, #28]
 801be58:	4618      	mov	r0, r3
 801be5a:	f004 f8d8 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801be5e:	4603      	mov	r3, r0
 801be60:	2b00      	cmp	r3, #0
 801be62:	d009      	beq.n	801be78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801be64:	683b      	ldr	r3, [r7, #0]
 801be66:	6a1b      	ldr	r3, [r3, #32]
 801be68:	4618      	mov	r0, r3
 801be6a:	f004 f8d0 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801be6e:	4603      	mov	r3, r0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d001      	beq.n	801be78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801be74:	2301      	movs	r3, #1
 801be76:	e000      	b.n	801be7a <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801be78:	2300      	movs	r3, #0
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d003      	beq.n	801be86 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801be7e:	493e      	ldr	r1, [pc, #248]	; (801bf78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f7f2 f83d 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801be86:	683b      	ldr	r3, [r7, #0]
 801be88:	6a1b      	ldr	r3, [r3, #32]
 801be8a:	4618      	mov	r0, r3
 801be8c:	f004 f8bf 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801be90:	6778      	str	r0, [r7, #116]	; 0x74
 801be92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be94:	2b00      	cmp	r3, #0
 801be96:	d046      	beq.n	801bf26 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801be98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801be9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801be9e:	4618      	mov	r0, r3
 801bea0:	f004 f80c 	bl	801febc <_ZNK22MockNamedValueListNode7getTypeEv>
 801bea4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801bea8:	4618      	mov	r0, r3
 801beaa:	f7f1 ff6d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801beae:	4604      	mov	r4, r0
 801beb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801beb4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801beb6:	4618      	mov	r0, r3
 801beb8:	f003 ffed 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801bebc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7f1 ff61 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801bec6:	4603      	mov	r3, r0
 801bec8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801becc:	4622      	mov	r2, r4
 801bece:	492b      	ldr	r1, [pc, #172]	; (801bf7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801bed0:	f7f2 fc8e 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801bed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801bed8:	4619      	mov	r1, r3
 801beda:	6878      	ldr	r0, [r7, #4]
 801bedc:	f7f1 fffe 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bee0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801bee4:	4618      	mov	r0, r3
 801bee6:	f7f1 ff7c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801beea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801beee:	4618      	mov	r0, r3
 801bef0:	f7f1 ff77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801bef4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801bef8:	4618      	mov	r0, r3
 801befa:	f7f1 ff72 	bl	800dde2 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801befe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bf00:	f003 ff8e 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801bf04:	4603      	mov	r3, r0
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	bf14      	ite	ne
 801bf0a:	2301      	movne	r3, #1
 801bf0c:	2300      	moveq	r3, #0
 801bf0e:	b2db      	uxtb	r3, r3
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d003      	beq.n	801bf1c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801bf14:	4918      	ldr	r1, [pc, #96]	; (801bf78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801bf16:	6878      	ldr	r0, [r7, #4]
 801bf18:	f7f1 fff2 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801bf1c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bf1e:	f003 ff7f 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801bf22:	6778      	str	r0, [r7, #116]	; 0x74
 801bf24:	e7b5      	b.n	801be92 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	7b1b      	ldrb	r3, [r3, #12]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d003      	beq.n	801bf36 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801bf2e:	4914      	ldr	r1, [pc, #80]	; (801bf80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801bf30:	6878      	ldr	r0, [r7, #4]
 801bf32:	f7f1 ffe5 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bf36:	683b      	ldr	r3, [r7, #0]
 801bf38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bf3e:	2b01      	cmp	r3, #1
 801bf40:	d101      	bne.n	801bf46 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801bf42:	4c05      	ldr	r4, [pc, #20]	; (801bf58 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801bf44:	e000      	b.n	801bf48 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801bf46:	4c0f      	ldr	r4, [pc, #60]	; (801bf84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801bf48:	683b      	ldr	r3, [r7, #0]
 801bf4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bf4c:	683a      	ldr	r2, [r7, #0]
 801bf4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801bf50:	2a01      	cmp	r2, #1
 801bf52:	d119      	bne.n	801bf88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801bf54:	4a00      	ldr	r2, [pc, #0]	; (801bf58 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801bf56:	e018      	b.n	801bf8a <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801bf58:	08026e08 	.word	0x08026e08
 801bf5c:	08026e7c 	.word	0x08026e7c
 801bf60:	08026e94 	.word	0x08026e94
 801bf64:	08026e9c 	.word	0x08026e9c
 801bf68:	08026ebc 	.word	0x08026ebc
 801bf6c:	08026ee0 	.word	0x08026ee0
 801bf70:	08026ef8 	.word	0x08026ef8
 801bf74:	08026f08 	.word	0x08026f08
 801bf78:	08026f14 	.word	0x08026f14
 801bf7c:	08026f18 	.word	0x08026f18
 801bf80:	08026f28 	.word	0x08026f28
 801bf84:	08026f48 	.word	0x08026f48
 801bf88:	4a0c      	ldr	r2, [pc, #48]	; (801bfbc <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801bf8a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801bf8e:	9201      	str	r2, [sp, #4]
 801bf90:	9300      	str	r3, [sp, #0]
 801bf92:	4623      	mov	r3, r4
 801bf94:	460a      	mov	r2, r1
 801bf96:	490a      	ldr	r1, [pc, #40]	; (801bfc0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801bf98:	f7f2 fc2a 	bl	800e7f0 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801bf9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801bfa0:	4619      	mov	r1, r3
 801bfa2:	6878      	ldr	r0, [r7, #4]
 801bfa4:	f7f1 ff9a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801bfa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7f1 ff18 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    return str;
 801bfb2:	bf00      	nop
}
 801bfb4:	6878      	ldr	r0, [r7, #4]
 801bfb6:	377c      	adds	r7, #124	; 0x7c
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfbc:	08026f48 	.word	0x08026f48
 801bfc0:	08026f4c 	.word	0x08026f4c

0801bfc4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801bfc4:	b590      	push	{r4, r7, lr}
 801bfc6:	b095      	sub	sp, #84	; 0x54
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	6078      	str	r0, [r7, #4]
 801bfcc:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801bfce:	496c      	ldr	r1, [pc, #432]	; (801c180 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801bfd0:	6878      	ldr	r0, [r7, #4]
 801bfd2:	f7f1 fb4e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801bfd6:	683b      	ldr	r3, [r7, #0]
 801bfd8:	69db      	ldr	r3, [r3, #28]
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f004 f817 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801bfe0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801bfe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d05e      	beq.n	801c0a6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801bfe8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bfea:	6838      	ldr	r0, [r7, #0]
 801bfec:	f000 f906 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801bff0:	4603      	mov	r3, r0
 801bff2:	4618      	mov	r0, r3
 801bff4:	f000 f938 	bl	801c268 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801bff8:	4603      	mov	r3, r0
 801bffa:	f083 0301 	eor.w	r3, r3, #1
 801bffe:	b2db      	uxtb	r3, r3
 801c000:	2b00      	cmp	r3, #0
 801c002:	d04b      	beq.n	801c09c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801c004:	f107 030c 	add.w	r3, r7, #12
 801c008:	495d      	ldr	r1, [pc, #372]	; (801c180 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c00a:	4618      	mov	r0, r3
 801c00c:	f7f1 fb31 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801c010:	f107 030c 	add.w	r3, r7, #12
 801c014:	4619      	mov	r1, r3
 801c016:	6878      	ldr	r0, [r7, #4]
 801c018:	f7f1 ff34 	bl	800de84 <_ZneRK12SimpleStringS1_>
 801c01c:	4603      	mov	r3, r0
 801c01e:	461c      	mov	r4, r3
 801c020:	f107 030c 	add.w	r3, r7, #12
 801c024:	4618      	mov	r0, r3
 801c026:	f7f1 fedc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c02a:	2c00      	cmp	r4, #0
 801c02c:	d003      	beq.n	801c036 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801c02e:	4955      	ldr	r1, [pc, #340]	; (801c184 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801c030:	6878      	ldr	r0, [r7, #4]
 801c032:	f7f1 ff65 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801c036:	f107 031c 	add.w	r3, r7, #28
 801c03a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c03c:	4618      	mov	r0, r3
 801c03e:	f003 ff3d 	bl	801febc <_ZNK22MockNamedValueListNode7getTypeEv>
 801c042:	f107 031c 	add.w	r3, r7, #28
 801c046:	4618      	mov	r0, r3
 801c048:	f7f1 fe9e 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801c04c:	4604      	mov	r4, r0
 801c04e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c052:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c054:	4618      	mov	r0, r3
 801c056:	f003 ff1e 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801c05a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c05e:	4618      	mov	r0, r3
 801c060:	f7f1 fe92 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801c064:	4603      	mov	r3, r0
 801c066:	f107 0014 	add.w	r0, r7, #20
 801c06a:	4622      	mov	r2, r4
 801c06c:	4946      	ldr	r1, [pc, #280]	; (801c188 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801c06e:	f7f2 fbbf 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801c072:	f107 0314 	add.w	r3, r7, #20
 801c076:	4619      	mov	r1, r3
 801c078:	6878      	ldr	r0, [r7, #4]
 801c07a:	f7f1 ff2f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801c07e:	f107 0314 	add.w	r3, r7, #20
 801c082:	4618      	mov	r0, r3
 801c084:	f7f1 fead 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c08c:	4618      	mov	r0, r3
 801c08e:	f7f1 fea8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c092:	f107 031c 	add.w	r3, r7, #28
 801c096:	4618      	mov	r0, r3
 801c098:	f7f1 fea3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801c09c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c09e:	f003 febf 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801c0a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c0a4:	e79d      	b.n	801bfe2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801c0a6:	683b      	ldr	r3, [r7, #0]
 801c0a8:	6a1b      	ldr	r3, [r3, #32]
 801c0aa:	4618      	mov	r0, r3
 801c0ac:	f003 ffaf 	bl	802000e <_ZN18MockNamedValueList5beginEv>
 801c0b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d05e      	beq.n	801c176 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801c0b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c0ba:	6838      	ldr	r0, [r7, #0]
 801c0bc:	f000 f89e 	bl	801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	f000 f8d0 	bl	801c268 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c0c8:	4603      	mov	r3, r0
 801c0ca:	f083 0301 	eor.w	r3, r3, #1
 801c0ce:	b2db      	uxtb	r3, r3
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d04b      	beq.n	801c16c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801c0d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c0d8:	4929      	ldr	r1, [pc, #164]	; (801c180 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f7f1 fac9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801c0e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c0e4:	4619      	mov	r1, r3
 801c0e6:	6878      	ldr	r0, [r7, #4]
 801c0e8:	f7f1 fecc 	bl	800de84 <_ZneRK12SimpleStringS1_>
 801c0ec:	4603      	mov	r3, r0
 801c0ee:	461c      	mov	r4, r3
 801c0f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7f1 fe74 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c0fa:	2c00      	cmp	r4, #0
 801c0fc:	d003      	beq.n	801c106 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801c0fe:	4921      	ldr	r1, [pc, #132]	; (801c184 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801c100:	6878      	ldr	r0, [r7, #4]
 801c102:	f7f1 fefd 	bl	800df00 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801c106:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c10a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c10c:	4618      	mov	r0, r3
 801c10e:	f003 fed5 	bl	801febc <_ZNK22MockNamedValueListNode7getTypeEv>
 801c112:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c116:	4618      	mov	r0, r3
 801c118:	f7f1 fe36 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801c11c:	4604      	mov	r4, r0
 801c11e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c122:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c124:	4618      	mov	r0, r3
 801c126:	f003 feb6 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801c12a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c12e:	4618      	mov	r0, r3
 801c130:	f7f1 fe2a 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801c134:	4603      	mov	r3, r0
 801c136:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c13a:	4622      	mov	r2, r4
 801c13c:	4912      	ldr	r1, [pc, #72]	; (801c188 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801c13e:	f7f2 fb57 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801c142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c146:	4619      	mov	r1, r3
 801c148:	6878      	ldr	r0, [r7, #4]
 801c14a:	f7f1 fec7 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801c14e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c152:	4618      	mov	r0, r3
 801c154:	f7f1 fe45 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c158:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7f1 fe40 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c166:	4618      	mov	r0, r3
 801c168:	f7f1 fe3b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801c16c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c16e:	f003 fe57 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801c172:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c174:	e79d      	b.n	801c0b2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801c176:	bf00      	nop
}
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	3754      	adds	r7, #84	; 0x54
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bd90      	pop	{r4, r7, pc}
 801c180:	08026e08 	.word	0x08026e08
 801c184:	08026f14 	.word	0x08026f14
 801c188:	08026f74 	.word	0x08026f74

0801c18c <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801c18c:	b590      	push	{r4, r7, lr}
 801c18e:	b085      	sub	sp, #20
 801c190:	af00      	add	r7, sp, #0
 801c192:	6078      	str	r0, [r7, #4]
 801c194:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801c196:	f107 0308 	add.w	r3, r7, #8
 801c19a:	6879      	ldr	r1, [r7, #4]
 801c19c:	4618      	mov	r0, r3
 801c19e:	f7fe ff0d 	bl	801afbc <_ZNK23MockCheckedExpectedCall7getNameEv>
 801c1a2:	f107 0308 	add.w	r3, r7, #8
 801c1a6:	4619      	mov	r1, r3
 801c1a8:	6838      	ldr	r0, [r7, #0]
 801c1aa:	f7f1 fe26 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	461c      	mov	r4, r3
 801c1b2:	f107 0308 	add.w	r3, r7, #8
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f7f1 fe13 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801c1bc:	4623      	mov	r3, r4
}
 801c1be:	4618      	mov	r0, r3
 801c1c0:	3714      	adds	r7, #20
 801c1c2:	46bd      	mov	sp, r7
 801c1c4:	bd90      	pop	{r4, r7, pc}

0801c1c6 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801c1c6:	b480      	push	{r7}
 801c1c8:	b083      	sub	sp, #12
 801c1ca:	af00      	add	r7, sp, #0
 801c1cc:	6078      	str	r0, [r7, #4]
 801c1ce:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801c1d6:	f083 0301 	eor.w	r3, r3, #1
 801c1da:	b2db      	uxtb	r3, r3
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d104      	bne.n	801c1ea <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c1e4:	683a      	ldr	r2, [r7, #0]
 801c1e6:	429a      	cmp	r2, r3
 801c1e8:	d101      	bne.n	801c1ee <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801c1ea:	2301      	movs	r3, #1
 801c1ec:	e000      	b.n	801c1f0 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801c1ee:	2300      	movs	r3, #0
}
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	370c      	adds	r7, #12
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fa:	4770      	bx	lr

0801c1fc <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801c206:	6838      	ldr	r0, [r7, #0]
 801c208:	f003 fe16 	bl	801fe38 <_ZN22MockNamedValueListNode4itemEv>
 801c20c:	4603      	mov	r3, r0
}
 801c20e:	4618      	mov	r0, r3
 801c210:	3708      	adds	r7, #8
 801c212:	46bd      	mov	sp, r7
 801c214:	bd80      	pop	{r7, pc}
	...

0801c218 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801c218:	b580      	push	{r7, lr}
 801c21a:	b082      	sub	sp, #8
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
 801c220:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	6839      	ldr	r1, [r7, #0]
 801c226:	4618      	mov	r0, r3
 801c228:	f001 ff48 	bl	801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>
 801c22c:	4a05      	ldr	r2, [pc, #20]	; (801c244 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	601a      	str	r2, [r3, #0]
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	2200      	movs	r2, #0
 801c236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	4618      	mov	r0, r3
 801c23e:	3708      	adds	r7, #8
 801c240:	46bd      	mov	sp, r7
 801c242:	bd80      	pop	{r7, pc}
 801c244:	0802a020 	.word	0x0802a020

0801c248 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801c248:	b480      	push	{r7}
 801c24a:	b083      	sub	sp, #12
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	6078      	str	r0, [r7, #4]
 801c250:	460b      	mov	r3, r1
 801c252:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	78fa      	ldrb	r2, [r7, #3]
 801c258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801c25c:	bf00      	nop
 801c25e:	370c      	adds	r7, #12
 801c260:	46bd      	mov	sp, r7
 801c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c266:	4770      	bx	lr

0801c268 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801c268:	b480      	push	{r7}
 801c26a:	b083      	sub	sp, #12
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801c276:	4618      	mov	r0, r3
 801c278:	370c      	adds	r7, #12
 801c27a:	46bd      	mov	sp, r7
 801c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c280:	4770      	bx	lr
	...

0801c284 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b082      	sub	sp, #8
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
 801c28c:	460b      	mov	r3, r1
 801c28e:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	3328      	adds	r3, #40	; 0x28
 801c294:	4907      	ldr	r1, [pc, #28]	; (801c2b4 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801c296:	4618      	mov	r0, r3
 801c298:	f002 f9b2 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	3328      	adds	r3, #40	; 0x28
 801c2a0:	78fa      	ldrb	r2, [r7, #3]
 801c2a2:	4611      	mov	r1, r2
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	f001 ff5b 	bl	801e160 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801c2aa:	687b      	ldr	r3, [r7, #4]
}
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	3708      	adds	r7, #8
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}
 801c2b4:	08026f7c 	.word	0x08026f7c

0801c2b8 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801c2b8:	b580      	push	{r7, lr}
 801c2ba:	b082      	sub	sp, #8
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	6078      	str	r0, [r7, #4]
 801c2c0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	3328      	adds	r3, #40	; 0x28
 801c2c6:	4907      	ldr	r1, [pc, #28]	; (801c2e4 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	f002 f999 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	3328      	adds	r3, #40	; 0x28
 801c2d2:	6839      	ldr	r1, [r7, #0]
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	f001 ff67 	bl	801e1a8 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801c2da:	687b      	ldr	r3, [r7, #4]
}
 801c2dc:	4618      	mov	r0, r3
 801c2de:	3708      	adds	r7, #8
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	bd80      	pop	{r7, pc}
 801c2e4:	08026f7c 	.word	0x08026f7c

0801c2e8 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801c2e8:	b580      	push	{r7, lr}
 801c2ea:	b082      	sub	sp, #8
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	3328      	adds	r3, #40	; 0x28
 801c2f6:	4907      	ldr	r1, [pc, #28]	; (801c314 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f002 f981 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	3328      	adds	r3, #40	; 0x28
 801c302:	6839      	ldr	r1, [r7, #0]
 801c304:	4618      	mov	r0, r3
 801c306:	f001 ff71 	bl	801e1ec <_ZN14MockNamedValue8setValueEi>
    return *this;
 801c30a:	687b      	ldr	r3, [r7, #4]
}
 801c30c:	4618      	mov	r0, r3
 801c30e:	3708      	adds	r7, #8
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}
 801c314:	08026f7c 	.word	0x08026f7c

0801c318 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	3328      	adds	r3, #40	; 0x28
 801c326:	4907      	ldr	r1, [pc, #28]	; (801c344 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801c328:	4618      	mov	r0, r3
 801c32a:	f002 f969 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	3328      	adds	r3, #40	; 0x28
 801c332:	6839      	ldr	r1, [r7, #0]
 801c334:	4618      	mov	r0, r3
 801c336:	f001 ff7b 	bl	801e230 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801c33a:	687b      	ldr	r3, [r7, #4]
}
 801c33c:	4618      	mov	r0, r3
 801c33e:	3708      	adds	r7, #8
 801c340:	46bd      	mov	sp, r7
 801c342:	bd80      	pop	{r7, pc}
 801c344:	08026f7c 	.word	0x08026f7c

0801c348 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b082      	sub	sp, #8
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
 801c350:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	3328      	adds	r3, #40	; 0x28
 801c356:	4907      	ldr	r1, [pc, #28]	; (801c374 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801c358:	4618      	mov	r0, r3
 801c35a:	f002 f951 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	3328      	adds	r3, #40	; 0x28
 801c362:	6839      	ldr	r1, [r7, #0]
 801c364:	4618      	mov	r0, r3
 801c366:	f001 ff85 	bl	801e274 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801c36a:	687b      	ldr	r3, [r7, #4]
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	3708      	adds	r7, #8
 801c370:	46bd      	mov	sp, r7
 801c372:	bd80      	pop	{r7, pc}
 801c374:	08026f7c 	.word	0x08026f7c

0801c378 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801c378:	b5b0      	push	{r4, r5, r7, lr}
 801c37a:	b086      	sub	sp, #24
 801c37c:	af02      	add	r7, sp, #8
 801c37e:	60f8      	str	r0, [r7, #12]
 801c380:	1d3b      	adds	r3, r7, #4
 801c382:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801c386:	f7f8 fd57 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801c38a:	4604      	mov	r4, r0
 801c38c:	6823      	ldr	r3, [r4, #0]
 801c38e:	3368      	adds	r3, #104	; 0x68
 801c390:	681d      	ldr	r5, [r3, #0]
 801c392:	f7f8 fd61 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c396:	4603      	mov	r3, r0
 801c398:	9300      	str	r3, [sp, #0]
 801c39a:	f240 2319 	movw	r3, #537	; 0x219
 801c39e:	4a04      	ldr	r2, [pc, #16]	; (801c3b0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801c3a0:	4904      	ldr	r1, [pc, #16]	; (801c3b4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	47a8      	blx	r5
    return *this;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
}
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	3710      	adds	r7, #16
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bdb0      	pop	{r4, r5, r7, pc}
 801c3b0:	08026e0c 	.word	0x08026e0c
 801c3b4:	08026e28 	.word	0x08026e28

0801c3b8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801c3b8:	b5b0      	push	{r4, r5, r7, lr}
 801c3ba:	b086      	sub	sp, #24
 801c3bc:	af02      	add	r7, sp, #8
 801c3be:	60f8      	str	r0, [r7, #12]
 801c3c0:	1d3b      	adds	r3, r7, #4
 801c3c2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801c3c6:	f7f8 fd37 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	6823      	ldr	r3, [r4, #0]
 801c3ce:	3368      	adds	r3, #104	; 0x68
 801c3d0:	681d      	ldr	r5, [r3, #0]
 801c3d2:	f7f8 fd41 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	9300      	str	r3, [sp, #0]
 801c3da:	f240 231f 	movw	r3, #543	; 0x21f
 801c3de:	4a04      	ldr	r2, [pc, #16]	; (801c3f0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801c3e0:	4904      	ldr	r1, [pc, #16]	; (801c3f4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	47a8      	blx	r5
    return *this;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
}
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	3710      	adds	r7, #16
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	bdb0      	pop	{r4, r5, r7, pc}
 801c3f0:	08026e0c 	.word	0x08026e0c
 801c3f4:	08026e48 	.word	0x08026e48

0801c3f8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b082      	sub	sp, #8
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
 801c400:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	3328      	adds	r3, #40	; 0x28
 801c406:	4907      	ldr	r1, [pc, #28]	; (801c424 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801c408:	4618      	mov	r0, r3
 801c40a:	f002 f8f9 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	3328      	adds	r3, #40	; 0x28
 801c412:	6839      	ldr	r1, [r7, #0]
 801c414:	4618      	mov	r0, r3
 801c416:	f002 f835 	bl	801e484 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801c41a:	687b      	ldr	r3, [r7, #4]
}
 801c41c:	4618      	mov	r0, r3
 801c41e:	3708      	adds	r7, #8
 801c420:	46bd      	mov	sp, r7
 801c422:	bd80      	pop	{r7, pc}
 801c424:	08026f7c 	.word	0x08026f7c

0801c428 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b084      	sub	sp, #16
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	60f8      	str	r0, [r7, #12]
 801c430:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	3328      	adds	r3, #40	; 0x28
 801c438:	4907      	ldr	r1, [pc, #28]	; (801c458 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801c43a:	4618      	mov	r0, r3
 801c43c:	f002 f8e0 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	3328      	adds	r3, #40	; 0x28
 801c444:	ed97 0b00 	vldr	d0, [r7]
 801c448:	4618      	mov	r0, r3
 801c44a:	f001 ff71 	bl	801e330 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801c44e:	68fb      	ldr	r3, [r7, #12]
}
 801c450:	4618      	mov	r0, r3
 801c452:	3710      	adds	r7, #16
 801c454:	46bd      	mov	sp, r7
 801c456:	bd80      	pop	{r7, pc}
 801c458:	08026f7c 	.word	0x08026f7c

0801c45c <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b082      	sub	sp, #8
 801c460:	af00      	add	r7, sp, #0
 801c462:	6078      	str	r0, [r7, #4]
 801c464:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	3328      	adds	r3, #40	; 0x28
 801c46a:	4907      	ldr	r1, [pc, #28]	; (801c488 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801c46c:	4618      	mov	r0, r3
 801c46e:	f002 f8c7 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	3328      	adds	r3, #40	; 0x28
 801c476:	6839      	ldr	r1, [r7, #0]
 801c478:	4618      	mov	r0, r3
 801c47a:	f001 ff9d 	bl	801e3b8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801c47e:	687b      	ldr	r3, [r7, #4]
}
 801c480:	4618      	mov	r0, r3
 801c482:	3708      	adds	r7, #8
 801c484:	46bd      	mov	sp, r7
 801c486:	bd80      	pop	{r7, pc}
 801c488:	08026f7c 	.word	0x08026f7c

0801c48c <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
 801c494:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	3328      	adds	r3, #40	; 0x28
 801c49a:	4907      	ldr	r1, [pc, #28]	; (801c4b8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801c49c:	4618      	mov	r0, r3
 801c49e:	f002 f8af 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	3328      	adds	r3, #40	; 0x28
 801c4a6:	6839      	ldr	r1, [r7, #0]
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	f001 ffa7 	bl	801e3fc <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801c4ae:	687b      	ldr	r3, [r7, #4]
}
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	3708      	adds	r7, #8
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	08026f7c 	.word	0x08026f7c

0801c4bc <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b082      	sub	sp, #8
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
 801c4c4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	3328      	adds	r3, #40	; 0x28
 801c4ca:	4907      	ldr	r1, [pc, #28]	; (801c4e8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	f002 f897 	bl	801e600 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	3328      	adds	r3, #40	; 0x28
 801c4d6:	6839      	ldr	r1, [r7, #0]
 801c4d8:	4618      	mov	r0, r3
 801c4da:	f001 ffb1 	bl	801e440 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801c4de:	687b      	ldr	r3, [r7, #4]
}
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	3708      	adds	r7, #8
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	bd80      	pop	{r7, pc}
 801c4e8:	08026f7c 	.word	0x08026f7c

0801c4ec <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801c4ec:	b480      	push	{r7}
 801c4ee:	b083      	sub	sp, #12
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
 801c4f4:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	2201      	movs	r2, #1
 801c4fa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	2200      	movs	r2, #0
 801c502:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	683a      	ldr	r2, [r7, #0]
 801c50a:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801c50c:	687b      	ldr	r3, [r7, #4]
}
 801c50e:	4618      	mov	r0, r3
 801c510:	370c      	adds	r7, #12
 801c512:	46bd      	mov	sp, r7
 801c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c518:	4770      	bx	lr

0801c51a <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801c51a:	b580      	push	{r7, lr}
 801c51c:	b082      	sub	sp, #8
 801c51e:	af00      	add	r7, sp, #0
 801c520:	6078      	str	r0, [r7, #4]
 801c522:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801c524:	683b      	ldr	r3, [r7, #0]
 801c526:	3328      	adds	r3, #40	; 0x28
 801c528:	4619      	mov	r1, r3
 801c52a:	6878      	ldr	r0, [r7, #4]
 801c52c:	f7ef f946 	bl	800b7bc <_ZN14MockNamedValueC1ERKS_>
}
 801c530:	6878      	ldr	r0, [r7, #4]
 801c532:	3708      	adds	r7, #8
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}

0801c538 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801c538:	b480      	push	{r7}
 801c53a:	b085      	sub	sp, #20
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	60f8      	str	r0, [r7, #12]
 801c540:	60b9      	str	r1, [r7, #8]
 801c542:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	68ba      	ldr	r2, [r7, #8]
 801c548:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	687a      	ldr	r2, [r7, #4]
 801c54e:	615a      	str	r2, [r3, #20]
    return *this;
 801c550:	68fb      	ldr	r3, [r7, #12]
}
 801c552:	4618      	mov	r0, r3
 801c554:	3714      	adds	r7, #20
 801c556:	46bd      	mov	sp, r7
 801c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55c:	4770      	bx	lr

0801c55e <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801c55e:	b480      	push	{r7}
 801c560:	b083      	sub	sp, #12
 801c562:	af00      	add	r7, sp, #0
 801c564:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	7e1b      	ldrb	r3, [r3, #24]
}
 801c56a:	4618      	mov	r0, r3
 801c56c:	370c      	adds	r7, #12
 801c56e:	46bd      	mov	sp, r7
 801c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c574:	4770      	bx	lr

0801c576 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801c576:	b480      	push	{r7}
 801c578:	b083      	sub	sp, #12
 801c57a:	af00      	add	r7, sp, #0
 801c57c:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801c582:	4618      	mov	r0, r3
 801c584:	370c      	adds	r7, #12
 801c586:	46bd      	mov	sp, r7
 801c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c58c:	4770      	bx	lr
	...

0801c590 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	4618      	mov	r0, r3
 801c59c:	f7fe fcce 	bl	801af3c <_ZN16MockExpectedCallC1Ev>
 801c5a0:	4a03      	ldr	r2, [pc, #12]	; (801c5b0 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	601a      	str	r2, [r3, #0]
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	3708      	adds	r7, #8
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd80      	pop	{r7, pc}
 801c5b0:	08029e80 	.word	0x08029e80

0801c5b4 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	af00      	add	r7, sp, #0
 801c5b8:	4801      	ldr	r0, [pc, #4]	; (801c5c0 <__tcf_0+0xc>)
 801c5ba:	f000 f831 	bl	801c620 <_ZN23MockIgnoredExpectedCallD1Ev>
 801c5be:	bd80      	pop	{r7, pc}
 801c5c0:	20000f3c 	.word	0x20000f3c

0801c5c4 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801c5c8:	4b12      	ldr	r3, [pc, #72]	; (801c614 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c5ca:	781b      	ldrb	r3, [r3, #0]
 801c5cc:	f3bf 8f5b 	dmb	ish
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	f003 0301 	and.w	r3, r3, #1
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	bf0c      	ite	eq
 801c5da:	2301      	moveq	r3, #1
 801c5dc:	2300      	movne	r3, #0
 801c5de:	b2db      	uxtb	r3, r3
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d013      	beq.n	801c60c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801c5e4:	480b      	ldr	r0, [pc, #44]	; (801c614 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c5e6:	f003 ff03 	bl	80203f0 <__cxa_guard_acquire>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	bf14      	ite	ne
 801c5f0:	2301      	movne	r3, #1
 801c5f2:	2300      	moveq	r3, #0
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d008      	beq.n	801c60c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801c5fa:	4807      	ldr	r0, [pc, #28]	; (801c618 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801c5fc:	f7ff ffc8 	bl	801c590 <_ZN23MockIgnoredExpectedCallC1Ev>
 801c600:	4804      	ldr	r0, [pc, #16]	; (801c614 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801c602:	f003 ff01 	bl	8020408 <__cxa_guard_release>
 801c606:	4805      	ldr	r0, [pc, #20]	; (801c61c <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801c608:	f003 ff25 	bl	8020456 <atexit>
    return call;
 801c60c:	4b02      	ldr	r3, [pc, #8]	; (801c618 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801c60e:	4618      	mov	r0, r3
 801c610:	bd80      	pop	{r7, pc}
 801c612:	bf00      	nop
 801c614:	20000f40 	.word	0x20000f40
 801c618:	20000f3c 	.word	0x20000f3c
 801c61c:	0801c5b5 	.word	0x0801c5b5

0801c620 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801c620:	b580      	push	{r7, lr}
 801c622:	b082      	sub	sp, #8
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	4a05      	ldr	r2, [pc, #20]	; (801c640 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	601a      	str	r2, [r3, #0]
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	4618      	mov	r0, r3
 801c632:	f7fe fc93 	bl	801af5c <_ZN16MockExpectedCallD1Ev>
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	4618      	mov	r0, r3
 801c63a:	3708      	adds	r7, #8
 801c63c:	46bd      	mov	sp, r7
 801c63e:	bd80      	pop	{r7, pc}
 801c640:	08029e80 	.word	0x08029e80

0801c644 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801c644:	b580      	push	{r7, lr}
 801c646:	b082      	sub	sp, #8
 801c648:	af00      	add	r7, sp, #0
 801c64a:	6078      	str	r0, [r7, #4]
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	f7ff ffe7 	bl	801c620 <_ZN23MockIgnoredExpectedCallD1Ev>
 801c652:	2104      	movs	r1, #4
 801c654:	6878      	ldr	r0, [r7, #4]
 801c656:	f7ee fc5d 	bl	800af14 <_ZdlPvj>
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	4618      	mov	r0, r3
 801c65e:	3708      	adds	r7, #8
 801c660:	46bd      	mov	sp, r7
 801c662:	bd80      	pop	{r7, pc}

0801c664 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
 801c66c:	4a05      	ldr	r2, [pc, #20]	; (801c684 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	601a      	str	r2, [r3, #0]
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	4618      	mov	r0, r3
 801c676:	f001 fd4b 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	4618      	mov	r0, r3
 801c67e:	3708      	adds	r7, #8
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}
 801c684:	0802a020 	.word	0x0802a020

0801c688 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801c688:	b580      	push	{r7, lr}
 801c68a:	b082      	sub	sp, #8
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]
 801c690:	6878      	ldr	r0, [r7, #4]
 801c692:	f7ff ffe7 	bl	801c664 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801c696:	2138      	movs	r1, #56	; 0x38
 801c698:	6878      	ldr	r0, [r7, #4]
 801c69a:	f7ee fc3b 	bl	800af14 <_ZdlPvj>
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	3708      	adds	r7, #8
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd80      	pop	{r7, pc}

0801c6a8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801c6a8:	b480      	push	{r7}
 801c6aa:	b083      	sub	sp, #12
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
 801c6b0:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	683a      	ldr	r2, [r7, #0]
 801c6b6:	601a      	str	r2, [r3, #0]
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	2200      	movs	r2, #0
 801c6bc:	605a      	str	r2, [r3, #4]
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	370c      	adds	r7, #12
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ca:	4770      	bx	lr

0801c6cc <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801c6cc:	b480      	push	{r7}
 801c6ce:	b083      	sub	sp, #12
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6078      	str	r0, [r7, #4]
 801c6d4:	4a06      	ldr	r2, [pc, #24]	; (801c6f0 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	601a      	str	r2, [r3, #0]
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	2200      	movs	r2, #0
 801c6de:	605a      	str	r2, [r3, #4]
{
}
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	370c      	adds	r7, #12
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ec:	4770      	bx	lr
 801c6ee:	bf00      	nop
 801c6f0:	0802a174 	.word	0x0802a174

0801c6f4 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b084      	sub	sp, #16
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
 801c6fc:	4a0d      	ldr	r2, [pc, #52]	; (801c734 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	685b      	ldr	r3, [r3, #4]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d00f      	beq.n	801c72a <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	685b      	ldr	r3, [r3, #4]
 801c70e:	685b      	ldr	r3, [r3, #4]
 801c710:	60fb      	str	r3, [r7, #12]
        delete head_;
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	685b      	ldr	r3, [r3, #4]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d003      	beq.n	801c722 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801c71a:	2108      	movs	r1, #8
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7ee fbf9 	bl	800af14 <_ZdlPvj>
        head_ = next;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	68fa      	ldr	r2, [r7, #12]
 801c726:	605a      	str	r2, [r3, #4]
    while (head_) {
 801c728:	e7eb      	b.n	801c702 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	4618      	mov	r0, r3
 801c72e:	3710      	adds	r7, #16
 801c730:	46bd      	mov	sp, r7
 801c732:	bd80      	pop	{r7, pc}
 801c734:	0802a174 	.word	0x0802a174

0801c738 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801c738:	b580      	push	{r7, lr}
 801c73a:	b082      	sub	sp, #8
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	6078      	str	r0, [r7, #4]
}
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7ff ffd7 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
 801c746:	2108      	movs	r1, #8
 801c748:	6878      	ldr	r0, [r7, #4]
 801c74a:	f7ee fbe3 	bl	800af14 <_ZdlPvj>
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	4618      	mov	r0, r3
 801c752:	3708      	adds	r7, #8
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}

0801c758 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b084      	sub	sp, #16
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	685b      	ldr	r3, [r3, #4]
 801c764:	60fb      	str	r3, [r7, #12]
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d011      	beq.n	801c790 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	681a      	ldr	r2, [r3, #0]
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	33d4      	adds	r3, #212	; 0xd4
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	4610      	mov	r0, r2
 801c77c:	4798      	blx	r3
 801c77e:	4603      	mov	r3, r0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d001      	beq.n	801c788 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801c784:	2301      	movs	r3, #1
 801c786:	e004      	b.n	801c792 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	685b      	ldr	r3, [r3, #4]
 801c78c:	60fb      	str	r3, [r7, #12]
 801c78e:	e7ea      	b.n	801c766 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801c790:	2300      	movs	r3, #0
}
 801c792:	4618      	mov	r0, r3
 801c794:	3710      	adds	r7, #16
 801c796:	46bd      	mov	sp, r7
 801c798:	bd80      	pop	{r7, pc}

0801c79a <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801c79a:	b480      	push	{r7}
 801c79c:	b085      	sub	sp, #20
 801c79e:	af00      	add	r7, sp, #0
 801c7a0:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c7a2:	2300      	movs	r3, #0
 801c7a4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	685b      	ldr	r3, [r3, #4]
 801c7aa:	60bb      	str	r3, [r7, #8]
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d006      	beq.n	801c7c0 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	3301      	adds	r3, #1
 801c7b6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c7b8:	68bb      	ldr	r3, [r7, #8]
 801c7ba:	685b      	ldr	r3, [r3, #4]
 801c7bc:	60bb      	str	r3, [r7, #8]
 801c7be:	e7f5      	b.n	801c7ac <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
}
 801c7c2:	4618      	mov	r0, r3
 801c7c4:	3714      	adds	r7, #20
 801c7c6:	46bd      	mov	sp, r7
 801c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7cc:	4770      	bx	lr

0801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801c7ce:	b480      	push	{r7}
 801c7d0:	b083      	sub	sp, #12
 801c7d2:	af00      	add	r7, sp, #0
 801c7d4:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	685b      	ldr	r3, [r3, #4]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	bf0c      	ite	eq
 801c7de:	2301      	moveq	r3, #1
 801c7e0:	2300      	movne	r3, #0
 801c7e2:	b2db      	uxtb	r3, r3
}
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	370c      	adds	r7, #12
 801c7e8:	46bd      	mov	sp, r7
 801c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ee:	4770      	bx	lr

0801c7f0 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	b084      	sub	sp, #16
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
 801c7f8:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	685b      	ldr	r3, [r3, #4]
 801c802:	60bb      	str	r3, [r7, #8]
 801c804:	68bb      	ldr	r3, [r7, #8]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d01d      	beq.n	801c846 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801c80a:	68bb      	ldr	r3, [r7, #8]
 801c80c:	681a      	ldr	r2, [r3, #0]
 801c80e:	68bb      	ldr	r3, [r7, #8]
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	33b8      	adds	r3, #184	; 0xb8
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	6839      	ldr	r1, [r7, #0]
 801c81a:	4610      	mov	r0, r2
 801c81c:	4798      	blx	r3
 801c81e:	4603      	mov	r3, r0
 801c820:	2b00      	cmp	r3, #0
 801c822:	d00c      	beq.n	801c83e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801c824:	68bb      	ldr	r3, [r7, #8]
 801c826:	681a      	ldr	r2, [r3, #0]
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	33f8      	adds	r3, #248	; 0xf8
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	4610      	mov	r0, r2
 801c834:	4798      	blx	r3
 801c836:	4602      	mov	r2, r0
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	4413      	add	r3, r2
 801c83c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	60bb      	str	r3, [r7, #8]
 801c844:	e7de      	b.n	801c804 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801c846:	68fb      	ldr	r3, [r7, #12]
}
 801c848:	4618      	mov	r0, r3
 801c84a:	3710      	adds	r7, #16
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bd80      	pop	{r7, pc}

0801c850 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b084      	sub	sp, #16
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801c858:	2300      	movs	r3, #0
 801c85a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	685b      	ldr	r3, [r3, #4]
 801c860:	60bb      	str	r3, [r7, #8]
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d015      	beq.n	801c894 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801c868:	68bb      	ldr	r3, [r7, #8]
 801c86a:	681a      	ldr	r2, [r3, #0]
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	33c0      	adds	r3, #192	; 0xc0
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	4610      	mov	r0, r2
 801c878:	4798      	blx	r3
 801c87a:	4603      	mov	r3, r0
 801c87c:	f083 0301 	eor.w	r3, r3, #1
 801c880:	b2db      	uxtb	r3, r3
 801c882:	2b00      	cmp	r3, #0
 801c884:	d002      	beq.n	801c88c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	3301      	adds	r3, #1
 801c88a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	685b      	ldr	r3, [r3, #4]
 801c890:	60bb      	str	r3, [r7, #8]
 801c892:	e7e6      	b.n	801c862 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801c894:	68fb      	ldr	r3, [r7, #12]
}
 801c896:	4618      	mov	r0, r3
 801c898:	3710      	adds	r7, #16
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}

0801c89e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801c89e:	b580      	push	{r7, lr}
 801c8a0:	b084      	sub	sp, #16
 801c8a2:	af00      	add	r7, sp, #0
 801c8a4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	60fb      	str	r3, [r7, #12]
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d011      	beq.n	801c8d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801c8b2:	68fb      	ldr	r3, [r7, #12]
 801c8b4:	681a      	ldr	r2, [r3, #0]
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	33c8      	adds	r3, #200	; 0xc8
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	4610      	mov	r0, r2
 801c8c2:	4798      	blx	r3
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d001      	beq.n	801c8ce <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801c8ca:	2301      	movs	r3, #1
 801c8cc:	e004      	b.n	801c8d8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	685b      	ldr	r3, [r3, #4]
 801c8d2:	60fb      	str	r3, [r7, #12]
 801c8d4:	e7ea      	b.n	801c8ac <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801c8d6:	2300      	movs	r3, #0
}
 801c8d8:	4618      	mov	r0, r3
 801c8da:	3710      	adds	r7, #16
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	bd80      	pop	{r7, pc}

0801c8e0 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b084      	sub	sp, #16
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	685b      	ldr	r3, [r3, #4]
 801c8ec:	60fb      	str	r3, [r7, #12]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d014      	beq.n	801c91e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801c8f4:	68fb      	ldr	r3, [r7, #12]
 801c8f6:	681a      	ldr	r2, [r3, #0]
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	33c0      	adds	r3, #192	; 0xc0
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	4610      	mov	r0, r2
 801c904:	4798      	blx	r3
 801c906:	4603      	mov	r3, r0
 801c908:	f083 0301 	eor.w	r3, r3, #1
 801c90c:	b2db      	uxtb	r3, r3
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d001      	beq.n	801c916 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801c912:	2301      	movs	r3, #1
 801c914:	e004      	b.n	801c920 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	685b      	ldr	r3, [r3, #4]
 801c91a:	60fb      	str	r3, [r7, #12]
 801c91c:	e7e7      	b.n	801c8ee <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801c91e:	2300      	movs	r3, #0
}
 801c920:	4618      	mov	r0, r3
 801c922:	3710      	adds	r7, #16
 801c924:	46bd      	mov	sp, r7
 801c926:	bd80      	pop	{r7, pc}

0801c928 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	b084      	sub	sp, #16
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	6078      	str	r0, [r7, #4]
 801c930:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	685b      	ldr	r3, [r3, #4]
 801c936:	60fb      	str	r3, [r7, #12]
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d012      	beq.n	801c964 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	681a      	ldr	r2, [r3, #0]
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	33b8      	adds	r3, #184	; 0xb8
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	6839      	ldr	r1, [r7, #0]
 801c94e:	4610      	mov	r0, r2
 801c950:	4798      	blx	r3
 801c952:	4603      	mov	r3, r0
 801c954:	2b00      	cmp	r3, #0
 801c956:	d001      	beq.n	801c95c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801c958:	2301      	movs	r3, #1
 801c95a:	e004      	b.n	801c966 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	685b      	ldr	r3, [r3, #4]
 801c960:	60fb      	str	r3, [r7, #12]
 801c962:	e7e9      	b.n	801c938 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801c964:	2300      	movs	r3, #0
}
 801c966:	4618      	mov	r0, r3
 801c968:	3710      	adds	r7, #16
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}
	...

0801c970 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801c970:	b590      	push	{r4, r7, lr}
 801c972:	b085      	sub	sp, #20
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
 801c978:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801c97a:	2273      	movs	r2, #115	; 0x73
 801c97c:	4911      	ldr	r1, [pc, #68]	; (801c9c4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801c97e:	2008      	movs	r0, #8
 801c980:	f7ee fab4 	bl	800aeec <_ZnwjPKci>
 801c984:	4604      	mov	r4, r0
 801c986:	6839      	ldr	r1, [r7, #0]
 801c988:	4620      	mov	r0, r4
 801c98a:	f7ff fe8d 	bl	801c6a8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801c98e:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	685b      	ldr	r3, [r3, #4]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d103      	bne.n	801c9a0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	68ba      	ldr	r2, [r7, #8]
 801c99c:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801c99e:	e00d      	b.n	801c9bc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	685b      	ldr	r3, [r3, #4]
 801c9a4:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	685b      	ldr	r3, [r3, #4]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d003      	beq.n	801c9b6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	685b      	ldr	r3, [r3, #4]
 801c9b2:	60fb      	str	r3, [r7, #12]
 801c9b4:	e7f7      	b.n	801c9a6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	68ba      	ldr	r2, [r7, #8]
 801c9ba:	605a      	str	r2, [r3, #4]
}
 801c9bc:	bf00      	nop
 801c9be:	3714      	adds	r7, #20
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd90      	pop	{r4, r7, pc}
 801c9c4:	08026f88 	.word	0x08026f88

0801c9c8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	b084      	sub	sp, #16
 801c9cc:	af00      	add	r7, sp, #0
 801c9ce:	6078      	str	r0, [r7, #4]
 801c9d0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801c9d2:	683b      	ldr	r3, [r7, #0]
 801c9d4:	685b      	ldr	r3, [r3, #4]
 801c9d6:	60fb      	str	r3, [r7, #12]
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d018      	beq.n	801ca10 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	681a      	ldr	r2, [r3, #0]
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	33c4      	adds	r3, #196	; 0xc4
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	4610      	mov	r0, r2
 801c9ee:	4798      	blx	r3
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d008      	beq.n	801ca08 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	3330      	adds	r3, #48	; 0x30
 801c9fc:	681b      	ldr	r3, [r3, #0]
 801c9fe:	68fa      	ldr	r2, [r7, #12]
 801ca00:	6812      	ldr	r2, [r2, #0]
 801ca02:	4611      	mov	r1, r2
 801ca04:	6878      	ldr	r0, [r7, #4]
 801ca06:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	685b      	ldr	r3, [r3, #4]
 801ca0c:	60fb      	str	r3, [r7, #12]
 801ca0e:	e7e3      	b.n	801c9d8 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801ca10:	bf00      	nop
 801ca12:	3710      	adds	r7, #16
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}

0801ca18 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b086      	sub	sp, #24
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	60f8      	str	r0, [r7, #12]
 801ca20:	60b9      	str	r1, [r7, #8]
 801ca22:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	685b      	ldr	r3, [r3, #4]
 801ca28:	617b      	str	r3, [r7, #20]
 801ca2a:	697b      	ldr	r3, [r7, #20]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d019      	beq.n	801ca64 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801ca30:	697b      	ldr	r3, [r7, #20]
 801ca32:	681a      	ldr	r2, [r3, #0]
 801ca34:	697b      	ldr	r3, [r7, #20]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	33b8      	adds	r3, #184	; 0xb8
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	68b9      	ldr	r1, [r7, #8]
 801ca40:	4610      	mov	r0, r2
 801ca42:	4798      	blx	r3
 801ca44:	4603      	mov	r3, r0
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d008      	beq.n	801ca5c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	3330      	adds	r3, #48	; 0x30
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	697a      	ldr	r2, [r7, #20]
 801ca54:	6812      	ldr	r2, [r2, #0]
 801ca56:	4611      	mov	r1, r2
 801ca58:	68f8      	ldr	r0, [r7, #12]
 801ca5a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ca5c:	697b      	ldr	r3, [r7, #20]
 801ca5e:	685b      	ldr	r3, [r3, #4]
 801ca60:	617b      	str	r3, [r7, #20]
 801ca62:	e7e2      	b.n	801ca2a <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801ca64:	bf00      	nop
 801ca66:	3718      	adds	r7, #24
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	bd80      	pop	{r7, pc}

0801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b084      	sub	sp, #16
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
 801ca74:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	685b      	ldr	r3, [r3, #4]
 801ca7a:	60fb      	str	r3, [r7, #12]
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d00c      	beq.n	801ca9c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	3330      	adds	r3, #48	; 0x30
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	68fa      	ldr	r2, [r7, #12]
 801ca8c:	6812      	ldr	r2, [r2, #0]
 801ca8e:	4611      	mov	r1, r2
 801ca90:	6878      	ldr	r0, [r7, #4]
 801ca92:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	685b      	ldr	r3, [r3, #4]
 801ca98:	60fb      	str	r3, [r7, #12]
 801ca9a:	e7ef      	b.n	801ca7c <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801ca9c:	bf00      	nop
 801ca9e:	3710      	adds	r7, #16
 801caa0:	46bd      	mov	sp, r7
 801caa2:	bd80      	pop	{r7, pc}

0801caa4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801caa4:	b580      	push	{r7, lr}
 801caa6:	b084      	sub	sp, #16
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
 801caac:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	685b      	ldr	r3, [r3, #4]
 801cab2:	60fb      	str	r3, [r7, #12]
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d016      	beq.n	801cae8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	33b8      	adds	r3, #184	; 0xb8
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	6839      	ldr	r1, [r7, #0]
 801caca:	4610      	mov	r0, r2
 801cacc:	4798      	blx	r3
 801cace:	4603      	mov	r3, r0
 801cad0:	f083 0301 	eor.w	r3, r3, #1
 801cad4:	b2db      	uxtb	r3, r3
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d002      	beq.n	801cae0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	2200      	movs	r2, #0
 801cade:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	685b      	ldr	r3, [r3, #4]
 801cae4:	60fb      	str	r3, [r7, #12]
 801cae6:	e7e5      	b.n	801cab4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	3388      	adds	r3, #136	; 0x88
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	6878      	ldr	r0, [r7, #4]
 801caf2:	4798      	blx	r3
}
 801caf4:	bf00      	nop
 801caf6:	3710      	adds	r7, #16
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd80      	pop	{r7, pc}

0801cafc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b084      	sub	sp, #16
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	685b      	ldr	r3, [r3, #4]
 801cb08:	60fb      	str	r3, [r7, #12]
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d015      	beq.n	801cb3c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	681a      	ldr	r2, [r3, #0]
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	33d4      	adds	r3, #212	; 0xd4
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	4610      	mov	r0, r2
 801cb20:	4798      	blx	r3
 801cb22:	4603      	mov	r3, r0
 801cb24:	f083 0301 	eor.w	r3, r3, #1
 801cb28:	b2db      	uxtb	r3, r3
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d002      	beq.n	801cb34 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	2200      	movs	r2, #0
 801cb32:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	685b      	ldr	r3, [r3, #4]
 801cb38:	60fb      	str	r3, [r7, #12]
 801cb3a:	e7e6      	b.n	801cb0a <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	3388      	adds	r3, #136	; 0x88
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	6878      	ldr	r0, [r7, #4]
 801cb46:	4798      	blx	r3
}
 801cb48:	bf00      	nop
 801cb4a:	3710      	adds	r7, #16
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b084      	sub	sp, #16
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	685b      	ldr	r3, [r3, #4]
 801cb5c:	60fb      	str	r3, [r7, #12]
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d01b      	beq.n	801cb9c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	681a      	ldr	r2, [r3, #0]
 801cb68:	68fb      	ldr	r3, [r7, #12]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	33c8      	adds	r3, #200	; 0xc8
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	4610      	mov	r0, r2
 801cb74:	4798      	blx	r3
 801cb76:	4603      	mov	r3, r0
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d00b      	beq.n	801cb94 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801cb7c:	68fb      	ldr	r3, [r7, #12]
 801cb7e:	681a      	ldr	r2, [r3, #0]
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	33ec      	adds	r3, #236	; 0xec
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	4610      	mov	r0, r2
 801cb8c:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801cb8e:	68fb      	ldr	r3, [r7, #12]
 801cb90:	2200      	movs	r2, #0
 801cb92:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	685b      	ldr	r3, [r3, #4]
 801cb98:	60fb      	str	r3, [r7, #12]
 801cb9a:	e7e0      	b.n	801cb5e <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	3388      	adds	r3, #136	; 0x88
 801cba2:	681b      	ldr	r3, [r3, #0]
 801cba4:	6878      	ldr	r0, [r7, #4]
 801cba6:	4798      	blx	r3
}
 801cba8:	bf00      	nop
 801cbaa:	3710      	adds	r7, #16
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bd80      	pop	{r7, pc}

0801cbb0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b084      	sub	sp, #16
 801cbb4:	af00      	add	r7, sp, #0
 801cbb6:	6078      	str	r0, [r7, #4]
 801cbb8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	685b      	ldr	r3, [r3, #4]
 801cbbe:	60fb      	str	r3, [r7, #12]
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d016      	beq.n	801cbf4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	681a      	ldr	r2, [r3, #0]
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	33a8      	adds	r3, #168	; 0xa8
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	6839      	ldr	r1, [r7, #0]
 801cbd6:	4610      	mov	r0, r2
 801cbd8:	4798      	blx	r3
 801cbda:	4603      	mov	r3, r0
 801cbdc:	f083 0301 	eor.w	r3, r3, #1
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d002      	beq.n	801cbec <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	2200      	movs	r2, #0
 801cbea:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	685b      	ldr	r3, [r3, #4]
 801cbf0:	60fb      	str	r3, [r7, #12]
 801cbf2:	e7e5      	b.n	801cbc0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	3388      	adds	r3, #136	; 0x88
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	6878      	ldr	r0, [r7, #4]
 801cbfe:	4798      	blx	r3
}
 801cc00:	bf00      	nop
 801cc02:	3710      	adds	r7, #16
 801cc04:	46bd      	mov	sp, r7
 801cc06:	bd80      	pop	{r7, pc}

0801cc08 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b084      	sub	sp, #16
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
 801cc10:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	685b      	ldr	r3, [r3, #4]
 801cc16:	60fb      	str	r3, [r7, #12]
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d016      	beq.n	801cc4c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	681a      	ldr	r2, [r3, #0]
 801cc22:	68fb      	ldr	r3, [r7, #12]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	33b0      	adds	r3, #176	; 0xb0
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	6839      	ldr	r1, [r7, #0]
 801cc2e:	4610      	mov	r0, r2
 801cc30:	4798      	blx	r3
 801cc32:	4603      	mov	r3, r0
 801cc34:	f083 0301 	eor.w	r3, r3, #1
 801cc38:	b2db      	uxtb	r3, r3
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d002      	beq.n	801cc44 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	2200      	movs	r2, #0
 801cc42:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	685b      	ldr	r3, [r3, #4]
 801cc48:	60fb      	str	r3, [r7, #12]
 801cc4a:	e7e5      	b.n	801cc18 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	3388      	adds	r3, #136	; 0x88
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	6878      	ldr	r0, [r7, #4]
 801cc56:	4798      	blx	r3
}
 801cc58:	bf00      	nop
 801cc5a:	3710      	adds	r7, #16
 801cc5c:	46bd      	mov	sp, r7
 801cc5e:	bd80      	pop	{r7, pc}

0801cc60 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	b084      	sub	sp, #16
 801cc64:	af00      	add	r7, sp, #0
 801cc66:	6078      	str	r0, [r7, #4]
 801cc68:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	685b      	ldr	r3, [r3, #4]
 801cc6e:	60fb      	str	r3, [r7, #12]
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d016      	beq.n	801cca4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	681a      	ldr	r2, [r3, #0]
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	33ac      	adds	r3, #172	; 0xac
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	6839      	ldr	r1, [r7, #0]
 801cc86:	4610      	mov	r0, r2
 801cc88:	4798      	blx	r3
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	f083 0301 	eor.w	r3, r3, #1
 801cc90:	b2db      	uxtb	r3, r3
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d002      	beq.n	801cc9c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801cc96:	68fb      	ldr	r3, [r7, #12]
 801cc98:	2200      	movs	r2, #0
 801cc9a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	685b      	ldr	r3, [r3, #4]
 801cca0:	60fb      	str	r3, [r7, #12]
 801cca2:	e7e5      	b.n	801cc70 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	3388      	adds	r3, #136	; 0x88
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	4798      	blx	r3
}
 801ccb0:	bf00      	nop
 801ccb2:	3710      	adds	r7, #16
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bd80      	pop	{r7, pc}

0801ccb8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b084      	sub	sp, #16
 801ccbc:	af00      	add	r7, sp, #0
 801ccbe:	6078      	str	r0, [r7, #4]
 801ccc0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	685b      	ldr	r3, [r3, #4]
 801ccc6:	60fb      	str	r3, [r7, #12]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d016      	beq.n	801ccfc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	681a      	ldr	r2, [r3, #0]
 801ccd2:	68fb      	ldr	r3, [r7, #12]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	33b4      	adds	r3, #180	; 0xb4
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	6839      	ldr	r1, [r7, #0]
 801ccde:	4610      	mov	r0, r2
 801cce0:	4798      	blx	r3
 801cce2:	4603      	mov	r3, r0
 801cce4:	f083 0301 	eor.w	r3, r3, #1
 801cce8:	b2db      	uxtb	r3, r3
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d002      	beq.n	801ccf4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	685b      	ldr	r3, [r3, #4]
 801ccf8:	60fb      	str	r3, [r7, #12]
 801ccfa:	e7e5      	b.n	801ccc8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	3388      	adds	r3, #136	; 0x88
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	6878      	ldr	r0, [r7, #4]
 801cd06:	4798      	blx	r3
}
 801cd08:	bf00      	nop
 801cd0a:	3710      	adds	r7, #16
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bd80      	pop	{r7, pc}

0801cd10 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b084      	sub	sp, #16
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	6078      	str	r0, [r7, #4]
 801cd18:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	685b      	ldr	r3, [r3, #4]
 801cd1e:	60fb      	str	r3, [r7, #12]
 801cd20:	68fb      	ldr	r3, [r7, #12]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d016      	beq.n	801cd54 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	681a      	ldr	r2, [r3, #0]
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	33bc      	adds	r3, #188	; 0xbc
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	6839      	ldr	r1, [r7, #0]
 801cd36:	4610      	mov	r0, r2
 801cd38:	4798      	blx	r3
 801cd3a:	4603      	mov	r3, r0
 801cd3c:	f083 0301 	eor.w	r3, r3, #1
 801cd40:	b2db      	uxtb	r3, r3
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d002      	beq.n	801cd4c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	2200      	movs	r2, #0
 801cd4a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	60fb      	str	r3, [r7, #12]
 801cd52:	e7e5      	b.n	801cd20 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	3388      	adds	r3, #136	; 0x88
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	4798      	blx	r3
}
 801cd60:	bf00      	nop
 801cd62:	3710      	adds	r7, #16
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}

0801cd68 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801cd68:	b580      	push	{r7, lr}
 801cd6a:	b084      	sub	sp, #16
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	60fb      	str	r3, [r7, #12]
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d01d      	beq.n	801cdb8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	681a      	ldr	r2, [r3, #0]
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	33c8      	adds	r3, #200	; 0xc8
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	4610      	mov	r0, r2
 801cd8c:	4798      	blx	r3
 801cd8e:	4603      	mov	r3, r0
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d00d      	beq.n	801cdb0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801cd9a:	68fb      	ldr	r3, [r7, #12]
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	3388      	adds	r3, #136	; 0x88
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	6878      	ldr	r0, [r7, #4]
 801cdaa:	4798      	blx	r3
            return matchingCall;
 801cdac:	68bb      	ldr	r3, [r7, #8]
 801cdae:	e004      	b.n	801cdba <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	685b      	ldr	r3, [r3, #4]
 801cdb4:	60fb      	str	r3, [r7, #12]
 801cdb6:	e7de      	b.n	801cd76 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801cdb8:	2300      	movs	r3, #0
}
 801cdba:	4618      	mov	r0, r3
 801cdbc:	3710      	adds	r7, #16
 801cdbe:	46bd      	mov	sp, r7
 801cdc0:	bd80      	pop	{r7, pc}

0801cdc2 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801cdc2:	b580      	push	{r7, lr}
 801cdc4:	b084      	sub	sp, #16
 801cdc6:	af00      	add	r7, sp, #0
 801cdc8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	685b      	ldr	r3, [r3, #4]
 801cdce:	60fb      	str	r3, [r7, #12]
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d012      	beq.n	801cdfc <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	681a      	ldr	r2, [r3, #0]
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	33cc      	adds	r3, #204	; 0xcc
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	4610      	mov	r0, r2
 801cde6:	4798      	blx	r3
 801cde8:	4603      	mov	r3, r0
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d002      	beq.n	801cdf4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	e004      	b.n	801cdfe <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	685b      	ldr	r3, [r3, #4]
 801cdf8:	60fb      	str	r3, [r7, #12]
 801cdfa:	e7e9      	b.n	801cdd0 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801cdfc:	2300      	movs	r3, #0
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	3710      	adds	r7, #16
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}

0801ce06 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801ce06:	b580      	push	{r7, lr}
 801ce08:	b084      	sub	sp, #16
 801ce0a:	af00      	add	r7, sp, #0
 801ce0c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	685b      	ldr	r3, [r3, #4]
 801ce12:	60fb      	str	r3, [r7, #12]
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d01d      	beq.n	801ce56 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	681a      	ldr	r2, [r3, #0]
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	33cc      	adds	r3, #204	; 0xcc
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	4610      	mov	r0, r2
 801ce2a:	4798      	blx	r3
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d00d      	beq.n	801ce4e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	2200      	movs	r2, #0
 801ce3c:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	3388      	adds	r3, #136	; 0x88
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	6878      	ldr	r0, [r7, #4]
 801ce48:	4798      	blx	r3
            return matchingCall;
 801ce4a:	68bb      	ldr	r3, [r7, #8]
 801ce4c:	e004      	b.n	801ce58 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	685b      	ldr	r3, [r3, #4]
 801ce52:	60fb      	str	r3, [r7, #12]
 801ce54:	e7de      	b.n	801ce14 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ce56:	2300      	movs	r3, #0
}
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3710      	adds	r7, #16
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}

0801ce60 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b086      	sub	sp, #24
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	685b      	ldr	r3, [r3, #4]
 801ce6c:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801ce72:	2300      	movs	r3, #0
 801ce74:	60fb      	str	r3, [r7, #12]

    while (current) {
 801ce76:	697b      	ldr	r3, [r7, #20]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d024      	beq.n	801cec6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801ce7c:	697b      	ldr	r3, [r7, #20]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d11a      	bne.n	801ceba <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801ce84:	697b      	ldr	r3, [r7, #20]
 801ce86:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801ce88:	693b      	ldr	r3, [r7, #16]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d106      	bne.n	801ce9c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801ce8e:	697b      	ldr	r3, [r7, #20]
 801ce90:	685b      	ldr	r3, [r3, #4]
 801ce92:	617b      	str	r3, [r7, #20]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	697a      	ldr	r2, [r7, #20]
 801ce98:	605a      	str	r2, [r3, #4]
 801ce9a:	e006      	b.n	801ceaa <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801ce9c:	697b      	ldr	r3, [r7, #20]
 801ce9e:	685a      	ldr	r2, [r3, #4]
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	605a      	str	r2, [r3, #4]
 801cea4:	693b      	ldr	r3, [r7, #16]
 801cea6:	685b      	ldr	r3, [r3, #4]
 801cea8:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d0e2      	beq.n	801ce76 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801ceb0:	2108      	movs	r1, #8
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f7ee f82e 	bl	800af14 <_ZdlPvj>
 801ceb8:	e7dd      	b.n	801ce76 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	685b      	ldr	r3, [r3, #4]
 801cec2:	617b      	str	r3, [r7, #20]
    while (current) {
 801cec4:	e7d7      	b.n	801ce76 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801cec6:	bf00      	nop
 801cec8:	3718      	adds	r7, #24
 801ceca:	46bd      	mov	sp, r7
 801cecc:	bd80      	pop	{r7, pc}

0801cece <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801cece:	b580      	push	{r7, lr}
 801ced0:	b084      	sub	sp, #16
 801ced2:	af00      	add	r7, sp, #0
 801ced4:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d019      	beq.n	801cf12 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	685b      	ldr	r3, [r3, #4]
 801cee2:	685b      	ldr	r3, [r3, #4]
 801cee4:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	685b      	ldr	r3, [r3, #4]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d004      	beq.n	801cefa <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801cef0:	681a      	ldr	r2, [r3, #0]
 801cef2:	3204      	adds	r2, #4
 801cef4:	6812      	ldr	r2, [r2, #0]
 801cef6:	4618      	mov	r0, r3
 801cef8:	4790      	blx	r2
        delete head_;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	685b      	ldr	r3, [r3, #4]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d003      	beq.n	801cf0a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801cf02:	2108      	movs	r1, #8
 801cf04:	4618      	mov	r0, r3
 801cf06:	f7ee f805 	bl	800af14 <_ZdlPvj>
        head_ = next;
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	68fa      	ldr	r2, [r7, #12]
 801cf0e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801cf10:	e7e1      	b.n	801ced6 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801cf12:	bf00      	nop
 801cf14:	3710      	adds	r7, #16
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}

0801cf1a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801cf1a:	b580      	push	{r7, lr}
 801cf1c:	b084      	sub	sp, #16
 801cf1e:	af00      	add	r7, sp, #0
 801cf20:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	685b      	ldr	r3, [r3, #4]
 801cf26:	60fb      	str	r3, [r7, #12]
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d00c      	beq.n	801cf48 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	681a      	ldr	r2, [r3, #0]
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	33ec      	adds	r3, #236	; 0xec
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	4610      	mov	r0, r2
 801cf3e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	685b      	ldr	r3, [r3, #4]
 801cf44:	60fb      	str	r3, [r7, #12]
 801cf46:	e7ef      	b.n	801cf28 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801cf48:	bf00      	nop
 801cf4a:	3710      	adds	r7, #16
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}

0801cf50 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801cf50:	b580      	push	{r7, lr}
 801cf52:	b084      	sub	sp, #16
 801cf54:	af00      	add	r7, sp, #0
 801cf56:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	685b      	ldr	r3, [r3, #4]
 801cf5c:	60fb      	str	r3, [r7, #12]
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d00c      	beq.n	801cf7e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	681a      	ldr	r2, [r3, #0]
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	33e8      	adds	r3, #232	; 0xe8
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	4610      	mov	r0, r2
 801cf74:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	685b      	ldr	r3, [r3, #4]
 801cf7a:	60fb      	str	r3, [r7, #12]
 801cf7c:	e7ef      	b.n	801cf5e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801cf7e:	bf00      	nop
 801cf80:	3710      	adds	r7, #16
 801cf82:	46bd      	mov	sp, r7
 801cf84:	bd80      	pop	{r7, pc}

0801cf86 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801cf86:	b580      	push	{r7, lr}
 801cf88:	b084      	sub	sp, #16
 801cf8a:	af00      	add	r7, sp, #0
 801cf8c:	6078      	str	r0, [r7, #4]
 801cf8e:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	685b      	ldr	r3, [r3, #4]
 801cf94:	60fb      	str	r3, [r7, #12]
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d00d      	beq.n	801cfb8 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	681a      	ldr	r2, [r3, #0]
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	681b      	ldr	r3, [r3, #0]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	33dc      	adds	r3, #220	; 0xdc
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	6839      	ldr	r1, [r7, #0]
 801cfac:	4610      	mov	r0, r2
 801cfae:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	685b      	ldr	r3, [r3, #4]
 801cfb4:	60fb      	str	r3, [r7, #12]
 801cfb6:	e7ee      	b.n	801cf96 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801cfb8:	bf00      	nop
 801cfba:	3710      	adds	r7, #16
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bd80      	pop	{r7, pc}

0801cfc0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b084      	sub	sp, #16
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	685b      	ldr	r3, [r3, #4]
 801cfce:	60fb      	str	r3, [r7, #12]
 801cfd0:	68fb      	ldr	r3, [r7, #12]
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d00d      	beq.n	801cff2 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	681a      	ldr	r2, [r3, #0]
 801cfda:	68fb      	ldr	r3, [r7, #12]
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	33e0      	adds	r3, #224	; 0xe0
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	6839      	ldr	r1, [r7, #0]
 801cfe6:	4610      	mov	r0, r2
 801cfe8:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	685b      	ldr	r3, [r3, #4]
 801cfee:	60fb      	str	r3, [r7, #12]
 801cff0:	e7ee      	b.n	801cfd0 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801cff2:	bf00      	nop
 801cff4:	3710      	adds	r7, #16
 801cff6:	46bd      	mov	sp, r7
 801cff8:	bd80      	pop	{r7, pc}
	...

0801cffc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801cffc:	b590      	push	{r4, r7, lr}
 801cffe:	b087      	sub	sp, #28
 801d000:	af00      	add	r7, sp, #0
 801d002:	60f8      	str	r0, [r7, #12]
 801d004:	60b9      	str	r1, [r7, #8]
 801d006:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801d008:	68b9      	ldr	r1, [r7, #8]
 801d00a:	68f8      	ldr	r0, [r7, #12]
 801d00c:	f7f0 fb85 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801d010:	f107 0310 	add.w	r3, r7, #16
 801d014:	490f      	ldr	r1, [pc, #60]	; (801d054 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801d016:	4618      	mov	r0, r3
 801d018:	f7f0 fb2b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d01c:	f107 0310 	add.w	r3, r7, #16
 801d020:	4619      	mov	r1, r3
 801d022:	68f8      	ldr	r0, [r7, #12]
 801d024:	f7f0 fee9 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801d028:	4603      	mov	r3, r0
 801d02a:	461c      	mov	r4, r3
 801d02c:	f107 0310 	add.w	r3, r7, #16
 801d030:	4618      	mov	r0, r3
 801d032:	f7f0 fed6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d036:	2c00      	cmp	r4, #0
 801d038:	d007      	beq.n	801d04a <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801d03a:	6879      	ldr	r1, [r7, #4]
 801d03c:	68f8      	ldr	r0, [r7, #12]
 801d03e:	f7f0 ff4d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801d042:	4905      	ldr	r1, [pc, #20]	; (801d058 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801d044:	68f8      	ldr	r0, [r7, #12]
 801d046:	f7f0 ff5b 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801d04a:	bf00      	nop
}
 801d04c:	68f8      	ldr	r0, [r7, #12]
 801d04e:	371c      	adds	r7, #28
 801d050:	46bd      	mov	sp, r7
 801d052:	bd90      	pop	{r4, r7, pc}
 801d054:	08026fac 	.word	0x08026fac
 801d058:	08026fb0 	.word	0x08026fb0

0801d05c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801d05c:	b590      	push	{r4, r7, lr}
 801d05e:	b087      	sub	sp, #28
 801d060:	af00      	add	r7, sp, #0
 801d062:	60f8      	str	r0, [r7, #12]
 801d064:	60b9      	str	r1, [r7, #8]
 801d066:	607a      	str	r2, [r7, #4]
 801d068:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801d06a:	68b9      	ldr	r1, [r7, #8]
 801d06c:	68f8      	ldr	r0, [r7, #12]
 801d06e:	f7f0 fb54 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801d072:	f107 0310 	add.w	r3, r7, #16
 801d076:	4912      	ldr	r1, [pc, #72]	; (801d0c0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801d078:	4618      	mov	r0, r3
 801d07a:	f7f0 fafa 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d07e:	f107 0310 	add.w	r3, r7, #16
 801d082:	4619      	mov	r1, r3
 801d084:	68f8      	ldr	r0, [r7, #12]
 801d086:	f7f0 fefd 	bl	800de84 <_ZneRK12SimpleStringS1_>
 801d08a:	4603      	mov	r3, r0
 801d08c:	461c      	mov	r4, r3
 801d08e:	f107 0310 	add.w	r3, r7, #16
 801d092:	4618      	mov	r0, r3
 801d094:	f7f0 fea5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d098:	2c00      	cmp	r4, #0
 801d09a:	d003      	beq.n	801d0a4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801d09c:	4909      	ldr	r1, [pc, #36]	; (801d0c4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801d09e:	68f8      	ldr	r0, [r7, #12]
 801d0a0:	f7f0 ff2e 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801d0a4:	6879      	ldr	r1, [r7, #4]
 801d0a6:	68f8      	ldr	r0, [r7, #12]
 801d0a8:	f7f0 ff18 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801d0ac:	6839      	ldr	r1, [r7, #0]
 801d0ae:	68f8      	ldr	r0, [r7, #12]
 801d0b0:	f7f0 ff14 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    return str;
 801d0b4:	bf00      	nop
}
 801d0b6:	68f8      	ldr	r0, [r7, #12]
 801d0b8:	371c      	adds	r7, #28
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	bd90      	pop	{r4, r7, pc}
 801d0be:	bf00      	nop
 801d0c0:	08026fac 	.word	0x08026fac
 801d0c4:	08026fb8 	.word	0x08026fb8

0801d0c8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b08c      	sub	sp, #48	; 0x30
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	60f8      	str	r0, [r7, #12]
 801d0d0:	60b9      	str	r1, [r7, #8]
 801d0d2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801d0d4:	f107 0314 	add.w	r3, r7, #20
 801d0d8:	4929      	ldr	r1, [pc, #164]	; (801d180 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7f0 fac9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	685b      	ldr	r3, [r3, #4]
 801d0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d038      	beq.n	801d15e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0ee:	681a      	ldr	r2, [r3, #0]
 801d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	33c0      	adds	r3, #192	; 0xc0
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	4610      	mov	r0, r2
 801d0fc:	4798      	blx	r3
 801d0fe:	4603      	mov	r3, r0
 801d100:	f083 0301 	eor.w	r3, r3, #1
 801d104:	b2db      	uxtb	r3, r3
 801d106:	2b00      	cmp	r3, #0
 801d108:	d025      	beq.n	801d156 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d10c:	6819      	ldr	r1, [r3, #0]
 801d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	33f0      	adds	r3, #240	; 0xf0
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d11c:	4610      	mov	r0, r2
 801d11e:	4798      	blx	r3
 801d120:	f107 001c 	add.w	r0, r7, #28
 801d124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d128:	f107 0114 	add.w	r1, r7, #20
 801d12c:	687a      	ldr	r2, [r7, #4]
 801d12e:	f7ff ff95 	bl	801d05c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801d132:	f107 021c 	add.w	r2, r7, #28
 801d136:	f107 0314 	add.w	r3, r7, #20
 801d13a:	4611      	mov	r1, r2
 801d13c:	4618      	mov	r0, r3
 801d13e:	f7f0 fb04 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d142:	f107 031c 	add.w	r3, r7, #28
 801d146:	4618      	mov	r0, r3
 801d148:	f7f0 fe4b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d14c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d150:	4618      	mov	r0, r3
 801d152:	f7f0 fe46 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d158:	685b      	ldr	r3, [r3, #4]
 801d15a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d15c:	e7c3      	b.n	801d0e6 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	f107 0114 	add.w	r1, r7, #20
 801d164:	687a      	ldr	r2, [r7, #4]
 801d166:	4618      	mov	r0, r3
 801d168:	f7ff ff48 	bl	801cffc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801d16c:	f107 0314 	add.w	r3, r7, #20
 801d170:	4618      	mov	r0, r3
 801d172:	f7f0 fe36 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d176:	bf00      	nop
}
 801d178:	68f8      	ldr	r0, [r7, #12]
 801d17a:	3730      	adds	r7, #48	; 0x30
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bd80      	pop	{r7, pc}
 801d180:	08026fac 	.word	0x08026fac

0801d184 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801d184:	b580      	push	{r7, lr}
 801d186:	b08c      	sub	sp, #48	; 0x30
 801d188:	af00      	add	r7, sp, #0
 801d18a:	60f8      	str	r0, [r7, #12]
 801d18c:	60b9      	str	r1, [r7, #8]
 801d18e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801d190:	f107 0314 	add.w	r3, r7, #20
 801d194:	4928      	ldr	r1, [pc, #160]	; (801d238 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801d196:	4618      	mov	r0, r3
 801d198:	f7f0 fa6b 	bl	800d672 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d19c:	68bb      	ldr	r3, [r7, #8]
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d035      	beq.n	801d214 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1aa:	681a      	ldr	r2, [r3, #0]
 801d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	33c0      	adds	r3, #192	; 0xc0
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	4610      	mov	r0, r2
 801d1b8:	4798      	blx	r3
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d025      	beq.n	801d20c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c2:	6819      	ldr	r1, [r3, #0]
 801d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	33f0      	adds	r3, #240	; 0xf0
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d1d2:	4610      	mov	r0, r2
 801d1d4:	4798      	blx	r3
 801d1d6:	f107 001c 	add.w	r0, r7, #28
 801d1da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d1de:	f107 0114 	add.w	r1, r7, #20
 801d1e2:	687a      	ldr	r2, [r7, #4]
 801d1e4:	f7ff ff3a 	bl	801d05c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801d1e8:	f107 021c 	add.w	r2, r7, #28
 801d1ec:	f107 0314 	add.w	r3, r7, #20
 801d1f0:	4611      	mov	r1, r2
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7f0 faa9 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d1f8:	f107 031c 	add.w	r3, r7, #28
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7f0 fdf0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d206:	4618      	mov	r0, r3
 801d208:	f7f0 fdeb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d212:	e7c6      	b.n	801d1a2 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	f107 0114 	add.w	r1, r7, #20
 801d21a:	687a      	ldr	r2, [r7, #4]
 801d21c:	4618      	mov	r0, r3
 801d21e:	f7ff feed 	bl	801cffc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801d222:	f107 0314 	add.w	r3, r7, #20
 801d226:	4618      	mov	r0, r3
 801d228:	f7f0 fddb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801d22c:	bf00      	nop
}
 801d22e:	68f8      	ldr	r0, [r7, #12]
 801d230:	3730      	adds	r7, #48	; 0x30
 801d232:	46bd      	mov	sp, r7
 801d234:	bd80      	pop	{r7, pc}
 801d236:	bf00      	nop
 801d238:	08026fac 	.word	0x08026fac

0801d23c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b08e      	sub	sp, #56	; 0x38
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801d246:	f107 030c 	add.w	r3, r7, #12
 801d24a:	4936      	ldr	r1, [pc, #216]	; (801d324 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7f0 fa10 	bl	800d672 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	685b      	ldr	r3, [r3, #4]
 801d256:	637b      	str	r3, [r7, #52]	; 0x34
 801d258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d044      	beq.n	801d2e8 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801d25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d260:	681a      	ldr	r2, [r3, #0]
 801d262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	33cc      	adds	r3, #204	; 0xcc
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4610      	mov	r0, r2
 801d26e:	4798      	blx	r3
 801d270:	4603      	mov	r3, r0
 801d272:	f083 0301 	eor.w	r3, r3, #1
 801d276:	b2db      	uxtb	r3, r3
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d031      	beq.n	801d2e0 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801d27c:	f107 031c 	add.w	r3, r7, #28
 801d280:	4928      	ldr	r1, [pc, #160]	; (801d324 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801d282:	4618      	mov	r0, r3
 801d284:	f7f0 f9f5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d28a:	6819      	ldr	r1, [r3, #0]
 801d28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	33f4      	adds	r3, #244	; 0xf4
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801d29a:	4610      	mov	r0, r2
 801d29c:	4798      	blx	r3
 801d29e:	f107 0014 	add.w	r0, r7, #20
 801d2a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2a6:	f107 021c 	add.w	r2, r7, #28
 801d2aa:	f107 010c 	add.w	r1, r7, #12
 801d2ae:	f7ff fed5 	bl	801d05c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801d2b2:	f107 0214 	add.w	r2, r7, #20
 801d2b6:	f107 030c 	add.w	r3, r7, #12
 801d2ba:	4611      	mov	r1, r2
 801d2bc:	4618      	mov	r0, r3
 801d2be:	f7f0 fa44 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d2c2:	f107 0314 	add.w	r3, r7, #20
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7f0 fd8b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d2cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2d0:	4618      	mov	r0, r3
 801d2d2:	f7f0 fd86 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d2d6:	f107 031c 	add.w	r3, r7, #28
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7f0 fd81 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2e2:	685b      	ldr	r3, [r3, #4]
 801d2e4:	637b      	str	r3, [r7, #52]	; 0x34
 801d2e6:	e7b7      	b.n	801d258 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801d2e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d2ec:	490d      	ldr	r1, [pc, #52]	; (801d324 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7f0 f9bf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801d2fa:	f107 010c 	add.w	r1, r7, #12
 801d2fe:	4618      	mov	r0, r3
 801d300:	f7ff fe7c 	bl	801cffc <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801d304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d308:	4618      	mov	r0, r3
 801d30a:	f7f0 fd6a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801d30e:	f107 030c 	add.w	r3, r7, #12
 801d312:	4618      	mov	r0, r3
 801d314:	f7f0 fd65 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801d318:	bf00      	nop
}
 801d31a:	6878      	ldr	r0, [r7, #4]
 801d31c:	3738      	adds	r7, #56	; 0x38
 801d31e:	46bd      	mov	sp, r7
 801d320:	bd80      	pop	{r7, pc}
 801d322:	bf00      	nop
 801d324:	08026fac 	.word	0x08026fac

0801d328 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801d328:	b580      	push	{r7, lr}
 801d32a:	b084      	sub	sp, #16
 801d32c:	af00      	add	r7, sp, #0
 801d32e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	685b      	ldr	r3, [r3, #4]
 801d334:	60fb      	str	r3, [r7, #12]
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d014      	beq.n	801d366 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	681a      	ldr	r2, [r3, #0]
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	33d0      	adds	r3, #208	; 0xd0
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	4610      	mov	r0, r2
 801d34c:	4798      	blx	r3
 801d34e:	4603      	mov	r3, r0
 801d350:	f083 0301 	eor.w	r3, r3, #1
 801d354:	b2db      	uxtb	r3, r3
 801d356:	2b00      	cmp	r3, #0
 801d358:	d001      	beq.n	801d35e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801d35a:	2301      	movs	r3, #1
 801d35c:	e004      	b.n	801d368 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	685b      	ldr	r3, [r3, #4]
 801d362:	60fb      	str	r3, [r7, #12]
 801d364:	e7e7      	b.n	801d336 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801d366:	2300      	movs	r3, #0
}
 801d368:	4618      	mov	r0, r3
 801d36a:	3710      	adds	r7, #16
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bd80      	pop	{r7, pc}

0801d370 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801d370:	b480      	push	{r7}
 801d372:	b083      	sub	sp, #12
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
 801d378:	460b      	mov	r3, r1
 801d37a:	70fb      	strb	r3, [r7, #3]
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	78fa      	ldrb	r2, [r7, #3]
 801d380:	711a      	strb	r2, [r3, #4]
 801d382:	bf00      	nop
 801d384:	370c      	adds	r7, #12
 801d386:	46bd      	mov	sp, r7
 801d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d38c:	4770      	bx	lr
	...

0801d390 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801d390:	b580      	push	{r7, lr}
 801d392:	b082      	sub	sp, #8
 801d394:	af00      	add	r7, sp, #0
 801d396:	6078      	str	r0, [r7, #4]
 801d398:	460b      	mov	r3, r1
 801d39a:	70fb      	strb	r3, [r7, #3]
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	4618      	mov	r0, r3
 801d3a0:	f7ed ff6a 	bl	800b278 <_ZN14TestTerminatorC1Ev>
 801d3a4:	4a05      	ldr	r2, [pc, #20]	; (801d3bc <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801d3a6:	687b      	ldr	r3, [r7, #4]
 801d3a8:	601a      	str	r2, [r3, #0]
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	78fa      	ldrb	r2, [r7, #3]
 801d3ae:	711a      	strb	r2, [r3, #4]
    {
    }
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	3708      	adds	r7, #8
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	bf00      	nop
 801d3bc:	0802a208 	.word	0x0802a208

0801d3c0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801d3c0:	b580      	push	{r7, lr}
 801d3c2:	b082      	sub	sp, #8
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801d3c8:	687b      	ldr	r3, [r7, #4]
 801d3ca:	791b      	ldrb	r3, [r3, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d001      	beq.n	801d3d4 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801d3d0:	f7f6 f9fe 	bl	80137d0 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801d3d4:	f7f7 fd40 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	681a      	ldr	r2, [r3, #0]
 801d3dc:	6812      	ldr	r2, [r2, #0]
 801d3de:	4618      	mov	r0, r3
 801d3e0:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801d3e2:	bf00      	nop
 801d3e4:	3708      	adds	r7, #8
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bd80      	pop	{r7, pc}
	...

0801d3ec <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b082      	sub	sp, #8
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	6078      	str	r0, [r7, #4]
    {
 801d3f4:	4a05      	ldr	r2, [pc, #20]	; (801d40c <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	601a      	str	r2, [r3, #0]
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f7f7 fdbb 	bl	8014f78 <_ZN14TestTerminatorD1Ev>
    }
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	4618      	mov	r0, r3
 801d406:	3708      	adds	r7, #8
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}
 801d40c:	0802a208 	.word	0x0802a208

0801d410 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
    }
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f7ff ffe7 	bl	801d3ec <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801d41e:	2108      	movs	r1, #8
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	f7ed fd77 	bl	800af14 <_ZdlPvj>
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	4618      	mov	r0, r3
 801d42a:	3708      	adds	r7, #8
 801d42c:	46bd      	mov	sp, r7
 801d42e:	bd80      	pop	{r7, pc}

0801d430 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801d430:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d432:	b085      	sub	sp, #20
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	681b      	ldr	r3, [r3, #0]
 801d43e:	330c      	adds	r3, #12
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	6878      	ldr	r0, [r7, #4]
 801d444:	4798      	blx	r3
 801d446:	4603      	mov	r3, r0
 801d448:	681a      	ldr	r2, [r3, #0]
 801d44a:	321c      	adds	r2, #28
 801d44c:	6812      	ldr	r2, [r2, #0]
 801d44e:	4618      	mov	r0, r3
 801d450:	4790      	blx	r2
 801d452:	4603      	mov	r3, r0
 801d454:	f083 0301 	eor.w	r3, r3, #1
 801d458:	b2db      	uxtb	r3, r3
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d01d      	beq.n	801d49a <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	330c      	adds	r3, #12
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	6878      	ldr	r0, [r7, #4]
 801d468:	4798      	blx	r3
 801d46a:	4604      	mov	r4, r0
 801d46c:	6823      	ldr	r3, [r4, #0]
 801d46e:	339c      	adds	r3, #156	; 0x9c
 801d470:	681d      	ldr	r5, [r3, #0]
 801d472:	683e      	ldr	r6, [r7, #0]
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	791a      	ldrb	r2, [r3, #4]
 801d478:	f107 0308 	add.w	r3, r7, #8
 801d47c:	4611      	mov	r1, r2
 801d47e:	4618      	mov	r0, r3
 801d480:	f7ff ff86 	bl	801d390 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801d484:	f107 0308 	add.w	r3, r7, #8
 801d488:	461a      	mov	r2, r3
 801d48a:	4631      	mov	r1, r6
 801d48c:	4620      	mov	r0, r4
 801d48e:	47a8      	blx	r5
 801d490:	f107 0308 	add.w	r3, r7, #8
 801d494:	4618      	mov	r0, r3
 801d496:	f7ff ffa9 	bl	801d3ec <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801d49a:	bf00      	nop
 801d49c:	3714      	adds	r7, #20
 801d49e:	46bd      	mov	sp, r7
 801d4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4a2 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801d4a2:	b580      	push	{r7, lr}
 801d4a4:	b082      	sub	sp, #8
 801d4a6:	af00      	add	r7, sp, #0
 801d4a8:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801d4aa:	f7f7 fcc5 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801d4ae:	4603      	mov	r3, r0
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	3708      	adds	r7, #8
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}

0801d4b8 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801d4b8:	b590      	push	{r4, r7, lr}
 801d4ba:	b085      	sub	sp, #20
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
 801d4c0:	6039      	str	r1, [r7, #0]
 801d4c2:	687c      	ldr	r4, [r7, #4]
 801d4c4:	f107 0308 	add.w	r3, r7, #8
 801d4c8:	490b      	ldr	r1, [pc, #44]	; (801d4f8 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f7f0 f8d1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d4d0:	f107 0308 	add.w	r3, r7, #8
 801d4d4:	461a      	mov	r2, r3
 801d4d6:	6839      	ldr	r1, [r7, #0]
 801d4d8:	4620      	mov	r0, r4
 801d4da:	f7f1 ff29 	bl	800f330 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801d4de:	f107 0308 	add.w	r3, r7, #8
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	f7f0 fc7d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d4e8:	4a04      	ldr	r2, [pc, #16]	; (801d4fc <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	601a      	str	r2, [r3, #0]
{
}
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	3714      	adds	r7, #20
 801d4f4:	46bd      	mov	sp, r7
 801d4f6:	bd90      	pop	{r4, r7, pc}
 801d4f8:	08026fbc 	.word	0x08026fbc
 801d4fc:	08029194 	.word	0x08029194

0801d500 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801d500:	b5b0      	push	{r4, r5, r7, lr}
 801d502:	b08a      	sub	sp, #40	; 0x28
 801d504:	af00      	add	r7, sp, #0
 801d506:	6078      	str	r0, [r7, #4]
 801d508:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	332c      	adds	r3, #44	; 0x2c
 801d50e:	492b      	ldr	r1, [pc, #172]	; (801d5bc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801d510:	4618      	mov	r0, r3
 801d512:	f7f0 fcf5 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801d51c:	683b      	ldr	r3, [r7, #0]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	337c      	adds	r3, #124	; 0x7c
 801d522:	681c      	ldr	r4, [r3, #0]
 801d524:	f107 0310 	add.w	r3, r7, #16
 801d528:	4925      	ldr	r1, [pc, #148]	; (801d5c0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801d52a:	4618      	mov	r0, r3
 801d52c:	f7f0 f8a1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d530:	f107 0308 	add.w	r3, r7, #8
 801d534:	f107 0210 	add.w	r2, r7, #16
 801d538:	6839      	ldr	r1, [r7, #0]
 801d53a:	4618      	mov	r0, r3
 801d53c:	47a0      	blx	r4
 801d53e:	f107 0308 	add.w	r3, r7, #8
 801d542:	4619      	mov	r1, r3
 801d544:	4628      	mov	r0, r5
 801d546:	f7f0 fcc9 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d54a:	f107 0308 	add.w	r3, r7, #8
 801d54e:	4618      	mov	r0, r3
 801d550:	f7f0 fc47 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d554:	f107 0310 	add.w	r3, r7, #16
 801d558:	4618      	mov	r0, r3
 801d55a:	f7f0 fc42 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	332c      	adds	r3, #44	; 0x2c
 801d562:	4918      	ldr	r1, [pc, #96]	; (801d5c4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801d564:	4618      	mov	r0, r3
 801d566:	f7f0 fccb 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801d570:	683b      	ldr	r3, [r7, #0]
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	3380      	adds	r3, #128	; 0x80
 801d576:	681c      	ldr	r4, [r3, #0]
 801d578:	f107 0320 	add.w	r3, r7, #32
 801d57c:	4910      	ldr	r1, [pc, #64]	; (801d5c0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801d57e:	4618      	mov	r0, r3
 801d580:	f7f0 f877 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d584:	f107 0318 	add.w	r3, r7, #24
 801d588:	f107 0220 	add.w	r2, r7, #32
 801d58c:	6839      	ldr	r1, [r7, #0]
 801d58e:	4618      	mov	r0, r3
 801d590:	47a0      	blx	r4
 801d592:	f107 0318 	add.w	r3, r7, #24
 801d596:	4619      	mov	r1, r3
 801d598:	4628      	mov	r0, r5
 801d59a:	f7f0 fc9f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d59e:	f107 0318 	add.w	r3, r7, #24
 801d5a2:	4618      	mov	r0, r3
 801d5a4:	f7f0 fc1d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d5a8:	f107 0320 	add.w	r3, r7, #32
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f7f0 fc18 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801d5b2:	bf00      	nop
 801d5b4:	3728      	adds	r7, #40	; 0x28
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	bdb0      	pop	{r4, r5, r7, pc}
 801d5ba:	bf00      	nop
 801d5bc:	0802700c 	.word	0x0802700c
 801d5c0:	08027038 	.word	0x08027038
 801d5c4:	0802703c 	.word	0x0802703c

0801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801d5c8:	b590      	push	{r4, r7, lr}
 801d5ca:	b08f      	sub	sp, #60	; 0x3c
 801d5cc:	af00      	add	r7, sp, #0
 801d5ce:	60f8      	str	r0, [r7, #12]
 801d5d0:	60b9      	str	r1, [r7, #8]
 801d5d2:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801d5d4:	f107 0310 	add.w	r3, r7, #16
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7ff f877 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801d5de:	f107 0310 	add.w	r3, r7, #16
 801d5e2:	687a      	ldr	r2, [r7, #4]
 801d5e4:	68b9      	ldr	r1, [r7, #8]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ff fa16 	bl	801ca18 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	332c      	adds	r3, #44	; 0x2c
 801d5f0:	4937      	ldr	r1, [pc, #220]	; (801d6d0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7f0 fc84 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	332c      	adds	r3, #44	; 0x2c
 801d5fc:	68b9      	ldr	r1, [r7, #8]
 801d5fe:	4618      	mov	r0, r3
 801d600:	f7f0 fc6c 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	332c      	adds	r3, #44	; 0x2c
 801d608:	4932      	ldr	r1, [pc, #200]	; (801d6d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7f0 fc78 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d616:	f107 0320 	add.w	r3, r7, #32
 801d61a:	492f      	ldr	r1, [pc, #188]	; (801d6d8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801d61c:	4618      	mov	r0, r3
 801d61e:	f7f0 f828 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d622:	f107 0318 	add.w	r3, r7, #24
 801d626:	f107 0220 	add.w	r2, r7, #32
 801d62a:	f107 0110 	add.w	r1, r7, #16
 801d62e:	4618      	mov	r0, r3
 801d630:	f7ff fd4a 	bl	801d0c8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801d634:	f107 0318 	add.w	r3, r7, #24
 801d638:	4619      	mov	r1, r3
 801d63a:	4620      	mov	r0, r4
 801d63c:	f7f0 fc4e 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d640:	f107 0318 	add.w	r3, r7, #24
 801d644:	4618      	mov	r0, r3
 801d646:	f7f0 fbcc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d64a:	f107 0320 	add.w	r3, r7, #32
 801d64e:	4618      	mov	r0, r3
 801d650:	f7f0 fbc7 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	332c      	adds	r3, #44	; 0x2c
 801d658:	4920      	ldr	r1, [pc, #128]	; (801d6dc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7f0 fc50 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	332c      	adds	r3, #44	; 0x2c
 801d664:	68b9      	ldr	r1, [r7, #8]
 801d666:	4618      	mov	r0, r3
 801d668:	f7f0 fc38 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	332c      	adds	r3, #44	; 0x2c
 801d670:	4918      	ldr	r1, [pc, #96]	; (801d6d4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801d672:	4618      	mov	r0, r3
 801d674:	f7f0 fc44 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d67e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d682:	4915      	ldr	r1, [pc, #84]	; (801d6d8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801d684:	4618      	mov	r0, r3
 801d686:	f7ef fff4 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d68a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d68e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d692:	f107 0110 	add.w	r1, r7, #16
 801d696:	4618      	mov	r0, r3
 801d698:	f7ff fd74 	bl	801d184 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801d69c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6a0:	4619      	mov	r1, r3
 801d6a2:	4620      	mov	r0, r4
 801d6a4:	f7f0 fc1a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d6a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7f0 fb98 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d6b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7f0 fb93 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801d6bc:	f107 0310 	add.w	r3, r7, #16
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7ff f817 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 801d6c6:	bf00      	nop
 801d6c8:	373c      	adds	r7, #60	; 0x3c
 801d6ca:	46bd      	mov	sp, r7
 801d6cc:	bd90      	pop	{r4, r7, pc}
 801d6ce:	bf00      	nop
 801d6d0:	08027064 	.word	0x08027064
 801d6d4:	080270a4 	.word	0x080270a4
 801d6d8:	08027038 	.word	0x08027038
 801d6dc:	080270a8 	.word	0x080270a8

0801d6e0 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d6e0:	b590      	push	{r4, r7, lr}
 801d6e2:	b087      	sub	sp, #28
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	60f8      	str	r0, [r7, #12]
 801d6e8:	60b9      	str	r1, [r7, #8]
 801d6ea:	607a      	str	r2, [r7, #4]
 801d6ec:	68fb      	ldr	r3, [r7, #12]
 801d6ee:	68b9      	ldr	r1, [r7, #8]
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f7ff fee1 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801d6f6:	4a10      	ldr	r2, [pc, #64]	; (801d738 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d702:	f107 0310 	add.w	r3, r7, #16
 801d706:	490d      	ldr	r1, [pc, #52]	; (801d73c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801d708:	4618      	mov	r0, r3
 801d70a:	f7ef ffb2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d70e:	f107 0310 	add.w	r3, r7, #16
 801d712:	4619      	mov	r1, r3
 801d714:	4620      	mov	r0, r4
 801d716:	f7f0 f818 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d71a:	f107 0310 	add.w	r3, r7, #16
 801d71e:	4618      	mov	r0, r3
 801d720:	f7f0 fb5f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	6879      	ldr	r1, [r7, #4]
 801d728:	4618      	mov	r0, r3
 801d72a:	f7ff fee9 	bl	801d500 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	4618      	mov	r0, r3
 801d732:	371c      	adds	r7, #28
 801d734:	46bd      	mov	sp, r7
 801d736:	bd90      	pop	{r4, r7, pc}
 801d738:	08029168 	.word	0x08029168
 801d73c:	080270e4 	.word	0x080270e4

0801d740 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d740:	b590      	push	{r4, r7, lr}
 801d742:	b08d      	sub	sp, #52	; 0x34
 801d744:	af00      	add	r7, sp, #0
 801d746:	60f8      	str	r0, [r7, #12]
 801d748:	60b9      	str	r1, [r7, #8]
 801d74a:	607a      	str	r2, [r7, #4]
 801d74c:	603b      	str	r3, [r7, #0]
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	68b9      	ldr	r1, [r7, #8]
 801d752:	4618      	mov	r0, r3
 801d754:	f7ff feb0 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801d758:	4a2f      	ldr	r2, [pc, #188]	; (801d818 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801d75e:	683b      	ldr	r3, [r7, #0]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	3310      	adds	r3, #16
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	6879      	ldr	r1, [r7, #4]
 801d768:	6838      	ldr	r0, [r7, #0]
 801d76a:	4798      	blx	r3
 801d76c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d770:	2b00      	cmp	r3, #0
 801d772:	d027      	beq.n	801d7c4 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d776:	1c5a      	adds	r2, r3, #1
 801d778:	f107 0314 	add.w	r3, r7, #20
 801d77c:	4611      	mov	r1, r2
 801d77e:	4618      	mov	r0, r3
 801d780:	f7f1 fa00 	bl	800eb84 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d78a:	f107 0314 	add.w	r3, r7, #20
 801d78e:	4618      	mov	r0, r3
 801d790:	f7f0 fafa 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801d794:	4602      	mov	r2, r0
 801d796:	f107 031c 	add.w	r3, r7, #28
 801d79a:	4920      	ldr	r1, [pc, #128]	; (801d81c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7f1 f827 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801d7a2:	f107 031c 	add.w	r3, r7, #28
 801d7a6:	4619      	mov	r1, r3
 801d7a8:	4620      	mov	r0, r4
 801d7aa:	f7ef ffce 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d7ae:	f107 031c 	add.w	r3, r7, #28
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f7f0 fb15 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801d7b8:	f107 0314 	add.w	r3, r7, #20
 801d7bc:	4618      	mov	r0, r3
 801d7be:	f7f0 fb10 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d7c2:	e013      	b.n	801d7ec <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d7ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d7ce:	4914      	ldr	r1, [pc, #80]	; (801d820 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	f7ef ff4e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d7d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d7da:	4619      	mov	r1, r3
 801d7dc:	4620      	mov	r0, r4
 801d7de:	f7ef ffb4 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f7f0 fafb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	332c      	adds	r3, #44	; 0x2c
 801d7f0:	6879      	ldr	r1, [r7, #4]
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7f0 fb72 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	332c      	adds	r3, #44	; 0x2c
 801d7fc:	4909      	ldr	r1, [pc, #36]	; (801d824 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801d7fe:	4618      	mov	r0, r3
 801d800:	f7f0 fb7e 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	6839      	ldr	r1, [r7, #0]
 801d808:	4618      	mov	r0, r3
 801d80a:	f7ff fe79 	bl	801d500 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	4618      	mov	r0, r3
 801d812:	3734      	adds	r7, #52	; 0x34
 801d814:	46bd      	mov	sp, r7
 801d816:	bd90      	pop	{r4, r7, pc}
 801d818:	08029b08 	.word	0x08029b08
 801d81c:	08027114 	.word	0x08027114
 801d820:	08027150 	.word	0x08027150
 801d824:	080270a4 	.word	0x080270a4

0801d828 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801d828:	b590      	push	{r4, r7, lr}
 801d82a:	b089      	sub	sp, #36	; 0x24
 801d82c:	af00      	add	r7, sp, #0
 801d82e:	60f8      	str	r0, [r7, #12]
 801d830:	60b9      	str	r1, [r7, #8]
 801d832:	607a      	str	r2, [r7, #4]
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	68b9      	ldr	r1, [r7, #8]
 801d838:	4618      	mov	r0, r3
 801d83a:	f7ff fe3d 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801d83e:	4a1f      	ldr	r2, [pc, #124]	; (801d8bc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801d844:	f107 0310 	add.w	r3, r7, #16
 801d848:	4618      	mov	r0, r3
 801d84a:	f7fe ff3f 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801d84e:	f107 0310 	add.w	r3, r7, #16
 801d852:	6879      	ldr	r1, [r7, #4]
 801d854:	4618      	mov	r0, r3
 801d856:	f7ff f909 	bl	801ca6c <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801d85a:	f107 0310 	add.w	r3, r7, #16
 801d85e:	4618      	mov	r0, r3
 801d860:	f7ff f94c 	bl	801cafc <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d86a:	f107 0318 	add.w	r3, r7, #24
 801d86e:	4914      	ldr	r1, [pc, #80]	; (801d8c0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801d870:	4618      	mov	r0, r3
 801d872:	f7ef fefe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d876:	f107 0318 	add.w	r3, r7, #24
 801d87a:	4619      	mov	r1, r3
 801d87c:	4620      	mov	r0, r4
 801d87e:	f7ef ff64 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d882:	f107 0318 	add.w	r3, r7, #24
 801d886:	4618      	mov	r0, r3
 801d888:	f7f0 faab 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	332c      	adds	r3, #44	; 0x2c
 801d890:	490c      	ldr	r1, [pc, #48]	; (801d8c4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801d892:	4618      	mov	r0, r3
 801d894:	f7f0 fb34 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	f107 0210 	add.w	r2, r7, #16
 801d89e:	4611      	mov	r1, r2
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	f7ff fe2d 	bl	801d500 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801d8a6:	f107 0310 	add.w	r3, r7, #16
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	f7fe ff22 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	3724      	adds	r7, #36	; 0x24
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	bd90      	pop	{r4, r7, pc}
 801d8ba:	bf00      	nop
 801d8bc:	0802913c 	.word	0x0802913c
 801d8c0:	0802717c 	.word	0x0802717c
 801d8c4:	080270a4 	.word	0x080270a4

0801d8c8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801d8c8:	b590      	push	{r4, r7, lr}
 801d8ca:	b099      	sub	sp, #100	; 0x64
 801d8cc:	af00      	add	r7, sp, #0
 801d8ce:	60f8      	str	r0, [r7, #12]
 801d8d0:	60b9      	str	r1, [r7, #8]
 801d8d2:	607a      	str	r2, [r7, #4]
 801d8d4:	603b      	str	r3, [r7, #0]
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	68b9      	ldr	r1, [r7, #8]
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f7ff fdec 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801d8e0:	4a9e      	ldr	r2, [pc, #632]	; (801db5c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801d8e6:	f107 0310 	add.w	r3, r7, #16
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	f7fe feee 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801d8f0:	f107 0310 	add.w	r3, r7, #16
 801d8f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d8f6:	6879      	ldr	r1, [r7, #4]
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7ff f88d 	bl	801ca18 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801d8fe:	683b      	ldr	r3, [r7, #0]
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	335c      	adds	r3, #92	; 0x5c
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	f107 0218 	add.w	r2, r7, #24
 801d90a:	6839      	ldr	r1, [r7, #0]
 801d90c:	4610      	mov	r0, r2
 801d90e:	4798      	blx	r3
 801d910:	f107 0218 	add.w	r2, r7, #24
 801d914:	f107 0310 	add.w	r3, r7, #16
 801d918:	4611      	mov	r1, r2
 801d91a:	4618      	mov	r0, r3
 801d91c:	f7ff f948 	bl	801cbb0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801d920:	f107 0318 	add.w	r3, r7, #24
 801d924:	4618      	mov	r0, r3
 801d926:	f7f0 fa5c 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801d92a:	f107 0310 	add.w	r3, r7, #16
 801d92e:	4618      	mov	r0, r3
 801d930:	f7fe ff4d 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 801d934:	4603      	mov	r3, r0
 801d936:	2b00      	cmp	r3, #0
 801d938:	d037      	beq.n	801d9aa <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d940:	f107 0320 	add.w	r3, r7, #32
 801d944:	4986      	ldr	r1, [pc, #536]	; (801db60 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801d946:	4618      	mov	r0, r3
 801d948:	f7ef fe93 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d94c:	f107 0320 	add.w	r3, r7, #32
 801d950:	4619      	mov	r1, r3
 801d952:	4620      	mov	r0, r4
 801d954:	f7ef fef9 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d958:	f107 0320 	add.w	r3, r7, #32
 801d95c:	4618      	mov	r0, r3
 801d95e:	f7f0 fa40 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	332c      	adds	r3, #44	; 0x2c
 801d966:	6879      	ldr	r1, [r7, #4]
 801d968:	4618      	mov	r0, r3
 801d96a:	f7f0 fab7 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	332c      	adds	r3, #44	; 0x2c
 801d972:	497c      	ldr	r1, [pc, #496]	; (801db64 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801d974:	4618      	mov	r0, r3
 801d976:	f7f0 fac3 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	335c      	adds	r3, #92	; 0x5c
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801d98c:	6839      	ldr	r1, [r7, #0]
 801d98e:	4610      	mov	r0, r2
 801d990:	4798      	blx	r3
 801d992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d996:	4619      	mov	r1, r3
 801d998:	4620      	mov	r0, r4
 801d99a:	f7f0 fa9f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d99e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d9a2:	4618      	mov	r0, r3
 801d9a4:	f7f0 fa1d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801d9a8:	e056      	b.n	801da58 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d9b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d9b4:	496c      	ldr	r1, [pc, #432]	; (801db68 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	f7ef fe5b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801d9bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d9c0:	4619      	mov	r1, r3
 801d9c2:	4620      	mov	r0, r4
 801d9c4:	f7ef fec1 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801d9c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	f7f0 fa08 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801d9d8:	683b      	ldr	r3, [r7, #0]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	335c      	adds	r3, #92	; 0x5c
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d9e4:	6839      	ldr	r1, [r7, #0]
 801d9e6:	4610      	mov	r0, r2
 801d9e8:	4798      	blx	r3
 801d9ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d9ee:	4619      	mov	r1, r3
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	f7f0 fa73 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801d9f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7f0 f9f1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	332c      	adds	r3, #44	; 0x2c
 801da04:	4959      	ldr	r1, [pc, #356]	; (801db6c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801da06:	4618      	mov	r0, r3
 801da08:	f7f0 fa7a 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	332c      	adds	r3, #44	; 0x2c
 801da10:	6879      	ldr	r1, [r7, #4]
 801da12:	4618      	mov	r0, r3
 801da14:	f7f0 fa62 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	332c      	adds	r3, #44	; 0x2c
 801da1c:	4954      	ldr	r1, [pc, #336]	; (801db70 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801da1e:	4618      	mov	r0, r3
 801da20:	f7f0 fa6e 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801da2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801da2e:	6839      	ldr	r1, [r7, #0]
 801da30:	4618      	mov	r0, r3
 801da32:	f7fd faa3 	bl	801af7c <_Z10StringFromRK14MockNamedValue>
 801da36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801da3a:	4619      	mov	r1, r3
 801da3c:	4620      	mov	r0, r4
 801da3e:	f7f0 fa4d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801da42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801da46:	4618      	mov	r0, r3
 801da48:	f7f0 f9cb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	332c      	adds	r3, #44	; 0x2c
 801da50:	4948      	ldr	r1, [pc, #288]	; (801db74 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801da52:	4618      	mov	r0, r3
 801da54:	f7f0 fa54 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	332c      	adds	r3, #44	; 0x2c
 801da5c:	4946      	ldr	r1, [pc, #280]	; (801db78 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801da5e:	4618      	mov	r0, r3
 801da60:	f7f0 fa4e 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801da68:	6879      	ldr	r1, [r7, #4]
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7ff fdac 	bl	801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	332c      	adds	r3, #44	; 0x2c
 801da74:	4941      	ldr	r1, [pc, #260]	; (801db7c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801da76:	4618      	mov	r0, r3
 801da78:	f7f0 fa42 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	332c      	adds	r3, #44	; 0x2c
 801da80:	6879      	ldr	r1, [r7, #4]
 801da82:	4618      	mov	r0, r3
 801da84:	f7f0 fa2a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	332c      	adds	r3, #44	; 0x2c
 801da8c:	493a      	ldr	r1, [pc, #232]	; (801db78 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801da8e:	4618      	mov	r0, r3
 801da90:	f7f0 fa36 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	332c      	adds	r3, #44	; 0x2c
 801da98:	4939      	ldr	r1, [pc, #228]	; (801db80 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801da9a:	4618      	mov	r0, r3
 801da9c:	f7f0 fa30 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	3360      	adds	r3, #96	; 0x60
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801dab2:	6839      	ldr	r1, [r7, #0]
 801dab4:	4610      	mov	r0, r2
 801dab6:	4798      	blx	r3
 801dab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dabc:	4619      	mov	r1, r3
 801dabe:	4620      	mov	r0, r4
 801dac0:	f7f0 fa0c 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dac4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dac8:	4618      	mov	r0, r3
 801daca:	f7f0 f98a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801dace:	68fb      	ldr	r3, [r7, #12]
 801dad0:	332c      	adds	r3, #44	; 0x2c
 801dad2:	492c      	ldr	r1, [pc, #176]	; (801db84 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801dad4:	4618      	mov	r0, r3
 801dad6:	f7f0 fa13 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dae0:	683b      	ldr	r3, [r7, #0]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	335c      	adds	r3, #92	; 0x5c
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801daec:	6839      	ldr	r1, [r7, #0]
 801daee:	4610      	mov	r0, r2
 801daf0:	4798      	blx	r3
 801daf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801daf6:	4619      	mov	r1, r3
 801daf8:	4620      	mov	r0, r4
 801dafa:	f7f0 f9ef 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dafe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801db02:	4618      	mov	r0, r3
 801db04:	f7f0 f96d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	332c      	adds	r3, #44	; 0x2c
 801db0c:	491e      	ldr	r1, [pc, #120]	; (801db88 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801db0e:	4618      	mov	r0, r3
 801db10:	f7f0 f9f6 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801db1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801db1e:	6839      	ldr	r1, [r7, #0]
 801db20:	4618      	mov	r0, r3
 801db22:	f7fd fa2b 	bl	801af7c <_Z10StringFromRK14MockNamedValue>
 801db26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801db2a:	4619      	mov	r1, r3
 801db2c:	4620      	mov	r0, r4
 801db2e:	f7f0 f9d5 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801db32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801db36:	4618      	mov	r0, r3
 801db38:	f7f0 f953 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	332c      	adds	r3, #44	; 0x2c
 801db40:	490c      	ldr	r1, [pc, #48]	; (801db74 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801db42:	4618      	mov	r0, r3
 801db44:	f7f0 f9dc 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801db48:	f107 0310 	add.w	r3, r7, #16
 801db4c:	4618      	mov	r0, r3
 801db4e:	f7fe fdd1 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	4618      	mov	r0, r3
 801db56:	3764      	adds	r7, #100	; 0x64
 801db58:	46bd      	mov	sp, r7
 801db5a:	bd90      	pop	{r4, r7, pc}
 801db5c:	08029adc 	.word	0x08029adc
 801db60:	080271a0 	.word	0x080271a0
 801db64:	080271d8 	.word	0x080271d8
 801db68:	080271dc 	.word	0x080271dc
 801db6c:	08027214 	.word	0x08027214
 801db70:	08027224 	.word	0x08027224
 801db74:	0802722c 	.word	0x0802722c
 801db78:	080270a4 	.word	0x080270a4
 801db7c:	08027230 	.word	0x08027230
 801db80:	08027038 	.word	0x08027038
 801db84:	08027264 	.word	0x08027264
 801db88:	08027268 	.word	0x08027268

0801db8c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801db8c:	b590      	push	{r4, r7, lr}
 801db8e:	b097      	sub	sp, #92	; 0x5c
 801db90:	af00      	add	r7, sp, #0
 801db92:	60f8      	str	r0, [r7, #12]
 801db94:	60b9      	str	r1, [r7, #8]
 801db96:	607a      	str	r2, [r7, #4]
 801db98:	603b      	str	r3, [r7, #0]
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	68b9      	ldr	r1, [r7, #8]
 801db9e:	4618      	mov	r0, r3
 801dba0:	f7ff fc8a 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801dba4:	4a90      	ldr	r2, [pc, #576]	; (801dde8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801dbaa:	f107 0310 	add.w	r3, r7, #16
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7fe fd8c 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801dbb4:	f107 0310 	add.w	r3, r7, #16
 801dbb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dbba:	6879      	ldr	r1, [r7, #4]
 801dbbc:	4618      	mov	r0, r3
 801dbbe:	f7fe ff2b 	bl	801ca18 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801dbc2:	683b      	ldr	r3, [r7, #0]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	335c      	adds	r3, #92	; 0x5c
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	f107 0218 	add.w	r2, r7, #24
 801dbce:	6839      	ldr	r1, [r7, #0]
 801dbd0:	4610      	mov	r0, r2
 801dbd2:	4798      	blx	r3
 801dbd4:	f107 0218 	add.w	r2, r7, #24
 801dbd8:	f107 0310 	add.w	r3, r7, #16
 801dbdc:	4611      	mov	r1, r2
 801dbde:	4618      	mov	r0, r3
 801dbe0:	f7ff f812 	bl	801cc08 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801dbe4:	f107 0318 	add.w	r3, r7, #24
 801dbe8:	4618      	mov	r0, r3
 801dbea:	f7f0 f8fa 	bl	800dde2 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801dbee:	f107 0310 	add.w	r3, r7, #16
 801dbf2:	4618      	mov	r0, r3
 801dbf4:	f7fe fdeb 	bl	801c7ce <_ZNK21MockExpectedCallsList7isEmptyEv>
 801dbf8:	4603      	mov	r3, r0
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d037      	beq.n	801dc6e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dc04:	f107 0320 	add.w	r3, r7, #32
 801dc08:	4978      	ldr	r1, [pc, #480]	; (801ddec <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f7ef fd31 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801dc10:	f107 0320 	add.w	r3, r7, #32
 801dc14:	4619      	mov	r1, r3
 801dc16:	4620      	mov	r0, r4
 801dc18:	f7ef fd97 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801dc1c:	f107 0320 	add.w	r3, r7, #32
 801dc20:	4618      	mov	r0, r3
 801dc22:	f7f0 f8de 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	332c      	adds	r3, #44	; 0x2c
 801dc2a:	6879      	ldr	r1, [r7, #4]
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f7f0 f955 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	332c      	adds	r3, #44	; 0x2c
 801dc36:	496e      	ldr	r1, [pc, #440]	; (801ddf0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7f0 f961 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	335c      	adds	r3, #92	; 0x5c
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dc50:	6839      	ldr	r1, [r7, #0]
 801dc52:	4610      	mov	r0, r2
 801dc54:	4798      	blx	r3
 801dc56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc5a:	4619      	mov	r1, r3
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	f7f0 f93d 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dc62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dc66:	4618      	mov	r0, r3
 801dc68:	f7f0 f8bb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801dc6c:	e059      	b.n	801dd22 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801dc6e:	68fb      	ldr	r3, [r7, #12]
 801dc70:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dc74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc78:	495e      	ldr	r1, [pc, #376]	; (801ddf4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801dc7a:	4618      	mov	r0, r3
 801dc7c:	f7ef fcf9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801dc80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc84:	4619      	mov	r1, r3
 801dc86:	4620      	mov	r0, r4
 801dc88:	f7ef fd5f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801dc8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7f0 f8a6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	3360      	adds	r3, #96	; 0x60
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801dca8:	6839      	ldr	r1, [r7, #0]
 801dcaa:	4610      	mov	r0, r2
 801dcac:	4798      	blx	r3
 801dcae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcb2:	4619      	mov	r1, r3
 801dcb4:	4620      	mov	r0, r4
 801dcb6:	f7f0 f911 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dcba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dcbe:	4618      	mov	r0, r3
 801dcc0:	f7f0 f88f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	332c      	adds	r3, #44	; 0x2c
 801dcc8:	494b      	ldr	r1, [pc, #300]	; (801ddf8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801dcca:	4618      	mov	r0, r3
 801dccc:	f7f0 f918 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dcd6:	683b      	ldr	r3, [r7, #0]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	335c      	adds	r3, #92	; 0x5c
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801dce2:	6839      	ldr	r1, [r7, #0]
 801dce4:	4610      	mov	r0, r2
 801dce6:	4798      	blx	r3
 801dce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dcec:	4619      	mov	r1, r3
 801dcee:	4620      	mov	r0, r4
 801dcf0:	f7f0 f8f4 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dcf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f7f0 f872 	bl	800dde2 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	332c      	adds	r3, #44	; 0x2c
 801dd02:	493e      	ldr	r1, [pc, #248]	; (801ddfc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801dd04:	4618      	mov	r0, r3
 801dd06:	f7f0 f8fb 	bl	800df00 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	332c      	adds	r3, #44	; 0x2c
 801dd0e:	6879      	ldr	r1, [r7, #4]
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7f0 f8e3 	bl	800dedc <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	332c      	adds	r3, #44	; 0x2c
 801dd1a:	4939      	ldr	r1, [pc, #228]	; (801de00 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	f7f0 f8ef 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	332c      	adds	r3, #44	; 0x2c
 801dd26:	4937      	ldr	r1, [pc, #220]	; (801de04 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f7f0 f8e9 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dd32:	6879      	ldr	r1, [r7, #4]
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7ff fc47 	bl	801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	332c      	adds	r3, #44	; 0x2c
 801dd3e:	4932      	ldr	r1, [pc, #200]	; (801de08 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7f0 f8dd 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	332c      	adds	r3, #44	; 0x2c
 801dd4a:	6879      	ldr	r1, [r7, #4]
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7f0 f8c5 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	332c      	adds	r3, #44	; 0x2c
 801dd56:	492b      	ldr	r1, [pc, #172]	; (801de04 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f7f0 f8d1 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	332c      	adds	r3, #44	; 0x2c
 801dd62:	492a      	ldr	r1, [pc, #168]	; (801de0c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7f0 f8cb 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	3360      	adds	r3, #96	; 0x60
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801dd7c:	6839      	ldr	r1, [r7, #0]
 801dd7e:	4610      	mov	r0, r2
 801dd80:	4798      	blx	r3
 801dd82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd86:	4619      	mov	r1, r3
 801dd88:	4620      	mov	r0, r4
 801dd8a:	f7f0 f8a7 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801dd8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dd92:	4618      	mov	r0, r3
 801dd94:	f7f0 f825 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	332c      	adds	r3, #44	; 0x2c
 801dd9c:	491c      	ldr	r1, [pc, #112]	; (801de10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f7f0 f8ae 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ddaa:	683b      	ldr	r3, [r7, #0]
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	335c      	adds	r3, #92	; 0x5c
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801ddb6:	6839      	ldr	r1, [r7, #0]
 801ddb8:	4610      	mov	r0, r2
 801ddba:	4798      	blx	r3
 801ddbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddc0:	4619      	mov	r1, r3
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f7f0 f88a 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801ddc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ddcc:	4618      	mov	r0, r3
 801ddce:	f7f0 f808 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ddd2:	f107 0310 	add.w	r3, r7, #16
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f7fe fc8c 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	4618      	mov	r0, r3
 801dde0:	375c      	adds	r7, #92	; 0x5c
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bd90      	pop	{r4, r7, pc}
 801dde6:	bf00      	nop
 801dde8:	08029ab0 	.word	0x08029ab0
 801ddec:	0802726c 	.word	0x0802726c
 801ddf0:	080271d8 	.word	0x080271d8
 801ddf4:	080272ac 	.word	0x080272ac
 801ddf8:	080272d8 	.word	0x080272d8
 801ddfc:	08027214 	.word	0x08027214
 801de00:	080272f0 	.word	0x080272f0
 801de04:	080270a4 	.word	0x080270a4
 801de08:	080272f4 	.word	0x080272f4
 801de0c:	08027038 	.word	0x08027038
 801de10:	08027264 	.word	0x08027264

0801de14 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801de14:	b590      	push	{r4, r7, lr}
 801de16:	b08b      	sub	sp, #44	; 0x2c
 801de18:	af00      	add	r7, sp, #0
 801de1a:	60f8      	str	r0, [r7, #12]
 801de1c:	60b9      	str	r1, [r7, #8]
 801de1e:	607a      	str	r2, [r7, #4]
 801de20:	603b      	str	r3, [r7, #0]
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	68b9      	ldr	r1, [r7, #8]
 801de26:	4618      	mov	r0, r3
 801de28:	f7ff fb46 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801de2c:	4a30      	ldr	r2, [pc, #192]	; (801def0 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801de32:	f107 0310 	add.w	r3, r7, #16
 801de36:	4618      	mov	r0, r3
 801de38:	f7fe fc48 	bl	801c6cc <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801de3c:	f107 0310 	add.w	r3, r7, #16
 801de40:	683a      	ldr	r2, [r7, #0]
 801de42:	6879      	ldr	r1, [r7, #4]
 801de44:	4618      	mov	r0, r3
 801de46:	f7fe fde7 	bl	801ca18 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801de50:	f107 0318 	add.w	r3, r7, #24
 801de54:	4927      	ldr	r1, [pc, #156]	; (801def4 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801de56:	4618      	mov	r0, r3
 801de58:	f7ef fc0b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801de5c:	f107 0318 	add.w	r3, r7, #24
 801de60:	4619      	mov	r1, r3
 801de62:	4620      	mov	r0, r4
 801de64:	f7ef fc71 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801de68:	f107 0318 	add.w	r3, r7, #24
 801de6c:	4618      	mov	r0, r3
 801de6e:	f7ef ffb8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	332c      	adds	r3, #44	; 0x2c
 801de76:	6879      	ldr	r1, [r7, #4]
 801de78:	4618      	mov	r0, r3
 801de7a:	f7f0 f82f 	bl	800dedc <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	332c      	adds	r3, #44	; 0x2c
 801de82:	491d      	ldr	r1, [pc, #116]	; (801def8 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801de84:	4618      	mov	r0, r3
 801de86:	f7f0 f83b 	bl	800df00 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	683a      	ldr	r2, [r7, #0]
 801de8e:	6879      	ldr	r1, [r7, #4]
 801de90:	4618      	mov	r0, r3
 801de92:	f7ff fb99 	bl	801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	332c      	adds	r3, #44	; 0x2c
 801de9a:	4918      	ldr	r1, [pc, #96]	; (801defc <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801de9c:	4618      	mov	r0, r3
 801de9e:	f7f0 f82f 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801dea2:	68fb      	ldr	r3, [r7, #12]
 801dea4:	332c      	adds	r3, #44	; 0x2c
 801dea6:	4916      	ldr	r1, [pc, #88]	; (801df00 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801dea8:	4618      	mov	r0, r3
 801deaa:	f7f0 f829 	bl	800df00 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801deb4:	f107 0320 	add.w	r3, r7, #32
 801deb8:	f107 0210 	add.w	r2, r7, #16
 801debc:	4611      	mov	r1, r2
 801debe:	4618      	mov	r0, r3
 801dec0:	f7ff f9bc 	bl	801d23c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801dec4:	f107 0320 	add.w	r3, r7, #32
 801dec8:	4619      	mov	r1, r3
 801deca:	4620      	mov	r0, r4
 801decc:	f7f0 f806 	bl	800dedc <_ZN12SimpleStringpLERKS_>
 801ded0:	f107 0320 	add.w	r3, r7, #32
 801ded4:	4618      	mov	r0, r3
 801ded6:	f7ef ff84 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801deda:	f107 0310 	add.w	r3, r7, #16
 801dede:	4618      	mov	r0, r3
 801dee0:	f7fe fc08 	bl	801c6f4 <_ZN21MockExpectedCallsListD1Ev>
}
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	4618      	mov	r0, r3
 801dee8:	372c      	adds	r7, #44	; 0x2c
 801deea:	46bd      	mov	sp, r7
 801deec:	bd90      	pop	{r4, r7, pc}
 801deee:	bf00      	nop
 801def0:	08029a84 	.word	0x08029a84
 801def4:	08027330 	.word	0x08027330
 801def8:	08027360 	.word	0x08027360
 801defc:	08027374 	.word	0x08027374
 801df00:	08027038 	.word	0x08027038

0801df04 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801df04:	b590      	push	{r4, r7, lr}
 801df06:	b087      	sub	sp, #28
 801df08:	af00      	add	r7, sp, #0
 801df0a:	60f8      	str	r0, [r7, #12]
 801df0c:	60b9      	str	r1, [r7, #8]
 801df0e:	607a      	str	r2, [r7, #4]
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	68b9      	ldr	r1, [r7, #8]
 801df14:	4618      	mov	r0, r3
 801df16:	f7ff facf 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801df1a:	4a10      	ldr	r2, [pc, #64]	; (801df5c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	f7ef ff2e 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801df2c:	4602      	mov	r2, r0
 801df2e:	f107 0310 	add.w	r3, r7, #16
 801df32:	490b      	ldr	r1, [pc, #44]	; (801df60 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801df34:	4618      	mov	r0, r3
 801df36:	f7f0 fc5b 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801df3a:	f107 0310 	add.w	r3, r7, #16
 801df3e:	4619      	mov	r1, r3
 801df40:	4620      	mov	r0, r4
 801df42:	f7ef fc02 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801df46:	f107 0310 	add.w	r3, r7, #16
 801df4a:	4618      	mov	r0, r3
 801df4c:	f7ef ff49 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	4618      	mov	r0, r3
 801df54:	371c      	adds	r7, #28
 801df56:	46bd      	mov	sp, r7
 801df58:	bd90      	pop	{r4, r7, pc}
 801df5a:	bf00      	nop
 801df5c:	08029a58 	.word	0x08029a58
 801df60:	080273a0 	.word	0x080273a0

0801df64 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801df64:	b590      	push	{r4, r7, lr}
 801df66:	b087      	sub	sp, #28
 801df68:	af00      	add	r7, sp, #0
 801df6a:	60f8      	str	r0, [r7, #12]
 801df6c:	60b9      	str	r1, [r7, #8]
 801df6e:	607a      	str	r2, [r7, #4]
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	68b9      	ldr	r1, [r7, #8]
 801df74:	4618      	mov	r0, r3
 801df76:	f7ff fa9f 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801df7a:	4a10      	ldr	r2, [pc, #64]	; (801dfbc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801df86:	6878      	ldr	r0, [r7, #4]
 801df88:	f7ef fefe 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801df8c:	4602      	mov	r2, r0
 801df8e:	f107 0310 	add.w	r3, r7, #16
 801df92:	490b      	ldr	r1, [pc, #44]	; (801dfc0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801df94:	4618      	mov	r0, r3
 801df96:	f7f0 fc2b 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801df9a:	f107 0310 	add.w	r3, r7, #16
 801df9e:	4619      	mov	r1, r3
 801dfa0:	4620      	mov	r0, r4
 801dfa2:	f7ef fbd2 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801dfa6:	f107 0310 	add.w	r3, r7, #16
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f7ef ff19 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801dfb0:	68fb      	ldr	r3, [r7, #12]
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	371c      	adds	r7, #28
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	bd90      	pop	{r4, r7, pc}
 801dfba:	bf00      	nop
 801dfbc:	08029a2c 	.word	0x08029a2c
 801dfc0:	080273f8 	.word	0x080273f8

0801dfc4 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801dfc4:	b590      	push	{r4, r7, lr}
 801dfc6:	b087      	sub	sp, #28
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	60f8      	str	r0, [r7, #12]
 801dfcc:	60b9      	str	r1, [r7, #8]
 801dfce:	607a      	str	r2, [r7, #4]
 801dfd0:	603b      	str	r3, [r7, #0]
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	68b9      	ldr	r1, [r7, #8]
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	f7ff fa6e 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801dfdc:	4a12      	ldr	r2, [pc, #72]	; (801e028 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801dfe2:	68fb      	ldr	r3, [r7, #12]
 801dfe4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801dfe8:	6878      	ldr	r0, [r7, #4]
 801dfea:	f7ef fecd 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801dfee:	4602      	mov	r2, r0
 801dff0:	f107 0010 	add.w	r0, r7, #16
 801dff4:	683b      	ldr	r3, [r7, #0]
 801dff6:	490d      	ldr	r1, [pc, #52]	; (801e02c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801dff8:	f7f0 fbfa 	bl	800e7f0 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801dffc:	f107 0310 	add.w	r3, r7, #16
 801e000:	4619      	mov	r1, r3
 801e002:	4620      	mov	r0, r4
 801e004:	f7ef fba1 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e008:	f107 0310 	add.w	r3, r7, #16
 801e00c:	4618      	mov	r0, r3
 801e00e:	f7ef fee8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e016:	6879      	ldr	r1, [r7, #4]
 801e018:	4618      	mov	r0, r3
 801e01a:	f7ff fad5 	bl	801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e01e:	68fb      	ldr	r3, [r7, #12]
 801e020:	4618      	mov	r0, r3
 801e022:	371c      	adds	r7, #28
 801e024:	46bd      	mov	sp, r7
 801e026:	bd90      	pop	{r4, r7, pc}
 801e028:	08029a00 	.word	0x08029a00
 801e02c:	08027448 	.word	0x08027448

0801e030 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e030:	b590      	push	{r4, r7, lr}
 801e032:	b087      	sub	sp, #28
 801e034:	af00      	add	r7, sp, #0
 801e036:	60f8      	str	r0, [r7, #12]
 801e038:	60b9      	str	r1, [r7, #8]
 801e03a:	607a      	str	r2, [r7, #4]
 801e03c:	603b      	str	r3, [r7, #0]
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	68b9      	ldr	r1, [r7, #8]
 801e042:	4618      	mov	r0, r3
 801e044:	f7ff fa38 	bl	801d4b8 <_ZN11MockFailureC1EP10UtestShell>
 801e048:	4a12      	ldr	r2, [pc, #72]	; (801e094 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e054:	6878      	ldr	r0, [r7, #4]
 801e056:	f7ef fe97 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e05a:	4602      	mov	r2, r0
 801e05c:	f107 0310 	add.w	r3, r7, #16
 801e060:	490d      	ldr	r1, [pc, #52]	; (801e098 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801e062:	4618      	mov	r0, r3
 801e064:	f7f0 fbc4 	bl	800e7f0 <_Z16StringFromFormatPKcz>
 801e068:	f107 0310 	add.w	r3, r7, #16
 801e06c:	4619      	mov	r1, r3
 801e06e:	4620      	mov	r0, r4
 801e070:	f7ef fb6b 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e074:	f107 0310 	add.w	r3, r7, #16
 801e078:	4618      	mov	r0, r3
 801e07a:	f7ef feb2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	683a      	ldr	r2, [r7, #0]
 801e082:	6879      	ldr	r1, [r7, #4]
 801e084:	4618      	mov	r0, r3
 801e086:	f7ff fa9f 	bl	801d5c8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	4618      	mov	r0, r3
 801e08e:	371c      	adds	r7, #28
 801e090:	46bd      	mov	sp, r7
 801e092:	bd90      	pop	{r4, r7, pc}
 801e094:	080299d4 	.word	0x080299d4
 801e098:	080274ac 	.word	0x080274ac

0801e09c <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801e09c:	b480      	push	{r7}
 801e09e:	b083      	sub	sp, #12
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801e0a4:	4a04      	ldr	r2, [pc, #16]	; (801e0b8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	6013      	str	r3, [r2, #0]
}
 801e0aa:	bf00      	nop
 801e0ac:	370c      	adds	r7, #12
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0b4:	4770      	bx	lr
 801e0b6:	bf00      	nop
 801e0b8:	20000f44 	.word	0x20000f44

0801e0bc <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801e0bc:	b580      	push	{r7, lr}
 801e0be:	b082      	sub	sp, #8
 801e0c0:	af00      	add	r7, sp, #0
 801e0c2:	6078      	str	r0, [r7, #4]
 801e0c4:	6039      	str	r1, [r7, #0]
 801e0c6:	4a10      	ldr	r2, [pc, #64]	; (801e108 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	601a      	str	r2, [r3, #0]
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	3304      	adds	r3, #4
 801e0d0:	6839      	ldr	r1, [r7, #0]
 801e0d2:	4618      	mov	r0, r3
 801e0d4:	f7ef fb21 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	330c      	adds	r3, #12
 801e0dc:	490b      	ldr	r1, [pc, #44]	; (801e10c <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801e0de:	4618      	mov	r0, r3
 801e0e0:	f7ef fac7 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	2200      	movs	r2, #0
 801e0e8:	629a      	str	r2, [r3, #40]	; 0x28
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	2200      	movs	r2, #0
 801e0ee:	62da      	str	r2, [r3, #44]	; 0x2c
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	2200      	movs	r2, #0
 801e0fa:	619a      	str	r2, [r3, #24]
}
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	4618      	mov	r0, r3
 801e100:	3708      	adds	r7, #8
 801e102:	46bd      	mov	sp, r7
 801e104:	bd80      	pop	{r7, pc}
 801e106:	bf00      	nop
 801e108:	0802a25c 	.word	0x0802a25c
 801e10c:	080274fc 	.word	0x080274fc

0801e110 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801e110:	b580      	push	{r7, lr}
 801e112:	b082      	sub	sp, #8
 801e114:	af00      	add	r7, sp, #0
 801e116:	6078      	str	r0, [r7, #4]
 801e118:	4a08      	ldr	r2, [pc, #32]	; (801e13c <_ZN14MockNamedValueD1Ev+0x2c>)
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	601a      	str	r2, [r3, #0]
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	330c      	adds	r3, #12
 801e122:	4618      	mov	r0, r3
 801e124:	f7ef fe5d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	3304      	adds	r3, #4
 801e12c:	4618      	mov	r0, r3
 801e12e:	f7ef fe58 	bl	800dde2 <_ZN12SimpleStringD1Ev>
{
}
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	4618      	mov	r0, r3
 801e136:	3708      	adds	r7, #8
 801e138:	46bd      	mov	sp, r7
 801e13a:	bd80      	pop	{r7, pc}
 801e13c:	0802a25c 	.word	0x0802a25c

0801e140 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801e140:	b580      	push	{r7, lr}
 801e142:	b082      	sub	sp, #8
 801e144:	af00      	add	r7, sp, #0
 801e146:	6078      	str	r0, [r7, #4]
}
 801e148:	6878      	ldr	r0, [r7, #4]
 801e14a:	f7ff ffe1 	bl	801e110 <_ZN14MockNamedValueD1Ev>
 801e14e:	2138      	movs	r1, #56	; 0x38
 801e150:	6878      	ldr	r0, [r7, #4]
 801e152:	f7ec fedf 	bl	800af14 <_ZdlPvj>
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	4618      	mov	r0, r3
 801e15a:	3708      	adds	r7, #8
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}

0801e160 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801e160:	b590      	push	{r4, r7, lr}
 801e162:	b085      	sub	sp, #20
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
 801e168:	460b      	mov	r3, r1
 801e16a:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	f103 040c 	add.w	r4, r3, #12
 801e172:	f107 0308 	add.w	r3, r7, #8
 801e176:	490b      	ldr	r1, [pc, #44]	; (801e1a4 <_ZN14MockNamedValue8setValueEb+0x44>)
 801e178:	4618      	mov	r0, r3
 801e17a:	f7ef fa7a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e17e:	f107 0308 	add.w	r3, r7, #8
 801e182:	4619      	mov	r1, r3
 801e184:	4620      	mov	r0, r4
 801e186:	f7ef fae0 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e18a:	f107 0308 	add.w	r3, r7, #8
 801e18e:	4618      	mov	r0, r3
 801e190:	f7ef fe27 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	78fa      	ldrb	r2, [r7, #3]
 801e198:	761a      	strb	r2, [r3, #24]
}
 801e19a:	bf00      	nop
 801e19c:	3714      	adds	r7, #20
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	bd90      	pop	{r4, r7, pc}
 801e1a2:	bf00      	nop
 801e1a4:	08027500 	.word	0x08027500

0801e1a8 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801e1a8:	b590      	push	{r4, r7, lr}
 801e1aa:	b085      	sub	sp, #20
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	f103 040c 	add.w	r4, r3, #12
 801e1b8:	f107 0308 	add.w	r3, r7, #8
 801e1bc:	490a      	ldr	r1, [pc, #40]	; (801e1e8 <_ZN14MockNamedValue8setValueEj+0x40>)
 801e1be:	4618      	mov	r0, r3
 801e1c0:	f7ef fa57 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e1c4:	f107 0308 	add.w	r3, r7, #8
 801e1c8:	4619      	mov	r1, r3
 801e1ca:	4620      	mov	r0, r4
 801e1cc:	f7ef fabd 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e1d0:	f107 0308 	add.w	r3, r7, #8
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	f7ef fe04 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	683a      	ldr	r2, [r7, #0]
 801e1de:	619a      	str	r2, [r3, #24]
}
 801e1e0:	bf00      	nop
 801e1e2:	3714      	adds	r7, #20
 801e1e4:	46bd      	mov	sp, r7
 801e1e6:	bd90      	pop	{r4, r7, pc}
 801e1e8:	08027508 	.word	0x08027508

0801e1ec <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801e1ec:	b590      	push	{r4, r7, lr}
 801e1ee:	b085      	sub	sp, #20
 801e1f0:	af00      	add	r7, sp, #0
 801e1f2:	6078      	str	r0, [r7, #4]
 801e1f4:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	f103 040c 	add.w	r4, r3, #12
 801e1fc:	f107 0308 	add.w	r3, r7, #8
 801e200:	490a      	ldr	r1, [pc, #40]	; (801e22c <_ZN14MockNamedValue8setValueEi+0x40>)
 801e202:	4618      	mov	r0, r3
 801e204:	f7ef fa35 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e208:	f107 0308 	add.w	r3, r7, #8
 801e20c:	4619      	mov	r1, r3
 801e20e:	4620      	mov	r0, r4
 801e210:	f7ef fa9b 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e214:	f107 0308 	add.w	r3, r7, #8
 801e218:	4618      	mov	r0, r3
 801e21a:	f7ef fde2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	683a      	ldr	r2, [r7, #0]
 801e222:	619a      	str	r2, [r3, #24]
}
 801e224:	bf00      	nop
 801e226:	3714      	adds	r7, #20
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd90      	pop	{r4, r7, pc}
 801e22c:	080274fc 	.word	0x080274fc

0801e230 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801e230:	b590      	push	{r4, r7, lr}
 801e232:	b085      	sub	sp, #20
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
 801e238:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	f103 040c 	add.w	r4, r3, #12
 801e240:	f107 0308 	add.w	r3, r7, #8
 801e244:	490a      	ldr	r1, [pc, #40]	; (801e270 <_ZN14MockNamedValue8setValueEl+0x40>)
 801e246:	4618      	mov	r0, r3
 801e248:	f7ef fa13 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e24c:	f107 0308 	add.w	r3, r7, #8
 801e250:	4619      	mov	r1, r3
 801e252:	4620      	mov	r0, r4
 801e254:	f7ef fa79 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e258:	f107 0308 	add.w	r3, r7, #8
 801e25c:	4618      	mov	r0, r3
 801e25e:	f7ef fdc0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	683a      	ldr	r2, [r7, #0]
 801e266:	619a      	str	r2, [r3, #24]
}
 801e268:	bf00      	nop
 801e26a:	3714      	adds	r7, #20
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd90      	pop	{r4, r7, pc}
 801e270:	08027518 	.word	0x08027518

0801e274 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801e274:	b590      	push	{r4, r7, lr}
 801e276:	b085      	sub	sp, #20
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	f103 040c 	add.w	r4, r3, #12
 801e284:	f107 0308 	add.w	r3, r7, #8
 801e288:	490a      	ldr	r1, [pc, #40]	; (801e2b4 <_ZN14MockNamedValue8setValueEm+0x40>)
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7ef f9f1 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e290:	f107 0308 	add.w	r3, r7, #8
 801e294:	4619      	mov	r1, r3
 801e296:	4620      	mov	r0, r4
 801e298:	f7ef fa57 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e29c:	f107 0308 	add.w	r3, r7, #8
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	f7ef fd9e 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	683a      	ldr	r2, [r7, #0]
 801e2aa:	619a      	str	r2, [r3, #24]
}
 801e2ac:	bf00      	nop
 801e2ae:	3714      	adds	r7, #20
 801e2b0:	46bd      	mov	sp, r7
 801e2b2:	bd90      	pop	{r4, r7, pc}
 801e2b4:	08027524 	.word	0x08027524

0801e2b8 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801e2b8:	b5b0      	push	{r4, r5, r7, lr}
 801e2ba:	b086      	sub	sp, #24
 801e2bc:	af02      	add	r7, sp, #8
 801e2be:	60f8      	str	r0, [r7, #12]
 801e2c0:	1d3b      	adds	r3, r7, #4
 801e2c2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801e2c6:	f7f6 fdb7 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e2ca:	4604      	mov	r4, r0
 801e2cc:	6823      	ldr	r3, [r4, #0]
 801e2ce:	3368      	adds	r3, #104	; 0x68
 801e2d0:	681d      	ldr	r5, [r3, #0]
 801e2d2:	f7f6 fdc1 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e2d6:	4603      	mov	r3, r0
 801e2d8:	9300      	str	r3, [sp, #0]
 801e2da:	2367      	movs	r3, #103	; 0x67
 801e2dc:	4a03      	ldr	r2, [pc, #12]	; (801e2ec <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801e2de:	4904      	ldr	r1, [pc, #16]	; (801e2f0 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	47a8      	blx	r5
}
 801e2e4:	bf00      	nop
 801e2e6:	3710      	adds	r7, #16
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bdb0      	pop	{r4, r5, r7, pc}
 801e2ec:	08027538 	.word	0x08027538
 801e2f0:	08027554 	.word	0x08027554

0801e2f4 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801e2f4:	b5b0      	push	{r4, r5, r7, lr}
 801e2f6:	b086      	sub	sp, #24
 801e2f8:	af02      	add	r7, sp, #8
 801e2fa:	60f8      	str	r0, [r7, #12]
 801e2fc:	1d3b      	adds	r3, r7, #4
 801e2fe:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801e302:	f7f6 fd99 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e306:	4604      	mov	r4, r0
 801e308:	6823      	ldr	r3, [r4, #0]
 801e30a:	3368      	adds	r3, #104	; 0x68
 801e30c:	681d      	ldr	r5, [r3, #0]
 801e30e:	f7f6 fda3 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e312:	4603      	mov	r3, r0
 801e314:	9300      	str	r3, [sp, #0]
 801e316:	236c      	movs	r3, #108	; 0x6c
 801e318:	4a03      	ldr	r2, [pc, #12]	; (801e328 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801e31a:	4904      	ldr	r1, [pc, #16]	; (801e32c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801e31c:	4620      	mov	r0, r4
 801e31e:	47a8      	blx	r5
}
 801e320:	bf00      	nop
 801e322:	3710      	adds	r7, #16
 801e324:	46bd      	mov	sp, r7
 801e326:	bdb0      	pop	{r4, r5, r7, pc}
 801e328:	08027538 	.word	0x08027538
 801e32c:	08027574 	.word	0x08027574

0801e330 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801e330:	b580      	push	{r7, lr}
 801e332:	b084      	sub	sp, #16
 801e334:	af00      	add	r7, sp, #0
 801e336:	60f8      	str	r0, [r7, #12]
 801e338:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	3328      	adds	r3, #40	; 0x28
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801e358 <_ZN14MockNamedValue8setValueEd+0x28>
 801e348:	ed97 0b00 	vldr	d0, [r7]
 801e34c:	68f8      	ldr	r0, [r7, #12]
 801e34e:	4798      	blx	r3
}
 801e350:	bf00      	nop
 801e352:	3710      	adds	r7, #16
 801e354:	46bd      	mov	sp, r7
 801e356:	bd80      	pop	{r7, pc}
 801e358:	47ae147b 	.word	0x47ae147b
 801e35c:	3f747ae1 	.word	0x3f747ae1

0801e360 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801e360:	b590      	push	{r4, r7, lr}
 801e362:	b089      	sub	sp, #36	; 0x24
 801e364:	af00      	add	r7, sp, #0
 801e366:	6178      	str	r0, [r7, #20]
 801e368:	ed87 0b02 	vstr	d0, [r7, #8]
 801e36c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801e370:	697b      	ldr	r3, [r7, #20]
 801e372:	f103 040c 	add.w	r4, r3, #12
 801e376:	f107 0318 	add.w	r3, r7, #24
 801e37a:	490e      	ldr	r1, [pc, #56]	; (801e3b4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801e37c:	4618      	mov	r0, r3
 801e37e:	f7ef f978 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e382:	f107 0318 	add.w	r3, r7, #24
 801e386:	4619      	mov	r1, r3
 801e388:	4620      	mov	r0, r4
 801e38a:	f7ef f9de 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e38e:	f107 0318 	add.w	r3, r7, #24
 801e392:	4618      	mov	r0, r3
 801e394:	f7ef fd25 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801e398:	6979      	ldr	r1, [r7, #20]
 801e39a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801e39e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801e3a2:	6979      	ldr	r1, [r7, #20]
 801e3a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e3a8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801e3ac:	bf00      	nop
 801e3ae:	3724      	adds	r7, #36	; 0x24
 801e3b0:	46bd      	mov	sp, r7
 801e3b2:	bd90      	pop	{r4, r7, pc}
 801e3b4:	080275a0 	.word	0x080275a0

0801e3b8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801e3b8:	b590      	push	{r4, r7, lr}
 801e3ba:	b085      	sub	sp, #20
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	6078      	str	r0, [r7, #4]
 801e3c0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	f103 040c 	add.w	r4, r3, #12
 801e3c8:	f107 0308 	add.w	r3, r7, #8
 801e3cc:	490a      	ldr	r1, [pc, #40]	; (801e3f8 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	f7ef f94f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e3d4:	f107 0308 	add.w	r3, r7, #8
 801e3d8:	4619      	mov	r1, r3
 801e3da:	4620      	mov	r0, r4
 801e3dc:	f7ef f9b5 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e3e0:	f107 0308 	add.w	r3, r7, #8
 801e3e4:	4618      	mov	r0, r3
 801e3e6:	f7ef fcfc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	683a      	ldr	r2, [r7, #0]
 801e3ee:	619a      	str	r2, [r3, #24]
}
 801e3f0:	bf00      	nop
 801e3f2:	3714      	adds	r7, #20
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd90      	pop	{r4, r7, pc}
 801e3f8:	080275a8 	.word	0x080275a8

0801e3fc <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801e3fc:	b590      	push	{r4, r7, lr}
 801e3fe:	b085      	sub	sp, #20
 801e400:	af00      	add	r7, sp, #0
 801e402:	6078      	str	r0, [r7, #4]
 801e404:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	f103 040c 	add.w	r4, r3, #12
 801e40c:	f107 0308 	add.w	r3, r7, #8
 801e410:	490a      	ldr	r1, [pc, #40]	; (801e43c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801e412:	4618      	mov	r0, r3
 801e414:	f7ef f92d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e418:	f107 0308 	add.w	r3, r7, #8
 801e41c:	4619      	mov	r1, r3
 801e41e:	4620      	mov	r0, r4
 801e420:	f7ef f993 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e424:	f107 0308 	add.w	r3, r7, #8
 801e428:	4618      	mov	r0, r3
 801e42a:	f7ef fcda 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	683a      	ldr	r2, [r7, #0]
 801e432:	619a      	str	r2, [r3, #24]
}
 801e434:	bf00      	nop
 801e436:	3714      	adds	r7, #20
 801e438:	46bd      	mov	sp, r7
 801e43a:	bd90      	pop	{r4, r7, pc}
 801e43c:	080275b0 	.word	0x080275b0

0801e440 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801e440:	b590      	push	{r4, r7, lr}
 801e442:	b085      	sub	sp, #20
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
 801e448:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	f103 040c 	add.w	r4, r3, #12
 801e450:	f107 0308 	add.w	r3, r7, #8
 801e454:	490a      	ldr	r1, [pc, #40]	; (801e480 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801e456:	4618      	mov	r0, r3
 801e458:	f7ef f90b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e45c:	f107 0308 	add.w	r3, r7, #8
 801e460:	4619      	mov	r1, r3
 801e462:	4620      	mov	r0, r4
 801e464:	f7ef f971 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e468:	f107 0308 	add.w	r3, r7, #8
 801e46c:	4618      	mov	r0, r3
 801e46e:	f7ef fcb8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	683a      	ldr	r2, [r7, #0]
 801e476:	619a      	str	r2, [r3, #24]
}
 801e478:	bf00      	nop
 801e47a:	3714      	adds	r7, #20
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd90      	pop	{r4, r7, pc}
 801e480:	080275bc 	.word	0x080275bc

0801e484 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801e484:	b590      	push	{r4, r7, lr}
 801e486:	b085      	sub	sp, #20
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
 801e48c:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	f103 040c 	add.w	r4, r3, #12
 801e494:	f107 0308 	add.w	r3, r7, #8
 801e498:	490a      	ldr	r1, [pc, #40]	; (801e4c4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801e49a:	4618      	mov	r0, r3
 801e49c:	f7ef f8e9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e4a0:	f107 0308 	add.w	r3, r7, #8
 801e4a4:	4619      	mov	r1, r3
 801e4a6:	4620      	mov	r0, r4
 801e4a8:	f7ef f94f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e4ac:	f107 0308 	add.w	r3, r7, #8
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7ef fc96 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	683a      	ldr	r2, [r7, #0]
 801e4ba:	619a      	str	r2, [r3, #24]
}
 801e4bc:	bf00      	nop
 801e4be:	3714      	adds	r7, #20
 801e4c0:	46bd      	mov	sp, r7
 801e4c2:	bd90      	pop	{r4, r7, pc}
 801e4c4:	080275c8 	.word	0x080275c8

0801e4c8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801e4c8:	b590      	push	{r4, r7, lr}
 801e4ca:	b087      	sub	sp, #28
 801e4cc:	af00      	add	r7, sp, #0
 801e4ce:	60f8      	str	r0, [r7, #12]
 801e4d0:	60b9      	str	r1, [r7, #8]
 801e4d2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	f103 040c 	add.w	r4, r3, #12
 801e4da:	f107 0310 	add.w	r3, r7, #16
 801e4de:	490c      	ldr	r1, [pc, #48]	; (801e510 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	f7ef f8c6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e4e6:	f107 0310 	add.w	r3, r7, #16
 801e4ea:	4619      	mov	r1, r3
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7ef f92c 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e4f2:	f107 0310 	add.w	r3, r7, #16
 801e4f6:	4618      	mov	r0, r3
 801e4f8:	f7ef fc73 	bl	800dde2 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	68ba      	ldr	r2, [r7, #8]
 801e500:	619a      	str	r2, [r3, #24]
    size_ = size;
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	687a      	ldr	r2, [r7, #4]
 801e506:	629a      	str	r2, [r3, #40]	; 0x28
}
 801e508:	bf00      	nop
 801e50a:	371c      	adds	r7, #28
 801e50c:	46bd      	mov	sp, r7
 801e50e:	bd90      	pop	{r4, r7, pc}
 801e510:	080275d4 	.word	0x080275d4

0801e514 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b084      	sub	sp, #16
 801e518:	af00      	add	r7, sp, #0
 801e51a:	60f8      	str	r0, [r7, #12]
 801e51c:	60b9      	str	r1, [r7, #8]
 801e51e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	330c      	adds	r3, #12
 801e524:	68b9      	ldr	r1, [r7, #8]
 801e526:	4618      	mov	r0, r3
 801e528:	f7ef f90f 	bl	800d74a <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	687a      	ldr	r2, [r7, #4]
 801e530:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801e532:	4b11      	ldr	r3, [pc, #68]	; (801e578 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d019      	beq.n	801e56e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801e53a:	4b0f      	ldr	r3, [pc, #60]	; (801e578 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e53c:	681a      	ldr	r2, [r3, #0]
 801e53e:	4b0e      	ldr	r3, [pc, #56]	; (801e578 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	3314      	adds	r3, #20
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	68b9      	ldr	r1, [r7, #8]
 801e54a:	4610      	mov	r0, r2
 801e54c:	4798      	blx	r3
 801e54e:	4602      	mov	r2, r0
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801e554:	4b08      	ldr	r3, [pc, #32]	; (801e578 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e556:	681a      	ldr	r2, [r3, #0]
 801e558:	4b07      	ldr	r3, [pc, #28]	; (801e578 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	3318      	adds	r3, #24
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	68b9      	ldr	r1, [r7, #8]
 801e564:	4610      	mov	r0, r2
 801e566:	4798      	blx	r3
 801e568:	4602      	mov	r2, r0
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801e56e:	bf00      	nop
 801e570:	3710      	adds	r7, #16
 801e572:	46bd      	mov	sp, r7
 801e574:	bd80      	pop	{r7, pc}
 801e576:	bf00      	nop
 801e578:	20000f44 	.word	0x20000f44

0801e57c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801e57c:	b580      	push	{r7, lr}
 801e57e:	b084      	sub	sp, #16
 801e580:	af00      	add	r7, sp, #0
 801e582:	60f8      	str	r0, [r7, #12]
 801e584:	60b9      	str	r1, [r7, #8]
 801e586:	607a      	str	r2, [r7, #4]
    type_ = type;
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	330c      	adds	r3, #12
 801e58c:	68b9      	ldr	r1, [r7, #8]
 801e58e:	4618      	mov	r0, r3
 801e590:	f7ef f8db 	bl	800d74a <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	687a      	ldr	r2, [r7, #4]
 801e598:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801e59a:	4b11      	ldr	r3, [pc, #68]	; (801e5e0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d019      	beq.n	801e5d6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801e5a2:	4b0f      	ldr	r3, [pc, #60]	; (801e5e0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e5a4:	681a      	ldr	r2, [r3, #0]
 801e5a6:	4b0e      	ldr	r3, [pc, #56]	; (801e5e0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	3314      	adds	r3, #20
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	68b9      	ldr	r1, [r7, #8]
 801e5b2:	4610      	mov	r0, r2
 801e5b4:	4798      	blx	r3
 801e5b6:	4602      	mov	r2, r0
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801e5bc:	4b08      	ldr	r3, [pc, #32]	; (801e5e0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e5be:	681a      	ldr	r2, [r3, #0]
 801e5c0:	4b07      	ldr	r3, [pc, #28]	; (801e5e0 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	3318      	adds	r3, #24
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	68b9      	ldr	r1, [r7, #8]
 801e5cc:	4610      	mov	r0, r2
 801e5ce:	4798      	blx	r3
 801e5d0:	4602      	mov	r2, r0
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801e5d6:	bf00      	nop
 801e5d8:	3710      	adds	r7, #16
 801e5da:	46bd      	mov	sp, r7
 801e5dc:	bd80      	pop	{r7, pc}
 801e5de:	bf00      	nop
 801e5e0:	20000f44 	.word	0x20000f44

0801e5e4 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801e5e4:	b480      	push	{r7}
 801e5e6:	b083      	sub	sp, #12
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	6078      	str	r0, [r7, #4]
 801e5ec:	6039      	str	r1, [r7, #0]
    size_ = size;
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	683a      	ldr	r2, [r7, #0]
 801e5f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 801e5f4:	bf00      	nop
 801e5f6:	370c      	adds	r7, #12
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5fe:	4770      	bx	lr

0801e600 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801e600:	b590      	push	{r4, r7, lr}
 801e602:	b085      	sub	sp, #20
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
 801e608:	6039      	str	r1, [r7, #0]
    name_ = name;
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	1d1c      	adds	r4, r3, #4
 801e60e:	f107 0308 	add.w	r3, r7, #8
 801e612:	6839      	ldr	r1, [r7, #0]
 801e614:	4618      	mov	r0, r3
 801e616:	f7ef f82c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e61a:	f107 0308 	add.w	r3, r7, #8
 801e61e:	4619      	mov	r1, r3
 801e620:	4620      	mov	r0, r4
 801e622:	f7ef f892 	bl	800d74a <_ZN12SimpleStringaSERKS_>
 801e626:	f107 0308 	add.w	r3, r7, #8
 801e62a:	4618      	mov	r0, r3
 801e62c:	f7ef fbd9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
}
 801e630:	bf00      	nop
 801e632:	3714      	adds	r7, #20
 801e634:	46bd      	mov	sp, r7
 801e636:	bd90      	pop	{r4, r7, pc}

0801e638 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801e638:	b580      	push	{r7, lr}
 801e63a:	b082      	sub	sp, #8
 801e63c:	af00      	add	r7, sp, #0
 801e63e:	6078      	str	r0, [r7, #4]
 801e640:	6039      	str	r1, [r7, #0]
    return name_;
 801e642:	683b      	ldr	r3, [r7, #0]
 801e644:	3304      	adds	r3, #4
 801e646:	4619      	mov	r1, r3
 801e648:	6878      	ldr	r0, [r7, #4]
 801e64a:	f7ef f866 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 801e64e:	6878      	ldr	r0, [r7, #4]
 801e650:	3708      	adds	r7, #8
 801e652:	46bd      	mov	sp, r7
 801e654:	bd80      	pop	{r7, pc}

0801e656 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801e656:	b580      	push	{r7, lr}
 801e658:	b082      	sub	sp, #8
 801e65a:	af00      	add	r7, sp, #0
 801e65c:	6078      	str	r0, [r7, #4]
 801e65e:	6039      	str	r1, [r7, #0]
    return type_;
 801e660:	683b      	ldr	r3, [r7, #0]
 801e662:	330c      	adds	r3, #12
 801e664:	4619      	mov	r1, r3
 801e666:	6878      	ldr	r0, [r7, #4]
 801e668:	f7ef f857 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
}
 801e66c:	6878      	ldr	r0, [r7, #4]
 801e66e:	3708      	adds	r7, #8
 801e670:	46bd      	mov	sp, r7
 801e672:	bd80      	pop	{r7, pc}

0801e674 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801e674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e676:	b087      	sub	sp, #28
 801e678:	af04      	add	r7, sp, #16
 801e67a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801e67c:	f7f6 fbdc 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e680:	4604      	mov	r4, r0
 801e682:	6823      	ldr	r3, [r4, #0]
 801e684:	3324      	adds	r3, #36	; 0x24
 801e686:	681d      	ldr	r5, [r3, #0]
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	330c      	adds	r3, #12
 801e68c:	4618      	mov	r0, r3
 801e68e:	f7ef fb7b 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e692:	4606      	mov	r6, r0
 801e694:	f7f6 fbe0 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e698:	4603      	mov	r3, r0
 801e69a:	9302      	str	r3, [sp, #8]
 801e69c:	23c8      	movs	r3, #200	; 0xc8
 801e69e:	9301      	str	r3, [sp, #4]
 801e6a0:	4b06      	ldr	r3, [pc, #24]	; (801e6bc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801e6a2:	9300      	str	r3, [sp, #0]
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	4632      	mov	r2, r6
 801e6a8:	4905      	ldr	r1, [pc, #20]	; (801e6c0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801e6aa:	4620      	mov	r0, r4
 801e6ac:	47a8      	blx	r5
    return value_.boolValue_;
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	7e1b      	ldrb	r3, [r3, #24]
}
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	370c      	adds	r7, #12
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6ba:	bf00      	nop
 801e6bc:	08027538 	.word	0x08027538
 801e6c0:	08027500 	.word	0x08027500

0801e6c4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6c6:	b089      	sub	sp, #36	; 0x24
 801e6c8:	af04      	add	r7, sp, #16
 801e6ca:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	f103 040c 	add.w	r4, r3, #12
 801e6d2:	f107 0308 	add.w	r3, r7, #8
 801e6d6:	4920      	ldr	r1, [pc, #128]	; (801e758 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801e6d8:	4618      	mov	r0, r3
 801e6da:	f7ee ffca 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e6de:	2501      	movs	r5, #1
 801e6e0:	f107 0308 	add.w	r3, r7, #8
 801e6e4:	4619      	mov	r1, r3
 801e6e6:	4620      	mov	r0, r4
 801e6e8:	f7ef fb87 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d005      	beq.n	801e6fe <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	699b      	ldr	r3, [r3, #24]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	db01      	blt.n	801e6fe <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801e6fa:	2401      	movs	r4, #1
 801e6fc:	e000      	b.n	801e700 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801e6fe:	2400      	movs	r4, #0
 801e700:	2d00      	cmp	r5, #0
 801e702:	d004      	beq.n	801e70e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801e704:	f107 0308 	add.w	r3, r7, #8
 801e708:	4618      	mov	r0, r3
 801e70a:	f7ef fb6a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e70e:	2c00      	cmp	r4, #0
 801e710:	d002      	beq.n	801e718 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	699b      	ldr	r3, [r3, #24]
 801e716:	e01a      	b.n	801e74e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801e718:	f7f6 fb8e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e71c:	4604      	mov	r4, r0
 801e71e:	6823      	ldr	r3, [r4, #0]
 801e720:	3324      	adds	r3, #36	; 0x24
 801e722:	681d      	ldr	r5, [r3, #0]
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	330c      	adds	r3, #12
 801e728:	4618      	mov	r0, r3
 801e72a:	f7ef fb2d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e72e:	4606      	mov	r6, r0
 801e730:	f7f6 fb92 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e734:	4603      	mov	r3, r0
 801e736:	9302      	str	r3, [sp, #8]
 801e738:	23d2      	movs	r3, #210	; 0xd2
 801e73a:	9301      	str	r3, [sp, #4]
 801e73c:	4b07      	ldr	r3, [pc, #28]	; (801e75c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801e73e:	9300      	str	r3, [sp, #0]
 801e740:	2300      	movs	r3, #0
 801e742:	4632      	mov	r2, r6
 801e744:	4906      	ldr	r1, [pc, #24]	; (801e760 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801e746:	4620      	mov	r0, r4
 801e748:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e74e:	4618      	mov	r0, r3
 801e750:	3714      	adds	r7, #20
 801e752:	46bd      	mov	sp, r7
 801e754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e756:	bf00      	nop
 801e758:	080274fc 	.word	0x080274fc
 801e75c:	08027538 	.word	0x08027538
 801e760:	08027508 	.word	0x08027508

0801e764 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801e764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e766:	b087      	sub	sp, #28
 801e768:	af04      	add	r7, sp, #16
 801e76a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801e76c:	f7f6 fb64 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e770:	4604      	mov	r4, r0
 801e772:	6823      	ldr	r3, [r4, #0]
 801e774:	3324      	adds	r3, #36	; 0x24
 801e776:	681d      	ldr	r5, [r3, #0]
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	330c      	adds	r3, #12
 801e77c:	4618      	mov	r0, r3
 801e77e:	f7ef fb03 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e782:	4606      	mov	r6, r0
 801e784:	f7f6 fb68 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e788:	4603      	mov	r3, r0
 801e78a:	9302      	str	r3, [sp, #8]
 801e78c:	23d9      	movs	r3, #217	; 0xd9
 801e78e:	9301      	str	r3, [sp, #4]
 801e790:	4b06      	ldr	r3, [pc, #24]	; (801e7ac <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801e792:	9300      	str	r3, [sp, #0]
 801e794:	2300      	movs	r3, #0
 801e796:	4632      	mov	r2, r6
 801e798:	4905      	ldr	r1, [pc, #20]	; (801e7b0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801e79a:	4620      	mov	r0, r4
 801e79c:	47a8      	blx	r5
    return value_.intValue_;
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	699b      	ldr	r3, [r3, #24]
}
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	370c      	adds	r7, #12
 801e7a6:	46bd      	mov	sp, r7
 801e7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7aa:	bf00      	nop
 801e7ac:	08027538 	.word	0x08027538
 801e7b0:	080274fc 	.word	0x080274fc

0801e7b4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801e7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7b6:	b08b      	sub	sp, #44	; 0x2c
 801e7b8:	af04      	add	r7, sp, #16
 801e7ba:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	f103 040c 	add.w	r4, r3, #12
 801e7c2:	f107 0308 	add.w	r3, r7, #8
 801e7c6:	4928      	ldr	r1, [pc, #160]	; (801e868 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801e7c8:	4618      	mov	r0, r3
 801e7ca:	f7ee ff52 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e7ce:	f107 0308 	add.w	r3, r7, #8
 801e7d2:	4619      	mov	r1, r3
 801e7d4:	4620      	mov	r0, r4
 801e7d6:	f7ef fb10 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e7da:	4603      	mov	r3, r0
 801e7dc:	461c      	mov	r4, r3
 801e7de:	f107 0308 	add.w	r3, r7, #8
 801e7e2:	4618      	mov	r0, r3
 801e7e4:	f7ef fafd 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e7e8:	2c00      	cmp	r4, #0
 801e7ea:	d002      	beq.n	801e7f2 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	699b      	ldr	r3, [r3, #24]
 801e7f0:	e035      	b.n	801e85e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	f103 040c 	add.w	r4, r3, #12
 801e7f8:	f107 0310 	add.w	r3, r7, #16
 801e7fc:	491b      	ldr	r1, [pc, #108]	; (801e86c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7ee ff37 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e804:	f107 0310 	add.w	r3, r7, #16
 801e808:	4619      	mov	r1, r3
 801e80a:	4620      	mov	r0, r4
 801e80c:	f7ef faf5 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e810:	4603      	mov	r3, r0
 801e812:	461c      	mov	r4, r3
 801e814:	f107 0310 	add.w	r3, r7, #16
 801e818:	4618      	mov	r0, r3
 801e81a:	f7ef fae2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e81e:	2c00      	cmp	r4, #0
 801e820:	d002      	beq.n	801e828 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	699b      	ldr	r3, [r3, #24]
 801e826:	e01a      	b.n	801e85e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801e828:	f7f6 fb06 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e82c:	4604      	mov	r4, r0
 801e82e:	6823      	ldr	r3, [r4, #0]
 801e830:	3324      	adds	r3, #36	; 0x24
 801e832:	681d      	ldr	r5, [r3, #0]
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	330c      	adds	r3, #12
 801e838:	4618      	mov	r0, r3
 801e83a:	f7ef faa5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e83e:	4606      	mov	r6, r0
 801e840:	f7f6 fb0a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e844:	4603      	mov	r3, r0
 801e846:	9302      	str	r3, [sp, #8]
 801e848:	23e5      	movs	r3, #229	; 0xe5
 801e84a:	9301      	str	r3, [sp, #4]
 801e84c:	4b08      	ldr	r3, [pc, #32]	; (801e870 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801e84e:	9300      	str	r3, [sp, #0]
 801e850:	2300      	movs	r3, #0
 801e852:	4632      	mov	r2, r6
 801e854:	4907      	ldr	r1, [pc, #28]	; (801e874 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801e856:	4620      	mov	r0, r4
 801e858:	47a8      	blx	r5
        return value_.longIntValue_;
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	699b      	ldr	r3, [r3, #24]
    }
}
 801e85e:	4618      	mov	r0, r3
 801e860:	371c      	adds	r7, #28
 801e862:	46bd      	mov	sp, r7
 801e864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e866:	bf00      	nop
 801e868:	080274fc 	.word	0x080274fc
 801e86c:	08027508 	.word	0x08027508
 801e870:	08027538 	.word	0x08027538
 801e874:	08027518 	.word	0x08027518

0801e878 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801e878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e87a:	b08d      	sub	sp, #52	; 0x34
 801e87c:	af04      	add	r7, sp, #16
 801e87e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	f103 040c 	add.w	r4, r3, #12
 801e886:	f107 0308 	add.w	r3, r7, #8
 801e88a:	4940      	ldr	r1, [pc, #256]	; (801e98c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801e88c:	4618      	mov	r0, r3
 801e88e:	f7ee fef0 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e892:	f107 0308 	add.w	r3, r7, #8
 801e896:	4619      	mov	r1, r3
 801e898:	4620      	mov	r0, r4
 801e89a:	f7ef faae 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e89e:	4603      	mov	r3, r0
 801e8a0:	461c      	mov	r4, r3
 801e8a2:	f107 0308 	add.w	r3, r7, #8
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	f7ef fa9b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e8ac:	2c00      	cmp	r4, #0
 801e8ae:	d002      	beq.n	801e8b6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	699b      	ldr	r3, [r3, #24]
 801e8b4:	e066      	b.n	801e984 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	f103 040c 	add.w	r4, r3, #12
 801e8bc:	f107 0310 	add.w	r3, r7, #16
 801e8c0:	4933      	ldr	r1, [pc, #204]	; (801e990 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f7ee fed5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e8c8:	2501      	movs	r5, #1
 801e8ca:	f107 0310 	add.w	r3, r7, #16
 801e8ce:	4619      	mov	r1, r3
 801e8d0:	4620      	mov	r0, r4
 801e8d2:	f7ef fa92 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d005      	beq.n	801e8e8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	699b      	ldr	r3, [r3, #24]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	db01      	blt.n	801e8e8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801e8e4:	2401      	movs	r4, #1
 801e8e6:	e000      	b.n	801e8ea <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801e8e8:	2400      	movs	r4, #0
 801e8ea:	2d00      	cmp	r5, #0
 801e8ec:	d004      	beq.n	801e8f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801e8ee:	f107 0310 	add.w	r3, r7, #16
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	f7ef fa75 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e8f8:	2c00      	cmp	r4, #0
 801e8fa:	d002      	beq.n	801e902 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	699b      	ldr	r3, [r3, #24]
 801e900:	e040      	b.n	801e984 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	f103 040c 	add.w	r4, r3, #12
 801e908:	f107 0318 	add.w	r3, r7, #24
 801e90c:	4921      	ldr	r1, [pc, #132]	; (801e994 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801e90e:	4618      	mov	r0, r3
 801e910:	f7ee feaf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801e914:	2501      	movs	r5, #1
 801e916:	f107 0318 	add.w	r3, r7, #24
 801e91a:	4619      	mov	r1, r3
 801e91c:	4620      	mov	r0, r4
 801e91e:	f7ef fa6c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801e922:	4603      	mov	r3, r0
 801e924:	2b00      	cmp	r3, #0
 801e926:	d005      	beq.n	801e934 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	699b      	ldr	r3, [r3, #24]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	db01      	blt.n	801e934 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801e930:	2401      	movs	r4, #1
 801e932:	e000      	b.n	801e936 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801e934:	2400      	movs	r4, #0
 801e936:	2d00      	cmp	r5, #0
 801e938:	d004      	beq.n	801e944 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801e93a:	f107 0318 	add.w	r3, r7, #24
 801e93e:	4618      	mov	r0, r3
 801e940:	f7ef fa4f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801e944:	2c00      	cmp	r4, #0
 801e946:	d002      	beq.n	801e94e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	699b      	ldr	r3, [r3, #24]
 801e94c:	e01a      	b.n	801e984 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801e94e:	f7f6 fa73 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e952:	4604      	mov	r4, r0
 801e954:	6823      	ldr	r3, [r4, #0]
 801e956:	3324      	adds	r3, #36	; 0x24
 801e958:	681d      	ldr	r5, [r3, #0]
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	330c      	adds	r3, #12
 801e95e:	4618      	mov	r0, r3
 801e960:	f7ef fa12 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801e964:	4606      	mov	r6, r0
 801e966:	f7f6 fa77 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e96a:	4603      	mov	r3, r0
 801e96c:	9302      	str	r3, [sp, #8]
 801e96e:	23f4      	movs	r3, #244	; 0xf4
 801e970:	9301      	str	r3, [sp, #4]
 801e972:	4b09      	ldr	r3, [pc, #36]	; (801e998 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801e974:	9300      	str	r3, [sp, #0]
 801e976:	2300      	movs	r3, #0
 801e978:	4632      	mov	r2, r6
 801e97a:	4908      	ldr	r1, [pc, #32]	; (801e99c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801e97c:	4620      	mov	r0, r4
 801e97e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	699b      	ldr	r3, [r3, #24]
    }
}
 801e984:	4618      	mov	r0, r3
 801e986:	3724      	adds	r7, #36	; 0x24
 801e988:	46bd      	mov	sp, r7
 801e98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e98c:	08027508 	.word	0x08027508
 801e990:	080274fc 	.word	0x080274fc
 801e994:	08027518 	.word	0x08027518
 801e998:	08027538 	.word	0x08027538
 801e99c:	08027524 	.word	0x08027524

0801e9a0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801e9a0:	b5b0      	push	{r4, r5, r7, lr}
 801e9a2:	b084      	sub	sp, #16
 801e9a4:	af02      	add	r7, sp, #8
 801e9a6:	6078      	str	r0, [r7, #4]
 801e9a8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801e9aa:	f7f6 fa45 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e9ae:	4604      	mov	r4, r0
 801e9b0:	6823      	ldr	r3, [r4, #0]
 801e9b2:	3368      	adds	r3, #104	; 0x68
 801e9b4:	681d      	ldr	r5, [r3, #0]
 801e9b6:	f7f6 fa4f 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e9ba:	4603      	mov	r3, r0
 801e9bc:	9300      	str	r3, [sp, #0]
 801e9be:	f240 1323 	movw	r3, #291	; 0x123
 801e9c2:	4a06      	ldr	r2, [pc, #24]	; (801e9dc <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801e9c4:	4906      	ldr	r1, [pc, #24]	; (801e9e0 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	47a8      	blx	r5
    return cpputest_longlong(0);
 801e9ca:	2100      	movs	r1, #0
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	f7ec fe87 	bl	800b6e0 <_ZN17cpputest_longlongC1Ei>
}
 801e9d2:	6878      	ldr	r0, [r7, #4]
 801e9d4:	3708      	adds	r7, #8
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	bdb0      	pop	{r4, r5, r7, pc}
 801e9da:	bf00      	nop
 801e9dc:	08027538 	.word	0x08027538
 801e9e0:	08027554 	.word	0x08027554

0801e9e4 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801e9e4:	b5b0      	push	{r4, r5, r7, lr}
 801e9e6:	b084      	sub	sp, #16
 801e9e8:	af02      	add	r7, sp, #8
 801e9ea:	6078      	str	r0, [r7, #4]
 801e9ec:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801e9ee:	f7f6 fa23 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801e9f2:	4604      	mov	r4, r0
 801e9f4:	6823      	ldr	r3, [r4, #0]
 801e9f6:	3368      	adds	r3, #104	; 0x68
 801e9f8:	681d      	ldr	r5, [r3, #0]
 801e9fa:	f7f6 fa2d 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e9fe:	4603      	mov	r3, r0
 801ea00:	9300      	str	r3, [sp, #0]
 801ea02:	f240 1329 	movw	r3, #297	; 0x129
 801ea06:	4a06      	ldr	r2, [pc, #24]	; (801ea20 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801ea08:	4906      	ldr	r1, [pc, #24]	; (801ea24 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801ea0a:	4620      	mov	r0, r4
 801ea0c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801ea0e:	2100      	movs	r1, #0
 801ea10:	6878      	ldr	r0, [r7, #4]
 801ea12:	f7ec fe71 	bl	800b6f8 <_ZN18cpputest_ulonglongC1Ei>
}
 801ea16:	6878      	ldr	r0, [r7, #4]
 801ea18:	3708      	adds	r7, #8
 801ea1a:	46bd      	mov	sp, r7
 801ea1c:	bdb0      	pop	{r4, r5, r7, pc}
 801ea1e:	bf00      	nop
 801ea20:	08027538 	.word	0x08027538
 801ea24:	08027574 	.word	0x08027574

0801ea28 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801ea28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea2a:	b087      	sub	sp, #28
 801ea2c:	af04      	add	r7, sp, #16
 801ea2e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801ea30:	f7f6 fa02 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801ea34:	4604      	mov	r4, r0
 801ea36:	6823      	ldr	r3, [r4, #0]
 801ea38:	3324      	adds	r3, #36	; 0x24
 801ea3a:	681d      	ldr	r5, [r3, #0]
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	330c      	adds	r3, #12
 801ea40:	4618      	mov	r0, r3
 801ea42:	f7ef f9a1 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801ea46:	4606      	mov	r6, r0
 801ea48:	f7f6 fa06 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ea4c:	4603      	mov	r3, r0
 801ea4e:	9302      	str	r3, [sp, #8]
 801ea50:	f240 1331 	movw	r3, #305	; 0x131
 801ea54:	9301      	str	r3, [sp, #4]
 801ea56:	4b09      	ldr	r3, [pc, #36]	; (801ea7c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801ea58:	9300      	str	r3, [sp, #0]
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	4632      	mov	r2, r6
 801ea5e:	4908      	ldr	r1, [pc, #32]	; (801ea80 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801ea60:	4620      	mov	r0, r4
 801ea62:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801ea6a:	ec43 2b17 	vmov	d7, r2, r3
}
 801ea6e:	eeb0 0a47 	vmov.f32	s0, s14
 801ea72:	eef0 0a67 	vmov.f32	s1, s15
 801ea76:	370c      	adds	r7, #12
 801ea78:	46bd      	mov	sp, r7
 801ea7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea7c:	08027538 	.word	0x08027538
 801ea80:	080275a0 	.word	0x080275a0

0801ea84 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea86:	b087      	sub	sp, #28
 801ea88:	af04      	add	r7, sp, #16
 801ea8a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801ea8c:	f7f6 f9d4 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801ea90:	4604      	mov	r4, r0
 801ea92:	6823      	ldr	r3, [r4, #0]
 801ea94:	3324      	adds	r3, #36	; 0x24
 801ea96:	681d      	ldr	r5, [r3, #0]
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	330c      	adds	r3, #12
 801ea9c:	4618      	mov	r0, r3
 801ea9e:	f7ef f973 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801eaa2:	4606      	mov	r6, r0
 801eaa4:	f7f6 f9d8 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	9302      	str	r3, [sp, #8]
 801eaac:	f240 1337 	movw	r3, #311	; 0x137
 801eab0:	9301      	str	r3, [sp, #4]
 801eab2:	4b09      	ldr	r3, [pc, #36]	; (801ead8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801eab4:	9300      	str	r3, [sp, #0]
 801eab6:	2300      	movs	r3, #0
 801eab8:	4632      	mov	r2, r6
 801eaba:	4908      	ldr	r1, [pc, #32]	; (801eadc <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801eabc:	4620      	mov	r0, r4
 801eabe:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801eac6:	ec43 2b17 	vmov	d7, r2, r3
}
 801eaca:	eeb0 0a47 	vmov.f32	s0, s14
 801eace:	eef0 0a67 	vmov.f32	s1, s15
 801ead2:	370c      	adds	r7, #12
 801ead4:	46bd      	mov	sp, r7
 801ead6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ead8:	08027538 	.word	0x08027538
 801eadc:	080275a0 	.word	0x080275a0

0801eae0 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eae2:	b087      	sub	sp, #28
 801eae4:	af04      	add	r7, sp, #16
 801eae6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801eae8:	f7f6 f9a6 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801eaec:	4604      	mov	r4, r0
 801eaee:	6823      	ldr	r3, [r4, #0]
 801eaf0:	3324      	adds	r3, #36	; 0x24
 801eaf2:	681d      	ldr	r5, [r3, #0]
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	330c      	adds	r3, #12
 801eaf8:	4618      	mov	r0, r3
 801eafa:	f7ef f945 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801eafe:	4606      	mov	r6, r0
 801eb00:	f7f6 f9aa 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eb04:	4603      	mov	r3, r0
 801eb06:	9302      	str	r3, [sp, #8]
 801eb08:	f240 133d 	movw	r3, #317	; 0x13d
 801eb0c:	9301      	str	r3, [sp, #4]
 801eb0e:	4b06      	ldr	r3, [pc, #24]	; (801eb28 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801eb10:	9300      	str	r3, [sp, #0]
 801eb12:	2300      	movs	r3, #0
 801eb14:	4632      	mov	r2, r6
 801eb16:	4905      	ldr	r1, [pc, #20]	; (801eb2c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801eb18:	4620      	mov	r0, r4
 801eb1a:	47a8      	blx	r5
    return value_.stringValue_;
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	699b      	ldr	r3, [r3, #24]
}
 801eb20:	4618      	mov	r0, r3
 801eb22:	370c      	adds	r7, #12
 801eb24:	46bd      	mov	sp, r7
 801eb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb28:	08027538 	.word	0x08027538
 801eb2c:	080275c8 	.word	0x080275c8

0801eb30 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb32:	b087      	sub	sp, #28
 801eb34:	af04      	add	r7, sp, #16
 801eb36:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801eb38:	f7f6 f97e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801eb3c:	4604      	mov	r4, r0
 801eb3e:	6823      	ldr	r3, [r4, #0]
 801eb40:	3324      	adds	r3, #36	; 0x24
 801eb42:	681d      	ldr	r5, [r3, #0]
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	330c      	adds	r3, #12
 801eb48:	4618      	mov	r0, r3
 801eb4a:	f7ef f91d 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801eb4e:	4606      	mov	r6, r0
 801eb50:	f7f6 f982 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eb54:	4603      	mov	r3, r0
 801eb56:	9302      	str	r3, [sp, #8]
 801eb58:	f240 1343 	movw	r3, #323	; 0x143
 801eb5c:	9301      	str	r3, [sp, #4]
 801eb5e:	4b06      	ldr	r3, [pc, #24]	; (801eb78 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801eb60:	9300      	str	r3, [sp, #0]
 801eb62:	2300      	movs	r3, #0
 801eb64:	4632      	mov	r2, r6
 801eb66:	4905      	ldr	r1, [pc, #20]	; (801eb7c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801eb68:	4620      	mov	r0, r4
 801eb6a:	47a8      	blx	r5
    return value_.pointerValue_;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	699b      	ldr	r3, [r3, #24]
}
 801eb70:	4618      	mov	r0, r3
 801eb72:	370c      	adds	r7, #12
 801eb74:	46bd      	mov	sp, r7
 801eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb78:	08027538 	.word	0x08027538
 801eb7c:	080275a8 	.word	0x080275a8

0801eb80 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb82:	b087      	sub	sp, #28
 801eb84:	af04      	add	r7, sp, #16
 801eb86:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801eb88:	f7f6 f956 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801eb8c:	4604      	mov	r4, r0
 801eb8e:	6823      	ldr	r3, [r4, #0]
 801eb90:	3324      	adds	r3, #36	; 0x24
 801eb92:	681d      	ldr	r5, [r3, #0]
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	330c      	adds	r3, #12
 801eb98:	4618      	mov	r0, r3
 801eb9a:	f7ef f8f5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801eb9e:	4606      	mov	r6, r0
 801eba0:	f7f6 f95a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801eba4:	4603      	mov	r3, r0
 801eba6:	9302      	str	r3, [sp, #8]
 801eba8:	f240 1349 	movw	r3, #329	; 0x149
 801ebac:	9301      	str	r3, [sp, #4]
 801ebae:	4b06      	ldr	r3, [pc, #24]	; (801ebc8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801ebb0:	9300      	str	r3, [sp, #0]
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	4632      	mov	r2, r6
 801ebb6:	4905      	ldr	r1, [pc, #20]	; (801ebcc <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801ebb8:	4620      	mov	r0, r4
 801ebba:	47a8      	blx	r5
    return value_.pointerValue_;
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	699b      	ldr	r3, [r3, #24]
}
 801ebc0:	4618      	mov	r0, r3
 801ebc2:	370c      	adds	r7, #12
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebc8:	08027538 	.word	0x08027538
 801ebcc:	080275b0 	.word	0x080275b0

0801ebd0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebd2:	b087      	sub	sp, #28
 801ebd4:	af04      	add	r7, sp, #16
 801ebd6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801ebd8:	f7f6 f92e 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801ebdc:	4604      	mov	r4, r0
 801ebde:	6823      	ldr	r3, [r4, #0]
 801ebe0:	3324      	adds	r3, #36	; 0x24
 801ebe2:	681d      	ldr	r5, [r3, #0]
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	330c      	adds	r3, #12
 801ebe8:	4618      	mov	r0, r3
 801ebea:	f7ef f8cd 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801ebee:	4606      	mov	r6, r0
 801ebf0:	f7f6 f932 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	9302      	str	r3, [sp, #8]
 801ebf8:	f240 134f 	movw	r3, #335	; 0x14f
 801ebfc:	9301      	str	r3, [sp, #4]
 801ebfe:	4b06      	ldr	r3, [pc, #24]	; (801ec18 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801ec00:	9300      	str	r3, [sp, #0]
 801ec02:	2300      	movs	r3, #0
 801ec04:	4632      	mov	r2, r6
 801ec06:	4905      	ldr	r1, [pc, #20]	; (801ec1c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801ec08:	4620      	mov	r0, r4
 801ec0a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	699b      	ldr	r3, [r3, #24]
}
 801ec10:	4618      	mov	r0, r3
 801ec12:	370c      	adds	r7, #12
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec18:	08027538 	.word	0x08027538
 801ec1c:	080275bc 	.word	0x080275bc

0801ec20 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec22:	b087      	sub	sp, #28
 801ec24:	af04      	add	r7, sp, #16
 801ec26:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801ec28:	f7f6 f906 	bl	8014e38 <_ZN10UtestShell10getCurrentEv>
 801ec2c:	4604      	mov	r4, r0
 801ec2e:	6823      	ldr	r3, [r4, #0]
 801ec30:	3324      	adds	r3, #36	; 0x24
 801ec32:	681d      	ldr	r5, [r3, #0]
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	330c      	adds	r3, #12
 801ec38:	4618      	mov	r0, r3
 801ec3a:	f7ef f8a5 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801ec3e:	4606      	mov	r6, r0
 801ec40:	f7f6 f90a 	bl	8014e58 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ec44:	4603      	mov	r3, r0
 801ec46:	9302      	str	r3, [sp, #8]
 801ec48:	f240 1355 	movw	r3, #341	; 0x155
 801ec4c:	9301      	str	r3, [sp, #4]
 801ec4e:	4b06      	ldr	r3, [pc, #24]	; (801ec68 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801ec50:	9300      	str	r3, [sp, #0]
 801ec52:	2300      	movs	r3, #0
 801ec54:	4632      	mov	r2, r6
 801ec56:	4905      	ldr	r1, [pc, #20]	; (801ec6c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801ec58:	4620      	mov	r0, r4
 801ec5a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	699b      	ldr	r3, [r3, #24]
}
 801ec60:	4618      	mov	r0, r3
 801ec62:	370c      	adds	r7, #12
 801ec64:	46bd      	mov	sp, r7
 801ec66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec68:	08027538 	.word	0x08027538
 801ec6c:	080275d4 	.word	0x080275d4

0801ec70 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801ec70:	b480      	push	{r7}
 801ec72:	b083      	sub	sp, #12
 801ec74:	af00      	add	r7, sp, #0
 801ec76:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	699b      	ldr	r3, [r3, #24]
}
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	370c      	adds	r7, #12
 801ec80:	46bd      	mov	sp, r7
 801ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec86:	4770      	bx	lr

0801ec88 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801ec88:	b480      	push	{r7}
 801ec8a:	b083      	sub	sp, #12
 801ec8c:	af00      	add	r7, sp, #0
 801ec8e:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	699b      	ldr	r3, [r3, #24]
}
 801ec94:	4618      	mov	r0, r3
 801ec96:	370c      	adds	r7, #12
 801ec98:	46bd      	mov	sp, r7
 801ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec9e:	4770      	bx	lr

0801eca0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801eca0:	b480      	push	{r7}
 801eca2:	b083      	sub	sp, #12
 801eca4:	af00      	add	r7, sp, #0
 801eca6:	6078      	str	r0, [r7, #4]
    return size_;
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801ecac:	4618      	mov	r0, r3
 801ecae:	370c      	adds	r7, #12
 801ecb0:	46bd      	mov	sp, r7
 801ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecb6:	4770      	bx	lr

0801ecb8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801ecb8:	b480      	push	{r7}
 801ecba:	b083      	sub	sp, #12
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
    return comparator_;
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	370c      	adds	r7, #12
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecce:	4770      	bx	lr

0801ecd0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801ecd0:	b480      	push	{r7}
 801ecd2:	b083      	sub	sp, #12
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
    return copier_;
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801ecdc:	4618      	mov	r0, r3
 801ecde:	370c      	adds	r7, #12
 801ece0:	46bd      	mov	sp, r7
 801ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece6:	4770      	bx	lr

0801ece8 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801ece8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecea:	b0cd      	sub	sp, #308	; 0x134
 801ecec:	af00      	add	r7, sp, #0
 801ecee:	1d3b      	adds	r3, r7, #4
 801ecf0:	6018      	str	r0, [r3, #0]
 801ecf2:	463b      	mov	r3, r7
 801ecf4:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801ecf6:	2500      	movs	r5, #0
 801ecf8:	1d3b      	adds	r3, r7, #4
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	f103 040c 	add.w	r4, r3, #12
 801ed00:	f107 0308 	add.w	r3, r7, #8
 801ed04:	49bb      	ldr	r1, [pc, #748]	; (801eff4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801ed06:	4618      	mov	r0, r3
 801ed08:	f7ee fcb3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ed0c:	2601      	movs	r6, #1
 801ed0e:	f107 0308 	add.w	r3, r7, #8
 801ed12:	4619      	mov	r1, r3
 801ed14:	4620      	mov	r0, r4
 801ed16:	f7ef f870 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ed1a:	4603      	mov	r3, r0
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d015      	beq.n	801ed4c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ed20:	463b      	mov	r3, r7
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	f103 040c 	add.w	r4, r3, #12
 801ed28:	f107 0310 	add.w	r3, r7, #16
 801ed2c:	49b2      	ldr	r1, [pc, #712]	; (801eff8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ed2e:	4618      	mov	r0, r3
 801ed30:	f7ee fc9f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ed34:	2501      	movs	r5, #1
 801ed36:	f107 0310 	add.w	r3, r7, #16
 801ed3a:	4619      	mov	r1, r3
 801ed3c:	4620      	mov	r0, r4
 801ed3e:	f7ef f85c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ed42:	4603      	mov	r3, r0
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d001      	beq.n	801ed4c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ed48:	2401      	movs	r4, #1
 801ed4a:	e000      	b.n	801ed4e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801ed4c:	2400      	movs	r4, #0
 801ed4e:	2d00      	cmp	r5, #0
 801ed50:	d004      	beq.n	801ed5c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801ed52:	f107 0310 	add.w	r3, r7, #16
 801ed56:	4618      	mov	r0, r3
 801ed58:	f7ef f843 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ed5c:	2e00      	cmp	r6, #0
 801ed5e:	d004      	beq.n	801ed6a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801ed60:	f107 0308 	add.w	r3, r7, #8
 801ed64:	4618      	mov	r0, r3
 801ed66:	f7ef f83c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ed6a:	2c00      	cmp	r4, #0
 801ed6c:	d00c      	beq.n	801ed88 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801ed6e:	1d3b      	adds	r3, r7, #4
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	699a      	ldr	r2, [r3, #24]
 801ed74:	463b      	mov	r3, r7
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	699b      	ldr	r3, [r3, #24]
 801ed7a:	429a      	cmp	r2, r3
 801ed7c:	bf0c      	ite	eq
 801ed7e:	2301      	moveq	r3, #1
 801ed80:	2300      	movne	r3, #0
 801ed82:	b2dc      	uxtb	r4, r3
 801ed84:	f000 bd60 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801ed88:	2500      	movs	r5, #0
 801ed8a:	1d3b      	adds	r3, r7, #4
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	f103 040c 	add.w	r4, r3, #12
 801ed92:	f107 0318 	add.w	r3, r7, #24
 801ed96:	4998      	ldr	r1, [pc, #608]	; (801eff8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ed98:	4618      	mov	r0, r3
 801ed9a:	f7ee fc6a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ed9e:	2601      	movs	r6, #1
 801eda0:	f107 0318 	add.w	r3, r7, #24
 801eda4:	4619      	mov	r1, r3
 801eda6:	4620      	mov	r0, r4
 801eda8:	f7ef f827 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801edac:	4603      	mov	r3, r0
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d015      	beq.n	801edde <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801edb2:	463b      	mov	r3, r7
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	f103 040c 	add.w	r4, r3, #12
 801edba:	f107 0320 	add.w	r3, r7, #32
 801edbe:	498d      	ldr	r1, [pc, #564]	; (801eff4 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801edc0:	4618      	mov	r0, r3
 801edc2:	f7ee fc56 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801edc6:	2501      	movs	r5, #1
 801edc8:	f107 0320 	add.w	r3, r7, #32
 801edcc:	4619      	mov	r1, r3
 801edce:	4620      	mov	r0, r4
 801edd0:	f7ef f813 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801edd4:	4603      	mov	r3, r0
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d001      	beq.n	801edde <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801edda:	2401      	movs	r4, #1
 801eddc:	e000      	b.n	801ede0 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801edde:	2400      	movs	r4, #0
 801ede0:	2d00      	cmp	r5, #0
 801ede2:	d004      	beq.n	801edee <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801ede4:	f107 0320 	add.w	r3, r7, #32
 801ede8:	4618      	mov	r0, r3
 801edea:	f7ee fffa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801edee:	2e00      	cmp	r6, #0
 801edf0:	d004      	beq.n	801edfc <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801edf2:	f107 0318 	add.w	r3, r7, #24
 801edf6:	4618      	mov	r0, r3
 801edf8:	f7ee fff3 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801edfc:	2c00      	cmp	r4, #0
 801edfe:	d00c      	beq.n	801ee1a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801ee00:	1d3b      	adds	r3, r7, #4
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	699a      	ldr	r2, [r3, #24]
 801ee06:	463b      	mov	r3, r7
 801ee08:	681b      	ldr	r3, [r3, #0]
 801ee0a:	699b      	ldr	r3, [r3, #24]
 801ee0c:	429a      	cmp	r2, r3
 801ee0e:	bf0c      	ite	eq
 801ee10:	2301      	moveq	r3, #1
 801ee12:	2300      	movne	r3, #0
 801ee14:	b2dc      	uxtb	r4, r3
 801ee16:	f000 bd17 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801ee1a:	2500      	movs	r5, #0
 801ee1c:	1d3b      	adds	r3, r7, #4
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	f103 040c 	add.w	r4, r3, #12
 801ee24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ee28:	4974      	ldr	r1, [pc, #464]	; (801effc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	f7ee fc21 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ee30:	2601      	movs	r6, #1
 801ee32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ee36:	4619      	mov	r1, r3
 801ee38:	4620      	mov	r0, r4
 801ee3a:	f7ee ffde 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ee3e:	4603      	mov	r3, r0
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d015      	beq.n	801ee70 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ee44:	463b      	mov	r3, r7
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	f103 040c 	add.w	r4, r3, #12
 801ee4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ee50:	4969      	ldr	r1, [pc, #420]	; (801eff8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ee52:	4618      	mov	r0, r3
 801ee54:	f7ee fc0d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ee58:	2501      	movs	r5, #1
 801ee5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ee5e:	4619      	mov	r1, r3
 801ee60:	4620      	mov	r0, r4
 801ee62:	f7ee ffca 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ee66:	4603      	mov	r3, r0
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d001      	beq.n	801ee70 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801ee6c:	2401      	movs	r4, #1
 801ee6e:	e000      	b.n	801ee72 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801ee70:	2400      	movs	r4, #0
 801ee72:	2d00      	cmp	r5, #0
 801ee74:	d004      	beq.n	801ee80 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801ee76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ee7a:	4618      	mov	r0, r3
 801ee7c:	f7ee ffb1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ee80:	2e00      	cmp	r6, #0
 801ee82:	d004      	beq.n	801ee8e <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801ee84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801ee88:	4618      	mov	r0, r3
 801ee8a:	f7ee ffaa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ee8e:	2c00      	cmp	r4, #0
 801ee90:	d012      	beq.n	801eeb8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801ee92:	463b      	mov	r3, r7
 801ee94:	681b      	ldr	r3, [r3, #0]
 801ee96:	699b      	ldr	r3, [r3, #24]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	db0a      	blt.n	801eeb2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801ee9c:	1d3b      	adds	r3, r7, #4
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	699b      	ldr	r3, [r3, #24]
 801eea2:	463a      	mov	r2, r7
 801eea4:	6812      	ldr	r2, [r2, #0]
 801eea6:	6992      	ldr	r2, [r2, #24]
 801eea8:	4293      	cmp	r3, r2
 801eeaa:	d102      	bne.n	801eeb2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801eeac:	2401      	movs	r4, #1
 801eeae:	f000 bccb 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eeb2:	2400      	movs	r4, #0
 801eeb4:	f000 bcc8 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801eeb8:	2500      	movs	r5, #0
 801eeba:	1d3b      	adds	r3, r7, #4
 801eebc:	681b      	ldr	r3, [r3, #0]
 801eebe:	f103 040c 	add.w	r4, r3, #12
 801eec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eec6:	494c      	ldr	r1, [pc, #304]	; (801eff8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801eec8:	4618      	mov	r0, r3
 801eeca:	f7ee fbd2 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801eece:	2601      	movs	r6, #1
 801eed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801eed4:	4619      	mov	r1, r3
 801eed6:	4620      	mov	r0, r4
 801eed8:	f7ee ff8f 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801eedc:	4603      	mov	r3, r0
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d015      	beq.n	801ef0e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801eee2:	463b      	mov	r3, r7
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	f103 040c 	add.w	r4, r3, #12
 801eeea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eeee:	4943      	ldr	r1, [pc, #268]	; (801effc <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801eef0:	4618      	mov	r0, r3
 801eef2:	f7ee fbbe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801eef6:	2501      	movs	r5, #1
 801eef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801eefc:	4619      	mov	r1, r3
 801eefe:	4620      	mov	r0, r4
 801ef00:	f7ee ff7b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ef04:	4603      	mov	r3, r0
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d001      	beq.n	801ef0e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801ef0a:	2401      	movs	r4, #1
 801ef0c:	e000      	b.n	801ef10 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801ef0e:	2400      	movs	r4, #0
 801ef10:	2d00      	cmp	r5, #0
 801ef12:	d004      	beq.n	801ef1e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801ef14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f7ee ff62 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ef1e:	2e00      	cmp	r6, #0
 801ef20:	d004      	beq.n	801ef2c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801ef22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ef26:	4618      	mov	r0, r3
 801ef28:	f7ee ff5b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ef2c:	2c00      	cmp	r4, #0
 801ef2e:	d012      	beq.n	801ef56 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801ef30:	1d3b      	adds	r3, r7, #4
 801ef32:	681b      	ldr	r3, [r3, #0]
 801ef34:	699b      	ldr	r3, [r3, #24]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	db0a      	blt.n	801ef50 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801ef3a:	1d3b      	adds	r3, r7, #4
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	699b      	ldr	r3, [r3, #24]
 801ef40:	463a      	mov	r2, r7
 801ef42:	6812      	ldr	r2, [r2, #0]
 801ef44:	6992      	ldr	r2, [r2, #24]
 801ef46:	4293      	cmp	r3, r2
 801ef48:	d102      	bne.n	801ef50 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801ef4a:	2401      	movs	r4, #1
 801ef4c:	f000 bc7c 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ef50:	2400      	movs	r4, #0
 801ef52:	f000 bc79 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801ef56:	2500      	movs	r5, #0
 801ef58:	1d3b      	adds	r3, r7, #4
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	f103 040c 	add.w	r4, r3, #12
 801ef60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ef64:	4926      	ldr	r1, [pc, #152]	; (801f000 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801ef66:	4618      	mov	r0, r3
 801ef68:	f7ee fb83 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ef6c:	2601      	movs	r6, #1
 801ef6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ef72:	4619      	mov	r1, r3
 801ef74:	4620      	mov	r0, r4
 801ef76:	f7ee ff40 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ef7a:	4603      	mov	r3, r0
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d015      	beq.n	801efac <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801ef80:	463b      	mov	r3, r7
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	f103 040c 	add.w	r4, r3, #12
 801ef88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ef8c:	491a      	ldr	r1, [pc, #104]	; (801eff8 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ef8e:	4618      	mov	r0, r3
 801ef90:	f7ee fb6f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801ef94:	2501      	movs	r5, #1
 801ef96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801ef9a:	4619      	mov	r1, r3
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	f7ee ff2c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801efa2:	4603      	mov	r3, r0
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d001      	beq.n	801efac <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801efa8:	2401      	movs	r4, #1
 801efaa:	e000      	b.n	801efae <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801efac:	2400      	movs	r4, #0
 801efae:	2d00      	cmp	r5, #0
 801efb0:	d004      	beq.n	801efbc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801efb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801efb6:	4618      	mov	r0, r3
 801efb8:	f7ee ff13 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801efbc:	2e00      	cmp	r6, #0
 801efbe:	d004      	beq.n	801efca <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801efc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801efc4:	4618      	mov	r0, r3
 801efc6:	f7ee ff0c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801efca:	2c00      	cmp	r4, #0
 801efcc:	d01a      	beq.n	801f004 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801efce:	463b      	mov	r3, r7
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	699b      	ldr	r3, [r3, #24]
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	db0a      	blt.n	801efee <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801efd8:	1d3b      	adds	r3, r7, #4
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	699b      	ldr	r3, [r3, #24]
 801efde:	463a      	mov	r2, r7
 801efe0:	6812      	ldr	r2, [r2, #0]
 801efe2:	6992      	ldr	r2, [r2, #24]
 801efe4:	4293      	cmp	r3, r2
 801efe6:	d102      	bne.n	801efee <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801efe8:	2401      	movs	r4, #1
 801efea:	f000 bc2d 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801efee:	2400      	movs	r4, #0
 801eff0:	f000 bc2a 	b.w	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801eff4:	08027518 	.word	0x08027518
 801eff8:	080274fc 	.word	0x080274fc
 801effc:	08027508 	.word	0x08027508
 801f000:	08027524 	.word	0x08027524
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801f004:	2500      	movs	r5, #0
 801f006:	1d3b      	adds	r3, r7, #4
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	f103 040c 	add.w	r4, r3, #12
 801f00e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f012:	49b8      	ldr	r1, [pc, #736]	; (801f2f4 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801f014:	4618      	mov	r0, r3
 801f016:	f7ee fb2c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f01a:	2601      	movs	r6, #1
 801f01c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f020:	4619      	mov	r1, r3
 801f022:	4620      	mov	r0, r4
 801f024:	f7ee fee9 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f028:	4603      	mov	r3, r0
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d015      	beq.n	801f05a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f02e:	463b      	mov	r3, r7
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	f103 040c 	add.w	r4, r3, #12
 801f036:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f03a:	49af      	ldr	r1, [pc, #700]	; (801f2f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801f03c:	4618      	mov	r0, r3
 801f03e:	f7ee fb18 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f042:	2501      	movs	r5, #1
 801f044:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f048:	4619      	mov	r1, r3
 801f04a:	4620      	mov	r0, r4
 801f04c:	f7ee fed5 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f050:	4603      	mov	r3, r0
 801f052:	2b00      	cmp	r3, #0
 801f054:	d001      	beq.n	801f05a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f056:	2401      	movs	r4, #1
 801f058:	e000      	b.n	801f05c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801f05a:	2400      	movs	r4, #0
 801f05c:	2d00      	cmp	r5, #0
 801f05e:	d004      	beq.n	801f06a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801f060:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f064:	4618      	mov	r0, r3
 801f066:	f7ee febc 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f06a:	2e00      	cmp	r6, #0
 801f06c:	d004      	beq.n	801f078 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801f06e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f072:	4618      	mov	r0, r3
 801f074:	f7ee feb5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f078:	2c00      	cmp	r4, #0
 801f07a:	d010      	beq.n	801f09e <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801f07c:	1d3b      	adds	r3, r7, #4
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	699b      	ldr	r3, [r3, #24]
 801f082:	2b00      	cmp	r3, #0
 801f084:	db09      	blt.n	801f09a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f086:	1d3b      	adds	r3, r7, #4
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	699b      	ldr	r3, [r3, #24]
 801f08c:	463a      	mov	r2, r7
 801f08e:	6812      	ldr	r2, [r2, #0]
 801f090:	6992      	ldr	r2, [r2, #24]
 801f092:	4293      	cmp	r3, r2
 801f094:	d101      	bne.n	801f09a <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f096:	2401      	movs	r4, #1
 801f098:	e3d6      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f09a:	2400      	movs	r4, #0
 801f09c:	e3d4      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801f09e:	2500      	movs	r5, #0
 801f0a0:	1d3b      	adds	r3, r7, #4
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	f103 040c 	add.w	r4, r3, #12
 801f0a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f0ac:	4993      	ldr	r1, [pc, #588]	; (801f2fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f0ae:	4618      	mov	r0, r3
 801f0b0:	f7ee fadf 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f0b4:	2601      	movs	r6, #1
 801f0b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f0ba:	4619      	mov	r1, r3
 801f0bc:	4620      	mov	r0, r4
 801f0be:	f7ee fe9c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f0c2:	4603      	mov	r3, r0
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d015      	beq.n	801f0f4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801f0c8:	463b      	mov	r3, r7
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	f103 040c 	add.w	r4, r3, #12
 801f0d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f0d4:	498a      	ldr	r1, [pc, #552]	; (801f300 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f7ee facb 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f0dc:	2501      	movs	r5, #1
 801f0de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f0e2:	4619      	mov	r1, r3
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	f7ee fe88 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f0ea:	4603      	mov	r3, r0
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d001      	beq.n	801f0f4 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801f0f0:	2401      	movs	r4, #1
 801f0f2:	e000      	b.n	801f0f6 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801f0f4:	2400      	movs	r4, #0
 801f0f6:	2d00      	cmp	r5, #0
 801f0f8:	d004      	beq.n	801f104 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801f0fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f0fe:	4618      	mov	r0, r3
 801f100:	f7ee fe6f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f104:	2e00      	cmp	r6, #0
 801f106:	d004      	beq.n	801f112 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801f108:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f10c:	4618      	mov	r0, r3
 801f10e:	f7ee fe68 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f112:	2c00      	cmp	r4, #0
 801f114:	d010      	beq.n	801f138 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801f116:	463b      	mov	r3, r7
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	699b      	ldr	r3, [r3, #24]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	db09      	blt.n	801f134 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801f120:	1d3b      	adds	r3, r7, #4
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	699b      	ldr	r3, [r3, #24]
 801f126:	463a      	mov	r2, r7
 801f128:	6812      	ldr	r2, [r2, #0]
 801f12a:	6992      	ldr	r2, [r2, #24]
 801f12c:	4293      	cmp	r3, r2
 801f12e:	d101      	bne.n	801f134 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801f130:	2401      	movs	r4, #1
 801f132:	e389      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f134:	2400      	movs	r4, #0
 801f136:	e387      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801f138:	2500      	movs	r5, #0
 801f13a:	1d3b      	adds	r3, r7, #4
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	f103 040c 	add.w	r4, r3, #12
 801f142:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f146:	496e      	ldr	r1, [pc, #440]	; (801f300 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801f148:	4618      	mov	r0, r3
 801f14a:	f7ee fa92 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f14e:	2601      	movs	r6, #1
 801f150:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f154:	4619      	mov	r1, r3
 801f156:	4620      	mov	r0, r4
 801f158:	f7ee fe4f 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f15c:	4603      	mov	r3, r0
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d015      	beq.n	801f18e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801f162:	463b      	mov	r3, r7
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	f103 040c 	add.w	r4, r3, #12
 801f16a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f16e:	4963      	ldr	r1, [pc, #396]	; (801f2fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f170:	4618      	mov	r0, r3
 801f172:	f7ee fa7e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f176:	2501      	movs	r5, #1
 801f178:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f17c:	4619      	mov	r1, r3
 801f17e:	4620      	mov	r0, r4
 801f180:	f7ee fe3b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f184:	4603      	mov	r3, r0
 801f186:	2b00      	cmp	r3, #0
 801f188:	d001      	beq.n	801f18e <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801f18a:	2401      	movs	r4, #1
 801f18c:	e000      	b.n	801f190 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801f18e:	2400      	movs	r4, #0
 801f190:	2d00      	cmp	r5, #0
 801f192:	d004      	beq.n	801f19e <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801f194:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801f198:	4618      	mov	r0, r3
 801f19a:	f7ee fe22 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f19e:	2e00      	cmp	r6, #0
 801f1a0:	d004      	beq.n	801f1ac <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801f1a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801f1a6:	4618      	mov	r0, r3
 801f1a8:	f7ee fe1b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f1ac:	2c00      	cmp	r4, #0
 801f1ae:	d010      	beq.n	801f1d2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801f1b0:	1d3b      	adds	r3, r7, #4
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	699b      	ldr	r3, [r3, #24]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	db09      	blt.n	801f1ce <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801f1ba:	1d3b      	adds	r3, r7, #4
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	699b      	ldr	r3, [r3, #24]
 801f1c0:	463a      	mov	r2, r7
 801f1c2:	6812      	ldr	r2, [r2, #0]
 801f1c4:	6992      	ldr	r2, [r2, #24]
 801f1c6:	4293      	cmp	r3, r2
 801f1c8:	d101      	bne.n	801f1ce <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801f1ca:	2401      	movs	r4, #1
 801f1cc:	e33c      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f1ce:	2400      	movs	r4, #0
 801f1d0:	e33a      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801f1d2:	2500      	movs	r5, #0
 801f1d4:	1d3b      	adds	r3, r7, #4
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	f103 040c 	add.w	r4, r3, #12
 801f1dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1e0:	4946      	ldr	r1, [pc, #280]	; (801f2fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	f7ee fa45 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f1e8:	2601      	movs	r6, #1
 801f1ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f1ee:	4619      	mov	r1, r3
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	f7ee fe02 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f1f6:	4603      	mov	r3, r0
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	d015      	beq.n	801f228 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801f1fc:	463b      	mov	r3, r7
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	f103 040c 	add.w	r4, r3, #12
 801f204:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f208:	493b      	ldr	r1, [pc, #236]	; (801f2f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7ee fa31 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f210:	2501      	movs	r5, #1
 801f212:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f216:	4619      	mov	r1, r3
 801f218:	4620      	mov	r0, r4
 801f21a:	f7ee fdee 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f21e:	4603      	mov	r3, r0
 801f220:	2b00      	cmp	r3, #0
 801f222:	d001      	beq.n	801f228 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801f224:	2401      	movs	r4, #1
 801f226:	e000      	b.n	801f22a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801f228:	2400      	movs	r4, #0
 801f22a:	2d00      	cmp	r5, #0
 801f22c:	d004      	beq.n	801f238 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801f22e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801f232:	4618      	mov	r0, r3
 801f234:	f7ee fdd5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f238:	2e00      	cmp	r6, #0
 801f23a:	d004      	beq.n	801f246 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801f23c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801f240:	4618      	mov	r0, r3
 801f242:	f7ee fdce 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f246:	2c00      	cmp	r4, #0
 801f248:	d00b      	beq.n	801f262 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801f24a:	1d3b      	adds	r3, r7, #4
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	699a      	ldr	r2, [r3, #24]
 801f250:	463b      	mov	r3, r7
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	699b      	ldr	r3, [r3, #24]
 801f256:	429a      	cmp	r2, r3
 801f258:	bf0c      	ite	eq
 801f25a:	2301      	moveq	r3, #1
 801f25c:	2300      	movne	r3, #0
 801f25e:	b2dc      	uxtb	r4, r3
 801f260:	e2f2      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801f262:	2500      	movs	r5, #0
 801f264:	1d3b      	adds	r3, r7, #4
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	f103 040c 	add.w	r4, r3, #12
 801f26c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f270:	4921      	ldr	r1, [pc, #132]	; (801f2f8 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801f272:	4618      	mov	r0, r3
 801f274:	f7ee f9fd 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f278:	2601      	movs	r6, #1
 801f27a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f27e:	4619      	mov	r1, r3
 801f280:	4620      	mov	r0, r4
 801f282:	f7ee fdba 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f286:	4603      	mov	r3, r0
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d015      	beq.n	801f2b8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801f28c:	463b      	mov	r3, r7
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f103 040c 	add.w	r4, r3, #12
 801f294:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f298:	4918      	ldr	r1, [pc, #96]	; (801f2fc <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f29a:	4618      	mov	r0, r3
 801f29c:	f7ee f9e9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f2a0:	2501      	movs	r5, #1
 801f2a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f2a6:	4619      	mov	r1, r3
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f7ee fda6 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d001      	beq.n	801f2b8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801f2b4:	2401      	movs	r4, #1
 801f2b6:	e000      	b.n	801f2ba <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801f2b8:	2400      	movs	r4, #0
 801f2ba:	2d00      	cmp	r5, #0
 801f2bc:	d004      	beq.n	801f2c8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801f2be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	f7ee fd8d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f2c8:	2e00      	cmp	r6, #0
 801f2ca:	d004      	beq.n	801f2d6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801f2cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801f2d0:	4618      	mov	r0, r3
 801f2d2:	f7ee fd86 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f2d6:	2c00      	cmp	r4, #0
 801f2d8:	d014      	beq.n	801f304 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801f2da:	1d3b      	adds	r3, r7, #4
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	699a      	ldr	r2, [r3, #24]
 801f2e0:	463b      	mov	r3, r7
 801f2e2:	681b      	ldr	r3, [r3, #0]
 801f2e4:	699b      	ldr	r3, [r3, #24]
 801f2e6:	429a      	cmp	r2, r3
 801f2e8:	bf0c      	ite	eq
 801f2ea:	2301      	moveq	r3, #1
 801f2ec:	2300      	movne	r3, #0
 801f2ee:	b2dc      	uxtb	r4, r3
 801f2f0:	e2aa      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f2f2:	bf00      	nop
 801f2f4:	080274fc 	.word	0x080274fc
 801f2f8:	08027524 	.word	0x08027524
 801f2fc:	08027508 	.word	0x08027508
 801f300:	08027518 	.word	0x08027518
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801f304:	2500      	movs	r5, #0
 801f306:	1d3b      	adds	r3, r7, #4
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	f103 040c 	add.w	r4, r3, #12
 801f30e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f312:	49ae      	ldr	r1, [pc, #696]	; (801f5cc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801f314:	4618      	mov	r0, r3
 801f316:	f7ee f9ac 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f31a:	2601      	movs	r6, #1
 801f31c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f320:	4619      	mov	r1, r3
 801f322:	4620      	mov	r0, r4
 801f324:	f7ee fd69 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f328:	4603      	mov	r3, r0
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d015      	beq.n	801f35a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801f32e:	463b      	mov	r3, r7
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f103 040c 	add.w	r4, r3, #12
 801f336:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f33a:	49a5      	ldr	r1, [pc, #660]	; (801f5d0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801f33c:	4618      	mov	r0, r3
 801f33e:	f7ee f998 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f342:	2501      	movs	r5, #1
 801f344:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f348:	4619      	mov	r1, r3
 801f34a:	4620      	mov	r0, r4
 801f34c:	f7ee fd55 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f350:	4603      	mov	r3, r0
 801f352:	2b00      	cmp	r3, #0
 801f354:	d001      	beq.n	801f35a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801f356:	2401      	movs	r4, #1
 801f358:	e000      	b.n	801f35c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801f35a:	2400      	movs	r4, #0
 801f35c:	2d00      	cmp	r5, #0
 801f35e:	d004      	beq.n	801f36a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801f360:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801f364:	4618      	mov	r0, r3
 801f366:	f7ee fd3c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f36a:	2e00      	cmp	r6, #0
 801f36c:	d004      	beq.n	801f378 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801f36e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801f372:	4618      	mov	r0, r3
 801f374:	f7ee fd35 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f378:	2c00      	cmp	r4, #0
 801f37a:	d010      	beq.n	801f39e <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801f37c:	1d3b      	adds	r3, r7, #4
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	699b      	ldr	r3, [r3, #24]
 801f382:	2b00      	cmp	r3, #0
 801f384:	db09      	blt.n	801f39a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801f386:	1d3b      	adds	r3, r7, #4
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	699b      	ldr	r3, [r3, #24]
 801f38c:	463a      	mov	r2, r7
 801f38e:	6812      	ldr	r2, [r2, #0]
 801f390:	6992      	ldr	r2, [r2, #24]
 801f392:	4293      	cmp	r3, r2
 801f394:	d101      	bne.n	801f39a <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801f396:	2401      	movs	r4, #1
 801f398:	e256      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f39a:	2400      	movs	r4, #0
 801f39c:	e254      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801f39e:	2500      	movs	r5, #0
 801f3a0:	1d3b      	adds	r3, r7, #4
 801f3a2:	681b      	ldr	r3, [r3, #0]
 801f3a4:	f103 040c 	add.w	r4, r3, #12
 801f3a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f3ac:	4988      	ldr	r1, [pc, #544]	; (801f5d0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801f3ae:	4618      	mov	r0, r3
 801f3b0:	f7ee f95f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f3b4:	2601      	movs	r6, #1
 801f3b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f3ba:	4619      	mov	r1, r3
 801f3bc:	4620      	mov	r0, r4
 801f3be:	f7ee fd1c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f3c2:	4603      	mov	r3, r0
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d015      	beq.n	801f3f4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801f3c8:	463b      	mov	r3, r7
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	f103 040c 	add.w	r4, r3, #12
 801f3d0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f3d4:	497d      	ldr	r1, [pc, #500]	; (801f5cc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	f7ee f94b 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f3dc:	2501      	movs	r5, #1
 801f3de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f3e2:	4619      	mov	r1, r3
 801f3e4:	4620      	mov	r0, r4
 801f3e6:	f7ee fd08 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f3ea:	4603      	mov	r3, r0
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d001      	beq.n	801f3f4 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801f3f0:	2401      	movs	r4, #1
 801f3f2:	e000      	b.n	801f3f6 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801f3f4:	2400      	movs	r4, #0
 801f3f6:	2d00      	cmp	r5, #0
 801f3f8:	d004      	beq.n	801f404 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801f3fa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801f3fe:	4618      	mov	r0, r3
 801f400:	f7ee fcef 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f404:	2e00      	cmp	r6, #0
 801f406:	d004      	beq.n	801f412 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801f408:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801f40c:	4618      	mov	r0, r3
 801f40e:	f7ee fce8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f412:	2c00      	cmp	r4, #0
 801f414:	d010      	beq.n	801f438 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801f416:	463b      	mov	r3, r7
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	699b      	ldr	r3, [r3, #24]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	db09      	blt.n	801f434 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801f420:	1d3b      	adds	r3, r7, #4
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	699b      	ldr	r3, [r3, #24]
 801f426:	463a      	mov	r2, r7
 801f428:	6812      	ldr	r2, [r2, #0]
 801f42a:	6992      	ldr	r2, [r2, #24]
 801f42c:	4293      	cmp	r3, r2
 801f42e:	d101      	bne.n	801f434 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801f430:	2401      	movs	r4, #1
 801f432:	e209      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f434:	2400      	movs	r4, #0
 801f436:	e207      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801f438:	1d3b      	adds	r3, r7, #4
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	f103 020c 	add.w	r2, r3, #12
 801f440:	463b      	mov	r3, r7
 801f442:	681b      	ldr	r3, [r3, #0]
 801f444:	330c      	adds	r3, #12
 801f446:	4619      	mov	r1, r3
 801f448:	4610      	mov	r0, r2
 801f44a:	f7ee fd1b 	bl	800de84 <_ZneRK12SimpleStringS1_>
 801f44e:	4603      	mov	r3, r0
 801f450:	2b00      	cmp	r3, #0
 801f452:	d001      	beq.n	801f458 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801f454:	2400      	movs	r4, #0
 801f456:	e1f7      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801f458:	1d3b      	adds	r3, r7, #4
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	f103 040c 	add.w	r4, r3, #12
 801f460:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f464:	495b      	ldr	r1, [pc, #364]	; (801f5d4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801f466:	4618      	mov	r0, r3
 801f468:	f7ee f903 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f46c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f470:	4619      	mov	r1, r3
 801f472:	4620      	mov	r0, r4
 801f474:	f7ee fcc1 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f478:	4603      	mov	r3, r0
 801f47a:	461c      	mov	r4, r3
 801f47c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801f480:	4618      	mov	r0, r3
 801f482:	f7ee fcae 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f486:	2c00      	cmp	r4, #0
 801f488:	d00b      	beq.n	801f4a2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801f48a:	1d3b      	adds	r3, r7, #4
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	7e1a      	ldrb	r2, [r3, #24]
 801f490:	463b      	mov	r3, r7
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	7e1b      	ldrb	r3, [r3, #24]
 801f496:	429a      	cmp	r2, r3
 801f498:	bf0c      	ite	eq
 801f49a:	2301      	moveq	r3, #1
 801f49c:	2300      	movne	r3, #0
 801f49e:	b2dc      	uxtb	r4, r3
 801f4a0:	e1d2      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801f4a2:	1d3b      	adds	r3, r7, #4
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	f103 040c 	add.w	r4, r3, #12
 801f4aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f4ae:	494a      	ldr	r1, [pc, #296]	; (801f5d8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	f7ee f8de 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f4b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f4ba:	4619      	mov	r1, r3
 801f4bc:	4620      	mov	r0, r4
 801f4be:	f7ee fc9c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f4c2:	4603      	mov	r3, r0
 801f4c4:	461c      	mov	r4, r3
 801f4c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	f7ee fc89 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f4d0:	2c00      	cmp	r4, #0
 801f4d2:	d00b      	beq.n	801f4ec <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801f4d4:	1d3b      	adds	r3, r7, #4
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	699a      	ldr	r2, [r3, #24]
 801f4da:	463b      	mov	r3, r7
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	699b      	ldr	r3, [r3, #24]
 801f4e0:	429a      	cmp	r2, r3
 801f4e2:	bf0c      	ite	eq
 801f4e4:	2301      	moveq	r3, #1
 801f4e6:	2300      	movne	r3, #0
 801f4e8:	b2dc      	uxtb	r4, r3
 801f4ea:	e1ad      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801f4ec:	1d3b      	adds	r3, r7, #4
 801f4ee:	681b      	ldr	r3, [r3, #0]
 801f4f0:	f103 040c 	add.w	r4, r3, #12
 801f4f4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f4f8:	4938      	ldr	r1, [pc, #224]	; (801f5dc <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801f4fa:	4618      	mov	r0, r3
 801f4fc:	f7ee f8b9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f500:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f504:	4619      	mov	r1, r3
 801f506:	4620      	mov	r0, r4
 801f508:	f7ee fc77 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f50c:	4603      	mov	r3, r0
 801f50e:	461c      	mov	r4, r3
 801f510:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801f514:	4618      	mov	r0, r3
 801f516:	f7ee fc64 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f51a:	2c00      	cmp	r4, #0
 801f51c:	d00b      	beq.n	801f536 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801f51e:	1d3b      	adds	r3, r7, #4
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	699a      	ldr	r2, [r3, #24]
 801f524:	463b      	mov	r3, r7
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	699b      	ldr	r3, [r3, #24]
 801f52a:	429a      	cmp	r2, r3
 801f52c:	bf0c      	ite	eq
 801f52e:	2301      	moveq	r3, #1
 801f530:	2300      	movne	r3, #0
 801f532:	b2dc      	uxtb	r4, r3
 801f534:	e188      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801f536:	1d3b      	adds	r3, r7, #4
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	f103 040c 	add.w	r4, r3, #12
 801f53e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f542:	4922      	ldr	r1, [pc, #136]	; (801f5cc <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801f544:	4618      	mov	r0, r3
 801f546:	f7ee f894 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f54a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f54e:	4619      	mov	r1, r3
 801f550:	4620      	mov	r0, r4
 801f552:	f7ee fc52 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f556:	4603      	mov	r3, r0
 801f558:	461c      	mov	r4, r3
 801f55a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801f55e:	4618      	mov	r0, r3
 801f560:	f7ee fc3f 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f564:	2c00      	cmp	r4, #0
 801f566:	d00b      	beq.n	801f580 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801f568:	1d3b      	adds	r3, r7, #4
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	699a      	ldr	r2, [r3, #24]
 801f56e:	463b      	mov	r3, r7
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	699b      	ldr	r3, [r3, #24]
 801f574:	429a      	cmp	r2, r3
 801f576:	bf0c      	ite	eq
 801f578:	2301      	moveq	r3, #1
 801f57a:	2300      	movne	r3, #0
 801f57c:	b2dc      	uxtb	r4, r3
 801f57e:	e163      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801f580:	1d3b      	adds	r3, r7, #4
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	f103 040c 	add.w	r4, r3, #12
 801f588:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f58c:	4910      	ldr	r1, [pc, #64]	; (801f5d0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801f58e:	4618      	mov	r0, r3
 801f590:	f7ee f86f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f594:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f598:	4619      	mov	r1, r3
 801f59a:	4620      	mov	r0, r4
 801f59c:	f7ee fc2d 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f5a0:	4603      	mov	r3, r0
 801f5a2:	461c      	mov	r4, r3
 801f5a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801f5a8:	4618      	mov	r0, r3
 801f5aa:	f7ee fc1a 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f5ae:	2c00      	cmp	r4, #0
 801f5b0:	d016      	beq.n	801f5e0 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801f5b2:	1d3b      	adds	r3, r7, #4
 801f5b4:	681b      	ldr	r3, [r3, #0]
 801f5b6:	699a      	ldr	r2, [r3, #24]
 801f5b8:	463b      	mov	r3, r7
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	699b      	ldr	r3, [r3, #24]
 801f5be:	429a      	cmp	r2, r3
 801f5c0:	bf0c      	ite	eq
 801f5c2:	2301      	moveq	r3, #1
 801f5c4:	2300      	movne	r3, #0
 801f5c6:	b2dc      	uxtb	r4, r3
 801f5c8:	e13e      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f5ca:	bf00      	nop
 801f5cc:	08027518 	.word	0x08027518
 801f5d0:	08027524 	.word	0x08027524
 801f5d4:	08027500 	.word	0x08027500
 801f5d8:	080274fc 	.word	0x080274fc
 801f5dc:	08027508 	.word	0x08027508
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801f5e0:	1d3b      	adds	r3, r7, #4
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	f103 040c 	add.w	r4, r3, #12
 801f5e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f5ec:	4999      	ldr	r1, [pc, #612]	; (801f854 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801f5ee:	4618      	mov	r0, r3
 801f5f0:	f7ee f83f 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f5f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f5f8:	4619      	mov	r1, r3
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f7ee fbfd 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f600:	4603      	mov	r3, r0
 801f602:	461c      	mov	r4, r3
 801f604:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801f608:	4618      	mov	r0, r3
 801f60a:	f7ee fbea 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f60e:	2c00      	cmp	r4, #0
 801f610:	d026      	beq.n	801f660 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801f612:	1d3b      	adds	r3, r7, #4
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	699a      	ldr	r2, [r3, #24]
 801f618:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f61c:	4611      	mov	r1, r2
 801f61e:	4618      	mov	r0, r3
 801f620:	f7ee f827 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f624:	463b      	mov	r3, r7
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	699a      	ldr	r2, [r3, #24]
 801f62a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f62e:	4611      	mov	r1, r2
 801f630:	4618      	mov	r0, r3
 801f632:	f7ee f81e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f636:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801f63a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f63e:	4611      	mov	r1, r2
 801f640:	4618      	mov	r0, r3
 801f642:	f7ee fbda 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f646:	4603      	mov	r3, r0
 801f648:	461c      	mov	r4, r3
 801f64a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801f64e:	4618      	mov	r0, r3
 801f650:	f7ee fbc7 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f654:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801f658:	4618      	mov	r0, r3
 801f65a:	f7ee fbc2 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f65e:	e0f3      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801f660:	1d3b      	adds	r3, r7, #4
 801f662:	681b      	ldr	r3, [r3, #0]
 801f664:	f103 040c 	add.w	r4, r3, #12
 801f668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f66c:	497a      	ldr	r1, [pc, #488]	; (801f858 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801f66e:	4618      	mov	r0, r3
 801f670:	f7ed ffff 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f678:	4619      	mov	r1, r3
 801f67a:	4620      	mov	r0, r4
 801f67c:	f7ee fbbd 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f680:	4603      	mov	r3, r0
 801f682:	461c      	mov	r4, r3
 801f684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801f688:	4618      	mov	r0, r3
 801f68a:	f7ee fbaa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f68e:	2c00      	cmp	r4, #0
 801f690:	d00b      	beq.n	801f6aa <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801f692:	1d3b      	adds	r3, r7, #4
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	699a      	ldr	r2, [r3, #24]
 801f698:	463b      	mov	r3, r7
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	699b      	ldr	r3, [r3, #24]
 801f69e:	429a      	cmp	r2, r3
 801f6a0:	bf0c      	ite	eq
 801f6a2:	2301      	moveq	r3, #1
 801f6a4:	2300      	movne	r3, #0
 801f6a6:	b2dc      	uxtb	r4, r3
 801f6a8:	e0ce      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801f6aa:	1d3b      	adds	r3, r7, #4
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	f103 040c 	add.w	r4, r3, #12
 801f6b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f6b6:	4969      	ldr	r1, [pc, #420]	; (801f85c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	f7ed ffda 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f6be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f6c2:	4619      	mov	r1, r3
 801f6c4:	4620      	mov	r0, r4
 801f6c6:	f7ee fb98 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f6ca:	4603      	mov	r3, r0
 801f6cc:	461c      	mov	r4, r3
 801f6ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	f7ee fb85 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f6d8:	2c00      	cmp	r4, #0
 801f6da:	d00b      	beq.n	801f6f4 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801f6dc:	1d3b      	adds	r3, r7, #4
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	699a      	ldr	r2, [r3, #24]
 801f6e2:	463b      	mov	r3, r7
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	699b      	ldr	r3, [r3, #24]
 801f6e8:	429a      	cmp	r2, r3
 801f6ea:	bf0c      	ite	eq
 801f6ec:	2301      	moveq	r3, #1
 801f6ee:	2300      	movne	r3, #0
 801f6f0:	b2dc      	uxtb	r4, r3
 801f6f2:	e0a9      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801f6f4:	1d3b      	adds	r3, r7, #4
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	f103 040c 	add.w	r4, r3, #12
 801f6fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f700:	4957      	ldr	r1, [pc, #348]	; (801f860 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801f702:	4618      	mov	r0, r3
 801f704:	f7ed ffb5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f708:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f70c:	4619      	mov	r1, r3
 801f70e:	4620      	mov	r0, r4
 801f710:	f7ee fb73 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f714:	4603      	mov	r3, r0
 801f716:	461c      	mov	r4, r3
 801f718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801f71c:	4618      	mov	r0, r3
 801f71e:	f7ee fb60 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f722:	2c00      	cmp	r4, #0
 801f724:	d00b      	beq.n	801f73e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801f726:	1d3b      	adds	r3, r7, #4
 801f728:	681b      	ldr	r3, [r3, #0]
 801f72a:	699a      	ldr	r2, [r3, #24]
 801f72c:	463b      	mov	r3, r7
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	699b      	ldr	r3, [r3, #24]
 801f732:	429a      	cmp	r2, r3
 801f734:	bf0c      	ite	eq
 801f736:	2301      	moveq	r3, #1
 801f738:	2300      	movne	r3, #0
 801f73a:	b2dc      	uxtb	r4, r3
 801f73c:	e084      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801f73e:	1d3b      	adds	r3, r7, #4
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	f103 040c 	add.w	r4, r3, #12
 801f746:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f74a:	4946      	ldr	r1, [pc, #280]	; (801f864 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801f74c:	4618      	mov	r0, r3
 801f74e:	f7ed ff90 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f752:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f756:	4619      	mov	r1, r3
 801f758:	4620      	mov	r0, r4
 801f75a:	f7ee fb4e 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f75e:	4603      	mov	r3, r0
 801f760:	461c      	mov	r4, r3
 801f762:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801f766:	4618      	mov	r0, r3
 801f768:	f7ee fb3b 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f76c:	2c00      	cmp	r4, #0
 801f76e:	d01c      	beq.n	801f7aa <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801f770:	1d3b      	adds	r3, r7, #4
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	ed93 7b06 	vldr	d7, [r3, #24]
 801f778:	463b      	mov	r3, r7
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	ed93 6b06 	vldr	d6, [r3, #24]
 801f780:	1d3b      	adds	r3, r7, #4
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	ed93 5b08 	vldr	d5, [r3, #32]
 801f788:	eeb0 2a45 	vmov.f32	s4, s10
 801f78c:	eef0 2a65 	vmov.f32	s5, s11
 801f790:	eeb0 1a46 	vmov.f32	s2, s12
 801f794:	eef0 1a66 	vmov.f32	s3, s13
 801f798:	eeb0 0a47 	vmov.f32	s0, s14
 801f79c:	eef0 0a67 	vmov.f32	s1, s15
 801f7a0:	f7f3 fe1a 	bl	80133d8 <_Z13doubles_equalddd>
 801f7a4:	4603      	mov	r3, r0
 801f7a6:	461c      	mov	r4, r3
 801f7a8:	e04e      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801f7aa:	1d3b      	adds	r3, r7, #4
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	f103 040c 	add.w	r4, r3, #12
 801f7b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f7b6:	492c      	ldr	r1, [pc, #176]	; (801f868 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801f7b8:	4618      	mov	r0, r3
 801f7ba:	f7ed ff5a 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f7be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f7c2:	4619      	mov	r1, r3
 801f7c4:	4620      	mov	r0, r4
 801f7c6:	f7ee fb18 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f7ca:	4603      	mov	r3, r0
 801f7cc:	461c      	mov	r4, r3
 801f7ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801f7d2:	4618      	mov	r0, r3
 801f7d4:	f7ee fb05 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f7d8:	2c00      	cmp	r4, #0
 801f7da:	d01c      	beq.n	801f816 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801f7dc:	1d3b      	adds	r3, r7, #4
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f7e2:	463b      	mov	r3, r7
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f7e8:	429a      	cmp	r2, r3
 801f7ea:	d001      	beq.n	801f7f0 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801f7ec:	2400      	movs	r4, #0
 801f7ee:	e02b      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801f7f0:	1d3b      	adds	r3, r7, #4
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	6998      	ldr	r0, [r3, #24]
 801f7f6:	463b      	mov	r3, r7
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	6999      	ldr	r1, [r3, #24]
 801f7fc:	1d3b      	adds	r3, r7, #4
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f802:	461a      	mov	r2, r3
 801f804:	f7ed fe54 	bl	800d4b0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801f808:	4603      	mov	r3, r0
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	bf0c      	ite	eq
 801f80e:	2301      	moveq	r3, #1
 801f810:	2300      	movne	r3, #0
 801f812:	b2dc      	uxtb	r4, r3
 801f814:	e018      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801f816:	1d3b      	adds	r3, r7, #4
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d012      	beq.n	801f846 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801f820:	1d3b      	adds	r3, r7, #4
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801f826:	1d3b      	adds	r3, r7, #4
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f82c:	681b      	ldr	r3, [r3, #0]
 801f82e:	3308      	adds	r3, #8
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	1d3a      	adds	r2, r7, #4
 801f834:	6812      	ldr	r2, [r2, #0]
 801f836:	6991      	ldr	r1, [r2, #24]
 801f838:	463a      	mov	r2, r7
 801f83a:	6812      	ldr	r2, [r2, #0]
 801f83c:	6992      	ldr	r2, [r2, #24]
 801f83e:	4798      	blx	r3
 801f840:	4603      	mov	r3, r0
 801f842:	461c      	mov	r4, r3
 801f844:	e000      	b.n	801f848 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801f846:	2400      	movs	r4, #0
 801f848:	4623      	mov	r3, r4
}
 801f84a:	4618      	mov	r0, r3
 801f84c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801f850:	46bd      	mov	sp, r7
 801f852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f854:	080275c8 	.word	0x080275c8
 801f858:	080275a8 	.word	0x080275a8
 801f85c:	080275b0 	.word	0x080275b0
 801f860:	080275bc 	.word	0x080275bc
 801f864:	080275a0 	.word	0x080275a0
 801f868:	080275d4 	.word	0x080275d4

0801f86c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801f86c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f86e:	b087      	sub	sp, #28
 801f870:	af00      	add	r7, sp, #0
 801f872:	6078      	str	r0, [r7, #4]
 801f874:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	f103 020c 	add.w	r2, r3, #12
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	330c      	adds	r3, #12
 801f880:	4619      	mov	r1, r3
 801f882:	4610      	mov	r0, r2
 801f884:	f7ee fab9 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f888:	4603      	mov	r3, r0
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d001      	beq.n	801f892 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801f88e:	2301      	movs	r3, #1
 801f890:	e03c      	b.n	801f90c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801f892:	2500      	movs	r5, #0
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	f103 040c 	add.w	r4, r3, #12
 801f89a:	f107 0308 	add.w	r3, r7, #8
 801f89e:	491d      	ldr	r1, [pc, #116]	; (801f914 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	f7ed fee6 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f8a6:	2601      	movs	r6, #1
 801f8a8:	f107 0308 	add.w	r3, r7, #8
 801f8ac:	4619      	mov	r1, r3
 801f8ae:	4620      	mov	r0, r4
 801f8b0:	f7ee faa3 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f8b4:	4603      	mov	r3, r0
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d014      	beq.n	801f8e4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f8ba:	683b      	ldr	r3, [r7, #0]
 801f8bc:	f103 040c 	add.w	r4, r3, #12
 801f8c0:	f107 0310 	add.w	r3, r7, #16
 801f8c4:	4914      	ldr	r1, [pc, #80]	; (801f918 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	f7ed fed3 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f8cc:	2501      	movs	r5, #1
 801f8ce:	f107 0310 	add.w	r3, r7, #16
 801f8d2:	4619      	mov	r1, r3
 801f8d4:	4620      	mov	r0, r4
 801f8d6:	f7ee fa90 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f8da:	4603      	mov	r3, r0
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d001      	beq.n	801f8e4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801f8e0:	2401      	movs	r4, #1
 801f8e2:	e000      	b.n	801f8e6 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801f8e4:	2400      	movs	r4, #0
 801f8e6:	2d00      	cmp	r5, #0
 801f8e8:	d004      	beq.n	801f8f4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801f8ea:	f107 0310 	add.w	r3, r7, #16
 801f8ee:	4618      	mov	r0, r3
 801f8f0:	f7ee fa77 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f8f4:	2e00      	cmp	r6, #0
 801f8f6:	d004      	beq.n	801f902 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801f8f8:	f107 0308 	add.w	r3, r7, #8
 801f8fc:	4618      	mov	r0, r3
 801f8fe:	f7ee fa70 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f902:	2c00      	cmp	r4, #0
 801f904:	d001      	beq.n	801f90a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801f906:	2301      	movs	r3, #1
 801f908:	e000      	b.n	801f90c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801f90a:	2300      	movs	r3, #0
}
 801f90c:	4618      	mov	r0, r3
 801f90e:	371c      	adds	r7, #28
 801f910:	46bd      	mov	sp, r7
 801f912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f914:	080275b0 	.word	0x080275b0
 801f918:	080275a8 	.word	0x080275a8

0801f91c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801f91c:	b590      	push	{r4, r7, lr}
 801f91e:	b0b9      	sub	sp, #228	; 0xe4
 801f920:	af00      	add	r7, sp, #0
 801f922:	6078      	str	r0, [r7, #4]
 801f924:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	f103 040c 	add.w	r4, r3, #12
 801f92c:	f107 0308 	add.w	r3, r7, #8
 801f930:	49d4      	ldr	r1, [pc, #848]	; (801fc84 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801f932:	4618      	mov	r0, r3
 801f934:	f7ed fe9d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f938:	f107 0308 	add.w	r3, r7, #8
 801f93c:	4619      	mov	r1, r3
 801f93e:	4620      	mov	r0, r4
 801f940:	f7ee fa5b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f944:	4603      	mov	r3, r0
 801f946:	461c      	mov	r4, r3
 801f948:	f107 0308 	add.w	r3, r7, #8
 801f94c:	4618      	mov	r0, r3
 801f94e:	f7ee fa48 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f952:	2c00      	cmp	r4, #0
 801f954:	d007      	beq.n	801f966 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801f956:	683b      	ldr	r3, [r7, #0]
 801f958:	7e1a      	ldrb	r2, [r3, #24]
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	4611      	mov	r1, r2
 801f95e:	4618      	mov	r0, r3
 801f960:	f7ee fcb0 	bl	800e2c4 <_Z10StringFromb>
 801f964:	e23f      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801f966:	683b      	ldr	r3, [r7, #0]
 801f968:	f103 040c 	add.w	r4, r3, #12
 801f96c:	f107 0310 	add.w	r3, r7, #16
 801f970:	49c5      	ldr	r1, [pc, #788]	; (801fc88 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801f972:	4618      	mov	r0, r3
 801f974:	f7ed fe7d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f978:	f107 0310 	add.w	r3, r7, #16
 801f97c:	4619      	mov	r1, r3
 801f97e:	4620      	mov	r0, r4
 801f980:	f7ee fa3b 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801f984:	4603      	mov	r3, r0
 801f986:	461c      	mov	r4, r3
 801f988:	f107 0310 	add.w	r3, r7, #16
 801f98c:	4618      	mov	r0, r3
 801f98e:	f7ee fa28 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f992:	2c00      	cmp	r4, #0
 801f994:	d03b      	beq.n	801fa0e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801f996:	683b      	ldr	r3, [r7, #0]
 801f998:	699a      	ldr	r2, [r3, #24]
 801f99a:	f107 0320 	add.w	r3, r7, #32
 801f99e:	4611      	mov	r1, r2
 801f9a0:	4618      	mov	r0, r3
 801f9a2:	f7ee fce5 	bl	800e370 <_Z10StringFromi>
 801f9a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f9aa:	49b8      	ldr	r1, [pc, #736]	; (801fc8c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7ed fe60 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801f9b2:	f107 0318 	add.w	r3, r7, #24
 801f9b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f9ba:	f107 0120 	add.w	r1, r7, #32
 801f9be:	4618      	mov	r0, r3
 801f9c0:	f7ee fa71 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801f9c4:	683b      	ldr	r3, [r7, #0]
 801f9c6:	699a      	ldr	r2, [r3, #24]
 801f9c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f9cc:	4611      	mov	r1, r2
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7ee fdbe 	bl	800e550 <_Z30BracketsFormattedHexStringFromi>
 801f9d4:	687b      	ldr	r3, [r7, #4]
 801f9d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f9da:	f107 0118 	add.w	r1, r7, #24
 801f9de:	4618      	mov	r0, r3
 801f9e0:	f7ee fa61 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801f9e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	f7ee f9fa 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f9ee:	f107 0318 	add.w	r3, r7, #24
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	f7ee f9f5 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801f9f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f9fc:	4618      	mov	r0, r3
 801f9fe:	f7ee f9f0 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fa02:	f107 0320 	add.w	r3, r7, #32
 801fa06:	4618      	mov	r0, r3
 801fa08:	f7ee f9eb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fa0c:	e1eb      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801fa0e:	683b      	ldr	r3, [r7, #0]
 801fa10:	f103 040c 	add.w	r4, r3, #12
 801fa14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801fa18:	499d      	ldr	r1, [pc, #628]	; (801fc90 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	f7ed fe29 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fa20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801fa24:	4619      	mov	r1, r3
 801fa26:	4620      	mov	r0, r4
 801fa28:	f7ee f9e7 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fa2c:	4603      	mov	r3, r0
 801fa2e:	461c      	mov	r4, r3
 801fa30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801fa34:	4618      	mov	r0, r3
 801fa36:	f7ee f9d4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fa3a:	2c00      	cmp	r4, #0
 801fa3c:	d03b      	beq.n	801fab6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801fa3e:	683b      	ldr	r3, [r7, #0]
 801fa40:	699a      	ldr	r2, [r3, #24]
 801fa42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801fa46:	4611      	mov	r1, r2
 801fa48:	4618      	mov	r0, r3
 801fa4a:	f7ee fef9 	bl	800e840 <_Z10StringFromj>
 801fa4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801fa52:	498e      	ldr	r1, [pc, #568]	; (801fc8c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801fa54:	4618      	mov	r0, r3
 801fa56:	f7ed fe0c 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fa5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fa5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801fa62:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801fa66:	4618      	mov	r0, r3
 801fa68:	f7ee fa1d 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fa6c:	683b      	ldr	r3, [r7, #0]
 801fa6e:	699a      	ldr	r2, [r3, #24]
 801fa70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801fa74:	4611      	mov	r1, r2
 801fa76:	4618      	mov	r0, r3
 801fa78:	f7ee fd86 	bl	800e588 <_Z30BracketsFormattedHexStringFromj>
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801fa82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801fa86:	4618      	mov	r0, r3
 801fa88:	f7ee fa0d 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fa8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801fa90:	4618      	mov	r0, r3
 801fa92:	f7ee f9a6 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fa96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fa9a:	4618      	mov	r0, r3
 801fa9c:	f7ee f9a1 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801faa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801faa4:	4618      	mov	r0, r3
 801faa6:	f7ee f99c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801faaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801faae:	4618      	mov	r0, r3
 801fab0:	f7ee f997 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fab4:	e197      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801fab6:	683b      	ldr	r3, [r7, #0]
 801fab8:	f103 040c 	add.w	r4, r3, #12
 801fabc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fac0:	4974      	ldr	r1, [pc, #464]	; (801fc94 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801fac2:	4618      	mov	r0, r3
 801fac4:	f7ed fdd5 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fac8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801facc:	4619      	mov	r1, r3
 801face:	4620      	mov	r0, r4
 801fad0:	f7ee f993 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fad4:	4603      	mov	r3, r0
 801fad6:	461c      	mov	r4, r3
 801fad8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801fadc:	4618      	mov	r0, r3
 801fade:	f7ee f980 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fae2:	2c00      	cmp	r4, #0
 801fae4:	d03b      	beq.n	801fb5e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801fae6:	683b      	ldr	r3, [r7, #0]
 801fae8:	699a      	ldr	r2, [r3, #24]
 801faea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801faee:	4611      	mov	r1, r2
 801faf0:	4618      	mov	r0, r3
 801faf2:	f7ee fc4f 	bl	800e394 <_Z10StringFroml>
 801faf6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801fafa:	4964      	ldr	r1, [pc, #400]	; (801fc8c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801fafc:	4618      	mov	r0, r3
 801fafe:	f7ed fdb8 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fb02:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fb06:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801fb0a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801fb0e:	4618      	mov	r0, r3
 801fb10:	f7ee f9c9 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fb14:	683b      	ldr	r3, [r7, #0]
 801fb16:	699a      	ldr	r2, [r3, #24]
 801fb18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801fb1c:	4611      	mov	r1, r2
 801fb1e:	4618      	mov	r0, r3
 801fb20:	f7ee fd4e 	bl	800e5c0 <_Z30BracketsFormattedHexStringFroml>
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801fb2a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801fb2e:	4618      	mov	r0, r3
 801fb30:	f7ee f9b9 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fb34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801fb38:	4618      	mov	r0, r3
 801fb3a:	f7ee f952 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fb3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fb42:	4618      	mov	r0, r3
 801fb44:	f7ee f94d 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fb48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f7ee f948 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fb52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fb56:	4618      	mov	r0, r3
 801fb58:	f7ee f943 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fb5c:	e143      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	f103 040c 	add.w	r4, r3, #12
 801fb64:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb68:	494b      	ldr	r1, [pc, #300]	; (801fc98 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801fb6a:	4618      	mov	r0, r3
 801fb6c:	f7ed fd81 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fb70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb74:	4619      	mov	r1, r3
 801fb76:	4620      	mov	r0, r4
 801fb78:	f7ee f93f 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fb7c:	4603      	mov	r3, r0
 801fb7e:	461c      	mov	r4, r3
 801fb80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb84:	4618      	mov	r0, r3
 801fb86:	f7ee f92c 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fb8a:	2c00      	cmp	r4, #0
 801fb8c:	d03b      	beq.n	801fc06 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801fb8e:	683b      	ldr	r3, [r7, #0]
 801fb90:	699a      	ldr	r2, [r3, #24]
 801fb92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fb96:	4611      	mov	r1, r2
 801fb98:	4618      	mov	r0, r3
 801fb9a:	f7ee fe63 	bl	800e864 <_Z10StringFromm>
 801fb9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fba2:	493a      	ldr	r1, [pc, #232]	; (801fc8c <_ZNK14MockNamedValue8toStringEv+0x370>)
 801fba4:	4618      	mov	r0, r3
 801fba6:	f7ed fd64 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fbaa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fbae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801fbb2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801fbb6:	4618      	mov	r0, r3
 801fbb8:	f7ee f975 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fbbc:	683b      	ldr	r3, [r7, #0]
 801fbbe:	699a      	ldr	r2, [r3, #24]
 801fbc0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fbc4:	4611      	mov	r1, r2
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	f7ee fd16 	bl	800e5f8 <_Z30BracketsFormattedHexStringFromm>
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801fbd2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f7ee f965 	bl	800dea6 <_ZNK12SimpleStringplERKS_>
 801fbdc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fbe0:	4618      	mov	r0, r3
 801fbe2:	f7ee f8fe 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fbe6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fbea:	4618      	mov	r0, r3
 801fbec:	f7ee f8f9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fbf0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	f7ee f8f4 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fbfa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fbfe:	4618      	mov	r0, r3
 801fc00:	f7ee f8ef 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fc04:	e0ef      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801fc06:	683b      	ldr	r3, [r7, #0]
 801fc08:	f103 040c 	add.w	r4, r3, #12
 801fc0c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc10:	4922      	ldr	r1, [pc, #136]	; (801fc9c <_ZNK14MockNamedValue8toStringEv+0x380>)
 801fc12:	4618      	mov	r0, r3
 801fc14:	f7ed fd2d 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fc18:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc1c:	4619      	mov	r1, r3
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f7ee f8eb 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fc24:	4603      	mov	r3, r0
 801fc26:	461c      	mov	r4, r3
 801fc28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	f7ee f8d8 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fc32:	2c00      	cmp	r4, #0
 801fc34:	d006      	beq.n	801fc44 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801fc36:	683b      	ldr	r3, [r7, #0]
 801fc38:	699b      	ldr	r3, [r3, #24]
 801fc3a:	4619      	mov	r1, r3
 801fc3c:	6878      	ldr	r0, [r7, #4]
 801fc3e:	f7ed fd18 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fc42:	e0d0      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801fc44:	683b      	ldr	r3, [r7, #0]
 801fc46:	f103 040c 	add.w	r4, r3, #12
 801fc4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fc4e:	4914      	ldr	r1, [pc, #80]	; (801fca0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801fc50:	4618      	mov	r0, r3
 801fc52:	f7ed fd0e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fc56:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fc5a:	4619      	mov	r1, r3
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f7ee f8cc 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fc62:	4603      	mov	r3, r0
 801fc64:	461c      	mov	r4, r3
 801fc66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fc6a:	4618      	mov	r0, r3
 801fc6c:	f7ee f8b9 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fc70:	2c00      	cmp	r4, #0
 801fc72:	d017      	beq.n	801fca4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801fc74:	683b      	ldr	r3, [r7, #0]
 801fc76:	699a      	ldr	r2, [r3, #24]
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	4611      	mov	r1, r2
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f7ee fb9b 	bl	800e3b8 <_Z10StringFromPKv>
 801fc82:	e0b0      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801fc84:	08027500 	.word	0x08027500
 801fc88:	080274fc 	.word	0x080274fc
 801fc8c:	080275ec 	.word	0x080275ec
 801fc90:	08027508 	.word	0x08027508
 801fc94:	08027518 	.word	0x08027518
 801fc98:	08027524 	.word	0x08027524
 801fc9c:	080275c8 	.word	0x080275c8
 801fca0:	080275a8 	.word	0x080275a8
    else if (type_ == "void (*)()")
 801fca4:	683b      	ldr	r3, [r7, #0]
 801fca6:	f103 040c 	add.w	r4, r3, #12
 801fcaa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fcae:	4950      	ldr	r1, [pc, #320]	; (801fdf0 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	f7ed fcde 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fcb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fcba:	4619      	mov	r1, r3
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	f7ee f89c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fcc2:	4603      	mov	r3, r0
 801fcc4:	461c      	mov	r4, r3
 801fcc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fcca:	4618      	mov	r0, r3
 801fccc:	f7ee f889 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fcd0:	2c00      	cmp	r4, #0
 801fcd2:	d007      	beq.n	801fce4 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	699a      	ldr	r2, [r3, #24]
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	4611      	mov	r1, r2
 801fcdc:	4618      	mov	r0, r3
 801fcde:	f7ee fb95 	bl	800e40c <_Z10StringFromPFvvE>
 801fce2:	e080      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	f103 040c 	add.w	r4, r3, #12
 801fcea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fcee:	4941      	ldr	r1, [pc, #260]	; (801fdf4 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	f7ed fcbe 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fcf6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fcfa:	4619      	mov	r1, r3
 801fcfc:	4620      	mov	r0, r4
 801fcfe:	f7ee f87c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fd02:	4603      	mov	r3, r0
 801fd04:	461c      	mov	r4, r3
 801fd06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fd0a:	4618      	mov	r0, r3
 801fd0c:	f7ee f869 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fd10:	2c00      	cmp	r4, #0
 801fd12:	d007      	beq.n	801fd24 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801fd14:	683b      	ldr	r3, [r7, #0]
 801fd16:	699a      	ldr	r2, [r3, #24]
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	4611      	mov	r1, r2
 801fd1c:	4618      	mov	r0, r3
 801fd1e:	f7ee fb4b 	bl	800e3b8 <_Z10StringFromPKv>
 801fd22:	e060      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801fd24:	683b      	ldr	r3, [r7, #0]
 801fd26:	f103 040c 	add.w	r4, r3, #12
 801fd2a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fd2e:	4932      	ldr	r1, [pc, #200]	; (801fdf8 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801fd30:	4618      	mov	r0, r3
 801fd32:	f7ed fc9e 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fd36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fd3a:	4619      	mov	r1, r3
 801fd3c:	4620      	mov	r0, r4
 801fd3e:	f7ee f85c 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fd42:	4603      	mov	r3, r0
 801fd44:	461c      	mov	r4, r3
 801fd46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fd4a:	4618      	mov	r0, r3
 801fd4c:	f7ee f849 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fd50:	2c00      	cmp	r4, #0
 801fd52:	d00c      	beq.n	801fd6e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801fd54:	683b      	ldr	r3, [r7, #0]
 801fd56:	ed93 7b06 	vldr	d7, [r3, #24]
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	2106      	movs	r1, #6
 801fd5e:	eeb0 0a47 	vmov.f32	s0, s14
 801fd62:	eef0 0a67 	vmov.f32	s1, s15
 801fd66:	4618      	mov	r0, r3
 801fd68:	f7ee fd00 	bl	800e76c <_Z10StringFromdi>
 801fd6c:	e03b      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801fd6e:	683b      	ldr	r3, [r7, #0]
 801fd70:	f103 040c 	add.w	r4, r3, #12
 801fd74:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd78:	4920      	ldr	r1, [pc, #128]	; (801fdfc <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801fd7a:	4618      	mov	r0, r3
 801fd7c:	f7ed fc79 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 801fd80:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd84:	4619      	mov	r1, r3
 801fd86:	4620      	mov	r0, r4
 801fd88:	f7ee f837 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801fd8c:	4603      	mov	r3, r0
 801fd8e:	461c      	mov	r4, r3
 801fd90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fd94:	4618      	mov	r0, r3
 801fd96:	f7ee f824 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801fd9a:	2c00      	cmp	r4, #0
 801fd9c:	d008      	beq.n	801fdb0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	6999      	ldr	r1, [r3, #24]
 801fda2:	683b      	ldr	r3, [r7, #0]
 801fda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	4618      	mov	r0, r3
 801fdaa:	f7ee fe73 	bl	800ea94 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801fdae:	e01a      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801fdb0:	683b      	ldr	r3, [r7, #0]
 801fdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d00b      	beq.n	801fdd0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801fdb8:	683b      	ldr	r3, [r7, #0]
 801fdba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801fdbc:	683b      	ldr	r3, [r7, #0]
 801fdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	330c      	adds	r3, #12
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	683a      	ldr	r2, [r7, #0]
 801fdc8:	6992      	ldr	r2, [r2, #24]
 801fdca:	6878      	ldr	r0, [r7, #4]
 801fdcc:	4798      	blx	r3
 801fdce:	e00a      	b.n	801fde6 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801fdd0:	683b      	ldr	r3, [r7, #0]
 801fdd2:	330c      	adds	r3, #12
 801fdd4:	4618      	mov	r0, r3
 801fdd6:	f7ed ffd7 	bl	800dd88 <_ZNK12SimpleString12asCharStringEv>
 801fdda:	4602      	mov	r2, r0
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	4908      	ldr	r1, [pc, #32]	; (801fe00 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801fde0:	4618      	mov	r0, r3
 801fde2:	f7ee fd05 	bl	800e7f0 <_Z16StringFromFormatPKcz>

}
 801fde6:	6878      	ldr	r0, [r7, #4]
 801fde8:	37e4      	adds	r7, #228	; 0xe4
 801fdea:	46bd      	mov	sp, r7
 801fdec:	bd90      	pop	{r4, r7, pc}
 801fdee:	bf00      	nop
 801fdf0:	080275bc 	.word	0x080275bc
 801fdf4:	080275b0 	.word	0x080275b0
 801fdf8:	080275a0 	.word	0x080275a0
 801fdfc:	080275d4 	.word	0x080275d4
 801fe00:	080275f0 	.word	0x080275f0

0801fe04 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801fe04:	b480      	push	{r7}
 801fe06:	b083      	sub	sp, #12
 801fe08:	af00      	add	r7, sp, #0
 801fe0a:	6078      	str	r0, [r7, #4]
 801fe0c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	683a      	ldr	r2, [r7, #0]
 801fe12:	605a      	str	r2, [r3, #4]
}
 801fe14:	bf00      	nop
 801fe16:	370c      	adds	r7, #12
 801fe18:	46bd      	mov	sp, r7
 801fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe1e:	4770      	bx	lr

0801fe20 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801fe20:	b480      	push	{r7}
 801fe22:	b083      	sub	sp, #12
 801fe24:	af00      	add	r7, sp, #0
 801fe26:	6078      	str	r0, [r7, #4]
    return next_;
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	685b      	ldr	r3, [r3, #4]
}
 801fe2c:	4618      	mov	r0, r3
 801fe2e:	370c      	adds	r7, #12
 801fe30:	46bd      	mov	sp, r7
 801fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe36:	4770      	bx	lr

0801fe38 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801fe38:	b480      	push	{r7}
 801fe3a:	b083      	sub	sp, #12
 801fe3c:	af00      	add	r7, sp, #0
 801fe3e:	6078      	str	r0, [r7, #4]
    return data_;
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	681b      	ldr	r3, [r3, #0]
}
 801fe44:	4618      	mov	r0, r3
 801fe46:	370c      	adds	r7, #12
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe4e:	4770      	bx	lr

0801fe50 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801fe50:	b580      	push	{r7, lr}
 801fe52:	b082      	sub	sp, #8
 801fe54:	af00      	add	r7, sp, #0
 801fe56:	6078      	str	r0, [r7, #4]
    delete data_;
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d004      	beq.n	801fe6a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801fe60:	681a      	ldr	r2, [r3, #0]
 801fe62:	3204      	adds	r2, #4
 801fe64:	6812      	ldr	r2, [r2, #0]
 801fe66:	4618      	mov	r0, r3
 801fe68:	4790      	blx	r2
}
 801fe6a:	bf00      	nop
 801fe6c:	3708      	adds	r7, #8
 801fe6e:	46bd      	mov	sp, r7
 801fe70:	bd80      	pop	{r7, pc}

0801fe72 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801fe72:	b480      	push	{r7}
 801fe74:	b083      	sub	sp, #12
 801fe76:	af00      	add	r7, sp, #0
 801fe78:	6078      	str	r0, [r7, #4]
 801fe7a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	683a      	ldr	r2, [r7, #0]
 801fe80:	601a      	str	r2, [r3, #0]
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	2200      	movs	r2, #0
 801fe86:	605a      	str	r2, [r3, #4]
{
}
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	4618      	mov	r0, r3
 801fe8c:	370c      	adds	r7, #12
 801fe8e:	46bd      	mov	sp, r7
 801fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe94:	4770      	bx	lr

0801fe96 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801fe96:	b580      	push	{r7, lr}
 801fe98:	b082      	sub	sp, #8
 801fe9a:	af00      	add	r7, sp, #0
 801fe9c:	6078      	str	r0, [r7, #4]
 801fe9e:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801fea0:	683b      	ldr	r3, [r7, #0]
 801fea2:	6819      	ldr	r1, [r3, #0]
 801fea4:	683b      	ldr	r3, [r7, #0]
 801fea6:	681b      	ldr	r3, [r3, #0]
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	335c      	adds	r3, #92	; 0x5c
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	687a      	ldr	r2, [r7, #4]
 801feb0:	4610      	mov	r0, r2
 801feb2:	4798      	blx	r3
}
 801feb4:	6878      	ldr	r0, [r7, #4]
 801feb6:	3708      	adds	r7, #8
 801feb8:	46bd      	mov	sp, r7
 801feba:	bd80      	pop	{r7, pc}

0801febc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801febc:	b580      	push	{r7, lr}
 801febe:	b082      	sub	sp, #8
 801fec0:	af00      	add	r7, sp, #0
 801fec2:	6078      	str	r0, [r7, #4]
 801fec4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801fec6:	683b      	ldr	r3, [r7, #0]
 801fec8:	6819      	ldr	r1, [r3, #0]
 801feca:	683b      	ldr	r3, [r7, #0]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	3360      	adds	r3, #96	; 0x60
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	687a      	ldr	r2, [r7, #4]
 801fed6:	4610      	mov	r0, r2
 801fed8:	4798      	blx	r3
}
 801feda:	6878      	ldr	r0, [r7, #4]
 801fedc:	3708      	adds	r7, #8
 801fede:	46bd      	mov	sp, r7
 801fee0:	bd80      	pop	{r7, pc}

0801fee2 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801fee2:	b480      	push	{r7}
 801fee4:	b083      	sub	sp, #12
 801fee6:	af00      	add	r7, sp, #0
 801fee8:	6078      	str	r0, [r7, #4]
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	2200      	movs	r2, #0
 801feee:	601a      	str	r2, [r3, #0]
{
}
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	4618      	mov	r0, r3
 801fef4:	370c      	adds	r7, #12
 801fef6:	46bd      	mov	sp, r7
 801fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fefc:	4770      	bx	lr

0801fefe <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801fefe:	b580      	push	{r7, lr}
 801ff00:	b084      	sub	sp, #16
 801ff02:	af00      	add	r7, sp, #0
 801ff04:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d016      	beq.n	801ff3c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	4618      	mov	r0, r3
 801ff14:	f7ff ff84 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801ff18:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ff1a:	687b      	ldr	r3, [r7, #4]
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	4618      	mov	r0, r3
 801ff20:	f7ff ff96 	bl	801fe50 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d003      	beq.n	801ff34 <_ZN18MockNamedValueList5clearEv+0x36>
 801ff2c:	2108      	movs	r1, #8
 801ff2e:	4618      	mov	r0, r3
 801ff30:	f7ea fff0 	bl	800af14 <_ZdlPvj>
        head_ = n;
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	68fa      	ldr	r2, [r7, #12]
 801ff38:	601a      	str	r2, [r3, #0]
    while (head_) {
 801ff3a:	e7e4      	b.n	801ff06 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801ff3c:	bf00      	nop
 801ff3e:	3710      	adds	r7, #16
 801ff40:	46bd      	mov	sp, r7
 801ff42:	bd80      	pop	{r7, pc}

0801ff44 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801ff44:	b590      	push	{r4, r7, lr}
 801ff46:	b085      	sub	sp, #20
 801ff48:	af00      	add	r7, sp, #0
 801ff4a:	6078      	str	r0, [r7, #4]
 801ff4c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801ff4e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ff52:	4916      	ldr	r1, [pc, #88]	; (801ffac <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801ff54:	2008      	movs	r0, #8
 801ff56:	f7ea ffc9 	bl	800aeec <_ZnwjPKci>
 801ff5a:	4604      	mov	r4, r0
 801ff5c:	6839      	ldr	r1, [r7, #0]
 801ff5e:	4620      	mov	r0, r4
 801ff60:	f7ff ff87 	bl	801fe72 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801ff64:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d103      	bne.n	801ff76 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	68ba      	ldr	r2, [r7, #8]
 801ff72:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801ff74:	e016      	b.n	801ffa4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801ff7c:	68f8      	ldr	r0, [r7, #12]
 801ff7e:	f7ff ff4f 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801ff82:	4603      	mov	r3, r0
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	bf14      	ite	ne
 801ff88:	2301      	movne	r3, #1
 801ff8a:	2300      	moveq	r3, #0
 801ff8c:	b2db      	uxtb	r3, r3
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d004      	beq.n	801ff9c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801ff92:	68f8      	ldr	r0, [r7, #12]
 801ff94:	f7ff ff44 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 801ff98:	60f8      	str	r0, [r7, #12]
 801ff9a:	e7ef      	b.n	801ff7c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801ff9c:	68b9      	ldr	r1, [r7, #8]
 801ff9e:	68f8      	ldr	r0, [r7, #12]
 801ffa0:	f7ff ff30 	bl	801fe04 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801ffa4:	bf00      	nop
 801ffa6:	3714      	adds	r7, #20
 801ffa8:	46bd      	mov	sp, r7
 801ffaa:	bd90      	pop	{r4, r7, pc}
 801ffac:	08027538 	.word	0x08027538

0801ffb0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801ffb0:	b590      	push	{r4, r7, lr}
 801ffb2:	b087      	sub	sp, #28
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	6078      	str	r0, [r7, #4]
 801ffb8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	617b      	str	r3, [r7, #20]
 801ffc0:	697b      	ldr	r3, [r7, #20]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d01e      	beq.n	8020004 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801ffc6:	f107 030c 	add.w	r3, r7, #12
 801ffca:	6979      	ldr	r1, [r7, #20]
 801ffcc:	4618      	mov	r0, r3
 801ffce:	f7ff ff62 	bl	801fe96 <_ZNK22MockNamedValueListNode7getNameEv>
 801ffd2:	f107 030c 	add.w	r3, r7, #12
 801ffd6:	6839      	ldr	r1, [r7, #0]
 801ffd8:	4618      	mov	r0, r3
 801ffda:	f7ed ff0e 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 801ffde:	4603      	mov	r3, r0
 801ffe0:	461c      	mov	r4, r3
 801ffe2:	f107 030c 	add.w	r3, r7, #12
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7ed fefb 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 801ffec:	2c00      	cmp	r4, #0
 801ffee:	d004      	beq.n	801fffa <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801fff0:	6978      	ldr	r0, [r7, #20]
 801fff2:	f7ff ff21 	bl	801fe38 <_ZN22MockNamedValueListNode4itemEv>
 801fff6:	4603      	mov	r3, r0
 801fff8:	e005      	b.n	8020006 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801fffa:	6978      	ldr	r0, [r7, #20]
 801fffc:	f7ff ff10 	bl	801fe20 <_ZN22MockNamedValueListNode4nextEv>
 8020000:	6178      	str	r0, [r7, #20]
 8020002:	e7dd      	b.n	801ffc0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 8020004:	2300      	movs	r3, #0
}
 8020006:	4618      	mov	r0, r3
 8020008:	371c      	adds	r7, #28
 802000a:	46bd      	mov	sp, r7
 802000c:	bd90      	pop	{r4, r7, pc}

0802000e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 802000e:	b480      	push	{r7}
 8020010:	b083      	sub	sp, #12
 8020012:	af00      	add	r7, sp, #0
 8020014:	6078      	str	r0, [r7, #4]
    return head_;
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	681b      	ldr	r3, [r3, #0]
}
 802001a:	4618      	mov	r0, r3
 802001c:	370c      	adds	r7, #12
 802001e:	46bd      	mov	sp, r7
 8020020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020024:	4770      	bx	lr

08020026 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8020026:	b580      	push	{r7, lr}
 8020028:	b084      	sub	sp, #16
 802002a:	af00      	add	r7, sp, #0
 802002c:	60f8      	str	r0, [r7, #12]
 802002e:	60b9      	str	r1, [r7, #8]
 8020030:	607a      	str	r2, [r7, #4]
 8020032:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	68b9      	ldr	r1, [r7, #8]
 8020038:	4618      	mov	r0, r3
 802003a:	f7ed fb6e 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	687a      	ldr	r2, [r7, #4]
 8020042:	609a      	str	r2, [r3, #8]
 8020044:	68fb      	ldr	r3, [r7, #12]
 8020046:	2200      	movs	r2, #0
 8020048:	60da      	str	r2, [r3, #12]
 802004a:	68fb      	ldr	r3, [r7, #12]
 802004c:	683a      	ldr	r2, [r7, #0]
 802004e:	611a      	str	r2, [r3, #16]
 8020050:	68fb      	ldr	r3, [r7, #12]
 8020052:	4618      	mov	r0, r3
 8020054:	3710      	adds	r7, #16
 8020056:	46bd      	mov	sp, r7
 8020058:	bd80      	pop	{r7, pc}

0802005a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802005a:	b580      	push	{r7, lr}
 802005c:	b084      	sub	sp, #16
 802005e:	af00      	add	r7, sp, #0
 8020060:	60f8      	str	r0, [r7, #12]
 8020062:	60b9      	str	r1, [r7, #8]
 8020064:	607a      	str	r2, [r7, #4]
 8020066:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 8020068:	68fb      	ldr	r3, [r7, #12]
 802006a:	68b9      	ldr	r1, [r7, #8]
 802006c:	4618      	mov	r0, r3
 802006e:	f7ed fb54 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	2200      	movs	r2, #0
 8020076:	609a      	str	r2, [r3, #8]
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	687a      	ldr	r2, [r7, #4]
 802007c:	60da      	str	r2, [r3, #12]
 802007e:	68fb      	ldr	r3, [r7, #12]
 8020080:	683a      	ldr	r2, [r7, #0]
 8020082:	611a      	str	r2, [r3, #16]
 8020084:	68fb      	ldr	r3, [r7, #12]
 8020086:	4618      	mov	r0, r3
 8020088:	3710      	adds	r7, #16
 802008a:	46bd      	mov	sp, r7
 802008c:	bd80      	pop	{r7, pc}

0802008e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802008e:	b580      	push	{r7, lr}
 8020090:	b084      	sub	sp, #16
 8020092:	af00      	add	r7, sp, #0
 8020094:	60f8      	str	r0, [r7, #12]
 8020096:	60b9      	str	r1, [r7, #8]
 8020098:	607a      	str	r2, [r7, #4]
 802009a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	68b9      	ldr	r1, [r7, #8]
 80200a0:	4618      	mov	r0, r3
 80200a2:	f7ed fb3a 	bl	800d71a <_ZN12SimpleStringC1ERKS_>
 80200a6:	68fb      	ldr	r3, [r7, #12]
 80200a8:	687a      	ldr	r2, [r7, #4]
 80200aa:	609a      	str	r2, [r3, #8]
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	683a      	ldr	r2, [r7, #0]
 80200b0:	60da      	str	r2, [r3, #12]
 80200b2:	68fb      	ldr	r3, [r7, #12]
 80200b4:	69ba      	ldr	r2, [r7, #24]
 80200b6:	611a      	str	r2, [r3, #16]
 80200b8:	68fb      	ldr	r3, [r7, #12]
 80200ba:	4618      	mov	r0, r3
 80200bc:	3710      	adds	r7, #16
 80200be:	46bd      	mov	sp, r7
 80200c0:	bd80      	pop	{r7, pc}
	...

080200c4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 80200c4:	b480      	push	{r7}
 80200c6:	b083      	sub	sp, #12
 80200c8:	af00      	add	r7, sp, #0
 80200ca:	6078      	str	r0, [r7, #4]
 80200cc:	4a06      	ldr	r2, [pc, #24]	; (80200e8 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	601a      	str	r2, [r3, #0]
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	2200      	movs	r2, #0
 80200d6:	605a      	str	r2, [r3, #4]
{

}
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	4618      	mov	r0, r3
 80200dc:	370c      	adds	r7, #12
 80200de:	46bd      	mov	sp, r7
 80200e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200e4:	4770      	bx	lr
 80200e6:	bf00      	nop
 80200e8:	0802a238 	.word	0x0802a238

080200ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 80200ec:	b580      	push	{r7, lr}
 80200ee:	b082      	sub	sp, #8
 80200f0:	af00      	add	r7, sp, #0
 80200f2:	6078      	str	r0, [r7, #4]
 80200f4:	4a05      	ldr	r2, [pc, #20]	; (802010c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 80200f6:	687b      	ldr	r3, [r7, #4]
 80200f8:	601a      	str	r2, [r3, #0]
{
    clear();
 80200fa:	6878      	ldr	r0, [r7, #4]
 80200fc:	f000 f825 	bl	802014a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8020100:	687b      	ldr	r3, [r7, #4]
 8020102:	4618      	mov	r0, r3
 8020104:	3708      	adds	r7, #8
 8020106:	46bd      	mov	sp, r7
 8020108:	bd80      	pop	{r7, pc}
 802010a:	bf00      	nop
 802010c:	0802a238 	.word	0x0802a238

08020110 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8020110:	b580      	push	{r7, lr}
 8020112:	b082      	sub	sp, #8
 8020114:	af00      	add	r7, sp, #0
 8020116:	6078      	str	r0, [r7, #4]
}
 8020118:	6878      	ldr	r0, [r7, #4]
 802011a:	f7ff ffe7 	bl	80200ec <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 802011e:	2108      	movs	r1, #8
 8020120:	6878      	ldr	r0, [r7, #4]
 8020122:	f7ea fef7 	bl	800af14 <_ZdlPvj>
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	4618      	mov	r0, r3
 802012a:	3708      	adds	r7, #8
 802012c:	46bd      	mov	sp, r7
 802012e:	bd80      	pop	{r7, pc}

08020130 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 8020130:	b580      	push	{r7, lr}
 8020132:	b082      	sub	sp, #8
 8020134:	af00      	add	r7, sp, #0
 8020136:	6078      	str	r0, [r7, #4]
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	4618      	mov	r0, r3
 802013c:	f7ed fe51 	bl	800dde2 <_ZN12SimpleStringD1Ev>
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	4618      	mov	r0, r3
 8020144:	3708      	adds	r7, #8
 8020146:	46bd      	mov	sp, r7
 8020148:	bd80      	pop	{r7, pc}

0802014a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 802014a:	b590      	push	{r4, r7, lr}
 802014c:	b085      	sub	sp, #20
 802014e:	af00      	add	r7, sp, #0
 8020150:	6078      	str	r0, [r7, #4]
    while (head_) {
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	685b      	ldr	r3, [r3, #4]
 8020156:	2b00      	cmp	r3, #0
 8020158:	d012      	beq.n	8020180 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	685b      	ldr	r3, [r3, #4]
 802015e:	691b      	ldr	r3, [r3, #16]
 8020160:	60fb      	str	r3, [r7, #12]
        delete head_;
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	685c      	ldr	r4, [r3, #4]
 8020166:	2c00      	cmp	r4, #0
 8020168:	d006      	beq.n	8020178 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 802016a:	4620      	mov	r0, r4
 802016c:	f7ff ffe0 	bl	8020130 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 8020170:	2114      	movs	r1, #20
 8020172:	4620      	mov	r0, r4
 8020174:	f7ea fece 	bl	800af14 <_ZdlPvj>
        head_ = next;
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	68fa      	ldr	r2, [r7, #12]
 802017c:	605a      	str	r2, [r3, #4]
    while (head_) {
 802017e:	e7e8      	b.n	8020152 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 8020180:	bf00      	nop
 8020182:	3714      	adds	r7, #20
 8020184:	46bd      	mov	sp, r7
 8020186:	bd90      	pop	{r4, r7, pc}

08020188 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 8020188:	b590      	push	{r4, r7, lr}
 802018a:	b085      	sub	sp, #20
 802018c:	af00      	add	r7, sp, #0
 802018e:	60f8      	str	r0, [r7, #12]
 8020190:	60b9      	str	r1, [r7, #8]
 8020192:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 8020194:	f240 227a 	movw	r2, #634	; 0x27a
 8020198:	4908      	ldr	r1, [pc, #32]	; (80201bc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 802019a:	2014      	movs	r0, #20
 802019c:	f7ea fea6 	bl	800aeec <_ZnwjPKci>
 80201a0:	4604      	mov	r4, r0
 80201a2:	68fb      	ldr	r3, [r7, #12]
 80201a4:	685b      	ldr	r3, [r3, #4]
 80201a6:	687a      	ldr	r2, [r7, #4]
 80201a8:	68b9      	ldr	r1, [r7, #8]
 80201aa:	4620      	mov	r0, r4
 80201ac:	f7ff ff3b 	bl	8020026 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	605c      	str	r4, [r3, #4]
}
 80201b4:	bf00      	nop
 80201b6:	3714      	adds	r7, #20
 80201b8:	46bd      	mov	sp, r7
 80201ba:	bd90      	pop	{r4, r7, pc}
 80201bc:	08027538 	.word	0x08027538

080201c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 80201c0:	b590      	push	{r4, r7, lr}
 80201c2:	b085      	sub	sp, #20
 80201c4:	af00      	add	r7, sp, #0
 80201c6:	60f8      	str	r0, [r7, #12]
 80201c8:	60b9      	str	r1, [r7, #8]
 80201ca:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 80201cc:	f240 227f 	movw	r2, #639	; 0x27f
 80201d0:	4908      	ldr	r1, [pc, #32]	; (80201f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 80201d2:	2014      	movs	r0, #20
 80201d4:	f7ea fe8a 	bl	800aeec <_ZnwjPKci>
 80201d8:	4604      	mov	r4, r0
 80201da:	68fb      	ldr	r3, [r7, #12]
 80201dc:	685b      	ldr	r3, [r3, #4]
 80201de:	687a      	ldr	r2, [r7, #4]
 80201e0:	68b9      	ldr	r1, [r7, #8]
 80201e2:	4620      	mov	r0, r4
 80201e4:	f7ff ff39 	bl	802005a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	605c      	str	r4, [r3, #4]
}
 80201ec:	bf00      	nop
 80201ee:	3714      	adds	r7, #20
 80201f0:	46bd      	mov	sp, r7
 80201f2:	bd90      	pop	{r4, r7, pc}
 80201f4:	08027538 	.word	0x08027538

080201f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b084      	sub	sp, #16
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	6078      	str	r0, [r7, #4]
 8020200:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	685b      	ldr	r3, [r3, #4]
 8020206:	60fb      	str	r3, [r7, #12]
 8020208:	68fb      	ldr	r3, [r7, #12]
 802020a:	2b00      	cmp	r3, #0
 802020c:	d017      	beq.n	802023e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 802020e:	68fb      	ldr	r3, [r7, #12]
 8020210:	6839      	ldr	r1, [r7, #0]
 8020212:	4618      	mov	r0, r3
 8020214:	f7ed fdf1 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8020218:	4603      	mov	r3, r0
 802021a:	2b00      	cmp	r3, #0
 802021c:	d005      	beq.n	802022a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	689b      	ldr	r3, [r3, #8]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d001      	beq.n	802022a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8020226:	2301      	movs	r3, #1
 8020228:	e000      	b.n	802022c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 802022a:	2300      	movs	r3, #0
 802022c:	2b00      	cmp	r3, #0
 802022e:	d002      	beq.n	8020236 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 8020230:	68fb      	ldr	r3, [r7, #12]
 8020232:	689b      	ldr	r3, [r3, #8]
 8020234:	e004      	b.n	8020240 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020236:	68fb      	ldr	r3, [r7, #12]
 8020238:	691b      	ldr	r3, [r3, #16]
 802023a:	60fb      	str	r3, [r7, #12]
 802023c:	e7e4      	b.n	8020208 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 802023e:	2300      	movs	r3, #0
}
 8020240:	4618      	mov	r0, r3
 8020242:	3710      	adds	r7, #16
 8020244:	46bd      	mov	sp, r7
 8020246:	bd80      	pop	{r7, pc}

08020248 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 8020248:	b580      	push	{r7, lr}
 802024a:	b084      	sub	sp, #16
 802024c:	af00      	add	r7, sp, #0
 802024e:	6078      	str	r0, [r7, #4]
 8020250:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	685b      	ldr	r3, [r3, #4]
 8020256:	60fb      	str	r3, [r7, #12]
 8020258:	68fb      	ldr	r3, [r7, #12]
 802025a:	2b00      	cmp	r3, #0
 802025c:	d017      	beq.n	802028e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	6839      	ldr	r1, [r7, #0]
 8020262:	4618      	mov	r0, r3
 8020264:	f7ed fdc9 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 8020268:	4603      	mov	r3, r0
 802026a:	2b00      	cmp	r3, #0
 802026c:	d005      	beq.n	802027a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	68db      	ldr	r3, [r3, #12]
 8020272:	2b00      	cmp	r3, #0
 8020274:	d001      	beq.n	802027a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8020276:	2301      	movs	r3, #1
 8020278:	e000      	b.n	802027c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 802027a:	2300      	movs	r3, #0
 802027c:	2b00      	cmp	r3, #0
 802027e:	d002      	beq.n	8020286 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	68db      	ldr	r3, [r3, #12]
 8020284:	e004      	b.n	8020290 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	691b      	ldr	r3, [r3, #16]
 802028a:	60fb      	str	r3, [r7, #12]
 802028c:	e7e4      	b.n	8020258 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 802028e:	2300      	movs	r3, #0
}
 8020290:	4618      	mov	r0, r3
 8020292:	3710      	adds	r7, #16
 8020294:	46bd      	mov	sp, r7
 8020296:	bd80      	pop	{r7, pc}

08020298 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8020298:	b590      	push	{r4, r7, lr}
 802029a:	b087      	sub	sp, #28
 802029c:	af02      	add	r7, sp, #8
 802029e:	6078      	str	r0, [r7, #4]
 80202a0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 80202a2:	683b      	ldr	r3, [r7, #0]
 80202a4:	685b      	ldr	r3, [r3, #4]
 80202a6:	60fb      	str	r3, [r7, #12]
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	d018      	beq.n	80202e0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 80202ae:	f240 2293 	movw	r2, #659	; 0x293
 80202b2:	490d      	ldr	r1, [pc, #52]	; (80202e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 80202b4:	2014      	movs	r0, #20
 80202b6:	f7ea fe19 	bl	800aeec <_ZnwjPKci>
 80202ba:	4604      	mov	r4, r0
 80202bc:	68f9      	ldr	r1, [r7, #12]
 80202be:	68fb      	ldr	r3, [r7, #12]
 80202c0:	689a      	ldr	r2, [r3, #8]
 80202c2:	68fb      	ldr	r3, [r7, #12]
 80202c4:	68d8      	ldr	r0, [r3, #12]
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	685b      	ldr	r3, [r3, #4]
 80202ca:	9300      	str	r3, [sp, #0]
 80202cc:	4603      	mov	r3, r0
 80202ce:	4620      	mov	r0, r4
 80202d0:	f7ff fedd 	bl	802008e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 80202d8:	68fb      	ldr	r3, [r7, #12]
 80202da:	691b      	ldr	r3, [r3, #16]
 80202dc:	60fb      	str	r3, [r7, #12]
 80202de:	e7e3      	b.n	80202a8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 80202e0:	bf00      	nop
 80202e2:	3714      	adds	r7, #20
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd90      	pop	{r4, r7, pc}
 80202e8:	08027538 	.word	0x08027538

080202ec <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 80202ec:	b580      	push	{r7, lr}
 80202ee:	b082      	sub	sp, #8
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	6078      	str	r0, [r7, #4]
 80202f4:	6039      	str	r1, [r7, #0]
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	490b      	ldr	r1, [pc, #44]	; (8020328 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 80202fa:	4618      	mov	r0, r3
 80202fc:	f7ed f9b9 	bl	800d672 <_ZN12SimpleStringC1EPKc>
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	2200      	movs	r2, #0
 8020304:	721a      	strb	r2, [r3, #8]
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	2200      	movs	r2, #0
 802030a:	725a      	strb	r2, [r3, #9]
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	2200      	movs	r2, #0
 8020310:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	6839      	ldr	r1, [r7, #0]
 8020316:	4618      	mov	r0, r3
 8020318:	f7ed fa17 	bl	800d74a <_ZN12SimpleStringaSERKS_>
}
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	4618      	mov	r0, r3
 8020320:	3708      	adds	r7, #8
 8020322:	46bd      	mov	sp, r7
 8020324:	bd80      	pop	{r7, pc}
 8020326:	bf00      	nop
 8020328:	08027614 	.word	0x08027614

0802032c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 802032c:	b480      	push	{r7}
 802032e:	b083      	sub	sp, #12
 8020330:	af00      	add	r7, sp, #0
 8020332:	6078      	str	r0, [r7, #4]
 8020334:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	683a      	ldr	r2, [r7, #0]
 802033a:	60da      	str	r2, [r3, #12]
    return this;
 802033c:	687b      	ldr	r3, [r7, #4]
}
 802033e:	4618      	mov	r0, r3
 8020340:	370c      	adds	r7, #12
 8020342:	46bd      	mov	sp, r7
 8020344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020348:	4770      	bx	lr

0802034a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 802034a:	b480      	push	{r7}
 802034c:	b083      	sub	sp, #12
 802034e:	af00      	add	r7, sp, #0
 8020350:	6078      	str	r0, [r7, #4]
    return next_;
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	68db      	ldr	r3, [r3, #12]
}
 8020356:	4618      	mov	r0, r3
 8020358:	370c      	adds	r7, #12
 802035a:	46bd      	mov	sp, r7
 802035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020360:	4770      	bx	lr

08020362 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8020362:	b480      	push	{r7}
 8020364:	b083      	sub	sp, #12
 8020366:	af00      	add	r7, sp, #0
 8020368:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	2201      	movs	r2, #1
 802036e:	721a      	strb	r2, [r3, #8]
}
 8020370:	bf00      	nop
 8020372:	370c      	adds	r7, #12
 8020374:	46bd      	mov	sp, r7
 8020376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802037a:	4770      	bx	lr

0802037c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 802037c:	b480      	push	{r7}
 802037e:	b083      	sub	sp, #12
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2201      	movs	r2, #1
 8020388:	725a      	strb	r2, [r3, #9]
}
 802038a:	bf00      	nop
 802038c:	370c      	adds	r7, #12
 802038e:	46bd      	mov	sp, r7
 8020390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020394:	4770      	bx	lr

08020396 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8020396:	b580      	push	{r7, lr}
 8020398:	b084      	sub	sp, #16
 802039a:	af00      	add	r7, sp, #0
 802039c:	6078      	str	r0, [r7, #4]
 802039e:	6039      	str	r1, [r7, #0]
    bool matches = false;
 80203a0:	2300      	movs	r3, #0
 80203a2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	7a1b      	ldrb	r3, [r3, #8]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d007      	beq.n	80203bc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	4619      	mov	r1, r3
 80203b0:	6838      	ldr	r0, [r7, #0]
 80203b2:	f7ed fd22 	bl	800ddfa <_ZeqRK12SimpleStringS1_>
 80203b6:	4603      	mov	r3, r0
 80203b8:	73fb      	strb	r3, [r7, #15]
 80203ba:	e006      	b.n	80203ca <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	4619      	mov	r1, r3
 80203c0:	6838      	ldr	r0, [r7, #0]
 80203c2:	f7ed f9d4 	bl	800d76e <_ZNK12SimpleString8containsERKS_>
 80203c6:	4603      	mov	r3, r0
 80203c8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	7a5b      	ldrb	r3, [r3, #9]
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	d004      	beq.n	80203dc <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 80203d2:	7bfb      	ldrb	r3, [r7, #15]
 80203d4:	f083 0301 	eor.w	r3, r3, #1
 80203d8:	b2db      	uxtb	r3, r3
 80203da:	e005      	b.n	80203e8 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 80203dc:	7bfb      	ldrb	r3, [r7, #15]
 80203de:	2b00      	cmp	r3, #0
 80203e0:	bf14      	ite	ne
 80203e2:	2301      	movne	r3, #1
 80203e4:	2300      	moveq	r3, #0
 80203e6:	b2db      	uxtb	r3, r3
}
 80203e8:	4618      	mov	r0, r3
 80203ea:	3710      	adds	r7, #16
 80203ec:	46bd      	mov	sp, r7
 80203ee:	bd80      	pop	{r7, pc}

080203f0 <__cxa_guard_acquire>:
 80203f0:	6803      	ldr	r3, [r0, #0]
 80203f2:	07db      	lsls	r3, r3, #31
 80203f4:	d406      	bmi.n	8020404 <__cxa_guard_acquire+0x14>
 80203f6:	7843      	ldrb	r3, [r0, #1]
 80203f8:	b103      	cbz	r3, 80203fc <__cxa_guard_acquire+0xc>
 80203fa:	deff      	udf	#255	; 0xff
 80203fc:	2301      	movs	r3, #1
 80203fe:	7043      	strb	r3, [r0, #1]
 8020400:	4618      	mov	r0, r3
 8020402:	4770      	bx	lr
 8020404:	2000      	movs	r0, #0
 8020406:	4770      	bx	lr

08020408 <__cxa_guard_release>:
 8020408:	2301      	movs	r3, #1
 802040a:	6003      	str	r3, [r0, #0]
 802040c:	4770      	bx	lr

0802040e <__cxa_pure_virtual>:
 802040e:	b508      	push	{r3, lr}
 8020410:	f000 f80c 	bl	802042c <_ZSt9terminatev>

08020414 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020414:	b508      	push	{r3, lr}
 8020416:	4780      	blx	r0
 8020418:	f000 f816 	bl	8020448 <abort>

0802041c <_ZSt13get_terminatev>:
 802041c:	4b02      	ldr	r3, [pc, #8]	; (8020428 <_ZSt13get_terminatev+0xc>)
 802041e:	6818      	ldr	r0, [r3, #0]
 8020420:	f3bf 8f5b 	dmb	ish
 8020424:	4770      	bx	lr
 8020426:	bf00      	nop
 8020428:	20000104 	.word	0x20000104

0802042c <_ZSt9terminatev>:
 802042c:	b508      	push	{r3, lr}
 802042e:	f7ff fff5 	bl	802041c <_ZSt13get_terminatev>
 8020432:	f7ff ffef 	bl	8020414 <_ZN10__cxxabiv111__terminateEPFvvE>

08020436 <fabs>:
 8020436:	ec51 0b10 	vmov	r0, r1, d0
 802043a:	ee10 2a10 	vmov	r2, s0
 802043e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020442:	ec43 2b10 	vmov	d0, r2, r3
 8020446:	4770      	bx	lr

08020448 <abort>:
 8020448:	b508      	push	{r3, lr}
 802044a:	2006      	movs	r0, #6
 802044c:	f000 ff8c 	bl	8021368 <raise>
 8020450:	2001      	movs	r0, #1
 8020452:	f7e0 fcce 	bl	8000df2 <_exit>

08020456 <atexit>:
 8020456:	2300      	movs	r3, #0
 8020458:	4601      	mov	r1, r0
 802045a:	461a      	mov	r2, r3
 802045c:	4618      	mov	r0, r3
 802045e:	f002 b9db 	b.w	8022818 <__register_exitproc>

08020462 <atoi>:
 8020462:	220a      	movs	r2, #10
 8020464:	2100      	movs	r1, #0
 8020466:	f001 be03 	b.w	8022070 <strtol>
	...

0802046c <calloc>:
 802046c:	4b02      	ldr	r3, [pc, #8]	; (8020478 <calloc+0xc>)
 802046e:	460a      	mov	r2, r1
 8020470:	4601      	mov	r1, r0
 8020472:	6818      	ldr	r0, [r3, #0]
 8020474:	f000 bde8 	b.w	8021048 <_calloc_r>
 8020478:	20000108 	.word	0x20000108

0802047c <__errno>:
 802047c:	4b01      	ldr	r3, [pc, #4]	; (8020484 <__errno+0x8>)
 802047e:	6818      	ldr	r0, [r3, #0]
 8020480:	4770      	bx	lr
 8020482:	bf00      	nop
 8020484:	20000108 	.word	0x20000108

08020488 <_fclose_r>:
 8020488:	b570      	push	{r4, r5, r6, lr}
 802048a:	4605      	mov	r5, r0
 802048c:	460c      	mov	r4, r1
 802048e:	b911      	cbnz	r1, 8020496 <_fclose_r+0xe>
 8020490:	2600      	movs	r6, #0
 8020492:	4630      	mov	r0, r6
 8020494:	bd70      	pop	{r4, r5, r6, pc}
 8020496:	b118      	cbz	r0, 80204a0 <_fclose_r+0x18>
 8020498:	6983      	ldr	r3, [r0, #24]
 802049a:	b90b      	cbnz	r3, 80204a0 <_fclose_r+0x18>
 802049c:	f000 f994 	bl	80207c8 <__sinit>
 80204a0:	4b2c      	ldr	r3, [pc, #176]	; (8020554 <_fclose_r+0xcc>)
 80204a2:	429c      	cmp	r4, r3
 80204a4:	d114      	bne.n	80204d0 <_fclose_r+0x48>
 80204a6:	686c      	ldr	r4, [r5, #4]
 80204a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80204aa:	07d8      	lsls	r0, r3, #31
 80204ac:	d405      	bmi.n	80204ba <_fclose_r+0x32>
 80204ae:	89a3      	ldrh	r3, [r4, #12]
 80204b0:	0599      	lsls	r1, r3, #22
 80204b2:	d402      	bmi.n	80204ba <_fclose_r+0x32>
 80204b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204b6:	f000 fd3a 	bl	8020f2e <__retarget_lock_acquire_recursive>
 80204ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204be:	b98b      	cbnz	r3, 80204e4 <_fclose_r+0x5c>
 80204c0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80204c2:	f016 0601 	ands.w	r6, r6, #1
 80204c6:	d1e3      	bne.n	8020490 <_fclose_r+0x8>
 80204c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204ca:	f000 fd32 	bl	8020f32 <__retarget_lock_release_recursive>
 80204ce:	e7e0      	b.n	8020492 <_fclose_r+0xa>
 80204d0:	4b21      	ldr	r3, [pc, #132]	; (8020558 <_fclose_r+0xd0>)
 80204d2:	429c      	cmp	r4, r3
 80204d4:	d101      	bne.n	80204da <_fclose_r+0x52>
 80204d6:	68ac      	ldr	r4, [r5, #8]
 80204d8:	e7e6      	b.n	80204a8 <_fclose_r+0x20>
 80204da:	4b20      	ldr	r3, [pc, #128]	; (802055c <_fclose_r+0xd4>)
 80204dc:	429c      	cmp	r4, r3
 80204de:	bf08      	it	eq
 80204e0:	68ec      	ldreq	r4, [r5, #12]
 80204e2:	e7e1      	b.n	80204a8 <_fclose_r+0x20>
 80204e4:	4621      	mov	r1, r4
 80204e6:	4628      	mov	r0, r5
 80204e8:	f000 f842 	bl	8020570 <__sflush_r>
 80204ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80204ee:	4606      	mov	r6, r0
 80204f0:	b133      	cbz	r3, 8020500 <_fclose_r+0x78>
 80204f2:	6a21      	ldr	r1, [r4, #32]
 80204f4:	4628      	mov	r0, r5
 80204f6:	4798      	blx	r3
 80204f8:	2800      	cmp	r0, #0
 80204fa:	bfb8      	it	lt
 80204fc:	f04f 36ff 	movlt.w	r6, #4294967295
 8020500:	89a3      	ldrh	r3, [r4, #12]
 8020502:	061a      	lsls	r2, r3, #24
 8020504:	d503      	bpl.n	802050e <_fclose_r+0x86>
 8020506:	6921      	ldr	r1, [r4, #16]
 8020508:	4628      	mov	r0, r5
 802050a:	f000 fdad 	bl	8021068 <_free_r>
 802050e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020510:	b141      	cbz	r1, 8020524 <_fclose_r+0x9c>
 8020512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020516:	4299      	cmp	r1, r3
 8020518:	d002      	beq.n	8020520 <_fclose_r+0x98>
 802051a:	4628      	mov	r0, r5
 802051c:	f000 fda4 	bl	8021068 <_free_r>
 8020520:	2300      	movs	r3, #0
 8020522:	6363      	str	r3, [r4, #52]	; 0x34
 8020524:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020526:	b121      	cbz	r1, 8020532 <_fclose_r+0xaa>
 8020528:	4628      	mov	r0, r5
 802052a:	f000 fd9d 	bl	8021068 <_free_r>
 802052e:	2300      	movs	r3, #0
 8020530:	64a3      	str	r3, [r4, #72]	; 0x48
 8020532:	f000 f931 	bl	8020798 <__sfp_lock_acquire>
 8020536:	2300      	movs	r3, #0
 8020538:	81a3      	strh	r3, [r4, #12]
 802053a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802053c:	07db      	lsls	r3, r3, #31
 802053e:	d402      	bmi.n	8020546 <_fclose_r+0xbe>
 8020540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020542:	f000 fcf6 	bl	8020f32 <__retarget_lock_release_recursive>
 8020546:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020548:	f000 fcef 	bl	8020f2a <__retarget_lock_close_recursive>
 802054c:	f000 f92a 	bl	80207a4 <__sfp_lock_release>
 8020550:	e79f      	b.n	8020492 <_fclose_r+0xa>
 8020552:	bf00      	nop
 8020554:	0802a32c 	.word	0x0802a32c
 8020558:	0802a34c 	.word	0x0802a34c
 802055c:	0802a30c 	.word	0x0802a30c

08020560 <fclose>:
 8020560:	4b02      	ldr	r3, [pc, #8]	; (802056c <fclose+0xc>)
 8020562:	4601      	mov	r1, r0
 8020564:	6818      	ldr	r0, [r3, #0]
 8020566:	f7ff bf8f 	b.w	8020488 <_fclose_r>
 802056a:	bf00      	nop
 802056c:	20000108 	.word	0x20000108

08020570 <__sflush_r>:
 8020570:	898a      	ldrh	r2, [r1, #12]
 8020572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020576:	4605      	mov	r5, r0
 8020578:	0710      	lsls	r0, r2, #28
 802057a:	460c      	mov	r4, r1
 802057c:	d458      	bmi.n	8020630 <__sflush_r+0xc0>
 802057e:	684b      	ldr	r3, [r1, #4]
 8020580:	2b00      	cmp	r3, #0
 8020582:	dc05      	bgt.n	8020590 <__sflush_r+0x20>
 8020584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020586:	2b00      	cmp	r3, #0
 8020588:	dc02      	bgt.n	8020590 <__sflush_r+0x20>
 802058a:	2000      	movs	r0, #0
 802058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020592:	2e00      	cmp	r6, #0
 8020594:	d0f9      	beq.n	802058a <__sflush_r+0x1a>
 8020596:	2300      	movs	r3, #0
 8020598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802059c:	682f      	ldr	r7, [r5, #0]
 802059e:	602b      	str	r3, [r5, #0]
 80205a0:	d032      	beq.n	8020608 <__sflush_r+0x98>
 80205a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80205a4:	89a3      	ldrh	r3, [r4, #12]
 80205a6:	075a      	lsls	r2, r3, #29
 80205a8:	d505      	bpl.n	80205b6 <__sflush_r+0x46>
 80205aa:	6863      	ldr	r3, [r4, #4]
 80205ac:	1ac0      	subs	r0, r0, r3
 80205ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80205b0:	b10b      	cbz	r3, 80205b6 <__sflush_r+0x46>
 80205b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80205b4:	1ac0      	subs	r0, r0, r3
 80205b6:	2300      	movs	r3, #0
 80205b8:	4602      	mov	r2, r0
 80205ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80205bc:	6a21      	ldr	r1, [r4, #32]
 80205be:	4628      	mov	r0, r5
 80205c0:	47b0      	blx	r6
 80205c2:	1c43      	adds	r3, r0, #1
 80205c4:	89a3      	ldrh	r3, [r4, #12]
 80205c6:	d106      	bne.n	80205d6 <__sflush_r+0x66>
 80205c8:	6829      	ldr	r1, [r5, #0]
 80205ca:	291d      	cmp	r1, #29
 80205cc:	d82c      	bhi.n	8020628 <__sflush_r+0xb8>
 80205ce:	4a2a      	ldr	r2, [pc, #168]	; (8020678 <__sflush_r+0x108>)
 80205d0:	40ca      	lsrs	r2, r1
 80205d2:	07d6      	lsls	r6, r2, #31
 80205d4:	d528      	bpl.n	8020628 <__sflush_r+0xb8>
 80205d6:	2200      	movs	r2, #0
 80205d8:	6062      	str	r2, [r4, #4]
 80205da:	04d9      	lsls	r1, r3, #19
 80205dc:	6922      	ldr	r2, [r4, #16]
 80205de:	6022      	str	r2, [r4, #0]
 80205e0:	d504      	bpl.n	80205ec <__sflush_r+0x7c>
 80205e2:	1c42      	adds	r2, r0, #1
 80205e4:	d101      	bne.n	80205ea <__sflush_r+0x7a>
 80205e6:	682b      	ldr	r3, [r5, #0]
 80205e8:	b903      	cbnz	r3, 80205ec <__sflush_r+0x7c>
 80205ea:	6560      	str	r0, [r4, #84]	; 0x54
 80205ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80205ee:	602f      	str	r7, [r5, #0]
 80205f0:	2900      	cmp	r1, #0
 80205f2:	d0ca      	beq.n	802058a <__sflush_r+0x1a>
 80205f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80205f8:	4299      	cmp	r1, r3
 80205fa:	d002      	beq.n	8020602 <__sflush_r+0x92>
 80205fc:	4628      	mov	r0, r5
 80205fe:	f000 fd33 	bl	8021068 <_free_r>
 8020602:	2000      	movs	r0, #0
 8020604:	6360      	str	r0, [r4, #52]	; 0x34
 8020606:	e7c1      	b.n	802058c <__sflush_r+0x1c>
 8020608:	6a21      	ldr	r1, [r4, #32]
 802060a:	2301      	movs	r3, #1
 802060c:	4628      	mov	r0, r5
 802060e:	47b0      	blx	r6
 8020610:	1c41      	adds	r1, r0, #1
 8020612:	d1c7      	bne.n	80205a4 <__sflush_r+0x34>
 8020614:	682b      	ldr	r3, [r5, #0]
 8020616:	2b00      	cmp	r3, #0
 8020618:	d0c4      	beq.n	80205a4 <__sflush_r+0x34>
 802061a:	2b1d      	cmp	r3, #29
 802061c:	d001      	beq.n	8020622 <__sflush_r+0xb2>
 802061e:	2b16      	cmp	r3, #22
 8020620:	d101      	bne.n	8020626 <__sflush_r+0xb6>
 8020622:	602f      	str	r7, [r5, #0]
 8020624:	e7b1      	b.n	802058a <__sflush_r+0x1a>
 8020626:	89a3      	ldrh	r3, [r4, #12]
 8020628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802062c:	81a3      	strh	r3, [r4, #12]
 802062e:	e7ad      	b.n	802058c <__sflush_r+0x1c>
 8020630:	690f      	ldr	r7, [r1, #16]
 8020632:	2f00      	cmp	r7, #0
 8020634:	d0a9      	beq.n	802058a <__sflush_r+0x1a>
 8020636:	0793      	lsls	r3, r2, #30
 8020638:	680e      	ldr	r6, [r1, #0]
 802063a:	bf08      	it	eq
 802063c:	694b      	ldreq	r3, [r1, #20]
 802063e:	600f      	str	r7, [r1, #0]
 8020640:	bf18      	it	ne
 8020642:	2300      	movne	r3, #0
 8020644:	eba6 0807 	sub.w	r8, r6, r7
 8020648:	608b      	str	r3, [r1, #8]
 802064a:	f1b8 0f00 	cmp.w	r8, #0
 802064e:	dd9c      	ble.n	802058a <__sflush_r+0x1a>
 8020650:	6a21      	ldr	r1, [r4, #32]
 8020652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020654:	4643      	mov	r3, r8
 8020656:	463a      	mov	r2, r7
 8020658:	4628      	mov	r0, r5
 802065a:	47b0      	blx	r6
 802065c:	2800      	cmp	r0, #0
 802065e:	dc06      	bgt.n	802066e <__sflush_r+0xfe>
 8020660:	89a3      	ldrh	r3, [r4, #12]
 8020662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020666:	81a3      	strh	r3, [r4, #12]
 8020668:	f04f 30ff 	mov.w	r0, #4294967295
 802066c:	e78e      	b.n	802058c <__sflush_r+0x1c>
 802066e:	4407      	add	r7, r0
 8020670:	eba8 0800 	sub.w	r8, r8, r0
 8020674:	e7e9      	b.n	802064a <__sflush_r+0xda>
 8020676:	bf00      	nop
 8020678:	20400001 	.word	0x20400001

0802067c <_fflush_r>:
 802067c:	b538      	push	{r3, r4, r5, lr}
 802067e:	690b      	ldr	r3, [r1, #16]
 8020680:	4605      	mov	r5, r0
 8020682:	460c      	mov	r4, r1
 8020684:	b913      	cbnz	r3, 802068c <_fflush_r+0x10>
 8020686:	2500      	movs	r5, #0
 8020688:	4628      	mov	r0, r5
 802068a:	bd38      	pop	{r3, r4, r5, pc}
 802068c:	b118      	cbz	r0, 8020696 <_fflush_r+0x1a>
 802068e:	6983      	ldr	r3, [r0, #24]
 8020690:	b90b      	cbnz	r3, 8020696 <_fflush_r+0x1a>
 8020692:	f000 f899 	bl	80207c8 <__sinit>
 8020696:	4b14      	ldr	r3, [pc, #80]	; (80206e8 <_fflush_r+0x6c>)
 8020698:	429c      	cmp	r4, r3
 802069a:	d11b      	bne.n	80206d4 <_fflush_r+0x58>
 802069c:	686c      	ldr	r4, [r5, #4]
 802069e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d0ef      	beq.n	8020686 <_fflush_r+0xa>
 80206a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80206a8:	07d0      	lsls	r0, r2, #31
 80206aa:	d404      	bmi.n	80206b6 <_fflush_r+0x3a>
 80206ac:	0599      	lsls	r1, r3, #22
 80206ae:	d402      	bmi.n	80206b6 <_fflush_r+0x3a>
 80206b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206b2:	f000 fc3c 	bl	8020f2e <__retarget_lock_acquire_recursive>
 80206b6:	4628      	mov	r0, r5
 80206b8:	4621      	mov	r1, r4
 80206ba:	f7ff ff59 	bl	8020570 <__sflush_r>
 80206be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80206c0:	07da      	lsls	r2, r3, #31
 80206c2:	4605      	mov	r5, r0
 80206c4:	d4e0      	bmi.n	8020688 <_fflush_r+0xc>
 80206c6:	89a3      	ldrh	r3, [r4, #12]
 80206c8:	059b      	lsls	r3, r3, #22
 80206ca:	d4dd      	bmi.n	8020688 <_fflush_r+0xc>
 80206cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80206ce:	f000 fc30 	bl	8020f32 <__retarget_lock_release_recursive>
 80206d2:	e7d9      	b.n	8020688 <_fflush_r+0xc>
 80206d4:	4b05      	ldr	r3, [pc, #20]	; (80206ec <_fflush_r+0x70>)
 80206d6:	429c      	cmp	r4, r3
 80206d8:	d101      	bne.n	80206de <_fflush_r+0x62>
 80206da:	68ac      	ldr	r4, [r5, #8]
 80206dc:	e7df      	b.n	802069e <_fflush_r+0x22>
 80206de:	4b04      	ldr	r3, [pc, #16]	; (80206f0 <_fflush_r+0x74>)
 80206e0:	429c      	cmp	r4, r3
 80206e2:	bf08      	it	eq
 80206e4:	68ec      	ldreq	r4, [r5, #12]
 80206e6:	e7da      	b.n	802069e <_fflush_r+0x22>
 80206e8:	0802a32c 	.word	0x0802a32c
 80206ec:	0802a34c 	.word	0x0802a34c
 80206f0:	0802a30c 	.word	0x0802a30c

080206f4 <fflush>:
 80206f4:	4601      	mov	r1, r0
 80206f6:	b920      	cbnz	r0, 8020702 <fflush+0xe>
 80206f8:	4b04      	ldr	r3, [pc, #16]	; (802070c <fflush+0x18>)
 80206fa:	4905      	ldr	r1, [pc, #20]	; (8020710 <fflush+0x1c>)
 80206fc:	6818      	ldr	r0, [r3, #0]
 80206fe:	f000 babb 	b.w	8020c78 <_fwalk_reent>
 8020702:	4b04      	ldr	r3, [pc, #16]	; (8020714 <fflush+0x20>)
 8020704:	6818      	ldr	r0, [r3, #0]
 8020706:	f7ff bfb9 	b.w	802067c <_fflush_r>
 802070a:	bf00      	nop
 802070c:	0802a36c 	.word	0x0802a36c
 8020710:	0802067d 	.word	0x0802067d
 8020714:	20000108 	.word	0x20000108

08020718 <std>:
 8020718:	2300      	movs	r3, #0
 802071a:	b510      	push	{r4, lr}
 802071c:	4604      	mov	r4, r0
 802071e:	e9c0 3300 	strd	r3, r3, [r0]
 8020722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020726:	6083      	str	r3, [r0, #8]
 8020728:	8181      	strh	r1, [r0, #12]
 802072a:	6643      	str	r3, [r0, #100]	; 0x64
 802072c:	81c2      	strh	r2, [r0, #14]
 802072e:	6183      	str	r3, [r0, #24]
 8020730:	4619      	mov	r1, r3
 8020732:	2208      	movs	r2, #8
 8020734:	305c      	adds	r0, #92	; 0x5c
 8020736:	f000 fc7f 	bl	8021038 <memset>
 802073a:	4b05      	ldr	r3, [pc, #20]	; (8020750 <std+0x38>)
 802073c:	6263      	str	r3, [r4, #36]	; 0x24
 802073e:	4b05      	ldr	r3, [pc, #20]	; (8020754 <std+0x3c>)
 8020740:	62a3      	str	r3, [r4, #40]	; 0x28
 8020742:	4b05      	ldr	r3, [pc, #20]	; (8020758 <std+0x40>)
 8020744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020746:	4b05      	ldr	r3, [pc, #20]	; (802075c <std+0x44>)
 8020748:	6224      	str	r4, [r4, #32]
 802074a:	6323      	str	r3, [r4, #48]	; 0x30
 802074c:	bd10      	pop	{r4, pc}
 802074e:	bf00      	nop
 8020750:	080213e1 	.word	0x080213e1
 8020754:	08021407 	.word	0x08021407
 8020758:	0802143f 	.word	0x0802143f
 802075c:	08021463 	.word	0x08021463

08020760 <_cleanup_r>:
 8020760:	4901      	ldr	r1, [pc, #4]	; (8020768 <_cleanup_r+0x8>)
 8020762:	f000 ba89 	b.w	8020c78 <_fwalk_reent>
 8020766:	bf00      	nop
 8020768:	0802067d 	.word	0x0802067d

0802076c <__sfmoreglue>:
 802076c:	b570      	push	{r4, r5, r6, lr}
 802076e:	1e4a      	subs	r2, r1, #1
 8020770:	2568      	movs	r5, #104	; 0x68
 8020772:	4355      	muls	r5, r2
 8020774:	460e      	mov	r6, r1
 8020776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802077a:	f000 fcc5 	bl	8021108 <_malloc_r>
 802077e:	4604      	mov	r4, r0
 8020780:	b140      	cbz	r0, 8020794 <__sfmoreglue+0x28>
 8020782:	2100      	movs	r1, #0
 8020784:	e9c0 1600 	strd	r1, r6, [r0]
 8020788:	300c      	adds	r0, #12
 802078a:	60a0      	str	r0, [r4, #8]
 802078c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020790:	f000 fc52 	bl	8021038 <memset>
 8020794:	4620      	mov	r0, r4
 8020796:	bd70      	pop	{r4, r5, r6, pc}

08020798 <__sfp_lock_acquire>:
 8020798:	4801      	ldr	r0, [pc, #4]	; (80207a0 <__sfp_lock_acquire+0x8>)
 802079a:	f000 bbc8 	b.w	8020f2e <__retarget_lock_acquire_recursive>
 802079e:	bf00      	nop
 80207a0:	20001010 	.word	0x20001010

080207a4 <__sfp_lock_release>:
 80207a4:	4801      	ldr	r0, [pc, #4]	; (80207ac <__sfp_lock_release+0x8>)
 80207a6:	f000 bbc4 	b.w	8020f32 <__retarget_lock_release_recursive>
 80207aa:	bf00      	nop
 80207ac:	20001010 	.word	0x20001010

080207b0 <__sinit_lock_acquire>:
 80207b0:	4801      	ldr	r0, [pc, #4]	; (80207b8 <__sinit_lock_acquire+0x8>)
 80207b2:	f000 bbbc 	b.w	8020f2e <__retarget_lock_acquire_recursive>
 80207b6:	bf00      	nop
 80207b8:	2000100b 	.word	0x2000100b

080207bc <__sinit_lock_release>:
 80207bc:	4801      	ldr	r0, [pc, #4]	; (80207c4 <__sinit_lock_release+0x8>)
 80207be:	f000 bbb8 	b.w	8020f32 <__retarget_lock_release_recursive>
 80207c2:	bf00      	nop
 80207c4:	2000100b 	.word	0x2000100b

080207c8 <__sinit>:
 80207c8:	b510      	push	{r4, lr}
 80207ca:	4604      	mov	r4, r0
 80207cc:	f7ff fff0 	bl	80207b0 <__sinit_lock_acquire>
 80207d0:	69a3      	ldr	r3, [r4, #24]
 80207d2:	b11b      	cbz	r3, 80207dc <__sinit+0x14>
 80207d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80207d8:	f7ff bff0 	b.w	80207bc <__sinit_lock_release>
 80207dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80207e0:	6523      	str	r3, [r4, #80]	; 0x50
 80207e2:	4b13      	ldr	r3, [pc, #76]	; (8020830 <__sinit+0x68>)
 80207e4:	4a13      	ldr	r2, [pc, #76]	; (8020834 <__sinit+0x6c>)
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80207ea:	42a3      	cmp	r3, r4
 80207ec:	bf04      	itt	eq
 80207ee:	2301      	moveq	r3, #1
 80207f0:	61a3      	streq	r3, [r4, #24]
 80207f2:	4620      	mov	r0, r4
 80207f4:	f000 f820 	bl	8020838 <__sfp>
 80207f8:	6060      	str	r0, [r4, #4]
 80207fa:	4620      	mov	r0, r4
 80207fc:	f000 f81c 	bl	8020838 <__sfp>
 8020800:	60a0      	str	r0, [r4, #8]
 8020802:	4620      	mov	r0, r4
 8020804:	f000 f818 	bl	8020838 <__sfp>
 8020808:	2200      	movs	r2, #0
 802080a:	60e0      	str	r0, [r4, #12]
 802080c:	2104      	movs	r1, #4
 802080e:	6860      	ldr	r0, [r4, #4]
 8020810:	f7ff ff82 	bl	8020718 <std>
 8020814:	68a0      	ldr	r0, [r4, #8]
 8020816:	2201      	movs	r2, #1
 8020818:	2109      	movs	r1, #9
 802081a:	f7ff ff7d 	bl	8020718 <std>
 802081e:	68e0      	ldr	r0, [r4, #12]
 8020820:	2202      	movs	r2, #2
 8020822:	2112      	movs	r1, #18
 8020824:	f7ff ff78 	bl	8020718 <std>
 8020828:	2301      	movs	r3, #1
 802082a:	61a3      	str	r3, [r4, #24]
 802082c:	e7d2      	b.n	80207d4 <__sinit+0xc>
 802082e:	bf00      	nop
 8020830:	0802a36c 	.word	0x0802a36c
 8020834:	08020761 	.word	0x08020761

08020838 <__sfp>:
 8020838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802083a:	4607      	mov	r7, r0
 802083c:	f7ff ffac 	bl	8020798 <__sfp_lock_acquire>
 8020840:	4b1e      	ldr	r3, [pc, #120]	; (80208bc <__sfp+0x84>)
 8020842:	681e      	ldr	r6, [r3, #0]
 8020844:	69b3      	ldr	r3, [r6, #24]
 8020846:	b913      	cbnz	r3, 802084e <__sfp+0x16>
 8020848:	4630      	mov	r0, r6
 802084a:	f7ff ffbd 	bl	80207c8 <__sinit>
 802084e:	3648      	adds	r6, #72	; 0x48
 8020850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020854:	3b01      	subs	r3, #1
 8020856:	d503      	bpl.n	8020860 <__sfp+0x28>
 8020858:	6833      	ldr	r3, [r6, #0]
 802085a:	b30b      	cbz	r3, 80208a0 <__sfp+0x68>
 802085c:	6836      	ldr	r6, [r6, #0]
 802085e:	e7f7      	b.n	8020850 <__sfp+0x18>
 8020860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020864:	b9d5      	cbnz	r5, 802089c <__sfp+0x64>
 8020866:	4b16      	ldr	r3, [pc, #88]	; (80208c0 <__sfp+0x88>)
 8020868:	60e3      	str	r3, [r4, #12]
 802086a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802086e:	6665      	str	r5, [r4, #100]	; 0x64
 8020870:	f000 fb5a 	bl	8020f28 <__retarget_lock_init_recursive>
 8020874:	f7ff ff96 	bl	80207a4 <__sfp_lock_release>
 8020878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802087c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020880:	6025      	str	r5, [r4, #0]
 8020882:	61a5      	str	r5, [r4, #24]
 8020884:	2208      	movs	r2, #8
 8020886:	4629      	mov	r1, r5
 8020888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802088c:	f000 fbd4 	bl	8021038 <memset>
 8020890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020898:	4620      	mov	r0, r4
 802089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802089c:	3468      	adds	r4, #104	; 0x68
 802089e:	e7d9      	b.n	8020854 <__sfp+0x1c>
 80208a0:	2104      	movs	r1, #4
 80208a2:	4638      	mov	r0, r7
 80208a4:	f7ff ff62 	bl	802076c <__sfmoreglue>
 80208a8:	4604      	mov	r4, r0
 80208aa:	6030      	str	r0, [r6, #0]
 80208ac:	2800      	cmp	r0, #0
 80208ae:	d1d5      	bne.n	802085c <__sfp+0x24>
 80208b0:	f7ff ff78 	bl	80207a4 <__sfp_lock_release>
 80208b4:	230c      	movs	r3, #12
 80208b6:	603b      	str	r3, [r7, #0]
 80208b8:	e7ee      	b.n	8020898 <__sfp+0x60>
 80208ba:	bf00      	nop
 80208bc:	0802a36c 	.word	0x0802a36c
 80208c0:	ffff0001 	.word	0xffff0001

080208c4 <_fopen_r>:
 80208c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80208c6:	460f      	mov	r7, r1
 80208c8:	4611      	mov	r1, r2
 80208ca:	aa01      	add	r2, sp, #4
 80208cc:	4605      	mov	r5, r0
 80208ce:	f002 f837 	bl	8022940 <__sflags>
 80208d2:	4606      	mov	r6, r0
 80208d4:	b918      	cbnz	r0, 80208de <_fopen_r+0x1a>
 80208d6:	2400      	movs	r4, #0
 80208d8:	4620      	mov	r0, r4
 80208da:	b003      	add	sp, #12
 80208dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208de:	4628      	mov	r0, r5
 80208e0:	f7ff ffaa 	bl	8020838 <__sfp>
 80208e4:	4604      	mov	r4, r0
 80208e6:	2800      	cmp	r0, #0
 80208e8:	d0f5      	beq.n	80208d6 <_fopen_r+0x12>
 80208ea:	4639      	mov	r1, r7
 80208ec:	9a01      	ldr	r2, [sp, #4]
 80208ee:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80208f2:	4628      	mov	r0, r5
 80208f4:	f000 fc62 	bl	80211bc <_open_r>
 80208f8:	1e07      	subs	r7, r0, #0
 80208fa:	da09      	bge.n	8020910 <_fopen_r+0x4c>
 80208fc:	2500      	movs	r5, #0
 80208fe:	f7ff ff4b 	bl	8020798 <__sfp_lock_acquire>
 8020902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020904:	81a5      	strh	r5, [r4, #12]
 8020906:	f000 fb10 	bl	8020f2a <__retarget_lock_close_recursive>
 802090a:	f7ff ff4b 	bl	80207a4 <__sfp_lock_release>
 802090e:	e7e2      	b.n	80208d6 <_fopen_r+0x12>
 8020910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020912:	07db      	lsls	r3, r3, #31
 8020914:	d405      	bmi.n	8020922 <_fopen_r+0x5e>
 8020916:	89a3      	ldrh	r3, [r4, #12]
 8020918:	0598      	lsls	r0, r3, #22
 802091a:	d402      	bmi.n	8020922 <_fopen_r+0x5e>
 802091c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802091e:	f000 fb06 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8020922:	4b0e      	ldr	r3, [pc, #56]	; (802095c <_fopen_r+0x98>)
 8020924:	6263      	str	r3, [r4, #36]	; 0x24
 8020926:	4b0e      	ldr	r3, [pc, #56]	; (8020960 <_fopen_r+0x9c>)
 8020928:	62a3      	str	r3, [r4, #40]	; 0x28
 802092a:	4b0e      	ldr	r3, [pc, #56]	; (8020964 <_fopen_r+0xa0>)
 802092c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802092e:	05f1      	lsls	r1, r6, #23
 8020930:	4b0d      	ldr	r3, [pc, #52]	; (8020968 <_fopen_r+0xa4>)
 8020932:	81e7      	strh	r7, [r4, #14]
 8020934:	81a6      	strh	r6, [r4, #12]
 8020936:	6224      	str	r4, [r4, #32]
 8020938:	6323      	str	r3, [r4, #48]	; 0x30
 802093a:	d505      	bpl.n	8020948 <_fopen_r+0x84>
 802093c:	2302      	movs	r3, #2
 802093e:	2200      	movs	r2, #0
 8020940:	4621      	mov	r1, r4
 8020942:	4628      	mov	r0, r5
 8020944:	f000 f888 	bl	8020a58 <_fseek_r>
 8020948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802094a:	07da      	lsls	r2, r3, #31
 802094c:	d4c4      	bmi.n	80208d8 <_fopen_r+0x14>
 802094e:	89a3      	ldrh	r3, [r4, #12]
 8020950:	059b      	lsls	r3, r3, #22
 8020952:	d4c1      	bmi.n	80208d8 <_fopen_r+0x14>
 8020954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020956:	f000 faec 	bl	8020f32 <__retarget_lock_release_recursive>
 802095a:	e7bd      	b.n	80208d8 <_fopen_r+0x14>
 802095c:	080213e1 	.word	0x080213e1
 8020960:	08021407 	.word	0x08021407
 8020964:	0802143f 	.word	0x0802143f
 8020968:	08021463 	.word	0x08021463

0802096c <fopen>:
 802096c:	4b02      	ldr	r3, [pc, #8]	; (8020978 <fopen+0xc>)
 802096e:	460a      	mov	r2, r1
 8020970:	4601      	mov	r1, r0
 8020972:	6818      	ldr	r0, [r3, #0]
 8020974:	f7ff bfa6 	b.w	80208c4 <_fopen_r>
 8020978:	20000108 	.word	0x20000108

0802097c <_fputs_r>:
 802097c:	b570      	push	{r4, r5, r6, lr}
 802097e:	460e      	mov	r6, r1
 8020980:	4614      	mov	r4, r2
 8020982:	4605      	mov	r5, r0
 8020984:	b118      	cbz	r0, 802098e <_fputs_r+0x12>
 8020986:	6983      	ldr	r3, [r0, #24]
 8020988:	b90b      	cbnz	r3, 802098e <_fputs_r+0x12>
 802098a:	f7ff ff1d 	bl	80207c8 <__sinit>
 802098e:	4b2b      	ldr	r3, [pc, #172]	; (8020a3c <_fputs_r+0xc0>)
 8020990:	429c      	cmp	r4, r3
 8020992:	d11e      	bne.n	80209d2 <_fputs_r+0x56>
 8020994:	686c      	ldr	r4, [r5, #4]
 8020996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020998:	07da      	lsls	r2, r3, #31
 802099a:	d405      	bmi.n	80209a8 <_fputs_r+0x2c>
 802099c:	89a3      	ldrh	r3, [r4, #12]
 802099e:	059b      	lsls	r3, r3, #22
 80209a0:	d402      	bmi.n	80209a8 <_fputs_r+0x2c>
 80209a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209a4:	f000 fac3 	bl	8020f2e <__retarget_lock_acquire_recursive>
 80209a8:	89a3      	ldrh	r3, [r4, #12]
 80209aa:	0718      	lsls	r0, r3, #28
 80209ac:	d51b      	bpl.n	80209e6 <_fputs_r+0x6a>
 80209ae:	6923      	ldr	r3, [r4, #16]
 80209b0:	b1cb      	cbz	r3, 80209e6 <_fputs_r+0x6a>
 80209b2:	3e01      	subs	r6, #1
 80209b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80209b8:	bb39      	cbnz	r1, 8020a0a <_fputs_r+0x8e>
 80209ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80209bc:	f015 0501 	ands.w	r5, r5, #1
 80209c0:	d139      	bne.n	8020a36 <_fputs_r+0xba>
 80209c2:	89a3      	ldrh	r3, [r4, #12]
 80209c4:	0599      	lsls	r1, r3, #22
 80209c6:	d402      	bmi.n	80209ce <_fputs_r+0x52>
 80209c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80209ca:	f000 fab2 	bl	8020f32 <__retarget_lock_release_recursive>
 80209ce:	4628      	mov	r0, r5
 80209d0:	bd70      	pop	{r4, r5, r6, pc}
 80209d2:	4b1b      	ldr	r3, [pc, #108]	; (8020a40 <_fputs_r+0xc4>)
 80209d4:	429c      	cmp	r4, r3
 80209d6:	d101      	bne.n	80209dc <_fputs_r+0x60>
 80209d8:	68ac      	ldr	r4, [r5, #8]
 80209da:	e7dc      	b.n	8020996 <_fputs_r+0x1a>
 80209dc:	4b19      	ldr	r3, [pc, #100]	; (8020a44 <_fputs_r+0xc8>)
 80209de:	429c      	cmp	r4, r3
 80209e0:	bf08      	it	eq
 80209e2:	68ec      	ldreq	r4, [r5, #12]
 80209e4:	e7d7      	b.n	8020996 <_fputs_r+0x1a>
 80209e6:	4621      	mov	r1, r4
 80209e8:	4628      	mov	r0, r5
 80209ea:	f001 fea7 	bl	802273c <__swsetup_r>
 80209ee:	2800      	cmp	r0, #0
 80209f0:	d0df      	beq.n	80209b2 <_fputs_r+0x36>
 80209f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80209f4:	07da      	lsls	r2, r3, #31
 80209f6:	d405      	bmi.n	8020a04 <_fputs_r+0x88>
 80209f8:	89a3      	ldrh	r3, [r4, #12]
 80209fa:	059b      	lsls	r3, r3, #22
 80209fc:	d402      	bmi.n	8020a04 <_fputs_r+0x88>
 80209fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a00:	f000 fa97 	bl	8020f32 <__retarget_lock_release_recursive>
 8020a04:	f04f 35ff 	mov.w	r5, #4294967295
 8020a08:	e7e1      	b.n	80209ce <_fputs_r+0x52>
 8020a0a:	68a3      	ldr	r3, [r4, #8]
 8020a0c:	3b01      	subs	r3, #1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	60a3      	str	r3, [r4, #8]
 8020a12:	da04      	bge.n	8020a1e <_fputs_r+0xa2>
 8020a14:	69a2      	ldr	r2, [r4, #24]
 8020a16:	4293      	cmp	r3, r2
 8020a18:	db06      	blt.n	8020a28 <_fputs_r+0xac>
 8020a1a:	290a      	cmp	r1, #10
 8020a1c:	d004      	beq.n	8020a28 <_fputs_r+0xac>
 8020a1e:	6823      	ldr	r3, [r4, #0]
 8020a20:	1c5a      	adds	r2, r3, #1
 8020a22:	6022      	str	r2, [r4, #0]
 8020a24:	7019      	strb	r1, [r3, #0]
 8020a26:	e7c5      	b.n	80209b4 <_fputs_r+0x38>
 8020a28:	4622      	mov	r2, r4
 8020a2a:	4628      	mov	r0, r5
 8020a2c:	f001 fe22 	bl	8022674 <__swbuf_r>
 8020a30:	3001      	adds	r0, #1
 8020a32:	d1bf      	bne.n	80209b4 <_fputs_r+0x38>
 8020a34:	e7dd      	b.n	80209f2 <_fputs_r+0x76>
 8020a36:	460d      	mov	r5, r1
 8020a38:	e7c9      	b.n	80209ce <_fputs_r+0x52>
 8020a3a:	bf00      	nop
 8020a3c:	0802a32c 	.word	0x0802a32c
 8020a40:	0802a34c 	.word	0x0802a34c
 8020a44:	0802a30c 	.word	0x0802a30c

08020a48 <fputs>:
 8020a48:	4b02      	ldr	r3, [pc, #8]	; (8020a54 <fputs+0xc>)
 8020a4a:	460a      	mov	r2, r1
 8020a4c:	4601      	mov	r1, r0
 8020a4e:	6818      	ldr	r0, [r3, #0]
 8020a50:	f7ff bf94 	b.w	802097c <_fputs_r>
 8020a54:	20000108 	.word	0x20000108

08020a58 <_fseek_r>:
 8020a58:	f000 b800 	b.w	8020a5c <_fseeko_r>

08020a5c <_fseeko_r>:
 8020a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a60:	460c      	mov	r4, r1
 8020a62:	4617      	mov	r7, r2
 8020a64:	461e      	mov	r6, r3
 8020a66:	4605      	mov	r5, r0
 8020a68:	b118      	cbz	r0, 8020a72 <_fseeko_r+0x16>
 8020a6a:	6983      	ldr	r3, [r0, #24]
 8020a6c:	b90b      	cbnz	r3, 8020a72 <_fseeko_r+0x16>
 8020a6e:	f7ff feab 	bl	80207c8 <__sinit>
 8020a72:	4b44      	ldr	r3, [pc, #272]	; (8020b84 <_fseeko_r+0x128>)
 8020a74:	429c      	cmp	r4, r3
 8020a76:	d122      	bne.n	8020abe <_fseeko_r+0x62>
 8020a78:	686c      	ldr	r4, [r5, #4]
 8020a7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a7c:	07d9      	lsls	r1, r3, #31
 8020a7e:	d405      	bmi.n	8020a8c <_fseeko_r+0x30>
 8020a80:	89a3      	ldrh	r3, [r4, #12]
 8020a82:	059a      	lsls	r2, r3, #22
 8020a84:	d402      	bmi.n	8020a8c <_fseeko_r+0x30>
 8020a86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a88:	f000 fa51 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8020a8c:	89a3      	ldrh	r3, [r4, #12]
 8020a8e:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8020a92:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8020a96:	d103      	bne.n	8020aa0 <_fseeko_r+0x44>
 8020a98:	4621      	mov	r1, r4
 8020a9a:	4628      	mov	r0, r5
 8020a9c:	f7ff fdee 	bl	802067c <_fflush_r>
 8020aa0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8020aa4:	f1b8 0f00 	cmp.w	r8, #0
 8020aa8:	d113      	bne.n	8020ad2 <_fseeko_r+0x76>
 8020aaa:	231d      	movs	r3, #29
 8020aac:	602b      	str	r3, [r5, #0]
 8020aae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020ab0:	07d9      	lsls	r1, r3, #31
 8020ab2:	d55d      	bpl.n	8020b70 <_fseeko_r+0x114>
 8020ab4:	f04f 36ff 	mov.w	r6, #4294967295
 8020ab8:	4630      	mov	r0, r6
 8020aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020abe:	4b32      	ldr	r3, [pc, #200]	; (8020b88 <_fseeko_r+0x12c>)
 8020ac0:	429c      	cmp	r4, r3
 8020ac2:	d101      	bne.n	8020ac8 <_fseeko_r+0x6c>
 8020ac4:	68ac      	ldr	r4, [r5, #8]
 8020ac6:	e7d8      	b.n	8020a7a <_fseeko_r+0x1e>
 8020ac8:	4b30      	ldr	r3, [pc, #192]	; (8020b8c <_fseeko_r+0x130>)
 8020aca:	429c      	cmp	r4, r3
 8020acc:	bf08      	it	eq
 8020ace:	68ec      	ldreq	r4, [r5, #12]
 8020ad0:	e7d3      	b.n	8020a7a <_fseeko_r+0x1e>
 8020ad2:	2e01      	cmp	r6, #1
 8020ad4:	d036      	beq.n	8020b44 <_fseeko_r+0xe8>
 8020ad6:	f036 0302 	bics.w	r3, r6, #2
 8020ada:	d147      	bne.n	8020b6c <_fseeko_r+0x110>
 8020adc:	6923      	ldr	r3, [r4, #16]
 8020ade:	b91b      	cbnz	r3, 8020ae8 <_fseeko_r+0x8c>
 8020ae0:	4621      	mov	r1, r4
 8020ae2:	4628      	mov	r0, r5
 8020ae4:	f000 fa4a 	bl	8020f7c <__smakebuf_r>
 8020ae8:	4621      	mov	r1, r4
 8020aea:	4628      	mov	r0, r5
 8020aec:	f7ff fdc6 	bl	802067c <_fflush_r>
 8020af0:	2800      	cmp	r0, #0
 8020af2:	d1dc      	bne.n	8020aae <_fseeko_r+0x52>
 8020af4:	6a21      	ldr	r1, [r4, #32]
 8020af6:	4633      	mov	r3, r6
 8020af8:	463a      	mov	r2, r7
 8020afa:	4628      	mov	r0, r5
 8020afc:	47c0      	blx	r8
 8020afe:	3001      	adds	r0, #1
 8020b00:	d0d5      	beq.n	8020aae <_fseeko_r+0x52>
 8020b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020b04:	b141      	cbz	r1, 8020b18 <_fseeko_r+0xbc>
 8020b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b0a:	4299      	cmp	r1, r3
 8020b0c:	d002      	beq.n	8020b14 <_fseeko_r+0xb8>
 8020b0e:	4628      	mov	r0, r5
 8020b10:	f000 faaa 	bl	8021068 <_free_r>
 8020b14:	2300      	movs	r3, #0
 8020b16:	6363      	str	r3, [r4, #52]	; 0x34
 8020b18:	6923      	ldr	r3, [r4, #16]
 8020b1a:	6023      	str	r3, [r4, #0]
 8020b1c:	89a3      	ldrh	r3, [r4, #12]
 8020b1e:	2500      	movs	r5, #0
 8020b20:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8020b24:	6065      	str	r5, [r4, #4]
 8020b26:	81a3      	strh	r3, [r4, #12]
 8020b28:	2208      	movs	r2, #8
 8020b2a:	4629      	mov	r1, r5
 8020b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020b30:	f000 fa82 	bl	8021038 <memset>
 8020b34:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8020b36:	f016 0601 	ands.w	r6, r6, #1
 8020b3a:	d120      	bne.n	8020b7e <_fseeko_r+0x122>
 8020b3c:	89a3      	ldrh	r3, [r4, #12]
 8020b3e:	059b      	lsls	r3, r3, #22
 8020b40:	d4ba      	bmi.n	8020ab8 <_fseeko_r+0x5c>
 8020b42:	e00c      	b.n	8020b5e <_fseeko_r+0x102>
 8020b44:	4621      	mov	r1, r4
 8020b46:	4628      	mov	r0, r5
 8020b48:	f000 f822 	bl	8020b90 <_ftello_r>
 8020b4c:	1c43      	adds	r3, r0, #1
 8020b4e:	4606      	mov	r6, r0
 8020b50:	d109      	bne.n	8020b66 <_fseeko_r+0x10a>
 8020b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b54:	07dd      	lsls	r5, r3, #31
 8020b56:	d4ad      	bmi.n	8020ab4 <_fseeko_r+0x58>
 8020b58:	89a3      	ldrh	r3, [r4, #12]
 8020b5a:	0598      	lsls	r0, r3, #22
 8020b5c:	d4aa      	bmi.n	8020ab4 <_fseeko_r+0x58>
 8020b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b60:	f000 f9e7 	bl	8020f32 <__retarget_lock_release_recursive>
 8020b64:	e7a8      	b.n	8020ab8 <_fseeko_r+0x5c>
 8020b66:	4407      	add	r7, r0
 8020b68:	2600      	movs	r6, #0
 8020b6a:	e7b7      	b.n	8020adc <_fseeko_r+0x80>
 8020b6c:	2316      	movs	r3, #22
 8020b6e:	e79d      	b.n	8020aac <_fseeko_r+0x50>
 8020b70:	89a3      	ldrh	r3, [r4, #12]
 8020b72:	059a      	lsls	r2, r3, #22
 8020b74:	d49e      	bmi.n	8020ab4 <_fseeko_r+0x58>
 8020b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b78:	f000 f9db 	bl	8020f32 <__retarget_lock_release_recursive>
 8020b7c:	e79a      	b.n	8020ab4 <_fseeko_r+0x58>
 8020b7e:	462e      	mov	r6, r5
 8020b80:	e79a      	b.n	8020ab8 <_fseeko_r+0x5c>
 8020b82:	bf00      	nop
 8020b84:	0802a32c 	.word	0x0802a32c
 8020b88:	0802a34c 	.word	0x0802a34c
 8020b8c:	0802a30c 	.word	0x0802a30c

08020b90 <_ftello_r>:
 8020b90:	b570      	push	{r4, r5, r6, lr}
 8020b92:	460c      	mov	r4, r1
 8020b94:	4605      	mov	r5, r0
 8020b96:	b118      	cbz	r0, 8020ba0 <_ftello_r+0x10>
 8020b98:	6983      	ldr	r3, [r0, #24]
 8020b9a:	b90b      	cbnz	r3, 8020ba0 <_ftello_r+0x10>
 8020b9c:	f7ff fe14 	bl	80207c8 <__sinit>
 8020ba0:	4b32      	ldr	r3, [pc, #200]	; (8020c6c <_ftello_r+0xdc>)
 8020ba2:	429c      	cmp	r4, r3
 8020ba4:	d114      	bne.n	8020bd0 <_ftello_r+0x40>
 8020ba6:	686c      	ldr	r4, [r5, #4]
 8020ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020baa:	07da      	lsls	r2, r3, #31
 8020bac:	d405      	bmi.n	8020bba <_ftello_r+0x2a>
 8020bae:	89a3      	ldrh	r3, [r4, #12]
 8020bb0:	059b      	lsls	r3, r3, #22
 8020bb2:	d402      	bmi.n	8020bba <_ftello_r+0x2a>
 8020bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bb6:	f000 f9ba 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8020bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020bbc:	b9ce      	cbnz	r6, 8020bf2 <_ftello_r+0x62>
 8020bbe:	231d      	movs	r3, #29
 8020bc0:	602b      	str	r3, [r5, #0]
 8020bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020bc4:	07de      	lsls	r6, r3, #31
 8020bc6:	d50d      	bpl.n	8020be4 <_ftello_r+0x54>
 8020bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8020bcc:	4628      	mov	r0, r5
 8020bce:	bd70      	pop	{r4, r5, r6, pc}
 8020bd0:	4b27      	ldr	r3, [pc, #156]	; (8020c70 <_ftello_r+0xe0>)
 8020bd2:	429c      	cmp	r4, r3
 8020bd4:	d101      	bne.n	8020bda <_ftello_r+0x4a>
 8020bd6:	68ac      	ldr	r4, [r5, #8]
 8020bd8:	e7e6      	b.n	8020ba8 <_ftello_r+0x18>
 8020bda:	4b26      	ldr	r3, [pc, #152]	; (8020c74 <_ftello_r+0xe4>)
 8020bdc:	429c      	cmp	r4, r3
 8020bde:	bf08      	it	eq
 8020be0:	68ec      	ldreq	r4, [r5, #12]
 8020be2:	e7e1      	b.n	8020ba8 <_ftello_r+0x18>
 8020be4:	89a3      	ldrh	r3, [r4, #12]
 8020be6:	059d      	lsls	r5, r3, #22
 8020be8:	d4ee      	bmi.n	8020bc8 <_ftello_r+0x38>
 8020bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020bec:	f000 f9a1 	bl	8020f32 <__retarget_lock_release_recursive>
 8020bf0:	e7ea      	b.n	8020bc8 <_ftello_r+0x38>
 8020bf2:	89a2      	ldrh	r2, [r4, #12]
 8020bf4:	f002 030c 	and.w	r3, r2, #12
 8020bf8:	2b08      	cmp	r3, #8
 8020bfa:	d119      	bne.n	8020c30 <_ftello_r+0xa0>
 8020bfc:	6823      	ldr	r3, [r4, #0]
 8020bfe:	b1bb      	cbz	r3, 8020c30 <_ftello_r+0xa0>
 8020c00:	6921      	ldr	r1, [r4, #16]
 8020c02:	1a5b      	subs	r3, r3, r1
 8020c04:	2b00      	cmp	r3, #0
 8020c06:	dd13      	ble.n	8020c30 <_ftello_r+0xa0>
 8020c08:	05d0      	lsls	r0, r2, #23
 8020c0a:	d511      	bpl.n	8020c30 <_ftello_r+0xa0>
 8020c0c:	2302      	movs	r3, #2
 8020c0e:	2200      	movs	r2, #0
 8020c10:	6a21      	ldr	r1, [r4, #32]
 8020c12:	4628      	mov	r0, r5
 8020c14:	47b0      	blx	r6
 8020c16:	1c41      	adds	r1, r0, #1
 8020c18:	4605      	mov	r5, r0
 8020c1a:	d10d      	bne.n	8020c38 <_ftello_r+0xa8>
 8020c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c1e:	07da      	lsls	r2, r3, #31
 8020c20:	d4d2      	bmi.n	8020bc8 <_ftello_r+0x38>
 8020c22:	89a3      	ldrh	r3, [r4, #12]
 8020c24:	059b      	lsls	r3, r3, #22
 8020c26:	d4cf      	bmi.n	8020bc8 <_ftello_r+0x38>
 8020c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020c2a:	f000 f982 	bl	8020f32 <__retarget_lock_release_recursive>
 8020c2e:	e7cd      	b.n	8020bcc <_ftello_r+0x3c>
 8020c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020c34:	d00f      	beq.n	8020c56 <_ftello_r+0xc6>
 8020c36:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8020c38:	89a2      	ldrh	r2, [r4, #12]
 8020c3a:	0756      	lsls	r6, r2, #29
 8020c3c:	d50d      	bpl.n	8020c5a <_ftello_r+0xca>
 8020c3e:	6863      	ldr	r3, [r4, #4]
 8020c40:	1aed      	subs	r5, r5, r3
 8020c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020c44:	b10b      	cbz	r3, 8020c4a <_ftello_r+0xba>
 8020c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020c48:	1aed      	subs	r5, r5, r3
 8020c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020c4c:	07d9      	lsls	r1, r3, #31
 8020c4e:	d4bd      	bmi.n	8020bcc <_ftello_r+0x3c>
 8020c50:	0593      	lsls	r3, r2, #22
 8020c52:	d4bb      	bmi.n	8020bcc <_ftello_r+0x3c>
 8020c54:	e7e8      	b.n	8020c28 <_ftello_r+0x98>
 8020c56:	2301      	movs	r3, #1
 8020c58:	e7da      	b.n	8020c10 <_ftello_r+0x80>
 8020c5a:	0710      	lsls	r0, r2, #28
 8020c5c:	d5f5      	bpl.n	8020c4a <_ftello_r+0xba>
 8020c5e:	6823      	ldr	r3, [r4, #0]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d0f2      	beq.n	8020c4a <_ftello_r+0xba>
 8020c64:	6921      	ldr	r1, [r4, #16]
 8020c66:	1a5b      	subs	r3, r3, r1
 8020c68:	441d      	add	r5, r3
 8020c6a:	e7ee      	b.n	8020c4a <_ftello_r+0xba>
 8020c6c:	0802a32c 	.word	0x0802a32c
 8020c70:	0802a34c 	.word	0x0802a34c
 8020c74:	0802a30c 	.word	0x0802a30c

08020c78 <_fwalk_reent>:
 8020c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c7c:	4606      	mov	r6, r0
 8020c7e:	4688      	mov	r8, r1
 8020c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020c84:	2700      	movs	r7, #0
 8020c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8020c8e:	d505      	bpl.n	8020c9c <_fwalk_reent+0x24>
 8020c90:	6824      	ldr	r4, [r4, #0]
 8020c92:	2c00      	cmp	r4, #0
 8020c94:	d1f7      	bne.n	8020c86 <_fwalk_reent+0xe>
 8020c96:	4638      	mov	r0, r7
 8020c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020c9c:	89ab      	ldrh	r3, [r5, #12]
 8020c9e:	2b01      	cmp	r3, #1
 8020ca0:	d907      	bls.n	8020cb2 <_fwalk_reent+0x3a>
 8020ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020ca6:	3301      	adds	r3, #1
 8020ca8:	d003      	beq.n	8020cb2 <_fwalk_reent+0x3a>
 8020caa:	4629      	mov	r1, r5
 8020cac:	4630      	mov	r0, r6
 8020cae:	47c0      	blx	r8
 8020cb0:	4307      	orrs	r7, r0
 8020cb2:	3568      	adds	r5, #104	; 0x68
 8020cb4:	e7e9      	b.n	8020c8a <_fwalk_reent+0x12>
	...

08020cb8 <__libc_init_array>:
 8020cb8:	b570      	push	{r4, r5, r6, lr}
 8020cba:	4d0d      	ldr	r5, [pc, #52]	; (8020cf0 <__libc_init_array+0x38>)
 8020cbc:	4c0d      	ldr	r4, [pc, #52]	; (8020cf4 <__libc_init_array+0x3c>)
 8020cbe:	1b64      	subs	r4, r4, r5
 8020cc0:	10a4      	asrs	r4, r4, #2
 8020cc2:	2600      	movs	r6, #0
 8020cc4:	42a6      	cmp	r6, r4
 8020cc6:	d109      	bne.n	8020cdc <__libc_init_array+0x24>
 8020cc8:	4d0b      	ldr	r5, [pc, #44]	; (8020cf8 <__libc_init_array+0x40>)
 8020cca:	4c0c      	ldr	r4, [pc, #48]	; (8020cfc <__libc_init_array+0x44>)
 8020ccc:	f003 f8d6 	bl	8023e7c <_init>
 8020cd0:	1b64      	subs	r4, r4, r5
 8020cd2:	10a4      	asrs	r4, r4, #2
 8020cd4:	2600      	movs	r6, #0
 8020cd6:	42a6      	cmp	r6, r4
 8020cd8:	d105      	bne.n	8020ce6 <__libc_init_array+0x2e>
 8020cda:	bd70      	pop	{r4, r5, r6, pc}
 8020cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8020ce0:	4798      	blx	r3
 8020ce2:	3601      	adds	r6, #1
 8020ce4:	e7ee      	b.n	8020cc4 <__libc_init_array+0xc>
 8020ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8020cea:	4798      	blx	r3
 8020cec:	3601      	adds	r6, #1
 8020cee:	e7f2      	b.n	8020cd6 <__libc_init_array+0x1e>
 8020cf0:	0802a904 	.word	0x0802a904
 8020cf4:	0802a904 	.word	0x0802a904
 8020cf8:	0802a904 	.word	0x0802a904
 8020cfc:	0802a918 	.word	0x0802a918

08020d00 <localtime>:
 8020d00:	b538      	push	{r3, r4, r5, lr}
 8020d02:	4b0b      	ldr	r3, [pc, #44]	; (8020d30 <localtime+0x30>)
 8020d04:	681d      	ldr	r5, [r3, #0]
 8020d06:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020d08:	4604      	mov	r4, r0
 8020d0a:	b953      	cbnz	r3, 8020d22 <localtime+0x22>
 8020d0c:	2024      	movs	r0, #36	; 0x24
 8020d0e:	f000 f975 	bl	8020ffc <malloc>
 8020d12:	4602      	mov	r2, r0
 8020d14:	63e8      	str	r0, [r5, #60]	; 0x3c
 8020d16:	b920      	cbnz	r0, 8020d22 <localtime+0x22>
 8020d18:	4b06      	ldr	r3, [pc, #24]	; (8020d34 <localtime+0x34>)
 8020d1a:	4807      	ldr	r0, [pc, #28]	; (8020d38 <localtime+0x38>)
 8020d1c:	2132      	movs	r1, #50	; 0x32
 8020d1e:	f001 fde1 	bl	80228e4 <__assert_func>
 8020d22:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020d24:	4620      	mov	r0, r4
 8020d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d2a:	f000 b807 	b.w	8020d3c <localtime_r>
 8020d2e:	bf00      	nop
 8020d30:	20000108 	.word	0x20000108
 8020d34:	0802a370 	.word	0x0802a370
 8020d38:	0802a387 	.word	0x0802a387

08020d3c <localtime_r>:
 8020d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020d40:	4607      	mov	r7, r0
 8020d42:	9101      	str	r1, [sp, #4]
 8020d44:	f001 fe98 	bl	8022a78 <__gettzinfo>
 8020d48:	9901      	ldr	r1, [sp, #4]
 8020d4a:	4680      	mov	r8, r0
 8020d4c:	4638      	mov	r0, r7
 8020d4e:	f001 fe97 	bl	8022a80 <gmtime_r>
 8020d52:	6943      	ldr	r3, [r0, #20]
 8020d54:	079a      	lsls	r2, r3, #30
 8020d56:	4604      	mov	r4, r0
 8020d58:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8020d5c:	d105      	bne.n	8020d6a <localtime_r+0x2e>
 8020d5e:	2264      	movs	r2, #100	; 0x64
 8020d60:	fb96 f3f2 	sdiv	r3, r6, r2
 8020d64:	fb02 6313 	mls	r3, r2, r3, r6
 8020d68:	bb7b      	cbnz	r3, 8020dca <localtime_r+0x8e>
 8020d6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020d6e:	fb96 f5f3 	sdiv	r5, r6, r3
 8020d72:	fb03 6515 	mls	r5, r3, r5, r6
 8020d76:	fab5 f585 	clz	r5, r5
 8020d7a:	096d      	lsrs	r5, r5, #5
 8020d7c:	4b68      	ldr	r3, [pc, #416]	; (8020f20 <localtime_r+0x1e4>)
 8020d7e:	2230      	movs	r2, #48	; 0x30
 8020d80:	fb02 3505 	mla	r5, r2, r5, r3
 8020d84:	f001 faae 	bl	80222e4 <__tz_lock>
 8020d88:	f001 fab8 	bl	80222fc <_tzset_unlocked>
 8020d8c:	4b65      	ldr	r3, [pc, #404]	; (8020f24 <localtime_r+0x1e8>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	b353      	cbz	r3, 8020de8 <localtime_r+0xac>
 8020d92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8020d96:	42b3      	cmp	r3, r6
 8020d98:	d119      	bne.n	8020dce <localtime_r+0x92>
 8020d9a:	f8d8 1000 	ldr.w	r1, [r8]
 8020d9e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020da2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8020da6:	b9d1      	cbnz	r1, 8020dde <localtime_r+0xa2>
 8020da8:	4296      	cmp	r6, r2
 8020daa:	eb77 0303 	sbcs.w	r3, r7, r3
 8020dae:	da23      	bge.n	8020df8 <localtime_r+0xbc>
 8020db0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020db4:	4296      	cmp	r6, r2
 8020db6:	eb77 0303 	sbcs.w	r3, r7, r3
 8020dba:	bfb4      	ite	lt
 8020dbc:	2301      	movlt	r3, #1
 8020dbe:	2300      	movge	r3, #0
 8020dc0:	6223      	str	r3, [r4, #32]
 8020dc2:	db1b      	blt.n	8020dfc <localtime_r+0xc0>
 8020dc4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8020dc8:	e01a      	b.n	8020e00 <localtime_r+0xc4>
 8020dca:	2501      	movs	r5, #1
 8020dcc:	e7d6      	b.n	8020d7c <localtime_r+0x40>
 8020dce:	4630      	mov	r0, r6
 8020dd0:	f001 f9e0 	bl	8022194 <__tzcalc_limits>
 8020dd4:	2800      	cmp	r0, #0
 8020dd6:	d1e0      	bne.n	8020d9a <localtime_r+0x5e>
 8020dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8020ddc:	e004      	b.n	8020de8 <localtime_r+0xac>
 8020dde:	4296      	cmp	r6, r2
 8020de0:	eb77 0303 	sbcs.w	r3, r7, r3
 8020de4:	da02      	bge.n	8020dec <localtime_r+0xb0>
 8020de6:	2300      	movs	r3, #0
 8020de8:	6223      	str	r3, [r4, #32]
 8020dea:	e7eb      	b.n	8020dc4 <localtime_r+0x88>
 8020dec:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020df0:	4296      	cmp	r6, r2
 8020df2:	eb77 0303 	sbcs.w	r3, r7, r3
 8020df6:	daf6      	bge.n	8020de6 <localtime_r+0xaa>
 8020df8:	2301      	movs	r3, #1
 8020dfa:	6223      	str	r3, [r4, #32]
 8020dfc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8020e00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020e04:	203c      	movs	r0, #60	; 0x3c
 8020e06:	fb91 f6f3 	sdiv	r6, r1, r3
 8020e0a:	fb03 1316 	mls	r3, r3, r6, r1
 8020e0e:	6861      	ldr	r1, [r4, #4]
 8020e10:	fb93 f2f0 	sdiv	r2, r3, r0
 8020e14:	fb00 3012 	mls	r0, r0, r2, r3
 8020e18:	6823      	ldr	r3, [r4, #0]
 8020e1a:	1a89      	subs	r1, r1, r2
 8020e1c:	68a2      	ldr	r2, [r4, #8]
 8020e1e:	6061      	str	r1, [r4, #4]
 8020e20:	1a1b      	subs	r3, r3, r0
 8020e22:	1b92      	subs	r2, r2, r6
 8020e24:	2b3b      	cmp	r3, #59	; 0x3b
 8020e26:	6023      	str	r3, [r4, #0]
 8020e28:	60a2      	str	r2, [r4, #8]
 8020e2a:	dd35      	ble.n	8020e98 <localtime_r+0x15c>
 8020e2c:	3101      	adds	r1, #1
 8020e2e:	6061      	str	r1, [r4, #4]
 8020e30:	3b3c      	subs	r3, #60	; 0x3c
 8020e32:	6023      	str	r3, [r4, #0]
 8020e34:	6863      	ldr	r3, [r4, #4]
 8020e36:	2b3b      	cmp	r3, #59	; 0x3b
 8020e38:	dd34      	ble.n	8020ea4 <localtime_r+0x168>
 8020e3a:	3201      	adds	r2, #1
 8020e3c:	60a2      	str	r2, [r4, #8]
 8020e3e:	3b3c      	subs	r3, #60	; 0x3c
 8020e40:	6063      	str	r3, [r4, #4]
 8020e42:	68a3      	ldr	r3, [r4, #8]
 8020e44:	2b17      	cmp	r3, #23
 8020e46:	dd33      	ble.n	8020eb0 <localtime_r+0x174>
 8020e48:	69e2      	ldr	r2, [r4, #28]
 8020e4a:	3201      	adds	r2, #1
 8020e4c:	61e2      	str	r2, [r4, #28]
 8020e4e:	69a2      	ldr	r2, [r4, #24]
 8020e50:	3201      	adds	r2, #1
 8020e52:	2a06      	cmp	r2, #6
 8020e54:	bfc8      	it	gt
 8020e56:	2200      	movgt	r2, #0
 8020e58:	61a2      	str	r2, [r4, #24]
 8020e5a:	68e2      	ldr	r2, [r4, #12]
 8020e5c:	3b18      	subs	r3, #24
 8020e5e:	3201      	adds	r2, #1
 8020e60:	60a3      	str	r3, [r4, #8]
 8020e62:	6923      	ldr	r3, [r4, #16]
 8020e64:	60e2      	str	r2, [r4, #12]
 8020e66:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8020e6a:	428a      	cmp	r2, r1
 8020e6c:	dd0e      	ble.n	8020e8c <localtime_r+0x150>
 8020e6e:	2b0b      	cmp	r3, #11
 8020e70:	eba2 0201 	sub.w	r2, r2, r1
 8020e74:	60e2      	str	r2, [r4, #12]
 8020e76:	f103 0201 	add.w	r2, r3, #1
 8020e7a:	bf09      	itett	eq
 8020e7c:	6963      	ldreq	r3, [r4, #20]
 8020e7e:	6122      	strne	r2, [r4, #16]
 8020e80:	2200      	moveq	r2, #0
 8020e82:	3301      	addeq	r3, #1
 8020e84:	bf02      	ittt	eq
 8020e86:	6122      	streq	r2, [r4, #16]
 8020e88:	6163      	streq	r3, [r4, #20]
 8020e8a:	61e2      	streq	r2, [r4, #28]
 8020e8c:	f001 fa30 	bl	80222f0 <__tz_unlock>
 8020e90:	4620      	mov	r0, r4
 8020e92:	b002      	add	sp, #8
 8020e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	dacb      	bge.n	8020e34 <localtime_r+0xf8>
 8020e9c:	3901      	subs	r1, #1
 8020e9e:	6061      	str	r1, [r4, #4]
 8020ea0:	333c      	adds	r3, #60	; 0x3c
 8020ea2:	e7c6      	b.n	8020e32 <localtime_r+0xf6>
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	dacc      	bge.n	8020e42 <localtime_r+0x106>
 8020ea8:	3a01      	subs	r2, #1
 8020eaa:	60a2      	str	r2, [r4, #8]
 8020eac:	333c      	adds	r3, #60	; 0x3c
 8020eae:	e7c7      	b.n	8020e40 <localtime_r+0x104>
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	daeb      	bge.n	8020e8c <localtime_r+0x150>
 8020eb4:	69e2      	ldr	r2, [r4, #28]
 8020eb6:	3a01      	subs	r2, #1
 8020eb8:	61e2      	str	r2, [r4, #28]
 8020eba:	69a2      	ldr	r2, [r4, #24]
 8020ebc:	3a01      	subs	r2, #1
 8020ebe:	bf48      	it	mi
 8020ec0:	2206      	movmi	r2, #6
 8020ec2:	61a2      	str	r2, [r4, #24]
 8020ec4:	68e2      	ldr	r2, [r4, #12]
 8020ec6:	3318      	adds	r3, #24
 8020ec8:	3a01      	subs	r2, #1
 8020eca:	60e2      	str	r2, [r4, #12]
 8020ecc:	60a3      	str	r3, [r4, #8]
 8020ece:	2a00      	cmp	r2, #0
 8020ed0:	d1dc      	bne.n	8020e8c <localtime_r+0x150>
 8020ed2:	6923      	ldr	r3, [r4, #16]
 8020ed4:	3b01      	subs	r3, #1
 8020ed6:	d405      	bmi.n	8020ee4 <localtime_r+0x1a8>
 8020ed8:	6123      	str	r3, [r4, #16]
 8020eda:	6923      	ldr	r3, [r4, #16]
 8020edc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ee0:	60e3      	str	r3, [r4, #12]
 8020ee2:	e7d3      	b.n	8020e8c <localtime_r+0x150>
 8020ee4:	230b      	movs	r3, #11
 8020ee6:	6123      	str	r3, [r4, #16]
 8020ee8:	6963      	ldr	r3, [r4, #20]
 8020eea:	1e5a      	subs	r2, r3, #1
 8020eec:	6162      	str	r2, [r4, #20]
 8020eee:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8020ef2:	0793      	lsls	r3, r2, #30
 8020ef4:	d105      	bne.n	8020f02 <localtime_r+0x1c6>
 8020ef6:	2164      	movs	r1, #100	; 0x64
 8020ef8:	fb92 f3f1 	sdiv	r3, r2, r1
 8020efc:	fb01 2313 	mls	r3, r1, r3, r2
 8020f00:	b963      	cbnz	r3, 8020f1c <localtime_r+0x1e0>
 8020f02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020f06:	fb92 f3f1 	sdiv	r3, r2, r1
 8020f0a:	fb01 2313 	mls	r3, r1, r3, r2
 8020f0e:	fab3 f383 	clz	r3, r3
 8020f12:	095b      	lsrs	r3, r3, #5
 8020f14:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020f18:	61e3      	str	r3, [r4, #28]
 8020f1a:	e7de      	b.n	8020eda <localtime_r+0x19e>
 8020f1c:	2301      	movs	r3, #1
 8020f1e:	e7f9      	b.n	8020f14 <localtime_r+0x1d8>
 8020f20:	0802a3e8 	.word	0x0802a3e8
 8020f24:	20000f6c 	.word	0x20000f6c

08020f28 <__retarget_lock_init_recursive>:
 8020f28:	4770      	bx	lr

08020f2a <__retarget_lock_close_recursive>:
 8020f2a:	4770      	bx	lr

08020f2c <__retarget_lock_acquire>:
 8020f2c:	4770      	bx	lr

08020f2e <__retarget_lock_acquire_recursive>:
 8020f2e:	4770      	bx	lr

08020f30 <__retarget_lock_release>:
 8020f30:	4770      	bx	lr

08020f32 <__retarget_lock_release_recursive>:
 8020f32:	4770      	bx	lr

08020f34 <__swhatbuf_r>:
 8020f34:	b570      	push	{r4, r5, r6, lr}
 8020f36:	460e      	mov	r6, r1
 8020f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020f3c:	2900      	cmp	r1, #0
 8020f3e:	b096      	sub	sp, #88	; 0x58
 8020f40:	4614      	mov	r4, r2
 8020f42:	461d      	mov	r5, r3
 8020f44:	da07      	bge.n	8020f56 <__swhatbuf_r+0x22>
 8020f46:	2300      	movs	r3, #0
 8020f48:	602b      	str	r3, [r5, #0]
 8020f4a:	89b3      	ldrh	r3, [r6, #12]
 8020f4c:	061a      	lsls	r2, r3, #24
 8020f4e:	d410      	bmi.n	8020f72 <__swhatbuf_r+0x3e>
 8020f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020f54:	e00e      	b.n	8020f74 <__swhatbuf_r+0x40>
 8020f56:	466a      	mov	r2, sp
 8020f58:	f001 fd3a 	bl	80229d0 <_fstat_r>
 8020f5c:	2800      	cmp	r0, #0
 8020f5e:	dbf2      	blt.n	8020f46 <__swhatbuf_r+0x12>
 8020f60:	9a01      	ldr	r2, [sp, #4]
 8020f62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020f66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020f6a:	425a      	negs	r2, r3
 8020f6c:	415a      	adcs	r2, r3
 8020f6e:	602a      	str	r2, [r5, #0]
 8020f70:	e7ee      	b.n	8020f50 <__swhatbuf_r+0x1c>
 8020f72:	2340      	movs	r3, #64	; 0x40
 8020f74:	2000      	movs	r0, #0
 8020f76:	6023      	str	r3, [r4, #0]
 8020f78:	b016      	add	sp, #88	; 0x58
 8020f7a:	bd70      	pop	{r4, r5, r6, pc}

08020f7c <__smakebuf_r>:
 8020f7c:	898b      	ldrh	r3, [r1, #12]
 8020f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020f80:	079d      	lsls	r5, r3, #30
 8020f82:	4606      	mov	r6, r0
 8020f84:	460c      	mov	r4, r1
 8020f86:	d507      	bpl.n	8020f98 <__smakebuf_r+0x1c>
 8020f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020f8c:	6023      	str	r3, [r4, #0]
 8020f8e:	6123      	str	r3, [r4, #16]
 8020f90:	2301      	movs	r3, #1
 8020f92:	6163      	str	r3, [r4, #20]
 8020f94:	b002      	add	sp, #8
 8020f96:	bd70      	pop	{r4, r5, r6, pc}
 8020f98:	ab01      	add	r3, sp, #4
 8020f9a:	466a      	mov	r2, sp
 8020f9c:	f7ff ffca 	bl	8020f34 <__swhatbuf_r>
 8020fa0:	9900      	ldr	r1, [sp, #0]
 8020fa2:	4605      	mov	r5, r0
 8020fa4:	4630      	mov	r0, r6
 8020fa6:	f000 f8af 	bl	8021108 <_malloc_r>
 8020faa:	b948      	cbnz	r0, 8020fc0 <__smakebuf_r+0x44>
 8020fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fb0:	059a      	lsls	r2, r3, #22
 8020fb2:	d4ef      	bmi.n	8020f94 <__smakebuf_r+0x18>
 8020fb4:	f023 0303 	bic.w	r3, r3, #3
 8020fb8:	f043 0302 	orr.w	r3, r3, #2
 8020fbc:	81a3      	strh	r3, [r4, #12]
 8020fbe:	e7e3      	b.n	8020f88 <__smakebuf_r+0xc>
 8020fc0:	4b0d      	ldr	r3, [pc, #52]	; (8020ff8 <__smakebuf_r+0x7c>)
 8020fc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8020fc4:	89a3      	ldrh	r3, [r4, #12]
 8020fc6:	6020      	str	r0, [r4, #0]
 8020fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020fcc:	81a3      	strh	r3, [r4, #12]
 8020fce:	9b00      	ldr	r3, [sp, #0]
 8020fd0:	6163      	str	r3, [r4, #20]
 8020fd2:	9b01      	ldr	r3, [sp, #4]
 8020fd4:	6120      	str	r0, [r4, #16]
 8020fd6:	b15b      	cbz	r3, 8020ff0 <__smakebuf_r+0x74>
 8020fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020fdc:	4630      	mov	r0, r6
 8020fde:	f001 fdff 	bl	8022be0 <_isatty_r>
 8020fe2:	b128      	cbz	r0, 8020ff0 <__smakebuf_r+0x74>
 8020fe4:	89a3      	ldrh	r3, [r4, #12]
 8020fe6:	f023 0303 	bic.w	r3, r3, #3
 8020fea:	f043 0301 	orr.w	r3, r3, #1
 8020fee:	81a3      	strh	r3, [r4, #12]
 8020ff0:	89a0      	ldrh	r0, [r4, #12]
 8020ff2:	4305      	orrs	r5, r0
 8020ff4:	81a5      	strh	r5, [r4, #12]
 8020ff6:	e7cd      	b.n	8020f94 <__smakebuf_r+0x18>
 8020ff8:	08020761 	.word	0x08020761

08020ffc <malloc>:
 8020ffc:	4b02      	ldr	r3, [pc, #8]	; (8021008 <malloc+0xc>)
 8020ffe:	4601      	mov	r1, r0
 8021000:	6818      	ldr	r0, [r3, #0]
 8021002:	f000 b881 	b.w	8021108 <_malloc_r>
 8021006:	bf00      	nop
 8021008:	20000108 	.word	0x20000108

0802100c <free>:
 802100c:	4b02      	ldr	r3, [pc, #8]	; (8021018 <free+0xc>)
 802100e:	4601      	mov	r1, r0
 8021010:	6818      	ldr	r0, [r3, #0]
 8021012:	f000 b829 	b.w	8021068 <_free_r>
 8021016:	bf00      	nop
 8021018:	20000108 	.word	0x20000108

0802101c <memcpy>:
 802101c:	440a      	add	r2, r1
 802101e:	4291      	cmp	r1, r2
 8021020:	f100 33ff 	add.w	r3, r0, #4294967295
 8021024:	d100      	bne.n	8021028 <memcpy+0xc>
 8021026:	4770      	bx	lr
 8021028:	b510      	push	{r4, lr}
 802102a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802102e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021032:	4291      	cmp	r1, r2
 8021034:	d1f9      	bne.n	802102a <memcpy+0xe>
 8021036:	bd10      	pop	{r4, pc}

08021038 <memset>:
 8021038:	4402      	add	r2, r0
 802103a:	4603      	mov	r3, r0
 802103c:	4293      	cmp	r3, r2
 802103e:	d100      	bne.n	8021042 <memset+0xa>
 8021040:	4770      	bx	lr
 8021042:	f803 1b01 	strb.w	r1, [r3], #1
 8021046:	e7f9      	b.n	802103c <memset+0x4>

08021048 <_calloc_r>:
 8021048:	b513      	push	{r0, r1, r4, lr}
 802104a:	434a      	muls	r2, r1
 802104c:	4611      	mov	r1, r2
 802104e:	9201      	str	r2, [sp, #4]
 8021050:	f000 f85a 	bl	8021108 <_malloc_r>
 8021054:	4604      	mov	r4, r0
 8021056:	b118      	cbz	r0, 8021060 <_calloc_r+0x18>
 8021058:	9a01      	ldr	r2, [sp, #4]
 802105a:	2100      	movs	r1, #0
 802105c:	f7ff ffec 	bl	8021038 <memset>
 8021060:	4620      	mov	r0, r4
 8021062:	b002      	add	sp, #8
 8021064:	bd10      	pop	{r4, pc}
	...

08021068 <_free_r>:
 8021068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802106a:	2900      	cmp	r1, #0
 802106c:	d048      	beq.n	8021100 <_free_r+0x98>
 802106e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021072:	9001      	str	r0, [sp, #4]
 8021074:	2b00      	cmp	r3, #0
 8021076:	f1a1 0404 	sub.w	r4, r1, #4
 802107a:	bfb8      	it	lt
 802107c:	18e4      	addlt	r4, r4, r3
 802107e:	f001 fde7 	bl	8022c50 <__malloc_lock>
 8021082:	4a20      	ldr	r2, [pc, #128]	; (8021104 <_free_r+0x9c>)
 8021084:	9801      	ldr	r0, [sp, #4]
 8021086:	6813      	ldr	r3, [r2, #0]
 8021088:	4615      	mov	r5, r2
 802108a:	b933      	cbnz	r3, 802109a <_free_r+0x32>
 802108c:	6063      	str	r3, [r4, #4]
 802108e:	6014      	str	r4, [r2, #0]
 8021090:	b003      	add	sp, #12
 8021092:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021096:	f001 bde1 	b.w	8022c5c <__malloc_unlock>
 802109a:	42a3      	cmp	r3, r4
 802109c:	d90b      	bls.n	80210b6 <_free_r+0x4e>
 802109e:	6821      	ldr	r1, [r4, #0]
 80210a0:	1862      	adds	r2, r4, r1
 80210a2:	4293      	cmp	r3, r2
 80210a4:	bf04      	itt	eq
 80210a6:	681a      	ldreq	r2, [r3, #0]
 80210a8:	685b      	ldreq	r3, [r3, #4]
 80210aa:	6063      	str	r3, [r4, #4]
 80210ac:	bf04      	itt	eq
 80210ae:	1852      	addeq	r2, r2, r1
 80210b0:	6022      	streq	r2, [r4, #0]
 80210b2:	602c      	str	r4, [r5, #0]
 80210b4:	e7ec      	b.n	8021090 <_free_r+0x28>
 80210b6:	461a      	mov	r2, r3
 80210b8:	685b      	ldr	r3, [r3, #4]
 80210ba:	b10b      	cbz	r3, 80210c0 <_free_r+0x58>
 80210bc:	42a3      	cmp	r3, r4
 80210be:	d9fa      	bls.n	80210b6 <_free_r+0x4e>
 80210c0:	6811      	ldr	r1, [r2, #0]
 80210c2:	1855      	adds	r5, r2, r1
 80210c4:	42a5      	cmp	r5, r4
 80210c6:	d10b      	bne.n	80210e0 <_free_r+0x78>
 80210c8:	6824      	ldr	r4, [r4, #0]
 80210ca:	4421      	add	r1, r4
 80210cc:	1854      	adds	r4, r2, r1
 80210ce:	42a3      	cmp	r3, r4
 80210d0:	6011      	str	r1, [r2, #0]
 80210d2:	d1dd      	bne.n	8021090 <_free_r+0x28>
 80210d4:	681c      	ldr	r4, [r3, #0]
 80210d6:	685b      	ldr	r3, [r3, #4]
 80210d8:	6053      	str	r3, [r2, #4]
 80210da:	4421      	add	r1, r4
 80210dc:	6011      	str	r1, [r2, #0]
 80210de:	e7d7      	b.n	8021090 <_free_r+0x28>
 80210e0:	d902      	bls.n	80210e8 <_free_r+0x80>
 80210e2:	230c      	movs	r3, #12
 80210e4:	6003      	str	r3, [r0, #0]
 80210e6:	e7d3      	b.n	8021090 <_free_r+0x28>
 80210e8:	6825      	ldr	r5, [r4, #0]
 80210ea:	1961      	adds	r1, r4, r5
 80210ec:	428b      	cmp	r3, r1
 80210ee:	bf04      	itt	eq
 80210f0:	6819      	ldreq	r1, [r3, #0]
 80210f2:	685b      	ldreq	r3, [r3, #4]
 80210f4:	6063      	str	r3, [r4, #4]
 80210f6:	bf04      	itt	eq
 80210f8:	1949      	addeq	r1, r1, r5
 80210fa:	6021      	streq	r1, [r4, #0]
 80210fc:	6054      	str	r4, [r2, #4]
 80210fe:	e7c7      	b.n	8021090 <_free_r+0x28>
 8021100:	b003      	add	sp, #12
 8021102:	bd30      	pop	{r4, r5, pc}
 8021104:	20000f48 	.word	0x20000f48

08021108 <_malloc_r>:
 8021108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802110a:	1ccd      	adds	r5, r1, #3
 802110c:	f025 0503 	bic.w	r5, r5, #3
 8021110:	3508      	adds	r5, #8
 8021112:	2d0c      	cmp	r5, #12
 8021114:	bf38      	it	cc
 8021116:	250c      	movcc	r5, #12
 8021118:	2d00      	cmp	r5, #0
 802111a:	4606      	mov	r6, r0
 802111c:	db01      	blt.n	8021122 <_malloc_r+0x1a>
 802111e:	42a9      	cmp	r1, r5
 8021120:	d903      	bls.n	802112a <_malloc_r+0x22>
 8021122:	230c      	movs	r3, #12
 8021124:	6033      	str	r3, [r6, #0]
 8021126:	2000      	movs	r0, #0
 8021128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802112a:	f001 fd91 	bl	8022c50 <__malloc_lock>
 802112e:	4921      	ldr	r1, [pc, #132]	; (80211b4 <_malloc_r+0xac>)
 8021130:	680a      	ldr	r2, [r1, #0]
 8021132:	4614      	mov	r4, r2
 8021134:	b99c      	cbnz	r4, 802115e <_malloc_r+0x56>
 8021136:	4f20      	ldr	r7, [pc, #128]	; (80211b8 <_malloc_r+0xb0>)
 8021138:	683b      	ldr	r3, [r7, #0]
 802113a:	b923      	cbnz	r3, 8021146 <_malloc_r+0x3e>
 802113c:	4621      	mov	r1, r4
 802113e:	4630      	mov	r0, r6
 8021140:	f000 f8da 	bl	80212f8 <_sbrk_r>
 8021144:	6038      	str	r0, [r7, #0]
 8021146:	4629      	mov	r1, r5
 8021148:	4630      	mov	r0, r6
 802114a:	f000 f8d5 	bl	80212f8 <_sbrk_r>
 802114e:	1c43      	adds	r3, r0, #1
 8021150:	d123      	bne.n	802119a <_malloc_r+0x92>
 8021152:	230c      	movs	r3, #12
 8021154:	6033      	str	r3, [r6, #0]
 8021156:	4630      	mov	r0, r6
 8021158:	f001 fd80 	bl	8022c5c <__malloc_unlock>
 802115c:	e7e3      	b.n	8021126 <_malloc_r+0x1e>
 802115e:	6823      	ldr	r3, [r4, #0]
 8021160:	1b5b      	subs	r3, r3, r5
 8021162:	d417      	bmi.n	8021194 <_malloc_r+0x8c>
 8021164:	2b0b      	cmp	r3, #11
 8021166:	d903      	bls.n	8021170 <_malloc_r+0x68>
 8021168:	6023      	str	r3, [r4, #0]
 802116a:	441c      	add	r4, r3
 802116c:	6025      	str	r5, [r4, #0]
 802116e:	e004      	b.n	802117a <_malloc_r+0x72>
 8021170:	6863      	ldr	r3, [r4, #4]
 8021172:	42a2      	cmp	r2, r4
 8021174:	bf0c      	ite	eq
 8021176:	600b      	streq	r3, [r1, #0]
 8021178:	6053      	strne	r3, [r2, #4]
 802117a:	4630      	mov	r0, r6
 802117c:	f001 fd6e 	bl	8022c5c <__malloc_unlock>
 8021180:	f104 000b 	add.w	r0, r4, #11
 8021184:	1d23      	adds	r3, r4, #4
 8021186:	f020 0007 	bic.w	r0, r0, #7
 802118a:	1ac2      	subs	r2, r0, r3
 802118c:	d0cc      	beq.n	8021128 <_malloc_r+0x20>
 802118e:	1a1b      	subs	r3, r3, r0
 8021190:	50a3      	str	r3, [r4, r2]
 8021192:	e7c9      	b.n	8021128 <_malloc_r+0x20>
 8021194:	4622      	mov	r2, r4
 8021196:	6864      	ldr	r4, [r4, #4]
 8021198:	e7cc      	b.n	8021134 <_malloc_r+0x2c>
 802119a:	1cc4      	adds	r4, r0, #3
 802119c:	f024 0403 	bic.w	r4, r4, #3
 80211a0:	42a0      	cmp	r0, r4
 80211a2:	d0e3      	beq.n	802116c <_malloc_r+0x64>
 80211a4:	1a21      	subs	r1, r4, r0
 80211a6:	4630      	mov	r0, r6
 80211a8:	f000 f8a6 	bl	80212f8 <_sbrk_r>
 80211ac:	3001      	adds	r0, #1
 80211ae:	d1dd      	bne.n	802116c <_malloc_r+0x64>
 80211b0:	e7cf      	b.n	8021152 <_malloc_r+0x4a>
 80211b2:	bf00      	nop
 80211b4:	20000f48 	.word	0x20000f48
 80211b8:	20000f4c 	.word	0x20000f4c

080211bc <_open_r>:
 80211bc:	b538      	push	{r3, r4, r5, lr}
 80211be:	4d07      	ldr	r5, [pc, #28]	; (80211dc <_open_r+0x20>)
 80211c0:	4604      	mov	r4, r0
 80211c2:	4608      	mov	r0, r1
 80211c4:	4611      	mov	r1, r2
 80211c6:	2200      	movs	r2, #0
 80211c8:	602a      	str	r2, [r5, #0]
 80211ca:	461a      	mov	r2, r3
 80211cc:	f7df fe88 	bl	8000ee0 <_open>
 80211d0:	1c43      	adds	r3, r0, #1
 80211d2:	d102      	bne.n	80211da <_open_r+0x1e>
 80211d4:	682b      	ldr	r3, [r5, #0]
 80211d6:	b103      	cbz	r3, 80211da <_open_r+0x1e>
 80211d8:	6023      	str	r3, [r4, #0]
 80211da:	bd38      	pop	{r3, r4, r5, pc}
 80211dc:	20001014 	.word	0x20001014

080211e0 <putchar>:
 80211e0:	4b09      	ldr	r3, [pc, #36]	; (8021208 <putchar+0x28>)
 80211e2:	b513      	push	{r0, r1, r4, lr}
 80211e4:	681c      	ldr	r4, [r3, #0]
 80211e6:	4601      	mov	r1, r0
 80211e8:	b134      	cbz	r4, 80211f8 <putchar+0x18>
 80211ea:	69a3      	ldr	r3, [r4, #24]
 80211ec:	b923      	cbnz	r3, 80211f8 <putchar+0x18>
 80211ee:	9001      	str	r0, [sp, #4]
 80211f0:	4620      	mov	r0, r4
 80211f2:	f7ff fae9 	bl	80207c8 <__sinit>
 80211f6:	9901      	ldr	r1, [sp, #4]
 80211f8:	68a2      	ldr	r2, [r4, #8]
 80211fa:	4620      	mov	r0, r4
 80211fc:	b002      	add	sp, #8
 80211fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021202:	f002 b9a1 	b.w	8023548 <_putc_r>
 8021206:	bf00      	nop
 8021208:	20000108 	.word	0x20000108

0802120c <srand>:
 802120c:	b538      	push	{r3, r4, r5, lr}
 802120e:	4b10      	ldr	r3, [pc, #64]	; (8021250 <srand+0x44>)
 8021210:	681d      	ldr	r5, [r3, #0]
 8021212:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021214:	4604      	mov	r4, r0
 8021216:	b9b3      	cbnz	r3, 8021246 <srand+0x3a>
 8021218:	2018      	movs	r0, #24
 802121a:	f7ff feef 	bl	8020ffc <malloc>
 802121e:	4602      	mov	r2, r0
 8021220:	63a8      	str	r0, [r5, #56]	; 0x38
 8021222:	b920      	cbnz	r0, 802122e <srand+0x22>
 8021224:	4b0b      	ldr	r3, [pc, #44]	; (8021254 <srand+0x48>)
 8021226:	480c      	ldr	r0, [pc, #48]	; (8021258 <srand+0x4c>)
 8021228:	2142      	movs	r1, #66	; 0x42
 802122a:	f001 fb5b 	bl	80228e4 <__assert_func>
 802122e:	490b      	ldr	r1, [pc, #44]	; (802125c <srand+0x50>)
 8021230:	4b0b      	ldr	r3, [pc, #44]	; (8021260 <srand+0x54>)
 8021232:	e9c0 1300 	strd	r1, r3, [r0]
 8021236:	4b0b      	ldr	r3, [pc, #44]	; (8021264 <srand+0x58>)
 8021238:	6083      	str	r3, [r0, #8]
 802123a:	230b      	movs	r3, #11
 802123c:	8183      	strh	r3, [r0, #12]
 802123e:	2100      	movs	r1, #0
 8021240:	2001      	movs	r0, #1
 8021242:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021246:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021248:	2200      	movs	r2, #0
 802124a:	611c      	str	r4, [r3, #16]
 802124c:	615a      	str	r2, [r3, #20]
 802124e:	bd38      	pop	{r3, r4, r5, pc}
 8021250:	20000108 	.word	0x20000108
 8021254:	0802a370 	.word	0x0802a370
 8021258:	0802a448 	.word	0x0802a448
 802125c:	abcd330e 	.word	0xabcd330e
 8021260:	e66d1234 	.word	0xe66d1234
 8021264:	0005deec 	.word	0x0005deec

08021268 <rand>:
 8021268:	4b17      	ldr	r3, [pc, #92]	; (80212c8 <rand+0x60>)
 802126a:	b510      	push	{r4, lr}
 802126c:	681c      	ldr	r4, [r3, #0]
 802126e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021270:	b9b3      	cbnz	r3, 80212a0 <rand+0x38>
 8021272:	2018      	movs	r0, #24
 8021274:	f7ff fec2 	bl	8020ffc <malloc>
 8021278:	63a0      	str	r0, [r4, #56]	; 0x38
 802127a:	b928      	cbnz	r0, 8021288 <rand+0x20>
 802127c:	4602      	mov	r2, r0
 802127e:	4b13      	ldr	r3, [pc, #76]	; (80212cc <rand+0x64>)
 8021280:	4813      	ldr	r0, [pc, #76]	; (80212d0 <rand+0x68>)
 8021282:	214e      	movs	r1, #78	; 0x4e
 8021284:	f001 fb2e 	bl	80228e4 <__assert_func>
 8021288:	4a12      	ldr	r2, [pc, #72]	; (80212d4 <rand+0x6c>)
 802128a:	4b13      	ldr	r3, [pc, #76]	; (80212d8 <rand+0x70>)
 802128c:	e9c0 2300 	strd	r2, r3, [r0]
 8021290:	4b12      	ldr	r3, [pc, #72]	; (80212dc <rand+0x74>)
 8021292:	6083      	str	r3, [r0, #8]
 8021294:	230b      	movs	r3, #11
 8021296:	8183      	strh	r3, [r0, #12]
 8021298:	2201      	movs	r2, #1
 802129a:	2300      	movs	r3, #0
 802129c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80212a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80212a2:	480f      	ldr	r0, [pc, #60]	; (80212e0 <rand+0x78>)
 80212a4:	690a      	ldr	r2, [r1, #16]
 80212a6:	694b      	ldr	r3, [r1, #20]
 80212a8:	4c0e      	ldr	r4, [pc, #56]	; (80212e4 <rand+0x7c>)
 80212aa:	4350      	muls	r0, r2
 80212ac:	fb04 0003 	mla	r0, r4, r3, r0
 80212b0:	fba2 3404 	umull	r3, r4, r2, r4
 80212b4:	1c5a      	adds	r2, r3, #1
 80212b6:	4404      	add	r4, r0
 80212b8:	f144 0000 	adc.w	r0, r4, #0
 80212bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80212c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80212c4:	bd10      	pop	{r4, pc}
 80212c6:	bf00      	nop
 80212c8:	20000108 	.word	0x20000108
 80212cc:	0802a370 	.word	0x0802a370
 80212d0:	0802a448 	.word	0x0802a448
 80212d4:	abcd330e 	.word	0xabcd330e
 80212d8:	e66d1234 	.word	0xe66d1234
 80212dc:	0005deec 	.word	0x0005deec
 80212e0:	5851f42d 	.word	0x5851f42d
 80212e4:	4c957f2d 	.word	0x4c957f2d

080212e8 <realloc>:
 80212e8:	4b02      	ldr	r3, [pc, #8]	; (80212f4 <realloc+0xc>)
 80212ea:	460a      	mov	r2, r1
 80212ec:	4601      	mov	r1, r0
 80212ee:	6818      	ldr	r0, [r3, #0]
 80212f0:	f001 bcba 	b.w	8022c68 <_realloc_r>
 80212f4:	20000108 	.word	0x20000108

080212f8 <_sbrk_r>:
 80212f8:	b538      	push	{r3, r4, r5, lr}
 80212fa:	4d06      	ldr	r5, [pc, #24]	; (8021314 <_sbrk_r+0x1c>)
 80212fc:	2300      	movs	r3, #0
 80212fe:	4604      	mov	r4, r0
 8021300:	4608      	mov	r0, r1
 8021302:	602b      	str	r3, [r5, #0]
 8021304:	f7df fdfa 	bl	8000efc <_sbrk>
 8021308:	1c43      	adds	r3, r0, #1
 802130a:	d102      	bne.n	8021312 <_sbrk_r+0x1a>
 802130c:	682b      	ldr	r3, [r5, #0]
 802130e:	b103      	cbz	r3, 8021312 <_sbrk_r+0x1a>
 8021310:	6023      	str	r3, [r4, #0]
 8021312:	bd38      	pop	{r3, r4, r5, pc}
 8021314:	20001014 	.word	0x20001014

08021318 <_raise_r>:
 8021318:	291f      	cmp	r1, #31
 802131a:	b538      	push	{r3, r4, r5, lr}
 802131c:	4604      	mov	r4, r0
 802131e:	460d      	mov	r5, r1
 8021320:	d904      	bls.n	802132c <_raise_r+0x14>
 8021322:	2316      	movs	r3, #22
 8021324:	6003      	str	r3, [r0, #0]
 8021326:	f04f 30ff 	mov.w	r0, #4294967295
 802132a:	bd38      	pop	{r3, r4, r5, pc}
 802132c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802132e:	b112      	cbz	r2, 8021336 <_raise_r+0x1e>
 8021330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021334:	b94b      	cbnz	r3, 802134a <_raise_r+0x32>
 8021336:	4620      	mov	r0, r4
 8021338:	f000 f830 	bl	802139c <_getpid_r>
 802133c:	462a      	mov	r2, r5
 802133e:	4601      	mov	r1, r0
 8021340:	4620      	mov	r0, r4
 8021342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021346:	f000 b817 	b.w	8021378 <_kill_r>
 802134a:	2b01      	cmp	r3, #1
 802134c:	d00a      	beq.n	8021364 <_raise_r+0x4c>
 802134e:	1c59      	adds	r1, r3, #1
 8021350:	d103      	bne.n	802135a <_raise_r+0x42>
 8021352:	2316      	movs	r3, #22
 8021354:	6003      	str	r3, [r0, #0]
 8021356:	2001      	movs	r0, #1
 8021358:	e7e7      	b.n	802132a <_raise_r+0x12>
 802135a:	2400      	movs	r4, #0
 802135c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021360:	4628      	mov	r0, r5
 8021362:	4798      	blx	r3
 8021364:	2000      	movs	r0, #0
 8021366:	e7e0      	b.n	802132a <_raise_r+0x12>

08021368 <raise>:
 8021368:	4b02      	ldr	r3, [pc, #8]	; (8021374 <raise+0xc>)
 802136a:	4601      	mov	r1, r0
 802136c:	6818      	ldr	r0, [r3, #0]
 802136e:	f7ff bfd3 	b.w	8021318 <_raise_r>
 8021372:	bf00      	nop
 8021374:	20000108 	.word	0x20000108

08021378 <_kill_r>:
 8021378:	b538      	push	{r3, r4, r5, lr}
 802137a:	4d07      	ldr	r5, [pc, #28]	; (8021398 <_kill_r+0x20>)
 802137c:	2300      	movs	r3, #0
 802137e:	4604      	mov	r4, r0
 8021380:	4608      	mov	r0, r1
 8021382:	4611      	mov	r1, r2
 8021384:	602b      	str	r3, [r5, #0]
 8021386:	f7df fd24 	bl	8000dd2 <_kill>
 802138a:	1c43      	adds	r3, r0, #1
 802138c:	d102      	bne.n	8021394 <_kill_r+0x1c>
 802138e:	682b      	ldr	r3, [r5, #0]
 8021390:	b103      	cbz	r3, 8021394 <_kill_r+0x1c>
 8021392:	6023      	str	r3, [r4, #0]
 8021394:	bd38      	pop	{r3, r4, r5, pc}
 8021396:	bf00      	nop
 8021398:	20001014 	.word	0x20001014

0802139c <_getpid_r>:
 802139c:	f7df bd11 	b.w	8000dc2 <_getpid>

080213a0 <siprintf>:
 80213a0:	b40e      	push	{r1, r2, r3}
 80213a2:	b500      	push	{lr}
 80213a4:	b09c      	sub	sp, #112	; 0x70
 80213a6:	ab1d      	add	r3, sp, #116	; 0x74
 80213a8:	9002      	str	r0, [sp, #8]
 80213aa:	9006      	str	r0, [sp, #24]
 80213ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80213b0:	4809      	ldr	r0, [pc, #36]	; (80213d8 <siprintf+0x38>)
 80213b2:	9107      	str	r1, [sp, #28]
 80213b4:	9104      	str	r1, [sp, #16]
 80213b6:	4909      	ldr	r1, [pc, #36]	; (80213dc <siprintf+0x3c>)
 80213b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80213bc:	9105      	str	r1, [sp, #20]
 80213be:	6800      	ldr	r0, [r0, #0]
 80213c0:	9301      	str	r3, [sp, #4]
 80213c2:	a902      	add	r1, sp, #8
 80213c4:	f001 fcd2 	bl	8022d6c <_svfiprintf_r>
 80213c8:	9b02      	ldr	r3, [sp, #8]
 80213ca:	2200      	movs	r2, #0
 80213cc:	701a      	strb	r2, [r3, #0]
 80213ce:	b01c      	add	sp, #112	; 0x70
 80213d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80213d4:	b003      	add	sp, #12
 80213d6:	4770      	bx	lr
 80213d8:	20000108 	.word	0x20000108
 80213dc:	ffff0208 	.word	0xffff0208

080213e0 <__sread>:
 80213e0:	b510      	push	{r4, lr}
 80213e2:	460c      	mov	r4, r1
 80213e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80213e8:	f002 f8f6 	bl	80235d8 <_read_r>
 80213ec:	2800      	cmp	r0, #0
 80213ee:	bfab      	itete	ge
 80213f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80213f2:	89a3      	ldrhlt	r3, [r4, #12]
 80213f4:	181b      	addge	r3, r3, r0
 80213f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80213fa:	bfac      	ite	ge
 80213fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80213fe:	81a3      	strhlt	r3, [r4, #12]
 8021400:	bd10      	pop	{r4, pc}

08021402 <__seofread>:
 8021402:	2000      	movs	r0, #0
 8021404:	4770      	bx	lr

08021406 <__swrite>:
 8021406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802140a:	461f      	mov	r7, r3
 802140c:	898b      	ldrh	r3, [r1, #12]
 802140e:	05db      	lsls	r3, r3, #23
 8021410:	4605      	mov	r5, r0
 8021412:	460c      	mov	r4, r1
 8021414:	4616      	mov	r6, r2
 8021416:	d505      	bpl.n	8021424 <__swrite+0x1e>
 8021418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802141c:	2302      	movs	r3, #2
 802141e:	2200      	movs	r2, #0
 8021420:	f001 fbf2 	bl	8022c08 <_lseek_r>
 8021424:	89a3      	ldrh	r3, [r4, #12]
 8021426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802142a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802142e:	81a3      	strh	r3, [r4, #12]
 8021430:	4632      	mov	r2, r6
 8021432:	463b      	mov	r3, r7
 8021434:	4628      	mov	r0, r5
 8021436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802143a:	f001 b96d 	b.w	8022718 <_write_r>

0802143e <__sseek>:
 802143e:	b510      	push	{r4, lr}
 8021440:	460c      	mov	r4, r1
 8021442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021446:	f001 fbdf 	bl	8022c08 <_lseek_r>
 802144a:	1c43      	adds	r3, r0, #1
 802144c:	89a3      	ldrh	r3, [r4, #12]
 802144e:	bf15      	itete	ne
 8021450:	6560      	strne	r0, [r4, #84]	; 0x54
 8021452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802145a:	81a3      	strheq	r3, [r4, #12]
 802145c:	bf18      	it	ne
 802145e:	81a3      	strhne	r3, [r4, #12]
 8021460:	bd10      	pop	{r4, pc}

08021462 <__sclose>:
 8021462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021466:	f001 ba5b 	b.w	8022920 <_close_r>

0802146a <strcpy>:
 802146a:	4603      	mov	r3, r0
 802146c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021470:	f803 2b01 	strb.w	r2, [r3], #1
 8021474:	2a00      	cmp	r2, #0
 8021476:	d1f9      	bne.n	802146c <strcpy+0x2>
 8021478:	4770      	bx	lr
	...

0802147c <iso_year_adjust>:
 802147c:	6941      	ldr	r1, [r0, #20]
 802147e:	2900      	cmp	r1, #0
 8021480:	f240 736c 	movw	r3, #1900	; 0x76c
 8021484:	bfa8      	it	ge
 8021486:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 802148a:	18ca      	adds	r2, r1, r3
 802148c:	078b      	lsls	r3, r1, #30
 802148e:	d105      	bne.n	802149c <iso_year_adjust+0x20>
 8021490:	2164      	movs	r1, #100	; 0x64
 8021492:	fb92 f3f1 	sdiv	r3, r2, r1
 8021496:	fb01 2313 	mls	r3, r1, r3, r2
 802149a:	b9db      	cbnz	r3, 80214d4 <iso_year_adjust+0x58>
 802149c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80214a0:	fb92 f3f1 	sdiv	r3, r2, r1
 80214a4:	fb01 2313 	mls	r3, r1, r3, r2
 80214a8:	fab3 f383 	clz	r3, r3
 80214ac:	095b      	lsrs	r3, r3, #5
 80214ae:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80214b2:	0040      	lsls	r0, r0, #1
 80214b4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80214b8:	4418      	add	r0, r3
 80214ba:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80214be:	4298      	cmp	r0, r3
 80214c0:	d03a      	beq.n	8021538 <iso_year_adjust+0xbc>
 80214c2:	dc21      	bgt.n	8021508 <iso_year_adjust+0x8c>
 80214c4:	2801      	cmp	r0, #1
 80214c6:	dc1a      	bgt.n	80214fe <iso_year_adjust+0x82>
 80214c8:	2800      	cmp	r0, #0
 80214ca:	bfb4      	ite	lt
 80214cc:	2000      	movlt	r0, #0
 80214ce:	f04f 30ff 	movge.w	r0, #4294967295
 80214d2:	4770      	bx	lr
 80214d4:	2301      	movs	r3, #1
 80214d6:	e7ea      	b.n	80214ae <iso_year_adjust+0x32>
 80214d8:	2817      	cmp	r0, #23
 80214da:	d813      	bhi.n	8021504 <iso_year_adjust+0x88>
 80214dc:	e8df f000 	tbb	[pc, r0]
 80214e0:	0c0c0c0c 	.word	0x0c0c0c0c
 80214e4:	0c0c1212 	.word	0x0c0c1212
 80214e8:	12121212 	.word	0x12121212
 80214ec:	12121212 	.word	0x12121212
 80214f0:	0c0c1212 	.word	0x0c0c1212
 80214f4:	0c0c1212 	.word	0x0c0c1212
 80214f8:	f04f 30ff 	mov.w	r0, #4294967295
 80214fc:	4770      	bx	lr
 80214fe:	380a      	subs	r0, #10
 8021500:	2817      	cmp	r0, #23
 8021502:	d9e9      	bls.n	80214d8 <iso_year_adjust+0x5c>
 8021504:	2000      	movs	r0, #0
 8021506:	4770      	bx	lr
 8021508:	f241 63b4 	movw	r3, #5812	; 0x16b4
 802150c:	4298      	cmp	r0, r3
 802150e:	dc06      	bgt.n	802151e <iso_year_adjust+0xa2>
 8021510:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8021514:	4298      	cmp	r0, r3
 8021516:	bfd4      	ite	le
 8021518:	2000      	movle	r0, #0
 802151a:	2001      	movgt	r0, #1
 802151c:	4770      	bx	lr
 802151e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8021522:	3802      	subs	r0, #2
 8021524:	2815      	cmp	r0, #21
 8021526:	d8ed      	bhi.n	8021504 <iso_year_adjust+0x88>
 8021528:	2301      	movs	r3, #1
 802152a:	4083      	lsls	r3, r0
 802152c:	4803      	ldr	r0, [pc, #12]	; (802153c <iso_year_adjust+0xc0>)
 802152e:	4018      	ands	r0, r3
 8021530:	3800      	subs	r0, #0
 8021532:	bf18      	it	ne
 8021534:	2001      	movne	r0, #1
 8021536:	4770      	bx	lr
 8021538:	2001      	movs	r0, #1
 802153a:	4770      	bx	lr
 802153c:	002a001f 	.word	0x002a001f

08021540 <__strftime>:
 8021540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021544:	b091      	sub	sp, #68	; 0x44
 8021546:	461d      	mov	r5, r3
 8021548:	2300      	movs	r3, #0
 802154a:	4681      	mov	r9, r0
 802154c:	4688      	mov	r8, r1
 802154e:	9304      	str	r3, [sp, #16]
 8021550:	461c      	mov	r4, r3
 8021552:	7813      	ldrb	r3, [r2, #0]
 8021554:	2b00      	cmp	r3, #0
 8021556:	f000 84d1 	beq.w	8021efc <__strftime+0x9bc>
 802155a:	2b25      	cmp	r3, #37	; 0x25
 802155c:	d11b      	bne.n	8021596 <__strftime+0x56>
 802155e:	7857      	ldrb	r7, [r2, #1]
 8021560:	2f30      	cmp	r7, #48	; 0x30
 8021562:	d024      	beq.n	80215ae <__strftime+0x6e>
 8021564:	2f2b      	cmp	r7, #43	; 0x2b
 8021566:	d022      	beq.n	80215ae <__strftime+0x6e>
 8021568:	f102 0b01 	add.w	fp, r2, #1
 802156c:	2700      	movs	r7, #0
 802156e:	f89b 3000 	ldrb.w	r3, [fp]
 8021572:	3b31      	subs	r3, #49	; 0x31
 8021574:	2b08      	cmp	r3, #8
 8021576:	d81d      	bhi.n	80215b4 <__strftime+0x74>
 8021578:	4658      	mov	r0, fp
 802157a:	220a      	movs	r2, #10
 802157c:	a908      	add	r1, sp, #32
 802157e:	f000 fdff 	bl	8022180 <strtoul>
 8021582:	f8dd b020 	ldr.w	fp, [sp, #32]
 8021586:	4606      	mov	r6, r0
 8021588:	f89b 3000 	ldrb.w	r3, [fp]
 802158c:	2b45      	cmp	r3, #69	; 0x45
 802158e:	d113      	bne.n	80215b8 <__strftime+0x78>
 8021590:	f10b 0b01 	add.w	fp, fp, #1
 8021594:	e012      	b.n	80215bc <__strftime+0x7c>
 8021596:	f108 31ff 	add.w	r1, r8, #4294967295
 802159a:	42a1      	cmp	r1, r4
 802159c:	d802      	bhi.n	80215a4 <__strftime+0x64>
 802159e:	2400      	movs	r4, #0
 80215a0:	f000 bcb2 	b.w	8021f08 <__strftime+0x9c8>
 80215a4:	f809 3004 	strb.w	r3, [r9, r4]
 80215a8:	3201      	adds	r2, #1
 80215aa:	3401      	adds	r4, #1
 80215ac:	e7d1      	b.n	8021552 <__strftime+0x12>
 80215ae:	f102 0b02 	add.w	fp, r2, #2
 80215b2:	e7dc      	b.n	802156e <__strftime+0x2e>
 80215b4:	2600      	movs	r6, #0
 80215b6:	e7e7      	b.n	8021588 <__strftime+0x48>
 80215b8:	2b4f      	cmp	r3, #79	; 0x4f
 80215ba:	d0e9      	beq.n	8021590 <__strftime+0x50>
 80215bc:	f89b 0000 	ldrb.w	r0, [fp]
 80215c0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80215c4:	2b55      	cmp	r3, #85	; 0x55
 80215c6:	d8ea      	bhi.n	802159e <__strftime+0x5e>
 80215c8:	a201      	add	r2, pc, #4	; (adr r2, 80215d0 <__strftime+0x90>)
 80215ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215ce:	bf00      	nop
 80215d0:	08021eef 	.word	0x08021eef
 80215d4:	0802159f 	.word	0x0802159f
 80215d8:	0802159f 	.word	0x0802159f
 80215dc:	0802159f 	.word	0x0802159f
 80215e0:	0802159f 	.word	0x0802159f
 80215e4:	0802159f 	.word	0x0802159f
 80215e8:	0802159f 	.word	0x0802159f
 80215ec:	0802159f 	.word	0x0802159f
 80215f0:	0802159f 	.word	0x0802159f
 80215f4:	0802159f 	.word	0x0802159f
 80215f8:	0802159f 	.word	0x0802159f
 80215fc:	0802159f 	.word	0x0802159f
 8021600:	0802159f 	.word	0x0802159f
 8021604:	0802159f 	.word	0x0802159f
 8021608:	0802159f 	.word	0x0802159f
 802160c:	0802159f 	.word	0x0802159f
 8021610:	0802159f 	.word	0x0802159f
 8021614:	0802159f 	.word	0x0802159f
 8021618:	0802159f 	.word	0x0802159f
 802161c:	0802159f 	.word	0x0802159f
 8021620:	0802159f 	.word	0x0802159f
 8021624:	0802159f 	.word	0x0802159f
 8021628:	0802159f 	.word	0x0802159f
 802162c:	0802159f 	.word	0x0802159f
 8021630:	0802159f 	.word	0x0802159f
 8021634:	0802159f 	.word	0x0802159f
 8021638:	0802159f 	.word	0x0802159f
 802163c:	0802159f 	.word	0x0802159f
 8021640:	08021767 	.word	0x08021767
 8021644:	080217c1 	.word	0x080217c1
 8021648:	08021837 	.word	0x08021837
 802164c:	080218d1 	.word	0x080218d1
 8021650:	0802159f 	.word	0x0802159f
 8021654:	0802191d 	.word	0x0802191d
 8021658:	080219fd 	.word	0x080219fd
 802165c:	08021aff 	.word	0x08021aff
 8021660:	08021b0d 	.word	0x08021b0d
 8021664:	0802159f 	.word	0x0802159f
 8021668:	0802159f 	.word	0x0802159f
 802166c:	0802159f 	.word	0x0802159f
 8021670:	08021b3d 	.word	0x08021b3d
 8021674:	0802159f 	.word	0x0802159f
 8021678:	0802159f 	.word	0x0802159f
 802167c:	08021b55 	.word	0x08021b55
 8021680:	0802159f 	.word	0x0802159f
 8021684:	08021ba3 	.word	0x08021ba3
 8021688:	08021cb9 	.word	0x08021cb9
 802168c:	08021ccb 	.word	0x08021ccb
 8021690:	08021d23 	.word	0x08021d23
 8021694:	08021d33 	.word	0x08021d33
 8021698:	08021da9 	.word	0x08021da9
 802169c:	0802182f 	.word	0x0802182f
 80216a0:	08021ddd 	.word	0x08021ddd
 80216a4:	08021e9b 	.word	0x08021e9b
 80216a8:	0802159f 	.word	0x0802159f
 80216ac:	0802159f 	.word	0x0802159f
 80216b0:	0802159f 	.word	0x0802159f
 80216b4:	0802159f 	.word	0x0802159f
 80216b8:	0802159f 	.word	0x0802159f
 80216bc:	0802159f 	.word	0x0802159f
 80216c0:	08021729 	.word	0x08021729
 80216c4:	08021795 	.word	0x08021795
 80216c8:	080217ef 	.word	0x080217ef
 80216cc:	080218a9 	.word	0x080218a9
 80216d0:	080218a9 	.word	0x080218a9
 80216d4:	0802159f 	.word	0x0802159f
 80216d8:	08021965 	.word	0x08021965
 80216dc:	08021795 	.word	0x08021795
 80216e0:	0802159f 	.word	0x0802159f
 80216e4:	08021b2f 	.word	0x08021b2f
 80216e8:	08021aff 	.word	0x08021aff
 80216ec:	08021b0d 	.word	0x08021b0d
 80216f0:	08021b37 	.word	0x08021b37
 80216f4:	08021b41 	.word	0x08021b41
 80216f8:	0802159f 	.word	0x0802159f
 80216fc:	08021b55 	.word	0x08021b55
 8021700:	0802159f 	.word	0x0802159f
 8021704:	0802181f 	.word	0x0802181f
 8021708:	08021bb9 	.word	0x08021bb9
 802170c:	08021cbd 	.word	0x08021cbd
 8021710:	08021d05 	.word	0x08021d05
 8021714:	0802159f 	.word	0x0802159f
 8021718:	08021d99 	.word	0x08021d99
 802171c:	08021827 	.word	0x08021827
 8021720:	08021dc1 	.word	0x08021dc1
 8021724:	08021e2d 	.word	0x08021e2d
 8021728:	69ab      	ldr	r3, [r5, #24]
 802172a:	4aa7      	ldr	r2, [pc, #668]	; (80219c8 <__strftime+0x488>)
 802172c:	3318      	adds	r3, #24
 802172e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021732:	4630      	mov	r0, r6
 8021734:	f7de fd82 	bl	800023c <strlen>
 8021738:	3e01      	subs	r6, #1
 802173a:	4420      	add	r0, r4
 802173c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021740:	42a0      	cmp	r0, r4
 8021742:	d107      	bne.n	8021754 <__strftime+0x214>
 8021744:	f89b 3000 	ldrb.w	r3, [fp]
 8021748:	2b00      	cmp	r3, #0
 802174a:	f000 83d7 	beq.w	8021efc <__strftime+0x9bc>
 802174e:	f10b 0201 	add.w	r2, fp, #1
 8021752:	e6fe      	b.n	8021552 <__strftime+0x12>
 8021754:	42a3      	cmp	r3, r4
 8021756:	f67f af22 	bls.w	802159e <__strftime+0x5e>
 802175a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802175e:	f809 2004 	strb.w	r2, [r9, r4]
 8021762:	3401      	adds	r4, #1
 8021764:	e7ec      	b.n	8021740 <__strftime+0x200>
 8021766:	69aa      	ldr	r2, [r5, #24]
 8021768:	4b97      	ldr	r3, [pc, #604]	; (80219c8 <__strftime+0x488>)
 802176a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802176e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8021770:	4630      	mov	r0, r6
 8021772:	f7de fd63 	bl	800023c <strlen>
 8021776:	3e01      	subs	r6, #1
 8021778:	4420      	add	r0, r4
 802177a:	f108 33ff 	add.w	r3, r8, #4294967295
 802177e:	42a0      	cmp	r0, r4
 8021780:	d0e0      	beq.n	8021744 <__strftime+0x204>
 8021782:	42a3      	cmp	r3, r4
 8021784:	f67f af0b 	bls.w	802159e <__strftime+0x5e>
 8021788:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802178c:	f809 2004 	strb.w	r2, [r9, r4]
 8021790:	3401      	adds	r4, #1
 8021792:	e7f4      	b.n	802177e <__strftime+0x23e>
 8021794:	4b8c      	ldr	r3, [pc, #560]	; (80219c8 <__strftime+0x488>)
 8021796:	692a      	ldr	r2, [r5, #16]
 8021798:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802179c:	4630      	mov	r0, r6
 802179e:	f7de fd4d 	bl	800023c <strlen>
 80217a2:	3e01      	subs	r6, #1
 80217a4:	4420      	add	r0, r4
 80217a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80217aa:	42a0      	cmp	r0, r4
 80217ac:	d0ca      	beq.n	8021744 <__strftime+0x204>
 80217ae:	42a3      	cmp	r3, r4
 80217b0:	f67f aef5 	bls.w	802159e <__strftime+0x5e>
 80217b4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80217b8:	f809 2004 	strb.w	r2, [r9, r4]
 80217bc:	3401      	adds	r4, #1
 80217be:	e7f4      	b.n	80217aa <__strftime+0x26a>
 80217c0:	692b      	ldr	r3, [r5, #16]
 80217c2:	4a81      	ldr	r2, [pc, #516]	; (80219c8 <__strftime+0x488>)
 80217c4:	330c      	adds	r3, #12
 80217c6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80217ca:	4630      	mov	r0, r6
 80217cc:	f7de fd36 	bl	800023c <strlen>
 80217d0:	3e01      	subs	r6, #1
 80217d2:	4420      	add	r0, r4
 80217d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80217d8:	42a0      	cmp	r0, r4
 80217da:	d0b3      	beq.n	8021744 <__strftime+0x204>
 80217dc:	42a3      	cmp	r3, r4
 80217de:	f67f aede 	bls.w	802159e <__strftime+0x5e>
 80217e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80217e6:	f809 2004 	strb.w	r2, [r9, r4]
 80217ea:	3401      	adds	r4, #1
 80217ec:	e7f4      	b.n	80217d8 <__strftime+0x298>
 80217ee:	4b76      	ldr	r3, [pc, #472]	; (80219c8 <__strftime+0x488>)
 80217f0:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80217f4:	4630      	mov	r0, r6
 80217f6:	f7de fd21 	bl	800023c <strlen>
 80217fa:	7833      	ldrb	r3, [r6, #0]
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	d0a1      	beq.n	8021744 <__strftime+0x204>
 8021800:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021802:	9300      	str	r3, [sp, #0]
 8021804:	4632      	mov	r2, r6
 8021806:	462b      	mov	r3, r5
 8021808:	eba8 0104 	sub.w	r1, r8, r4
 802180c:	eb09 0004 	add.w	r0, r9, r4
 8021810:	f7ff fe96 	bl	8021540 <__strftime>
 8021814:	2800      	cmp	r0, #0
 8021816:	f77f aec2 	ble.w	802159e <__strftime+0x5e>
 802181a:	4404      	add	r4, r0
 802181c:	e792      	b.n	8021744 <__strftime+0x204>
 802181e:	4b6a      	ldr	r3, [pc, #424]	; (80219c8 <__strftime+0x488>)
 8021820:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8021824:	e7e6      	b.n	80217f4 <__strftime+0x2b4>
 8021826:	4b68      	ldr	r3, [pc, #416]	; (80219c8 <__strftime+0x488>)
 8021828:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802182c:	e7e2      	b.n	80217f4 <__strftime+0x2b4>
 802182e:	4b66      	ldr	r3, [pc, #408]	; (80219c8 <__strftime+0x488>)
 8021830:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8021834:	e7de      	b.n	80217f4 <__strftime+0x2b4>
 8021836:	4965      	ldr	r1, [pc, #404]	; (80219cc <__strftime+0x48c>)
 8021838:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802183c:	458a      	cmp	sl, r1
 802183e:	bfac      	ite	ge
 8021840:	2100      	movge	r1, #0
 8021842:	2101      	movlt	r1, #1
 8021844:	f1ba 0f00 	cmp.w	sl, #0
 8021848:	db0e      	blt.n	8021868 <__strftime+0x328>
 802184a:	2064      	movs	r0, #100	; 0x64
 802184c:	fb9a f0f0 	sdiv	r0, sl, r0
 8021850:	3013      	adds	r0, #19
 8021852:	b19f      	cbz	r7, 802187c <__strftime+0x33c>
 8021854:	2863      	cmp	r0, #99	; 0x63
 8021856:	dd25      	ble.n	80218a4 <__strftime+0x364>
 8021858:	4a5d      	ldr	r2, [pc, #372]	; (80219d0 <__strftime+0x490>)
 802185a:	4b5e      	ldr	r3, [pc, #376]	; (80219d4 <__strftime+0x494>)
 802185c:	2f2b      	cmp	r7, #43	; 0x2b
 802185e:	bf14      	ite	ne
 8021860:	4617      	movne	r7, r2
 8021862:	461f      	moveq	r7, r3
 8021864:	4a5c      	ldr	r2, [pc, #368]	; (80219d8 <__strftime+0x498>)
 8021866:	e00b      	b.n	8021880 <__strftime+0x340>
 8021868:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802186c:	9105      	str	r1, [sp, #20]
 802186e:	f001 f835 	bl	80228dc <abs>
 8021872:	2364      	movs	r3, #100	; 0x64
 8021874:	9905      	ldr	r1, [sp, #20]
 8021876:	fb90 f0f3 	sdiv	r0, r0, r3
 802187a:	e7ea      	b.n	8021852 <__strftime+0x312>
 802187c:	4f54      	ldr	r7, [pc, #336]	; (80219d0 <__strftime+0x490>)
 802187e:	4a57      	ldr	r2, [pc, #348]	; (80219dc <__strftime+0x49c>)
 8021880:	4b57      	ldr	r3, [pc, #348]	; (80219e0 <__strftime+0x4a0>)
 8021882:	9001      	str	r0, [sp, #4]
 8021884:	2e02      	cmp	r6, #2
 8021886:	bf2c      	ite	cs
 8021888:	ebc1 0606 	rsbcs	r6, r1, r6
 802188c:	f1c1 0602 	rsbcc	r6, r1, #2
 8021890:	494e      	ldr	r1, [pc, #312]	; (80219cc <__strftime+0x48c>)
 8021892:	9600      	str	r6, [sp, #0]
 8021894:	458a      	cmp	sl, r1
 8021896:	bfa8      	it	ge
 8021898:	463b      	movge	r3, r7
 802189a:	eba8 0104 	sub.w	r1, r8, r4
 802189e:	eb09 0004 	add.w	r0, r9, r4
 80218a2:	e02a      	b.n	80218fa <__strftime+0x3ba>
 80218a4:	4f4a      	ldr	r7, [pc, #296]	; (80219d0 <__strftime+0x490>)
 80218a6:	e7dd      	b.n	8021864 <__strftime+0x324>
 80218a8:	494e      	ldr	r1, [pc, #312]	; (80219e4 <__strftime+0x4a4>)
 80218aa:	4a4f      	ldr	r2, [pc, #316]	; (80219e8 <__strftime+0x4a8>)
 80218ac:	68eb      	ldr	r3, [r5, #12]
 80218ae:	2864      	cmp	r0, #100	; 0x64
 80218b0:	bf08      	it	eq
 80218b2:	460a      	moveq	r2, r1
 80218b4:	eba8 0104 	sub.w	r1, r8, r4
 80218b8:	eb09 0004 	add.w	r0, r9, r4
 80218bc:	f001 fe9e 	bl	80235fc <sniprintf>
 80218c0:	2800      	cmp	r0, #0
 80218c2:	f6ff ae6c 	blt.w	802159e <__strftime+0x5e>
 80218c6:	4404      	add	r4, r0
 80218c8:	45a0      	cmp	r8, r4
 80218ca:	f63f af3b 	bhi.w	8021744 <__strftime+0x204>
 80218ce:	e666      	b.n	802159e <__strftime+0x5e>
 80218d0:	6968      	ldr	r0, [r5, #20]
 80218d2:	692b      	ldr	r3, [r5, #16]
 80218d4:	68ef      	ldr	r7, [r5, #12]
 80218d6:	2800      	cmp	r0, #0
 80218d8:	eb09 0604 	add.w	r6, r9, r4
 80218dc:	eba8 0104 	sub.w	r1, r8, r4
 80218e0:	f103 0301 	add.w	r3, r3, #1
 80218e4:	db0c      	blt.n	8021900 <__strftime+0x3c0>
 80218e6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80218ea:	fb90 f2fc 	sdiv	r2, r0, ip
 80218ee:	fb0c 0212 	mls	r2, ip, r2, r0
 80218f2:	e9cd 7200 	strd	r7, r2, [sp]
 80218f6:	4a3d      	ldr	r2, [pc, #244]	; (80219ec <__strftime+0x4ac>)
 80218f8:	4630      	mov	r0, r6
 80218fa:	f001 fe7f 	bl	80235fc <sniprintf>
 80218fe:	e7df      	b.n	80218c0 <__strftime+0x380>
 8021900:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021904:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8021908:	f000 ffe8 	bl	80228dc <abs>
 802190c:	2264      	movs	r2, #100	; 0x64
 802190e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8021912:	fb90 fcf2 	sdiv	ip, r0, r2
 8021916:	fb0c 0212 	mls	r2, ip, r2, r0
 802191a:	e7ea      	b.n	80218f2 <__strftime+0x3b2>
 802191c:	2325      	movs	r3, #37	; 0x25
 802191e:	f88d 3020 	strb.w	r3, [sp, #32]
 8021922:	b187      	cbz	r7, 8021946 <__strftime+0x406>
 8021924:	2e06      	cmp	r6, #6
 8021926:	bf38      	it	cc
 8021928:	2606      	movcc	r6, #6
 802192a:	1fb3      	subs	r3, r6, #6
 802192c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8021930:	d10c      	bne.n	802194c <__strftime+0x40c>
 8021932:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021936:	492e      	ldr	r1, [pc, #184]	; (80219f0 <__strftime+0x4b0>)
 8021938:	f7ff fd97 	bl	802146a <strcpy>
 802193c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802193e:	9300      	str	r3, [sp, #0]
 8021940:	aa08      	add	r2, sp, #32
 8021942:	462b      	mov	r3, r5
 8021944:	e760      	b.n	8021808 <__strftime+0x2c8>
 8021946:	272b      	movs	r7, #43	; 0x2b
 8021948:	260a      	movs	r6, #10
 802194a:	e7ee      	b.n	802192a <__strftime+0x3ea>
 802194c:	4a29      	ldr	r2, [pc, #164]	; (80219f4 <__strftime+0x4b4>)
 802194e:	211e      	movs	r1, #30
 8021950:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8021954:	f001 fe52 	bl	80235fc <sniprintf>
 8021958:	2800      	cmp	r0, #0
 802195a:	ddea      	ble.n	8021932 <__strftime+0x3f2>
 802195c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8021960:	4418      	add	r0, r3
 8021962:	e7e8      	b.n	8021936 <__strftime+0x3f6>
 8021964:	4628      	mov	r0, r5
 8021966:	f7ff fd89 	bl	802147c <iso_year_adjust>
 802196a:	4606      	mov	r6, r0
 802196c:	6968      	ldr	r0, [r5, #20]
 802196e:	2800      	cmp	r0, #0
 8021970:	db11      	blt.n	8021996 <__strftime+0x456>
 8021972:	2264      	movs	r2, #100	; 0x64
 8021974:	fb90 f3f2 	sdiv	r3, r0, r2
 8021978:	fb02 0313 	mls	r3, r2, r3, r0
 802197c:	441e      	add	r6, r3
 802197e:	2364      	movs	r3, #100	; 0x64
 8021980:	fb96 f0f3 	sdiv	r0, r6, r3
 8021984:	fb03 6610 	mls	r6, r3, r0, r6
 8021988:	441e      	add	r6, r3
 802198a:	fbb6 f2f3 	udiv	r2, r6, r3
 802198e:	fb03 6312 	mls	r3, r3, r2, r6
 8021992:	4a14      	ldr	r2, [pc, #80]	; (80219e4 <__strftime+0x4a4>)
 8021994:	e78e      	b.n	80218b4 <__strftime+0x374>
 8021996:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802199a:	f000 ff9f 	bl	80228dc <abs>
 802199e:	2364      	movs	r3, #100	; 0x64
 80219a0:	2e00      	cmp	r6, #0
 80219a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80219a6:	fb02 0313 	mls	r3, r2, r3, r0
 80219aa:	da05      	bge.n	80219b8 <__strftime+0x478>
 80219ac:	6969      	ldr	r1, [r5, #20]
 80219ae:	4a12      	ldr	r2, [pc, #72]	; (80219f8 <__strftime+0x4b8>)
 80219b0:	4291      	cmp	r1, r2
 80219b2:	bfb8      	it	lt
 80219b4:	2601      	movlt	r6, #1
 80219b6:	e7e1      	b.n	802197c <__strftime+0x43c>
 80219b8:	d0e0      	beq.n	802197c <__strftime+0x43c>
 80219ba:	6969      	ldr	r1, [r5, #20]
 80219bc:	4a03      	ldr	r2, [pc, #12]	; (80219cc <__strftime+0x48c>)
 80219be:	4291      	cmp	r1, r2
 80219c0:	bfb8      	it	lt
 80219c2:	f04f 36ff 	movlt.w	r6, #4294967295
 80219c6:	e7d9      	b.n	802197c <__strftime+0x43c>
 80219c8:	0802a62c 	.word	0x0802a62c
 80219cc:	fffff894 	.word	0xfffff894
 80219d0:	0802a79f 	.word	0x0802a79f
 80219d4:	0802a4b6 	.word	0x0802a4b6
 80219d8:	0802a4ae 	.word	0x0802a4ae
 80219dc:	0802a4a7 	.word	0x0802a4a7
 80219e0:	0802a8df 	.word	0x0802a8df
 80219e4:	0802a4c6 	.word	0x0802a4c6
 80219e8:	0802a4b8 	.word	0x0802a4b8
 80219ec:	0802a4bc 	.word	0x0802a4bc
 80219f0:	0802a4cf 	.word	0x0802a4cf
 80219f4:	0802a4cb 	.word	0x0802a4cb
 80219f8:	fffff895 	.word	0xfffff895
 80219fc:	4bb6      	ldr	r3, [pc, #728]	; (8021cd8 <__strftime+0x798>)
 80219fe:	6969      	ldr	r1, [r5, #20]
 8021a00:	4299      	cmp	r1, r3
 8021a02:	bfac      	ite	ge
 8021a04:	2300      	movge	r3, #0
 8021a06:	2301      	movlt	r3, #1
 8021a08:	4628      	mov	r0, r5
 8021a0a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8021a0e:	f7ff fd35 	bl	802147c <iso_year_adjust>
 8021a12:	9906      	ldr	r1, [sp, #24]
 8021a14:	2900      	cmp	r1, #0
 8021a16:	4682      	mov	sl, r0
 8021a18:	db27      	blt.n	8021a6a <__strftime+0x52a>
 8021a1a:	2264      	movs	r2, #100	; 0x64
 8021a1c:	fb91 f2f2 	sdiv	r2, r1, r2
 8021a20:	3213      	adds	r2, #19
 8021a22:	6968      	ldr	r0, [r5, #20]
 8021a24:	2800      	cmp	r0, #0
 8021a26:	db2b      	blt.n	8021a80 <__strftime+0x540>
 8021a28:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021a2c:	fb90 fefc 	sdiv	lr, r0, ip
 8021a30:	fb0c 001e 	mls	r0, ip, lr, r0
 8021a34:	f1ba 0f00 	cmp.w	sl, #0
 8021a38:	da31      	bge.n	8021a9e <__strftime+0x55e>
 8021a3a:	6969      	ldr	r1, [r5, #20]
 8021a3c:	4ba7      	ldr	r3, [pc, #668]	; (8021cdc <__strftime+0x79c>)
 8021a3e:	4299      	cmp	r1, r3
 8021a40:	db38      	blt.n	8021ab4 <__strftime+0x574>
 8021a42:	eb0a 0300 	add.w	r3, sl, r0
 8021a46:	1c59      	adds	r1, r3, #1
 8021a48:	d139      	bne.n	8021abe <__strftime+0x57e>
 8021a4a:	3a01      	subs	r2, #1
 8021a4c:	2363      	movs	r3, #99	; 0x63
 8021a4e:	2064      	movs	r0, #100	; 0x64
 8021a50:	fb00 3202 	mla	r2, r0, r2, r3
 8021a54:	9b05      	ldr	r3, [sp, #20]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d036      	beq.n	8021ac8 <__strftime+0x588>
 8021a5a:	232d      	movs	r3, #45	; 0x2d
 8021a5c:	f88d 3020 	strb.w	r3, [sp, #32]
 8021a60:	b106      	cbz	r6, 8021a64 <__strftime+0x524>
 8021a62:	3e01      	subs	r6, #1
 8021a64:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021a68:	e038      	b.n	8021adc <__strftime+0x59c>
 8021a6a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8021a6e:	9106      	str	r1, [sp, #24]
 8021a70:	f000 ff34 	bl	80228dc <abs>
 8021a74:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021a78:	9906      	ldr	r1, [sp, #24]
 8021a7a:	fb90 f2fc 	sdiv	r2, r0, ip
 8021a7e:	e7d0      	b.n	8021a22 <__strftime+0x4e2>
 8021a80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021a84:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8021a88:	f000 ff28 	bl	80228dc <abs>
 8021a8c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8021a90:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021a94:	fb90 fefc 	sdiv	lr, r0, ip
 8021a98:	fb0e 001c 	mls	r0, lr, ip, r0
 8021a9c:	e7ca      	b.n	8021a34 <__strftime+0x4f4>
 8021a9e:	d0d0      	beq.n	8021a42 <__strftime+0x502>
 8021aa0:	4b8d      	ldr	r3, [pc, #564]	; (8021cd8 <__strftime+0x798>)
 8021aa2:	4299      	cmp	r1, r3
 8021aa4:	bfb4      	ite	lt
 8021aa6:	2301      	movlt	r3, #1
 8021aa8:	2300      	movge	r3, #0
 8021aaa:	9305      	str	r3, [sp, #20]
 8021aac:	bfb8      	it	lt
 8021aae:	f04f 3aff 	movlt.w	sl, #4294967295
 8021ab2:	e7c6      	b.n	8021a42 <__strftime+0x502>
 8021ab4:	f04f 0a01 	mov.w	sl, #1
 8021ab8:	f8cd a014 	str.w	sl, [sp, #20]
 8021abc:	e7c1      	b.n	8021a42 <__strftime+0x502>
 8021abe:	2b64      	cmp	r3, #100	; 0x64
 8021ac0:	bf04      	itt	eq
 8021ac2:	3201      	addeq	r2, #1
 8021ac4:	2300      	moveq	r3, #0
 8021ac6:	e7c2      	b.n	8021a4e <__strftime+0x50e>
 8021ac8:	2f2b      	cmp	r7, #43	; 0x2b
 8021aca:	d106      	bne.n	8021ada <__strftime+0x59a>
 8021acc:	f242 730f 	movw	r3, #9999	; 0x270f
 8021ad0:	429a      	cmp	r2, r3
 8021ad2:	d902      	bls.n	8021ada <__strftime+0x59a>
 8021ad4:	f88d 7020 	strb.w	r7, [sp, #32]
 8021ad8:	e7c2      	b.n	8021a60 <__strftime+0x520>
 8021ada:	ab08      	add	r3, sp, #32
 8021adc:	2125      	movs	r1, #37	; 0x25
 8021ade:	7019      	strb	r1, [r3, #0]
 8021ae0:	b94f      	cbnz	r7, 8021af6 <__strftime+0x5b6>
 8021ae2:	1c58      	adds	r0, r3, #1
 8021ae4:	497e      	ldr	r1, [pc, #504]	; (8021ce0 <__strftime+0x7a0>)
 8021ae6:	9205      	str	r2, [sp, #20]
 8021ae8:	f7ff fcbf 	bl	802146a <strcpy>
 8021aec:	9a05      	ldr	r2, [sp, #20]
 8021aee:	9200      	str	r2, [sp, #0]
 8021af0:	4633      	mov	r3, r6
 8021af2:	aa08      	add	r2, sp, #32
 8021af4:	e059      	b.n	8021baa <__strftime+0x66a>
 8021af6:	2130      	movs	r1, #48	; 0x30
 8021af8:	1c98      	adds	r0, r3, #2
 8021afa:	7059      	strb	r1, [r3, #1]
 8021afc:	e7f2      	b.n	8021ae4 <__strftime+0x5a4>
 8021afe:	4979      	ldr	r1, [pc, #484]	; (8021ce4 <__strftime+0x7a4>)
 8021b00:	4a79      	ldr	r2, [pc, #484]	; (8021ce8 <__strftime+0x7a8>)
 8021b02:	68ab      	ldr	r3, [r5, #8]
 8021b04:	286b      	cmp	r0, #107	; 0x6b
 8021b06:	bf08      	it	eq
 8021b08:	460a      	moveq	r2, r1
 8021b0a:	e6d3      	b.n	80218b4 <__strftime+0x374>
 8021b0c:	68ab      	ldr	r3, [r5, #8]
 8021b0e:	b163      	cbz	r3, 8021b2a <__strftime+0x5ea>
 8021b10:	2b0c      	cmp	r3, #12
 8021b12:	d004      	beq.n	8021b1e <__strftime+0x5de>
 8021b14:	210c      	movs	r1, #12
 8021b16:	fb93 f2f1 	sdiv	r2, r3, r1
 8021b1a:	fb01 3312 	mls	r3, r1, r2, r3
 8021b1e:	4972      	ldr	r1, [pc, #456]	; (8021ce8 <__strftime+0x7a8>)
 8021b20:	4a70      	ldr	r2, [pc, #448]	; (8021ce4 <__strftime+0x7a4>)
 8021b22:	2849      	cmp	r0, #73	; 0x49
 8021b24:	bf08      	it	eq
 8021b26:	460a      	moveq	r2, r1
 8021b28:	e6c4      	b.n	80218b4 <__strftime+0x374>
 8021b2a:	230c      	movs	r3, #12
 8021b2c:	e7f7      	b.n	8021b1e <__strftime+0x5de>
 8021b2e:	69eb      	ldr	r3, [r5, #28]
 8021b30:	4a6e      	ldr	r2, [pc, #440]	; (8021cec <__strftime+0x7ac>)
 8021b32:	3301      	adds	r3, #1
 8021b34:	e6be      	b.n	80218b4 <__strftime+0x374>
 8021b36:	692b      	ldr	r3, [r5, #16]
 8021b38:	3301      	adds	r3, #1
 8021b3a:	e72a      	b.n	8021992 <__strftime+0x452>
 8021b3c:	686b      	ldr	r3, [r5, #4]
 8021b3e:	e728      	b.n	8021992 <__strftime+0x452>
 8021b40:	f108 33ff 	add.w	r3, r8, #4294967295
 8021b44:	42a3      	cmp	r3, r4
 8021b46:	f67f ad2a 	bls.w	802159e <__strftime+0x5e>
 8021b4a:	230a      	movs	r3, #10
 8021b4c:	f809 3004 	strb.w	r3, [r9, r4]
 8021b50:	3401      	adds	r4, #1
 8021b52:	e5f7      	b.n	8021744 <__strftime+0x204>
 8021b54:	68ab      	ldr	r3, [r5, #8]
 8021b56:	2b0b      	cmp	r3, #11
 8021b58:	bfcc      	ite	gt
 8021b5a:	22a4      	movgt	r2, #164	; 0xa4
 8021b5c:	22a0      	movle	r2, #160	; 0xa0
 8021b5e:	4b64      	ldr	r3, [pc, #400]	; (8021cf0 <__strftime+0x7b0>)
 8021b60:	4413      	add	r3, r2
 8021b62:	685e      	ldr	r6, [r3, #4]
 8021b64:	4630      	mov	r0, r6
 8021b66:	f7de fb69 	bl	800023c <strlen>
 8021b6a:	1e72      	subs	r2, r6, #1
 8021b6c:	4420      	add	r0, r4
 8021b6e:	f108 36ff 	add.w	r6, r8, #4294967295
 8021b72:	42a0      	cmp	r0, r4
 8021b74:	f43f ade6 	beq.w	8021744 <__strftime+0x204>
 8021b78:	42a6      	cmp	r6, r4
 8021b7a:	f67f ad10 	bls.w	802159e <__strftime+0x5e>
 8021b7e:	f89b 1000 	ldrb.w	r1, [fp]
 8021b82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8021b86:	2950      	cmp	r1, #80	; 0x50
 8021b88:	d107      	bne.n	8021b9a <__strftime+0x65a>
 8021b8a:	495a      	ldr	r1, [pc, #360]	; (8021cf4 <__strftime+0x7b4>)
 8021b8c:	5cc9      	ldrb	r1, [r1, r3]
 8021b8e:	f001 0103 	and.w	r1, r1, #3
 8021b92:	2901      	cmp	r1, #1
 8021b94:	bf08      	it	eq
 8021b96:	3320      	addeq	r3, #32
 8021b98:	b2db      	uxtb	r3, r3
 8021b9a:	f809 3004 	strb.w	r3, [r9, r4]
 8021b9e:	3401      	adds	r4, #1
 8021ba0:	e7e7      	b.n	8021b72 <__strftime+0x632>
 8021ba2:	686b      	ldr	r3, [r5, #4]
 8021ba4:	9300      	str	r3, [sp, #0]
 8021ba6:	4a54      	ldr	r2, [pc, #336]	; (8021cf8 <__strftime+0x7b8>)
 8021ba8:	68ab      	ldr	r3, [r5, #8]
 8021baa:	eba8 0104 	sub.w	r1, r8, r4
 8021bae:	eb09 0004 	add.w	r0, r9, r4
 8021bb2:	f001 fd23 	bl	80235fc <sniprintf>
 8021bb6:	e683      	b.n	80218c0 <__strftime+0x380>
 8021bb8:	6a2b      	ldr	r3, [r5, #32]
 8021bba:	2b00      	cmp	r3, #0
 8021bbc:	db79      	blt.n	8021cb2 <__strftime+0x772>
 8021bbe:	f000 fb91 	bl	80222e4 <__tz_lock>
 8021bc2:	9b04      	ldr	r3, [sp, #16]
 8021bc4:	b90b      	cbnz	r3, 8021bca <__strftime+0x68a>
 8021bc6:	f000 fb99 	bl	80222fc <_tzset_unlocked>
 8021bca:	f000 ff55 	bl	8022a78 <__gettzinfo>
 8021bce:	6a2b      	ldr	r3, [r5, #32]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	bfcc      	ite	gt
 8021bd4:	2350      	movgt	r3, #80	; 0x50
 8021bd6:	2328      	movle	r3, #40	; 0x28
 8021bd8:	58c3      	ldr	r3, [r0, r3]
 8021bda:	f1c3 0a00 	rsb	sl, r3, #0
 8021bde:	f000 fb87 	bl	80222f0 <__tz_unlock>
 8021be2:	2301      	movs	r3, #1
 8021be4:	9304      	str	r3, [sp, #16]
 8021be6:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8021bea:	4662      	mov	r2, ip
 8021bec:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8021bf0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8021bf4:	9602      	str	r6, [sp, #8]
 8021bf6:	f143 36ff 	adc.w	r6, r3, #4294967295
 8021bfa:	9603      	str	r6, [sp, #12]
 8021bfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021c00:	2e00      	cmp	r6, #0
 8021c02:	f177 0600 	sbcs.w	r6, r7, #0
 8021c06:	eba8 0104 	sub.w	r1, r8, r4
 8021c0a:	eb09 0004 	add.w	r0, r9, r4
 8021c0e:	da05      	bge.n	8021c1c <__strftime+0x6dc>
 8021c10:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8021c14:	f143 33ff 	adc.w	r3, r3, #4294967295
 8021c18:	9602      	str	r6, [sp, #8]
 8021c1a:	9303      	str	r3, [sp, #12]
 8021c1c:	9b02      	ldr	r3, [sp, #8]
 8021c1e:	089e      	lsrs	r6, r3, #2
 8021c20:	9b03      	ldr	r3, [sp, #12]
 8021c22:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8021c26:	f10c 32ff 	add.w	r2, ip, #4294967295
 8021c2a:	109f      	asrs	r7, r3, #2
 8021c2c:	2364      	movs	r3, #100	; 0x64
 8021c2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c32:	1af6      	subs	r6, r6, r3
 8021c34:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8021c38:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8021c3c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021c40:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c44:	18f6      	adds	r6, r6, r3
 8021c46:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8021c4a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8021c4e:	f240 136d 	movw	r3, #365	; 0x16d
 8021c52:	fb03 fc0c 	mul.w	ip, r3, ip
 8021c56:	69eb      	ldr	r3, [r5, #28]
 8021c58:	eb16 060c 	adds.w	r6, r6, ip
 8021c5c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8021c60:	18f6      	adds	r6, r6, r3
 8021c62:	f04f 0c18 	mov.w	ip, #24
 8021c66:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8021c6a:	fba6 230c 	umull	r2, r3, r6, ip
 8021c6e:	68ae      	ldr	r6, [r5, #8]
 8021c70:	fb0c 3307 	mla	r3, ip, r7, r3
 8021c74:	1992      	adds	r2, r2, r6
 8021c76:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8021c7a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8021c7e:	fba2 670c 	umull	r6, r7, r2, ip
 8021c82:	fb0c 7703 	mla	r7, ip, r3, r7
 8021c86:	686b      	ldr	r3, [r5, #4]
 8021c88:	18f6      	adds	r6, r6, r3
 8021c8a:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8021c8e:	fba6 230c 	umull	r2, r3, r6, ip
 8021c92:	682e      	ldr	r6, [r5, #0]
 8021c94:	fb0c 3307 	mla	r3, ip, r7, r3
 8021c98:	1992      	adds	r2, r2, r6
 8021c9a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8021c9e:	ebb2 020a 	subs.w	r2, r2, sl
 8021ca2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8021ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8021caa:	4a14      	ldr	r2, [pc, #80]	; (8021cfc <__strftime+0x7bc>)
 8021cac:	f001 fca6 	bl	80235fc <sniprintf>
 8021cb0:	e606      	b.n	80218c0 <__strftime+0x380>
 8021cb2:	f04f 0a00 	mov.w	sl, #0
 8021cb6:	e796      	b.n	8021be6 <__strftime+0x6a6>
 8021cb8:	682b      	ldr	r3, [r5, #0]
 8021cba:	e66a      	b.n	8021992 <__strftime+0x452>
 8021cbc:	f108 33ff 	add.w	r3, r8, #4294967295
 8021cc0:	42a3      	cmp	r3, r4
 8021cc2:	f67f ac6c 	bls.w	802159e <__strftime+0x5e>
 8021cc6:	2309      	movs	r3, #9
 8021cc8:	e740      	b.n	8021b4c <__strftime+0x60c>
 8021cca:	682b      	ldr	r3, [r5, #0]
 8021ccc:	9301      	str	r3, [sp, #4]
 8021cce:	686b      	ldr	r3, [r5, #4]
 8021cd0:	9300      	str	r3, [sp, #0]
 8021cd2:	4a0b      	ldr	r2, [pc, #44]	; (8021d00 <__strftime+0x7c0>)
 8021cd4:	68ab      	ldr	r3, [r5, #8]
 8021cd6:	e5e0      	b.n	802189a <__strftime+0x35a>
 8021cd8:	fffff894 	.word	0xfffff894
 8021cdc:	fffff895 	.word	0xfffff895
 8021ce0:	0802a4d7 	.word	0x0802a4d7
 8021ce4:	0802a4b8 	.word	0x0802a4b8
 8021ce8:	0802a4c6 	.word	0x0802a4c6
 8021cec:	0802a4db 	.word	0x0802a4db
 8021cf0:	0802a62c 	.word	0x0802a62c
 8021cf4:	0802a7a1 	.word	0x0802a7a1
 8021cf8:	0802a4ea 	.word	0x0802a4ea
 8021cfc:	0802a4e0 	.word	0x0802a4e0
 8021d00:	0802a4e5 	.word	0x0802a4e5
 8021d04:	f108 33ff 	add.w	r3, r8, #4294967295
 8021d08:	42a3      	cmp	r3, r4
 8021d0a:	f67f ac48 	bls.w	802159e <__strftime+0x5e>
 8021d0e:	69ab      	ldr	r3, [r5, #24]
 8021d10:	eb09 0204 	add.w	r2, r9, r4
 8021d14:	3401      	adds	r4, #1
 8021d16:	b913      	cbnz	r3, 8021d1e <__strftime+0x7de>
 8021d18:	2337      	movs	r3, #55	; 0x37
 8021d1a:	7013      	strb	r3, [r2, #0]
 8021d1c:	e512      	b.n	8021744 <__strftime+0x204>
 8021d1e:	3330      	adds	r3, #48	; 0x30
 8021d20:	e7fb      	b.n	8021d1a <__strftime+0x7da>
 8021d22:	69eb      	ldr	r3, [r5, #28]
 8021d24:	69aa      	ldr	r2, [r5, #24]
 8021d26:	3307      	adds	r3, #7
 8021d28:	1a9b      	subs	r3, r3, r2
 8021d2a:	2207      	movs	r2, #7
 8021d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8021d30:	e62f      	b.n	8021992 <__strftime+0x452>
 8021d32:	4628      	mov	r0, r5
 8021d34:	f7ff fba2 	bl	802147c <iso_year_adjust>
 8021d38:	69aa      	ldr	r2, [r5, #24]
 8021d3a:	b132      	cbz	r2, 8021d4a <__strftime+0x80a>
 8021d3c:	3a01      	subs	r2, #1
 8021d3e:	2800      	cmp	r0, #0
 8021d40:	dc28      	bgt.n	8021d94 <__strftime+0x854>
 8021d42:	69eb      	ldr	r3, [r5, #28]
 8021d44:	d103      	bne.n	8021d4e <__strftime+0x80e>
 8021d46:	330a      	adds	r3, #10
 8021d48:	e7ee      	b.n	8021d28 <__strftime+0x7e8>
 8021d4a:	2206      	movs	r2, #6
 8021d4c:	e7f7      	b.n	8021d3e <__strftime+0x7fe>
 8021d4e:	6968      	ldr	r0, [r5, #20]
 8021d50:	2800      	cmp	r0, #0
 8021d52:	eba2 0303 	sub.w	r3, r2, r3
 8021d56:	f240 726b 	movw	r2, #1899	; 0x76b
 8021d5a:	bfa8      	it	ge
 8021d5c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8021d60:	4410      	add	r0, r2
 8021d62:	0782      	lsls	r2, r0, #30
 8021d64:	d105      	bne.n	8021d72 <__strftime+0x832>
 8021d66:	2264      	movs	r2, #100	; 0x64
 8021d68:	fb90 f1f2 	sdiv	r1, r0, r2
 8021d6c:	fb02 0111 	mls	r1, r2, r1, r0
 8021d70:	b971      	cbnz	r1, 8021d90 <__strftime+0x850>
 8021d72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021d76:	fb90 f2f1 	sdiv	r2, r0, r1
 8021d7a:	fb01 0212 	mls	r2, r1, r2, r0
 8021d7e:	fab2 f282 	clz	r2, r2
 8021d82:	0952      	lsrs	r2, r2, #5
 8021d84:	1a9a      	subs	r2, r3, r2
 8021d86:	2a05      	cmp	r2, #5
 8021d88:	bfb4      	ite	lt
 8021d8a:	2335      	movlt	r3, #53	; 0x35
 8021d8c:	2334      	movge	r3, #52	; 0x34
 8021d8e:	e600      	b.n	8021992 <__strftime+0x452>
 8021d90:	2201      	movs	r2, #1
 8021d92:	e7f7      	b.n	8021d84 <__strftime+0x844>
 8021d94:	2301      	movs	r3, #1
 8021d96:	e5fc      	b.n	8021992 <__strftime+0x452>
 8021d98:	f108 33ff 	add.w	r3, r8, #4294967295
 8021d9c:	42a3      	cmp	r3, r4
 8021d9e:	f67f abfe 	bls.w	802159e <__strftime+0x5e>
 8021da2:	69ab      	ldr	r3, [r5, #24]
 8021da4:	3330      	adds	r3, #48	; 0x30
 8021da6:	e6d1      	b.n	8021b4c <__strftime+0x60c>
 8021da8:	69ab      	ldr	r3, [r5, #24]
 8021daa:	b13b      	cbz	r3, 8021dbc <__strftime+0x87c>
 8021dac:	3b01      	subs	r3, #1
 8021dae:	69ea      	ldr	r2, [r5, #28]
 8021db0:	3207      	adds	r2, #7
 8021db2:	1ad2      	subs	r2, r2, r3
 8021db4:	2307      	movs	r3, #7
 8021db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021dba:	e5ea      	b.n	8021992 <__strftime+0x452>
 8021dbc:	2306      	movs	r3, #6
 8021dbe:	e7f6      	b.n	8021dae <__strftime+0x86e>
 8021dc0:	6968      	ldr	r0, [r5, #20]
 8021dc2:	2800      	cmp	r0, #0
 8021dc4:	db05      	blt.n	8021dd2 <__strftime+0x892>
 8021dc6:	2264      	movs	r2, #100	; 0x64
 8021dc8:	fb90 f3f2 	sdiv	r3, r0, r2
 8021dcc:	fb03 0312 	mls	r3, r3, r2, r0
 8021dd0:	e5df      	b.n	8021992 <__strftime+0x452>
 8021dd2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8021dd6:	f000 fd81 	bl	80228dc <abs>
 8021dda:	e7f4      	b.n	8021dc6 <__strftime+0x886>
 8021ddc:	696b      	ldr	r3, [r5, #20]
 8021dde:	4a4c      	ldr	r2, [pc, #304]	; (8021f10 <__strftime+0x9d0>)
 8021de0:	4293      	cmp	r3, r2
 8021de2:	da09      	bge.n	8021df8 <__strftime+0x8b8>
 8021de4:	212d      	movs	r1, #45	; 0x2d
 8021de6:	f88d 1020 	strb.w	r1, [sp, #32]
 8021dea:	eba2 0a03 	sub.w	sl, r2, r3
 8021dee:	b106      	cbz	r6, 8021df2 <__strftime+0x8b2>
 8021df0:	3e01      	subs	r6, #1
 8021df2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8021df6:	e00b      	b.n	8021e10 <__strftime+0x8d0>
 8021df8:	2f2b      	cmp	r7, #43	; 0x2b
 8021dfa:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8021dfe:	d106      	bne.n	8021e0e <__strftime+0x8ce>
 8021e00:	f242 730f 	movw	r3, #9999	; 0x270f
 8021e04:	459a      	cmp	sl, r3
 8021e06:	d902      	bls.n	8021e0e <__strftime+0x8ce>
 8021e08:	f88d 7020 	strb.w	r7, [sp, #32]
 8021e0c:	e7ef      	b.n	8021dee <__strftime+0x8ae>
 8021e0e:	ab08      	add	r3, sp, #32
 8021e10:	2225      	movs	r2, #37	; 0x25
 8021e12:	701a      	strb	r2, [r3, #0]
 8021e14:	b937      	cbnz	r7, 8021e24 <__strftime+0x8e4>
 8021e16:	1c58      	adds	r0, r3, #1
 8021e18:	493e      	ldr	r1, [pc, #248]	; (8021f14 <__strftime+0x9d4>)
 8021e1a:	f7ff fb26 	bl	802146a <strcpy>
 8021e1e:	f8cd a000 	str.w	sl, [sp]
 8021e22:	e665      	b.n	8021af0 <__strftime+0x5b0>
 8021e24:	2230      	movs	r2, #48	; 0x30
 8021e26:	1c98      	adds	r0, r3, #2
 8021e28:	705a      	strb	r2, [r3, #1]
 8021e2a:	e7f5      	b.n	8021e18 <__strftime+0x8d8>
 8021e2c:	6a2b      	ldr	r3, [r5, #32]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	f6ff ac88 	blt.w	8021744 <__strftime+0x204>
 8021e34:	f000 fa56 	bl	80222e4 <__tz_lock>
 8021e38:	9b04      	ldr	r3, [sp, #16]
 8021e3a:	b90b      	cbnz	r3, 8021e40 <__strftime+0x900>
 8021e3c:	f000 fa5e 	bl	80222fc <_tzset_unlocked>
 8021e40:	f000 fe1a 	bl	8022a78 <__gettzinfo>
 8021e44:	6a2b      	ldr	r3, [r5, #32]
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	bfcc      	ite	gt
 8021e4a:	2350      	movgt	r3, #80	; 0x50
 8021e4c:	2328      	movle	r3, #40	; 0x28
 8021e4e:	eb09 0704 	add.w	r7, r9, r4
 8021e52:	58c6      	ldr	r6, [r0, r3]
 8021e54:	f000 fa4c 	bl	80222f0 <__tz_unlock>
 8021e58:	4276      	negs	r6, r6
 8021e5a:	233c      	movs	r3, #60	; 0x3c
 8021e5c:	fb96 f0f3 	sdiv	r0, r6, r3
 8021e60:	f000 fece 	bl	8022c00 <labs>
 8021e64:	233c      	movs	r3, #60	; 0x3c
 8021e66:	eba8 0a04 	sub.w	sl, r8, r4
 8021e6a:	fb90 f2f3 	sdiv	r2, r0, r3
 8021e6e:	fb02 0013 	mls	r0, r2, r3, r0
 8021e72:	9000      	str	r0, [sp, #0]
 8021e74:	4a28      	ldr	r2, [pc, #160]	; (8021f18 <__strftime+0x9d8>)
 8021e76:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8021e7a:	4651      	mov	r1, sl
 8021e7c:	4638      	mov	r0, r7
 8021e7e:	fb96 f3f3 	sdiv	r3, r6, r3
 8021e82:	f001 fbbb 	bl	80235fc <sniprintf>
 8021e86:	2800      	cmp	r0, #0
 8021e88:	f6ff ab89 	blt.w	802159e <__strftime+0x5e>
 8021e8c:	4404      	add	r4, r0
 8021e8e:	45a0      	cmp	r8, r4
 8021e90:	f67f ab85 	bls.w	802159e <__strftime+0x5e>
 8021e94:	2301      	movs	r3, #1
 8021e96:	9304      	str	r3, [sp, #16]
 8021e98:	e454      	b.n	8021744 <__strftime+0x204>
 8021e9a:	6a2b      	ldr	r3, [r5, #32]
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	f6ff ac51 	blt.w	8021744 <__strftime+0x204>
 8021ea2:	f000 fa1f 	bl	80222e4 <__tz_lock>
 8021ea6:	9b04      	ldr	r3, [sp, #16]
 8021ea8:	b90b      	cbnz	r3, 8021eae <__strftime+0x96e>
 8021eaa:	f000 fa27 	bl	80222fc <_tzset_unlocked>
 8021eae:	6a2b      	ldr	r3, [r5, #32]
 8021eb0:	4a1a      	ldr	r2, [pc, #104]	; (8021f1c <__strftime+0x9dc>)
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	bfd4      	ite	le
 8021eb6:	2300      	movle	r3, #0
 8021eb8:	2301      	movgt	r3, #1
 8021eba:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021ebe:	4630      	mov	r0, r6
 8021ec0:	f7de f9bc 	bl	800023c <strlen>
 8021ec4:	3e01      	subs	r6, #1
 8021ec6:	4420      	add	r0, r4
 8021ec8:	f108 33ff 	add.w	r3, r8, #4294967295
 8021ecc:	42a0      	cmp	r0, r4
 8021ece:	d102      	bne.n	8021ed6 <__strftime+0x996>
 8021ed0:	f000 fa0e 	bl	80222f0 <__tz_unlock>
 8021ed4:	e7de      	b.n	8021e94 <__strftime+0x954>
 8021ed6:	42a3      	cmp	r3, r4
 8021ed8:	d905      	bls.n	8021ee6 <__strftime+0x9a6>
 8021eda:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021ede:	f809 2004 	strb.w	r2, [r9, r4]
 8021ee2:	3401      	adds	r4, #1
 8021ee4:	e7f2      	b.n	8021ecc <__strftime+0x98c>
 8021ee6:	f000 fa03 	bl	80222f0 <__tz_unlock>
 8021eea:	f7ff bb58 	b.w	802159e <__strftime+0x5e>
 8021eee:	f108 33ff 	add.w	r3, r8, #4294967295
 8021ef2:	42a3      	cmp	r3, r4
 8021ef4:	f67f ab53 	bls.w	802159e <__strftime+0x5e>
 8021ef8:	2325      	movs	r3, #37	; 0x25
 8021efa:	e627      	b.n	8021b4c <__strftime+0x60c>
 8021efc:	f1b8 0f00 	cmp.w	r8, #0
 8021f00:	d002      	beq.n	8021f08 <__strftime+0x9c8>
 8021f02:	2300      	movs	r3, #0
 8021f04:	f809 3004 	strb.w	r3, [r9, r4]
 8021f08:	4620      	mov	r0, r4
 8021f0a:	b011      	add	sp, #68	; 0x44
 8021f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f10:	fffff894 	.word	0xfffff894
 8021f14:	0802a4d7 	.word	0x0802a4d7
 8021f18:	0802a4f4 	.word	0x0802a4f4
 8021f1c:	2000016c 	.word	0x2000016c

08021f20 <strftime>:
 8021f20:	b513      	push	{r0, r1, r4, lr}
 8021f22:	4c03      	ldr	r4, [pc, #12]	; (8021f30 <strftime+0x10>)
 8021f24:	9400      	str	r4, [sp, #0]
 8021f26:	f7ff fb0b 	bl	8021540 <__strftime>
 8021f2a:	b002      	add	sp, #8
 8021f2c:	bd10      	pop	{r4, pc}
 8021f2e:	bf00      	nop
 8021f30:	200001d0 	.word	0x200001d0

08021f34 <strstr>:
 8021f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f36:	780c      	ldrb	r4, [r1, #0]
 8021f38:	b164      	cbz	r4, 8021f54 <strstr+0x20>
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	781a      	ldrb	r2, [r3, #0]
 8021f3e:	4618      	mov	r0, r3
 8021f40:	1c5e      	adds	r6, r3, #1
 8021f42:	b90a      	cbnz	r2, 8021f48 <strstr+0x14>
 8021f44:	4610      	mov	r0, r2
 8021f46:	e005      	b.n	8021f54 <strstr+0x20>
 8021f48:	4294      	cmp	r4, r2
 8021f4a:	d108      	bne.n	8021f5e <strstr+0x2a>
 8021f4c:	460d      	mov	r5, r1
 8021f4e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8021f52:	b902      	cbnz	r2, 8021f56 <strstr+0x22>
 8021f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f56:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8021f5a:	4297      	cmp	r7, r2
 8021f5c:	d0f7      	beq.n	8021f4e <strstr+0x1a>
 8021f5e:	4633      	mov	r3, r6
 8021f60:	e7ec      	b.n	8021f3c <strstr+0x8>
	...

08021f64 <_strtol_l.isra.0>:
 8021f64:	2b01      	cmp	r3, #1
 8021f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021f6a:	d001      	beq.n	8021f70 <_strtol_l.isra.0+0xc>
 8021f6c:	2b24      	cmp	r3, #36	; 0x24
 8021f6e:	d906      	bls.n	8021f7e <_strtol_l.isra.0+0x1a>
 8021f70:	f7fe fa84 	bl	802047c <__errno>
 8021f74:	2316      	movs	r3, #22
 8021f76:	6003      	str	r3, [r0, #0]
 8021f78:	2000      	movs	r0, #0
 8021f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f7e:	4f3a      	ldr	r7, [pc, #232]	; (8022068 <_strtol_l.isra.0+0x104>)
 8021f80:	468e      	mov	lr, r1
 8021f82:	4676      	mov	r6, lr
 8021f84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021f88:	5de5      	ldrb	r5, [r4, r7]
 8021f8a:	f015 0508 	ands.w	r5, r5, #8
 8021f8e:	d1f8      	bne.n	8021f82 <_strtol_l.isra.0+0x1e>
 8021f90:	2c2d      	cmp	r4, #45	; 0x2d
 8021f92:	d134      	bne.n	8021ffe <_strtol_l.isra.0+0x9a>
 8021f94:	f89e 4000 	ldrb.w	r4, [lr]
 8021f98:	f04f 0801 	mov.w	r8, #1
 8021f9c:	f106 0e02 	add.w	lr, r6, #2
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d05c      	beq.n	802205e <_strtol_l.isra.0+0xfa>
 8021fa4:	2b10      	cmp	r3, #16
 8021fa6:	d10c      	bne.n	8021fc2 <_strtol_l.isra.0+0x5e>
 8021fa8:	2c30      	cmp	r4, #48	; 0x30
 8021faa:	d10a      	bne.n	8021fc2 <_strtol_l.isra.0+0x5e>
 8021fac:	f89e 4000 	ldrb.w	r4, [lr]
 8021fb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021fb4:	2c58      	cmp	r4, #88	; 0x58
 8021fb6:	d14d      	bne.n	8022054 <_strtol_l.isra.0+0xf0>
 8021fb8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021fbc:	2310      	movs	r3, #16
 8021fbe:	f10e 0e02 	add.w	lr, lr, #2
 8021fc2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021fc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021fca:	2600      	movs	r6, #0
 8021fcc:	fbbc f9f3 	udiv	r9, ip, r3
 8021fd0:	4635      	mov	r5, r6
 8021fd2:	fb03 ca19 	mls	sl, r3, r9, ip
 8021fd6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021fda:	2f09      	cmp	r7, #9
 8021fdc:	d818      	bhi.n	8022010 <_strtol_l.isra.0+0xac>
 8021fde:	463c      	mov	r4, r7
 8021fe0:	42a3      	cmp	r3, r4
 8021fe2:	dd24      	ble.n	802202e <_strtol_l.isra.0+0xca>
 8021fe4:	2e00      	cmp	r6, #0
 8021fe6:	db1f      	blt.n	8022028 <_strtol_l.isra.0+0xc4>
 8021fe8:	45a9      	cmp	r9, r5
 8021fea:	d31d      	bcc.n	8022028 <_strtol_l.isra.0+0xc4>
 8021fec:	d101      	bne.n	8021ff2 <_strtol_l.isra.0+0x8e>
 8021fee:	45a2      	cmp	sl, r4
 8021ff0:	db1a      	blt.n	8022028 <_strtol_l.isra.0+0xc4>
 8021ff2:	fb05 4503 	mla	r5, r5, r3, r4
 8021ff6:	2601      	movs	r6, #1
 8021ff8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021ffc:	e7eb      	b.n	8021fd6 <_strtol_l.isra.0+0x72>
 8021ffe:	2c2b      	cmp	r4, #43	; 0x2b
 8022000:	bf08      	it	eq
 8022002:	f89e 4000 	ldrbeq.w	r4, [lr]
 8022006:	46a8      	mov	r8, r5
 8022008:	bf08      	it	eq
 802200a:	f106 0e02 	addeq.w	lr, r6, #2
 802200e:	e7c7      	b.n	8021fa0 <_strtol_l.isra.0+0x3c>
 8022010:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8022014:	2f19      	cmp	r7, #25
 8022016:	d801      	bhi.n	802201c <_strtol_l.isra.0+0xb8>
 8022018:	3c37      	subs	r4, #55	; 0x37
 802201a:	e7e1      	b.n	8021fe0 <_strtol_l.isra.0+0x7c>
 802201c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8022020:	2f19      	cmp	r7, #25
 8022022:	d804      	bhi.n	802202e <_strtol_l.isra.0+0xca>
 8022024:	3c57      	subs	r4, #87	; 0x57
 8022026:	e7db      	b.n	8021fe0 <_strtol_l.isra.0+0x7c>
 8022028:	f04f 36ff 	mov.w	r6, #4294967295
 802202c:	e7e4      	b.n	8021ff8 <_strtol_l.isra.0+0x94>
 802202e:	2e00      	cmp	r6, #0
 8022030:	da05      	bge.n	802203e <_strtol_l.isra.0+0xda>
 8022032:	2322      	movs	r3, #34	; 0x22
 8022034:	6003      	str	r3, [r0, #0]
 8022036:	4665      	mov	r5, ip
 8022038:	b942      	cbnz	r2, 802204c <_strtol_l.isra.0+0xe8>
 802203a:	4628      	mov	r0, r5
 802203c:	e79d      	b.n	8021f7a <_strtol_l.isra.0+0x16>
 802203e:	f1b8 0f00 	cmp.w	r8, #0
 8022042:	d000      	beq.n	8022046 <_strtol_l.isra.0+0xe2>
 8022044:	426d      	negs	r5, r5
 8022046:	2a00      	cmp	r2, #0
 8022048:	d0f7      	beq.n	802203a <_strtol_l.isra.0+0xd6>
 802204a:	b10e      	cbz	r6, 8022050 <_strtol_l.isra.0+0xec>
 802204c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022050:	6011      	str	r1, [r2, #0]
 8022052:	e7f2      	b.n	802203a <_strtol_l.isra.0+0xd6>
 8022054:	2430      	movs	r4, #48	; 0x30
 8022056:	2b00      	cmp	r3, #0
 8022058:	d1b3      	bne.n	8021fc2 <_strtol_l.isra.0+0x5e>
 802205a:	2308      	movs	r3, #8
 802205c:	e7b1      	b.n	8021fc2 <_strtol_l.isra.0+0x5e>
 802205e:	2c30      	cmp	r4, #48	; 0x30
 8022060:	d0a4      	beq.n	8021fac <_strtol_l.isra.0+0x48>
 8022062:	230a      	movs	r3, #10
 8022064:	e7ad      	b.n	8021fc2 <_strtol_l.isra.0+0x5e>
 8022066:	bf00      	nop
 8022068:	0802a7a1 	.word	0x0802a7a1

0802206c <_strtol_r>:
 802206c:	f7ff bf7a 	b.w	8021f64 <_strtol_l.isra.0>

08022070 <strtol>:
 8022070:	4613      	mov	r3, r2
 8022072:	460a      	mov	r2, r1
 8022074:	4601      	mov	r1, r0
 8022076:	4802      	ldr	r0, [pc, #8]	; (8022080 <strtol+0x10>)
 8022078:	6800      	ldr	r0, [r0, #0]
 802207a:	f7ff bf73 	b.w	8021f64 <_strtol_l.isra.0>
 802207e:	bf00      	nop
 8022080:	20000108 	.word	0x20000108

08022084 <_strtoul_l.isra.0>:
 8022084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022088:	4e3b      	ldr	r6, [pc, #236]	; (8022178 <_strtoul_l.isra.0+0xf4>)
 802208a:	4686      	mov	lr, r0
 802208c:	468c      	mov	ip, r1
 802208e:	4660      	mov	r0, ip
 8022090:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022094:	5da5      	ldrb	r5, [r4, r6]
 8022096:	f015 0508 	ands.w	r5, r5, #8
 802209a:	d1f8      	bne.n	802208e <_strtoul_l.isra.0+0xa>
 802209c:	2c2d      	cmp	r4, #45	; 0x2d
 802209e:	d134      	bne.n	802210a <_strtoul_l.isra.0+0x86>
 80220a0:	f89c 4000 	ldrb.w	r4, [ip]
 80220a4:	f04f 0801 	mov.w	r8, #1
 80220a8:	f100 0c02 	add.w	ip, r0, #2
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d05e      	beq.n	802216e <_strtoul_l.isra.0+0xea>
 80220b0:	2b10      	cmp	r3, #16
 80220b2:	d10c      	bne.n	80220ce <_strtoul_l.isra.0+0x4a>
 80220b4:	2c30      	cmp	r4, #48	; 0x30
 80220b6:	d10a      	bne.n	80220ce <_strtoul_l.isra.0+0x4a>
 80220b8:	f89c 0000 	ldrb.w	r0, [ip]
 80220bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80220c0:	2858      	cmp	r0, #88	; 0x58
 80220c2:	d14f      	bne.n	8022164 <_strtoul_l.isra.0+0xe0>
 80220c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80220c8:	2310      	movs	r3, #16
 80220ca:	f10c 0c02 	add.w	ip, ip, #2
 80220ce:	f04f 37ff 	mov.w	r7, #4294967295
 80220d2:	2500      	movs	r5, #0
 80220d4:	fbb7 f7f3 	udiv	r7, r7, r3
 80220d8:	fb03 f907 	mul.w	r9, r3, r7
 80220dc:	ea6f 0909 	mvn.w	r9, r9
 80220e0:	4628      	mov	r0, r5
 80220e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80220e6:	2e09      	cmp	r6, #9
 80220e8:	d818      	bhi.n	802211c <_strtoul_l.isra.0+0x98>
 80220ea:	4634      	mov	r4, r6
 80220ec:	42a3      	cmp	r3, r4
 80220ee:	dd24      	ble.n	802213a <_strtoul_l.isra.0+0xb6>
 80220f0:	2d00      	cmp	r5, #0
 80220f2:	db1f      	blt.n	8022134 <_strtoul_l.isra.0+0xb0>
 80220f4:	4287      	cmp	r7, r0
 80220f6:	d31d      	bcc.n	8022134 <_strtoul_l.isra.0+0xb0>
 80220f8:	d101      	bne.n	80220fe <_strtoul_l.isra.0+0x7a>
 80220fa:	45a1      	cmp	r9, r4
 80220fc:	db1a      	blt.n	8022134 <_strtoul_l.isra.0+0xb0>
 80220fe:	fb00 4003 	mla	r0, r0, r3, r4
 8022102:	2501      	movs	r5, #1
 8022104:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022108:	e7eb      	b.n	80220e2 <_strtoul_l.isra.0+0x5e>
 802210a:	2c2b      	cmp	r4, #43	; 0x2b
 802210c:	bf08      	it	eq
 802210e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8022112:	46a8      	mov	r8, r5
 8022114:	bf08      	it	eq
 8022116:	f100 0c02 	addeq.w	ip, r0, #2
 802211a:	e7c7      	b.n	80220ac <_strtoul_l.isra.0+0x28>
 802211c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022120:	2e19      	cmp	r6, #25
 8022122:	d801      	bhi.n	8022128 <_strtoul_l.isra.0+0xa4>
 8022124:	3c37      	subs	r4, #55	; 0x37
 8022126:	e7e1      	b.n	80220ec <_strtoul_l.isra.0+0x68>
 8022128:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 802212c:	2e19      	cmp	r6, #25
 802212e:	d804      	bhi.n	802213a <_strtoul_l.isra.0+0xb6>
 8022130:	3c57      	subs	r4, #87	; 0x57
 8022132:	e7db      	b.n	80220ec <_strtoul_l.isra.0+0x68>
 8022134:	f04f 35ff 	mov.w	r5, #4294967295
 8022138:	e7e4      	b.n	8022104 <_strtoul_l.isra.0+0x80>
 802213a:	2d00      	cmp	r5, #0
 802213c:	da07      	bge.n	802214e <_strtoul_l.isra.0+0xca>
 802213e:	2322      	movs	r3, #34	; 0x22
 8022140:	f8ce 3000 	str.w	r3, [lr]
 8022144:	f04f 30ff 	mov.w	r0, #4294967295
 8022148:	b942      	cbnz	r2, 802215c <_strtoul_l.isra.0+0xd8>
 802214a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802214e:	f1b8 0f00 	cmp.w	r8, #0
 8022152:	d000      	beq.n	8022156 <_strtoul_l.isra.0+0xd2>
 8022154:	4240      	negs	r0, r0
 8022156:	2a00      	cmp	r2, #0
 8022158:	d0f7      	beq.n	802214a <_strtoul_l.isra.0+0xc6>
 802215a:	b10d      	cbz	r5, 8022160 <_strtoul_l.isra.0+0xdc>
 802215c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022160:	6011      	str	r1, [r2, #0]
 8022162:	e7f2      	b.n	802214a <_strtoul_l.isra.0+0xc6>
 8022164:	2430      	movs	r4, #48	; 0x30
 8022166:	2b00      	cmp	r3, #0
 8022168:	d1b1      	bne.n	80220ce <_strtoul_l.isra.0+0x4a>
 802216a:	2308      	movs	r3, #8
 802216c:	e7af      	b.n	80220ce <_strtoul_l.isra.0+0x4a>
 802216e:	2c30      	cmp	r4, #48	; 0x30
 8022170:	d0a2      	beq.n	80220b8 <_strtoul_l.isra.0+0x34>
 8022172:	230a      	movs	r3, #10
 8022174:	e7ab      	b.n	80220ce <_strtoul_l.isra.0+0x4a>
 8022176:	bf00      	nop
 8022178:	0802a7a1 	.word	0x0802a7a1

0802217c <_strtoul_r>:
 802217c:	f7ff bf82 	b.w	8022084 <_strtoul_l.isra.0>

08022180 <strtoul>:
 8022180:	4613      	mov	r3, r2
 8022182:	460a      	mov	r2, r1
 8022184:	4601      	mov	r1, r0
 8022186:	4802      	ldr	r0, [pc, #8]	; (8022190 <strtoul+0x10>)
 8022188:	6800      	ldr	r0, [r0, #0]
 802218a:	f7ff bf7b 	b.w	8022084 <_strtoul_l.isra.0>
 802218e:	bf00      	nop
 8022190:	20000108 	.word	0x20000108

08022194 <__tzcalc_limits>:
 8022194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022198:	4680      	mov	r8, r0
 802219a:	f000 fc6d 	bl	8022a78 <__gettzinfo>
 802219e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80221a2:	4598      	cmp	r8, r3
 80221a4:	f340 8098 	ble.w	80222d8 <__tzcalc_limits+0x144>
 80221a8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80221ac:	4443      	add	r3, r8
 80221ae:	109b      	asrs	r3, r3, #2
 80221b0:	f240 126d 	movw	r2, #365	; 0x16d
 80221b4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80221b8:	fb02 3505 	mla	r5, r2, r5, r3
 80221bc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80221c0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80221c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80221c8:	441d      	add	r5, r3
 80221ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80221ce:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80221d2:	fb98 f7f3 	sdiv	r7, r8, r3
 80221d6:	fb03 8717 	mls	r7, r3, r7, r8
 80221da:	4442      	add	r2, r8
 80221dc:	fab7 fc87 	clz	ip, r7
 80221e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80221e4:	f008 0303 	and.w	r3, r8, #3
 80221e8:	4415      	add	r5, r2
 80221ea:	2264      	movs	r2, #100	; 0x64
 80221ec:	f8c0 8004 	str.w	r8, [r0, #4]
 80221f0:	fb98 f6f2 	sdiv	r6, r8, r2
 80221f4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80221f8:	fb02 8616 	mls	r6, r2, r6, r8
 80221fc:	4604      	mov	r4, r0
 80221fe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8022202:	9300      	str	r3, [sp, #0]
 8022204:	f04f 0e07 	mov.w	lr, #7
 8022208:	7a22      	ldrb	r2, [r4, #8]
 802220a:	6963      	ldr	r3, [r4, #20]
 802220c:	2a4a      	cmp	r2, #74	; 0x4a
 802220e:	d128      	bne.n	8022262 <__tzcalc_limits+0xce>
 8022210:	9900      	ldr	r1, [sp, #0]
 8022212:	18ea      	adds	r2, r5, r3
 8022214:	b901      	cbnz	r1, 8022218 <__tzcalc_limits+0x84>
 8022216:	b906      	cbnz	r6, 802221a <__tzcalc_limits+0x86>
 8022218:	bb0f      	cbnz	r7, 802225e <__tzcalc_limits+0xca>
 802221a:	2b3b      	cmp	r3, #59	; 0x3b
 802221c:	bfd4      	ite	le
 802221e:	2300      	movle	r3, #0
 8022220:	2301      	movgt	r3, #1
 8022222:	4413      	add	r3, r2
 8022224:	1e5a      	subs	r2, r3, #1
 8022226:	69a3      	ldr	r3, [r4, #24]
 8022228:	492c      	ldr	r1, [pc, #176]	; (80222dc <__tzcalc_limits+0x148>)
 802222a:	fb01 3202 	mla	r2, r1, r2, r3
 802222e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022230:	4413      	add	r3, r2
 8022232:	461a      	mov	r2, r3
 8022234:	17db      	asrs	r3, r3, #31
 8022236:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802223a:	3428      	adds	r4, #40	; 0x28
 802223c:	45a3      	cmp	fp, r4
 802223e:	d1e3      	bne.n	8022208 <__tzcalc_limits+0x74>
 8022240:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8022244:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8022248:	4294      	cmp	r4, r2
 802224a:	eb75 0303 	sbcs.w	r3, r5, r3
 802224e:	bfb4      	ite	lt
 8022250:	2301      	movlt	r3, #1
 8022252:	2300      	movge	r3, #0
 8022254:	6003      	str	r3, [r0, #0]
 8022256:	2001      	movs	r0, #1
 8022258:	b003      	add	sp, #12
 802225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802225e:	2300      	movs	r3, #0
 8022260:	e7df      	b.n	8022222 <__tzcalc_limits+0x8e>
 8022262:	2a44      	cmp	r2, #68	; 0x44
 8022264:	d101      	bne.n	802226a <__tzcalc_limits+0xd6>
 8022266:	18ea      	adds	r2, r5, r3
 8022268:	e7dd      	b.n	8022226 <__tzcalc_limits+0x92>
 802226a:	9a00      	ldr	r2, [sp, #0]
 802226c:	bb72      	cbnz	r2, 80222cc <__tzcalc_limits+0x138>
 802226e:	2e00      	cmp	r6, #0
 8022270:	bf0c      	ite	eq
 8022272:	46e0      	moveq	r8, ip
 8022274:	f04f 0801 	movne.w	r8, #1
 8022278:	4919      	ldr	r1, [pc, #100]	; (80222e0 <__tzcalc_limits+0x14c>)
 802227a:	68e2      	ldr	r2, [r4, #12]
 802227c:	9201      	str	r2, [sp, #4]
 802227e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8022282:	fb0a 1808 	mla	r8, sl, r8, r1
 8022286:	462a      	mov	r2, r5
 8022288:	f04f 0900 	mov.w	r9, #0
 802228c:	f1a8 0804 	sub.w	r8, r8, #4
 8022290:	9901      	ldr	r1, [sp, #4]
 8022292:	f109 0901 	add.w	r9, r9, #1
 8022296:	4549      	cmp	r1, r9
 8022298:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 802229c:	dc18      	bgt.n	80222d0 <__tzcalc_limits+0x13c>
 802229e:	f102 0804 	add.w	r8, r2, #4
 80222a2:	fb98 f9fe 	sdiv	r9, r8, lr
 80222a6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80222aa:	eba8 0909 	sub.w	r9, r8, r9
 80222ae:	ebb3 0909 	subs.w	r9, r3, r9
 80222b2:	6923      	ldr	r3, [r4, #16]
 80222b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80222b8:	bf48      	it	mi
 80222ba:	f109 0907 	addmi.w	r9, r9, #7
 80222be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80222c2:	444b      	add	r3, r9
 80222c4:	4553      	cmp	r3, sl
 80222c6:	da05      	bge.n	80222d4 <__tzcalc_limits+0x140>
 80222c8:	441a      	add	r2, r3
 80222ca:	e7ac      	b.n	8022226 <__tzcalc_limits+0x92>
 80222cc:	46e0      	mov	r8, ip
 80222ce:	e7d3      	b.n	8022278 <__tzcalc_limits+0xe4>
 80222d0:	4452      	add	r2, sl
 80222d2:	e7dd      	b.n	8022290 <__tzcalc_limits+0xfc>
 80222d4:	3b07      	subs	r3, #7
 80222d6:	e7f5      	b.n	80222c4 <__tzcalc_limits+0x130>
 80222d8:	2000      	movs	r0, #0
 80222da:	e7bd      	b.n	8022258 <__tzcalc_limits+0xc4>
 80222dc:	00015180 	.word	0x00015180
 80222e0:	0802a3e8 	.word	0x0802a3e8

080222e4 <__tz_lock>:
 80222e4:	4801      	ldr	r0, [pc, #4]	; (80222ec <__tz_lock+0x8>)
 80222e6:	f7fe be21 	b.w	8020f2c <__retarget_lock_acquire>
 80222ea:	bf00      	nop
 80222ec:	2000100f 	.word	0x2000100f

080222f0 <__tz_unlock>:
 80222f0:	4801      	ldr	r0, [pc, #4]	; (80222f8 <__tz_unlock+0x8>)
 80222f2:	f7fe be1d 	b.w	8020f30 <__retarget_lock_release>
 80222f6:	bf00      	nop
 80222f8:	2000100f 	.word	0x2000100f

080222fc <_tzset_unlocked>:
 80222fc:	4b01      	ldr	r3, [pc, #4]	; (8022304 <_tzset_unlocked+0x8>)
 80222fe:	6818      	ldr	r0, [r3, #0]
 8022300:	f000 b802 	b.w	8022308 <_tzset_unlocked_r>
 8022304:	20000108 	.word	0x20000108

08022308 <_tzset_unlocked_r>:
 8022308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802230c:	b08d      	sub	sp, #52	; 0x34
 802230e:	4607      	mov	r7, r0
 8022310:	f000 fbb2 	bl	8022a78 <__gettzinfo>
 8022314:	49ae      	ldr	r1, [pc, #696]	; (80225d0 <_tzset_unlocked_r+0x2c8>)
 8022316:	4eaf      	ldr	r6, [pc, #700]	; (80225d4 <_tzset_unlocked_r+0x2cc>)
 8022318:	4605      	mov	r5, r0
 802231a:	4638      	mov	r0, r7
 802231c:	f000 fba4 	bl	8022a68 <_getenv_r>
 8022320:	4604      	mov	r4, r0
 8022322:	b970      	cbnz	r0, 8022342 <_tzset_unlocked_r+0x3a>
 8022324:	4bac      	ldr	r3, [pc, #688]	; (80225d8 <_tzset_unlocked_r+0x2d0>)
 8022326:	4aad      	ldr	r2, [pc, #692]	; (80225dc <_tzset_unlocked_r+0x2d4>)
 8022328:	6018      	str	r0, [r3, #0]
 802232a:	4bad      	ldr	r3, [pc, #692]	; (80225e0 <_tzset_unlocked_r+0x2d8>)
 802232c:	6018      	str	r0, [r3, #0]
 802232e:	4bad      	ldr	r3, [pc, #692]	; (80225e4 <_tzset_unlocked_r+0x2dc>)
 8022330:	6830      	ldr	r0, [r6, #0]
 8022332:	e9c3 2200 	strd	r2, r2, [r3]
 8022336:	f7fe fe69 	bl	802100c <free>
 802233a:	6034      	str	r4, [r6, #0]
 802233c:	b00d      	add	sp, #52	; 0x34
 802233e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022342:	6831      	ldr	r1, [r6, #0]
 8022344:	2900      	cmp	r1, #0
 8022346:	d15f      	bne.n	8022408 <_tzset_unlocked_r+0x100>
 8022348:	6830      	ldr	r0, [r6, #0]
 802234a:	f7fe fe5f 	bl	802100c <free>
 802234e:	4620      	mov	r0, r4
 8022350:	f7dd ff74 	bl	800023c <strlen>
 8022354:	1c41      	adds	r1, r0, #1
 8022356:	4638      	mov	r0, r7
 8022358:	f7fe fed6 	bl	8021108 <_malloc_r>
 802235c:	6030      	str	r0, [r6, #0]
 802235e:	2800      	cmp	r0, #0
 8022360:	d157      	bne.n	8022412 <_tzset_unlocked_r+0x10a>
 8022362:	7823      	ldrb	r3, [r4, #0]
 8022364:	4aa0      	ldr	r2, [pc, #640]	; (80225e8 <_tzset_unlocked_r+0x2e0>)
 8022366:	49a1      	ldr	r1, [pc, #644]	; (80225ec <_tzset_unlocked_r+0x2e4>)
 8022368:	2b3a      	cmp	r3, #58	; 0x3a
 802236a:	bf08      	it	eq
 802236c:	3401      	addeq	r4, #1
 802236e:	ae0a      	add	r6, sp, #40	; 0x28
 8022370:	4633      	mov	r3, r6
 8022372:	4620      	mov	r0, r4
 8022374:	f001 f976 	bl	8023664 <siscanf>
 8022378:	2800      	cmp	r0, #0
 802237a:	dddf      	ble.n	802233c <_tzset_unlocked_r+0x34>
 802237c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802237e:	18e7      	adds	r7, r4, r3
 8022380:	5ce3      	ldrb	r3, [r4, r3]
 8022382:	2b2d      	cmp	r3, #45	; 0x2d
 8022384:	d149      	bne.n	802241a <_tzset_unlocked_r+0x112>
 8022386:	3701      	adds	r7, #1
 8022388:	f04f 34ff 	mov.w	r4, #4294967295
 802238c:	f10d 0a20 	add.w	sl, sp, #32
 8022390:	f10d 0b1e 	add.w	fp, sp, #30
 8022394:	f04f 0800 	mov.w	r8, #0
 8022398:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802239c:	4994      	ldr	r1, [pc, #592]	; (80225f0 <_tzset_unlocked_r+0x2e8>)
 802239e:	9603      	str	r6, [sp, #12]
 80223a0:	f8cd b000 	str.w	fp, [sp]
 80223a4:	4633      	mov	r3, r6
 80223a6:	aa07      	add	r2, sp, #28
 80223a8:	4638      	mov	r0, r7
 80223aa:	f8ad 801e 	strh.w	r8, [sp, #30]
 80223ae:	f8ad 8020 	strh.w	r8, [sp, #32]
 80223b2:	f001 f957 	bl	8023664 <siscanf>
 80223b6:	4540      	cmp	r0, r8
 80223b8:	ddc0      	ble.n	802233c <_tzset_unlocked_r+0x34>
 80223ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80223be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80223c2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80225fc <_tzset_unlocked_r+0x2f4>
 80223c6:	213c      	movs	r1, #60	; 0x3c
 80223c8:	fb01 2203 	mla	r2, r1, r3, r2
 80223cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80223d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80223d4:	fb01 2303 	mla	r3, r1, r3, r2
 80223d8:	435c      	muls	r4, r3
 80223da:	62ac      	str	r4, [r5, #40]	; 0x28
 80223dc:	4c81      	ldr	r4, [pc, #516]	; (80225e4 <_tzset_unlocked_r+0x2dc>)
 80223de:	4b82      	ldr	r3, [pc, #520]	; (80225e8 <_tzset_unlocked_r+0x2e0>)
 80223e0:	6023      	str	r3, [r4, #0]
 80223e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223e4:	4981      	ldr	r1, [pc, #516]	; (80225ec <_tzset_unlocked_r+0x2e4>)
 80223e6:	441f      	add	r7, r3
 80223e8:	464a      	mov	r2, r9
 80223ea:	4633      	mov	r3, r6
 80223ec:	4638      	mov	r0, r7
 80223ee:	f001 f939 	bl	8023664 <siscanf>
 80223f2:	4540      	cmp	r0, r8
 80223f4:	dc16      	bgt.n	8022424 <_tzset_unlocked_r+0x11c>
 80223f6:	6823      	ldr	r3, [r4, #0]
 80223f8:	6063      	str	r3, [r4, #4]
 80223fa:	4b77      	ldr	r3, [pc, #476]	; (80225d8 <_tzset_unlocked_r+0x2d0>)
 80223fc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80223fe:	601a      	str	r2, [r3, #0]
 8022400:	4b77      	ldr	r3, [pc, #476]	; (80225e0 <_tzset_unlocked_r+0x2d8>)
 8022402:	f8c3 8000 	str.w	r8, [r3]
 8022406:	e799      	b.n	802233c <_tzset_unlocked_r+0x34>
 8022408:	f7dd ff20 	bl	800024c <strcmp>
 802240c:	2800      	cmp	r0, #0
 802240e:	d19b      	bne.n	8022348 <_tzset_unlocked_r+0x40>
 8022410:	e794      	b.n	802233c <_tzset_unlocked_r+0x34>
 8022412:	4621      	mov	r1, r4
 8022414:	f7ff f829 	bl	802146a <strcpy>
 8022418:	e7a3      	b.n	8022362 <_tzset_unlocked_r+0x5a>
 802241a:	2b2b      	cmp	r3, #43	; 0x2b
 802241c:	bf08      	it	eq
 802241e:	3701      	addeq	r7, #1
 8022420:	2401      	movs	r4, #1
 8022422:	e7b3      	b.n	802238c <_tzset_unlocked_r+0x84>
 8022424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022426:	f8c4 9004 	str.w	r9, [r4, #4]
 802242a:	18fc      	adds	r4, r7, r3
 802242c:	5cfb      	ldrb	r3, [r7, r3]
 802242e:	2b2d      	cmp	r3, #45	; 0x2d
 8022430:	f040 808b 	bne.w	802254a <_tzset_unlocked_r+0x242>
 8022434:	3401      	adds	r4, #1
 8022436:	f04f 37ff 	mov.w	r7, #4294967295
 802243a:	2300      	movs	r3, #0
 802243c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022440:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022444:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022448:	930a      	str	r3, [sp, #40]	; 0x28
 802244a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802244e:	e9cd b600 	strd	fp, r6, [sp]
 8022452:	4967      	ldr	r1, [pc, #412]	; (80225f0 <_tzset_unlocked_r+0x2e8>)
 8022454:	4633      	mov	r3, r6
 8022456:	aa07      	add	r2, sp, #28
 8022458:	4620      	mov	r0, r4
 802245a:	f001 f903 	bl	8023664 <siscanf>
 802245e:	2800      	cmp	r0, #0
 8022460:	dc78      	bgt.n	8022554 <_tzset_unlocked_r+0x24c>
 8022462:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8022464:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8022468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802246a:	652f      	str	r7, [r5, #80]	; 0x50
 802246c:	441c      	add	r4, r3
 802246e:	462f      	mov	r7, r5
 8022470:	f04f 0900 	mov.w	r9, #0
 8022474:	7823      	ldrb	r3, [r4, #0]
 8022476:	2b2c      	cmp	r3, #44	; 0x2c
 8022478:	bf08      	it	eq
 802247a:	3401      	addeq	r4, #1
 802247c:	f894 8000 	ldrb.w	r8, [r4]
 8022480:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022484:	d178      	bne.n	8022578 <_tzset_unlocked_r+0x270>
 8022486:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802248a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802248e:	ab09      	add	r3, sp, #36	; 0x24
 8022490:	9300      	str	r3, [sp, #0]
 8022492:	4958      	ldr	r1, [pc, #352]	; (80225f4 <_tzset_unlocked_r+0x2ec>)
 8022494:	9603      	str	r6, [sp, #12]
 8022496:	4633      	mov	r3, r6
 8022498:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802249c:	4620      	mov	r0, r4
 802249e:	f001 f8e1 	bl	8023664 <siscanf>
 80224a2:	2803      	cmp	r0, #3
 80224a4:	f47f af4a 	bne.w	802233c <_tzset_unlocked_r+0x34>
 80224a8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80224ac:	1e4b      	subs	r3, r1, #1
 80224ae:	2b0b      	cmp	r3, #11
 80224b0:	f63f af44 	bhi.w	802233c <_tzset_unlocked_r+0x34>
 80224b4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80224b8:	1e53      	subs	r3, r2, #1
 80224ba:	2b04      	cmp	r3, #4
 80224bc:	f63f af3e 	bhi.w	802233c <_tzset_unlocked_r+0x34>
 80224c0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80224c4:	2b06      	cmp	r3, #6
 80224c6:	f63f af39 	bhi.w	802233c <_tzset_unlocked_r+0x34>
 80224ca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80224ce:	f887 8008 	strb.w	r8, [r7, #8]
 80224d2:	617b      	str	r3, [r7, #20]
 80224d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80224d6:	eb04 0803 	add.w	r8, r4, r3
 80224da:	2302      	movs	r3, #2
 80224dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80224e0:	2300      	movs	r3, #0
 80224e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80224e6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80224ea:	930a      	str	r3, [sp, #40]	; 0x28
 80224ec:	f898 3000 	ldrb.w	r3, [r8]
 80224f0:	2b2f      	cmp	r3, #47	; 0x2f
 80224f2:	d109      	bne.n	8022508 <_tzset_unlocked_r+0x200>
 80224f4:	e9cd a602 	strd	sl, r6, [sp, #8]
 80224f8:	e9cd b600 	strd	fp, r6, [sp]
 80224fc:	493e      	ldr	r1, [pc, #248]	; (80225f8 <_tzset_unlocked_r+0x2f0>)
 80224fe:	4633      	mov	r3, r6
 8022500:	aa07      	add	r2, sp, #28
 8022502:	4640      	mov	r0, r8
 8022504:	f001 f8ae 	bl	8023664 <siscanf>
 8022508:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802250c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022510:	213c      	movs	r1, #60	; 0x3c
 8022512:	fb01 2203 	mla	r2, r1, r3, r2
 8022516:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802251a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802251e:	fb01 2303 	mla	r3, r1, r3, r2
 8022522:	61bb      	str	r3, [r7, #24]
 8022524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022526:	3728      	adds	r7, #40	; 0x28
 8022528:	4444      	add	r4, r8
 802252a:	f1b9 0f00 	cmp.w	r9, #0
 802252e:	d020      	beq.n	8022572 <_tzset_unlocked_r+0x26a>
 8022530:	6868      	ldr	r0, [r5, #4]
 8022532:	f7ff fe2f 	bl	8022194 <__tzcalc_limits>
 8022536:	4b28      	ldr	r3, [pc, #160]	; (80225d8 <_tzset_unlocked_r+0x2d0>)
 8022538:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802253a:	601a      	str	r2, [r3, #0]
 802253c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802253e:	1a9b      	subs	r3, r3, r2
 8022540:	4a27      	ldr	r2, [pc, #156]	; (80225e0 <_tzset_unlocked_r+0x2d8>)
 8022542:	bf18      	it	ne
 8022544:	2301      	movne	r3, #1
 8022546:	6013      	str	r3, [r2, #0]
 8022548:	e6f8      	b.n	802233c <_tzset_unlocked_r+0x34>
 802254a:	2b2b      	cmp	r3, #43	; 0x2b
 802254c:	bf08      	it	eq
 802254e:	3401      	addeq	r4, #1
 8022550:	2701      	movs	r7, #1
 8022552:	e772      	b.n	802243a <_tzset_unlocked_r+0x132>
 8022554:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022558:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802255c:	213c      	movs	r1, #60	; 0x3c
 802255e:	fb01 2203 	mla	r2, r1, r3, r2
 8022562:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022566:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802256a:	fb01 2303 	mla	r3, r1, r3, r2
 802256e:	435f      	muls	r7, r3
 8022570:	e77a      	b.n	8022468 <_tzset_unlocked_r+0x160>
 8022572:	f04f 0901 	mov.w	r9, #1
 8022576:	e77d      	b.n	8022474 <_tzset_unlocked_r+0x16c>
 8022578:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802257c:	bf06      	itte	eq
 802257e:	3401      	addeq	r4, #1
 8022580:	4643      	moveq	r3, r8
 8022582:	2344      	movne	r3, #68	; 0x44
 8022584:	220a      	movs	r2, #10
 8022586:	a90b      	add	r1, sp, #44	; 0x2c
 8022588:	4620      	mov	r0, r4
 802258a:	9305      	str	r3, [sp, #20]
 802258c:	f7ff fdf8 	bl	8022180 <strtoul>
 8022590:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022594:	9b05      	ldr	r3, [sp, #20]
 8022596:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802259a:	45a0      	cmp	r8, r4
 802259c:	d114      	bne.n	80225c8 <_tzset_unlocked_r+0x2c0>
 802259e:	234d      	movs	r3, #77	; 0x4d
 80225a0:	f1b9 0f00 	cmp.w	r9, #0
 80225a4:	d107      	bne.n	80225b6 <_tzset_unlocked_r+0x2ae>
 80225a6:	722b      	strb	r3, [r5, #8]
 80225a8:	2103      	movs	r1, #3
 80225aa:	2302      	movs	r3, #2
 80225ac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80225b0:	f8c5 9014 	str.w	r9, [r5, #20]
 80225b4:	e791      	b.n	80224da <_tzset_unlocked_r+0x1d2>
 80225b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80225ba:	220b      	movs	r2, #11
 80225bc:	2301      	movs	r3, #1
 80225be:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80225c2:	2300      	movs	r3, #0
 80225c4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80225c6:	e788      	b.n	80224da <_tzset_unlocked_r+0x1d2>
 80225c8:	b280      	uxth	r0, r0
 80225ca:	723b      	strb	r3, [r7, #8]
 80225cc:	6178      	str	r0, [r7, #20]
 80225ce:	e784      	b.n	80224da <_tzset_unlocked_r+0x1d2>
 80225d0:	0802a728 	.word	0x0802a728
 80225d4:	20000f68 	.word	0x20000f68
 80225d8:	20000f70 	.word	0x20000f70
 80225dc:	0802a72b 	.word	0x0802a72b
 80225e0:	20000f6c 	.word	0x20000f6c
 80225e4:	2000016c 	.word	0x2000016c
 80225e8:	20000f5b 	.word	0x20000f5b
 80225ec:	0802a72f 	.word	0x0802a72f
 80225f0:	0802a752 	.word	0x0802a752
 80225f4:	0802a73e 	.word	0x0802a73e
 80225f8:	0802a751 	.word	0x0802a751
 80225fc:	20000f50 	.word	0x20000f50

08022600 <_vsniprintf_r>:
 8022600:	b530      	push	{r4, r5, lr}
 8022602:	1e14      	subs	r4, r2, #0
 8022604:	4605      	mov	r5, r0
 8022606:	b09b      	sub	sp, #108	; 0x6c
 8022608:	4618      	mov	r0, r3
 802260a:	da05      	bge.n	8022618 <_vsniprintf_r+0x18>
 802260c:	238b      	movs	r3, #139	; 0x8b
 802260e:	602b      	str	r3, [r5, #0]
 8022610:	f04f 30ff 	mov.w	r0, #4294967295
 8022614:	b01b      	add	sp, #108	; 0x6c
 8022616:	bd30      	pop	{r4, r5, pc}
 8022618:	f44f 7302 	mov.w	r3, #520	; 0x208
 802261c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022620:	bf14      	ite	ne
 8022622:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022626:	4623      	moveq	r3, r4
 8022628:	9302      	str	r3, [sp, #8]
 802262a:	9305      	str	r3, [sp, #20]
 802262c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022630:	9100      	str	r1, [sp, #0]
 8022632:	9104      	str	r1, [sp, #16]
 8022634:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022638:	4602      	mov	r2, r0
 802263a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802263c:	4669      	mov	r1, sp
 802263e:	4628      	mov	r0, r5
 8022640:	f000 fb94 	bl	8022d6c <_svfiprintf_r>
 8022644:	1c43      	adds	r3, r0, #1
 8022646:	bfbc      	itt	lt
 8022648:	238b      	movlt	r3, #139	; 0x8b
 802264a:	602b      	strlt	r3, [r5, #0]
 802264c:	2c00      	cmp	r4, #0
 802264e:	d0e1      	beq.n	8022614 <_vsniprintf_r+0x14>
 8022650:	9b00      	ldr	r3, [sp, #0]
 8022652:	2200      	movs	r2, #0
 8022654:	701a      	strb	r2, [r3, #0]
 8022656:	e7dd      	b.n	8022614 <_vsniprintf_r+0x14>

08022658 <vsniprintf>:
 8022658:	b507      	push	{r0, r1, r2, lr}
 802265a:	9300      	str	r3, [sp, #0]
 802265c:	4613      	mov	r3, r2
 802265e:	460a      	mov	r2, r1
 8022660:	4601      	mov	r1, r0
 8022662:	4803      	ldr	r0, [pc, #12]	; (8022670 <vsniprintf+0x18>)
 8022664:	6800      	ldr	r0, [r0, #0]
 8022666:	f7ff ffcb 	bl	8022600 <_vsniprintf_r>
 802266a:	b003      	add	sp, #12
 802266c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022670:	20000108 	.word	0x20000108

08022674 <__swbuf_r>:
 8022674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022676:	460e      	mov	r6, r1
 8022678:	4614      	mov	r4, r2
 802267a:	4605      	mov	r5, r0
 802267c:	b118      	cbz	r0, 8022686 <__swbuf_r+0x12>
 802267e:	6983      	ldr	r3, [r0, #24]
 8022680:	b90b      	cbnz	r3, 8022686 <__swbuf_r+0x12>
 8022682:	f7fe f8a1 	bl	80207c8 <__sinit>
 8022686:	4b21      	ldr	r3, [pc, #132]	; (802270c <__swbuf_r+0x98>)
 8022688:	429c      	cmp	r4, r3
 802268a:	d12b      	bne.n	80226e4 <__swbuf_r+0x70>
 802268c:	686c      	ldr	r4, [r5, #4]
 802268e:	69a3      	ldr	r3, [r4, #24]
 8022690:	60a3      	str	r3, [r4, #8]
 8022692:	89a3      	ldrh	r3, [r4, #12]
 8022694:	071a      	lsls	r2, r3, #28
 8022696:	d52f      	bpl.n	80226f8 <__swbuf_r+0x84>
 8022698:	6923      	ldr	r3, [r4, #16]
 802269a:	b36b      	cbz	r3, 80226f8 <__swbuf_r+0x84>
 802269c:	6923      	ldr	r3, [r4, #16]
 802269e:	6820      	ldr	r0, [r4, #0]
 80226a0:	1ac0      	subs	r0, r0, r3
 80226a2:	6963      	ldr	r3, [r4, #20]
 80226a4:	b2f6      	uxtb	r6, r6
 80226a6:	4283      	cmp	r3, r0
 80226a8:	4637      	mov	r7, r6
 80226aa:	dc04      	bgt.n	80226b6 <__swbuf_r+0x42>
 80226ac:	4621      	mov	r1, r4
 80226ae:	4628      	mov	r0, r5
 80226b0:	f7fd ffe4 	bl	802067c <_fflush_r>
 80226b4:	bb30      	cbnz	r0, 8022704 <__swbuf_r+0x90>
 80226b6:	68a3      	ldr	r3, [r4, #8]
 80226b8:	3b01      	subs	r3, #1
 80226ba:	60a3      	str	r3, [r4, #8]
 80226bc:	6823      	ldr	r3, [r4, #0]
 80226be:	1c5a      	adds	r2, r3, #1
 80226c0:	6022      	str	r2, [r4, #0]
 80226c2:	701e      	strb	r6, [r3, #0]
 80226c4:	6963      	ldr	r3, [r4, #20]
 80226c6:	3001      	adds	r0, #1
 80226c8:	4283      	cmp	r3, r0
 80226ca:	d004      	beq.n	80226d6 <__swbuf_r+0x62>
 80226cc:	89a3      	ldrh	r3, [r4, #12]
 80226ce:	07db      	lsls	r3, r3, #31
 80226d0:	d506      	bpl.n	80226e0 <__swbuf_r+0x6c>
 80226d2:	2e0a      	cmp	r6, #10
 80226d4:	d104      	bne.n	80226e0 <__swbuf_r+0x6c>
 80226d6:	4621      	mov	r1, r4
 80226d8:	4628      	mov	r0, r5
 80226da:	f7fd ffcf 	bl	802067c <_fflush_r>
 80226de:	b988      	cbnz	r0, 8022704 <__swbuf_r+0x90>
 80226e0:	4638      	mov	r0, r7
 80226e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226e4:	4b0a      	ldr	r3, [pc, #40]	; (8022710 <__swbuf_r+0x9c>)
 80226e6:	429c      	cmp	r4, r3
 80226e8:	d101      	bne.n	80226ee <__swbuf_r+0x7a>
 80226ea:	68ac      	ldr	r4, [r5, #8]
 80226ec:	e7cf      	b.n	802268e <__swbuf_r+0x1a>
 80226ee:	4b09      	ldr	r3, [pc, #36]	; (8022714 <__swbuf_r+0xa0>)
 80226f0:	429c      	cmp	r4, r3
 80226f2:	bf08      	it	eq
 80226f4:	68ec      	ldreq	r4, [r5, #12]
 80226f6:	e7ca      	b.n	802268e <__swbuf_r+0x1a>
 80226f8:	4621      	mov	r1, r4
 80226fa:	4628      	mov	r0, r5
 80226fc:	f000 f81e 	bl	802273c <__swsetup_r>
 8022700:	2800      	cmp	r0, #0
 8022702:	d0cb      	beq.n	802269c <__swbuf_r+0x28>
 8022704:	f04f 37ff 	mov.w	r7, #4294967295
 8022708:	e7ea      	b.n	80226e0 <__swbuf_r+0x6c>
 802270a:	bf00      	nop
 802270c:	0802a32c 	.word	0x0802a32c
 8022710:	0802a34c 	.word	0x0802a34c
 8022714:	0802a30c 	.word	0x0802a30c

08022718 <_write_r>:
 8022718:	b538      	push	{r3, r4, r5, lr}
 802271a:	4d07      	ldr	r5, [pc, #28]	; (8022738 <_write_r+0x20>)
 802271c:	4604      	mov	r4, r0
 802271e:	4608      	mov	r0, r1
 8022720:	4611      	mov	r1, r2
 8022722:	2200      	movs	r2, #0
 8022724:	602a      	str	r2, [r5, #0]
 8022726:	461a      	mov	r2, r3
 8022728:	f7de fb8a 	bl	8000e40 <_write>
 802272c:	1c43      	adds	r3, r0, #1
 802272e:	d102      	bne.n	8022736 <_write_r+0x1e>
 8022730:	682b      	ldr	r3, [r5, #0]
 8022732:	b103      	cbz	r3, 8022736 <_write_r+0x1e>
 8022734:	6023      	str	r3, [r4, #0]
 8022736:	bd38      	pop	{r3, r4, r5, pc}
 8022738:	20001014 	.word	0x20001014

0802273c <__swsetup_r>:
 802273c:	4b32      	ldr	r3, [pc, #200]	; (8022808 <__swsetup_r+0xcc>)
 802273e:	b570      	push	{r4, r5, r6, lr}
 8022740:	681d      	ldr	r5, [r3, #0]
 8022742:	4606      	mov	r6, r0
 8022744:	460c      	mov	r4, r1
 8022746:	b125      	cbz	r5, 8022752 <__swsetup_r+0x16>
 8022748:	69ab      	ldr	r3, [r5, #24]
 802274a:	b913      	cbnz	r3, 8022752 <__swsetup_r+0x16>
 802274c:	4628      	mov	r0, r5
 802274e:	f7fe f83b 	bl	80207c8 <__sinit>
 8022752:	4b2e      	ldr	r3, [pc, #184]	; (802280c <__swsetup_r+0xd0>)
 8022754:	429c      	cmp	r4, r3
 8022756:	d10f      	bne.n	8022778 <__swsetup_r+0x3c>
 8022758:	686c      	ldr	r4, [r5, #4]
 802275a:	89a3      	ldrh	r3, [r4, #12]
 802275c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022760:	0719      	lsls	r1, r3, #28
 8022762:	d42c      	bmi.n	80227be <__swsetup_r+0x82>
 8022764:	06dd      	lsls	r5, r3, #27
 8022766:	d411      	bmi.n	802278c <__swsetup_r+0x50>
 8022768:	2309      	movs	r3, #9
 802276a:	6033      	str	r3, [r6, #0]
 802276c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022770:	81a3      	strh	r3, [r4, #12]
 8022772:	f04f 30ff 	mov.w	r0, #4294967295
 8022776:	e03e      	b.n	80227f6 <__swsetup_r+0xba>
 8022778:	4b25      	ldr	r3, [pc, #148]	; (8022810 <__swsetup_r+0xd4>)
 802277a:	429c      	cmp	r4, r3
 802277c:	d101      	bne.n	8022782 <__swsetup_r+0x46>
 802277e:	68ac      	ldr	r4, [r5, #8]
 8022780:	e7eb      	b.n	802275a <__swsetup_r+0x1e>
 8022782:	4b24      	ldr	r3, [pc, #144]	; (8022814 <__swsetup_r+0xd8>)
 8022784:	429c      	cmp	r4, r3
 8022786:	bf08      	it	eq
 8022788:	68ec      	ldreq	r4, [r5, #12]
 802278a:	e7e6      	b.n	802275a <__swsetup_r+0x1e>
 802278c:	0758      	lsls	r0, r3, #29
 802278e:	d512      	bpl.n	80227b6 <__swsetup_r+0x7a>
 8022790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022792:	b141      	cbz	r1, 80227a6 <__swsetup_r+0x6a>
 8022794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022798:	4299      	cmp	r1, r3
 802279a:	d002      	beq.n	80227a2 <__swsetup_r+0x66>
 802279c:	4630      	mov	r0, r6
 802279e:	f7fe fc63 	bl	8021068 <_free_r>
 80227a2:	2300      	movs	r3, #0
 80227a4:	6363      	str	r3, [r4, #52]	; 0x34
 80227a6:	89a3      	ldrh	r3, [r4, #12]
 80227a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80227ac:	81a3      	strh	r3, [r4, #12]
 80227ae:	2300      	movs	r3, #0
 80227b0:	6063      	str	r3, [r4, #4]
 80227b2:	6923      	ldr	r3, [r4, #16]
 80227b4:	6023      	str	r3, [r4, #0]
 80227b6:	89a3      	ldrh	r3, [r4, #12]
 80227b8:	f043 0308 	orr.w	r3, r3, #8
 80227bc:	81a3      	strh	r3, [r4, #12]
 80227be:	6923      	ldr	r3, [r4, #16]
 80227c0:	b94b      	cbnz	r3, 80227d6 <__swsetup_r+0x9a>
 80227c2:	89a3      	ldrh	r3, [r4, #12]
 80227c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80227c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80227cc:	d003      	beq.n	80227d6 <__swsetup_r+0x9a>
 80227ce:	4621      	mov	r1, r4
 80227d0:	4630      	mov	r0, r6
 80227d2:	f7fe fbd3 	bl	8020f7c <__smakebuf_r>
 80227d6:	89a0      	ldrh	r0, [r4, #12]
 80227d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80227dc:	f010 0301 	ands.w	r3, r0, #1
 80227e0:	d00a      	beq.n	80227f8 <__swsetup_r+0xbc>
 80227e2:	2300      	movs	r3, #0
 80227e4:	60a3      	str	r3, [r4, #8]
 80227e6:	6963      	ldr	r3, [r4, #20]
 80227e8:	425b      	negs	r3, r3
 80227ea:	61a3      	str	r3, [r4, #24]
 80227ec:	6923      	ldr	r3, [r4, #16]
 80227ee:	b943      	cbnz	r3, 8022802 <__swsetup_r+0xc6>
 80227f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80227f4:	d1ba      	bne.n	802276c <__swsetup_r+0x30>
 80227f6:	bd70      	pop	{r4, r5, r6, pc}
 80227f8:	0781      	lsls	r1, r0, #30
 80227fa:	bf58      	it	pl
 80227fc:	6963      	ldrpl	r3, [r4, #20]
 80227fe:	60a3      	str	r3, [r4, #8]
 8022800:	e7f4      	b.n	80227ec <__swsetup_r+0xb0>
 8022802:	2000      	movs	r0, #0
 8022804:	e7f7      	b.n	80227f6 <__swsetup_r+0xba>
 8022806:	bf00      	nop
 8022808:	20000108 	.word	0x20000108
 802280c:	0802a32c 	.word	0x0802a32c
 8022810:	0802a34c 	.word	0x0802a34c
 8022814:	0802a30c 	.word	0x0802a30c

08022818 <__register_exitproc>:
 8022818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802281c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80228d8 <__register_exitproc+0xc0>
 8022820:	4606      	mov	r6, r0
 8022822:	f8d8 0000 	ldr.w	r0, [r8]
 8022826:	461f      	mov	r7, r3
 8022828:	460d      	mov	r5, r1
 802282a:	4691      	mov	r9, r2
 802282c:	f7fe fb7f 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8022830:	4b25      	ldr	r3, [pc, #148]	; (80228c8 <__register_exitproc+0xb0>)
 8022832:	681c      	ldr	r4, [r3, #0]
 8022834:	b934      	cbnz	r4, 8022844 <__register_exitproc+0x2c>
 8022836:	4c25      	ldr	r4, [pc, #148]	; (80228cc <__register_exitproc+0xb4>)
 8022838:	601c      	str	r4, [r3, #0]
 802283a:	4b25      	ldr	r3, [pc, #148]	; (80228d0 <__register_exitproc+0xb8>)
 802283c:	b113      	cbz	r3, 8022844 <__register_exitproc+0x2c>
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022844:	6863      	ldr	r3, [r4, #4]
 8022846:	2b1f      	cmp	r3, #31
 8022848:	dd07      	ble.n	802285a <__register_exitproc+0x42>
 802284a:	f8d8 0000 	ldr.w	r0, [r8]
 802284e:	f7fe fb70 	bl	8020f32 <__retarget_lock_release_recursive>
 8022852:	f04f 30ff 	mov.w	r0, #4294967295
 8022856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802285a:	b34e      	cbz	r6, 80228b0 <__register_exitproc+0x98>
 802285c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022860:	b988      	cbnz	r0, 8022886 <__register_exitproc+0x6e>
 8022862:	4b1c      	ldr	r3, [pc, #112]	; (80228d4 <__register_exitproc+0xbc>)
 8022864:	b923      	cbnz	r3, 8022870 <__register_exitproc+0x58>
 8022866:	f8d8 0000 	ldr.w	r0, [r8]
 802286a:	f7fe fb61 	bl	8020f30 <__retarget_lock_release>
 802286e:	e7f0      	b.n	8022852 <__register_exitproc+0x3a>
 8022870:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022874:	f7fe fbc2 	bl	8020ffc <malloc>
 8022878:	2800      	cmp	r0, #0
 802287a:	d0f4      	beq.n	8022866 <__register_exitproc+0x4e>
 802287c:	2300      	movs	r3, #0
 802287e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8022882:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022886:	6863      	ldr	r3, [r4, #4]
 8022888:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802288c:	2201      	movs	r2, #1
 802288e:	409a      	lsls	r2, r3
 8022890:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022894:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022898:	4313      	orrs	r3, r2
 802289a:	2e02      	cmp	r6, #2
 802289c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80228a0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80228a4:	bf02      	ittt	eq
 80228a6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80228aa:	431a      	orreq	r2, r3
 80228ac:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80228b0:	6863      	ldr	r3, [r4, #4]
 80228b2:	f8d8 0000 	ldr.w	r0, [r8]
 80228b6:	1c5a      	adds	r2, r3, #1
 80228b8:	3302      	adds	r3, #2
 80228ba:	6062      	str	r2, [r4, #4]
 80228bc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80228c0:	f7fe fb37 	bl	8020f32 <__retarget_lock_release_recursive>
 80228c4:	2000      	movs	r0, #0
 80228c6:	e7c6      	b.n	8022856 <__register_exitproc+0x3e>
 80228c8:	20001000 	.word	0x20001000
 80228cc:	20000f74 	.word	0x20000f74
 80228d0:	00000000 	.word	0x00000000
 80228d4:	08020ffd 	.word	0x08020ffd
 80228d8:	20000174 	.word	0x20000174

080228dc <abs>:
 80228dc:	2800      	cmp	r0, #0
 80228de:	bfb8      	it	lt
 80228e0:	4240      	neglt	r0, r0
 80228e2:	4770      	bx	lr

080228e4 <__assert_func>:
 80228e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80228e6:	4614      	mov	r4, r2
 80228e8:	461a      	mov	r2, r3
 80228ea:	4b09      	ldr	r3, [pc, #36]	; (8022910 <__assert_func+0x2c>)
 80228ec:	681b      	ldr	r3, [r3, #0]
 80228ee:	4605      	mov	r5, r0
 80228f0:	68d8      	ldr	r0, [r3, #12]
 80228f2:	b14c      	cbz	r4, 8022908 <__assert_func+0x24>
 80228f4:	4b07      	ldr	r3, [pc, #28]	; (8022914 <__assert_func+0x30>)
 80228f6:	9100      	str	r1, [sp, #0]
 80228f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80228fc:	4906      	ldr	r1, [pc, #24]	; (8022918 <__assert_func+0x34>)
 80228fe:	462b      	mov	r3, r5
 8022900:	f000 f854 	bl	80229ac <fiprintf>
 8022904:	f7fd fda0 	bl	8020448 <abort>
 8022908:	4b04      	ldr	r3, [pc, #16]	; (802291c <__assert_func+0x38>)
 802290a:	461c      	mov	r4, r3
 802290c:	e7f3      	b.n	80228f6 <__assert_func+0x12>
 802290e:	bf00      	nop
 8022910:	20000108 	.word	0x20000108
 8022914:	0802a764 	.word	0x0802a764
 8022918:	0802a771 	.word	0x0802a771
 802291c:	0802a79f 	.word	0x0802a79f

08022920 <_close_r>:
 8022920:	b538      	push	{r3, r4, r5, lr}
 8022922:	4d06      	ldr	r5, [pc, #24]	; (802293c <_close_r+0x1c>)
 8022924:	2300      	movs	r3, #0
 8022926:	4604      	mov	r4, r0
 8022928:	4608      	mov	r0, r1
 802292a:	602b      	str	r3, [r5, #0]
 802292c:	f7de faa4 	bl	8000e78 <_close>
 8022930:	1c43      	adds	r3, r0, #1
 8022932:	d102      	bne.n	802293a <_close_r+0x1a>
 8022934:	682b      	ldr	r3, [r5, #0]
 8022936:	b103      	cbz	r3, 802293a <_close_r+0x1a>
 8022938:	6023      	str	r3, [r4, #0]
 802293a:	bd38      	pop	{r3, r4, r5, pc}
 802293c:	20001014 	.word	0x20001014

08022940 <__sflags>:
 8022940:	780b      	ldrb	r3, [r1, #0]
 8022942:	2b72      	cmp	r3, #114	; 0x72
 8022944:	b530      	push	{r4, r5, lr}
 8022946:	d022      	beq.n	802298e <__sflags+0x4e>
 8022948:	2b77      	cmp	r3, #119	; 0x77
 802294a:	d024      	beq.n	8022996 <__sflags+0x56>
 802294c:	2b61      	cmp	r3, #97	; 0x61
 802294e:	d027      	beq.n	80229a0 <__sflags+0x60>
 8022950:	2316      	movs	r3, #22
 8022952:	6003      	str	r3, [r0, #0]
 8022954:	2000      	movs	r0, #0
 8022956:	bd30      	pop	{r4, r5, pc}
 8022958:	2d62      	cmp	r5, #98	; 0x62
 802295a:	d012      	beq.n	8022982 <__sflags+0x42>
 802295c:	2d78      	cmp	r5, #120	; 0x78
 802295e:	d013      	beq.n	8022988 <__sflags+0x48>
 8022960:	2d2b      	cmp	r5, #43	; 0x2b
 8022962:	d107      	bne.n	8022974 <__sflags+0x34>
 8022964:	f020 001c 	bic.w	r0, r0, #28
 8022968:	f023 0303 	bic.w	r3, r3, #3
 802296c:	f040 0010 	orr.w	r0, r0, #16
 8022970:	f043 0302 	orr.w	r3, r3, #2
 8022974:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8022978:	2d00      	cmp	r5, #0
 802297a:	d1ed      	bne.n	8022958 <__sflags+0x18>
 802297c:	4323      	orrs	r3, r4
 802297e:	6013      	str	r3, [r2, #0]
 8022980:	e7e9      	b.n	8022956 <__sflags+0x16>
 8022982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022986:	e7f5      	b.n	8022974 <__sflags+0x34>
 8022988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802298c:	e7f2      	b.n	8022974 <__sflags+0x34>
 802298e:	2400      	movs	r4, #0
 8022990:	4623      	mov	r3, r4
 8022992:	2004      	movs	r0, #4
 8022994:	e7ee      	b.n	8022974 <__sflags+0x34>
 8022996:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 802299a:	2301      	movs	r3, #1
 802299c:	2008      	movs	r0, #8
 802299e:	e7e9      	b.n	8022974 <__sflags+0x34>
 80229a0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80229a4:	2301      	movs	r3, #1
 80229a6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80229aa:	e7e3      	b.n	8022974 <__sflags+0x34>

080229ac <fiprintf>:
 80229ac:	b40e      	push	{r1, r2, r3}
 80229ae:	b503      	push	{r0, r1, lr}
 80229b0:	4601      	mov	r1, r0
 80229b2:	ab03      	add	r3, sp, #12
 80229b4:	4805      	ldr	r0, [pc, #20]	; (80229cc <fiprintf+0x20>)
 80229b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80229ba:	6800      	ldr	r0, [r0, #0]
 80229bc:	9301      	str	r3, [sp, #4]
 80229be:	f000 faff 	bl	8022fc0 <_vfiprintf_r>
 80229c2:	b002      	add	sp, #8
 80229c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80229c8:	b003      	add	sp, #12
 80229ca:	4770      	bx	lr
 80229cc:	20000108 	.word	0x20000108

080229d0 <_fstat_r>:
 80229d0:	b538      	push	{r3, r4, r5, lr}
 80229d2:	4d07      	ldr	r5, [pc, #28]	; (80229f0 <_fstat_r+0x20>)
 80229d4:	2300      	movs	r3, #0
 80229d6:	4604      	mov	r4, r0
 80229d8:	4608      	mov	r0, r1
 80229da:	4611      	mov	r1, r2
 80229dc:	602b      	str	r3, [r5, #0]
 80229de:	f7de fa57 	bl	8000e90 <_fstat>
 80229e2:	1c43      	adds	r3, r0, #1
 80229e4:	d102      	bne.n	80229ec <_fstat_r+0x1c>
 80229e6:	682b      	ldr	r3, [r5, #0]
 80229e8:	b103      	cbz	r3, 80229ec <_fstat_r+0x1c>
 80229ea:	6023      	str	r3, [r4, #0]
 80229ec:	bd38      	pop	{r3, r4, r5, pc}
 80229ee:	bf00      	nop
 80229f0:	20001014 	.word	0x20001014

080229f4 <_findenv_r>:
 80229f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f8:	4607      	mov	r7, r0
 80229fa:	4689      	mov	r9, r1
 80229fc:	4616      	mov	r6, r2
 80229fe:	f000 fe7d 	bl	80236fc <__env_lock>
 8022a02:	4b18      	ldr	r3, [pc, #96]	; (8022a64 <_findenv_r+0x70>)
 8022a04:	681c      	ldr	r4, [r3, #0]
 8022a06:	469a      	mov	sl, r3
 8022a08:	b134      	cbz	r4, 8022a18 <_findenv_r+0x24>
 8022a0a:	464b      	mov	r3, r9
 8022a0c:	4698      	mov	r8, r3
 8022a0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8022a12:	b139      	cbz	r1, 8022a24 <_findenv_r+0x30>
 8022a14:	293d      	cmp	r1, #61	; 0x3d
 8022a16:	d1f9      	bne.n	8022a0c <_findenv_r+0x18>
 8022a18:	4638      	mov	r0, r7
 8022a1a:	f000 fe75 	bl	8023708 <__env_unlock>
 8022a1e:	2000      	movs	r0, #0
 8022a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a24:	eba8 0809 	sub.w	r8, r8, r9
 8022a28:	46a3      	mov	fp, r4
 8022a2a:	f854 0b04 	ldr.w	r0, [r4], #4
 8022a2e:	2800      	cmp	r0, #0
 8022a30:	d0f2      	beq.n	8022a18 <_findenv_r+0x24>
 8022a32:	4642      	mov	r2, r8
 8022a34:	4649      	mov	r1, r9
 8022a36:	f000 fe41 	bl	80236bc <strncmp>
 8022a3a:	2800      	cmp	r0, #0
 8022a3c:	d1f4      	bne.n	8022a28 <_findenv_r+0x34>
 8022a3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022a42:	eb03 0508 	add.w	r5, r3, r8
 8022a46:	f813 3008 	ldrb.w	r3, [r3, r8]
 8022a4a:	2b3d      	cmp	r3, #61	; 0x3d
 8022a4c:	d1ec      	bne.n	8022a28 <_findenv_r+0x34>
 8022a4e:	f8da 3000 	ldr.w	r3, [sl]
 8022a52:	ebab 0303 	sub.w	r3, fp, r3
 8022a56:	109b      	asrs	r3, r3, #2
 8022a58:	4638      	mov	r0, r7
 8022a5a:	6033      	str	r3, [r6, #0]
 8022a5c:	f000 fe54 	bl	8023708 <__env_unlock>
 8022a60:	1c68      	adds	r0, r5, #1
 8022a62:	e7dd      	b.n	8022a20 <_findenv_r+0x2c>
 8022a64:	20000000 	.word	0x20000000

08022a68 <_getenv_r>:
 8022a68:	b507      	push	{r0, r1, r2, lr}
 8022a6a:	aa01      	add	r2, sp, #4
 8022a6c:	f7ff ffc2 	bl	80229f4 <_findenv_r>
 8022a70:	b003      	add	sp, #12
 8022a72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022a78 <__gettzinfo>:
 8022a78:	4800      	ldr	r0, [pc, #0]	; (8022a7c <__gettzinfo+0x4>)
 8022a7a:	4770      	bx	lr
 8022a7c:	20000178 	.word	0x20000178

08022a80 <gmtime_r>:
 8022a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a84:	e9d0 6700 	ldrd	r6, r7, [r0]
 8022a88:	460c      	mov	r4, r1
 8022a8a:	4a51      	ldr	r2, [pc, #324]	; (8022bd0 <gmtime_r+0x150>)
 8022a8c:	2300      	movs	r3, #0
 8022a8e:	4630      	mov	r0, r6
 8022a90:	4639      	mov	r1, r7
 8022a92:	f7dd fe8f 	bl	80007b4 <__aeabi_ldivmod>
 8022a96:	4639      	mov	r1, r7
 8022a98:	4605      	mov	r5, r0
 8022a9a:	4a4d      	ldr	r2, [pc, #308]	; (8022bd0 <gmtime_r+0x150>)
 8022a9c:	4630      	mov	r0, r6
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	f7dd fe88 	bl	80007b4 <__aeabi_ldivmod>
 8022aa4:	2a00      	cmp	r2, #0
 8022aa6:	bfbc      	itt	lt
 8022aa8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8022aac:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022ab0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022ab4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8022ab8:	fbb2 f3f1 	udiv	r3, r2, r1
 8022abc:	fb01 2213 	mls	r2, r1, r3, r2
 8022ac0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8022ac4:	bfac      	ite	ge
 8022ac6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8022aca:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8022ace:	60a3      	str	r3, [r4, #8]
 8022ad0:	fbb2 f3f1 	udiv	r3, r2, r1
 8022ad4:	fb01 2213 	mls	r2, r1, r3, r2
 8022ad8:	6063      	str	r3, [r4, #4]
 8022ada:	6022      	str	r2, [r4, #0]
 8022adc:	1cc3      	adds	r3, r0, #3
 8022ade:	2207      	movs	r2, #7
 8022ae0:	fb93 f2f2 	sdiv	r2, r3, r2
 8022ae4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8022ae8:	1a9b      	subs	r3, r3, r2
 8022aea:	bf48      	it	mi
 8022aec:	3307      	addmi	r3, #7
 8022aee:	2800      	cmp	r0, #0
 8022af0:	61a3      	str	r3, [r4, #24]
 8022af2:	bfb8      	it	lt
 8022af4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8022af8:	4936      	ldr	r1, [pc, #216]	; (8022bd4 <gmtime_r+0x154>)
 8022afa:	bfae      	itee	ge
 8022afc:	fb90 f1f1 	sdivge	r1, r0, r1
 8022b00:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022b04:	fb93 f1f1 	sdivlt	r1, r3, r1
 8022b08:	4b33      	ldr	r3, [pc, #204]	; (8022bd8 <gmtime_r+0x158>)
 8022b0a:	fb03 0001 	mla	r0, r3, r1, r0
 8022b0e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022b12:	fbb0 f2f2 	udiv	r2, r0, r2
 8022b16:	4402      	add	r2, r0
 8022b18:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8022b1c:	fbb0 f3fc 	udiv	r3, r0, ip
 8022b20:	1ad2      	subs	r2, r2, r3
 8022b22:	f240 176d 	movw	r7, #365	; 0x16d
 8022b26:	4b2d      	ldr	r3, [pc, #180]	; (8022bdc <gmtime_r+0x15c>)
 8022b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8022b2c:	2664      	movs	r6, #100	; 0x64
 8022b2e:	1ad3      	subs	r3, r2, r3
 8022b30:	fbb3 f5f7 	udiv	r5, r3, r7
 8022b34:	fbb3 f3fc 	udiv	r3, r3, ip
 8022b38:	fbb5 f2f6 	udiv	r2, r5, r6
 8022b3c:	1ad3      	subs	r3, r2, r3
 8022b3e:	4403      	add	r3, r0
 8022b40:	fb07 3315 	mls	r3, r7, r5, r3
 8022b44:	2099      	movs	r0, #153	; 0x99
 8022b46:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8022b4a:	f10c 0c02 	add.w	ip, ip, #2
 8022b4e:	f103 0e01 	add.w	lr, r3, #1
 8022b52:	fbbc f7f0 	udiv	r7, ip, r0
 8022b56:	4378      	muls	r0, r7
 8022b58:	3002      	adds	r0, #2
 8022b5a:	f04f 0805 	mov.w	r8, #5
 8022b5e:	fbb0 f0f8 	udiv	r0, r0, r8
 8022b62:	ebae 0000 	sub.w	r0, lr, r0
 8022b66:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8022b6a:	45f4      	cmp	ip, lr
 8022b6c:	bf94      	ite	ls
 8022b6e:	f04f 0c02 	movls.w	ip, #2
 8022b72:	f06f 0c09 	mvnhi.w	ip, #9
 8022b76:	4467      	add	r7, ip
 8022b78:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8022b7c:	fb0c 5101 	mla	r1, ip, r1, r5
 8022b80:	2f01      	cmp	r7, #1
 8022b82:	bf98      	it	ls
 8022b84:	3101      	addls	r1, #1
 8022b86:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8022b8a:	d30c      	bcc.n	8022ba6 <gmtime_r+0x126>
 8022b8c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022b90:	61e3      	str	r3, [r4, #28]
 8022b92:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8022b96:	2300      	movs	r3, #0
 8022b98:	60e0      	str	r0, [r4, #12]
 8022b9a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8022b9e:	6223      	str	r3, [r4, #32]
 8022ba0:	4620      	mov	r0, r4
 8022ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ba6:	f015 0f03 	tst.w	r5, #3
 8022baa:	d102      	bne.n	8022bb2 <gmtime_r+0x132>
 8022bac:	fb06 5212 	mls	r2, r6, r2, r5
 8022bb0:	b95a      	cbnz	r2, 8022bca <gmtime_r+0x14a>
 8022bb2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022bb6:	fbb5 f2f6 	udiv	r2, r5, r6
 8022bba:	fb06 5212 	mls	r2, r6, r2, r5
 8022bbe:	fab2 f282 	clz	r2, r2
 8022bc2:	0952      	lsrs	r2, r2, #5
 8022bc4:	333b      	adds	r3, #59	; 0x3b
 8022bc6:	4413      	add	r3, r2
 8022bc8:	e7e2      	b.n	8022b90 <gmtime_r+0x110>
 8022bca:	2201      	movs	r2, #1
 8022bcc:	e7fa      	b.n	8022bc4 <gmtime_r+0x144>
 8022bce:	bf00      	nop
 8022bd0:	00015180 	.word	0x00015180
 8022bd4:	00023ab1 	.word	0x00023ab1
 8022bd8:	fffdc54f 	.word	0xfffdc54f
 8022bdc:	00023ab0 	.word	0x00023ab0

08022be0 <_isatty_r>:
 8022be0:	b538      	push	{r3, r4, r5, lr}
 8022be2:	4d06      	ldr	r5, [pc, #24]	; (8022bfc <_isatty_r+0x1c>)
 8022be4:	2300      	movs	r3, #0
 8022be6:	4604      	mov	r4, r0
 8022be8:	4608      	mov	r0, r1
 8022bea:	602b      	str	r3, [r5, #0]
 8022bec:	f7de f960 	bl	8000eb0 <_isatty>
 8022bf0:	1c43      	adds	r3, r0, #1
 8022bf2:	d102      	bne.n	8022bfa <_isatty_r+0x1a>
 8022bf4:	682b      	ldr	r3, [r5, #0]
 8022bf6:	b103      	cbz	r3, 8022bfa <_isatty_r+0x1a>
 8022bf8:	6023      	str	r3, [r4, #0]
 8022bfa:	bd38      	pop	{r3, r4, r5, pc}
 8022bfc:	20001014 	.word	0x20001014

08022c00 <labs>:
 8022c00:	2800      	cmp	r0, #0
 8022c02:	bfb8      	it	lt
 8022c04:	4240      	neglt	r0, r0
 8022c06:	4770      	bx	lr

08022c08 <_lseek_r>:
 8022c08:	b538      	push	{r3, r4, r5, lr}
 8022c0a:	4d07      	ldr	r5, [pc, #28]	; (8022c28 <_lseek_r+0x20>)
 8022c0c:	4604      	mov	r4, r0
 8022c0e:	4608      	mov	r0, r1
 8022c10:	4611      	mov	r1, r2
 8022c12:	2200      	movs	r2, #0
 8022c14:	602a      	str	r2, [r5, #0]
 8022c16:	461a      	mov	r2, r3
 8022c18:	f7de f955 	bl	8000ec6 <_lseek>
 8022c1c:	1c43      	adds	r3, r0, #1
 8022c1e:	d102      	bne.n	8022c26 <_lseek_r+0x1e>
 8022c20:	682b      	ldr	r3, [r5, #0]
 8022c22:	b103      	cbz	r3, 8022c26 <_lseek_r+0x1e>
 8022c24:	6023      	str	r3, [r4, #0]
 8022c26:	bd38      	pop	{r3, r4, r5, pc}
 8022c28:	20001014 	.word	0x20001014

08022c2c <__ascii_mbtowc>:
 8022c2c:	b082      	sub	sp, #8
 8022c2e:	b901      	cbnz	r1, 8022c32 <__ascii_mbtowc+0x6>
 8022c30:	a901      	add	r1, sp, #4
 8022c32:	b142      	cbz	r2, 8022c46 <__ascii_mbtowc+0x1a>
 8022c34:	b14b      	cbz	r3, 8022c4a <__ascii_mbtowc+0x1e>
 8022c36:	7813      	ldrb	r3, [r2, #0]
 8022c38:	600b      	str	r3, [r1, #0]
 8022c3a:	7812      	ldrb	r2, [r2, #0]
 8022c3c:	1e10      	subs	r0, r2, #0
 8022c3e:	bf18      	it	ne
 8022c40:	2001      	movne	r0, #1
 8022c42:	b002      	add	sp, #8
 8022c44:	4770      	bx	lr
 8022c46:	4610      	mov	r0, r2
 8022c48:	e7fb      	b.n	8022c42 <__ascii_mbtowc+0x16>
 8022c4a:	f06f 0001 	mvn.w	r0, #1
 8022c4e:	e7f8      	b.n	8022c42 <__ascii_mbtowc+0x16>

08022c50 <__malloc_lock>:
 8022c50:	4801      	ldr	r0, [pc, #4]	; (8022c58 <__malloc_lock+0x8>)
 8022c52:	f7fe b96c 	b.w	8020f2e <__retarget_lock_acquire_recursive>
 8022c56:	bf00      	nop
 8022c58:	2000100c 	.word	0x2000100c

08022c5c <__malloc_unlock>:
 8022c5c:	4801      	ldr	r0, [pc, #4]	; (8022c64 <__malloc_unlock+0x8>)
 8022c5e:	f7fe b968 	b.w	8020f32 <__retarget_lock_release_recursive>
 8022c62:	bf00      	nop
 8022c64:	2000100c 	.word	0x2000100c

08022c68 <_realloc_r>:
 8022c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c6a:	4607      	mov	r7, r0
 8022c6c:	4614      	mov	r4, r2
 8022c6e:	460e      	mov	r6, r1
 8022c70:	b921      	cbnz	r1, 8022c7c <_realloc_r+0x14>
 8022c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022c76:	4611      	mov	r1, r2
 8022c78:	f7fe ba46 	b.w	8021108 <_malloc_r>
 8022c7c:	b922      	cbnz	r2, 8022c88 <_realloc_r+0x20>
 8022c7e:	f7fe f9f3 	bl	8021068 <_free_r>
 8022c82:	4625      	mov	r5, r4
 8022c84:	4628      	mov	r0, r5
 8022c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c88:	f000 fd5e 	bl	8023748 <_malloc_usable_size_r>
 8022c8c:	42a0      	cmp	r0, r4
 8022c8e:	d20f      	bcs.n	8022cb0 <_realloc_r+0x48>
 8022c90:	4621      	mov	r1, r4
 8022c92:	4638      	mov	r0, r7
 8022c94:	f7fe fa38 	bl	8021108 <_malloc_r>
 8022c98:	4605      	mov	r5, r0
 8022c9a:	2800      	cmp	r0, #0
 8022c9c:	d0f2      	beq.n	8022c84 <_realloc_r+0x1c>
 8022c9e:	4631      	mov	r1, r6
 8022ca0:	4622      	mov	r2, r4
 8022ca2:	f7fe f9bb 	bl	802101c <memcpy>
 8022ca6:	4631      	mov	r1, r6
 8022ca8:	4638      	mov	r0, r7
 8022caa:	f7fe f9dd 	bl	8021068 <_free_r>
 8022cae:	e7e9      	b.n	8022c84 <_realloc_r+0x1c>
 8022cb0:	4635      	mov	r5, r6
 8022cb2:	e7e7      	b.n	8022c84 <_realloc_r+0x1c>

08022cb4 <__ssputs_r>:
 8022cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cb8:	688e      	ldr	r6, [r1, #8]
 8022cba:	429e      	cmp	r6, r3
 8022cbc:	4682      	mov	sl, r0
 8022cbe:	460c      	mov	r4, r1
 8022cc0:	4690      	mov	r8, r2
 8022cc2:	461f      	mov	r7, r3
 8022cc4:	d838      	bhi.n	8022d38 <__ssputs_r+0x84>
 8022cc6:	898a      	ldrh	r2, [r1, #12]
 8022cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022ccc:	d032      	beq.n	8022d34 <__ssputs_r+0x80>
 8022cce:	6825      	ldr	r5, [r4, #0]
 8022cd0:	6909      	ldr	r1, [r1, #16]
 8022cd2:	eba5 0901 	sub.w	r9, r5, r1
 8022cd6:	6965      	ldr	r5, [r4, #20]
 8022cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022ce0:	3301      	adds	r3, #1
 8022ce2:	444b      	add	r3, r9
 8022ce4:	106d      	asrs	r5, r5, #1
 8022ce6:	429d      	cmp	r5, r3
 8022ce8:	bf38      	it	cc
 8022cea:	461d      	movcc	r5, r3
 8022cec:	0553      	lsls	r3, r2, #21
 8022cee:	d531      	bpl.n	8022d54 <__ssputs_r+0xa0>
 8022cf0:	4629      	mov	r1, r5
 8022cf2:	f7fe fa09 	bl	8021108 <_malloc_r>
 8022cf6:	4606      	mov	r6, r0
 8022cf8:	b950      	cbnz	r0, 8022d10 <__ssputs_r+0x5c>
 8022cfa:	230c      	movs	r3, #12
 8022cfc:	f8ca 3000 	str.w	r3, [sl]
 8022d00:	89a3      	ldrh	r3, [r4, #12]
 8022d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022d06:	81a3      	strh	r3, [r4, #12]
 8022d08:	f04f 30ff 	mov.w	r0, #4294967295
 8022d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d10:	6921      	ldr	r1, [r4, #16]
 8022d12:	464a      	mov	r2, r9
 8022d14:	f7fe f982 	bl	802101c <memcpy>
 8022d18:	89a3      	ldrh	r3, [r4, #12]
 8022d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022d22:	81a3      	strh	r3, [r4, #12]
 8022d24:	6126      	str	r6, [r4, #16]
 8022d26:	6165      	str	r5, [r4, #20]
 8022d28:	444e      	add	r6, r9
 8022d2a:	eba5 0509 	sub.w	r5, r5, r9
 8022d2e:	6026      	str	r6, [r4, #0]
 8022d30:	60a5      	str	r5, [r4, #8]
 8022d32:	463e      	mov	r6, r7
 8022d34:	42be      	cmp	r6, r7
 8022d36:	d900      	bls.n	8022d3a <__ssputs_r+0x86>
 8022d38:	463e      	mov	r6, r7
 8022d3a:	4632      	mov	r2, r6
 8022d3c:	6820      	ldr	r0, [r4, #0]
 8022d3e:	4641      	mov	r1, r8
 8022d40:	f000 fce8 	bl	8023714 <memmove>
 8022d44:	68a3      	ldr	r3, [r4, #8]
 8022d46:	6822      	ldr	r2, [r4, #0]
 8022d48:	1b9b      	subs	r3, r3, r6
 8022d4a:	4432      	add	r2, r6
 8022d4c:	60a3      	str	r3, [r4, #8]
 8022d4e:	6022      	str	r2, [r4, #0]
 8022d50:	2000      	movs	r0, #0
 8022d52:	e7db      	b.n	8022d0c <__ssputs_r+0x58>
 8022d54:	462a      	mov	r2, r5
 8022d56:	f7ff ff87 	bl	8022c68 <_realloc_r>
 8022d5a:	4606      	mov	r6, r0
 8022d5c:	2800      	cmp	r0, #0
 8022d5e:	d1e1      	bne.n	8022d24 <__ssputs_r+0x70>
 8022d60:	6921      	ldr	r1, [r4, #16]
 8022d62:	4650      	mov	r0, sl
 8022d64:	f7fe f980 	bl	8021068 <_free_r>
 8022d68:	e7c7      	b.n	8022cfa <__ssputs_r+0x46>
	...

08022d6c <_svfiprintf_r>:
 8022d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d70:	4698      	mov	r8, r3
 8022d72:	898b      	ldrh	r3, [r1, #12]
 8022d74:	061b      	lsls	r3, r3, #24
 8022d76:	b09d      	sub	sp, #116	; 0x74
 8022d78:	4607      	mov	r7, r0
 8022d7a:	460d      	mov	r5, r1
 8022d7c:	4614      	mov	r4, r2
 8022d7e:	d50e      	bpl.n	8022d9e <_svfiprintf_r+0x32>
 8022d80:	690b      	ldr	r3, [r1, #16]
 8022d82:	b963      	cbnz	r3, 8022d9e <_svfiprintf_r+0x32>
 8022d84:	2140      	movs	r1, #64	; 0x40
 8022d86:	f7fe f9bf 	bl	8021108 <_malloc_r>
 8022d8a:	6028      	str	r0, [r5, #0]
 8022d8c:	6128      	str	r0, [r5, #16]
 8022d8e:	b920      	cbnz	r0, 8022d9a <_svfiprintf_r+0x2e>
 8022d90:	230c      	movs	r3, #12
 8022d92:	603b      	str	r3, [r7, #0]
 8022d94:	f04f 30ff 	mov.w	r0, #4294967295
 8022d98:	e0d1      	b.n	8022f3e <_svfiprintf_r+0x1d2>
 8022d9a:	2340      	movs	r3, #64	; 0x40
 8022d9c:	616b      	str	r3, [r5, #20]
 8022d9e:	2300      	movs	r3, #0
 8022da0:	9309      	str	r3, [sp, #36]	; 0x24
 8022da2:	2320      	movs	r3, #32
 8022da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8022dac:	2330      	movs	r3, #48	; 0x30
 8022dae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022f58 <_svfiprintf_r+0x1ec>
 8022db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022db6:	f04f 0901 	mov.w	r9, #1
 8022dba:	4623      	mov	r3, r4
 8022dbc:	469a      	mov	sl, r3
 8022dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022dc2:	b10a      	cbz	r2, 8022dc8 <_svfiprintf_r+0x5c>
 8022dc4:	2a25      	cmp	r2, #37	; 0x25
 8022dc6:	d1f9      	bne.n	8022dbc <_svfiprintf_r+0x50>
 8022dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8022dcc:	d00b      	beq.n	8022de6 <_svfiprintf_r+0x7a>
 8022dce:	465b      	mov	r3, fp
 8022dd0:	4622      	mov	r2, r4
 8022dd2:	4629      	mov	r1, r5
 8022dd4:	4638      	mov	r0, r7
 8022dd6:	f7ff ff6d 	bl	8022cb4 <__ssputs_r>
 8022dda:	3001      	adds	r0, #1
 8022ddc:	f000 80aa 	beq.w	8022f34 <_svfiprintf_r+0x1c8>
 8022de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022de2:	445a      	add	r2, fp
 8022de4:	9209      	str	r2, [sp, #36]	; 0x24
 8022de6:	f89a 3000 	ldrb.w	r3, [sl]
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	f000 80a2 	beq.w	8022f34 <_svfiprintf_r+0x1c8>
 8022df0:	2300      	movs	r3, #0
 8022df2:	f04f 32ff 	mov.w	r2, #4294967295
 8022df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022dfa:	f10a 0a01 	add.w	sl, sl, #1
 8022dfe:	9304      	str	r3, [sp, #16]
 8022e00:	9307      	str	r3, [sp, #28]
 8022e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022e06:	931a      	str	r3, [sp, #104]	; 0x68
 8022e08:	4654      	mov	r4, sl
 8022e0a:	2205      	movs	r2, #5
 8022e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e10:	4851      	ldr	r0, [pc, #324]	; (8022f58 <_svfiprintf_r+0x1ec>)
 8022e12:	f7dd fa25 	bl	8000260 <memchr>
 8022e16:	9a04      	ldr	r2, [sp, #16]
 8022e18:	b9d8      	cbnz	r0, 8022e52 <_svfiprintf_r+0xe6>
 8022e1a:	06d0      	lsls	r0, r2, #27
 8022e1c:	bf44      	itt	mi
 8022e1e:	2320      	movmi	r3, #32
 8022e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e24:	0711      	lsls	r1, r2, #28
 8022e26:	bf44      	itt	mi
 8022e28:	232b      	movmi	r3, #43	; 0x2b
 8022e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8022e32:	2b2a      	cmp	r3, #42	; 0x2a
 8022e34:	d015      	beq.n	8022e62 <_svfiprintf_r+0xf6>
 8022e36:	9a07      	ldr	r2, [sp, #28]
 8022e38:	4654      	mov	r4, sl
 8022e3a:	2000      	movs	r0, #0
 8022e3c:	f04f 0c0a 	mov.w	ip, #10
 8022e40:	4621      	mov	r1, r4
 8022e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022e46:	3b30      	subs	r3, #48	; 0x30
 8022e48:	2b09      	cmp	r3, #9
 8022e4a:	d94e      	bls.n	8022eea <_svfiprintf_r+0x17e>
 8022e4c:	b1b0      	cbz	r0, 8022e7c <_svfiprintf_r+0x110>
 8022e4e:	9207      	str	r2, [sp, #28]
 8022e50:	e014      	b.n	8022e7c <_svfiprintf_r+0x110>
 8022e52:	eba0 0308 	sub.w	r3, r0, r8
 8022e56:	fa09 f303 	lsl.w	r3, r9, r3
 8022e5a:	4313      	orrs	r3, r2
 8022e5c:	9304      	str	r3, [sp, #16]
 8022e5e:	46a2      	mov	sl, r4
 8022e60:	e7d2      	b.n	8022e08 <_svfiprintf_r+0x9c>
 8022e62:	9b03      	ldr	r3, [sp, #12]
 8022e64:	1d19      	adds	r1, r3, #4
 8022e66:	681b      	ldr	r3, [r3, #0]
 8022e68:	9103      	str	r1, [sp, #12]
 8022e6a:	2b00      	cmp	r3, #0
 8022e6c:	bfbb      	ittet	lt
 8022e6e:	425b      	neglt	r3, r3
 8022e70:	f042 0202 	orrlt.w	r2, r2, #2
 8022e74:	9307      	strge	r3, [sp, #28]
 8022e76:	9307      	strlt	r3, [sp, #28]
 8022e78:	bfb8      	it	lt
 8022e7a:	9204      	strlt	r2, [sp, #16]
 8022e7c:	7823      	ldrb	r3, [r4, #0]
 8022e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8022e80:	d10c      	bne.n	8022e9c <_svfiprintf_r+0x130>
 8022e82:	7863      	ldrb	r3, [r4, #1]
 8022e84:	2b2a      	cmp	r3, #42	; 0x2a
 8022e86:	d135      	bne.n	8022ef4 <_svfiprintf_r+0x188>
 8022e88:	9b03      	ldr	r3, [sp, #12]
 8022e8a:	1d1a      	adds	r2, r3, #4
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	9203      	str	r2, [sp, #12]
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	bfb8      	it	lt
 8022e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e98:	3402      	adds	r4, #2
 8022e9a:	9305      	str	r3, [sp, #20]
 8022e9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022f68 <_svfiprintf_r+0x1fc>
 8022ea0:	7821      	ldrb	r1, [r4, #0]
 8022ea2:	2203      	movs	r2, #3
 8022ea4:	4650      	mov	r0, sl
 8022ea6:	f7dd f9db 	bl	8000260 <memchr>
 8022eaa:	b140      	cbz	r0, 8022ebe <_svfiprintf_r+0x152>
 8022eac:	2340      	movs	r3, #64	; 0x40
 8022eae:	eba0 000a 	sub.w	r0, r0, sl
 8022eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8022eb6:	9b04      	ldr	r3, [sp, #16]
 8022eb8:	4303      	orrs	r3, r0
 8022eba:	3401      	adds	r4, #1
 8022ebc:	9304      	str	r3, [sp, #16]
 8022ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ec2:	4826      	ldr	r0, [pc, #152]	; (8022f5c <_svfiprintf_r+0x1f0>)
 8022ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ec8:	2206      	movs	r2, #6
 8022eca:	f7dd f9c9 	bl	8000260 <memchr>
 8022ece:	2800      	cmp	r0, #0
 8022ed0:	d038      	beq.n	8022f44 <_svfiprintf_r+0x1d8>
 8022ed2:	4b23      	ldr	r3, [pc, #140]	; (8022f60 <_svfiprintf_r+0x1f4>)
 8022ed4:	bb1b      	cbnz	r3, 8022f1e <_svfiprintf_r+0x1b2>
 8022ed6:	9b03      	ldr	r3, [sp, #12]
 8022ed8:	3307      	adds	r3, #7
 8022eda:	f023 0307 	bic.w	r3, r3, #7
 8022ede:	3308      	adds	r3, #8
 8022ee0:	9303      	str	r3, [sp, #12]
 8022ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ee4:	4433      	add	r3, r6
 8022ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8022ee8:	e767      	b.n	8022dba <_svfiprintf_r+0x4e>
 8022eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8022eee:	460c      	mov	r4, r1
 8022ef0:	2001      	movs	r0, #1
 8022ef2:	e7a5      	b.n	8022e40 <_svfiprintf_r+0xd4>
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	3401      	adds	r4, #1
 8022ef8:	9305      	str	r3, [sp, #20]
 8022efa:	4619      	mov	r1, r3
 8022efc:	f04f 0c0a 	mov.w	ip, #10
 8022f00:	4620      	mov	r0, r4
 8022f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022f06:	3a30      	subs	r2, #48	; 0x30
 8022f08:	2a09      	cmp	r2, #9
 8022f0a:	d903      	bls.n	8022f14 <_svfiprintf_r+0x1a8>
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d0c5      	beq.n	8022e9c <_svfiprintf_r+0x130>
 8022f10:	9105      	str	r1, [sp, #20]
 8022f12:	e7c3      	b.n	8022e9c <_svfiprintf_r+0x130>
 8022f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8022f18:	4604      	mov	r4, r0
 8022f1a:	2301      	movs	r3, #1
 8022f1c:	e7f0      	b.n	8022f00 <_svfiprintf_r+0x194>
 8022f1e:	ab03      	add	r3, sp, #12
 8022f20:	9300      	str	r3, [sp, #0]
 8022f22:	462a      	mov	r2, r5
 8022f24:	4b0f      	ldr	r3, [pc, #60]	; (8022f64 <_svfiprintf_r+0x1f8>)
 8022f26:	a904      	add	r1, sp, #16
 8022f28:	4638      	mov	r0, r7
 8022f2a:	f3af 8000 	nop.w
 8022f2e:	1c42      	adds	r2, r0, #1
 8022f30:	4606      	mov	r6, r0
 8022f32:	d1d6      	bne.n	8022ee2 <_svfiprintf_r+0x176>
 8022f34:	89ab      	ldrh	r3, [r5, #12]
 8022f36:	065b      	lsls	r3, r3, #25
 8022f38:	f53f af2c 	bmi.w	8022d94 <_svfiprintf_r+0x28>
 8022f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f3e:	b01d      	add	sp, #116	; 0x74
 8022f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f44:	ab03      	add	r3, sp, #12
 8022f46:	9300      	str	r3, [sp, #0]
 8022f48:	462a      	mov	r2, r5
 8022f4a:	4b06      	ldr	r3, [pc, #24]	; (8022f64 <_svfiprintf_r+0x1f8>)
 8022f4c:	a904      	add	r1, sp, #16
 8022f4e:	4638      	mov	r0, r7
 8022f50:	f000 f9d4 	bl	80232fc <_printf_i>
 8022f54:	e7eb      	b.n	8022f2e <_svfiprintf_r+0x1c2>
 8022f56:	bf00      	nop
 8022f58:	0802a8ab 	.word	0x0802a8ab
 8022f5c:	0802a8b5 	.word	0x0802a8b5
 8022f60:	00000000 	.word	0x00000000
 8022f64:	08022cb5 	.word	0x08022cb5
 8022f68:	0802a8b1 	.word	0x0802a8b1

08022f6c <__sfputc_r>:
 8022f6c:	6893      	ldr	r3, [r2, #8]
 8022f6e:	3b01      	subs	r3, #1
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	b410      	push	{r4}
 8022f74:	6093      	str	r3, [r2, #8]
 8022f76:	da08      	bge.n	8022f8a <__sfputc_r+0x1e>
 8022f78:	6994      	ldr	r4, [r2, #24]
 8022f7a:	42a3      	cmp	r3, r4
 8022f7c:	db01      	blt.n	8022f82 <__sfputc_r+0x16>
 8022f7e:	290a      	cmp	r1, #10
 8022f80:	d103      	bne.n	8022f8a <__sfputc_r+0x1e>
 8022f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f86:	f7ff bb75 	b.w	8022674 <__swbuf_r>
 8022f8a:	6813      	ldr	r3, [r2, #0]
 8022f8c:	1c58      	adds	r0, r3, #1
 8022f8e:	6010      	str	r0, [r2, #0]
 8022f90:	7019      	strb	r1, [r3, #0]
 8022f92:	4608      	mov	r0, r1
 8022f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f98:	4770      	bx	lr

08022f9a <__sfputs_r>:
 8022f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f9c:	4606      	mov	r6, r0
 8022f9e:	460f      	mov	r7, r1
 8022fa0:	4614      	mov	r4, r2
 8022fa2:	18d5      	adds	r5, r2, r3
 8022fa4:	42ac      	cmp	r4, r5
 8022fa6:	d101      	bne.n	8022fac <__sfputs_r+0x12>
 8022fa8:	2000      	movs	r0, #0
 8022faa:	e007      	b.n	8022fbc <__sfputs_r+0x22>
 8022fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fb0:	463a      	mov	r2, r7
 8022fb2:	4630      	mov	r0, r6
 8022fb4:	f7ff ffda 	bl	8022f6c <__sfputc_r>
 8022fb8:	1c43      	adds	r3, r0, #1
 8022fba:	d1f3      	bne.n	8022fa4 <__sfputs_r+0xa>
 8022fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022fc0 <_vfiprintf_r>:
 8022fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fc4:	460d      	mov	r5, r1
 8022fc6:	b09d      	sub	sp, #116	; 0x74
 8022fc8:	4614      	mov	r4, r2
 8022fca:	4698      	mov	r8, r3
 8022fcc:	4606      	mov	r6, r0
 8022fce:	b118      	cbz	r0, 8022fd8 <_vfiprintf_r+0x18>
 8022fd0:	6983      	ldr	r3, [r0, #24]
 8022fd2:	b90b      	cbnz	r3, 8022fd8 <_vfiprintf_r+0x18>
 8022fd4:	f7fd fbf8 	bl	80207c8 <__sinit>
 8022fd8:	4b89      	ldr	r3, [pc, #548]	; (8023200 <_vfiprintf_r+0x240>)
 8022fda:	429d      	cmp	r5, r3
 8022fdc:	d11b      	bne.n	8023016 <_vfiprintf_r+0x56>
 8022fde:	6875      	ldr	r5, [r6, #4]
 8022fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022fe2:	07d9      	lsls	r1, r3, #31
 8022fe4:	d405      	bmi.n	8022ff2 <_vfiprintf_r+0x32>
 8022fe6:	89ab      	ldrh	r3, [r5, #12]
 8022fe8:	059a      	lsls	r2, r3, #22
 8022fea:	d402      	bmi.n	8022ff2 <_vfiprintf_r+0x32>
 8022fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022fee:	f7fd ff9e 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8022ff2:	89ab      	ldrh	r3, [r5, #12]
 8022ff4:	071b      	lsls	r3, r3, #28
 8022ff6:	d501      	bpl.n	8022ffc <_vfiprintf_r+0x3c>
 8022ff8:	692b      	ldr	r3, [r5, #16]
 8022ffa:	b9eb      	cbnz	r3, 8023038 <_vfiprintf_r+0x78>
 8022ffc:	4629      	mov	r1, r5
 8022ffe:	4630      	mov	r0, r6
 8023000:	f7ff fb9c 	bl	802273c <__swsetup_r>
 8023004:	b1c0      	cbz	r0, 8023038 <_vfiprintf_r+0x78>
 8023006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023008:	07dc      	lsls	r4, r3, #31
 802300a:	d50e      	bpl.n	802302a <_vfiprintf_r+0x6a>
 802300c:	f04f 30ff 	mov.w	r0, #4294967295
 8023010:	b01d      	add	sp, #116	; 0x74
 8023012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023016:	4b7b      	ldr	r3, [pc, #492]	; (8023204 <_vfiprintf_r+0x244>)
 8023018:	429d      	cmp	r5, r3
 802301a:	d101      	bne.n	8023020 <_vfiprintf_r+0x60>
 802301c:	68b5      	ldr	r5, [r6, #8]
 802301e:	e7df      	b.n	8022fe0 <_vfiprintf_r+0x20>
 8023020:	4b79      	ldr	r3, [pc, #484]	; (8023208 <_vfiprintf_r+0x248>)
 8023022:	429d      	cmp	r5, r3
 8023024:	bf08      	it	eq
 8023026:	68f5      	ldreq	r5, [r6, #12]
 8023028:	e7da      	b.n	8022fe0 <_vfiprintf_r+0x20>
 802302a:	89ab      	ldrh	r3, [r5, #12]
 802302c:	0598      	lsls	r0, r3, #22
 802302e:	d4ed      	bmi.n	802300c <_vfiprintf_r+0x4c>
 8023030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023032:	f7fd ff7e 	bl	8020f32 <__retarget_lock_release_recursive>
 8023036:	e7e9      	b.n	802300c <_vfiprintf_r+0x4c>
 8023038:	2300      	movs	r3, #0
 802303a:	9309      	str	r3, [sp, #36]	; 0x24
 802303c:	2320      	movs	r3, #32
 802303e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023042:	f8cd 800c 	str.w	r8, [sp, #12]
 8023046:	2330      	movs	r3, #48	; 0x30
 8023048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802320c <_vfiprintf_r+0x24c>
 802304c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023050:	f04f 0901 	mov.w	r9, #1
 8023054:	4623      	mov	r3, r4
 8023056:	469a      	mov	sl, r3
 8023058:	f813 2b01 	ldrb.w	r2, [r3], #1
 802305c:	b10a      	cbz	r2, 8023062 <_vfiprintf_r+0xa2>
 802305e:	2a25      	cmp	r2, #37	; 0x25
 8023060:	d1f9      	bne.n	8023056 <_vfiprintf_r+0x96>
 8023062:	ebba 0b04 	subs.w	fp, sl, r4
 8023066:	d00b      	beq.n	8023080 <_vfiprintf_r+0xc0>
 8023068:	465b      	mov	r3, fp
 802306a:	4622      	mov	r2, r4
 802306c:	4629      	mov	r1, r5
 802306e:	4630      	mov	r0, r6
 8023070:	f7ff ff93 	bl	8022f9a <__sfputs_r>
 8023074:	3001      	adds	r0, #1
 8023076:	f000 80aa 	beq.w	80231ce <_vfiprintf_r+0x20e>
 802307a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802307c:	445a      	add	r2, fp
 802307e:	9209      	str	r2, [sp, #36]	; 0x24
 8023080:	f89a 3000 	ldrb.w	r3, [sl]
 8023084:	2b00      	cmp	r3, #0
 8023086:	f000 80a2 	beq.w	80231ce <_vfiprintf_r+0x20e>
 802308a:	2300      	movs	r3, #0
 802308c:	f04f 32ff 	mov.w	r2, #4294967295
 8023090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023094:	f10a 0a01 	add.w	sl, sl, #1
 8023098:	9304      	str	r3, [sp, #16]
 802309a:	9307      	str	r3, [sp, #28]
 802309c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80230a0:	931a      	str	r3, [sp, #104]	; 0x68
 80230a2:	4654      	mov	r4, sl
 80230a4:	2205      	movs	r2, #5
 80230a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230aa:	4858      	ldr	r0, [pc, #352]	; (802320c <_vfiprintf_r+0x24c>)
 80230ac:	f7dd f8d8 	bl	8000260 <memchr>
 80230b0:	9a04      	ldr	r2, [sp, #16]
 80230b2:	b9d8      	cbnz	r0, 80230ec <_vfiprintf_r+0x12c>
 80230b4:	06d1      	lsls	r1, r2, #27
 80230b6:	bf44      	itt	mi
 80230b8:	2320      	movmi	r3, #32
 80230ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230be:	0713      	lsls	r3, r2, #28
 80230c0:	bf44      	itt	mi
 80230c2:	232b      	movmi	r3, #43	; 0x2b
 80230c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230c8:	f89a 3000 	ldrb.w	r3, [sl]
 80230cc:	2b2a      	cmp	r3, #42	; 0x2a
 80230ce:	d015      	beq.n	80230fc <_vfiprintf_r+0x13c>
 80230d0:	9a07      	ldr	r2, [sp, #28]
 80230d2:	4654      	mov	r4, sl
 80230d4:	2000      	movs	r0, #0
 80230d6:	f04f 0c0a 	mov.w	ip, #10
 80230da:	4621      	mov	r1, r4
 80230dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80230e0:	3b30      	subs	r3, #48	; 0x30
 80230e2:	2b09      	cmp	r3, #9
 80230e4:	d94e      	bls.n	8023184 <_vfiprintf_r+0x1c4>
 80230e6:	b1b0      	cbz	r0, 8023116 <_vfiprintf_r+0x156>
 80230e8:	9207      	str	r2, [sp, #28]
 80230ea:	e014      	b.n	8023116 <_vfiprintf_r+0x156>
 80230ec:	eba0 0308 	sub.w	r3, r0, r8
 80230f0:	fa09 f303 	lsl.w	r3, r9, r3
 80230f4:	4313      	orrs	r3, r2
 80230f6:	9304      	str	r3, [sp, #16]
 80230f8:	46a2      	mov	sl, r4
 80230fa:	e7d2      	b.n	80230a2 <_vfiprintf_r+0xe2>
 80230fc:	9b03      	ldr	r3, [sp, #12]
 80230fe:	1d19      	adds	r1, r3, #4
 8023100:	681b      	ldr	r3, [r3, #0]
 8023102:	9103      	str	r1, [sp, #12]
 8023104:	2b00      	cmp	r3, #0
 8023106:	bfbb      	ittet	lt
 8023108:	425b      	neglt	r3, r3
 802310a:	f042 0202 	orrlt.w	r2, r2, #2
 802310e:	9307      	strge	r3, [sp, #28]
 8023110:	9307      	strlt	r3, [sp, #28]
 8023112:	bfb8      	it	lt
 8023114:	9204      	strlt	r2, [sp, #16]
 8023116:	7823      	ldrb	r3, [r4, #0]
 8023118:	2b2e      	cmp	r3, #46	; 0x2e
 802311a:	d10c      	bne.n	8023136 <_vfiprintf_r+0x176>
 802311c:	7863      	ldrb	r3, [r4, #1]
 802311e:	2b2a      	cmp	r3, #42	; 0x2a
 8023120:	d135      	bne.n	802318e <_vfiprintf_r+0x1ce>
 8023122:	9b03      	ldr	r3, [sp, #12]
 8023124:	1d1a      	adds	r2, r3, #4
 8023126:	681b      	ldr	r3, [r3, #0]
 8023128:	9203      	str	r2, [sp, #12]
 802312a:	2b00      	cmp	r3, #0
 802312c:	bfb8      	it	lt
 802312e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023132:	3402      	adds	r4, #2
 8023134:	9305      	str	r3, [sp, #20]
 8023136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802321c <_vfiprintf_r+0x25c>
 802313a:	7821      	ldrb	r1, [r4, #0]
 802313c:	2203      	movs	r2, #3
 802313e:	4650      	mov	r0, sl
 8023140:	f7dd f88e 	bl	8000260 <memchr>
 8023144:	b140      	cbz	r0, 8023158 <_vfiprintf_r+0x198>
 8023146:	2340      	movs	r3, #64	; 0x40
 8023148:	eba0 000a 	sub.w	r0, r0, sl
 802314c:	fa03 f000 	lsl.w	r0, r3, r0
 8023150:	9b04      	ldr	r3, [sp, #16]
 8023152:	4303      	orrs	r3, r0
 8023154:	3401      	adds	r4, #1
 8023156:	9304      	str	r3, [sp, #16]
 8023158:	f814 1b01 	ldrb.w	r1, [r4], #1
 802315c:	482c      	ldr	r0, [pc, #176]	; (8023210 <_vfiprintf_r+0x250>)
 802315e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023162:	2206      	movs	r2, #6
 8023164:	f7dd f87c 	bl	8000260 <memchr>
 8023168:	2800      	cmp	r0, #0
 802316a:	d03f      	beq.n	80231ec <_vfiprintf_r+0x22c>
 802316c:	4b29      	ldr	r3, [pc, #164]	; (8023214 <_vfiprintf_r+0x254>)
 802316e:	bb1b      	cbnz	r3, 80231b8 <_vfiprintf_r+0x1f8>
 8023170:	9b03      	ldr	r3, [sp, #12]
 8023172:	3307      	adds	r3, #7
 8023174:	f023 0307 	bic.w	r3, r3, #7
 8023178:	3308      	adds	r3, #8
 802317a:	9303      	str	r3, [sp, #12]
 802317c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802317e:	443b      	add	r3, r7
 8023180:	9309      	str	r3, [sp, #36]	; 0x24
 8023182:	e767      	b.n	8023054 <_vfiprintf_r+0x94>
 8023184:	fb0c 3202 	mla	r2, ip, r2, r3
 8023188:	460c      	mov	r4, r1
 802318a:	2001      	movs	r0, #1
 802318c:	e7a5      	b.n	80230da <_vfiprintf_r+0x11a>
 802318e:	2300      	movs	r3, #0
 8023190:	3401      	adds	r4, #1
 8023192:	9305      	str	r3, [sp, #20]
 8023194:	4619      	mov	r1, r3
 8023196:	f04f 0c0a 	mov.w	ip, #10
 802319a:	4620      	mov	r0, r4
 802319c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80231a0:	3a30      	subs	r2, #48	; 0x30
 80231a2:	2a09      	cmp	r2, #9
 80231a4:	d903      	bls.n	80231ae <_vfiprintf_r+0x1ee>
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d0c5      	beq.n	8023136 <_vfiprintf_r+0x176>
 80231aa:	9105      	str	r1, [sp, #20]
 80231ac:	e7c3      	b.n	8023136 <_vfiprintf_r+0x176>
 80231ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80231b2:	4604      	mov	r4, r0
 80231b4:	2301      	movs	r3, #1
 80231b6:	e7f0      	b.n	802319a <_vfiprintf_r+0x1da>
 80231b8:	ab03      	add	r3, sp, #12
 80231ba:	9300      	str	r3, [sp, #0]
 80231bc:	462a      	mov	r2, r5
 80231be:	4b16      	ldr	r3, [pc, #88]	; (8023218 <_vfiprintf_r+0x258>)
 80231c0:	a904      	add	r1, sp, #16
 80231c2:	4630      	mov	r0, r6
 80231c4:	f3af 8000 	nop.w
 80231c8:	4607      	mov	r7, r0
 80231ca:	1c78      	adds	r0, r7, #1
 80231cc:	d1d6      	bne.n	802317c <_vfiprintf_r+0x1bc>
 80231ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80231d0:	07d9      	lsls	r1, r3, #31
 80231d2:	d405      	bmi.n	80231e0 <_vfiprintf_r+0x220>
 80231d4:	89ab      	ldrh	r3, [r5, #12]
 80231d6:	059a      	lsls	r2, r3, #22
 80231d8:	d402      	bmi.n	80231e0 <_vfiprintf_r+0x220>
 80231da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80231dc:	f7fd fea9 	bl	8020f32 <__retarget_lock_release_recursive>
 80231e0:	89ab      	ldrh	r3, [r5, #12]
 80231e2:	065b      	lsls	r3, r3, #25
 80231e4:	f53f af12 	bmi.w	802300c <_vfiprintf_r+0x4c>
 80231e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231ea:	e711      	b.n	8023010 <_vfiprintf_r+0x50>
 80231ec:	ab03      	add	r3, sp, #12
 80231ee:	9300      	str	r3, [sp, #0]
 80231f0:	462a      	mov	r2, r5
 80231f2:	4b09      	ldr	r3, [pc, #36]	; (8023218 <_vfiprintf_r+0x258>)
 80231f4:	a904      	add	r1, sp, #16
 80231f6:	4630      	mov	r0, r6
 80231f8:	f000 f880 	bl	80232fc <_printf_i>
 80231fc:	e7e4      	b.n	80231c8 <_vfiprintf_r+0x208>
 80231fe:	bf00      	nop
 8023200:	0802a32c 	.word	0x0802a32c
 8023204:	0802a34c 	.word	0x0802a34c
 8023208:	0802a30c 	.word	0x0802a30c
 802320c:	0802a8ab 	.word	0x0802a8ab
 8023210:	0802a8b5 	.word	0x0802a8b5
 8023214:	00000000 	.word	0x00000000
 8023218:	08022f9b 	.word	0x08022f9b
 802321c:	0802a8b1 	.word	0x0802a8b1

08023220 <_printf_common>:
 8023220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023224:	4616      	mov	r6, r2
 8023226:	4699      	mov	r9, r3
 8023228:	688a      	ldr	r2, [r1, #8]
 802322a:	690b      	ldr	r3, [r1, #16]
 802322c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023230:	4293      	cmp	r3, r2
 8023232:	bfb8      	it	lt
 8023234:	4613      	movlt	r3, r2
 8023236:	6033      	str	r3, [r6, #0]
 8023238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802323c:	4607      	mov	r7, r0
 802323e:	460c      	mov	r4, r1
 8023240:	b10a      	cbz	r2, 8023246 <_printf_common+0x26>
 8023242:	3301      	adds	r3, #1
 8023244:	6033      	str	r3, [r6, #0]
 8023246:	6823      	ldr	r3, [r4, #0]
 8023248:	0699      	lsls	r1, r3, #26
 802324a:	bf42      	ittt	mi
 802324c:	6833      	ldrmi	r3, [r6, #0]
 802324e:	3302      	addmi	r3, #2
 8023250:	6033      	strmi	r3, [r6, #0]
 8023252:	6825      	ldr	r5, [r4, #0]
 8023254:	f015 0506 	ands.w	r5, r5, #6
 8023258:	d106      	bne.n	8023268 <_printf_common+0x48>
 802325a:	f104 0a19 	add.w	sl, r4, #25
 802325e:	68e3      	ldr	r3, [r4, #12]
 8023260:	6832      	ldr	r2, [r6, #0]
 8023262:	1a9b      	subs	r3, r3, r2
 8023264:	42ab      	cmp	r3, r5
 8023266:	dc26      	bgt.n	80232b6 <_printf_common+0x96>
 8023268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802326c:	1e13      	subs	r3, r2, #0
 802326e:	6822      	ldr	r2, [r4, #0]
 8023270:	bf18      	it	ne
 8023272:	2301      	movne	r3, #1
 8023274:	0692      	lsls	r2, r2, #26
 8023276:	d42b      	bmi.n	80232d0 <_printf_common+0xb0>
 8023278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802327c:	4649      	mov	r1, r9
 802327e:	4638      	mov	r0, r7
 8023280:	47c0      	blx	r8
 8023282:	3001      	adds	r0, #1
 8023284:	d01e      	beq.n	80232c4 <_printf_common+0xa4>
 8023286:	6823      	ldr	r3, [r4, #0]
 8023288:	68e5      	ldr	r5, [r4, #12]
 802328a:	6832      	ldr	r2, [r6, #0]
 802328c:	f003 0306 	and.w	r3, r3, #6
 8023290:	2b04      	cmp	r3, #4
 8023292:	bf08      	it	eq
 8023294:	1aad      	subeq	r5, r5, r2
 8023296:	68a3      	ldr	r3, [r4, #8]
 8023298:	6922      	ldr	r2, [r4, #16]
 802329a:	bf0c      	ite	eq
 802329c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80232a0:	2500      	movne	r5, #0
 80232a2:	4293      	cmp	r3, r2
 80232a4:	bfc4      	itt	gt
 80232a6:	1a9b      	subgt	r3, r3, r2
 80232a8:	18ed      	addgt	r5, r5, r3
 80232aa:	2600      	movs	r6, #0
 80232ac:	341a      	adds	r4, #26
 80232ae:	42b5      	cmp	r5, r6
 80232b0:	d11a      	bne.n	80232e8 <_printf_common+0xc8>
 80232b2:	2000      	movs	r0, #0
 80232b4:	e008      	b.n	80232c8 <_printf_common+0xa8>
 80232b6:	2301      	movs	r3, #1
 80232b8:	4652      	mov	r2, sl
 80232ba:	4649      	mov	r1, r9
 80232bc:	4638      	mov	r0, r7
 80232be:	47c0      	blx	r8
 80232c0:	3001      	adds	r0, #1
 80232c2:	d103      	bne.n	80232cc <_printf_common+0xac>
 80232c4:	f04f 30ff 	mov.w	r0, #4294967295
 80232c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232cc:	3501      	adds	r5, #1
 80232ce:	e7c6      	b.n	802325e <_printf_common+0x3e>
 80232d0:	18e1      	adds	r1, r4, r3
 80232d2:	1c5a      	adds	r2, r3, #1
 80232d4:	2030      	movs	r0, #48	; 0x30
 80232d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80232da:	4422      	add	r2, r4
 80232dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80232e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80232e4:	3302      	adds	r3, #2
 80232e6:	e7c7      	b.n	8023278 <_printf_common+0x58>
 80232e8:	2301      	movs	r3, #1
 80232ea:	4622      	mov	r2, r4
 80232ec:	4649      	mov	r1, r9
 80232ee:	4638      	mov	r0, r7
 80232f0:	47c0      	blx	r8
 80232f2:	3001      	adds	r0, #1
 80232f4:	d0e6      	beq.n	80232c4 <_printf_common+0xa4>
 80232f6:	3601      	adds	r6, #1
 80232f8:	e7d9      	b.n	80232ae <_printf_common+0x8e>
	...

080232fc <_printf_i>:
 80232fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023300:	460c      	mov	r4, r1
 8023302:	4691      	mov	r9, r2
 8023304:	7e27      	ldrb	r7, [r4, #24]
 8023306:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023308:	2f78      	cmp	r7, #120	; 0x78
 802330a:	4680      	mov	r8, r0
 802330c:	469a      	mov	sl, r3
 802330e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023312:	d807      	bhi.n	8023324 <_printf_i+0x28>
 8023314:	2f62      	cmp	r7, #98	; 0x62
 8023316:	d80a      	bhi.n	802332e <_printf_i+0x32>
 8023318:	2f00      	cmp	r7, #0
 802331a:	f000 80d8 	beq.w	80234ce <_printf_i+0x1d2>
 802331e:	2f58      	cmp	r7, #88	; 0x58
 8023320:	f000 80a3 	beq.w	802346a <_printf_i+0x16e>
 8023324:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802332c:	e03a      	b.n	80233a4 <_printf_i+0xa8>
 802332e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023332:	2b15      	cmp	r3, #21
 8023334:	d8f6      	bhi.n	8023324 <_printf_i+0x28>
 8023336:	a001      	add	r0, pc, #4	; (adr r0, 802333c <_printf_i+0x40>)
 8023338:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802333c:	08023395 	.word	0x08023395
 8023340:	080233a9 	.word	0x080233a9
 8023344:	08023325 	.word	0x08023325
 8023348:	08023325 	.word	0x08023325
 802334c:	08023325 	.word	0x08023325
 8023350:	08023325 	.word	0x08023325
 8023354:	080233a9 	.word	0x080233a9
 8023358:	08023325 	.word	0x08023325
 802335c:	08023325 	.word	0x08023325
 8023360:	08023325 	.word	0x08023325
 8023364:	08023325 	.word	0x08023325
 8023368:	080234b5 	.word	0x080234b5
 802336c:	080233d9 	.word	0x080233d9
 8023370:	08023497 	.word	0x08023497
 8023374:	08023325 	.word	0x08023325
 8023378:	08023325 	.word	0x08023325
 802337c:	080234d7 	.word	0x080234d7
 8023380:	08023325 	.word	0x08023325
 8023384:	080233d9 	.word	0x080233d9
 8023388:	08023325 	.word	0x08023325
 802338c:	08023325 	.word	0x08023325
 8023390:	0802349f 	.word	0x0802349f
 8023394:	680b      	ldr	r3, [r1, #0]
 8023396:	1d1a      	adds	r2, r3, #4
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	600a      	str	r2, [r1, #0]
 802339c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80233a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80233a4:	2301      	movs	r3, #1
 80233a6:	e0a3      	b.n	80234f0 <_printf_i+0x1f4>
 80233a8:	6825      	ldr	r5, [r4, #0]
 80233aa:	6808      	ldr	r0, [r1, #0]
 80233ac:	062e      	lsls	r6, r5, #24
 80233ae:	f100 0304 	add.w	r3, r0, #4
 80233b2:	d50a      	bpl.n	80233ca <_printf_i+0xce>
 80233b4:	6805      	ldr	r5, [r0, #0]
 80233b6:	600b      	str	r3, [r1, #0]
 80233b8:	2d00      	cmp	r5, #0
 80233ba:	da03      	bge.n	80233c4 <_printf_i+0xc8>
 80233bc:	232d      	movs	r3, #45	; 0x2d
 80233be:	426d      	negs	r5, r5
 80233c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80233c4:	485e      	ldr	r0, [pc, #376]	; (8023540 <_printf_i+0x244>)
 80233c6:	230a      	movs	r3, #10
 80233c8:	e019      	b.n	80233fe <_printf_i+0x102>
 80233ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80233ce:	6805      	ldr	r5, [r0, #0]
 80233d0:	600b      	str	r3, [r1, #0]
 80233d2:	bf18      	it	ne
 80233d4:	b22d      	sxthne	r5, r5
 80233d6:	e7ef      	b.n	80233b8 <_printf_i+0xbc>
 80233d8:	680b      	ldr	r3, [r1, #0]
 80233da:	6825      	ldr	r5, [r4, #0]
 80233dc:	1d18      	adds	r0, r3, #4
 80233de:	6008      	str	r0, [r1, #0]
 80233e0:	0628      	lsls	r0, r5, #24
 80233e2:	d501      	bpl.n	80233e8 <_printf_i+0xec>
 80233e4:	681d      	ldr	r5, [r3, #0]
 80233e6:	e002      	b.n	80233ee <_printf_i+0xf2>
 80233e8:	0669      	lsls	r1, r5, #25
 80233ea:	d5fb      	bpl.n	80233e4 <_printf_i+0xe8>
 80233ec:	881d      	ldrh	r5, [r3, #0]
 80233ee:	4854      	ldr	r0, [pc, #336]	; (8023540 <_printf_i+0x244>)
 80233f0:	2f6f      	cmp	r7, #111	; 0x6f
 80233f2:	bf0c      	ite	eq
 80233f4:	2308      	moveq	r3, #8
 80233f6:	230a      	movne	r3, #10
 80233f8:	2100      	movs	r1, #0
 80233fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80233fe:	6866      	ldr	r6, [r4, #4]
 8023400:	60a6      	str	r6, [r4, #8]
 8023402:	2e00      	cmp	r6, #0
 8023404:	bfa2      	ittt	ge
 8023406:	6821      	ldrge	r1, [r4, #0]
 8023408:	f021 0104 	bicge.w	r1, r1, #4
 802340c:	6021      	strge	r1, [r4, #0]
 802340e:	b90d      	cbnz	r5, 8023414 <_printf_i+0x118>
 8023410:	2e00      	cmp	r6, #0
 8023412:	d04d      	beq.n	80234b0 <_printf_i+0x1b4>
 8023414:	4616      	mov	r6, r2
 8023416:	fbb5 f1f3 	udiv	r1, r5, r3
 802341a:	fb03 5711 	mls	r7, r3, r1, r5
 802341e:	5dc7      	ldrb	r7, [r0, r7]
 8023420:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023424:	462f      	mov	r7, r5
 8023426:	42bb      	cmp	r3, r7
 8023428:	460d      	mov	r5, r1
 802342a:	d9f4      	bls.n	8023416 <_printf_i+0x11a>
 802342c:	2b08      	cmp	r3, #8
 802342e:	d10b      	bne.n	8023448 <_printf_i+0x14c>
 8023430:	6823      	ldr	r3, [r4, #0]
 8023432:	07df      	lsls	r7, r3, #31
 8023434:	d508      	bpl.n	8023448 <_printf_i+0x14c>
 8023436:	6923      	ldr	r3, [r4, #16]
 8023438:	6861      	ldr	r1, [r4, #4]
 802343a:	4299      	cmp	r1, r3
 802343c:	bfde      	ittt	le
 802343e:	2330      	movle	r3, #48	; 0x30
 8023440:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023444:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023448:	1b92      	subs	r2, r2, r6
 802344a:	6122      	str	r2, [r4, #16]
 802344c:	f8cd a000 	str.w	sl, [sp]
 8023450:	464b      	mov	r3, r9
 8023452:	aa03      	add	r2, sp, #12
 8023454:	4621      	mov	r1, r4
 8023456:	4640      	mov	r0, r8
 8023458:	f7ff fee2 	bl	8023220 <_printf_common>
 802345c:	3001      	adds	r0, #1
 802345e:	d14c      	bne.n	80234fa <_printf_i+0x1fe>
 8023460:	f04f 30ff 	mov.w	r0, #4294967295
 8023464:	b004      	add	sp, #16
 8023466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802346a:	4835      	ldr	r0, [pc, #212]	; (8023540 <_printf_i+0x244>)
 802346c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023470:	6823      	ldr	r3, [r4, #0]
 8023472:	680e      	ldr	r6, [r1, #0]
 8023474:	061f      	lsls	r7, r3, #24
 8023476:	f856 5b04 	ldr.w	r5, [r6], #4
 802347a:	600e      	str	r6, [r1, #0]
 802347c:	d514      	bpl.n	80234a8 <_printf_i+0x1ac>
 802347e:	07d9      	lsls	r1, r3, #31
 8023480:	bf44      	itt	mi
 8023482:	f043 0320 	orrmi.w	r3, r3, #32
 8023486:	6023      	strmi	r3, [r4, #0]
 8023488:	b91d      	cbnz	r5, 8023492 <_printf_i+0x196>
 802348a:	6823      	ldr	r3, [r4, #0]
 802348c:	f023 0320 	bic.w	r3, r3, #32
 8023490:	6023      	str	r3, [r4, #0]
 8023492:	2310      	movs	r3, #16
 8023494:	e7b0      	b.n	80233f8 <_printf_i+0xfc>
 8023496:	6823      	ldr	r3, [r4, #0]
 8023498:	f043 0320 	orr.w	r3, r3, #32
 802349c:	6023      	str	r3, [r4, #0]
 802349e:	2378      	movs	r3, #120	; 0x78
 80234a0:	4828      	ldr	r0, [pc, #160]	; (8023544 <_printf_i+0x248>)
 80234a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80234a6:	e7e3      	b.n	8023470 <_printf_i+0x174>
 80234a8:	065e      	lsls	r6, r3, #25
 80234aa:	bf48      	it	mi
 80234ac:	b2ad      	uxthmi	r5, r5
 80234ae:	e7e6      	b.n	802347e <_printf_i+0x182>
 80234b0:	4616      	mov	r6, r2
 80234b2:	e7bb      	b.n	802342c <_printf_i+0x130>
 80234b4:	680b      	ldr	r3, [r1, #0]
 80234b6:	6826      	ldr	r6, [r4, #0]
 80234b8:	6960      	ldr	r0, [r4, #20]
 80234ba:	1d1d      	adds	r5, r3, #4
 80234bc:	600d      	str	r5, [r1, #0]
 80234be:	0635      	lsls	r5, r6, #24
 80234c0:	681b      	ldr	r3, [r3, #0]
 80234c2:	d501      	bpl.n	80234c8 <_printf_i+0x1cc>
 80234c4:	6018      	str	r0, [r3, #0]
 80234c6:	e002      	b.n	80234ce <_printf_i+0x1d2>
 80234c8:	0671      	lsls	r1, r6, #25
 80234ca:	d5fb      	bpl.n	80234c4 <_printf_i+0x1c8>
 80234cc:	8018      	strh	r0, [r3, #0]
 80234ce:	2300      	movs	r3, #0
 80234d0:	6123      	str	r3, [r4, #16]
 80234d2:	4616      	mov	r6, r2
 80234d4:	e7ba      	b.n	802344c <_printf_i+0x150>
 80234d6:	680b      	ldr	r3, [r1, #0]
 80234d8:	1d1a      	adds	r2, r3, #4
 80234da:	600a      	str	r2, [r1, #0]
 80234dc:	681e      	ldr	r6, [r3, #0]
 80234de:	6862      	ldr	r2, [r4, #4]
 80234e0:	2100      	movs	r1, #0
 80234e2:	4630      	mov	r0, r6
 80234e4:	f7dc febc 	bl	8000260 <memchr>
 80234e8:	b108      	cbz	r0, 80234ee <_printf_i+0x1f2>
 80234ea:	1b80      	subs	r0, r0, r6
 80234ec:	6060      	str	r0, [r4, #4]
 80234ee:	6863      	ldr	r3, [r4, #4]
 80234f0:	6123      	str	r3, [r4, #16]
 80234f2:	2300      	movs	r3, #0
 80234f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234f8:	e7a8      	b.n	802344c <_printf_i+0x150>
 80234fa:	6923      	ldr	r3, [r4, #16]
 80234fc:	4632      	mov	r2, r6
 80234fe:	4649      	mov	r1, r9
 8023500:	4640      	mov	r0, r8
 8023502:	47d0      	blx	sl
 8023504:	3001      	adds	r0, #1
 8023506:	d0ab      	beq.n	8023460 <_printf_i+0x164>
 8023508:	6823      	ldr	r3, [r4, #0]
 802350a:	079b      	lsls	r3, r3, #30
 802350c:	d413      	bmi.n	8023536 <_printf_i+0x23a>
 802350e:	68e0      	ldr	r0, [r4, #12]
 8023510:	9b03      	ldr	r3, [sp, #12]
 8023512:	4298      	cmp	r0, r3
 8023514:	bfb8      	it	lt
 8023516:	4618      	movlt	r0, r3
 8023518:	e7a4      	b.n	8023464 <_printf_i+0x168>
 802351a:	2301      	movs	r3, #1
 802351c:	4632      	mov	r2, r6
 802351e:	4649      	mov	r1, r9
 8023520:	4640      	mov	r0, r8
 8023522:	47d0      	blx	sl
 8023524:	3001      	adds	r0, #1
 8023526:	d09b      	beq.n	8023460 <_printf_i+0x164>
 8023528:	3501      	adds	r5, #1
 802352a:	68e3      	ldr	r3, [r4, #12]
 802352c:	9903      	ldr	r1, [sp, #12]
 802352e:	1a5b      	subs	r3, r3, r1
 8023530:	42ab      	cmp	r3, r5
 8023532:	dcf2      	bgt.n	802351a <_printf_i+0x21e>
 8023534:	e7eb      	b.n	802350e <_printf_i+0x212>
 8023536:	2500      	movs	r5, #0
 8023538:	f104 0619 	add.w	r6, r4, #25
 802353c:	e7f5      	b.n	802352a <_printf_i+0x22e>
 802353e:	bf00      	nop
 8023540:	0802a8bc 	.word	0x0802a8bc
 8023544:	0802a8cd 	.word	0x0802a8cd

08023548 <_putc_r>:
 8023548:	b570      	push	{r4, r5, r6, lr}
 802354a:	460d      	mov	r5, r1
 802354c:	4614      	mov	r4, r2
 802354e:	4606      	mov	r6, r0
 8023550:	b118      	cbz	r0, 802355a <_putc_r+0x12>
 8023552:	6983      	ldr	r3, [r0, #24]
 8023554:	b90b      	cbnz	r3, 802355a <_putc_r+0x12>
 8023556:	f7fd f937 	bl	80207c8 <__sinit>
 802355a:	4b1c      	ldr	r3, [pc, #112]	; (80235cc <_putc_r+0x84>)
 802355c:	429c      	cmp	r4, r3
 802355e:	d124      	bne.n	80235aa <_putc_r+0x62>
 8023560:	6874      	ldr	r4, [r6, #4]
 8023562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023564:	07d8      	lsls	r0, r3, #31
 8023566:	d405      	bmi.n	8023574 <_putc_r+0x2c>
 8023568:	89a3      	ldrh	r3, [r4, #12]
 802356a:	0599      	lsls	r1, r3, #22
 802356c:	d402      	bmi.n	8023574 <_putc_r+0x2c>
 802356e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023570:	f7fd fcdd 	bl	8020f2e <__retarget_lock_acquire_recursive>
 8023574:	68a3      	ldr	r3, [r4, #8]
 8023576:	3b01      	subs	r3, #1
 8023578:	2b00      	cmp	r3, #0
 802357a:	60a3      	str	r3, [r4, #8]
 802357c:	da05      	bge.n	802358a <_putc_r+0x42>
 802357e:	69a2      	ldr	r2, [r4, #24]
 8023580:	4293      	cmp	r3, r2
 8023582:	db1c      	blt.n	80235be <_putc_r+0x76>
 8023584:	b2eb      	uxtb	r3, r5
 8023586:	2b0a      	cmp	r3, #10
 8023588:	d019      	beq.n	80235be <_putc_r+0x76>
 802358a:	6823      	ldr	r3, [r4, #0]
 802358c:	1c5a      	adds	r2, r3, #1
 802358e:	6022      	str	r2, [r4, #0]
 8023590:	701d      	strb	r5, [r3, #0]
 8023592:	b2ed      	uxtb	r5, r5
 8023594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023596:	07da      	lsls	r2, r3, #31
 8023598:	d405      	bmi.n	80235a6 <_putc_r+0x5e>
 802359a:	89a3      	ldrh	r3, [r4, #12]
 802359c:	059b      	lsls	r3, r3, #22
 802359e:	d402      	bmi.n	80235a6 <_putc_r+0x5e>
 80235a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80235a2:	f7fd fcc6 	bl	8020f32 <__retarget_lock_release_recursive>
 80235a6:	4628      	mov	r0, r5
 80235a8:	bd70      	pop	{r4, r5, r6, pc}
 80235aa:	4b09      	ldr	r3, [pc, #36]	; (80235d0 <_putc_r+0x88>)
 80235ac:	429c      	cmp	r4, r3
 80235ae:	d101      	bne.n	80235b4 <_putc_r+0x6c>
 80235b0:	68b4      	ldr	r4, [r6, #8]
 80235b2:	e7d6      	b.n	8023562 <_putc_r+0x1a>
 80235b4:	4b07      	ldr	r3, [pc, #28]	; (80235d4 <_putc_r+0x8c>)
 80235b6:	429c      	cmp	r4, r3
 80235b8:	bf08      	it	eq
 80235ba:	68f4      	ldreq	r4, [r6, #12]
 80235bc:	e7d1      	b.n	8023562 <_putc_r+0x1a>
 80235be:	4629      	mov	r1, r5
 80235c0:	4622      	mov	r2, r4
 80235c2:	4630      	mov	r0, r6
 80235c4:	f7ff f856 	bl	8022674 <__swbuf_r>
 80235c8:	4605      	mov	r5, r0
 80235ca:	e7e3      	b.n	8023594 <_putc_r+0x4c>
 80235cc:	0802a32c 	.word	0x0802a32c
 80235d0:	0802a34c 	.word	0x0802a34c
 80235d4:	0802a30c 	.word	0x0802a30c

080235d8 <_read_r>:
 80235d8:	b538      	push	{r3, r4, r5, lr}
 80235da:	4d07      	ldr	r5, [pc, #28]	; (80235f8 <_read_r+0x20>)
 80235dc:	4604      	mov	r4, r0
 80235de:	4608      	mov	r0, r1
 80235e0:	4611      	mov	r1, r2
 80235e2:	2200      	movs	r2, #0
 80235e4:	602a      	str	r2, [r5, #0]
 80235e6:	461a      	mov	r2, r3
 80235e8:	f7dd fc0d 	bl	8000e06 <_read>
 80235ec:	1c43      	adds	r3, r0, #1
 80235ee:	d102      	bne.n	80235f6 <_read_r+0x1e>
 80235f0:	682b      	ldr	r3, [r5, #0]
 80235f2:	b103      	cbz	r3, 80235f6 <_read_r+0x1e>
 80235f4:	6023      	str	r3, [r4, #0]
 80235f6:	bd38      	pop	{r3, r4, r5, pc}
 80235f8:	20001014 	.word	0x20001014

080235fc <sniprintf>:
 80235fc:	b40c      	push	{r2, r3}
 80235fe:	b530      	push	{r4, r5, lr}
 8023600:	4b17      	ldr	r3, [pc, #92]	; (8023660 <sniprintf+0x64>)
 8023602:	1e0c      	subs	r4, r1, #0
 8023604:	681d      	ldr	r5, [r3, #0]
 8023606:	b09d      	sub	sp, #116	; 0x74
 8023608:	da08      	bge.n	802361c <sniprintf+0x20>
 802360a:	238b      	movs	r3, #139	; 0x8b
 802360c:	602b      	str	r3, [r5, #0]
 802360e:	f04f 30ff 	mov.w	r0, #4294967295
 8023612:	b01d      	add	sp, #116	; 0x74
 8023614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023618:	b002      	add	sp, #8
 802361a:	4770      	bx	lr
 802361c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023624:	bf14      	ite	ne
 8023626:	f104 33ff 	addne.w	r3, r4, #4294967295
 802362a:	4623      	moveq	r3, r4
 802362c:	9304      	str	r3, [sp, #16]
 802362e:	9307      	str	r3, [sp, #28]
 8023630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023634:	9002      	str	r0, [sp, #8]
 8023636:	9006      	str	r0, [sp, #24]
 8023638:	f8ad 3016 	strh.w	r3, [sp, #22]
 802363c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802363e:	ab21      	add	r3, sp, #132	; 0x84
 8023640:	a902      	add	r1, sp, #8
 8023642:	4628      	mov	r0, r5
 8023644:	9301      	str	r3, [sp, #4]
 8023646:	f7ff fb91 	bl	8022d6c <_svfiprintf_r>
 802364a:	1c43      	adds	r3, r0, #1
 802364c:	bfbc      	itt	lt
 802364e:	238b      	movlt	r3, #139	; 0x8b
 8023650:	602b      	strlt	r3, [r5, #0]
 8023652:	2c00      	cmp	r4, #0
 8023654:	d0dd      	beq.n	8023612 <sniprintf+0x16>
 8023656:	9b02      	ldr	r3, [sp, #8]
 8023658:	2200      	movs	r2, #0
 802365a:	701a      	strb	r2, [r3, #0]
 802365c:	e7d9      	b.n	8023612 <sniprintf+0x16>
 802365e:	bf00      	nop
 8023660:	20000108 	.word	0x20000108

08023664 <siscanf>:
 8023664:	b40e      	push	{r1, r2, r3}
 8023666:	b510      	push	{r4, lr}
 8023668:	b09f      	sub	sp, #124	; 0x7c
 802366a:	ac21      	add	r4, sp, #132	; 0x84
 802366c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023670:	f854 2b04 	ldr.w	r2, [r4], #4
 8023674:	9201      	str	r2, [sp, #4]
 8023676:	f8ad 101c 	strh.w	r1, [sp, #28]
 802367a:	9004      	str	r0, [sp, #16]
 802367c:	9008      	str	r0, [sp, #32]
 802367e:	f7dc fddd 	bl	800023c <strlen>
 8023682:	4b0c      	ldr	r3, [pc, #48]	; (80236b4 <siscanf+0x50>)
 8023684:	9005      	str	r0, [sp, #20]
 8023686:	9009      	str	r0, [sp, #36]	; 0x24
 8023688:	930d      	str	r3, [sp, #52]	; 0x34
 802368a:	480b      	ldr	r0, [pc, #44]	; (80236b8 <siscanf+0x54>)
 802368c:	9a01      	ldr	r2, [sp, #4]
 802368e:	6800      	ldr	r0, [r0, #0]
 8023690:	9403      	str	r4, [sp, #12]
 8023692:	2300      	movs	r3, #0
 8023694:	9311      	str	r3, [sp, #68]	; 0x44
 8023696:	9316      	str	r3, [sp, #88]	; 0x58
 8023698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802369c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80236a0:	a904      	add	r1, sp, #16
 80236a2:	4623      	mov	r3, r4
 80236a4:	f000 f8b2 	bl	802380c <__ssvfiscanf_r>
 80236a8:	b01f      	add	sp, #124	; 0x7c
 80236aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80236ae:	b003      	add	sp, #12
 80236b0:	4770      	bx	lr
 80236b2:	bf00      	nop
 80236b4:	08021403 	.word	0x08021403
 80236b8:	20000108 	.word	0x20000108

080236bc <strncmp>:
 80236bc:	b510      	push	{r4, lr}
 80236be:	b16a      	cbz	r2, 80236dc <strncmp+0x20>
 80236c0:	3901      	subs	r1, #1
 80236c2:	1884      	adds	r4, r0, r2
 80236c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80236c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80236cc:	4293      	cmp	r3, r2
 80236ce:	d103      	bne.n	80236d8 <strncmp+0x1c>
 80236d0:	42a0      	cmp	r0, r4
 80236d2:	d001      	beq.n	80236d8 <strncmp+0x1c>
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	d1f5      	bne.n	80236c4 <strncmp+0x8>
 80236d8:	1a98      	subs	r0, r3, r2
 80236da:	bd10      	pop	{r4, pc}
 80236dc:	4610      	mov	r0, r2
 80236de:	e7fc      	b.n	80236da <strncmp+0x1e>

080236e0 <__ascii_wctomb>:
 80236e0:	b149      	cbz	r1, 80236f6 <__ascii_wctomb+0x16>
 80236e2:	2aff      	cmp	r2, #255	; 0xff
 80236e4:	bf85      	ittet	hi
 80236e6:	238a      	movhi	r3, #138	; 0x8a
 80236e8:	6003      	strhi	r3, [r0, #0]
 80236ea:	700a      	strbls	r2, [r1, #0]
 80236ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80236f0:	bf98      	it	ls
 80236f2:	2001      	movls	r0, #1
 80236f4:	4770      	bx	lr
 80236f6:	4608      	mov	r0, r1
 80236f8:	4770      	bx	lr
	...

080236fc <__env_lock>:
 80236fc:	4801      	ldr	r0, [pc, #4]	; (8023704 <__env_lock+0x8>)
 80236fe:	f7fd bc16 	b.w	8020f2e <__retarget_lock_acquire_recursive>
 8023702:	bf00      	nop
 8023704:	2000100a 	.word	0x2000100a

08023708 <__env_unlock>:
 8023708:	4801      	ldr	r0, [pc, #4]	; (8023710 <__env_unlock+0x8>)
 802370a:	f7fd bc12 	b.w	8020f32 <__retarget_lock_release_recursive>
 802370e:	bf00      	nop
 8023710:	2000100a 	.word	0x2000100a

08023714 <memmove>:
 8023714:	4288      	cmp	r0, r1
 8023716:	b510      	push	{r4, lr}
 8023718:	eb01 0402 	add.w	r4, r1, r2
 802371c:	d902      	bls.n	8023724 <memmove+0x10>
 802371e:	4284      	cmp	r4, r0
 8023720:	4623      	mov	r3, r4
 8023722:	d807      	bhi.n	8023734 <memmove+0x20>
 8023724:	1e43      	subs	r3, r0, #1
 8023726:	42a1      	cmp	r1, r4
 8023728:	d008      	beq.n	802373c <memmove+0x28>
 802372a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802372e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023732:	e7f8      	b.n	8023726 <memmove+0x12>
 8023734:	4402      	add	r2, r0
 8023736:	4601      	mov	r1, r0
 8023738:	428a      	cmp	r2, r1
 802373a:	d100      	bne.n	802373e <memmove+0x2a>
 802373c:	bd10      	pop	{r4, pc}
 802373e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023746:	e7f7      	b.n	8023738 <memmove+0x24>

08023748 <_malloc_usable_size_r>:
 8023748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802374c:	1f18      	subs	r0, r3, #4
 802374e:	2b00      	cmp	r3, #0
 8023750:	bfbc      	itt	lt
 8023752:	580b      	ldrlt	r3, [r1, r0]
 8023754:	18c0      	addlt	r0, r0, r3
 8023756:	4770      	bx	lr

08023758 <_sungetc_r>:
 8023758:	b538      	push	{r3, r4, r5, lr}
 802375a:	1c4b      	adds	r3, r1, #1
 802375c:	4614      	mov	r4, r2
 802375e:	d103      	bne.n	8023768 <_sungetc_r+0x10>
 8023760:	f04f 35ff 	mov.w	r5, #4294967295
 8023764:	4628      	mov	r0, r5
 8023766:	bd38      	pop	{r3, r4, r5, pc}
 8023768:	8993      	ldrh	r3, [r2, #12]
 802376a:	f023 0320 	bic.w	r3, r3, #32
 802376e:	8193      	strh	r3, [r2, #12]
 8023770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023772:	6852      	ldr	r2, [r2, #4]
 8023774:	b2cd      	uxtb	r5, r1
 8023776:	b18b      	cbz	r3, 802379c <_sungetc_r+0x44>
 8023778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802377a:	4293      	cmp	r3, r2
 802377c:	dd08      	ble.n	8023790 <_sungetc_r+0x38>
 802377e:	6823      	ldr	r3, [r4, #0]
 8023780:	1e5a      	subs	r2, r3, #1
 8023782:	6022      	str	r2, [r4, #0]
 8023784:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023788:	6863      	ldr	r3, [r4, #4]
 802378a:	3301      	adds	r3, #1
 802378c:	6063      	str	r3, [r4, #4]
 802378e:	e7e9      	b.n	8023764 <_sungetc_r+0xc>
 8023790:	4621      	mov	r1, r4
 8023792:	f000 fb39 	bl	8023e08 <__submore>
 8023796:	2800      	cmp	r0, #0
 8023798:	d0f1      	beq.n	802377e <_sungetc_r+0x26>
 802379a:	e7e1      	b.n	8023760 <_sungetc_r+0x8>
 802379c:	6921      	ldr	r1, [r4, #16]
 802379e:	6823      	ldr	r3, [r4, #0]
 80237a0:	b151      	cbz	r1, 80237b8 <_sungetc_r+0x60>
 80237a2:	4299      	cmp	r1, r3
 80237a4:	d208      	bcs.n	80237b8 <_sungetc_r+0x60>
 80237a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80237aa:	42a9      	cmp	r1, r5
 80237ac:	d104      	bne.n	80237b8 <_sungetc_r+0x60>
 80237ae:	3b01      	subs	r3, #1
 80237b0:	3201      	adds	r2, #1
 80237b2:	6023      	str	r3, [r4, #0]
 80237b4:	6062      	str	r2, [r4, #4]
 80237b6:	e7d5      	b.n	8023764 <_sungetc_r+0xc>
 80237b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80237bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80237c0:	6363      	str	r3, [r4, #52]	; 0x34
 80237c2:	2303      	movs	r3, #3
 80237c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80237c6:	4623      	mov	r3, r4
 80237c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80237cc:	6023      	str	r3, [r4, #0]
 80237ce:	2301      	movs	r3, #1
 80237d0:	e7dc      	b.n	802378c <_sungetc_r+0x34>

080237d2 <__ssrefill_r>:
 80237d2:	b510      	push	{r4, lr}
 80237d4:	460c      	mov	r4, r1
 80237d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80237d8:	b169      	cbz	r1, 80237f6 <__ssrefill_r+0x24>
 80237da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80237de:	4299      	cmp	r1, r3
 80237e0:	d001      	beq.n	80237e6 <__ssrefill_r+0x14>
 80237e2:	f7fd fc41 	bl	8021068 <_free_r>
 80237e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80237e8:	6063      	str	r3, [r4, #4]
 80237ea:	2000      	movs	r0, #0
 80237ec:	6360      	str	r0, [r4, #52]	; 0x34
 80237ee:	b113      	cbz	r3, 80237f6 <__ssrefill_r+0x24>
 80237f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80237f2:	6023      	str	r3, [r4, #0]
 80237f4:	bd10      	pop	{r4, pc}
 80237f6:	6923      	ldr	r3, [r4, #16]
 80237f8:	6023      	str	r3, [r4, #0]
 80237fa:	2300      	movs	r3, #0
 80237fc:	6063      	str	r3, [r4, #4]
 80237fe:	89a3      	ldrh	r3, [r4, #12]
 8023800:	f043 0320 	orr.w	r3, r3, #32
 8023804:	81a3      	strh	r3, [r4, #12]
 8023806:	f04f 30ff 	mov.w	r0, #4294967295
 802380a:	e7f3      	b.n	80237f4 <__ssrefill_r+0x22>

0802380c <__ssvfiscanf_r>:
 802380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023810:	460c      	mov	r4, r1
 8023812:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8023816:	2100      	movs	r1, #0
 8023818:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802381c:	49b2      	ldr	r1, [pc, #712]	; (8023ae8 <__ssvfiscanf_r+0x2dc>)
 802381e:	91a0      	str	r1, [sp, #640]	; 0x280
 8023820:	f10d 0804 	add.w	r8, sp, #4
 8023824:	49b1      	ldr	r1, [pc, #708]	; (8023aec <__ssvfiscanf_r+0x2e0>)
 8023826:	4fb2      	ldr	r7, [pc, #712]	; (8023af0 <__ssvfiscanf_r+0x2e4>)
 8023828:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8023af4 <__ssvfiscanf_r+0x2e8>
 802382c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8023830:	4606      	mov	r6, r0
 8023832:	91a1      	str	r1, [sp, #644]	; 0x284
 8023834:	9300      	str	r3, [sp, #0]
 8023836:	f892 a000 	ldrb.w	sl, [r2]
 802383a:	f1ba 0f00 	cmp.w	sl, #0
 802383e:	f000 8151 	beq.w	8023ae4 <__ssvfiscanf_r+0x2d8>
 8023842:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8023846:	f013 0308 	ands.w	r3, r3, #8
 802384a:	f102 0501 	add.w	r5, r2, #1
 802384e:	d019      	beq.n	8023884 <__ssvfiscanf_r+0x78>
 8023850:	6863      	ldr	r3, [r4, #4]
 8023852:	2b00      	cmp	r3, #0
 8023854:	dd0f      	ble.n	8023876 <__ssvfiscanf_r+0x6a>
 8023856:	6823      	ldr	r3, [r4, #0]
 8023858:	781a      	ldrb	r2, [r3, #0]
 802385a:	5cba      	ldrb	r2, [r7, r2]
 802385c:	0712      	lsls	r2, r2, #28
 802385e:	d401      	bmi.n	8023864 <__ssvfiscanf_r+0x58>
 8023860:	462a      	mov	r2, r5
 8023862:	e7e8      	b.n	8023836 <__ssvfiscanf_r+0x2a>
 8023864:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023866:	3201      	adds	r2, #1
 8023868:	9245      	str	r2, [sp, #276]	; 0x114
 802386a:	6862      	ldr	r2, [r4, #4]
 802386c:	3301      	adds	r3, #1
 802386e:	3a01      	subs	r2, #1
 8023870:	6062      	str	r2, [r4, #4]
 8023872:	6023      	str	r3, [r4, #0]
 8023874:	e7ec      	b.n	8023850 <__ssvfiscanf_r+0x44>
 8023876:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023878:	4621      	mov	r1, r4
 802387a:	4630      	mov	r0, r6
 802387c:	4798      	blx	r3
 802387e:	2800      	cmp	r0, #0
 8023880:	d0e9      	beq.n	8023856 <__ssvfiscanf_r+0x4a>
 8023882:	e7ed      	b.n	8023860 <__ssvfiscanf_r+0x54>
 8023884:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8023888:	f040 8083 	bne.w	8023992 <__ssvfiscanf_r+0x186>
 802388c:	9341      	str	r3, [sp, #260]	; 0x104
 802388e:	9343      	str	r3, [sp, #268]	; 0x10c
 8023890:	7853      	ldrb	r3, [r2, #1]
 8023892:	2b2a      	cmp	r3, #42	; 0x2a
 8023894:	bf02      	ittt	eq
 8023896:	2310      	moveq	r3, #16
 8023898:	1c95      	addeq	r5, r2, #2
 802389a:	9341      	streq	r3, [sp, #260]	; 0x104
 802389c:	220a      	movs	r2, #10
 802389e:	46ab      	mov	fp, r5
 80238a0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80238a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80238a8:	2b09      	cmp	r3, #9
 80238aa:	d91d      	bls.n	80238e8 <__ssvfiscanf_r+0xdc>
 80238ac:	4891      	ldr	r0, [pc, #580]	; (8023af4 <__ssvfiscanf_r+0x2e8>)
 80238ae:	2203      	movs	r2, #3
 80238b0:	f7dc fcd6 	bl	8000260 <memchr>
 80238b4:	b140      	cbz	r0, 80238c8 <__ssvfiscanf_r+0xbc>
 80238b6:	2301      	movs	r3, #1
 80238b8:	eba0 0009 	sub.w	r0, r0, r9
 80238bc:	fa03 f000 	lsl.w	r0, r3, r0
 80238c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80238c2:	4318      	orrs	r0, r3
 80238c4:	9041      	str	r0, [sp, #260]	; 0x104
 80238c6:	465d      	mov	r5, fp
 80238c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80238cc:	2b78      	cmp	r3, #120	; 0x78
 80238ce:	d806      	bhi.n	80238de <__ssvfiscanf_r+0xd2>
 80238d0:	2b57      	cmp	r3, #87	; 0x57
 80238d2:	d810      	bhi.n	80238f6 <__ssvfiscanf_r+0xea>
 80238d4:	2b25      	cmp	r3, #37	; 0x25
 80238d6:	d05c      	beq.n	8023992 <__ssvfiscanf_r+0x186>
 80238d8:	d856      	bhi.n	8023988 <__ssvfiscanf_r+0x17c>
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d074      	beq.n	80239c8 <__ssvfiscanf_r+0x1bc>
 80238de:	2303      	movs	r3, #3
 80238e0:	9347      	str	r3, [sp, #284]	; 0x11c
 80238e2:	230a      	movs	r3, #10
 80238e4:	9342      	str	r3, [sp, #264]	; 0x108
 80238e6:	e081      	b.n	80239ec <__ssvfiscanf_r+0x1e0>
 80238e8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80238ea:	fb02 1303 	mla	r3, r2, r3, r1
 80238ee:	3b30      	subs	r3, #48	; 0x30
 80238f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80238f2:	465d      	mov	r5, fp
 80238f4:	e7d3      	b.n	802389e <__ssvfiscanf_r+0x92>
 80238f6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80238fa:	2a20      	cmp	r2, #32
 80238fc:	d8ef      	bhi.n	80238de <__ssvfiscanf_r+0xd2>
 80238fe:	a101      	add	r1, pc, #4	; (adr r1, 8023904 <__ssvfiscanf_r+0xf8>)
 8023900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023904:	080239d7 	.word	0x080239d7
 8023908:	080238df 	.word	0x080238df
 802390c:	080238df 	.word	0x080238df
 8023910:	08023a35 	.word	0x08023a35
 8023914:	080238df 	.word	0x080238df
 8023918:	080238df 	.word	0x080238df
 802391c:	080238df 	.word	0x080238df
 8023920:	080238df 	.word	0x080238df
 8023924:	080238df 	.word	0x080238df
 8023928:	080238df 	.word	0x080238df
 802392c:	080238df 	.word	0x080238df
 8023930:	08023a4b 	.word	0x08023a4b
 8023934:	08023a21 	.word	0x08023a21
 8023938:	0802398f 	.word	0x0802398f
 802393c:	0802398f 	.word	0x0802398f
 8023940:	0802398f 	.word	0x0802398f
 8023944:	080238df 	.word	0x080238df
 8023948:	08023a25 	.word	0x08023a25
 802394c:	080238df 	.word	0x080238df
 8023950:	080238df 	.word	0x080238df
 8023954:	080238df 	.word	0x080238df
 8023958:	080238df 	.word	0x080238df
 802395c:	08023a5b 	.word	0x08023a5b
 8023960:	08023a2d 	.word	0x08023a2d
 8023964:	080239cf 	.word	0x080239cf
 8023968:	080238df 	.word	0x080238df
 802396c:	080238df 	.word	0x080238df
 8023970:	08023a57 	.word	0x08023a57
 8023974:	080238df 	.word	0x080238df
 8023978:	08023a21 	.word	0x08023a21
 802397c:	080238df 	.word	0x080238df
 8023980:	080238df 	.word	0x080238df
 8023984:	080239d7 	.word	0x080239d7
 8023988:	3b45      	subs	r3, #69	; 0x45
 802398a:	2b02      	cmp	r3, #2
 802398c:	d8a7      	bhi.n	80238de <__ssvfiscanf_r+0xd2>
 802398e:	2305      	movs	r3, #5
 8023990:	e02b      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023992:	6863      	ldr	r3, [r4, #4]
 8023994:	2b00      	cmp	r3, #0
 8023996:	dd0d      	ble.n	80239b4 <__ssvfiscanf_r+0x1a8>
 8023998:	6823      	ldr	r3, [r4, #0]
 802399a:	781a      	ldrb	r2, [r3, #0]
 802399c:	4552      	cmp	r2, sl
 802399e:	f040 80a1 	bne.w	8023ae4 <__ssvfiscanf_r+0x2d8>
 80239a2:	3301      	adds	r3, #1
 80239a4:	6862      	ldr	r2, [r4, #4]
 80239a6:	6023      	str	r3, [r4, #0]
 80239a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80239aa:	3a01      	subs	r2, #1
 80239ac:	3301      	adds	r3, #1
 80239ae:	6062      	str	r2, [r4, #4]
 80239b0:	9345      	str	r3, [sp, #276]	; 0x114
 80239b2:	e755      	b.n	8023860 <__ssvfiscanf_r+0x54>
 80239b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80239b6:	4621      	mov	r1, r4
 80239b8:	4630      	mov	r0, r6
 80239ba:	4798      	blx	r3
 80239bc:	2800      	cmp	r0, #0
 80239be:	d0eb      	beq.n	8023998 <__ssvfiscanf_r+0x18c>
 80239c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80239c2:	2800      	cmp	r0, #0
 80239c4:	f040 8084 	bne.w	8023ad0 <__ssvfiscanf_r+0x2c4>
 80239c8:	f04f 30ff 	mov.w	r0, #4294967295
 80239cc:	e086      	b.n	8023adc <__ssvfiscanf_r+0x2d0>
 80239ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80239d0:	f042 0220 	orr.w	r2, r2, #32
 80239d4:	9241      	str	r2, [sp, #260]	; 0x104
 80239d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80239d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80239dc:	9241      	str	r2, [sp, #260]	; 0x104
 80239de:	2210      	movs	r2, #16
 80239e0:	2b6f      	cmp	r3, #111	; 0x6f
 80239e2:	9242      	str	r2, [sp, #264]	; 0x108
 80239e4:	bf34      	ite	cc
 80239e6:	2303      	movcc	r3, #3
 80239e8:	2304      	movcs	r3, #4
 80239ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80239ec:	6863      	ldr	r3, [r4, #4]
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	dd41      	ble.n	8023a76 <__ssvfiscanf_r+0x26a>
 80239f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80239f4:	0659      	lsls	r1, r3, #25
 80239f6:	d404      	bmi.n	8023a02 <__ssvfiscanf_r+0x1f6>
 80239f8:	6823      	ldr	r3, [r4, #0]
 80239fa:	781a      	ldrb	r2, [r3, #0]
 80239fc:	5cba      	ldrb	r2, [r7, r2]
 80239fe:	0712      	lsls	r2, r2, #28
 8023a00:	d440      	bmi.n	8023a84 <__ssvfiscanf_r+0x278>
 8023a02:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8023a04:	2b02      	cmp	r3, #2
 8023a06:	dc4f      	bgt.n	8023aa8 <__ssvfiscanf_r+0x29c>
 8023a08:	466b      	mov	r3, sp
 8023a0a:	4622      	mov	r2, r4
 8023a0c:	a941      	add	r1, sp, #260	; 0x104
 8023a0e:	4630      	mov	r0, r6
 8023a10:	f000 f874 	bl	8023afc <_scanf_chars>
 8023a14:	2801      	cmp	r0, #1
 8023a16:	d065      	beq.n	8023ae4 <__ssvfiscanf_r+0x2d8>
 8023a18:	2802      	cmp	r0, #2
 8023a1a:	f47f af21 	bne.w	8023860 <__ssvfiscanf_r+0x54>
 8023a1e:	e7cf      	b.n	80239c0 <__ssvfiscanf_r+0x1b4>
 8023a20:	220a      	movs	r2, #10
 8023a22:	e7dd      	b.n	80239e0 <__ssvfiscanf_r+0x1d4>
 8023a24:	2300      	movs	r3, #0
 8023a26:	9342      	str	r3, [sp, #264]	; 0x108
 8023a28:	2303      	movs	r3, #3
 8023a2a:	e7de      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023a2c:	2308      	movs	r3, #8
 8023a2e:	9342      	str	r3, [sp, #264]	; 0x108
 8023a30:	2304      	movs	r3, #4
 8023a32:	e7da      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023a34:	4629      	mov	r1, r5
 8023a36:	4640      	mov	r0, r8
 8023a38:	f000 f9ac 	bl	8023d94 <__sccl>
 8023a3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a42:	9341      	str	r3, [sp, #260]	; 0x104
 8023a44:	4605      	mov	r5, r0
 8023a46:	2301      	movs	r3, #1
 8023a48:	e7cf      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023a4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a50:	9341      	str	r3, [sp, #260]	; 0x104
 8023a52:	2300      	movs	r3, #0
 8023a54:	e7c9      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023a56:	2302      	movs	r3, #2
 8023a58:	e7c7      	b.n	80239ea <__ssvfiscanf_r+0x1de>
 8023a5a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8023a5c:	06c3      	lsls	r3, r0, #27
 8023a5e:	f53f aeff 	bmi.w	8023860 <__ssvfiscanf_r+0x54>
 8023a62:	9b00      	ldr	r3, [sp, #0]
 8023a64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023a66:	1d19      	adds	r1, r3, #4
 8023a68:	9100      	str	r1, [sp, #0]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	07c0      	lsls	r0, r0, #31
 8023a6e:	bf4c      	ite	mi
 8023a70:	801a      	strhmi	r2, [r3, #0]
 8023a72:	601a      	strpl	r2, [r3, #0]
 8023a74:	e6f4      	b.n	8023860 <__ssvfiscanf_r+0x54>
 8023a76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023a78:	4621      	mov	r1, r4
 8023a7a:	4630      	mov	r0, r6
 8023a7c:	4798      	blx	r3
 8023a7e:	2800      	cmp	r0, #0
 8023a80:	d0b7      	beq.n	80239f2 <__ssvfiscanf_r+0x1e6>
 8023a82:	e79d      	b.n	80239c0 <__ssvfiscanf_r+0x1b4>
 8023a84:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8023a86:	3201      	adds	r2, #1
 8023a88:	9245      	str	r2, [sp, #276]	; 0x114
 8023a8a:	6862      	ldr	r2, [r4, #4]
 8023a8c:	3a01      	subs	r2, #1
 8023a8e:	2a00      	cmp	r2, #0
 8023a90:	6062      	str	r2, [r4, #4]
 8023a92:	dd02      	ble.n	8023a9a <__ssvfiscanf_r+0x28e>
 8023a94:	3301      	adds	r3, #1
 8023a96:	6023      	str	r3, [r4, #0]
 8023a98:	e7ae      	b.n	80239f8 <__ssvfiscanf_r+0x1ec>
 8023a9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8023a9c:	4621      	mov	r1, r4
 8023a9e:	4630      	mov	r0, r6
 8023aa0:	4798      	blx	r3
 8023aa2:	2800      	cmp	r0, #0
 8023aa4:	d0a8      	beq.n	80239f8 <__ssvfiscanf_r+0x1ec>
 8023aa6:	e78b      	b.n	80239c0 <__ssvfiscanf_r+0x1b4>
 8023aa8:	2b04      	cmp	r3, #4
 8023aaa:	dc06      	bgt.n	8023aba <__ssvfiscanf_r+0x2ae>
 8023aac:	466b      	mov	r3, sp
 8023aae:	4622      	mov	r2, r4
 8023ab0:	a941      	add	r1, sp, #260	; 0x104
 8023ab2:	4630      	mov	r0, r6
 8023ab4:	f000 f87a 	bl	8023bac <_scanf_i>
 8023ab8:	e7ac      	b.n	8023a14 <__ssvfiscanf_r+0x208>
 8023aba:	4b0f      	ldr	r3, [pc, #60]	; (8023af8 <__ssvfiscanf_r+0x2ec>)
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	f43f aecf 	beq.w	8023860 <__ssvfiscanf_r+0x54>
 8023ac2:	466b      	mov	r3, sp
 8023ac4:	4622      	mov	r2, r4
 8023ac6:	a941      	add	r1, sp, #260	; 0x104
 8023ac8:	4630      	mov	r0, r6
 8023aca:	f3af 8000 	nop.w
 8023ace:	e7a1      	b.n	8023a14 <__ssvfiscanf_r+0x208>
 8023ad0:	89a3      	ldrh	r3, [r4, #12]
 8023ad2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8023ad6:	bf18      	it	ne
 8023ad8:	f04f 30ff 	movne.w	r0, #4294967295
 8023adc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8023ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ae4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8023ae6:	e7f9      	b.n	8023adc <__ssvfiscanf_r+0x2d0>
 8023ae8:	08023759 	.word	0x08023759
 8023aec:	080237d3 	.word	0x080237d3
 8023af0:	0802a7a1 	.word	0x0802a7a1
 8023af4:	0802a8b1 	.word	0x0802a8b1
 8023af8:	00000000 	.word	0x00000000

08023afc <_scanf_chars>:
 8023afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023b00:	4615      	mov	r5, r2
 8023b02:	688a      	ldr	r2, [r1, #8]
 8023b04:	4680      	mov	r8, r0
 8023b06:	460c      	mov	r4, r1
 8023b08:	b932      	cbnz	r2, 8023b18 <_scanf_chars+0x1c>
 8023b0a:	698a      	ldr	r2, [r1, #24]
 8023b0c:	2a00      	cmp	r2, #0
 8023b0e:	bf0c      	ite	eq
 8023b10:	2201      	moveq	r2, #1
 8023b12:	f04f 32ff 	movne.w	r2, #4294967295
 8023b16:	608a      	str	r2, [r1, #8]
 8023b18:	6822      	ldr	r2, [r4, #0]
 8023b1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023ba8 <_scanf_chars+0xac>
 8023b1e:	06d1      	lsls	r1, r2, #27
 8023b20:	bf5f      	itttt	pl
 8023b22:	681a      	ldrpl	r2, [r3, #0]
 8023b24:	1d11      	addpl	r1, r2, #4
 8023b26:	6019      	strpl	r1, [r3, #0]
 8023b28:	6816      	ldrpl	r6, [r2, #0]
 8023b2a:	2700      	movs	r7, #0
 8023b2c:	69a0      	ldr	r0, [r4, #24]
 8023b2e:	b188      	cbz	r0, 8023b54 <_scanf_chars+0x58>
 8023b30:	2801      	cmp	r0, #1
 8023b32:	d107      	bne.n	8023b44 <_scanf_chars+0x48>
 8023b34:	682b      	ldr	r3, [r5, #0]
 8023b36:	781a      	ldrb	r2, [r3, #0]
 8023b38:	6963      	ldr	r3, [r4, #20]
 8023b3a:	5c9b      	ldrb	r3, [r3, r2]
 8023b3c:	b953      	cbnz	r3, 8023b54 <_scanf_chars+0x58>
 8023b3e:	bb27      	cbnz	r7, 8023b8a <_scanf_chars+0x8e>
 8023b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023b44:	2802      	cmp	r0, #2
 8023b46:	d120      	bne.n	8023b8a <_scanf_chars+0x8e>
 8023b48:	682b      	ldr	r3, [r5, #0]
 8023b4a:	781b      	ldrb	r3, [r3, #0]
 8023b4c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8023b50:	071b      	lsls	r3, r3, #28
 8023b52:	d41a      	bmi.n	8023b8a <_scanf_chars+0x8e>
 8023b54:	6823      	ldr	r3, [r4, #0]
 8023b56:	06da      	lsls	r2, r3, #27
 8023b58:	bf5e      	ittt	pl
 8023b5a:	682b      	ldrpl	r3, [r5, #0]
 8023b5c:	781b      	ldrbpl	r3, [r3, #0]
 8023b5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8023b62:	682a      	ldr	r2, [r5, #0]
 8023b64:	686b      	ldr	r3, [r5, #4]
 8023b66:	3201      	adds	r2, #1
 8023b68:	602a      	str	r2, [r5, #0]
 8023b6a:	68a2      	ldr	r2, [r4, #8]
 8023b6c:	3b01      	subs	r3, #1
 8023b6e:	3a01      	subs	r2, #1
 8023b70:	606b      	str	r3, [r5, #4]
 8023b72:	3701      	adds	r7, #1
 8023b74:	60a2      	str	r2, [r4, #8]
 8023b76:	b142      	cbz	r2, 8023b8a <_scanf_chars+0x8e>
 8023b78:	2b00      	cmp	r3, #0
 8023b7a:	dcd7      	bgt.n	8023b2c <_scanf_chars+0x30>
 8023b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023b80:	4629      	mov	r1, r5
 8023b82:	4640      	mov	r0, r8
 8023b84:	4798      	blx	r3
 8023b86:	2800      	cmp	r0, #0
 8023b88:	d0d0      	beq.n	8023b2c <_scanf_chars+0x30>
 8023b8a:	6823      	ldr	r3, [r4, #0]
 8023b8c:	f013 0310 	ands.w	r3, r3, #16
 8023b90:	d105      	bne.n	8023b9e <_scanf_chars+0xa2>
 8023b92:	68e2      	ldr	r2, [r4, #12]
 8023b94:	3201      	adds	r2, #1
 8023b96:	60e2      	str	r2, [r4, #12]
 8023b98:	69a2      	ldr	r2, [r4, #24]
 8023b9a:	b102      	cbz	r2, 8023b9e <_scanf_chars+0xa2>
 8023b9c:	7033      	strb	r3, [r6, #0]
 8023b9e:	6923      	ldr	r3, [r4, #16]
 8023ba0:	441f      	add	r7, r3
 8023ba2:	6127      	str	r7, [r4, #16]
 8023ba4:	2000      	movs	r0, #0
 8023ba6:	e7cb      	b.n	8023b40 <_scanf_chars+0x44>
 8023ba8:	0802a7a1 	.word	0x0802a7a1

08023bac <_scanf_i>:
 8023bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bb0:	4698      	mov	r8, r3
 8023bb2:	4b74      	ldr	r3, [pc, #464]	; (8023d84 <_scanf_i+0x1d8>)
 8023bb4:	460c      	mov	r4, r1
 8023bb6:	4682      	mov	sl, r0
 8023bb8:	4616      	mov	r6, r2
 8023bba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8023bbe:	b087      	sub	sp, #28
 8023bc0:	ab03      	add	r3, sp, #12
 8023bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8023bc6:	4b70      	ldr	r3, [pc, #448]	; (8023d88 <_scanf_i+0x1dc>)
 8023bc8:	69a1      	ldr	r1, [r4, #24]
 8023bca:	4a70      	ldr	r2, [pc, #448]	; (8023d8c <_scanf_i+0x1e0>)
 8023bcc:	2903      	cmp	r1, #3
 8023bce:	bf18      	it	ne
 8023bd0:	461a      	movne	r2, r3
 8023bd2:	68a3      	ldr	r3, [r4, #8]
 8023bd4:	9201      	str	r2, [sp, #4]
 8023bd6:	1e5a      	subs	r2, r3, #1
 8023bd8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8023bdc:	bf88      	it	hi
 8023bde:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8023be2:	4627      	mov	r7, r4
 8023be4:	bf82      	ittt	hi
 8023be6:	eb03 0905 	addhi.w	r9, r3, r5
 8023bea:	f240 135d 	movwhi	r3, #349	; 0x15d
 8023bee:	60a3      	strhi	r3, [r4, #8]
 8023bf0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8023bf4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8023bf8:	bf98      	it	ls
 8023bfa:	f04f 0900 	movls.w	r9, #0
 8023bfe:	6023      	str	r3, [r4, #0]
 8023c00:	463d      	mov	r5, r7
 8023c02:	f04f 0b00 	mov.w	fp, #0
 8023c06:	6831      	ldr	r1, [r6, #0]
 8023c08:	ab03      	add	r3, sp, #12
 8023c0a:	7809      	ldrb	r1, [r1, #0]
 8023c0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8023c10:	2202      	movs	r2, #2
 8023c12:	f7dc fb25 	bl	8000260 <memchr>
 8023c16:	b328      	cbz	r0, 8023c64 <_scanf_i+0xb8>
 8023c18:	f1bb 0f01 	cmp.w	fp, #1
 8023c1c:	d159      	bne.n	8023cd2 <_scanf_i+0x126>
 8023c1e:	6862      	ldr	r2, [r4, #4]
 8023c20:	b92a      	cbnz	r2, 8023c2e <_scanf_i+0x82>
 8023c22:	6822      	ldr	r2, [r4, #0]
 8023c24:	2308      	movs	r3, #8
 8023c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8023c2a:	6063      	str	r3, [r4, #4]
 8023c2c:	6022      	str	r2, [r4, #0]
 8023c2e:	6822      	ldr	r2, [r4, #0]
 8023c30:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8023c34:	6022      	str	r2, [r4, #0]
 8023c36:	68a2      	ldr	r2, [r4, #8]
 8023c38:	1e51      	subs	r1, r2, #1
 8023c3a:	60a1      	str	r1, [r4, #8]
 8023c3c:	b192      	cbz	r2, 8023c64 <_scanf_i+0xb8>
 8023c3e:	6832      	ldr	r2, [r6, #0]
 8023c40:	1c51      	adds	r1, r2, #1
 8023c42:	6031      	str	r1, [r6, #0]
 8023c44:	7812      	ldrb	r2, [r2, #0]
 8023c46:	f805 2b01 	strb.w	r2, [r5], #1
 8023c4a:	6872      	ldr	r2, [r6, #4]
 8023c4c:	3a01      	subs	r2, #1
 8023c4e:	2a00      	cmp	r2, #0
 8023c50:	6072      	str	r2, [r6, #4]
 8023c52:	dc07      	bgt.n	8023c64 <_scanf_i+0xb8>
 8023c54:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8023c58:	4631      	mov	r1, r6
 8023c5a:	4650      	mov	r0, sl
 8023c5c:	4790      	blx	r2
 8023c5e:	2800      	cmp	r0, #0
 8023c60:	f040 8085 	bne.w	8023d6e <_scanf_i+0x1c2>
 8023c64:	f10b 0b01 	add.w	fp, fp, #1
 8023c68:	f1bb 0f03 	cmp.w	fp, #3
 8023c6c:	d1cb      	bne.n	8023c06 <_scanf_i+0x5a>
 8023c6e:	6863      	ldr	r3, [r4, #4]
 8023c70:	b90b      	cbnz	r3, 8023c76 <_scanf_i+0xca>
 8023c72:	230a      	movs	r3, #10
 8023c74:	6063      	str	r3, [r4, #4]
 8023c76:	6863      	ldr	r3, [r4, #4]
 8023c78:	4945      	ldr	r1, [pc, #276]	; (8023d90 <_scanf_i+0x1e4>)
 8023c7a:	6960      	ldr	r0, [r4, #20]
 8023c7c:	1ac9      	subs	r1, r1, r3
 8023c7e:	f000 f889 	bl	8023d94 <__sccl>
 8023c82:	f04f 0b00 	mov.w	fp, #0
 8023c86:	68a3      	ldr	r3, [r4, #8]
 8023c88:	6822      	ldr	r2, [r4, #0]
 8023c8a:	2b00      	cmp	r3, #0
 8023c8c:	d03d      	beq.n	8023d0a <_scanf_i+0x15e>
 8023c8e:	6831      	ldr	r1, [r6, #0]
 8023c90:	6960      	ldr	r0, [r4, #20]
 8023c92:	f891 c000 	ldrb.w	ip, [r1]
 8023c96:	f810 000c 	ldrb.w	r0, [r0, ip]
 8023c9a:	2800      	cmp	r0, #0
 8023c9c:	d035      	beq.n	8023d0a <_scanf_i+0x15e>
 8023c9e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8023ca2:	d124      	bne.n	8023cee <_scanf_i+0x142>
 8023ca4:	0510      	lsls	r0, r2, #20
 8023ca6:	d522      	bpl.n	8023cee <_scanf_i+0x142>
 8023ca8:	f10b 0b01 	add.w	fp, fp, #1
 8023cac:	f1b9 0f00 	cmp.w	r9, #0
 8023cb0:	d003      	beq.n	8023cba <_scanf_i+0x10e>
 8023cb2:	3301      	adds	r3, #1
 8023cb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8023cb8:	60a3      	str	r3, [r4, #8]
 8023cba:	6873      	ldr	r3, [r6, #4]
 8023cbc:	3b01      	subs	r3, #1
 8023cbe:	2b00      	cmp	r3, #0
 8023cc0:	6073      	str	r3, [r6, #4]
 8023cc2:	dd1b      	ble.n	8023cfc <_scanf_i+0x150>
 8023cc4:	6833      	ldr	r3, [r6, #0]
 8023cc6:	3301      	adds	r3, #1
 8023cc8:	6033      	str	r3, [r6, #0]
 8023cca:	68a3      	ldr	r3, [r4, #8]
 8023ccc:	3b01      	subs	r3, #1
 8023cce:	60a3      	str	r3, [r4, #8]
 8023cd0:	e7d9      	b.n	8023c86 <_scanf_i+0xda>
 8023cd2:	f1bb 0f02 	cmp.w	fp, #2
 8023cd6:	d1ae      	bne.n	8023c36 <_scanf_i+0x8a>
 8023cd8:	6822      	ldr	r2, [r4, #0]
 8023cda:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8023cde:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8023ce2:	d1bf      	bne.n	8023c64 <_scanf_i+0xb8>
 8023ce4:	2310      	movs	r3, #16
 8023ce6:	6063      	str	r3, [r4, #4]
 8023ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8023cec:	e7a2      	b.n	8023c34 <_scanf_i+0x88>
 8023cee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8023cf2:	6022      	str	r2, [r4, #0]
 8023cf4:	780b      	ldrb	r3, [r1, #0]
 8023cf6:	f805 3b01 	strb.w	r3, [r5], #1
 8023cfa:	e7de      	b.n	8023cba <_scanf_i+0x10e>
 8023cfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8023d00:	4631      	mov	r1, r6
 8023d02:	4650      	mov	r0, sl
 8023d04:	4798      	blx	r3
 8023d06:	2800      	cmp	r0, #0
 8023d08:	d0df      	beq.n	8023cca <_scanf_i+0x11e>
 8023d0a:	6823      	ldr	r3, [r4, #0]
 8023d0c:	05d9      	lsls	r1, r3, #23
 8023d0e:	d50d      	bpl.n	8023d2c <_scanf_i+0x180>
 8023d10:	42bd      	cmp	r5, r7
 8023d12:	d909      	bls.n	8023d28 <_scanf_i+0x17c>
 8023d14:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8023d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8023d1c:	4632      	mov	r2, r6
 8023d1e:	4650      	mov	r0, sl
 8023d20:	4798      	blx	r3
 8023d22:	f105 39ff 	add.w	r9, r5, #4294967295
 8023d26:	464d      	mov	r5, r9
 8023d28:	42bd      	cmp	r5, r7
 8023d2a:	d028      	beq.n	8023d7e <_scanf_i+0x1d2>
 8023d2c:	6822      	ldr	r2, [r4, #0]
 8023d2e:	f012 0210 	ands.w	r2, r2, #16
 8023d32:	d113      	bne.n	8023d5c <_scanf_i+0x1b0>
 8023d34:	702a      	strb	r2, [r5, #0]
 8023d36:	6863      	ldr	r3, [r4, #4]
 8023d38:	9e01      	ldr	r6, [sp, #4]
 8023d3a:	4639      	mov	r1, r7
 8023d3c:	4650      	mov	r0, sl
 8023d3e:	47b0      	blx	r6
 8023d40:	f8d8 3000 	ldr.w	r3, [r8]
 8023d44:	6821      	ldr	r1, [r4, #0]
 8023d46:	1d1a      	adds	r2, r3, #4
 8023d48:	f8c8 2000 	str.w	r2, [r8]
 8023d4c:	f011 0f20 	tst.w	r1, #32
 8023d50:	681b      	ldr	r3, [r3, #0]
 8023d52:	d00f      	beq.n	8023d74 <_scanf_i+0x1c8>
 8023d54:	6018      	str	r0, [r3, #0]
 8023d56:	68e3      	ldr	r3, [r4, #12]
 8023d58:	3301      	adds	r3, #1
 8023d5a:	60e3      	str	r3, [r4, #12]
 8023d5c:	1bed      	subs	r5, r5, r7
 8023d5e:	44ab      	add	fp, r5
 8023d60:	6925      	ldr	r5, [r4, #16]
 8023d62:	445d      	add	r5, fp
 8023d64:	6125      	str	r5, [r4, #16]
 8023d66:	2000      	movs	r0, #0
 8023d68:	b007      	add	sp, #28
 8023d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d6e:	f04f 0b00 	mov.w	fp, #0
 8023d72:	e7ca      	b.n	8023d0a <_scanf_i+0x15e>
 8023d74:	07ca      	lsls	r2, r1, #31
 8023d76:	bf4c      	ite	mi
 8023d78:	8018      	strhmi	r0, [r3, #0]
 8023d7a:	6018      	strpl	r0, [r3, #0]
 8023d7c:	e7eb      	b.n	8023d56 <_scanf_i+0x1aa>
 8023d7e:	2001      	movs	r0, #1
 8023d80:	e7f2      	b.n	8023d68 <_scanf_i+0x1bc>
 8023d82:	bf00      	nop
 8023d84:	0802767c 	.word	0x0802767c
 8023d88:	0802217d 	.word	0x0802217d
 8023d8c:	0802206d 	.word	0x0802206d
 8023d90:	0802a8f7 	.word	0x0802a8f7

08023d94 <__sccl>:
 8023d94:	b570      	push	{r4, r5, r6, lr}
 8023d96:	780b      	ldrb	r3, [r1, #0]
 8023d98:	4604      	mov	r4, r0
 8023d9a:	2b5e      	cmp	r3, #94	; 0x5e
 8023d9c:	bf0b      	itete	eq
 8023d9e:	784b      	ldrbeq	r3, [r1, #1]
 8023da0:	1c48      	addne	r0, r1, #1
 8023da2:	1c88      	addeq	r0, r1, #2
 8023da4:	2200      	movne	r2, #0
 8023da6:	bf08      	it	eq
 8023da8:	2201      	moveq	r2, #1
 8023daa:	1e61      	subs	r1, r4, #1
 8023dac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023db0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8023db4:	42a9      	cmp	r1, r5
 8023db6:	d1fb      	bne.n	8023db0 <__sccl+0x1c>
 8023db8:	b90b      	cbnz	r3, 8023dbe <__sccl+0x2a>
 8023dba:	3801      	subs	r0, #1
 8023dbc:	bd70      	pop	{r4, r5, r6, pc}
 8023dbe:	f082 0101 	eor.w	r1, r2, #1
 8023dc2:	54e1      	strb	r1, [r4, r3]
 8023dc4:	1c42      	adds	r2, r0, #1
 8023dc6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8023dca:	2d2d      	cmp	r5, #45	; 0x2d
 8023dcc:	f102 36ff 	add.w	r6, r2, #4294967295
 8023dd0:	4610      	mov	r0, r2
 8023dd2:	d006      	beq.n	8023de2 <__sccl+0x4e>
 8023dd4:	2d5d      	cmp	r5, #93	; 0x5d
 8023dd6:	d0f1      	beq.n	8023dbc <__sccl+0x28>
 8023dd8:	b90d      	cbnz	r5, 8023dde <__sccl+0x4a>
 8023dda:	4630      	mov	r0, r6
 8023ddc:	e7ee      	b.n	8023dbc <__sccl+0x28>
 8023dde:	462b      	mov	r3, r5
 8023de0:	e7ef      	b.n	8023dc2 <__sccl+0x2e>
 8023de2:	7816      	ldrb	r6, [r2, #0]
 8023de4:	2e5d      	cmp	r6, #93	; 0x5d
 8023de6:	d0fa      	beq.n	8023dde <__sccl+0x4a>
 8023de8:	42b3      	cmp	r3, r6
 8023dea:	dcf8      	bgt.n	8023dde <__sccl+0x4a>
 8023dec:	4618      	mov	r0, r3
 8023dee:	3001      	adds	r0, #1
 8023df0:	4286      	cmp	r6, r0
 8023df2:	5421      	strb	r1, [r4, r0]
 8023df4:	dcfb      	bgt.n	8023dee <__sccl+0x5a>
 8023df6:	43d8      	mvns	r0, r3
 8023df8:	4430      	add	r0, r6
 8023dfa:	1c5d      	adds	r5, r3, #1
 8023dfc:	42b3      	cmp	r3, r6
 8023dfe:	bfa8      	it	ge
 8023e00:	2000      	movge	r0, #0
 8023e02:	182b      	adds	r3, r5, r0
 8023e04:	3202      	adds	r2, #2
 8023e06:	e7de      	b.n	8023dc6 <__sccl+0x32>

08023e08 <__submore>:
 8023e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e0c:	460c      	mov	r4, r1
 8023e0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023e10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023e14:	4299      	cmp	r1, r3
 8023e16:	d11d      	bne.n	8023e54 <__submore+0x4c>
 8023e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023e1c:	f7fd f974 	bl	8021108 <_malloc_r>
 8023e20:	b918      	cbnz	r0, 8023e2a <__submore+0x22>
 8023e22:	f04f 30ff 	mov.w	r0, #4294967295
 8023e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023e2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8023e30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023e34:	6360      	str	r0, [r4, #52]	; 0x34
 8023e36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8023e3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023e3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8023e42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8023e46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8023e4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8023e4e:	6020      	str	r0, [r4, #0]
 8023e50:	2000      	movs	r0, #0
 8023e52:	e7e8      	b.n	8023e26 <__submore+0x1e>
 8023e54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8023e56:	0077      	lsls	r7, r6, #1
 8023e58:	463a      	mov	r2, r7
 8023e5a:	f7fe ff05 	bl	8022c68 <_realloc_r>
 8023e5e:	4605      	mov	r5, r0
 8023e60:	2800      	cmp	r0, #0
 8023e62:	d0de      	beq.n	8023e22 <__submore+0x1a>
 8023e64:	eb00 0806 	add.w	r8, r0, r6
 8023e68:	4601      	mov	r1, r0
 8023e6a:	4632      	mov	r2, r6
 8023e6c:	4640      	mov	r0, r8
 8023e6e:	f7fd f8d5 	bl	802101c <memcpy>
 8023e72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023e76:	f8c4 8000 	str.w	r8, [r4]
 8023e7a:	e7e9      	b.n	8023e50 <__submore+0x48>

08023e7c <_init>:
 8023e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e7e:	bf00      	nop
 8023e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e82:	bc08      	pop	{r3}
 8023e84:	469e      	mov	lr, r3
 8023e86:	4770      	bx	lr

08023e88 <_fini>:
 8023e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e8a:	bf00      	nop
 8023e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e8e:	bc08      	pop	{r3}
 8023e90:	469e      	mov	lr, r3
 8023e92:	4770      	bx	lr
 8023e94:	0000      	movs	r0, r0
	...

08023e98 <__time_veneer>:
 8023e98:	e51ff004 	ldr	pc, [pc, #-4]	; 8023e9c <__time_veneer+0x4>
 8023e9c:	200004a0 	.word	0x200004a0
