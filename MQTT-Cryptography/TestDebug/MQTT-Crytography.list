
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000259e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007434  08025bc0  08025bc0  00035bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cff4  0802cff4  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802cff4  0802cff4  0003cff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cffc  0802cffc  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802cffc  0802cffc  0003cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802d010  0802d010  0003d010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802d024  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df8  2000033c  0802d360  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  0802d360  00041134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006f15e  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c915  00000000  00000000  000af4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004728  00000000  00000000  000bbde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000044e8  00000000  00000000  000c0508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e151  00000000  00000000  000c49f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f71c  00000000  00000000  000f2b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001165cc  00000000  00000000  0012225d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00238829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015710  00000000  00000000  0023887c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08025b9c 	.word	0x08025b9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08025b9c 	.word	0x08025b9c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 ff41 	bl	8009b2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	200008e0 	.word	0x200008e0
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200008e0 	.word	0x200008e0

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000850 	.word	0x20000850

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f021 f9de 	bl	802219c <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f021 f936 	bl	802219c <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001138 	.word	0x20001138

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f021 fd0d 	bl	80229d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f008 fbc9 	bl	8009754 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802d024 	.word	0x0802d024
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001134 	.word	0x20001134

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	2000111c 	.word	0x2000111c
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000111c 	.word	0x2000111c

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08029984 	.word	0x08029984
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08029994 	.word	0x08029994

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08029994 	.word	0x08029994

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	0802999c 	.word	0x0802999c
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	080299b4 	.word	0x080299b4
 8003c70:	080299bc 	.word	0x080299bc

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*,size_t),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fd8e 	bl	80047c8 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	20001120 	.word	0x20001120

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd,size_t size)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

	ESP8266.UART_Transmit((uint8_t*)cmd,size);
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <Send_AT_Command+0x1c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000360 	.word	0x20000360

08003cf8 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf8:	b598      	push	{r3, r4, r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <ESP_UART_ReceiveHandler+0x20>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f000 fd9d 	bl	800484a <ringBuffer_push>
}
 8003d10:	bf00      	nop
 8003d12:	bd98      	pop	{r3, r4, r7, pc}
 8003d14:	20001120 	.word	0x20001120
 8003d18:	20000360 	.word	0x20000360

08003d1c <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <Read_Response+0x20>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fe17 	bl	800495e <ringBuffer_lookFor>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20001120 	.word	0x20001120

08003d40 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <Wait_Response+0x74>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <Wait_Response+0x78>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <Wait_Response+0x7c>)
 8003d5c:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <Wait_Response+0x74>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <Wait_Response+0x80>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fdf7 	bl	800495e <ringBuffer_lookFor>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <Wait_Response+0x74>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <Wait_Response+0x7c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e012      	b.n	8003dac <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <Wait_Response+0x78>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4798      	blx	r3
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <Wait_Response+0x7c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d807      	bhi.n	8003daa <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <Wait_Response+0x74>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <Wait_Response+0x7c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003daa:	2304      	movs	r3, #4
	}

}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2000036c 	.word	0x2000036c
 8003db8:	20000360 	.word	0x20000360
 8003dbc:	20000370 	.word	0x20000370
 8003dc0:	20001120 	.word	0x20001120

08003dc4 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b098      	sub	sp, #96	; 0x60
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dce:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <Connect_Wifi+0x64>)
 8003dd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dda:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <Connect_Wifi+0x68>)
 8003ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de6:	2304      	movs	r3, #4
 8003de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003dec:	f107 0008 	add.w	r0, r7, #8
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <Connect_Wifi+0x6c>)
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <Connect_Wifi+0x70>)
 8003dfa:	f01f f961 	bl	80230c0 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f82e 	bl	8003e70 <Command_Process>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3758      	adds	r7, #88	; 0x58
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08025c1c 	.word	0x08025c1c
 8003e2c:	08025c28 	.word	0x08025c28
 8003e30:	08025c00 	.word	0x08025c00
 8003e34:	08025c0c 	.word	0x08025c0c

08003e38 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x30>)
 8003e40:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <Disconnect_Wifi+0x34>)
 8003e44:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e46:	2304      	movs	r3, #4
 8003e48:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e4a:	1d39      	adds	r1, r7, #4
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	2201      	movs	r2, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f80c 	bl	8003e70 <Command_Process>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	08025bd0 	.word	0x08025bd0
 8003e6c:	08025be0 	.word	0x08025be0

08003e70 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <Command_Process+0x1e>
 8003e84:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <Command_Process+0x11c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d806      	bhi.n	8003e9c <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <Command_Process+0x120>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fd2d 	bl	80048f2 <ringBuffer_flush>
		return STATUS_ERROR;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e072      	b.n	8003f82 <Command_Process+0x112>
	}
	else
	{
		if(commandFlag)
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <Command_Process+0x124>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <Command_Process+0x62>
		{
			Send_AT_Command(commandArray[currentCommand],strlen(commandArray[currentCommand]));
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <Command_Process+0x11c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <Command_Process+0x11c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc f9bd 	bl	800023c <strlen>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff ff06 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <Command_Process+0x124>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <Command_Process+0x11c>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff2c 	bl	8003d40 <Wait_Response>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003eec:	482a      	ldr	r0, [pc, #168]	; (8003f98 <Command_Process+0x128>)
 8003eee:	f7ff ff15 	bl	8003d1c <Read_Response>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <Command_Process+0xa2>
			{
				commandFlag = 1;
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <Command_Process+0x124>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <Command_Process+0x11c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <Command_Process+0x120>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fcf2 	bl	80048f2 <ringBuffer_flush>
				return STATUS_ERROR;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e037      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == IDLE)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d101      	bne.n	8003f1c <Command_Process+0xac>
			{
				return response;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	e032      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == FOUND)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <Command_Process+0xfa>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <Command_Process+0x11c>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d10c      	bne.n	8003f4a <Command_Process+0xda>
				{
					commandFlag = 1;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <Command_Process+0x124>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <Command_Process+0x11c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <Command_Process+0x120>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fcd6 	bl	80048f2 <ringBuffer_flush>
					return STATUS_OK;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e01b      	b.n	8003f82 <Command_Process+0x112>
				}
				else
				{
					commandFlag = 1;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <Command_Process+0x124>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <Command_Process+0x11c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <Command_Process+0x11c>)
 8003f5a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <Command_Process+0x120>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fcc6 	bl	80048f2 <ringBuffer_flush>
					return IDLE;
 8003f66:	2304      	movs	r3, #4
 8003f68:	e00b      	b.n	8003f82 <Command_Process+0x112>
				}

			}
			else
			{
				commandFlag = 1;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <Command_Process+0x124>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <Command_Process+0x11c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <Command_Process+0x120>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fcb9 	bl	80048f2 <ringBuffer_flush>
				return response;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000374 	.word	0x20000374
 8003f90:	20001120 	.word	0x20001120
 8003f94:	20000010 	.word	0x20000010
 8003f98:	08025c34 	.word	0x08025c34

08003f9c <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(const char* ip, const char* port)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b0a2      	sub	sp, #136	; 0x88
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <Connect_TCP_Server+0x78>)
 8003fae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fb6:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <Connect_TCP_Server+0x7c>)
 8003fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char wifi_buffer[100] ={0};
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	2260      	movs	r2, #96	; 0x60
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f01e febf 	bl	8022d58 <memset>

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fda:	f107 0008 	add.w	r0, r7, #8
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <Connect_TCP_Server+0x80>)
 8003fe6:	490e      	ldr	r1, [pc, #56]	; (8004020 <Connect_TCP_Server+0x84>)
 8003fe8:	f01f f86a 	bl	80230c0 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003ff2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff37 	bl	8003e70 <Command_Process>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8004008:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800400c:	4618      	mov	r0, r3
 800400e:	3780      	adds	r7, #128	; 0x80
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08025c5c 	.word	0x08025c5c
 8004018:	08025c64 	.word	0x08025c64
 800401c:	08025c3c 	.word	0x08025c3c
 8004020:	08025c50 	.word	0x08025c50

08004024 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 800402a:	2304      	movs	r3, #4
 800402c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <Disconnect_TCP_Server+0x30>)
 8004030:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <Disconnect_TCP_Server+0x34>)
 8004034:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8004036:	1d39      	adds	r1, r7, #4
 8004038:	f107 0308 	add.w	r3, r7, #8
 800403c:	2201      	movs	r2, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff16 	bl	8003e70 <Command_Process>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8004048:	7bfb      	ldrb	r3, [r7, #15]

}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08025c6c 	.word	0x08025c6c
 8004058:	08025be0 	.word	0x08025be0

0800405c <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b096      	sub	sp, #88	; 0x58
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004064:	2303      	movs	r3, #3
 8004066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800406a:	2300      	movs	r3, #0
 800406c:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc f8e4 	bl	800023c <strlen>
 8004074:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8004076:	f107 001c 	add.w	r0, r7, #28
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <Send_TCP_Message+0x64>)
 800407e:	4911      	ldr	r1, [pc, #68]	; (80040c4 <Send_TCP_Message+0x68>)
 8004080:	f01f f81e 	bl	80230c0 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <Send_TCP_Message+0x6c>)
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004098:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 800409c:	f107 010c 	add.w	r1, r7, #12
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2202      	movs	r2, #2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fee2 	bl	8003e70 <Command_Process>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 80040b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3758      	adds	r7, #88	; 0x58
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	08025c7c 	.word	0x08025c7c
 80040c4:	08025c88 	.word	0x08025c88
 80040c8:	08025c90 	.word	0x08025c90

080040cc <Send_TCP_Bytes>:

Status Send_TCP_Bytes(uint8_t* buffer, size_t size)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

	static int32_t isFirstCall = 0,commandCount=0;
	Status response = IDLE;
 80040d6:	2304      	movs	r3, #4
 80040d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char cipSendBuffer[50];

	int32_t length = sprintf(cipSendBuffer,"%s%d\r\n",AT_CIPSEND,size);
 80040dc:	f107 0014 	add.w	r0, r7, #20
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <Send_TCP_Bytes+0xdc>)
 80040e4:	4931      	ldr	r1, [pc, #196]	; (80041ac <Send_TCP_Bytes+0xe0>)
 80040e6:	f01e ffeb 	bl	80230c0 <siprintf>
 80040ea:	64b8      	str	r0, [r7, #72]	; 0x48

	char *response_buffer[2] =
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <Send_TCP_Bytes+0xe4>)
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f6:	e883 0003 	stmia.w	r3, {r0, r1}
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};


	if(!isFirstCall)
 80040fa:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <Send_TCP_Bytes+0x4a>
	{
		Send_AT_Command(cipSendBuffer, length);
 8004102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fde4 	bl	8003cd8 <Send_AT_Command>

		isFirstCall = 1;
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
	}

	response = Wait_Response(response_buffer[commandCount], TIMEOUT);
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004120:	4413      	add	r3, r2
 8004122:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004126:	f242 7110 	movw	r1, #10000	; 0x2710
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fe08 	bl	8003d40 <Wait_Response>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

if(response == FOUND)
 8004136:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11f      	bne.n	800417e <Send_TCP_Bytes+0xb2>
	{
		if(!commandCount)
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <Send_TCP_Bytes+0x94>
		{
			Send_AT_Command((char*)buffer, size);
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fdc5 	bl	8003cd8 <Send_AT_Command>
			commandCount++;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004156:	6013      	str	r3, [r2, #0]
			response = IDLE;
 8004158:	2304      	movs	r3, #4
 800415a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800415e:	e01d      	b.n	800419c <Send_TCP_Bytes+0xd0>
		}
		else
		{
			commandCount = 0;
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
			isFirstCall = 0;
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
			response = STATUS_OK;
 800416c:	2302      	movs	r3, #2
 800416e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			ringBuffer_flush(rx_buffer);
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <Send_TCP_Bytes+0xf0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fbbb 	bl	80048f2 <ringBuffer_flush>
 800417c:	e00e      	b.n	800419c <Send_TCP_Bytes+0xd0>
		}

	}
else if( response == STATUS_ERROR)
 800417e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004182:	2b03      	cmp	r3, #3
 8004184:	d10a      	bne.n	800419c <Send_TCP_Bytes+0xd0>
{
	commandCount = 0;
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
	isFirstCall = 0;
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
	ringBuffer_flush(rx_buffer);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <Send_TCP_Bytes+0xf0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fbab 	bl	80048f2 <ringBuffer_flush>
}

	return response;
 800419c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3750      	adds	r7, #80	; 0x50
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08025c7c 	.word	0x08025c7c
 80041ac:	08025c98 	.word	0x08025c98
 80041b0:	08025c90 	.word	0x08025c90
 80041b4:	20000378 	.word	0x20000378
 80041b8:	2000037c 	.word	0x2000037c
 80041bc:	20001120 	.word	0x20001120

080041c0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <Read_TCP_Message+0xc0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	492d      	ldr	r1, [pc, #180]	; (8004284 <Read_TCP_Message+0xc4>)
 80041d0:	4618      	mov	r0, r3
 80041d2:	f01f fd3f 	bl	8023c54 <strstr>
 80041d6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d042      	beq.n	800426c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e017      	b.n	800421c <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80041ec:	7efb      	ldrb	r3, [r7, #27]
 80041ee:	3305      	adds	r3, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b3a      	cmp	r3, #58	; 0x3a
 80041f8:	d014      	beq.n	8004224 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80041fa:	7efb      	ldrb	r3, [r7, #27]
 80041fc:	3305      	adds	r3, #5
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	441a      	add	r2, r3
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	f107 0120 	add.w	r1, r7, #32
 800420a:	440b      	add	r3, r1
 800420c:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 8004216:	7efb      	ldrb	r3, [r7, #27]
 8004218:	3301      	adds	r3, #1
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	7efb      	ldrb	r3, [r7, #27]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d9e4      	bls.n	80041ec <Read_TCP_Message+0x2c>
 8004222:	e000      	b.n	8004226 <Read_TCP_Message+0x66>
				break;
 8004224:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f01d ffa9 	bl	8022182 <atoi>
 8004230:	4603      	mov	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e00d      	b.n	8004256 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	3306      	adds	r3, #6
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	441a      	add	r2, r3
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	440b      	add	r3, r1
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d3ed      	bcc.n	800423a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <Read_TCP_Message+0xc0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb45 	bl	80048f2 <ringBuffer_flush>
		return STATUS_OK;
 8004268:	2302      	movs	r3, #2
 800426a:	e005      	b.n	8004278 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <Read_TCP_Message+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fb3e 	bl	80048f2 <ringBuffer_flush>
		return STATUS_ERROR;
 8004276:	2303      	movs	r3, #3
	}



}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20001120 	.word	0x20001120
 8004284:	08025ca0 	.word	0x08025ca0

08004288 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <Wait_TCP_Message+0x70>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <Wait_TCP_Message+0x74>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4798      	blx	r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <Wait_TCP_Message+0x78>)
 80042a4:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff87 	bl	80041c0 <Read_TCP_Message>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d107      	bne.n	80042c8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <Wait_TCP_Message+0x78>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80042c4:	2302      	movs	r3, #2
 80042c6:	e012      	b.n	80042ee <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <Wait_TCP_Message+0x74>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4798      	blx	r3
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <Wait_TCP_Message+0x78>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d807      	bhi.n	80042ec <Wait_TCP_Message+0x64>
	{
		time = 0;
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <Wait_TCP_Message+0x78>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80042ec:	2304      	movs	r3, #4

}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000011 	.word	0x20000011
 80042fc:	20000360 	.word	0x20000360
 8004300:	20000380 	.word	0x20000380

08004304 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b08f      	sub	sp, #60	; 0x3c
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 80a4 	bne.w	8004462 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	617b      	str	r3, [r7, #20]

		buffer[index++] = connectPacket->ConnectByte;
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	637a      	str	r2, [r7, #52]	; 0x34
 8004328:	461a      	mov	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	637a      	str	r2, [r7, #52]	; 0x34
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	7852      	ldrb	r2, [r2, #1]
 8004344:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	885b      	ldrh	r3, [r3, #2]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	b299      	uxth	r1, r3
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	637a      	str	r2, [r7, #52]	; 0x34
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	b2ca      	uxtb	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	8859      	ldrh	r1, [r3, #2]
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	637a      	str	r2, [r7, #52]	; 0x34
 8004368:	461a      	mov	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	b2ca      	uxtb	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004372:	2300      	movs	r3, #0
 8004374:	867b      	strh	r3, [r7, #50]	; 0x32
 8004376:	e013      	b.n	80043a0 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 8004378:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800437a:	2b04      	cmp	r3, #4
 800437c:	d102      	bne.n	8004384 <mqtt_encode_packet+0x80>
				return -1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e14b      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004384:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	6379      	str	r1, [r7, #52]	; 0x34
 800438c:	4619      	mov	r1, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	440b      	add	r3, r1
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	440a      	add	r2, r1
 8004396:	7912      	ldrb	r2, [r2, #4]
 8004398:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800439a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800439c:	3301      	adds	r3, #1
 800439e:	867b      	strh	r3, [r7, #50]	; 0x32
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	885b      	ldrh	r3, [r3, #2]
 80043a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3e6      	bcc.n	8004378 <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	461a      	mov	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	7a12      	ldrb	r2, [r2, #8]
 80043ba:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	637a      	str	r2, [r7, #52]	; 0x34
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	7a52      	ldrb	r2, [r2, #9]
 80043cc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	895b      	ldrh	r3, [r3, #10]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b299      	uxth	r1, r3
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	637a      	str	r2, [r7, #52]	; 0x34
 80043dc:	461a      	mov	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	8959      	ldrh	r1, [r3, #10]
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	637a      	str	r2, [r7, #52]	; 0x34
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	b2ca      	uxtb	r2, r1
 80043f8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	899b      	ldrh	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b299      	uxth	r1, r3
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	637a      	str	r2, [r7, #52]	; 0x34
 8004408:	461a      	mov	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	b2ca      	uxtb	r2, r1
 8004410:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	8999      	ldrh	r1, [r3, #12]
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	637a      	str	r2, [r7, #52]	; 0x34
 800441c:	461a      	mov	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	b2ca      	uxtb	r2, r1
 8004424:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004426:	2300      	movs	r3, #0
 8004428:	863b      	strh	r3, [r7, #48]	; 0x30
 800442a:	e013      	b.n	8004454 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 800442c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800442e:	2b32      	cmp	r3, #50	; 0x32
 8004430:	d102      	bne.n	8004438 <mqtt_encode_packet+0x134>
				return -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e0f1      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ClientID[i];
 8004438:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	6379      	str	r1, [r7, #52]	; 0x34
 8004440:	4619      	mov	r1, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	440b      	add	r3, r1
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	440a      	add	r2, r1
 800444a:	7b92      	ldrb	r2, [r2, #14]
 800444c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 800444e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004450:	3301      	adds	r3, #1
 8004452:	863b      	strh	r3, [r7, #48]	; 0x30
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	899b      	ldrh	r3, [r3, #12]
 8004458:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800445a:	429a      	cmp	r2, r3
 800445c:	d3e6      	bcc.n	800442c <mqtt_encode_packet+0x128>
		}

		return index;
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	e0dc      	b.n	800461c <mqtt_encode_packet+0x318>

	}
	else if(packetType == SUBSCRIBE_PACKET)
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d169      	bne.n	800453c <mqtt_encode_packet+0x238>
	{

		int32_t index = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c

		MQTT_Subscribe_Packet *subscribePacket = (MQTT_Subscribe_Packet*)packet;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61bb      	str	r3, [r7, #24]

		buffer[index++] = subscribePacket->subscribePacketByte;
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->remainLength;
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	7852      	ldrb	r2, [r2, #1]
 8004492:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID >> 8;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	885b      	ldrh	r3, [r3, #2]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b299      	uxth	r1, r3
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	b2ca      	uxtb	r2, r1
 80044aa:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID & 0xFF;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	8859      	ldrh	r1, [r3, #2]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	b2ca      	uxtb	r2, r1
 80044be:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength >> 8;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	889b      	ldrh	r3, [r3, #4]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b299      	uxth	r1, r3
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	b2ca      	uxtb	r2, r1
 80044d6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength & 0xFF;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	8899      	ldrh	r1, [r3, #4]
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	b2ca      	uxtb	r2, r1
 80044ea:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044f0:	e013      	b.n	800451a <mqtt_encode_packet+0x216>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80044f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044f4:	2b32      	cmp	r3, #50	; 0x32
 80044f6:	d102      	bne.n	80044fe <mqtt_encode_packet+0x1fa>
				return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	e08e      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = subscribePacket->topic[i];
 80044fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004506:	4619      	mov	r1, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	440b      	add	r3, r1
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	440a      	add	r2, r1
 8004510:	7992      	ldrb	r2, [r2, #6]
 8004512:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 8004514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004516:	3301      	adds	r3, #1
 8004518:	857b      	strh	r3, [r7, #42]	; 0x2a
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	889b      	ldrh	r3, [r3, #4]
 800451e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004520:	429a      	cmp	r2, r3
 8004522:	d3e6      	bcc.n	80044f2 <mqtt_encode_packet+0x1ee>
		}

		buffer[index++] = subscribePacket->Qos;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8004536:	701a      	strb	r2, [r3, #0]

		return index;
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	e06f      	b.n	800461c <mqtt_encode_packet+0x318>


	}
	else if(packetType == PUBLISH_PACKET)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d16a      	bne.n	8004618 <mqtt_encode_packet+0x314>
	{
		int32_t index = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24

		MQTT_Publish_Packet *publishPacket = (MQTT_Publish_Packet*)packet;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61fb      	str	r3, [r7, #28]

		buffer[index++] = publishPacket->publishPacketByte;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	627a      	str	r2, [r7, #36]	; 0x24
 8004550:	461a      	mov	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->remainLength;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	627a      	str	r2, [r7, #36]	; 0x24
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	7852      	ldrb	r2, [r2, #1]
 800456c:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength >> 8;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	885b      	ldrh	r3, [r3, #2]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b299      	uxth	r1, r3
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	627a      	str	r2, [r7, #36]	; 0x24
 800457c:	461a      	mov	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength & 0xFF;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	8859      	ldrh	r1, [r3, #2]
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	627a      	str	r2, [r7, #36]	; 0x24
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	b2ca      	uxtb	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]

		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 800459a:	2300      	movs	r3, #0
 800459c:	847b      	strh	r3, [r7, #34]	; 0x22
 800459e:	e013      	b.n	80045c8 <mqtt_encode_packet+0x2c4>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80045a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045a2:	2b32      	cmp	r3, #50	; 0x32
 80045a4:	d102      	bne.n	80045ac <mqtt_encode_packet+0x2a8>
				return -1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	e037      	b.n	800461c <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->topic[i];
 80045ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	6279      	str	r1, [r7, #36]	; 0x24
 80045b4:	4619      	mov	r1, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	440b      	add	r3, r1
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	440a      	add	r2, r1
 80045be:	7912      	ldrb	r2, [r2, #4]
 80045c0:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 80045c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045c4:	3301      	adds	r3, #1
 80045c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	885b      	ldrh	r3, [r3, #2]
 80045cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3e6      	bcc.n	80045a0 <mqtt_encode_packet+0x29c>
		}
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	843b      	strh	r3, [r7, #32]
 80045d6:	e014      	b.n	8004602 <mqtt_encode_packet+0x2fe>
		{
			if(i == MAX_LENGTH_OF_TOPIC_MESSAGE)
 80045d8:	8c3b      	ldrh	r3, [r7, #32]
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d102      	bne.n	80045e4 <mqtt_encode_packet+0x2e0>
				return -1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	e01b      	b.n	800461c <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->message[i];
 80045e4:	8c3a      	ldrh	r2, [r7, #32]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	6279      	str	r1, [r7, #36]	; 0x24
 80045ec:	4619      	mov	r1, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	440b      	add	r3, r1
 80045f2:	69f9      	ldr	r1, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80045fa:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045fc:	8c3b      	ldrh	r3, [r7, #32]
 80045fe:	3301      	adds	r3, #1
 8004600:	843b      	strh	r3, [r7, #32]
 8004602:	8c3c      	ldrh	r4, [r7, #32]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3336      	adds	r3, #54	; 0x36
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb fe17 	bl	800023c <strlen>
 800460e:	4603      	mov	r3, r0
 8004610:	429c      	cmp	r4, r3
 8004612:	d3e1      	bcc.n	80045d8 <mqtt_encode_packet+0x2d4>
		}
		return index;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	e001      	b.n	800461c <mqtt_encode_packet+0x318>
	}

	return -1;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800461c:	4618      	mov	r0, r3
 800461e:	373c      	adds	r7, #60	; 0x3c
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}

08004624 <mqtt_connect_broker>:

Status mqtt_connect_broker(const char* ip,const char* port, const char* clientID){
 8004624:	b580      	push	{r7, lr}
 8004626:	b096      	sub	sp, #88	; 0x58
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	static int isFirstCall = 0;
	static uint8_t packetBuffer[100] = {0};
	static int32_t numberOfBytes = 0;


	if(!isFirstCall){
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <mqtt_connect_broker+0x118>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d147      	bne.n	80046c8 <mqtt_connect_broker+0xa4>
		MQTT_Connect_Packet packet = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f01e fb89 	bl	8022d58 <memset>
		uint16_t lengthOfClientID = strlen(clientID);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fb fdf8 	bl	800023c <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint8_t remainLength = lengthOfClientID + 12;
 8004652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004656:	b2db      	uxtb	r3, r3
 8004658:	330c      	adds	r3, #12
 800465a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		packet.ConnectByte = 0x10;
 800465e:	2310      	movs	r3, #16
 8004660:	753b      	strb	r3, [r7, #20]
		packet.ConnectByte = 0x10;
 8004662:	2310      	movs	r3, #16
 8004664:	753b      	strb	r3, [r7, #20]
		packet.RemainLength = remainLength;
 8004666:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800466a:	757b      	strb	r3, [r7, #21]
		packet.ProtocolNameLength = 0x0004;
 800466c:	2304      	movs	r3, #4
 800466e:	82fb      	strh	r3, [r7, #22]
		strcpy(packet.ProtocolName,"MQTT");
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	3304      	adds	r3, #4
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <mqtt_connect_broker+0x11c>)
 8004678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800467c:	6018      	str	r0, [r3, #0]
 800467e:	3304      	adds	r3, #4
 8004680:	7019      	strb	r1, [r3, #0]
		packet.Level = 0x04;
 8004682:	2304      	movs	r3, #4
 8004684:	773b      	strb	r3, [r7, #28]
		packet.Flag = 0x02;
 8004686:	2302      	movs	r3, #2
 8004688:	777b      	strb	r3, [r7, #29]
		packet.KeepAlive = MQTT_KEEP_ALIVE;
 800468a:	233c      	movs	r3, #60	; 0x3c
 800468c:	83fb      	strh	r3, [r7, #30]
		packet.ClientIDLength = lengthOfClientID;
 800468e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004692:	843b      	strh	r3, [r7, #32]
		strcpy(packet.ClientID,clientID);
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	330e      	adds	r3, #14
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	f01e fd74 	bl	802318a <strcpy>

		numberOfBytes = mqtt_encode_packet(packetBuffer, &packet, CONNECT_PACKET);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	2200      	movs	r2, #0
 80046a8:	4619      	mov	r1, r3
 80046aa:	4826      	ldr	r0, [pc, #152]	; (8004744 <mqtt_connect_broker+0x120>)
 80046ac:	f7ff fe2a 	bl	8004304 <mqtt_encode_packet>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <mqtt_connect_broker+0x124>)
 80046b4:	6013      	str	r3, [r2, #0]

		if(numberOfBytes < 0)
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <mqtt_connect_broker+0x124>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da01      	bge.n	80046c2 <mqtt_connect_broker+0x9e>
			return STATUS_ERROR;
 80046be:	2303      	movs	r3, #3
 80046c0:	e038      	b.n	8004734 <mqtt_connect_broker+0x110>

		isFirstCall = 1;
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <mqtt_connect_broker+0x118>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
	}

	static int state = 0;
	Status status = IDLE;
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if(state == 0){
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <mqtt_connect_broker+0x128>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <mqtt_connect_broker+0xda>
		status = Connect_TCP_Server(ip, port);
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fc5f 	bl	8003f9c <Connect_TCP_Server>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		if(status == STATUS_OK)
 80046e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d105      	bne.n	80046f8 <mqtt_connect_broker+0xd4>
			state++;
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <mqtt_connect_broker+0x128>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <mqtt_connect_broker+0x128>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e002      	b.n	80046fe <mqtt_connect_broker+0xda>
		else
			return status;
 80046f8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80046fc:	e01a      	b.n	8004734 <mqtt_connect_broker+0x110>
	}
	if(state == 1){
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <mqtt_connect_broker+0x128>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d115      	bne.n	8004732 <mqtt_connect_broker+0x10e>
		status = Send_TCP_Bytes(packetBuffer, numberOfBytes);
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <mqtt_connect_broker+0x124>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	480d      	ldr	r0, [pc, #52]	; (8004744 <mqtt_connect_broker+0x120>)
 800470e:	f7ff fcdd 	bl	80040cc <Send_TCP_Bytes>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		if(status == STATUS_OK){
 8004718:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800471c:	2b02      	cmp	r3, #2
 800471e:	d105      	bne.n	800472c <mqtt_connect_broker+0x108>
			state = 0;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <mqtt_connect_broker+0x128>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
			return status;
 8004726:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800472a:	e003      	b.n	8004734 <mqtt_connect_broker+0x110>
		}
		else
			return status;
 800472c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004730:	e000      	b.n	8004734 <mqtt_connect_broker+0x110>
	}

	return STATUS_ERROR;
 8004732:	2303      	movs	r3, #3

}
 8004734:	4618      	mov	r0, r3
 8004736:	3758      	adds	r7, #88	; 0x58
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000384 	.word	0x20000384
 8004740:	08025ca8 	.word	0x08025ca8
 8004744:	20000388 	.word	0x20000388
 8004748:	200003ec 	.word	0x200003ec
 800474c:	200003f0 	.word	0x200003f0

08004750 <mqtt_ping_request>:

Status mqtt_ping_request(void){
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0

	Status response = IDLE;
 8004756:	2304      	movs	r3, #4
 8004758:	71fb      	strb	r3, [r7, #7]
	uint8_t pingReqPacket[2] = {0xC0, 0x00};
 800475a:	23c0      	movs	r3, #192	; 0xc0
 800475c:	80bb      	strh	r3, [r7, #4]
	uint8_t pingRespacket[2] = {0xC1, 0x00};
 800475e:	23c1      	movs	r3, #193	; 0xc1
 8004760:	803b      	strh	r3, [r7, #0]
	static int state = 0;

	if(!state){
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <mqtt_ping_request+0x74>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d111      	bne.n	800478e <mqtt_ping_request+0x3e>
		response = Send_TCP_Bytes(pingReqPacket, 2);
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	2102      	movs	r1, #2
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fcac 	bl	80040cc <Send_TCP_Bytes>
 8004774:	4603      	mov	r3, r0
 8004776:	71fb      	strb	r3, [r7, #7]

		if(response == STATUS_OK){
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d105      	bne.n	800478a <mqtt_ping_request+0x3a>
			state++;
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <mqtt_ping_request+0x74>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <mqtt_ping_request+0x74>)
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e001      	b.n	800478e <mqtt_ping_request+0x3e>
		}
		else
			return response;
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	e016      	b.n	80047bc <mqtt_ping_request+0x6c>
	}
	if(state){
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <mqtt_ping_request+0x74>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d011      	beq.n	80047ba <mqtt_ping_request+0x6a>
		response = Wait_Response((char*)pingRespacket, TIMEOUT);
 8004796:	463b      	mov	r3, r7
 8004798:	f242 7110 	movw	r1, #10000	; 0x2710
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff facf 	bl	8003d40 <Wait_Response>
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
		if(response == FOUND){
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <mqtt_ping_request+0x6a>
			state = 0;
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <mqtt_ping_request+0x74>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
			response = STATUS_OK;
 80047b2:	2302      	movs	r3, #2
 80047b4:	71fb      	strb	r3, [r7, #7]
			return response;
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	e000      	b.n	80047bc <mqtt_ping_request+0x6c>
		}

	}

	return response;
 80047ba:	79fb      	ldrb	r3, [r7, #7]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	200003f4 	.word	0x200003f4

080047c8 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 80047d0:	2010      	movs	r0, #16
 80047d2:	f01e faa3 	bl	8022d1c <malloc>
 80047d6:	4603      	mov	r3, r0
 80047d8:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e017      	b.n	8004814 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 80047f6:	2101      	movs	r1, #1
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f01d fcc7 	bl	802218c <calloc>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8004812:	68fb      	ldr	r3, [r7, #12]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4618      	mov	r0, r3
 8004838:	f01e fa78 	bl	8022d2c <free>
		}
		free(buffer);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f01e fa75 	bl	8022d2c <free>
	}
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	429a      	cmp	r2, r3
 8004862:	d00c      	beq.n	800487e <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4413      	add	r3, r2
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 800487c:	e009      	b.n	8004892 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4413      	add	r3, r2
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d00d      	beq.n	80048d0 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
		return data;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	e00a      	b.n	80048e6 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	605a      	str	r2, [r3, #4]
		return data;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68d8      	ldr	r0, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	461a      	mov	r2, r3
 8004904:	2100      	movs	r1, #0
 8004906:	f01e fa27 	bl	8022d58 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	605a      	str	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e00a      	b.n	8004946 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	4413      	add	r3, r2
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff ff85 	bl	800484a <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	6838      	ldr	r0, [r7, #0]
 8004948:	f7fb fc78 	bl	800023c <strlen>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d8ed      	bhi.n	8004930 <ringBuffer_pushArray+0x10>
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b084      	sub	sp, #16
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	6839      	ldr	r1, [r7, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f01f f970 	bl	8023c54 <strstr>
 8004974:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <ringBuffer_lookFor+0x22>
		return 1;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8004980:	2300      	movs	r3, #0

}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <_ZN14MockActualCall13withParameterERK12SimpleStringPKhj>:
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void (*value)()) { return withFunctionPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const void* value) { return withConstPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const unsigned char* value, size_t size) { return withMemoryBufferParameter(name, value, size); }
 80049a2:	b590      	push	{r4, r7, lr}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	334c      	adds	r3, #76	; 0x4c
 80049b6:	681c      	ldr	r4, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	47a0      	blx	r4
 80049c2:	4603      	mov	r3, r0
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd90      	pop	{r4, r7, pc}

080049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>:
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, const void* value) { return withConstPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void (*value)()) { return withFunctionPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, const unsigned char* value, size_t size) { return withMemoryBufferParameter(name, value, size); }
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	335c      	adds	r3, #92	; 0x5c
 80049e0:	681c      	ldr	r4, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	47a0      	blx	r4
 80049ec:	4603      	mov	r3, r0
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd90      	pop	{r4, r7, pc}

080049f6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80049fe:	2032      	movs	r0, #50	; 0x32
 8004a00:	f7ff fee2 	bl	80047c8 <ringBuffer_init>
 8004a04:	4602      	mov	r2, r0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]

	}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fefc 	bl	800481c <ringBuffer_deInit>
	}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f012 f8b6 	bl	8016ba8 <_ZN5UtestC1Ev>
 8004a3c:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	0802b1d4 	.word	0x0802b1d4

08004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f012 f8b1 	bl	8016bc8 <_ZN5UtestD1Ev>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	0802b1d4 	.word	0x0802b1d4

08004a74 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ffe7 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004a82:	2108      	movs	r1, #8
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f008 f8d3 	bl	800cc30 <_ZdlPvj>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ffbe 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004ab0:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	0802b1b4 	.word	0x0802b1b4

08004ac4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	222c      	movs	r2, #44	; 0x2c
 8004ace:	4906      	ldr	r1, [pc, #24]	; (8004ae8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004ad0:	2008      	movs	r0, #8
 8004ad2:	f008 f899 	bl	800cc08 <_ZnwjPKci>
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7ff ffdb 	bl	8004a94 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004ade:	4623      	mov	r3, r4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}
 8004ae8:	08025d30 	.word	0x08025d30

08004aec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f010 fc74 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8004afc:	4a03      	ldr	r2, [pc, #12]	; (8004b0c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	0802b108 	.word	0x0802b108

08004b10 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af04      	add	r7, sp, #16
 8004b16:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004b18:	f012 f81c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	3338      	adds	r3, #56	; 0x38
 8004b22:	681d      	ldr	r5, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	461e      	mov	r6, r3
 8004b2c:	f012 f822 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b30:	4603      	mov	r3, r0
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	232f      	movs	r3, #47	; 0x2f
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	4b2a      	ldr	r3, [pc, #168]	; (8004be4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004b3e:	4632      	mov	r2, r6
 8004b40:	2132      	movs	r1, #50	; 0x32
 8004b42:	4620      	mov	r0, r4
 8004b44:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004b46:	f012 f805 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	3320      	adds	r3, #32
 8004b50:	681d      	ldr	r5, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2de      	uxtb	r6, r3
 8004b62:	f012 f807 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b66:	4603      	mov	r3, r0
 8004b68:	9303      	str	r3, [sp, #12]
 8004b6a:	2330      	movs	r3, #48	; 0x30
 8004b6c:	9302      	str	r3, [sp, #8]
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	2300      	movs	r3, #0
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004b78:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004b80:	f011 ffe8 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004b84:	4604      	mov	r4, r0
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	681d      	ldr	r5, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461e      	mov	r6, r3
 8004b94:	f011 ffee 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	9302      	str	r3, [sp, #8]
 8004b9c:	2331      	movs	r3, #49	; 0x31
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004ba6:	4632      	mov	r2, r6
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4620      	mov	r0, r4
 8004bac:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004bae:	f011 ffd1 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	3338      	adds	r3, #56	; 0x38
 8004bb8:	681d      	ldr	r5, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	461e      	mov	r6, r3
 8004bc2:	f011 ffd7 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	9302      	str	r3, [sp, #8]
 8004bca:	2332      	movs	r3, #50	; 0x32
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	47a8      	blx	r5

}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	08025d30 	.word	0x08025d30
 8004be8:	08025d50 	.word	0x08025d50
 8004bec:	08025d78 	.word	0x08025d78
 8004bf0:	08025d90 	.word	0x08025d90
 8004bf4:	08025d98 	.word	0x08025d98
 8004bf8:	08025dc0 	.word	0x08025dc0

08004bfc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ff0a 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c18:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	0802b0e8 	.word	0x0802b0e8

08004c2c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	2236      	movs	r2, #54	; 0x36
 8004c36:	4906      	ldr	r1, [pc, #24]	; (8004c50 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004c38:	2008      	movs	r0, #8
 8004c3a:	f007 ffe5 	bl	800cc08 <_ZnwjPKci>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4620      	mov	r0, r4
 8004c42:	f7ff ffdb 	bl	8004bfc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004c46:	4623      	mov	r3, r4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	08025d30 	.word	0x08025d30

08004c54 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f010 fbc0 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8004c64:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	0802b03c 	.word	0x0802b03c

08004c78 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af04      	add	r7, sp, #16
 8004c7e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2145      	movs	r1, #69	; 0x45
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fddf 	bl	800484a <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004c8c:	f011 ff62 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004c90:	4604      	mov	r4, r0
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	3338      	adds	r3, #56	; 0x38
 8004c96:	681d      	ldr	r5, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	461e      	mov	r6, r3
 8004ca2:	f011 ff67 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	2339      	movs	r3, #57	; 0x39
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	2145      	movs	r1, #69	; 0x45
 8004cb8:	4620      	mov	r0, r4
 8004cba:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fdc1 	bl	800484a <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004cc8:	f011 ff44 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	3338      	adds	r3, #56	; 0x38
 8004cd2:	681d      	ldr	r5, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461e      	mov	r6, r3
 8004ce0:	f011 ff48 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	233c      	movs	r3, #60	; 0x3c
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	2110      	movs	r1, #16
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	47a8      	blx	r5

}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	08025d30 	.word	0x08025d30
 8004d08:	08025de8 	.word	0x08025de8
 8004d0c:	08025e18 	.word	0x08025e18

08004d10 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fe80 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004d2c:	4a03      	ldr	r2, [pc, #12]	; (8004d3c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0802b01c 	.word	0x0802b01c

08004d40 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004d4c:	2008      	movs	r0, #8
 8004d4e:	f007 ff5b 	bl	800cc08 <_ZnwjPKci>
 8004d52:	4604      	mov	r4, r0
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff ffdb 	bl	8004d10 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004d5a:	4623      	mov	r3, r4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	08025d30 	.word	0x08025d30

08004d68 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f010 fb36 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8004d78:	4a03      	ldr	r2, [pc, #12]	; (8004d88 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	0802af70 	.word	0x0802af70

08004d8c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af04      	add	r7, sp, #16
 8004d92:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	bf0c      	ite	eq
 8004dae:	2301      	moveq	r3, #1
 8004db0:	2300      	movne	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	da0b      	bge.n	8004dd4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fd3f 	bl	800484a <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e7e3      	b.n	8004d9c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	21ff      	movs	r1, #255	; 0xff
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fd35 	bl	800484a <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004de0:	f011 feb8 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004de4:	4604      	mov	r4, r0
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	3338      	adds	r3, #56	; 0x38
 8004dea:	681d      	ldr	r5, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	461e      	mov	r6, r3
 8004df6:	f011 febd 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	9302      	str	r3, [sp, #8]
 8004dfe:	2348      	movs	r3, #72	; 0x48
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004e08:	4632      	mov	r2, r6
 8004e0a:	21ff      	movs	r1, #255	; 0xff
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	47a8      	blx	r5
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e18:	08025d30 	.word	0x08025d30
 8004e1c:	08025e48 	.word	0x08025e48

08004e20 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fdf8 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e3c:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	0802af50 	.word	0x0802af50

08004e50 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	224b      	movs	r2, #75	; 0x4b
 8004e5a:	4906      	ldr	r1, [pc, #24]	; (8004e74 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004e5c:	2008      	movs	r0, #8
 8004e5e:	f007 fed3 	bl	800cc08 <_ZnwjPKci>
 8004e62:	4604      	mov	r4, r0
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff ffdb 	bl	8004e20 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	08025d30 	.word	0x08025d30

08004e78 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f010 faae 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8004e88:	4a03      	ldr	r2, [pc, #12]	; (8004e98 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	0802aea4 	.word	0x0802aea4

08004e9c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9e:	b089      	sub	sp, #36	; 0x24
 8004ea0:	af04      	add	r7, sp, #16
 8004ea2:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	21ff      	movs	r1, #255	; 0xff
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fccd 	bl	800484a <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fcf2 	bl	800489e <ringBuffer_pop>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004ebe:	f011 fe49 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	3338      	adds	r3, #56	; 0x38
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	7bfe      	ldrb	r6, [r7, #15]
 8004ecc:	f011 fe52 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	9302      	str	r3, [sp, #8]
 8004ed4:	2350      	movs	r3, #80	; 0x50
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004ede:	4632      	mov	r2, r6
 8004ee0:	21ff      	movs	r1, #255	; 0xff
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	47a8      	blx	r5

}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	08025d30 	.word	0x08025d30
 8004ef4:	08025e78 	.word	0x08025e78

08004ef8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fd8c 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004f14:	4a03      	ldr	r2, [pc, #12]	; (8004f24 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	0802ae84 	.word	0x0802ae84

08004f28 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	2254      	movs	r2, #84	; 0x54
 8004f32:	4906      	ldr	r1, [pc, #24]	; (8004f4c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004f34:	2008      	movs	r0, #8
 8004f36:	f007 fe67 	bl	800cc08 <_ZnwjPKci>
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ffdb 	bl	8004ef8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004f42:	4623      	mov	r3, r4
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}
 8004f4c:	08025d30 	.word	0x08025d30

08004f50 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f010 fa42 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8004f60:	4a03      	ldr	r2, [pc, #12]	; (8004f70 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	0802add8 	.word	0x0802add8

08004f74 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af04      	add	r7, sp, #16
 8004f7a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	21aa      	movs	r1, #170	; 0xaa
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fc5f 	bl	800484a <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	da0a      	bge.n	8004fca <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fc70 	bl	800489e <ringBuffer_pop>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e7e4      	b.n	8004f94 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fc65 	bl	800489e <ringBuffer_pop>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004fd8:	f011 fdbc 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	3338      	adds	r3, #56	; 0x38
 8004fe2:	681d      	ldr	r5, [r3, #0]
 8004fe4:	7afe      	ldrb	r6, [r7, #11]
 8004fe6:	f011 fdc5 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004fea:	4603      	mov	r3, r0
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	2361      	movs	r3, #97	; 0x61
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	21aa      	movs	r1, #170	; 0xaa
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	47a8      	blx	r5
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005008:	08025d30 	.word	0x08025d30
 800500c:	08025e98 	.word	0x08025e98

08005010 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fd00 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800502c:	4a03      	ldr	r2, [pc, #12]	; (800503c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	0802adb8 	.word	0x0802adb8

08005040 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	2264      	movs	r2, #100	; 0x64
 800504a:	4906      	ldr	r1, [pc, #24]	; (8005064 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 800504c:	2008      	movs	r0, #8
 800504e:	f007 fddb 	bl	800cc08 <_ZnwjPKci>
 8005052:	4604      	mov	r4, r0
 8005054:	4620      	mov	r0, r4
 8005056:	f7ff ffdb 	bl	8005010 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 800505a:	4623      	mov	r3, r4
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bd90      	pop	{r4, r7, pc}
 8005064:	08025d30 	.word	0x08025d30

08005068 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4618      	mov	r0, r3
 8005074:	f010 f9b6 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005078:	4a03      	ldr	r2, [pc, #12]	; (8005088 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	0802ad0c 	.word	0x0802ad0c

0800508c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af04      	add	r7, sp, #16
 8005092:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d20b      	bcs.n	80050bc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fbcb 	bl	800484a <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e7ed      	b.n	8005098 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80050bc:	f011 fd4a 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80050c0:	4604      	mov	r4, r0
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	3338      	adds	r3, #56	; 0x38
 80050c6:	681d      	ldr	r5, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	461e      	mov	r6, r3
 80050dc:	f011 fd4a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	9302      	str	r3, [sp, #8]
 80050e4:	236b      	movs	r3, #107	; 0x6b
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4b24      	ldr	r3, [pc, #144]	; (8005180 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80050ee:	4632      	mov	r2, r6
 80050f0:	2131      	movs	r1, #49	; 0x31
 80050f2:	4620      	mov	r0, r4
 80050f4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fbf9 	bl	80048f2 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8005100:	f011 fd28 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005104:	4604      	mov	r4, r0
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	3338      	adds	r3, #56	; 0x38
 800510a:	681d      	ldr	r5, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	3b01      	subs	r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	461e      	mov	r6, r3
 8005120:	f011 fd28 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005124:	4603      	mov	r3, r0
 8005126:	9302      	str	r3, [sp, #8]
 8005128:	236f      	movs	r3, #111	; 0x6f
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8005132:	4632      	mov	r2, r6
 8005134:	2100      	movs	r1, #0
 8005136:	4620      	mov	r0, r4
 8005138:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 800513a:	f011 fd0b 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800513e:	4604      	mov	r4, r0
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	3338      	adds	r3, #56	; 0x38
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461e      	mov	r6, r3
 800515a:	f011 fd0b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800515e:	4603      	mov	r3, r0
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	2370      	movs	r3, #112	; 0x70
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 800516c:	4632      	mov	r2, r6
 800516e:	2100      	movs	r1, #0
 8005170:	4620      	mov	r0, r4
 8005172:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517c:	08025d30 	.word	0x08025d30
 8005180:	08025eb8 	.word	0x08025eb8
 8005184:	08025ef4 	.word	0x08025ef4
 8005188:	08025f30 	.word	0x08025f30

0800518c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fc42 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80051a8:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	0802acec 	.word	0x0802acec

080051bc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	2279      	movs	r2, #121	; 0x79
 80051c6:	4906      	ldr	r1, [pc, #24]	; (80051e0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 80051c8:	2008      	movs	r0, #8
 80051ca:	f007 fd1d 	bl	800cc08 <_ZnwjPKci>
 80051ce:	4604      	mov	r4, r0
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff ffdb 	bl	800518c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80051d6:	4623      	mov	r3, r4
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}
 80051e0:	08025d30 	.word	0x08025d30

080051e4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f010 f8f8 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80051f4:	4a03      	ldr	r2, [pc, #12]	; (8005204 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	0802ac40 	.word	0x0802ac40

08005208 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8005208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800520a:	b087      	sub	sp, #28
 800520c:	af04      	add	r7, sp, #16
 800520e:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	490e      	ldr	r1, [pc, #56]	; (8005250 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fb82 	bl	8004920 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 800521c:	f011 fc9a 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005220:	4604      	mov	r4, r0
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	3324      	adds	r3, #36	; 0x24
 8005226:	681d      	ldr	r5, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68de      	ldr	r6, [r3, #12]
 800522e:	f011 fca1 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005232:	4603      	mov	r3, r0
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	237d      	movs	r3, #125	; 0x7d
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	4632      	mov	r2, r6
 8005242:	4903      	ldr	r1, [pc, #12]	; (8005250 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8005244:	4620      	mov	r0, r4
 8005246:	47a8      	blx	r5
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005250:	08025f68 	.word	0x08025f68
 8005254:	08025d30 	.word	0x08025d30

08005258 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fbdc 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005274:	4a03      	ldr	r2, [pc, #12]	; (8005284 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0802ac20 	.word	0x0802ac20

08005288 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	4906      	ldr	r1, [pc, #24]	; (80052ac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8005294:	2008      	movs	r0, #8
 8005296:	f007 fcb7 	bl	800cc08 <_ZnwjPKci>
 800529a:	4604      	mov	r4, r0
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff ffdb 	bl	8005258 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 80052a2:	4623      	mov	r3, r4
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd90      	pop	{r4, r7, pc}
 80052ac:	08025d30 	.word	0x08025d30

080052b0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f010 f892 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80052c0:	4a03      	ldr	r2, [pc, #12]	; (80052d0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	0802ab74 	.word	0x0802ab74

080052d4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80052d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d8:	b08a      	sub	sp, #40	; 0x28
 80052da:	af04      	add	r7, sp, #16
 80052dc:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	494e      	ldr	r1, [pc, #312]	; (800541c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fb1b 	bl	8004920 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80052ea:	f011 fc33 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80052ee:	4604      	mov	r4, r0
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	681d      	ldr	r5, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68de      	ldr	r6, [r3, #12]
 80052fc:	f011 fc3a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005300:	4603      	mov	r3, r0
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	2384      	movs	r3, #132	; 0x84
 8005306:	9301      	str	r3, [sp, #4]
 8005308:	4b45      	ldr	r3, [pc, #276]	; (8005420 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	4632      	mov	r2, r6
 8005310:	4942      	ldr	r1, [pc, #264]	; (800541c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8005312:	4620      	mov	r0, r4
 8005314:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4942      	ldr	r1, [pc, #264]	; (8005424 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fb1e 	bl	800495e <ringBuffer_lookFor>
 8005322:	4603      	mov	r3, r0
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d05c      	beq.n	80053ec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	493b      	ldr	r1, [pc, #236]	; (8005424 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fb10 	bl	800495e <ringBuffer_lookFor>
 800533e:	4604      	mov	r4, r0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4937      	ldr	r1, [pc, #220]	; (8005424 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fb09 	bl	800495e <ringBuffer_lookFor>
 800534c:	4603      	mov	r3, r0
 800534e:	429c      	cmp	r4, r3
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 800535c:	f011 fbfa 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005360:	6803      	ldr	r3, [r0, #0]
 8005362:	3370      	adds	r3, #112	; 0x70
 8005364:	681c      	ldr	r4, [r3, #0]
 8005366:	2385      	movs	r3, #133	; 0x85
 8005368:	4a2d      	ldr	r2, [pc, #180]	; (8005420 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800536a:	492f      	ldr	r1, [pc, #188]	; (8005428 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 800536c:	47a0      	blx	r4
 800536e:	f011 fbf1 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005372:	4604      	mov	r4, r0
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	3358      	adds	r3, #88	; 0x58
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	f107 0308 	add.w	r3, r7, #8
 800537e:	2101      	movs	r1, #1
 8005380:	4618      	mov	r0, r3
 8005382:	f00a fe83 	bl	801008c <_Z10StringFromi>
 8005386:	f107 0308 	add.w	r3, r7, #8
 800538a:	4618      	mov	r0, r3
 800538c:	f00a fb8a 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8005390:	4606      	mov	r6, r0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4923      	ldr	r1, [pc, #140]	; (8005424 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fae0 	bl	800495e <ringBuffer_lookFor>
 800539e:	4602      	mov	r2, r0
 80053a0:	f107 0310 	add.w	r3, r7, #16
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f00b f8ea 	bl	8010580 <_Z10StringFromm>
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	4618      	mov	r0, r3
 80053b2:	f00a fb77 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80053b6:	4680      	mov	r8, r0
 80053b8:	f011 fbdc 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053bc:	4603      	mov	r3, r0
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	2385      	movs	r3, #133	; 0x85
 80053c2:	9302      	str	r3, [sp, #8]
 80053c4:	4b16      	ldr	r3, [pc, #88]	; (8005420 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	2300      	movs	r3, #0
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	4643      	mov	r3, r8
 80053ce:	4632      	mov	r2, r6
 80053d0:	2101      	movs	r1, #1
 80053d2:	4620      	mov	r0, r4
 80053d4:	47a8      	blx	r5
 80053d6:	f107 0310 	add.w	r3, r7, #16
 80053da:	4618      	mov	r0, r3
 80053dc:	f00a fb8f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80053e0:	f107 0308 	add.w	r3, r7, #8
 80053e4:	4618      	mov	r0, r3
 80053e6:	f00a fb8a 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80053ea:	e012      	b.n	8005412 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80053ec:	f011 fbb2 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80053f0:	4604      	mov	r4, r0
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	3338      	adds	r3, #56	; 0x38
 80053f6:	681d      	ldr	r5, [r3, #0]
 80053f8:	f011 fbbc 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053fc:	4603      	mov	r3, r0
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	2385      	movs	r3, #133	; 0x85
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	4620      	mov	r0, r4
 8005410:	47a8      	blx	r5
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800541c:	08025f70 	.word	0x08025f70
 8005420:	08025d30 	.word	0x08025d30
 8005424:	08025f7c 	.word	0x08025f7c
 8005428:	08025f84 	.word	0x08025f84

0800542c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff faf2 	bl	8004a2c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005448:	4a03      	ldr	r2, [pc, #12]	; (8005458 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	0802ab54 	.word	0x0802ab54

0800545c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	2288      	movs	r2, #136	; 0x88
 8005466:	4906      	ldr	r1, [pc, #24]	; (8005480 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8005468:	2008      	movs	r0, #8
 800546a:	f007 fbcd 	bl	800cc08 <_ZnwjPKci>
 800546e:	4604      	mov	r4, r0
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff ffdb 	bl	800542c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8005476:	4623      	mov	r3, r4
 8005478:	4618      	mov	r0, r3
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}
 8005480:	08025d30 	.word	0x08025d30

08005484 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f00f ffa8 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	0802aaa8 	.word	0x0802aaa8

080054a8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 80054a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af04      	add	r7, sp, #16
 80054ae:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 80054b0:	f011 fb50 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80054b4:	4604      	mov	r4, r0
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	3338      	adds	r3, #56	; 0x38
 80054ba:	681d      	ldr	r5, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fa62 	bl	800498a <ringBuffer_capacity>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461e      	mov	r6, r3
 80054ca:	f011 fb53 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054ce:	4603      	mov	r3, r0
 80054d0:	9302      	str	r3, [sp, #8]
 80054d2:	238b      	movs	r3, #139	; 0x8b
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4b05      	ldr	r3, [pc, #20]	; (80054f0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80054dc:	4632      	mov	r2, r6
 80054de:	2132      	movs	r1, #50	; 0x32
 80054e0:	4620      	mov	r0, r4
 80054e2:	47a8      	blx	r5

}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ec:	08025d30 	.word	0x08025d30
 80054f0:	08026028 	.word	0x08026028

080054f4 <_Z18UART_Transmit_FakePhj>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data, size_t size)
{
 80054f4:	b5b0      	push	{r4, r5, r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]

	mock().actualCall("UART_Transmit_Fake").withParameter("data", data, size).withIntParameter("size", size);
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4927      	ldr	r1, [pc, #156]	; (80055a0 <_Z18UART_Transmit_FakePhj+0xac>)
 8005504:	4618      	mov	r0, r3
 8005506:	f009 ff42 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f008 f815 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005516:	4604      	mov	r4, r0
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	3318      	adds	r3, #24
 800551c:	681d      	ldr	r5, [r3, #0]
 800551e:	f107 0310 	add.w	r3, r7, #16
 8005522:	4920      	ldr	r1, [pc, #128]	; (80055a4 <_Z18UART_Transmit_FakePhj+0xb0>)
 8005524:	4618      	mov	r0, r3
 8005526:	f009 ff32 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800552a:	f107 0310 	add.w	r3, r7, #16
 800552e:	4619      	mov	r1, r3
 8005530:	4620      	mov	r0, r4
 8005532:	47a8      	blx	r5
 8005534:	4604      	mov	r4, r0
 8005536:	f107 0318 	add.w	r3, r7, #24
 800553a:	491b      	ldr	r1, [pc, #108]	; (80055a8 <_Z18UART_Transmit_FakePhj+0xb4>)
 800553c:	4618      	mov	r0, r3
 800553e:	f009 ff26 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005542:	f107 0118 	add.w	r1, r7, #24
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4620      	mov	r0, r4
 800554c:	f7ff fa29 	bl	80049a2 <_ZN14MockActualCall13withParameterERK12SimpleStringPKhj>
 8005550:	4604      	mov	r4, r0
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	3320      	adds	r3, #32
 8005556:	681d      	ldr	r5, [r3, #0]
 8005558:	f107 0320 	add.w	r3, r7, #32
 800555c:	4913      	ldr	r1, [pc, #76]	; (80055ac <_Z18UART_Transmit_FakePhj+0xb8>)
 800555e:	4618      	mov	r0, r3
 8005560:	f009 ff15 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	f107 0320 	add.w	r3, r7, #32
 800556a:	4619      	mov	r1, r3
 800556c:	4620      	mov	r0, r4
 800556e:	47a8      	blx	r5
 8005570:	f107 0320 	add.w	r3, r7, #32
 8005574:	4618      	mov	r0, r3
 8005576:	f00a fac2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800557a:	f107 0318 	add.w	r3, r7, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f00a fabd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005584:	f107 0310 	add.w	r3, r7, #16
 8005588:	4618      	mov	r0, r3
 800558a:	f00a fab8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f00a fab3 	bl	800fafe <_ZN12SimpleStringD1Ev>

}
 8005598:	bf00      	nop
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bdb0      	pop	{r4, r5, r7, pc}
 80055a0:	08026060 	.word	0x08026060
 80055a4:	08026064 	.word	0x08026064
 80055a8:	08026078 	.word	0x08026078
 80055ac:	08026080 	.word	0x08026080

080055b0 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 80055b0:	b5b0      	push	{r4, r5, r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 80055b6:	463b      	mov	r3, r7
 80055b8:	4916      	ldr	r1, [pc, #88]	; (8005614 <_Z17UART_Receive_Fakev+0x64>)
 80055ba:	4618      	mov	r0, r3
 80055bc:	f009 fee7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80055c0:	463b      	mov	r3, r7
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f007 ffbb 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055ca:	4604      	mov	r4, r0
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	3318      	adds	r3, #24
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4910      	ldr	r1, [pc, #64]	; (8005618 <_Z17UART_Receive_Fakev+0x68>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f009 fed8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4619      	mov	r1, r3
 80055e4:	4620      	mov	r0, r4
 80055e6:	47a8      	blx	r5
 80055e8:	4603      	mov	r3, r0
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	3264      	adds	r2, #100	; 0x64
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	4790      	blx	r2
 80055f4:	4603      	mov	r3, r0
 80055f6:	b2dc      	uxtb	r4, r3
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	4618      	mov	r0, r3
 80055fe:	f00a fa7e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005602:	463b      	mov	r3, r7
 8005604:	4618      	mov	r0, r3
 8005606:	f00a fa7a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800560a:	4623      	mov	r3, r4
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bdb0      	pop	{r4, r5, r7, pc}
 8005614:	08026060 	.word	0x08026060
 8005618:	08026088 	.word	0x08026088

0800561c <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <_Z12getTick_Fakev+0x30>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d103      	bne.n	8005632 <_Z12getTick_Fakev+0x16>
		time = 0;
 800562a:	4b08      	ldr	r3, [pc, #32]	; (800564c <_Z12getTick_Fakev+0x30>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e004      	b.n	800563c <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8005632:	4b06      	ldr	r3, [pc, #24]	; (800564c <_Z12getTick_Fakev+0x30>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <_Z12getTick_Fakev+0x30>)
 800563a:	6013      	str	r3, [r2, #0]
	return time;
 800563c:	4b03      	ldr	r3, [pc, #12]	; (800564c <_Z12getTick_Fakev+0x30>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000518 	.word	0x20000518

08005650 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005658:	2364      	movs	r3, #100	; 0x64
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 800565c:	4904      	ldr	r1, [pc, #16]	; (8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800565e:	4805      	ldr	r0, [pc, #20]	; (8005674 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005660:	f7fe fb08 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0800561d 	.word	0x0800561d
 8005670:	080055b1 	.word	0x080055b1
 8005674:	080054f5 	.word	0x080054f5

08005678 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005680:	f107 0308 	add.w	r3, r7, #8
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005686:	4618      	mov	r0, r3
 8005688:	f009 fe81 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f007 ff54 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005698:	4603      	mov	r3, r0
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	3294      	adds	r2, #148	; 0x94
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	4790      	blx	r2
 80056a4:	f107 0308 	add.w	r3, r7, #8
 80056a8:	4618      	mov	r0, r3
 80056aa:	f00a fa28 	bl	800fafe <_ZN12SimpleStringD1Ev>
		mock().clear();
 80056ae:	f107 0310 	add.w	r3, r7, #16
 80056b2:	490c      	ldr	r1, [pc, #48]	; (80056e4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 80056b4:	4618      	mov	r0, r3
 80056b6:	f009 fe6a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80056ba:	f107 0310 	add.w	r3, r7, #16
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f007 ff3d 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80056c6:	4603      	mov	r3, r0
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	329c      	adds	r2, #156	; 0x9c
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	4790      	blx	r2
 80056d2:	f107 0310 	add.w	r3, r7, #16
 80056d6:	4618      	mov	r0, r3
 80056d8:	f00a fa11 	bl	800fafe <_ZN12SimpleStringD1Ev>
	}
 80056dc:	bf00      	nop
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	08026060 	.word	0x08026060

080056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f011 fa58 	bl	8016ba8 <_ZN5UtestC1Ev>
 80056f8:	4a03      	ldr	r2, [pc, #12]	; (8005708 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	0802aa88 	.word	0x0802aa88

0800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	4a05      	ldr	r2, [pc, #20]	; (800572c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4618      	mov	r0, r3
 800571e:	f011 fa53 	bl	8016bc8 <_ZN5UtestD1Ev>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	0802aa88 	.word	0x0802aa88

08005730 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ffe7 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800573e:	2104      	movs	r1, #4
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f007 fa75 	bl	800cc30 <_ZdlPvj>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ffc4 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005760:	4a03      	ldr	r2, [pc, #12]	; (8005770 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	0802aa68 	.word	0x0802aa68

08005774 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	22c3      	movs	r2, #195	; 0xc3
 800577e:	4906      	ldr	r1, [pc, #24]	; (8005798 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005780:	2004      	movs	r0, #4
 8005782:	f007 fa41 	bl	800cc08 <_ZnwjPKci>
 8005786:	4604      	mov	r4, r0
 8005788:	4620      	mov	r0, r4
 800578a:	f7ff ffe1 	bl	8005750 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800578e:	4623      	mov	r3, r4
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}
 8005798:	08025d30 	.word	0x08025d30

0800579c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f00f fe1c 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80057ac:	4a03      	ldr	r2, [pc, #12]	; (80057bc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	0802a9bc 	.word	0x0802a9bc

080057c0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 80057c0:	b5b0      	push	{r4, r5, r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af04      	add	r7, sp, #16
 80057c6:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 80057c8:	4b10      	ldr	r3, [pc, #64]	; (800580c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80057ca:	4a11      	ldr	r2, [pc, #68]	; (8005810 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80057cc:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	2364      	movs	r3, #100	; 0x64
 80057d4:	4a0f      	ldr	r2, [pc, #60]	; (8005814 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80057d6:	4910      	ldr	r1, [pc, #64]	; (8005818 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80057d8:	f7fe fa4c 	bl	8003c74 <ESP_Init>
 80057dc:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80057de:	f011 f9b9 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80057e2:	4604      	mov	r4, r0
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	3338      	adds	r3, #56	; 0x38
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	f011 f9c3 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057ee:	4603      	mov	r3, r0
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	23d1      	movs	r3, #209	; 0xd1
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	2101      	movs	r1, #1
 8005800:	4620      	mov	r0, r4
 8005802:	47a8      	blx	r5

}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bdb0      	pop	{r4, r5, r7, pc}
 800580c:	2000051c 	.word	0x2000051c
 8005810:	080054f5 	.word	0x080054f5
 8005814:	0800561d 	.word	0x0800561d
 8005818:	080055b1 	.word	0x080055b1
 800581c:	08025d30 	.word	0x08025d30
 8005820:	0802609c 	.word	0x0802609c

08005824 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff5a 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005834:	4a03      	ldr	r2, [pc, #12]	; (8005844 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	0802a99c 	.word	0x0802a99c

08005848 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	22d5      	movs	r2, #213	; 0xd5
 8005852:	4906      	ldr	r1, [pc, #24]	; (800586c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005854:	2004      	movs	r0, #4
 8005856:	f007 f9d7 	bl	800cc08 <_ZnwjPKci>
 800585a:	4604      	mov	r4, r0
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff ffe1 	bl	8005824 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8005862:	4623      	mov	r3, r4
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bd90      	pop	{r4, r7, pc}
 800586c:	08025d30 	.word	0x08025d30

08005870 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4618      	mov	r0, r3
 800587c:	f00f fdb2 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005880:	4a03      	ldr	r2, [pc, #12]	; (8005890 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	0802a8f0 	.word	0x0802a8f0

08005894 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b092      	sub	sp, #72	; 0x48
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"Test",strlen("Test")).withIntParameter("size", strlen("Test"));  // UART_Transmit_Fake function waits "Test" string.
 800589c:	f107 0308 	add.w	r3, r7, #8
 80058a0:	4951      	ldr	r1, [pc, #324]	; (80059e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x154>)
 80058a2:	4618      	mov	r0, r3
 80058a4:	f009 fd73 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80058a8:	f107 0308 	add.w	r3, r7, #8
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f007 fe46 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058b4:	4604      	mov	r4, r0
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	681d      	ldr	r5, [r3, #0]
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	494a      	ldr	r1, [pc, #296]	; (80059ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x158>)
 80058c2:	4618      	mov	r0, r3
 80058c4:	f009 fd63 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80058c8:	f107 0310 	add.w	r3, r7, #16
 80058cc:	4619      	mov	r1, r3
 80058ce:	4620      	mov	r0, r4
 80058d0:	47a8      	blx	r5
 80058d2:	4604      	mov	r4, r0
 80058d4:	f107 0318 	add.w	r3, r7, #24
 80058d8:	4945      	ldr	r1, [pc, #276]	; (80059f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 80058da:	4618      	mov	r0, r3
 80058dc:	f009 fd57 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80058e0:	f107 0118 	add.w	r1, r7, #24
 80058e4:	2304      	movs	r3, #4
 80058e6:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff f86f 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80058ee:	4604      	mov	r4, r0
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	332c      	adds	r3, #44	; 0x2c
 80058f4:	681d      	ldr	r5, [r3, #0]
 80058f6:	f107 0320 	add.w	r3, r7, #32
 80058fa:	493f      	ldr	r1, [pc, #252]	; (80059f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 80058fc:	4618      	mov	r0, r3
 80058fe:	f009 fd46 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005902:	f107 0320 	add.w	r3, r7, #32
 8005906:	2204      	movs	r2, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4620      	mov	r0, r4
 800590c:	47a8      	blx	r5
 800590e:	f107 0320 	add.w	r3, r7, #32
 8005912:	4618      	mov	r0, r3
 8005914:	f00a f8f3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005918:	f107 0318 	add.w	r3, r7, #24
 800591c:	4618      	mov	r0, r3
 800591e:	f00a f8ee 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005922:	f107 0310 	add.w	r3, r7, #16
 8005926:	4618      	mov	r0, r3
 8005928:	f00a f8e9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800592c:	f107 0308 	add.w	r3, r7, #8
 8005930:	4618      	mov	r0, r3
 8005932:	f00a f8e4 	bl	800fafe <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT\r\n",strlen("AT\r\n")).withIntParameter("size", strlen("AT\r\n"));
 8005936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593a:	492b      	ldr	r1, [pc, #172]	; (80059e8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x154>)
 800593c:	4618      	mov	r0, r3
 800593e:	f009 fd26 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005946:	2100      	movs	r1, #0
 8005948:	4618      	mov	r0, r3
 800594a:	f007 fdf9 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800594e:	4604      	mov	r4, r0
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	681d      	ldr	r5, [r3, #0]
 8005956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800595a:	4924      	ldr	r1, [pc, #144]	; (80059ec <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x158>)
 800595c:	4618      	mov	r0, r3
 800595e:	f009 fd16 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005966:	4619      	mov	r1, r3
 8005968:	4620      	mov	r0, r4
 800596a:	47a8      	blx	r5
 800596c:	4604      	mov	r4, r0
 800596e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005972:	491f      	ldr	r1, [pc, #124]	; (80059f0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 8005974:	4618      	mov	r0, r3
 8005976:	f009 fd0a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800597a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800597e:	2304      	movs	r3, #4
 8005980:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 8005982:	4620      	mov	r0, r4
 8005984:	f7ff f822 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8005988:	4604      	mov	r4, r0
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	332c      	adds	r3, #44	; 0x2c
 800598e:	681d      	ldr	r5, [r3, #0]
 8005990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005994:	4918      	ldr	r1, [pc, #96]	; (80059f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 8005996:	4618      	mov	r0, r3
 8005998:	f009 fcf9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800599c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059a0:	2204      	movs	r2, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4620      	mov	r0, r4
 80059a6:	47a8      	blx	r5
 80059a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059ac:	4618      	mov	r0, r3
 80059ae:	f00a f8a6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80059b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059b6:	4618      	mov	r0, r3
 80059b8:	f00a f8a1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80059bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059c0:	4618      	mov	r0, r3
 80059c2:	f00a f89c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80059c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059ca:	4618      	mov	r0, r3
 80059cc:	f00a f897 	bl	800fafe <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test",strlen("Test"));
 80059d0:	2104      	movs	r1, #4
 80059d2:	4808      	ldr	r0, [pc, #32]	; (80059f4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 80059d4:	f7fe f980 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n",strlen("AT\r\n"));
 80059d8:	2104      	movs	r1, #4
 80059da:	4808      	ldr	r0, [pc, #32]	; (80059fc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 80059dc:	f7fe f97c 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 80059e0:	bf00      	nop
 80059e2:	3748      	adds	r7, #72	; 0x48
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bdb0      	pop	{r4, r5, r7, pc}
 80059e8:	08026060 	.word	0x08026060
 80059ec:	08026064 	.word	0x08026064
 80059f0:	08026078 	.word	0x08026078
 80059f4:	08025f68 	.word	0x08025f68
 80059f8:	08026080 	.word	0x08026080
 80059fc:	080260bc 	.word	0x080260bc

08005a00 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fe6c 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005a10:	4a03      	ldr	r2, [pc, #12]	; (8005a20 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	0802a8d0 	.word	0x0802a8d0

08005a24 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	22e1      	movs	r2, #225	; 0xe1
 8005a2e:	4906      	ldr	r1, [pc, #24]	; (8005a48 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005a30:	2004      	movs	r0, #4
 8005a32:	f007 f8e9 	bl	800cc08 <_ZnwjPKci>
 8005a36:	4604      	mov	r4, r0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff ffe1 	bl	8005a00 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8005a3e:	4623      	mov	r3, r4
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd90      	pop	{r4, r7, pc}
 8005a48:	08025d30 	.word	0x08025d30

08005a4c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f00f fcc4 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005a5c:	4a03      	ldr	r2, [pc, #12]	; (8005a6c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	0802a824 	.word	0x0802a824

08005a70 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8005a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a72:	b08f      	sub	sp, #60	; 0x3c
 8005a74:	af04      	add	r7, sp, #16
 8005a76:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8005a78:	4a31      	ldr	r2, [pc, #196]	; (8005b40 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a82:	6018      	str	r0, [r3, #0]
 8005a84:	3304      	adds	r3, #4
 8005a86:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fa fbd3 	bl	800023c <strlen>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	da35      	bge.n	8005b0c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005aa0:	f107 0314 	add.w	r3, r7, #20
 8005aa4:	4927      	ldr	r1, [pc, #156]	; (8005b44 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f009 fc71 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f007 fd44 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005ab8:	4604      	mov	r4, r0
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	681d      	ldr	r5, [r3, #0]
 8005ac0:	f107 031c 	add.w	r3, r7, #28
 8005ac4:	4920      	ldr	r1, [pc, #128]	; (8005b48 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f009 fc61 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005acc:	f107 031c 	add.w	r3, r7, #28
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	47a8      	blx	r5
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	3264      	adds	r2, #100	; 0x64
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	f107 000c 	add.w	r0, r7, #12
 8005ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ae4:	4401      	add	r1, r0
 8005ae6:	7809      	ldrb	r1, [r1, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	4790      	blx	r2
 8005aec:	f107 031c 	add.w	r3, r7, #28
 8005af0:	4618      	mov	r0, r3
 8005af2:	f00a f804 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005af6:	f107 0314 	add.w	r3, r7, #20
 8005afa:	4618      	mov	r0, r3
 8005afc:	f009 ffff 	bl	800fafe <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005b00:	f7fe f8fa 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	e7bf      	b.n	8005a8c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005b0c:	f011 f822 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005b10:	4604      	mov	r4, r0
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	3324      	adds	r3, #36	; 0x24
 8005b16:	681d      	ldr	r5, [r3, #0]
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68de      	ldr	r6, [r3, #12]
 8005b1e:	f011 f829 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005b22:	4603      	mov	r3, r0
 8005b24:	9302      	str	r3, [sp, #8]
 8005b26:	23ec      	movs	r3, #236	; 0xec
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4632      	mov	r2, r6
 8005b32:	4903      	ldr	r1, [pc, #12]	; (8005b40 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005b34:	4620      	mov	r0, r4
 8005b36:	47a8      	blx	r5

}
 8005b38:	bf00      	nop
 8005b3a:	372c      	adds	r7, #44	; 0x2c
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b40:	080260c4 	.word	0x080260c4
 8005b44:	08026060 	.word	0x08026060
 8005b48:	08026088 	.word	0x08026088
 8005b4c:	20001120 	.word	0x20001120
 8005b50:	08025d30 	.word	0x08025d30

08005b54 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fdc2 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005b64:	4a03      	ldr	r2, [pc, #12]	; (8005b74 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	0802a804 	.word	0x0802a804

08005b78 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	22f0      	movs	r2, #240	; 0xf0
 8005b82:	4906      	ldr	r1, [pc, #24]	; (8005b9c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005b84:	2004      	movs	r0, #4
 8005b86:	f007 f83f 	bl	800cc08 <_ZnwjPKci>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff ffe1 	bl	8005b54 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005b92:	4623      	mov	r3, r4
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}
 8005b9c:	08025d30 	.word	0x08025d30

08005ba0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f00f fc1a 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005bb0:	4a03      	ldr	r2, [pc, #12]	; (8005bc0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	0802a758 	.word	0x0802a758

08005bc4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b08f      	sub	sp, #60	; 0x3c
 8005bc8:	af04      	add	r7, sp, #16
 8005bca:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005bcc:	4a32      	ldr	r2, [pc, #200]	; (8005c98 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bd6:	6018      	str	r0, [r3, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fa fb29 	bl	800023c <strlen>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	da35      	bge.n	8005c60 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005bf4:	f107 0310 	add.w	r3, r7, #16
 8005bf8:	4928      	ldr	r1, [pc, #160]	; (8005c9c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f009 fbc7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	2100      	movs	r1, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f007 fc9a 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	681d      	ldr	r5, [r3, #0]
 8005c14:	f107 0318 	add.w	r3, r7, #24
 8005c18:	4921      	ldr	r1, [pc, #132]	; (8005ca0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f009 fbb7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005c20:	f107 0318 	add.w	r3, r7, #24
 8005c24:	4619      	mov	r1, r3
 8005c26:	4620      	mov	r0, r4
 8005c28:	47a8      	blx	r5
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	3264      	adds	r2, #100	; 0x64
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	f107 0008 	add.w	r0, r7, #8
 8005c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c38:	4401      	add	r1, r0
 8005c3a:	7809      	ldrb	r1, [r1, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4790      	blx	r2
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f009 ff5a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005c4a:	f107 0310 	add.w	r3, r7, #16
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f009 ff55 	bl	800fafe <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005c54:	f7fe f850 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	e7bf      	b.n	8005be0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005c60:	4810      	ldr	r0, [pc, #64]	; (8005ca4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8005c62:	f7fe f85b 	bl	8003d1c <Read_Response>
 8005c66:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8005c68:	f010 ff74 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	3338      	adds	r3, #56	; 0x38
 8005c72:	681d      	ldr	r5, [r3, #0]
 8005c74:	6a3e      	ldr	r6, [r7, #32]
 8005c76:	f010 ff7d 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	9302      	str	r3, [sp, #8]
 8005c7e:	23fc      	movs	r3, #252	; 0xfc
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4b09      	ldr	r3, [pc, #36]	; (8005cac <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005c88:	4632      	mov	r2, r6
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	47a8      	blx	r5

}
 8005c90:	bf00      	nop
 8005c92:	372c      	adds	r7, #44	; 0x2c
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c98:	080260c4 	.word	0x080260c4
 8005c9c:	08026060 	.word	0x08026060
 8005ca0:	08026088 	.word	0x08026088
 8005ca4:	08025cb0 	.word	0x08025cb0
 8005ca8:	08025d30 	.word	0x08025d30
 8005cac:	0802609c 	.word	0x0802609c

08005cb0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fd14 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005cc0:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	0802a738 	.word	0x0802a738

08005cd4 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	f240 1201 	movw	r2, #257	; 0x101
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x28>)
 8005ce2:	2004      	movs	r0, #4
 8005ce4:	f006 ff90 	bl	800cc08 <_ZnwjPKci>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff ffe0 	bl	8005cb0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08025d30 	.word	0x08025d30

08005d00 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00f fb6a 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005d10:	4a03      	ldr	r2, [pc, #12]	; (8005d20 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	0802a68c 	.word	0x0802a68c

08005d24 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	b089      	sub	sp, #36	; 0x24
 8005d28:	af04      	add	r7, sp, #16
 8005d2a:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005d36:	f7fe f803 	bl	8003d40 <Wait_Response>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d100      	bne.n	8005d46 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005d44:	e7f4      	b.n	8005d30 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005d46:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005d48:	f010 ff04 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	3338      	adds	r3, #56	; 0x38
 8005d52:	681d      	ldr	r5, [r3, #0]
 8005d54:	7bfe      	ldrb	r6, [r7, #15]
 8005d56:	f010 ff0d 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	9302      	str	r3, [sp, #8]
 8005d5e:	f240 130d 	movw	r3, #269	; 0x10d
 8005d62:	9301      	str	r3, [sp, #4]
 8005d64:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	47a8      	blx	r5

}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08025cb0 	.word	0x08025cb0
 8005d80:	08025d30 	.word	0x08025d30
 8005d84:	080260cc 	.word	0x080260cc

08005d88 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fca8 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d98:	4a03      	ldr	r2, [pc, #12]	; (8005da8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	0802a66c 	.word	0x0802a66c

08005dac <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	f240 1211 	movw	r2, #273	; 0x111
 8005db8:	4906      	ldr	r1, [pc, #24]	; (8005dd4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005dba:	2004      	movs	r0, #4
 8005dbc:	f006 ff24 	bl	800cc08 <_ZnwjPKci>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f7ff ffe0 	bl	8005d88 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005dc8:	4623      	mov	r3, r4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	08025d30 	.word	0x08025d30

08005dd8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f00f fafe 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005de8:	4a03      	ldr	r2, [pc, #12]	; (8005df8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	0802a5c0 	.word	0x0802a5c0

08005dfc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfe:	b08f      	sub	sp, #60	; 0x3c
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e14:	6018      	str	r0, [r3, #0]
 8005e16:	3304      	adds	r3, #4
 8005e18:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e1e:	4834      	ldr	r0, [pc, #208]	; (8005ef0 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005e20:	f7fd ff8e 	bl	8003d40 <Wait_Response>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 8005e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d141      	bne.n	8005eb6 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa f9fe 	bl	800023c <strlen>
 8005e40:	4603      	mov	r3, r0
 8005e42:	461a      	mov	r2, r3
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	4293      	cmp	r3, r2
 8005e48:	dae7      	bge.n	8005e1a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005e4a:	f107 0310 	add.w	r3, r7, #16
 8005e4e:	4929      	ldr	r1, [pc, #164]	; (8005ef4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005e50:	4618      	mov	r0, r3
 8005e52:	f009 fa9c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f007 fb6f 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e62:	4604      	mov	r4, r0
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	f107 0318 	add.w	r3, r7, #24
 8005e6e:	4922      	ldr	r1, [pc, #136]	; (8005ef8 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005e70:	4618      	mov	r0, r3
 8005e72:	f009 fa8c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005e76:	f107 0318 	add.w	r3, r7, #24
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	47a8      	blx	r5
 8005e80:	4603      	mov	r3, r0
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	3264      	adds	r2, #100	; 0x64
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	f107 0008 	add.w	r0, r7, #8
 8005e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e8e:	4401      	add	r1, r0
 8005e90:	7809      	ldrb	r1, [r1, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	4790      	blx	r2
 8005e96:	f107 0318 	add.w	r3, r7, #24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f009 fe2f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f009 fe2a 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005eaa:	f7fd ff25 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	e7bf      	b.n	8005e36 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005eb6:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005eb8:	f010 fe4c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	3338      	adds	r3, #56	; 0x38
 8005ec2:	681d      	ldr	r5, [r3, #0]
 8005ec4:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005ec8:	f010 fe54 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	9302      	str	r3, [sp, #8]
 8005ed0:	f44f 7392 	mov.w	r3, #292	; 0x124
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005edc:	4632      	mov	r2, r6
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	47a8      	blx	r5
}
 8005ee4:	bf00      	nop
 8005ee6:	372c      	adds	r7, #44	; 0x2c
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eec:	080260c4 	.word	0x080260c4
 8005ef0:	08025cb0 	.word	0x08025cb0
 8005ef4:	08026060 	.word	0x08026060
 8005ef8:	08026088 	.word	0x08026088
 8005efc:	08025d30 	.word	0x08025d30
 8005f00:	08026100 	.word	0x08026100

08005f04 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fbea 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005f14:	4a03      	ldr	r2, [pc, #12]	; (8005f24 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	0802a5a0 	.word	0x0802a5a0

08005f28 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	f240 1227 	movw	r2, #295	; 0x127
 8005f34:	4906      	ldr	r1, [pc, #24]	; (8005f50 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005f36:	2004      	movs	r0, #4
 8005f38:	f006 fe66 	bl	800cc08 <_ZnwjPKci>
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ffe0 	bl	8005f04 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005f44:	4623      	mov	r3, r4
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd90      	pop	{r4, r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	08025d30 	.word	0x08025d30

08005f54 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f00f fa40 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8005f64:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	0802a4f4 	.word	0x0802a4f4

08005f78 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	b091      	sub	sp, #68	; 0x44
 8005f7c:	af04      	add	r7, sp, #16
 8005f7e:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data",(uint8_t*)AT_CWMODE_STATION, strlen(AT_CWMODE_STATION)).withIntParameter("size", strlen(AT_CWMODE_STATION));
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	4939      	ldr	r1, [pc, #228]	; (8006070 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f009 f9fe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005f92:	f107 030c 	add.w	r3, r7, #12
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f007 fad1 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	4932      	ldr	r1, [pc, #200]	; (8006074 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 8005fac:	4618      	mov	r0, r3
 8005fae:	f009 f9ee 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005fb2:	f107 0314 	add.w	r3, r7, #20
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4620      	mov	r0, r4
 8005fba:	47a8      	blx	r5
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	f107 031c 	add.w	r3, r7, #28
 8005fc2:	492d      	ldr	r1, [pc, #180]	; (8006078 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f009 f9e2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005fca:	f107 011c 	add.w	r1, r7, #28
 8005fce:	230d      	movs	r3, #13
 8005fd0:	4a2a      	ldr	r2, [pc, #168]	; (800607c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7fe fcfa 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	332c      	adds	r3, #44	; 0x2c
 8005fde:	681d      	ldr	r5, [r3, #0]
 8005fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe4:	4926      	ldr	r1, [pc, #152]	; (8006080 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x108>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f009 f9d1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8005fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff0:	220d      	movs	r2, #13
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	47a8      	blx	r5
 8005ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f009 fd7e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006002:	f107 031c 	add.w	r3, r7, #28
 8006006:	4618      	mov	r0, r3
 8006008:	f009 fd79 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4618      	mov	r0, r3
 8006012:	f009 fd74 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006016:	f107 030c 	add.w	r3, r7, #12
 800601a:	4618      	mov	r0, r3
 800601c:	f009 fd6f 	bl	800fafe <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8006020:	4918      	ldr	r1, [pc, #96]	; (8006084 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x10c>)
 8006022:	4819      	ldr	r0, [pc, #100]	; (8006088 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x110>)
 8006024:	f7fd fece 	bl	8003dc4 <Connect_Wifi>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 800602e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006032:	2b04      	cmp	r3, #4
 8006034:	d100      	bne.n	8006038 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xc0>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8006036:	e7f3      	b.n	8006020 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xa8>
		{
			break;
 8006038:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 800603a:	f010 fd8b 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800603e:	4604      	mov	r4, r0
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	3338      	adds	r3, #56	; 0x38
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 800604a:	f010 fd93 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800604e:	4603      	mov	r3, r0
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x114>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x118>)
 800605e:	4632      	mov	r2, r6
 8006060:	2101      	movs	r1, #1
 8006062:	4620      	mov	r0, r4
 8006064:	47a8      	blx	r5

}
 8006066:	bf00      	nop
 8006068:	3734      	adds	r7, #52	; 0x34
 800606a:	46bd      	mov	sp, r7
 800606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606e:	bf00      	nop
 8006070:	08026060 	.word	0x08026060
 8006074:	08026064 	.word	0x08026064
 8006078:	08026078 	.word	0x08026078
 800607c:	08025cb4 	.word	0x08025cb4
 8006080:	08026080 	.word	0x08026080
 8006084:	0802612c 	.word	0x0802612c
 8006088:	08026134 	.word	0x08026134
 800608c:	08025d30 	.word	0x08025d30
 8006090:	0802613c 	.word	0x0802613c

08006094 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fb22 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80060a4:	4a03      	ldr	r2, [pc, #12]	; (80060b4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	0802a4d4 	.word	0x0802a4d4

080060b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80060c4:	4906      	ldr	r1, [pc, #24]	; (80060e0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 80060c6:	2004      	movs	r0, #4
 80060c8:	f006 fd9e 	bl	800cc08 <_ZnwjPKci>
 80060cc:	4604      	mov	r4, r0
 80060ce:	4620      	mov	r0, r4
 80060d0:	f7ff ffe0 	bl	8006094 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 80060d4:	4623      	mov	r3, r4
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd90      	pop	{r4, r7, pc}
 80060de:	bf00      	nop
 80060e0:	08025d30 	.word	0x08025d30

080060e4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f00f f978 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80060f4:	4a03      	ldr	r2, [pc, #12]	; (8006104 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	0802a428 	.word	0x0802a428

08006108 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8006108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610a:	b0e3      	sub	sp, #396	; 0x18c
 800610c:	af04      	add	r7, sp, #16
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8006112:	4a8a      	ldr	r2, [pc, #552]	; (800633c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x234>)
 8006114:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006118:	4611      	mov	r1, r2
 800611a:	2296      	movs	r2, #150	; 0x96
 800611c:	4618      	mov	r0, r3
 800611e:	f01c fe0d 	bl	8022d3c <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	4a86      	ldr	r2, [pc, #536]	; (8006340 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x238>)
 8006128:	4618      	mov	r0, r3
 800612a:	4611      	mov	r1, r2
 800612c:	2396      	movs	r3, #150	; 0x96
 800612e:	461a      	mov	r2, r3
 8006130:	f01c fe04 	bl	8022d3c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800613a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800613e:	2b02      	cmp	r3, #2
 8006140:	dc71      	bgt.n	8006226 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x11e>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_tx_buffer[i], strlen(fake_tx_buffer[i])).withIntParameter("size", strlen(fake_tx_buffer[i]));
 8006142:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006146:	497f      	ldr	r1, [pc, #508]	; (8006344 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x23c>)
 8006148:	4618      	mov	r0, r3
 800614a:	f009 f920 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800614e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006152:	2100      	movs	r1, #0
 8006154:	4618      	mov	r0, r3
 8006156:	f007 f9f3 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800615a:	4604      	mov	r4, r0
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	330c      	adds	r3, #12
 8006160:	681d      	ldr	r5, [r3, #0]
 8006162:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006166:	4978      	ldr	r1, [pc, #480]	; (8006348 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x240>)
 8006168:	4618      	mov	r0, r3
 800616a:	f009 f910 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800616e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006172:	4619      	mov	r1, r3
 8006174:	4620      	mov	r0, r4
 8006176:	47a8      	blx	r5
 8006178:	4605      	mov	r5, r0
 800617a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800617e:	4973      	ldr	r1, [pc, #460]	; (800634c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x244>)
 8006180:	4618      	mov	r0, r3
 8006182:	f009 f904 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006186:	f107 0208 	add.w	r2, r7, #8
 800618a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800618e:	2132      	movs	r1, #50	; 0x32
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	18d4      	adds	r4, r2, r3
 8006196:	f107 0208 	add.w	r2, r7, #8
 800619a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800619e:	2132      	movs	r1, #50	; 0x32
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	4413      	add	r3, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fa f848 	bl	800023c <strlen>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80061b2:	4622      	mov	r2, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f7fe fc09 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80061ba:	4604      	mov	r4, r0
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	332c      	adds	r3, #44	; 0x2c
 80061c0:	681d      	ldr	r5, [r3, #0]
 80061c2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80061c6:	4962      	ldr	r1, [pc, #392]	; (8006350 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x248>)
 80061c8:	4618      	mov	r0, r3
 80061ca:	f009 f8e0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80061ce:	f107 0208 	add.w	r2, r7, #8
 80061d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80061d6:	2132      	movs	r1, #50	; 0x32
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	4413      	add	r3, r2
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fa f82c 	bl	800023c <strlen>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80061ec:	4619      	mov	r1, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	47a8      	blx	r5
 80061f2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80061f6:	4618      	mov	r0, r3
 80061f8:	f009 fc81 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80061fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006200:	4618      	mov	r0, r3
 8006202:	f009 fc7c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006206:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800620a:	4618      	mov	r0, r3
 800620c:	f009 fc77 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006210:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006214:	4618      	mov	r0, r3
 8006216:	f009 fc72 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800621a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800621e:	3301      	adds	r3, #1
 8006220:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006224:	e789      	b.n	800613a <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8006226:	2304      	movs	r3, #4
 8006228:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	int i = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8006232:	4948      	ldr	r1, [pc, #288]	; (8006354 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x24c>)
 8006234:	4848      	ldr	r0, [pc, #288]	; (8006358 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x250>)
 8006236:	f7fd fdc5 	bl	8003dc4 <Connect_Wifi>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 8006240:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8006244:	2b04      	cmp	r3, #4
 8006246:	d15d      	bne.n	8006304 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>
		{
			break;
		}

		if(i<3)
 8006248:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800624c:	2b02      	cmp	r3, #2
 800624e:	dcf0      	bgt.n	8006232 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x12a>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006250:	2300      	movs	r3, #0
 8006252:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006256:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800625a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800625e:	2132      	movs	r1, #50	; 0x32
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f7f9 ffe8 	bl	800023c <strlen>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006274:	4293      	cmp	r3, r2
 8006276:	da3f      	bge.n	80062f8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006278:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800627c:	4931      	ldr	r1, [pc, #196]	; (8006344 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x23c>)
 800627e:	4618      	mov	r0, r3
 8006280:	f009 f885 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006284:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f007 f958 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006290:	4604      	mov	r4, r0
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	681d      	ldr	r5, [r3, #0]
 8006298:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800629c:	492f      	ldr	r1, [pc, #188]	; (800635c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x254>)
 800629e:	4618      	mov	r0, r3
 80062a0:	f009 f875 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80062a4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80062a8:	4619      	mov	r1, r3
 80062aa:	4620      	mov	r0, r4
 80062ac:	47a8      	blx	r5
 80062ae:	4603      	mov	r3, r0
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	3264      	adds	r2, #100	; 0x64
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80062ba:	2032      	movs	r0, #50	; 0x32
 80062bc:	fb00 f101 	mul.w	r1, r0, r1
 80062c0:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 80062c4:	4408      	add	r0, r1
 80062c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80062ca:	4401      	add	r1, r0
 80062cc:	39d8      	subs	r1, #216	; 0xd8
 80062ce:	7809      	ldrb	r1, [r1, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	4790      	blx	r2
 80062d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80062d8:	4618      	mov	r0, r3
 80062da:	f009 fc10 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80062de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80062e2:	4618      	mov	r0, r3
 80062e4:	f009 fc0b 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80062e8:	f7fd fd06 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80062ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80062f0:	3301      	adds	r3, #1
 80062f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80062f6:	e7ae      	b.n	8006256 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x14e>
			}
			i++;
 80062f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80062fc:	3301      	adds	r3, #1
 80062fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 8006302:	e796      	b.n	8006232 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x12a>
			break;
 8006304:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8006306:	f010 fc25 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800630a:	4604      	mov	r4, r0
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	3338      	adds	r3, #56	; 0x38
 8006310:	681d      	ldr	r5, [r3, #0]
 8006312:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 8006316:	f010 fc2d 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800631a:	4603      	mov	r3, r0
 800631c:	9302      	str	r3, [sp, #8]
 800631e:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x258>)
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x25c>)
 800632a:	4632      	mov	r2, r6
 800632c:	2103      	movs	r1, #3
 800632e:	4620      	mov	r0, r4
 8006330:	47a8      	blx	r5

}
 8006332:	bf00      	nop
 8006334:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8006338:	46bd      	mov	sp, r7
 800633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633c:	08026194 	.word	0x08026194
 8006340:	0802622c 	.word	0x0802622c
 8006344:	08026060 	.word	0x08026060
 8006348:	08026064 	.word	0x08026064
 800634c:	08026078 	.word	0x08026078
 8006350:	08026080 	.word	0x08026080
 8006354:	0802612c 	.word	0x0802612c
 8006358:	08026134 	.word	0x08026134
 800635c:	08026088 	.word	0x08026088
 8006360:	08025d30 	.word	0x08025d30
 8006364:	08026168 	.word	0x08026168

08006368 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff f9b8 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006378:	4a03      	ldr	r2, [pc, #12]	; (8006388 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	0802a408 	.word	0x0802a408

0800638c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006398:	4906      	ldr	r1, [pc, #24]	; (80063b4 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 800639a:	2004      	movs	r0, #4
 800639c:	f006 fc34 	bl	800cc08 <_ZnwjPKci>
 80063a0:	4604      	mov	r4, r0
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff ffe0 	bl	8006368 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 80063a8:	4623      	mov	r3, r4
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	08025d30 	.word	0x08025d30

080063b8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f00f f80e 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80063c8:	4a03      	ldr	r2, [pc, #12]	; (80063d8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	0802a35c 	.word	0x0802a35c

080063dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 80063dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063de:	b0e3      	sub	sp, #396	; 0x18c
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	1d3b      	adds	r3, r7, #4
 80063e4:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 80063e6:	4a89      	ldr	r2, [pc, #548]	; (800660c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x230>)
 80063e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80063ec:	4611      	mov	r1, r2
 80063ee:	2296      	movs	r2, #150	; 0x96
 80063f0:	4618      	mov	r0, r3
 80063f2:	f01c fca3 	bl	8022d3c <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4a85      	ldr	r2, [pc, #532]	; (8006610 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x234>)
 80063fc:	4618      	mov	r0, r3
 80063fe:	4611      	mov	r1, r2
 8006400:	2396      	movs	r3, #150	; 0x96
 8006402:	461a      	mov	r2, r3
 8006404:	f01c fc9a 	bl	8022d3c <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800640e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006412:	2b02      	cmp	r3, #2
 8006414:	dc71      	bgt.n	80064fa <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x11e>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_tx_buffer[i], strlen(fake_tx_buffer[i])).withIntParameter("size", strlen(fake_tx_buffer[i]));
 8006416:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800641a:	497e      	ldr	r1, [pc, #504]	; (8006614 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 800641c:	4618      	mov	r0, r3
 800641e:	f008 ffb6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006422:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006426:	2100      	movs	r1, #0
 8006428:	4618      	mov	r0, r3
 800642a:	f007 f889 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800642e:	4604      	mov	r4, r0
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	681d      	ldr	r5, [r3, #0]
 8006436:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800643a:	4977      	ldr	r1, [pc, #476]	; (8006618 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x23c>)
 800643c:	4618      	mov	r0, r3
 800643e:	f008 ffa6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006442:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006446:	4619      	mov	r1, r3
 8006448:	4620      	mov	r0, r4
 800644a:	47a8      	blx	r5
 800644c:	4605      	mov	r5, r0
 800644e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006452:	4972      	ldr	r1, [pc, #456]	; (800661c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x240>)
 8006454:	4618      	mov	r0, r3
 8006456:	f008 ff9a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800645a:	f107 0208 	add.w	r2, r7, #8
 800645e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006462:	2132      	movs	r1, #50	; 0x32
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	18d4      	adds	r4, r2, r3
 800646a:	f107 0208 	add.w	r2, r7, #8
 800646e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006472:	2132      	movs	r1, #50	; 0x32
 8006474:	fb01 f303 	mul.w	r3, r1, r3
 8006478:	4413      	add	r3, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f7f9 fede 	bl	800023c <strlen>
 8006480:	4603      	mov	r3, r0
 8006482:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8006486:	4622      	mov	r2, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f7fe fa9f 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800648e:	4604      	mov	r4, r0
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	332c      	adds	r3, #44	; 0x2c
 8006494:	681d      	ldr	r5, [r3, #0]
 8006496:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800649a:	4961      	ldr	r1, [pc, #388]	; (8006620 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 800649c:	4618      	mov	r0, r3
 800649e:	f008 ff76 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80064a2:	f107 0208 	add.w	r2, r7, #8
 80064a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80064aa:	2132      	movs	r1, #50	; 0x32
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7f9 fec2 	bl	800023c <strlen>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80064c0:	4619      	mov	r1, r3
 80064c2:	4620      	mov	r0, r4
 80064c4:	47a8      	blx	r5
 80064c6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80064ca:	4618      	mov	r0, r3
 80064cc:	f009 fb17 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80064d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064d4:	4618      	mov	r0, r3
 80064d6:	f009 fb12 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80064da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80064de:	4618      	mov	r0, r3
 80064e0:	f009 fb0d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80064e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064e8:	4618      	mov	r0, r3
 80064ea:	f009 fb08 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80064ee:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80064f8:	e789      	b.n	800640e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8006500:	4948      	ldr	r1, [pc, #288]	; (8006624 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x248>)
 8006502:	4849      	ldr	r0, [pc, #292]	; (8006628 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x24c>)
 8006504:	f7fd fc5e 	bl	8003dc4 <Connect_Wifi>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 800650e:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8006512:	2b04      	cmp	r3, #4
 8006514:	d15d      	bne.n	80065d2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f6>
		{
			break;
		}

		if(i<3)
 8006516:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800651a:	2b02      	cmp	r3, #2
 800651c:	dcf0      	bgt.n	8006500 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x124>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800651e:	2300      	movs	r3, #0
 8006520:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006524:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006528:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800652c:	2132      	movs	r1, #50	; 0x32
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f7f9 fe81 	bl	800023c <strlen>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006542:	4293      	cmp	r3, r2
 8006544:	da3f      	bge.n	80065c6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ea>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006546:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800654a:	4932      	ldr	r1, [pc, #200]	; (8006614 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 800654c:	4618      	mov	r0, r3
 800654e:	f008 ff1e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006552:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f006 fff1 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800655e:	4604      	mov	r4, r0
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	681d      	ldr	r5, [r3, #0]
 8006566:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800656a:	4930      	ldr	r1, [pc, #192]	; (800662c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x250>)
 800656c:	4618      	mov	r0, r3
 800656e:	f008 ff0e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006572:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006576:	4619      	mov	r1, r3
 8006578:	4620      	mov	r0, r4
 800657a:	47a8      	blx	r5
 800657c:	4603      	mov	r3, r0
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	3264      	adds	r2, #100	; 0x64
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006588:	2032      	movs	r0, #50	; 0x32
 800658a:	fb00 f101 	mul.w	r1, r0, r1
 800658e:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8006592:	4408      	add	r0, r1
 8006594:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006598:	4401      	add	r1, r0
 800659a:	39d8      	subs	r1, #216	; 0xd8
 800659c:	7809      	ldrb	r1, [r1, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	4790      	blx	r2
 80065a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80065a6:	4618      	mov	r0, r3
 80065a8:	f009 faa9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80065ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80065b0:	4618      	mov	r0, r3
 80065b2:	f009 faa4 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80065b6:	f7fd fb9f 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80065ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80065be:	3301      	adds	r3, #1
 80065c0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80065c4:	e7ae      	b.n	8006524 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x148>
			}
			i++;
 80065c6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80065ca:	3301      	adds	r3, #1
 80065cc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 80065d0:	e796      	b.n	8006500 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x124>
			break;
 80065d2:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80065d4:	f010 fabe 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80065d8:	4604      	mov	r4, r0
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	3338      	adds	r3, #56	; 0x38
 80065de:	681d      	ldr	r5, [r3, #0]
 80065e0:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 80065e4:	f010 fac6 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80065e8:	4603      	mov	r3, r0
 80065ea:	9302      	str	r3, [sp, #8]
 80065ec:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x254>)
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x258>)
 80065f8:	4632      	mov	r2, r6
 80065fa:	2102      	movs	r1, #2
 80065fc:	4620      	mov	r0, r4
 80065fe:	47a8      	blx	r5

}
 8006600:	bf00      	nop
 8006602:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8006606:	46bd      	mov	sp, r7
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800660a:	bf00      	nop
 800660c:	080262ec 	.word	0x080262ec
 8006610:	0802622c 	.word	0x0802622c
 8006614:	08026060 	.word	0x08026060
 8006618:	08026064 	.word	0x08026064
 800661c:	08026078 	.word	0x08026078
 8006620:	08026080 	.word	0x08026080
 8006624:	0802612c 	.word	0x0802612c
 8006628:	08026134 	.word	0x08026134
 800662c:	08026088 	.word	0x08026088
 8006630:	08025d30 	.word	0x08025d30
 8006634:	080262c4 	.word	0x080262c4

08006638 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff f850 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006648:	4a03      	ldr	r2, [pc, #12]	; (8006658 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	0802a33c 	.word	0x0802a33c

0800665c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8006668:	4906      	ldr	r1, [pc, #24]	; (8006684 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 800666a:	2004      	movs	r0, #4
 800666c:	f006 facc 	bl	800cc08 <_ZnwjPKci>
 8006670:	4604      	mov	r4, r0
 8006672:	4620      	mov	r0, r4
 8006674:	f7ff ffe0 	bl	8006638 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8006678:	4623      	mov	r3, r4
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	bd90      	pop	{r4, r7, pc}
 8006682:	bf00      	nop
 8006684:	08025d30 	.word	0x08025d30

08006688 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f00e fea6 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8006698:	4a03      	ldr	r2, [pc, #12]	; (80066a8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0802a290 	.word	0x0802a290

080066ac <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80066ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ae:	b091      	sub	sp, #68	; 0x44
 80066b0:	af04      	add	r7, sp, #16
 80066b2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CWQAP, strlen(AT_CWQAP)).withIntParameter("size", strlen(AT_CWQAP));
 80066b4:	f107 030c 	add.w	r3, r7, #12
 80066b8:	4937      	ldr	r1, [pc, #220]	; (8006798 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 80066ba:	4618      	mov	r0, r3
 80066bc:	f008 fe67 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f006 ff3a 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80066cc:	4604      	mov	r4, r0
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	681d      	ldr	r5, [r3, #0]
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4930      	ldr	r1, [pc, #192]	; (800679c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf0>)
 80066da:	4618      	mov	r0, r3
 80066dc:	f008 fe57 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4619      	mov	r1, r3
 80066e6:	4620      	mov	r0, r4
 80066e8:	47a8      	blx	r5
 80066ea:	4604      	mov	r4, r0
 80066ec:	f107 031c 	add.w	r3, r7, #28
 80066f0:	492b      	ldr	r1, [pc, #172]	; (80067a0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf4>)
 80066f2:	4618      	mov	r0, r3
 80066f4:	f008 fe4b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80066f8:	f107 011c 	add.w	r1, r7, #28
 80066fc:	230a      	movs	r3, #10
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 8006700:	4620      	mov	r0, r4
 8006702:	f7fe f963 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006706:	4604      	mov	r4, r0
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	332c      	adds	r3, #44	; 0x2c
 800670c:	681d      	ldr	r5, [r3, #0]
 800670e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006712:	4925      	ldr	r1, [pc, #148]	; (80067a8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 8006714:	4618      	mov	r0, r3
 8006716:	f008 fe3a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800671a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671e:	220a      	movs	r2, #10
 8006720:	4619      	mov	r1, r3
 8006722:	4620      	mov	r0, r4
 8006724:	47a8      	blx	r5
 8006726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800672a:	4618      	mov	r0, r3
 800672c:	f009 f9e7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006730:	f107 031c 	add.w	r3, r7, #28
 8006734:	4618      	mov	r0, r3
 8006736:	f009 f9e2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	4618      	mov	r0, r3
 8006740:	f009 f9dd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006744:	f107 030c 	add.w	r3, r7, #12
 8006748:	4618      	mov	r0, r3
 800674a:	f009 f9d8 	bl	800fafe <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 800674e:	f7fd fb73 	bl	8003e38 <Disconnect_Wifi>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 8006758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800675c:	2b04      	cmp	r3, #4
 800675e:	d100      	bne.n	8006762 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xb6>
		response = Disconnect_Wifi();
 8006760:	e7f5      	b.n	800674e <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xa2>
			break;
 8006762:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006764:	f010 f9f6 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8006768:	4604      	mov	r4, r0
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	3338      	adds	r3, #56	; 0x38
 800676e:	681d      	ldr	r5, [r3, #0]
 8006770:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006774:	f010 f9fe 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006778:	4603      	mov	r3, r0
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	f240 13a5 	movw	r3, #421	; 0x1a5
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8006788:	4632      	mov	r2, r6
 800678a:	2101      	movs	r1, #1
 800678c:	4620      	mov	r0, r4
 800678e:	47a8      	blx	r5
}
 8006790:	bf00      	nop
 8006792:	3734      	adds	r7, #52	; 0x34
 8006794:	46bd      	mov	sp, r7
 8006796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006798:	08026060 	.word	0x08026060
 800679c:	08026064 	.word	0x08026064
 80067a0:	08026078 	.word	0x08026078
 80067a4:	08025cc4 	.word	0x08025cc4
 80067a8:	08026080 	.word	0x08026080
 80067ac:	08025d30 	.word	0x08025d30
 80067b0:	0802613c 	.word	0x0802613c

080067b4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe ff92 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80067c4:	4a03      	ldr	r2, [pc, #12]	; (80067d4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	0802a270 	.word	0x0802a270

080067d8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80067e4:	4906      	ldr	r1, [pc, #24]	; (8006800 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 80067e6:	2004      	movs	r0, #4
 80067e8:	f006 fa0e 	bl	800cc08 <_ZnwjPKci>
 80067ec:	4604      	mov	r4, r0
 80067ee:	4620      	mov	r0, r4
 80067f0:	f7ff ffe0 	bl	80067b4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 80067f4:	4623      	mov	r3, r4
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd90      	pop	{r4, r7, pc}
 80067fe:	bf00      	nop
 8006800:	08025d30 	.word	0x08025d30

08006804 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	f00e fde8 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8006814:	4a03      	ldr	r2, [pc, #12]	; (8006824 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	0802a1c4 	.word	0x0802a1c4

08006828 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8006828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800682a:	b095      	sub	sp, #84	; 0x54
 800682c:	af04      	add	r7, sp, #16
 800682e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CWQAP, strlen(AT_CWQAP)).withIntParameter("size", strlen(AT_CWQAP));
 8006830:	f107 0308 	add.w	r3, r7, #8
 8006834:	4954      	ldr	r1, [pc, #336]	; (8006988 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x160>)
 8006836:	4618      	mov	r0, r3
 8006838:	f008 fda9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800683c:	f107 0308 	add.w	r3, r7, #8
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f006 fe7c 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006848:	4604      	mov	r4, r0
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	681d      	ldr	r5, [r3, #0]
 8006850:	f107 0310 	add.w	r3, r7, #16
 8006854:	494d      	ldr	r1, [pc, #308]	; (800698c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x164>)
 8006856:	4618      	mov	r0, r3
 8006858:	f008 fd99 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4619      	mov	r1, r3
 8006862:	4620      	mov	r0, r4
 8006864:	47a8      	blx	r5
 8006866:	4604      	mov	r4, r0
 8006868:	f107 0318 	add.w	r3, r7, #24
 800686c:	4948      	ldr	r1, [pc, #288]	; (8006990 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x168>)
 800686e:	4618      	mov	r0, r3
 8006870:	f008 fd8d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006874:	f107 0118 	add.w	r1, r7, #24
 8006878:	230a      	movs	r3, #10
 800687a:	4a46      	ldr	r2, [pc, #280]	; (8006994 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x16c>)
 800687c:	4620      	mov	r0, r4
 800687e:	f7fe f8a5 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006882:	4604      	mov	r4, r0
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	332c      	adds	r3, #44	; 0x2c
 8006888:	681d      	ldr	r5, [r3, #0]
 800688a:	f107 0320 	add.w	r3, r7, #32
 800688e:	4942      	ldr	r1, [pc, #264]	; (8006998 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x170>)
 8006890:	4618      	mov	r0, r3
 8006892:	f008 fd7c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006896:	f107 0320 	add.w	r3, r7, #32
 800689a:	220a      	movs	r2, #10
 800689c:	4619      	mov	r1, r3
 800689e:	4620      	mov	r0, r4
 80068a0:	47a8      	blx	r5
 80068a2:	f107 0320 	add.w	r3, r7, #32
 80068a6:	4618      	mov	r0, r3
 80068a8:	f009 f929 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80068ac:	f107 0318 	add.w	r3, r7, #24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f009 f924 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80068b6:	f107 0310 	add.w	r3, r7, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f009 f91f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	4618      	mov	r0, r3
 80068c6:	f009 f91a 	bl	800fafe <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80068ca:	f7fd fab5 	bl	8003e38 <Disconnect_Wifi>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 80068d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d139      	bne.n	8006950 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x128>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80068dc:	2300      	movs	r3, #0
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	dcf1      	bgt.n	80068ca <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xa2>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80068e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ea:	4927      	ldr	r1, [pc, #156]	; (8006988 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x160>)
 80068ec:	4618      	mov	r0, r3
 80068ee:	f008 fd4e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80068f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f006 fe21 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80068fe:	4604      	mov	r4, r0
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800690a:	4924      	ldr	r1, [pc, #144]	; (800699c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x174>)
 800690c:	4618      	mov	r0, r3
 800690e:	f008 fd3e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006916:	4619      	mov	r1, r3
 8006918:	4620      	mov	r0, r4
 800691a:	47a8      	blx	r5
 800691c:	4603      	mov	r3, r0
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	3264      	adds	r2, #100	; 0x64
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	481e      	ldr	r0, [pc, #120]	; (80069a0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x178>)
 8006926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006928:	4401      	add	r1, r0
 800692a:	7809      	ldrb	r1, [r1, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	4790      	blx	r2
 8006930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006934:	4618      	mov	r0, r3
 8006936:	f009 f8e2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800693a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800693e:	4618      	mov	r0, r3
 8006940:	f009 f8dd 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006944:	f7fd f9d8 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800694a:	3301      	adds	r3, #1
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694e:	e7c7      	b.n	80068e0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xb8>
			break;
 8006950:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006952:	f010 f8ff 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8006956:	4604      	mov	r4, r0
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	3338      	adds	r3, #56	; 0x38
 800695c:	681d      	ldr	r5, [r3, #0]
 800695e:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 8006962:	f010 f907 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006966:	4603      	mov	r3, r0
 8006968:	9302      	str	r3, [sp, #8]
 800696a:	f240 13bd 	movw	r3, #445	; 0x1bd
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x17c>)
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x180>)
 8006976:	4632      	mov	r2, r6
 8006978:	2102      	movs	r1, #2
 800697a:	4620      	mov	r0, r4
 800697c:	47a8      	blx	r5
}
 800697e:	bf00      	nop
 8006980:	3744      	adds	r7, #68	; 0x44
 8006982:	46bd      	mov	sp, r7
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	bf00      	nop
 8006988:	08026060 	.word	0x08026060
 800698c:	08026064 	.word	0x08026064
 8006990:	08026078 	.word	0x08026078
 8006994:	08025cc4 	.word	0x08025cc4
 8006998:	08026080 	.word	0x08026080
 800699c:	08026088 	.word	0x08026088
 80069a0:	08025cb0 	.word	0x08025cb0
 80069a4:	08025d30 	.word	0x08025d30
 80069a8:	080262c4 	.word	0x080262c4

080069ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe fe96 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80069bc:	4a03      	ldr	r2, [pc, #12]	; (80069cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4618      	mov	r0, r3
 80069c6:	3708      	adds	r7, #8
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	0802a1a4 	.word	0x0802a1a4

080069d0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80069dc:	4906      	ldr	r1, [pc, #24]	; (80069f8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 80069de:	2004      	movs	r0, #4
 80069e0:	f006 f912 	bl	800cc08 <_ZnwjPKci>
 80069e4:	4604      	mov	r4, r0
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ffe0 	bl	80069ac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 80069ec:	4623      	mov	r3, r4
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08025d30 	.word	0x08025d30

080069fc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f00e fcec 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8006a0c:	4a03      	ldr	r2, [pc, #12]	; (8006a1c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	0802a0f8 	.word	0x0802a0f8

08006a20 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a22:	b09d      	sub	sp, #116	; 0x74
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006a28:	4a7e      	ldr	r2, [pc, #504]	; (8006c24 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x204>)
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006a34:	4a7c      	ldr	r2, [pc, #496]	; (8006c28 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x208>)
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	dc6c      	bgt.n	8006b24 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x104>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006a4a:	f107 0320 	add.w	r3, r7, #32
 8006a4e:	4977      	ldr	r1, [pc, #476]	; (8006c2c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x20c>)
 8006a50:	4618      	mov	r0, r3
 8006a52:	f008 fc9c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006a56:	f107 0320 	add.w	r3, r7, #32
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f006 fd6f 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a62:	4604      	mov	r4, r0
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	681d      	ldr	r5, [r3, #0]
 8006a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6e:	4970      	ldr	r1, [pc, #448]	; (8006c30 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x210>)
 8006a70:	4618      	mov	r0, r3
 8006a72:	f008 fc8c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	47a8      	blx	r5
 8006a80:	4605      	mov	r5, r0
 8006a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a86:	496b      	ldr	r1, [pc, #428]	; (8006c34 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x214>)
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f008 fc80 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a96:	4413      	add	r3, r2
 8006a98:	f853 4c58 	ldr.w	r4, [r3, #-88]
 8006a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7f9 fbc6 	bl	800023c <strlen>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7fd ff87 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	332c      	adds	r3, #44	; 0x2c
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006aca:	495b      	ldr	r1, [pc, #364]	; (8006c38 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x218>)
 8006acc:	4618      	mov	r0, r3
 8006ace:	f008 fc5e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ada:	4413      	add	r3, r2
 8006adc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7f9 fbab 	bl	800023c <strlen>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006aee:	4619      	mov	r1, r3
 8006af0:	4620      	mov	r0, r4
 8006af2:	47a8      	blx	r5
 8006af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006af8:	4618      	mov	r0, r3
 8006afa:	f009 f800 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b02:	4618      	mov	r0, r3
 8006b04:	f008 fffb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f008 fff6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006b12:	f107 0320 	add.w	r3, r7, #32
 8006b16:	4618      	mov	r0, r3
 8006b18:	f008 fff1 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b1e:	3301      	adds	r3, #1
 8006b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b22:	e78f      	b.n	8006a44 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	65bb      	str	r3, [r7, #88]	; 0x58
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006b28:	f107 0114 	add.w	r1, r7, #20
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	2203      	movs	r2, #3
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fd f99c 	bl	8003e70 <Command_Process>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if(response != IDLE)
 8006b3e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d153      	bne.n	8006bee <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ce>
		{
			break;
		}

		if(i<3)
 8006b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	dced      	bgt.n	8006b28 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x108>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006b58:	4413      	add	r3, r2
 8006b5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 fb6c 	bl	800023c <strlen>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	da3b      	bge.n	8006be6 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c6>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006b6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b72:	492e      	ldr	r1, [pc, #184]	; (8006c2c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x20c>)
 8006b74:	4618      	mov	r0, r3
 8006b76:	f008 fc0a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f006 fcdd 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b86:	4604      	mov	r4, r0
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b92:	492a      	ldr	r1, [pc, #168]	; (8006c3c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x21c>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f008 fbfa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	47a8      	blx	r5
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	3364      	adds	r3, #100	; 0x64
 8006baa:	681c      	ldr	r4, [r3, #0]
 8006bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006bb4:	440b      	add	r3, r1
 8006bb6:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8006bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bbc:	440b      	add	r3, r1
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	47a0      	blx	r4
 8006bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f008 ff97 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006bd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f008 ff92 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006bda:	f7fd f88d 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be0:	3301      	adds	r3, #1
 8006be2:	657b      	str	r3, [r7, #84]	; 0x54
 8006be4:	e7b4      	b.n	8006b50 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x130>
			}
			i++;
 8006be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be8:	3301      	adds	r3, #1
 8006bea:	65bb      	str	r3, [r7, #88]	; 0x58
		}

	}
 8006bec:	e79c      	b.n	8006b28 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x108>
			break;
 8006bee:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006bf0:	f00f ffb0 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	3338      	adds	r3, #56	; 0x38
 8006bfa:	681d      	ldr	r5, [r3, #0]
 8006bfc:	f897 6053 	ldrb.w	r6, [r7, #83]	; 0x53
 8006c00:	f00f ffb8 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006c04:	4603      	mov	r3, r0
 8006c06:	9302      	str	r3, [sp, #8]
 8006c08:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x220>)
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x224>)
 8006c14:	4632      	mov	r2, r6
 8006c16:	2102      	movs	r1, #2
 8006c18:	4620      	mov	r0, r4
 8006c1a:	47a8      	blx	r5

}
 8006c1c:	bf00      	nop
 8006c1e:	3764      	adds	r7, #100	; 0x64
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c24:	08026384 	.word	0x08026384
 8006c28:	08026390 	.word	0x08026390
 8006c2c:	08026060 	.word	0x08026060
 8006c30:	08026064 	.word	0x08026064
 8006c34:	08026078 	.word	0x08026078
 8006c38:	08026080 	.word	0x08026080
 8006c3c:	08026088 	.word	0x08026088
 8006c40:	08025d30 	.word	0x08025d30
 8006c44:	080262c4 	.word	0x080262c4

08006c48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fd48 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006c58:	4a03      	ldr	r2, [pc, #12]	; (8006c68 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	0802a0d8 	.word	0x0802a0d8

08006c6c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8006c78:	4906      	ldr	r1, [pc, #24]	; (8006c94 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006c7a:	2004      	movs	r0, #4
 8006c7c:	f005 ffc4 	bl	800cc08 <_ZnwjPKci>
 8006c80:	4604      	mov	r4, r0
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff ffe0 	bl	8006c48 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006c88:	4623      	mov	r3, r4
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}
 8006c92:	bf00      	nop
 8006c94:	08025d30 	.word	0x08025d30

08006c98 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f00e fb9e 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8006ca8:	4a03      	ldr	r2, [pc, #12]	; (8006cb8 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	0802a02c 	.word	0x0802a02c

08006cbc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbe:	b0b3      	sub	sp, #204	; 0xcc
 8006cc0:	af04      	add	r7, sp, #16
 8006cc2:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006cc4:	4a87      	ldr	r2, [pc, #540]	; (8006ee4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x228>)
 8006cc6:	f107 0314 	add.w	r3, r7, #20
 8006cca:	4611      	mov	r1, r2
 8006ccc:	2264      	movs	r2, #100	; 0x64
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f01c f834 	bl	8022d3c <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8006cd4:	4a84      	ldr	r2, [pc, #528]	; (8006ee8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x22c>)
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cde:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ce8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	dc71      	bgt.n	8006dd4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x118>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006cf0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006cf4:	497d      	ldr	r1, [pc, #500]	; (8006eec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x230>)
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f008 fb49 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006cfc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d00:	2100      	movs	r1, #0
 8006d02:	4618      	mov	r0, r3
 8006d04:	f006 fc1c 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006d08:	4604      	mov	r4, r0
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	681d      	ldr	r5, [r3, #0]
 8006d10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d14:	4976      	ldr	r1, [pc, #472]	; (8006ef0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x234>)
 8006d16:	4618      	mov	r0, r3
 8006d18:	f008 fb39 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006d1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d20:	4619      	mov	r1, r3
 8006d22:	4620      	mov	r0, r4
 8006d24:	47a8      	blx	r5
 8006d26:	4605      	mov	r5, r0
 8006d28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d2c:	4971      	ldr	r1, [pc, #452]	; (8006ef4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x238>)
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f008 fb2d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d3e:	4413      	add	r3, r2
 8006d40:	f853 4cac 	ldr.w	r4, [r3, #-172]
 8006d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d4e:	4413      	add	r3, r2
 8006d50:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7f9 fa71 	bl	800023c <strlen>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8006d60:	4622      	mov	r2, r4
 8006d62:	4628      	mov	r0, r5
 8006d64:	f7fd fe32 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	332c      	adds	r3, #44	; 0x2c
 8006d6e:	681d      	ldr	r5, [r3, #0]
 8006d70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d74:	4960      	ldr	r1, [pc, #384]	; (8006ef8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x23c>)
 8006d76:	4618      	mov	r0, r3
 8006d78:	f008 fb09 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d86:	4413      	add	r3, r2
 8006d88:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7f9 fa55 	bl	800023c <strlen>
 8006d92:	4603      	mov	r3, r0
 8006d94:	461a      	mov	r2, r3
 8006d96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	47a8      	blx	r5
 8006da0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006da4:	4618      	mov	r0, r3
 8006da6:	f008 feaa 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006daa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006dae:	4618      	mov	r0, r3
 8006db0:	f008 fea5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006db4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006db8:	4618      	mov	r0, r3
 8006dba:	f008 fea0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006dbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f008 fe9b 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dd2:	e789      	b.n	8006ce8 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006dda:	4948      	ldr	r1, [pc, #288]	; (8006efc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x240>)
 8006ddc:	4848      	ldr	r0, [pc, #288]	; (8006f00 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x244>)
 8006dde:	f7fd f8dd 	bl	8003f9c <Connect_TCP_Server>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 8006de8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d15d      	bne.n	8006eac <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>
		{
			break;
		}

		if(i<3)
 8006df0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	dcf0      	bgt.n	8006dda <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x11e>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dfe:	f107 0214 	add.w	r2, r7, #20
 8006e02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e06:	2132      	movs	r1, #50	; 0x32
 8006e08:	fb01 f303 	mul.w	r3, r1, r3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7f9 fa14 	bl	800023c <strlen>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	da3f      	bge.n	8006ea0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006e20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e24:	4931      	ldr	r1, [pc, #196]	; (8006eec <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x230>)
 8006e26:	4618      	mov	r0, r3
 8006e28:	f008 fab1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006e2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f006 fb84 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	681d      	ldr	r5, [r3, #0]
 8006e40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e44:	492f      	ldr	r1, [pc, #188]	; (8006f04 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x248>)
 8006e46:	4618      	mov	r0, r3
 8006e48:	f008 faa1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006e4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e50:	4619      	mov	r1, r3
 8006e52:	4620      	mov	r0, r4
 8006e54:	47a8      	blx	r5
 8006e56:	4603      	mov	r3, r0
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	3264      	adds	r2, #100	; 0x64
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006e62:	2032      	movs	r0, #50	; 0x32
 8006e64:	fb00 f101 	mul.w	r1, r0, r1
 8006e68:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006e6c:	4408      	add	r0, r1
 8006e6e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006e72:	4401      	add	r1, r0
 8006e74:	39a4      	subs	r1, #164	; 0xa4
 8006e76:	7809      	ldrb	r1, [r1, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	4790      	blx	r2
 8006e7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f008 fe3c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8006e86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f008 fe37 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006e90:	f7fc ff32 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e98:	3301      	adds	r3, #1
 8006e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e9e:	e7ae      	b.n	8006dfe <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x142>
			}
			i++;
 8006ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 8006eaa:	e796      	b.n	8006dda <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x11e>
			break;
 8006eac:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006eae:	f00f fe51 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	3338      	adds	r3, #56	; 0x38
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 8006ebe:	f00f fe59 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	9302      	str	r3, [sp, #8]
 8006ec6:	f44f 7305 	mov.w	r3, #532	; 0x214
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	; (8006f08 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x24c>)
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x250>)
 8006ed2:	4632      	mov	r2, r6
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	47a8      	blx	r5

}
 8006eda:	bf00      	nop
 8006edc:	37bc      	adds	r7, #188	; 0xbc
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	080263ac 	.word	0x080263ac
 8006ee8:	08026410 	.word	0x08026410
 8006eec:	08026060 	.word	0x08026060
 8006ef0:	08026064 	.word	0x08026064
 8006ef4:	08026078 	.word	0x08026078
 8006ef8:	08026080 	.word	0x08026080
 8006efc:	0802639c 	.word	0x0802639c
 8006f00:	080263a0 	.word	0x080263a0
 8006f04:	08026088 	.word	0x08026088
 8006f08:	08025d30 	.word	0x08025d30
 8006f0c:	080262c4 	.word	0x080262c4

08006f10 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fbe4 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006f20:	4a03      	ldr	r2, [pc, #12]	; (8006f30 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	0802a00c 	.word	0x0802a00c

08006f34 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006f40:	4906      	ldr	r1, [pc, #24]	; (8006f5c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006f42:	2004      	movs	r0, #4
 8006f44:	f005 fe60 	bl	800cc08 <_ZnwjPKci>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f7ff ffe0 	bl	8006f10 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006f50:	4623      	mov	r3, r4
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd90      	pop	{r4, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08025d30 	.word	0x08025d30

08006f60 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f00e fa3a 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8006f70:	4a03      	ldr	r2, [pc, #12]	; (8006f80 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	08029f60 	.word	0x08029f60

08006f84 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f86:	b093      	sub	sp, #76	; 0x4c
 8006f88:	af04      	add	r7, sp, #16
 8006f8a:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8006f8c:	4a42      	ldr	r2, [pc, #264]	; (8007098 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x114>)
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f96:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[0], strlen(fake_command_buffer[0])).withIntParameter("size", strlen(fake_command_buffer[0]));
 8006f9a:	f107 0314 	add.w	r3, r7, #20
 8006f9e:	493f      	ldr	r1, [pc, #252]	; (800709c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x118>)
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f008 f9f4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006fa6:	f107 0314 	add.w	r3, r7, #20
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f006 fac7 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	6823      	ldr	r3, [r4, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	681d      	ldr	r5, [r3, #0]
 8006fba:	f107 031c 	add.w	r3, r7, #28
 8006fbe:	4938      	ldr	r1, [pc, #224]	; (80070a0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x11c>)
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f008 f9e4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006fc6:	f107 031c 	add.w	r3, r7, #28
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4620      	mov	r0, r4
 8006fce:	47a8      	blx	r5
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd6:	4933      	ldr	r1, [pc, #204]	; (80070a4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x120>)
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f008 f9d8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8006fde:	68fc      	ldr	r4, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7f9 f92a 	bl	800023c <strlen>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f7fd fceb 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	332c      	adds	r3, #44	; 0x2c
 8006ffc:	681d      	ldr	r5, [r3, #0]
 8006ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007002:	4929      	ldr	r1, [pc, #164]	; (80070a8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x124>)
 8007004:	4618      	mov	r0, r3
 8007006:	f008 f9c2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 f915 	bl	800023c <strlen>
 8007012:	4603      	mov	r3, r0
 8007014:	461a      	mov	r2, r3
 8007016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800701a:	4619      	mov	r1, r3
 800701c:	4620      	mov	r0, r4
 800701e:	47a8      	blx	r5
 8007020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007024:	4618      	mov	r0, r3
 8007026:	f008 fd6a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800702a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702e:	4618      	mov	r0, r3
 8007030:	f008 fd65 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007034:	f107 031c 	add.w	r3, r7, #28
 8007038:	4618      	mov	r0, r3
 800703a:	f008 fd60 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800703e:	f107 0314 	add.w	r3, r7, #20
 8007042:	4618      	mov	r0, r3
 8007044:	f008 fd5b 	bl	800fafe <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8007048:	4918      	ldr	r1, [pc, #96]	; (80070ac <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x128>)
 800704a:	4819      	ldr	r0, [pc, #100]	; (80070b0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x12c>)
 800704c:	f7fc ffa6 	bl	8003f9c <Connect_TCP_Server>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(response != IDLE)
 8007056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800705a:	2b04      	cmp	r3, #4
 800705c:	d100      	bne.n	8007060 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800705e:	e7f3      	b.n	8007048 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xc4>
		{
			break;
 8007060:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8007062:	f00f fd77 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007066:	4604      	mov	r4, r0
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	3338      	adds	r3, #56	; 0x38
 800706c:	681d      	ldr	r5, [r3, #0]
 800706e:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 8007072:	f00f fd7f 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007076:	4603      	mov	r3, r0
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	f240 232f 	movw	r3, #559	; 0x22f
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x130>)
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x134>)
 8007086:	4632      	mov	r2, r6
 8007088:	2101      	movs	r1, #1
 800708a:	4620      	mov	r0, r4
 800708c:	47a8      	blx	r5

}
 800708e:	bf00      	nop
 8007090:	373c      	adds	r7, #60	; 0x3c
 8007092:	46bd      	mov	sp, r7
 8007094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007096:	bf00      	nop
 8007098:	08026410 	.word	0x08026410
 800709c:	08026060 	.word	0x08026060
 80070a0:	08026064 	.word	0x08026064
 80070a4:	08026078 	.word	0x08026078
 80070a8:	08026080 	.word	0x08026080
 80070ac:	0802639c 	.word	0x0802639c
 80070b0:	080263a0 	.word	0x080263a0
 80070b4:	08025d30 	.word	0x08025d30
 80070b8:	0802613c 	.word	0x0802613c

080070bc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fb0e 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80070cc:	4a03      	ldr	r2, [pc, #12]	; (80070dc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	08029f40 	.word	0x08029f40

080070e0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	f240 2233 	movw	r2, #563	; 0x233
 80070ec:	4906      	ldr	r1, [pc, #24]	; (8007108 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 80070ee:	2004      	movs	r0, #4
 80070f0:	f005 fd8a 	bl	800cc08 <_ZnwjPKci>
 80070f4:	4604      	mov	r4, r0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ffe0 	bl	80070bc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 80070fc:	4623      	mov	r3, r4
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bd90      	pop	{r4, r7, pc}
 8007106:	bf00      	nop
 8007108:	08025d30 	.word	0x08025d30

0800710c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	f00e f964 	bl	80153e4 <_ZN10UtestShellC1Ev>
 800711c:	4a03      	ldr	r2, [pc, #12]	; (800712c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08029e94 	.word	0x08029e94

08007130 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8007130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007132:	b0b3      	sub	sp, #204	; 0xcc
 8007134:	af04      	add	r7, sp, #16
 8007136:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8007138:	4a87      	ldr	r2, [pc, #540]	; (8007358 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x228>)
 800713a:	f107 0314 	add.w	r3, r7, #20
 800713e:	4611      	mov	r1, r2
 8007140:	2264      	movs	r2, #100	; 0x64
 8007142:	4618      	mov	r0, r3
 8007144:	f01b fdfa 	bl	8022d3c <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8007148:	4a84      	ldr	r2, [pc, #528]	; (800735c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x22c>)
 800714a:	f107 030c 	add.w	r3, r7, #12
 800714e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007152:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8007156:	2300      	movs	r3, #0
 8007158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800715c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007160:	2b01      	cmp	r3, #1
 8007162:	dc71      	bgt.n	8007248 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x118>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 8007164:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007168:	497d      	ldr	r1, [pc, #500]	; (8007360 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x230>)
 800716a:	4618      	mov	r0, r3
 800716c:	f008 f90f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007170:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f006 f9e2 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800717c:	4604      	mov	r4, r0
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	681d      	ldr	r5, [r3, #0]
 8007184:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007188:	4976      	ldr	r1, [pc, #472]	; (8007364 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x234>)
 800718a:	4618      	mov	r0, r3
 800718c:	f008 f8ff 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007190:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007194:	4619      	mov	r1, r3
 8007196:	4620      	mov	r0, r4
 8007198:	47a8      	blx	r5
 800719a:	4605      	mov	r5, r0
 800719c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80071a0:	4971      	ldr	r1, [pc, #452]	; (8007368 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x238>)
 80071a2:	4618      	mov	r0, r3
 80071a4:	f008 f8f3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80071a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80071b2:	4413      	add	r3, r2
 80071b4:	f853 4cac 	ldr.w	r4, [r3, #-172]
 80071b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80071c2:	4413      	add	r3, r2
 80071c4:	f853 3cac 	ldr.w	r3, [r3, #-172]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7f9 f837 	bl	800023c <strlen>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80071d4:	4622      	mov	r2, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7fd fbf8 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80071dc:	4604      	mov	r4, r0
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	332c      	adds	r3, #44	; 0x2c
 80071e2:	681d      	ldr	r5, [r3, #0]
 80071e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80071e8:	4960      	ldr	r1, [pc, #384]	; (800736c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x23c>)
 80071ea:	4618      	mov	r0, r3
 80071ec:	f008 f8cf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80071f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80071fa:	4413      	add	r3, r2
 80071fc:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8007200:	4618      	mov	r0, r3
 8007202:	f7f9 f81b 	bl	800023c <strlen>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800720e:	4619      	mov	r1, r3
 8007210:	4620      	mov	r0, r4
 8007212:	47a8      	blx	r5
 8007214:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007218:	4618      	mov	r0, r3
 800721a:	f008 fc70 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800721e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007222:	4618      	mov	r0, r3
 8007224:	f008 fc6b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007228:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800722c:	4618      	mov	r0, r3
 800722e:	f008 fc66 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007232:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007236:	4618      	mov	r0, r3
 8007238:	f008 fc61 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 800723c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007240:	3301      	adds	r3, #1
 8007242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007246:	e789      	b.n	800715c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 800724e:	4948      	ldr	r1, [pc, #288]	; (8007370 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x240>)
 8007250:	4848      	ldr	r0, [pc, #288]	; (8007374 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x244>)
 8007252:	f7fc fea3 	bl	8003f9c <Connect_TCP_Server>
 8007256:	4603      	mov	r3, r0
 8007258:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 800725c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8007260:	2b04      	cmp	r3, #4
 8007262:	d15d      	bne.n	8007320 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>
		{
			break;
		}

		if(i<3)
 8007264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007268:	2b02      	cmp	r3, #2
 800726a:	dcf0      	bgt.n	800724e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x11e>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800726c:	2300      	movs	r3, #0
 800726e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007272:	f107 0214 	add.w	r2, r7, #20
 8007276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800727a:	2132      	movs	r1, #50	; 0x32
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	4413      	add	r3, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f7f8 ffda 	bl	800023c <strlen>
 8007288:	4603      	mov	r3, r0
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007290:	4293      	cmp	r3, r2
 8007292:	da3f      	bge.n	8007314 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8007294:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007298:	4931      	ldr	r1, [pc, #196]	; (8007360 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x230>)
 800729a:	4618      	mov	r0, r3
 800729c:	f008 f877 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80072a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f006 f94a 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80072ac:	4604      	mov	r4, r0
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	681d      	ldr	r5, [r3, #0]
 80072b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80072b8:	492f      	ldr	r1, [pc, #188]	; (8007378 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x248>)
 80072ba:	4618      	mov	r0, r3
 80072bc:	f008 f867 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80072c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80072c4:	4619      	mov	r1, r3
 80072c6:	4620      	mov	r0, r4
 80072c8:	47a8      	blx	r5
 80072ca:	4603      	mov	r3, r0
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	3264      	adds	r2, #100	; 0x64
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80072d6:	2032      	movs	r0, #50	; 0x32
 80072d8:	fb00 f101 	mul.w	r1, r0, r1
 80072dc:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80072e0:	4408      	add	r0, r1
 80072e2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80072e6:	4401      	add	r1, r0
 80072e8:	39a4      	subs	r1, #164	; 0xa4
 80072ea:	7809      	ldrb	r1, [r1, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	4790      	blx	r2
 80072f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f008 fc02 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80072fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80072fe:	4618      	mov	r0, r3
 8007300:	f008 fbfd 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007304:	f7fc fcf8 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800730c:	3301      	adds	r3, #1
 800730e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007312:	e7ae      	b.n	8007272 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x142>
			}
			i++;
 8007314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 800731e:	e796      	b.n	800724e <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x11e>
			break;
 8007320:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8007322:	f00f fc17 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007326:	4604      	mov	r4, r0
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	3338      	adds	r3, #56	; 0x38
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 8007332:	f00f fc1f 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007336:	4603      	mov	r3, r0
 8007338:	9302      	str	r3, [sp, #8]
 800733a:	f240 235b 	movw	r3, #603	; 0x25b
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x24c>)
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x250>)
 8007346:	4632      	mov	r2, r6
 8007348:	2103      	movs	r1, #3
 800734a:	4620      	mov	r0, r4
 800734c:	47a8      	blx	r5

}
 800734e:	bf00      	nop
 8007350:	37bc      	adds	r7, #188	; 0xbc
 8007352:	46bd      	mov	sp, r7
 8007354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007356:	bf00      	nop
 8007358:	08026418 	.word	0x08026418
 800735c:	08026410 	.word	0x08026410
 8007360:	08026060 	.word	0x08026060
 8007364:	08026064 	.word	0x08026064
 8007368:	08026078 	.word	0x08026078
 800736c:	08026080 	.word	0x08026080
 8007370:	0802639c 	.word	0x0802639c
 8007374:	080263a0 	.word	0x080263a0
 8007378:	08026088 	.word	0x08026088
 800737c:	08025d30 	.word	0x08025d30
 8007380:	08026168 	.word	0x08026168

08007384 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe f9aa 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007394:	4a03      	ldr	r2, [pc, #12]	; (80073a4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	08029e74 	.word	0x08029e74

080073a8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	f240 225f 	movw	r2, #607	; 0x25f
 80073b4:	4906      	ldr	r1, [pc, #24]	; (80073d0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 80073b6:	2004      	movs	r0, #4
 80073b8:	f005 fc26 	bl	800cc08 <_ZnwjPKci>
 80073bc:	4604      	mov	r4, r0
 80073be:	4620      	mov	r0, r4
 80073c0:	f7ff ffe0 	bl	8007384 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 80073c4:	4623      	mov	r3, r4
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	08025d30 	.word	0x08025d30

080073d4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4618      	mov	r0, r3
 80073e0:	f00e f800 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80073e4:	4a03      	ldr	r2, [pc, #12]	; (80073f4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	08029dc8 	.word	0x08029dc8

080073f8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 80073f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073fa:	b095      	sub	sp, #84	; 0x54
 80073fc:	af04      	add	r7, sp, #16
 80073fe:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CIPCLOSE, strlen(AT_CIPCLOSE)).withIntParameter("size", strlen(AT_CIPCLOSE));
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4954      	ldr	r1, [pc, #336]	; (8007558 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x160>)
 8007406:	4618      	mov	r0, r3
 8007408:	f007 ffc1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800740c:	f107 0308 	add.w	r3, r7, #8
 8007410:	2100      	movs	r1, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f006 f894 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007418:	4604      	mov	r4, r0
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	681d      	ldr	r5, [r3, #0]
 8007420:	f107 0310 	add.w	r3, r7, #16
 8007424:	494d      	ldr	r1, [pc, #308]	; (800755c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x164>)
 8007426:	4618      	mov	r0, r3
 8007428:	f007 ffb1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800742c:	f107 0310 	add.w	r3, r7, #16
 8007430:	4619      	mov	r1, r3
 8007432:	4620      	mov	r0, r4
 8007434:	47a8      	blx	r5
 8007436:	4604      	mov	r4, r0
 8007438:	f107 0318 	add.w	r3, r7, #24
 800743c:	4948      	ldr	r1, [pc, #288]	; (8007560 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x168>)
 800743e:	4618      	mov	r0, r3
 8007440:	f007 ffa5 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007444:	f107 0118 	add.w	r1, r7, #24
 8007448:	230d      	movs	r3, #13
 800744a:	4a46      	ldr	r2, [pc, #280]	; (8007564 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x16c>)
 800744c:	4620      	mov	r0, r4
 800744e:	f7fd fabd 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007452:	4604      	mov	r4, r0
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	332c      	adds	r3, #44	; 0x2c
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	f107 0320 	add.w	r3, r7, #32
 800745e:	4942      	ldr	r1, [pc, #264]	; (8007568 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x170>)
 8007460:	4618      	mov	r0, r3
 8007462:	f007 ff94 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007466:	f107 0320 	add.w	r3, r7, #32
 800746a:	220d      	movs	r2, #13
 800746c:	4619      	mov	r1, r3
 800746e:	4620      	mov	r0, r4
 8007470:	47a8      	blx	r5
 8007472:	f107 0320 	add.w	r3, r7, #32
 8007476:	4618      	mov	r0, r3
 8007478:	f008 fb41 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800747c:	f107 0318 	add.w	r3, r7, #24
 8007480:	4618      	mov	r0, r3
 8007482:	f008 fb3c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	4618      	mov	r0, r3
 800748c:	f008 fb37 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	4618      	mov	r0, r3
 8007496:	f008 fb32 	bl	800fafe <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 800749a:	f7fc fdc3 	bl	8004024 <Disconnect_TCP_Server>
 800749e:	4603      	mov	r3, r0
 80074a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 80074a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d139      	bne.n	8007520 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x128>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	dcf1      	bgt.n	800749a <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xa2>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 80074b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074ba:	4927      	ldr	r1, [pc, #156]	; (8007558 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x160>)
 80074bc:	4618      	mov	r0, r3
 80074be:	f007 ff66 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80074c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f006 f839 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80074ce:	4604      	mov	r4, r0
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	681d      	ldr	r5, [r3, #0]
 80074d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074da:	4924      	ldr	r1, [pc, #144]	; (800756c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x174>)
 80074dc:	4618      	mov	r0, r3
 80074de:	f007 ff56 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80074e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074e6:	4619      	mov	r1, r3
 80074e8:	4620      	mov	r0, r4
 80074ea:	47a8      	blx	r5
 80074ec:	4603      	mov	r3, r0
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	3264      	adds	r2, #100	; 0x64
 80074f2:	6812      	ldr	r2, [r2, #0]
 80074f4:	481e      	ldr	r0, [pc, #120]	; (8007570 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x178>)
 80074f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f8:	4401      	add	r1, r0
 80074fa:	7809      	ldrb	r1, [r1, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	4790      	blx	r2
 8007500:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007504:	4618      	mov	r0, r3
 8007506:	f008 fafa 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800750a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800750e:	4618      	mov	r0, r3
 8007510:	f008 faf5 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8007514:	f7fc fbf0 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8007518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751a:	3301      	adds	r3, #1
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800751e:	e7c7      	b.n	80074b0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xb8>
			break;
 8007520:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8007522:	f00f fb17 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007526:	4604      	mov	r4, r0
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	3338      	adds	r3, #56	; 0x38
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 8007532:	f00f fb1f 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007536:	4603      	mov	r3, r0
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	f44f 731d 	mov.w	r3, #628	; 0x274
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x17c>)
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x180>)
 8007546:	4632      	mov	r2, r6
 8007548:	2102      	movs	r1, #2
 800754a:	4620      	mov	r0, r4
 800754c:	47a8      	blx	r5

}
 800754e:	bf00      	nop
 8007550:	3744      	adds	r7, #68	; 0x44
 8007552:	46bd      	mov	sp, r7
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007556:	bf00      	nop
 8007558:	08026060 	.word	0x08026060
 800755c:	08026064 	.word	0x08026064
 8007560:	08026078 	.word	0x08026078
 8007564:	0802647c 	.word	0x0802647c
 8007568:	08026080 	.word	0x08026080
 800756c:	08026088 	.word	0x08026088
 8007570:	08025cb0 	.word	0x08025cb0
 8007574:	08025d30 	.word	0x08025d30
 8007578:	080262c4 	.word	0x080262c4

0800757c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe f8ae 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800758c:	4a03      	ldr	r2, [pc, #12]	; (800759c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	08029da8 	.word	0x08029da8

080075a0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 80075a0:	b590      	push	{r4, r7, lr}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	f44f 721e 	mov.w	r2, #632	; 0x278
 80075ac:	4906      	ldr	r1, [pc, #24]	; (80075c8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80075ae:	2004      	movs	r0, #4
 80075b0:	f005 fb2a 	bl	800cc08 <_ZnwjPKci>
 80075b4:	4604      	mov	r4, r0
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7ff ffe0 	bl	800757c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 80075bc:	4623      	mov	r3, r4
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08025d30 	.word	0x08025d30

080075cc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f00d ff04 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80075dc:	4a03      	ldr	r2, [pc, #12]	; (80075ec <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	08029cfc 	.word	0x08029cfc

080075f0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 80075f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f2:	b0b7      	sub	sp, #220	; 0xdc
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	char response_arr[2][50] =
 80075fe:	4a92      	ldr	r2, [pc, #584]	; (8007848 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x258>)
 8007600:	f107 0308 	add.w	r3, r7, #8
 8007604:	4611      	mov	r1, r2
 8007606:	2264      	movs	r2, #100	; 0x64
 8007608:	4618      	mov	r0, r3
 800760a:	f01b fb97 	bl	8022d3c <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT+CIPSEND=11\r\n", strlen("AT+CIPSEND=11\r\n")).withIntParameter("size", strlen("AT+CIPSEND=11\r\n"));
 800760e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007612:	498e      	ldr	r1, [pc, #568]	; (800784c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 8007614:	4618      	mov	r0, r3
 8007616:	f007 feba 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800761a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800761e:	2100      	movs	r1, #0
 8007620:	4618      	mov	r0, r3
 8007622:	f005 ff8d 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007626:	4604      	mov	r4, r0
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	681d      	ldr	r5, [r3, #0]
 800762e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007632:	4987      	ldr	r1, [pc, #540]	; (8007850 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x260>)
 8007634:	4618      	mov	r0, r3
 8007636:	f007 feaa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800763a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800763e:	4619      	mov	r1, r3
 8007640:	4620      	mov	r0, r4
 8007642:	47a8      	blx	r5
 8007644:	4604      	mov	r4, r0
 8007646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800764a:	4982      	ldr	r1, [pc, #520]	; (8007854 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 800764c:	4618      	mov	r0, r3
 800764e:	f007 fe9e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007652:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8007656:	230f      	movs	r3, #15
 8007658:	4a7f      	ldr	r2, [pc, #508]	; (8007858 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x268>)
 800765a:	4620      	mov	r0, r4
 800765c:	f7fd f9b6 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007660:	4604      	mov	r4, r0
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	332c      	adds	r3, #44	; 0x2c
 8007666:	681d      	ldr	r5, [r3, #0]
 8007668:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800766c:	497b      	ldr	r1, [pc, #492]	; (800785c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 800766e:	4618      	mov	r0, r3
 8007670:	f007 fe8d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007674:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007678:	220f      	movs	r2, #15
 800767a:	4619      	mov	r1, r3
 800767c:	4620      	mov	r0, r4
 800767e:	47a8      	blx	r5
 8007680:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007684:	4618      	mov	r0, r3
 8007686:	f008 fa3a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800768a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800768e:	4618      	mov	r0, r3
 8007690:	f008 fa35 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007694:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007698:	4618      	mov	r0, r3
 800769a:	f008 fa30 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800769e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80076a2:	4618      	mov	r0, r3
 80076a4:	f008 fa2b 	bl	800fafe <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"Hello World", strlen("Hello World")).withIntParameter("size", strlen("Hello World"));
 80076a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80076ac:	4967      	ldr	r1, [pc, #412]	; (800784c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f007 fe6d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80076b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f005 ff40 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80076c0:	4604      	mov	r4, r0
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	330c      	adds	r3, #12
 80076c6:	681d      	ldr	r5, [r3, #0]
 80076c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80076cc:	4960      	ldr	r1, [pc, #384]	; (8007850 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x260>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f007 fe5d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80076d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80076d8:	4619      	mov	r1, r3
 80076da:	4620      	mov	r0, r4
 80076dc:	47a8      	blx	r5
 80076de:	4604      	mov	r4, r0
 80076e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80076e4:	495b      	ldr	r1, [pc, #364]	; (8007854 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 80076e6:	4618      	mov	r0, r3
 80076e8:	f007 fe51 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80076ec:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80076f0:	230b      	movs	r3, #11
 80076f2:	4a5b      	ldr	r2, [pc, #364]	; (8007860 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x270>)
 80076f4:	4620      	mov	r0, r4
 80076f6:	f7fd f969 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80076fa:	4604      	mov	r4, r0
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	332c      	adds	r3, #44	; 0x2c
 8007700:	681d      	ldr	r5, [r3, #0]
 8007702:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007706:	4955      	ldr	r1, [pc, #340]	; (800785c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 8007708:	4618      	mov	r0, r3
 800770a:	f007 fe40 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800770e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007712:	220b      	movs	r2, #11
 8007714:	4619      	mov	r1, r3
 8007716:	4620      	mov	r0, r4
 8007718:	47a8      	blx	r5
 800771a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800771e:	4618      	mov	r0, r3
 8007720:	f008 f9ed 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007728:	4618      	mov	r0, r3
 800772a:	f008 f9e8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800772e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007732:	4618      	mov	r0, r3
 8007734:	f008 f9e3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800773c:	4618      	mov	r0, r3
 800773e:	f008 f9de 	bl	800fafe <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 8007742:	4847      	ldr	r0, [pc, #284]	; (8007860 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x270>)
 8007744:	f7fc fc8a 	bl	800405c <Send_TCP_Message>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if(response != IDLE)
 800774e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8007752:	2b04      	cmp	r3, #4
 8007754:	d15d      	bne.n	8007812 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x222>
		{
			break;
		}

		if(i<2)
 8007756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800775a:	2b01      	cmp	r3, #1
 800775c:	dcf1      	bgt.n	8007742 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x152>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007764:	f107 0208 	add.w	r2, r7, #8
 8007768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800776c:	2132      	movs	r1, #50	; 0x32
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	4413      	add	r3, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f7f8 fd61 	bl	800023c <strlen>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007782:	4293      	cmp	r3, r2
 8007784:	da3f      	bge.n	8007806 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x216>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8007786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800778a:	4930      	ldr	r1, [pc, #192]	; (800784c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 800778c:	4618      	mov	r0, r3
 800778e:	f007 fdfe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007792:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f005 fed1 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800779e:	4604      	mov	r4, r0
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80077aa:	492e      	ldr	r1, [pc, #184]	; (8007864 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x274>)
 80077ac:	4618      	mov	r0, r3
 80077ae:	f007 fdee 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80077b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4620      	mov	r0, r4
 80077ba:	47a8      	blx	r5
 80077bc:	4603      	mov	r3, r0
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	3264      	adds	r2, #100	; 0x64
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80077c8:	2032      	movs	r0, #50	; 0x32
 80077ca:	fb00 f101 	mul.w	r1, r0, r1
 80077ce:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80077d2:	4408      	add	r0, r1
 80077d4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80077d8:	4401      	add	r1, r0
 80077da:	39c0      	subs	r1, #192	; 0xc0
 80077dc:	7809      	ldrb	r1, [r1, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	4790      	blx	r2
 80077e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f008 f989 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80077ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80077f0:	4618      	mov	r0, r3
 80077f2:	f008 f984 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80077f6:	f7fc fa7f 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80077fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077fe:	3301      	adds	r3, #1
 8007800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007804:	e7ae      	b.n	8007764 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x174>
			}
			i++;
 8007806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800780a:	3301      	adds	r3, #1
 800780c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		}

	}
 8007810:	e797      	b.n	8007742 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x152>
			break;
 8007812:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8007814:	f00f f99e 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007818:	4604      	mov	r4, r0
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	3338      	adds	r3, #56	; 0x38
 800781e:	681d      	ldr	r5, [r3, #0]
 8007820:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 8007824:	f00f f9a6 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007828:	4603      	mov	r3, r0
 800782a:	9302      	str	r3, [sp, #8]
 800782c:	f240 2399 	movw	r3, #665	; 0x299
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x278>)
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x27c>)
 8007838:	4632      	mov	r2, r6
 800783a:	2102      	movs	r1, #2
 800783c:	4620      	mov	r0, r4
 800783e:	47a8      	blx	r5

}
 8007840:	bf00      	nop
 8007842:	37cc      	adds	r7, #204	; 0xcc
 8007844:	46bd      	mov	sp, r7
 8007846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007848:	0802649c 	.word	0x0802649c
 800784c:	08026060 	.word	0x08026060
 8007850:	08026064 	.word	0x08026064
 8007854:	08026078 	.word	0x08026078
 8007858:	0802648c 	.word	0x0802648c
 800785c:	08026080 	.word	0x08026080
 8007860:	08025f70 	.word	0x08025f70
 8007864:	08026088 	.word	0x08026088
 8007868:	08025d30 	.word	0x08025d30
 800786c:	080262c4 	.word	0x080262c4

08007870 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f7fd ff34 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007880:	4a03      	ldr	r2, [pc, #12]	; (8007890 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08029cdc 	.word	0x08029cdc

08007894 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	f240 229d 	movw	r2, #669	; 0x29d
 80078a0:	4906      	ldr	r1, [pc, #24]	; (80078bc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80078a2:	2004      	movs	r0, #4
 80078a4:	f005 f9b0 	bl	800cc08 <_ZnwjPKci>
 80078a8:	4604      	mov	r4, r0
 80078aa:	4620      	mov	r0, r4
 80078ac:	f7ff ffe0 	bl	8007870 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 80078b0:	4623      	mov	r3, r4
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd90      	pop	{r4, r7, pc}
 80078ba:	bf00      	nop
 80078bc:	08025d30 	.word	0x08025d30

080078c0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f00d fd8a 	bl	80153e4 <_ZN10UtestShellC1Ev>
 80078d0:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	08029c30 	.word	0x08029c30

080078e4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b0a3      	sub	sp, #140	; 0x8c
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 80078ec:	4b49      	ldr	r3, [pc, #292]	; (8007a14 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 80078ee:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80078f2:	461d      	mov	r5, r3
 80078f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	605a      	str	r2, [r3, #4]
 8007906:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8007908:	2304      	movs	r3, #4
 800790a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	f107 0310 	add.w	r3, r7, #16
 8007916:	222e      	movs	r2, #46	; 0x2e
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f01b fa1c 	bl	8022d58 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8007920:	2300      	movs	r3, #0
 8007922:	677b      	str	r3, [r7, #116]	; 0x74
 8007924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007928:	4618      	mov	r0, r3
 800792a:	f7f8 fc87 	bl	800023c <strlen>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007934:	4293      	cmp	r3, r2
 8007936:	da35      	bge.n	80079a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8007938:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800793c:	4936      	ldr	r1, [pc, #216]	; (8007a18 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 800793e:	4618      	mov	r0, r3
 8007940:	f007 fd25 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007944:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007948:	2100      	movs	r1, #0
 800794a:	4618      	mov	r0, r3
 800794c:	f005 fdf8 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007950:	4604      	mov	r4, r0
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	681d      	ldr	r5, [r3, #0]
 8007958:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800795c:	492f      	ldr	r1, [pc, #188]	; (8007a1c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 800795e:	4618      	mov	r0, r3
 8007960:	f007 fd15 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007964:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007968:	4619      	mov	r1, r3
 800796a:	4620      	mov	r0, r4
 800796c:	47a8      	blx	r5
 800796e:	4603      	mov	r3, r0
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	3264      	adds	r2, #100	; 0x64
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800797a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800797c:	4401      	add	r1, r0
 800797e:	7809      	ldrb	r1, [r1, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	4790      	blx	r2
 8007984:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007988:	4618      	mov	r0, r3
 800798a:	f008 f8b8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800798e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007992:	4618      	mov	r0, r3
 8007994:	f008 f8b3 	bl	800fafe <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007998:	f7fc f9ae 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800799c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800799e:	3301      	adds	r3, #1
 80079a0:	677b      	str	r3, [r7, #116]	; 0x74
 80079a2:	e7bf      	b.n	8007924 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 80079a4:	f107 030c 	add.w	r3, r7, #12
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fc fc09 	bl	80041c0 <Read_TCP_Message>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 80079b4:	f00f f8ce 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80079b8:	4604      	mov	r4, r0
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	3338      	adds	r3, #56	; 0x38
 80079be:	681d      	ldr	r5, [r3, #0]
 80079c0:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 80079c4:	f00f f8d6 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80079c8:	4603      	mov	r3, r0
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	f240 23ad 	movw	r3, #685	; 0x2ad
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 80079d8:	4632      	mov	r2, r6
 80079da:	2102      	movs	r1, #2
 80079dc:	4620      	mov	r0, r4
 80079de:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 80079e0:	f00f f8b8 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80079e4:	4604      	mov	r4, r0
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	681d      	ldr	r5, [r3, #0]
 80079ec:	f00f f8c2 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f107 020c 	add.w	r2, r7, #12
 80079f6:	9302      	str	r3, [sp, #8]
 80079f8:	f240 23af 	movw	r3, #687	; 0x2af
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	4908      	ldr	r1, [pc, #32]	; (8007a28 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007a06:	4620      	mov	r0, r4
 8007a08:	47a8      	blx	r5

}
 8007a0a:	bf00      	nop
 8007a0c:	377c      	adds	r7, #124	; 0x7c
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	08026530 	.word	0x08026530
 8007a18:	08026060 	.word	0x08026060
 8007a1c:	08026088 	.word	0x08026088
 8007a20:	08025d30 	.word	0x08025d30
 8007a24:	08026500 	.word	0x08026500
 8007a28:	08025f70 	.word	0x08025f70

08007a2c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd fe56 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007a3c:	4a03      	ldr	r2, [pc, #12]	; (8007a4c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	08029c10 	.word	0x08029c10

08007a50 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	f240 22b3 	movw	r2, #691	; 0x2b3
 8007a5c:	4906      	ldr	r1, [pc, #24]	; (8007a78 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 8007a5e:	2004      	movs	r0, #4
 8007a60:	f005 f8d2 	bl	800cc08 <_ZnwjPKci>
 8007a64:	4604      	mov	r4, r0
 8007a66:	4620      	mov	r0, r4
 8007a68:	f7ff ffe0 	bl	8007a2c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08025d30 	.word	0x08025d30

08007a7c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f00d fcac 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8007a8c:	4a03      	ldr	r2, [pc, #12]	; (8007a9c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	08029b64 	.word	0x08029b64

08007aa0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aa2:	b095      	sub	sp, #84	; 0x54
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	f107 0310 	add.w	r3, r7, #16
 8007ab6:	222e      	movs	r2, #46	; 0x2e
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f01b f94c 	bl	8022d58 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fc fbdd 	bl	8004288 <Wait_TCP_Message>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8007ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d100      	bne.n	8007ade <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007adc:	e7f0      	b.n	8007ac0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007ade:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007ae0:	f00f f838 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	3338      	adds	r3, #56	; 0x38
 8007aea:	681d      	ldr	r5, [r3, #0]
 8007aec:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007af0:	f00f f840 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007af4:	4603      	mov	r3, r0
 8007af6:	9302      	str	r3, [sp, #8]
 8007af8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 8007b04:	4632      	mov	r2, r6
 8007b06:	2101      	movs	r1, #1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	47a8      	blx	r5

}
 8007b0c:	bf00      	nop
 8007b0e:	3744      	adds	r7, #68	; 0x44
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b14:	08025d30 	.word	0x08025d30
 8007b18:	080260cc 	.word	0x080260cc

08007b1c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fd fdde 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007b2c:	4a03      	ldr	r2, [pc, #12]	; (8007b3c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	08029b44 	.word	0x08029b44

08007b40 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007b4c:	4906      	ldr	r1, [pc, #24]	; (8007b68 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007b4e:	2004      	movs	r0, #4
 8007b50:	f005 f85a 	bl	800cc08 <_ZnwjPKci>
 8007b54:	4604      	mov	r4, r0
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7ff ffe0 	bl	8007b1c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd90      	pop	{r4, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	08025d30 	.word	0x08025d30

08007b6c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f00d fc34 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8007b7c:	4a03      	ldr	r2, [pc, #12]	; (8007b8c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	08029a98 	.word	0x08029a98

08007b90 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	b0a3      	sub	sp, #140	; 0x8c
 8007b94:	af04      	add	r7, sp, #16
 8007b96:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007b98:	4b4d      	ldr	r3, [pc, #308]	; (8007cd0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007b9a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007b9e:	461d      	mov	r5, r3
 8007ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ba8:	6020      	str	r0, [r4, #0]
 8007baa:	3404      	adds	r4, #4
 8007bac:	8021      	strh	r1, [r4, #0]
 8007bae:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	f107 0310 	add.w	r3, r7, #16
 8007bc6:	222e      	movs	r2, #46	; 0x2e
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f01b f8c4 	bl	8022d58 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007bd0:	f107 030c 	add.w	r3, r7, #12
 8007bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fc fb55 	bl	8004288 <Wait_TCP_Message>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8007be4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007be8:	2b04      	cmp	r3, #4
 8007bea:	d141      	bne.n	8007c70 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007bec:	2300      	movs	r3, #0
 8007bee:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7f8 fb21 	bl	800023c <strlen>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c00:	4293      	cmp	r3, r2
 8007c02:	dae5      	bge.n	8007bd0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8007c04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c08:	4932      	ldr	r1, [pc, #200]	; (8007cd4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f007 fbbf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007c10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f005 fc92 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	681d      	ldr	r5, [r3, #0]
 8007c24:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c28:	492b      	ldr	r1, [pc, #172]	; (8007cd8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f007 fbaf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007c30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c34:	4619      	mov	r1, r3
 8007c36:	4620      	mov	r0, r4
 8007c38:	47a8      	blx	r5
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	3264      	adds	r2, #100	; 0x64
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007c46:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007c48:	4401      	add	r1, r0
 8007c4a:	7809      	ldrb	r1, [r1, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	4790      	blx	r2
 8007c50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007c54:	4618      	mov	r0, r3
 8007c56:	f007 ff52 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007c5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f007 ff4d 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8007c64:	f7fc f848 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	677b      	str	r3, [r7, #116]	; 0x74
 8007c6e:	e7bf      	b.n	8007bf0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8007c70:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007c72:	f00e ff6f 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007c76:	4604      	mov	r4, r0
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	3338      	adds	r3, #56	; 0x38
 8007c7c:	681d      	ldr	r5, [r3, #0]
 8007c7e:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007c82:	f00e ff77 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007c86:	4603      	mov	r3, r0
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	f240 23da 	movw	r3, #730	; 0x2da
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	4b12      	ldr	r3, [pc, #72]	; (8007cdc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4b12      	ldr	r3, [pc, #72]	; (8007ce0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8007c96:	4632      	mov	r2, r6
 8007c98:	2102      	movs	r1, #2
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007c9e:	f00e ff59 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	681d      	ldr	r5, [r3, #0]
 8007caa:	f00e ff63 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f107 020c 	add.w	r2, r7, #12
 8007cb4:	9302      	str	r3, [sp, #8]
 8007cb6:	f240 23db 	movw	r3, #731	; 0x2db
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4908      	ldr	r1, [pc, #32]	; (8007ce4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	47a8      	blx	r5

}
 8007cc8:	bf00      	nop
 8007cca:	377c      	adds	r7, #124	; 0x7c
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd0:	08026560 	.word	0x08026560
 8007cd4:	08026060 	.word	0x08026060
 8007cd8:	08026088 	.word	0x08026088
 8007cdc:	08025d30 	.word	0x08025d30
 8007ce0:	08026500 	.word	0x08026500
 8007ce4:	08026550 	.word	0x08026550

08007ce8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fd fcf8 	bl	80056e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007cf8:	4a03      	ldr	r2, [pc, #12]	; (8007d08 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev+0x20>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	08029a78 	.word	0x08029a78

08007d0c <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv>:
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	f240 22df 	movw	r2, #735	; 0x2df
 8007d18:	4906      	ldr	r1, [pc, #24]	; (8007d34 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv+0x28>)
 8007d1a:	2004      	movs	r0, #4
 8007d1c:	f004 ff74 	bl	800cc08 <_ZnwjPKci>
 8007d20:	4604      	mov	r4, r0
 8007d22:	4620      	mov	r0, r4
 8007d24:	f7ff ffe0 	bl	8007ce8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>
 8007d28:	4623      	mov	r3, r4
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}
 8007d32:	bf00      	nop
 8007d34:	08025d30 	.word	0x08025d30

08007d38 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>:
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f00d fb4e 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8007d48:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev+0x20>)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	080299cc 	.word	0x080299cc

08007d5c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv>:
{
 8007d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d5e:	b0a3      	sub	sp, #140	; 0x8c
 8007d60:	af04      	add	r7, sp, #16
 8007d62:	6078      	str	r0, [r7, #4]
	uint8_t bytesToSend[5] = {0x00,0x0A,0x45,0x02,0x04};
 8007d64:	4aa8      	ldr	r2, [pc, #672]	; (8008008 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2ac>)
 8007d66:	f107 0310 	add.w	r3, r7, #16
 8007d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d6e:	6018      	str	r0, [r3, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	7019      	strb	r1, [r3, #0]
	char *response_buffer[2] =
 8007d74:	4aa5      	ldr	r2, [pc, #660]	; (800800c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b0>)
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d7e:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT+CIPSEND=5\r\n", strlen("AT+CIPSEND=5\r\n")).withIntParameter("size", strlen("AT+CIPSEND=5\r\n"));
 8007d82:	f107 0318 	add.w	r3, r7, #24
 8007d86:	49a2      	ldr	r1, [pc, #648]	; (8008010 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f007 fb00 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007d8e:	f107 0318 	add.w	r3, r7, #24
 8007d92:	2100      	movs	r1, #0
 8007d94:	4618      	mov	r0, r3
 8007d96:	f005 fbd3 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	330c      	adds	r3, #12
 8007da0:	681d      	ldr	r5, [r3, #0]
 8007da2:	f107 0320 	add.w	r3, r7, #32
 8007da6:	499b      	ldr	r1, [pc, #620]	; (8008014 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b8>)
 8007da8:	4618      	mov	r0, r3
 8007daa:	f007 faf0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007dae:	f107 0320 	add.w	r3, r7, #32
 8007db2:	4619      	mov	r1, r3
 8007db4:	4620      	mov	r0, r4
 8007db6:	47a8      	blx	r5
 8007db8:	4604      	mov	r4, r0
 8007dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007dbe:	4996      	ldr	r1, [pc, #600]	; (8008018 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2bc>)
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f007 fae4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007dca:	230e      	movs	r3, #14
 8007dcc:	4a93      	ldr	r2, [pc, #588]	; (800801c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c0>)
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f7fc fdfc 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	332c      	adds	r3, #44	; 0x2c
 8007dda:	681d      	ldr	r5, [r3, #0]
 8007ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007de0:	498f      	ldr	r1, [pc, #572]	; (8008020 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c4>)
 8007de2:	4618      	mov	r0, r3
 8007de4:	f007 fad3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dec:	220e      	movs	r2, #14
 8007dee:	4619      	mov	r1, r3
 8007df0:	4620      	mov	r0, r4
 8007df2:	47a8      	blx	r5
 8007df4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f007 fe80 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e02:	4618      	mov	r0, r3
 8007e04:	f007 fe7b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007e08:	f107 0320 	add.w	r3, r7, #32
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f007 fe76 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007e12:	f107 0318 	add.w	r3, r7, #24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f007 fe71 	bl	800fafe <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", bytesToSend, 5).withIntParameter("size", 5);
 8007e1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e20:	497b      	ldr	r1, [pc, #492]	; (8008010 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007e22:	4618      	mov	r0, r3
 8007e24:	f007 fab3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f005 fb86 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007e34:	4604      	mov	r4, r0
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	681d      	ldr	r5, [r3, #0]
 8007e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e40:	4974      	ldr	r1, [pc, #464]	; (8008014 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b8>)
 8007e42:	4618      	mov	r0, r3
 8007e44:	f007 faa3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007e48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4620      	mov	r0, r4
 8007e50:	47a8      	blx	r5
 8007e52:	4604      	mov	r4, r0
 8007e54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e58:	496f      	ldr	r1, [pc, #444]	; (8008018 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2bc>)
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f007 fa97 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007e60:	f107 0210 	add.w	r2, r7, #16
 8007e64:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007e68:	2305      	movs	r3, #5
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f7fc fdae 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007e70:	4604      	mov	r4, r0
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	332c      	adds	r3, #44	; 0x2c
 8007e76:	681d      	ldr	r5, [r3, #0]
 8007e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e7c:	4968      	ldr	r1, [pc, #416]	; (8008020 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c4>)
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f007 fa85 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e88:	2205      	movs	r2, #5
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	47a8      	blx	r5
 8007e90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e94:	4618      	mov	r0, r3
 8007e96:	f007 fe32 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f007 fe2d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f007 fe28 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007eae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f007 fe23 	bl	800fafe <_ZN12SimpleStringD1Ev>
	Status response = IDLE;
 8007eb8:	2304      	movs	r3, #4
 8007eba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	int i=0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	677b      	str	r3, [r7, #116]	; 0x74
	while(1){

		response = Send_TCP_Bytes(bytesToSend, 5);
 8007ec2:	f107 0310 	add.w	r3, r7, #16
 8007ec6:	2105      	movs	r1, #5
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fc f8ff 	bl	80040cc <Send_TCP_Bytes>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		if(response != IDLE)
 8007ed4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d153      	bne.n	8007f84 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x228>
		{
			break;
		}

		if(i<2)
 8007edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	dcef      	bgt.n	8007ec2 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x166>
		{
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8007ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007eee:	4413      	add	r3, r2
 8007ef0:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7f8 f9a1 	bl	800023c <strlen>
 8007efa:	4603      	mov	r3, r0
 8007efc:	461a      	mov	r2, r3
 8007efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f00:	4293      	cmp	r3, r2
 8007f02:	da3b      	bge.n	8007f7c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x220>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_buffer[i][j]);
 8007f04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f08:	4941      	ldr	r1, [pc, #260]	; (8008010 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f007 fa3f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f005 fb12 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f28:	493e      	ldr	r1, [pc, #248]	; (8008024 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c8>)
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f007 fa2f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8007f30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f34:	4619      	mov	r1, r3
 8007f36:	4620      	mov	r0, r4
 8007f38:	47a8      	blx	r5
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	6813      	ldr	r3, [r2, #0]
 8007f3e:	3364      	adds	r3, #100	; 0x64
 8007f40:	681c      	ldr	r4, [r3, #0]
 8007f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8007f4a:	440b      	add	r3, r1
 8007f4c:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8007f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f52:	440b      	add	r3, r1
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	47a0      	blx	r4
 8007f5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f60:	4618      	mov	r0, r3
 8007f62:	f007 fdcc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8007f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f007 fdc7 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007f70:	f7fb fec2 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f76:	3301      	adds	r3, #1
 8007f78:	673b      	str	r3, [r7, #112]	; 0x70
 8007f7a:	e7b4      	b.n	8007ee6 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x18a>
			}
			i++;
 8007f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f7e:	3301      	adds	r3, #1
 8007f80:	677b      	str	r3, [r7, #116]	; 0x74
		}

	}
 8007f82:	e79e      	b.n	8007ec2 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x166>
			break;
 8007f84:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8007f86:	f00e fde5 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	3338      	adds	r3, #56	; 0x38
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	f897 606b 	ldrb.w	r6, [r7, #107]	; 0x6b
 8007f96:	f00e fded 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	9302      	str	r3, [sp, #8]
 8007f9e:	f240 3301 	movw	r3, #769	; 0x301
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	4b20      	ldr	r3, [pc, #128]	; (8008028 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2cc>)
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d0>)
 8007faa:	4632      	mov	r2, r6
 8007fac:	2102      	movs	r1, #2
 8007fae:	4620      	mov	r0, r4
 8007fb0:	47a8      	blx	r5
	for(uint32_t i=0 ; i<rx_buffer->size; i++)
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d21e      	bcs.n	8008000 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2a4>
		LONGS_EQUAL(0,rx_buffer->buffer[i]);
 8007fc2:	f00e fdc7 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	3338      	adds	r3, #56	; 0x38
 8007fcc:	681d      	ldr	r5, [r3, #0]
 8007fce:	4b18      	ldr	r3, [pc, #96]	; (8008030 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd6:	4413      	add	r3, r2
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	461e      	mov	r6, r3
 8007fdc:	f00e fdca 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	f240 3303 	movw	r3, #771	; 0x303
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2cc>)
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4b11      	ldr	r3, [pc, #68]	; (8008034 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d8>)
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	47a8      	blx	r5
	for(uint32_t i=0 ; i<rx_buffer->size; i++)
 8007ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ffe:	e7da      	b.n	8007fb6 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x25a>

}
 8008000:	bf00      	nop
 8008002:	377c      	adds	r7, #124	; 0x7c
 8008004:	46bd      	mov	sp, r7
 8008006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008008:	080265bc 	.word	0x080265bc
 800800c:	080265c4 	.word	0x080265c4
 8008010:	08026060 	.word	0x08026060
 8008014:	08026064 	.word	0x08026064
 8008018:	08026078 	.word	0x08026078
 800801c:	08026580 	.word	0x08026580
 8008020:	08026080 	.word	0x08026080
 8008024:	08026088 	.word	0x08026088
 8008028:	08025d30 	.word	0x08025d30
 800802c:	080262c4 	.word	0x080262c4
 8008030:	20001120 	.word	0x20001120
 8008034:	08026590 	.word	0x08026590

08008038 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	4a05      	ldr	r2, [pc, #20]	; (8008058 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev+0x20>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	f00d fa1f 	bl	801548c <_ZN10UtestShellD1Ev>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	080299cc 	.word	0x080299cc

0800805c <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD0Ev>:
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff ffe7 	bl	8008038 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
 800806a:	211c      	movs	r1, #28
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f004 fddf 	bl	800cc30 <_ZdlPvj>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>:
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	4a05      	ldr	r2, [pc, #20]	; (800809c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev+0x20>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4618      	mov	r0, r3
 800808e:	f7fd fb3d 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	08029a78 	.word	0x08029a78

080080a0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD0Ev>:
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff ffe7 	bl	800807c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>
 80080ae:	2104      	movs	r1, #4
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f004 fdbd 	bl	800cc30 <_ZdlPvj>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	4a05      	ldr	r2, [pc, #20]	; (80080e0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f00d f9db 	bl	801548c <_ZN10UtestShellD1Ev>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08029a98 	.word	0x08029a98

080080e4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff ffe7 	bl	80080c0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 80080f2:	211c      	movs	r1, #28
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f004 fd9b 	bl	800cc30 <_ZdlPvj>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	4a05      	ldr	r2, [pc, #20]	; (8008124 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4618      	mov	r0, r3
 8008116:	f7fd faf9 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	08029b44 	.word	0x08029b44

08008128 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ffe7 	bl	8008104 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 8008136:	2104      	movs	r1, #4
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f004 fd79 	bl	800cc30 <_ZdlPvj>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	4a05      	ldr	r2, [pc, #20]	; (8008168 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4618      	mov	r0, r3
 800815a:	f00d f997 	bl	801548c <_ZN10UtestShellD1Ev>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	08029b64 	.word	0x08029b64

0800816c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff ffe7 	bl	8008148 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 800817a:	211c      	movs	r1, #28
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f004 fd57 	bl	800cc30 <_ZdlPvj>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	4a05      	ldr	r2, [pc, #20]	; (80081ac <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4618      	mov	r0, r3
 800819e:	f7fd fab5 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	08029c10 	.word	0x08029c10

080081b0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ffe7 	bl	800818c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 80081be:	2104      	movs	r1, #4
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f004 fd35 	bl	800cc30 <_ZdlPvj>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	4a05      	ldr	r2, [pc, #20]	; (80081f0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f00d f953 	bl	801548c <_ZN10UtestShellD1Ev>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	08029c30 	.word	0x08029c30

080081f4 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff ffe7 	bl	80081d0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8008202:	211c      	movs	r1, #28
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f004 fd13 	bl	800cc30 <_ZdlPvj>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	4a05      	ldr	r2, [pc, #20]	; (8008234 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4618      	mov	r0, r3
 8008226:	f7fd fa71 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	08029cdc 	.word	0x08029cdc

08008238 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ffe7 	bl	8008214 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 8008246:	2104      	movs	r1, #4
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f004 fcf1 	bl	800cc30 <_ZdlPvj>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4a05      	ldr	r2, [pc, #20]	; (8008278 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4618      	mov	r0, r3
 800826a:	f00d f90f 	bl	801548c <_ZN10UtestShellD1Ev>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	08029cfc 	.word	0x08029cfc

0800827c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff ffe7 	bl	8008258 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800828a:	211c      	movs	r1, #28
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f004 fccf 	bl	800cc30 <_ZdlPvj>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	4a05      	ldr	r2, [pc, #20]	; (80082bc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fa2d 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	08029da8 	.word	0x08029da8

080082c0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff ffe7 	bl	800829c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 80082ce:	2104      	movs	r1, #4
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f004 fcad 	bl	800cc30 <_ZdlPvj>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	4a05      	ldr	r2, [pc, #20]	; (8008300 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f00d f8cb 	bl	801548c <_ZN10UtestShellD1Ev>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	08029dc8 	.word	0x08029dc8

08008304 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ffe7 	bl	80082e0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 8008312:	211c      	movs	r1, #28
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f004 fc8b 	bl	800cc30 <_ZdlPvj>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	4a05      	ldr	r2, [pc, #20]	; (8008344 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd f9e9 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	08029e74 	.word	0x08029e74

08008348 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ffe7 	bl	8008324 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 8008356:	2104      	movs	r1, #4
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f004 fc69 	bl	800cc30 <_ZdlPvj>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	4a05      	ldr	r2, [pc, #20]	; (8008388 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4618      	mov	r0, r3
 800837a:	f00d f887 	bl	801548c <_ZN10UtestShellD1Ev>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	08029e94 	.word	0x08029e94

0800838c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ffe7 	bl	8008368 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800839a:	211c      	movs	r1, #28
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 fc47 	bl	800cc30 <_ZdlPvj>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	4a05      	ldr	r2, [pc, #20]	; (80083cc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd f9a5 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	08029f40 	.word	0x08029f40

080083d0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ffe7 	bl	80083ac <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 80083de:	2104      	movs	r1, #4
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f004 fc25 	bl	800cc30 <_ZdlPvj>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	4a05      	ldr	r2, [pc, #20]	; (8008410 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4618      	mov	r0, r3
 8008402:	f00d f843 	bl	801548c <_ZN10UtestShellD1Ev>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	08029f60 	.word	0x08029f60

08008414 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff ffe7 	bl	80083f0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 8008422:	211c      	movs	r1, #28
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f004 fc03 	bl	800cc30 <_ZdlPvj>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	4a05      	ldr	r2, [pc, #20]	; (8008454 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4618      	mov	r0, r3
 8008446:	f7fd f961 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4618      	mov	r0, r3
 800844e:	3708      	adds	r7, #8
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	0802a00c 	.word	0x0802a00c

08008458 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff ffe7 	bl	8008434 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 8008466:	2104      	movs	r1, #4
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f004 fbe1 	bl	800cc30 <_ZdlPvj>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	4a05      	ldr	r2, [pc, #20]	; (8008498 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4618      	mov	r0, r3
 800848a:	f00c ffff 	bl	801548c <_ZN10UtestShellD1Ev>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	0802a02c 	.word	0x0802a02c

0800849c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff ffe7 	bl	8008478 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 80084aa:	211c      	movs	r1, #28
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f004 fbbf 	bl	800cc30 <_ZdlPvj>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	4a05      	ldr	r2, [pc, #20]	; (80084dc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fd f91d 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	0802a0d8 	.word	0x0802a0d8

080084e0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7ff ffe7 	bl	80084bc <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 80084ee:	2104      	movs	r1, #4
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f004 fb9d 	bl	800cc30 <_ZdlPvj>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	4a05      	ldr	r2, [pc, #20]	; (8008520 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4618      	mov	r0, r3
 8008512:	f00c ffbb 	bl	801548c <_ZN10UtestShellD1Ev>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	0802a0f8 	.word	0x0802a0f8

08008524 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ffe7 	bl	8008500 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 8008532:	211c      	movs	r1, #28
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f004 fb7b 	bl	800cc30 <_ZdlPvj>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd f8d9 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	0802a1a4 	.word	0x0802a1a4

08008568 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ffe7 	bl	8008544 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8008576:	2104      	movs	r1, #4
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f004 fb59 	bl	800cc30 <_ZdlPvj>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	4a05      	ldr	r2, [pc, #20]	; (80085a8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	f00c ff77 	bl	801548c <_ZN10UtestShellD1Ev>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	0802a1c4 	.word	0x0802a1c4

080085ac <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff ffe7 	bl	8008588 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 80085ba:	211c      	movs	r1, #28
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f004 fb37 	bl	800cc30 <_ZdlPvj>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	4a05      	ldr	r2, [pc, #20]	; (80085ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd f895 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	0802a270 	.word	0x0802a270

080085f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ffe7 	bl	80085cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 80085fe:	2104      	movs	r1, #4
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f004 fb15 	bl	800cc30 <_ZdlPvj>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	4a05      	ldr	r2, [pc, #20]	; (8008630 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4618      	mov	r0, r3
 8008622:	f00c ff33 	bl	801548c <_ZN10UtestShellD1Ev>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	0802a290 	.word	0x0802a290

08008634 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ffe7 	bl	8008610 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8008642:	211c      	movs	r1, #28
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f004 faf3 	bl	800cc30 <_ZdlPvj>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	4a05      	ldr	r2, [pc, #20]	; (8008674 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4618      	mov	r0, r3
 8008666:	f7fd f851 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	0802a33c 	.word	0x0802a33c

08008678 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff ffe7 	bl	8008654 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8008686:	2104      	movs	r1, #4
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f004 fad1 	bl	800cc30 <_ZdlPvj>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	4a05      	ldr	r2, [pc, #20]	; (80086b8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f00c feef 	bl	801548c <_ZN10UtestShellD1Ev>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	0802a35c 	.word	0x0802a35c

080086bc <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff ffe7 	bl	8008698 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 80086ca:	211c      	movs	r1, #28
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f004 faaf 	bl	800cc30 <_ZdlPvj>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	4a05      	ldr	r2, [pc, #20]	; (80086fc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd f80d 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	0802a408 	.word	0x0802a408

08008700 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff ffe7 	bl	80086dc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 800870e:	2104      	movs	r1, #4
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f004 fa8d 	bl	800cc30 <_ZdlPvj>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	4a05      	ldr	r2, [pc, #20]	; (8008740 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4618      	mov	r0, r3
 8008732:	f00c feab 	bl	801548c <_ZN10UtestShellD1Ev>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	0802a428 	.word	0x0802a428

08008744 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7ff ffe7 	bl	8008720 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8008752:	211c      	movs	r1, #28
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fa6b 	bl	800cc30 <_ZdlPvj>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	4a05      	ldr	r2, [pc, #20]	; (8008784 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fc ffc9 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	0802a4d4 	.word	0x0802a4d4

08008788 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff ffe7 	bl	8008764 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8008796:	2104      	movs	r1, #4
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f004 fa49 	bl	800cc30 <_ZdlPvj>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	4a05      	ldr	r2, [pc, #20]	; (80087c8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f00c fe67 	bl	801548c <_ZN10UtestShellD1Ev>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	0802a4f4 	.word	0x0802a4f4

080087cc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ffe7 	bl	80087a8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 80087da:	211c      	movs	r1, #28
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f004 fa27 	bl	800cc30 <_ZdlPvj>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	4a05      	ldr	r2, [pc, #20]	; (800880c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fc ff85 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	0802a5a0 	.word	0x0802a5a0

08008810 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff ffe7 	bl	80087ec <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 800881e:	2104      	movs	r1, #4
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f004 fa05 	bl	800cc30 <_ZdlPvj>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	4a05      	ldr	r2, [pc, #20]	; (8008850 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4618      	mov	r0, r3
 8008842:	f00c fe23 	bl	801548c <_ZN10UtestShellD1Ev>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	0802a5c0 	.word	0x0802a5c0

08008854 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff ffe7 	bl	8008830 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8008862:	211c      	movs	r1, #28
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f004 f9e3 	bl	800cc30 <_ZdlPvj>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	4a05      	ldr	r2, [pc, #20]	; (8008894 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4618      	mov	r0, r3
 8008886:	f7fc ff41 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	0802a66c 	.word	0x0802a66c

08008898 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ffe7 	bl	8008874 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 80088a6:	2104      	movs	r1, #4
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f004 f9c1 	bl	800cc30 <_ZdlPvj>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	4a05      	ldr	r2, [pc, #20]	; (80088d8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f00c fddf 	bl	801548c <_ZN10UtestShellD1Ev>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	0802a68c 	.word	0x0802a68c

080088dc <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff ffe7 	bl	80088b8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 80088ea:	211c      	movs	r1, #28
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f004 f99f 	bl	800cc30 <_ZdlPvj>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	4a05      	ldr	r2, [pc, #20]	; (800891c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	f7fc fefd 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	0802a738 	.word	0x0802a738

08008920 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff ffe7 	bl	80088fc <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 800892e:	2104      	movs	r1, #4
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f004 f97d 	bl	800cc30 <_ZdlPvj>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	4a05      	ldr	r2, [pc, #20]	; (8008960 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	f00c fd9b 	bl	801548c <_ZN10UtestShellD1Ev>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	0802a758 	.word	0x0802a758

08008964 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff ffe7 	bl	8008940 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8008972:	211c      	movs	r1, #28
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f004 f95b 	bl	800cc30 <_ZdlPvj>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	4a05      	ldr	r2, [pc, #20]	; (80089a4 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4618      	mov	r0, r3
 8008996:	f7fc feb9 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0802a804 	.word	0x0802a804

080089a8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ffe7 	bl	8008984 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 80089b6:	2104      	movs	r1, #4
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f004 f939 	bl	800cc30 <_ZdlPvj>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4618      	mov	r0, r3
 80089da:	f00c fd57 	bl	801548c <_ZN10UtestShellD1Ev>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	0802a824 	.word	0x0802a824

080089ec <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff ffe7 	bl	80089c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 80089fa:	211c      	movs	r1, #28
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f004 f917 	bl	800cc30 <_ZdlPvj>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	4a05      	ldr	r2, [pc, #20]	; (8008a2c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fc fe75 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	0802a8d0 	.word	0x0802a8d0

08008a30 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ffe7 	bl	8008a0c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8008a3e:	2104      	movs	r1, #4
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f004 f8f5 	bl	800cc30 <_ZdlPvj>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4a05      	ldr	r2, [pc, #20]	; (8008a70 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f00c fd13 	bl	801548c <_ZN10UtestShellD1Ev>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	0802a8f0 	.word	0x0802a8f0

08008a74 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ffe7 	bl	8008a50 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8008a82:	211c      	movs	r1, #28
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f004 f8d3 	bl	800cc30 <_ZdlPvj>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fc fe31 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	0802a99c 	.word	0x0802a99c

08008ab8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff ffe7 	bl	8008a94 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8008ac6:	2104      	movs	r1, #4
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f004 f8b1 	bl	800cc30 <_ZdlPvj>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	4a05      	ldr	r2, [pc, #20]	; (8008af8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f00c fccf 	bl	801548c <_ZN10UtestShellD1Ev>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	0802a9bc 	.word	0x0802a9bc

08008afc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ffe7 	bl	8008ad8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8008b0a:	211c      	movs	r1, #28
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f004 f88f 	bl	800cc30 <_ZdlPvj>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fc fded 	bl	800570c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4618      	mov	r0, r3
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0802aa68 	.word	0x0802aa68

08008b40 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ffe7 	bl	8008b1c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8008b4e:	2104      	movs	r1, #4
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f004 f86d 	bl	800cc30 <_ZdlPvj>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	4a05      	ldr	r2, [pc, #20]	; (8008b80 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f00c fc8b 	bl	801548c <_ZN10UtestShellD1Ev>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	0802aaa8 	.word	0x0802aaa8

08008b84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff ffe7 	bl	8008b60 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8008b92:	211c      	movs	r1, #28
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f004 f84b 	bl	800cc30 <_ZdlPvj>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	4a05      	ldr	r2, [pc, #20]	; (8008bc4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fb ff4b 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	0802ab54 	.word	0x0802ab54

08008bc8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ffe7 	bl	8008ba4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8008bd6:	2108      	movs	r1, #8
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f004 f829 	bl	800cc30 <_ZdlPvj>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	4a05      	ldr	r2, [pc, #20]	; (8008c08 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f00c fc47 	bl	801548c <_ZN10UtestShellD1Ev>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4618      	mov	r0, r3
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	0802ab74 	.word	0x0802ab74

08008c0c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff ffe7 	bl	8008be8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8008c1a:	211c      	movs	r1, #28
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f004 f807 	bl	800cc30 <_ZdlPvj>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fb ff07 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	0802ac20 	.word	0x0802ac20

08008c50 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ffe7 	bl	8008c2c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8008c5e:	2108      	movs	r1, #8
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f003 ffe5 	bl	800cc30 <_ZdlPvj>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	4a05      	ldr	r2, [pc, #20]	; (8008c90 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00c fc03 	bl	801548c <_ZN10UtestShellD1Ev>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	0802ac40 	.word	0x0802ac40

08008c94 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ffe7 	bl	8008c70 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8008ca2:	211c      	movs	r1, #28
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f003 ffc3 	bl	800cc30 <_ZdlPvj>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	4a05      	ldr	r2, [pc, #20]	; (8008cd4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fb fec3 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	0802acec 	.word	0x0802acec

08008cd8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff ffe7 	bl	8008cb4 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8008ce6:	2108      	movs	r1, #8
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f003 ffa1 	bl	800cc30 <_ZdlPvj>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	4a05      	ldr	r2, [pc, #20]	; (8008d18 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f00c fbbf 	bl	801548c <_ZN10UtestShellD1Ev>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	0802ad0c 	.word	0x0802ad0c

08008d1c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ffe7 	bl	8008cf8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8008d2a:	211c      	movs	r1, #28
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f003 ff7f 	bl	800cc30 <_ZdlPvj>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	4a05      	ldr	r2, [pc, #20]	; (8008d5c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fb fe7f 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	0802adb8 	.word	0x0802adb8

08008d60 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f7ff ffe7 	bl	8008d3c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008d6e:	2108      	movs	r1, #8
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f003 ff5d 	bl	800cc30 <_ZdlPvj>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	4a05      	ldr	r2, [pc, #20]	; (8008da0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00c fb7b 	bl	801548c <_ZN10UtestShellD1Ev>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	0802add8 	.word	0x0802add8

08008da4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff ffe7 	bl	8008d80 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008db2:	211c      	movs	r1, #28
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f003 ff3b 	bl	800cc30 <_ZdlPvj>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	4a05      	ldr	r2, [pc, #20]	; (8008de4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fb fe3b 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	0802ae84 	.word	0x0802ae84

08008de8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ffe7 	bl	8008dc4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008df6:	2108      	movs	r1, #8
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f003 ff19 	bl	800cc30 <_ZdlPvj>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	4a05      	ldr	r2, [pc, #20]	; (8008e28 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f00c fb37 	bl	801548c <_ZN10UtestShellD1Ev>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	0802aea4 	.word	0x0802aea4

08008e2c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff ffe7 	bl	8008e08 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8008e3a:	211c      	movs	r1, #28
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 fef7 	bl	800cc30 <_ZdlPvj>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	4a05      	ldr	r2, [pc, #20]	; (8008e6c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fb fdf7 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	0802af50 	.word	0x0802af50

08008e70 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ffe7 	bl	8008e4c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008e7e:	2108      	movs	r1, #8
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f003 fed5 	bl	800cc30 <_ZdlPvj>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	4a05      	ldr	r2, [pc, #20]	; (8008eb0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f00c faf3 	bl	801548c <_ZN10UtestShellD1Ev>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	0802af70 	.word	0x0802af70

08008eb4 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff ffe7 	bl	8008e90 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008ec2:	211c      	movs	r1, #28
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f003 feb3 	bl	800cc30 <_ZdlPvj>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	4a05      	ldr	r2, [pc, #20]	; (8008ef4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fb fdb3 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	0802b01c 	.word	0x0802b01c

08008ef8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ffe7 	bl	8008ed4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008f06:	2108      	movs	r1, #8
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f003 fe91 	bl	800cc30 <_ZdlPvj>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	4a05      	ldr	r2, [pc, #20]	; (8008f38 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00c faaf 	bl	801548c <_ZN10UtestShellD1Ev>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	0802b03c 	.word	0x0802b03c

08008f3c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ffe7 	bl	8008f18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008f4a:	211c      	movs	r1, #28
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f003 fe6f 	bl	800cc30 <_ZdlPvj>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	4a05      	ldr	r2, [pc, #20]	; (8008f7c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fb fd6f 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	0802b0e8 	.word	0x0802b0e8

08008f80 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff ffe7 	bl	8008f5c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008f8e:	2108      	movs	r1, #8
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f003 fe4d 	bl	800cc30 <_ZdlPvj>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	4a05      	ldr	r2, [pc, #20]	; (8008fc0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f00c fa6b 	bl	801548c <_ZN10UtestShellD1Ev>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	0802b108 	.word	0x0802b108

08008fc4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff ffe7 	bl	8008fa0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008fd2:	211c      	movs	r1, #28
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f003 fe2b 	bl	800cc30 <_ZdlPvj>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	4a05      	ldr	r2, [pc, #20]	; (8009004 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fb fd2b 	bl	8004a50 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0802b1b4 	.word	0x0802b1b4

08009008 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff ffe7 	bl	8008fe4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8009016:	2108      	movs	r1, #8
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f003 fe09 	bl	800cc30 <_ZdlPvj>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <_Z41__static_initialization_and_destruction_0ii>:
}
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af02      	add	r7, sp, #8
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b01      	cmp	r3, #1
 8009036:	f040 8231 	bne.w	800949c <_Z41__static_initialization_and_destruction_0ii+0x474>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009040:	4293      	cmp	r3, r2
 8009042:	f040 822b 	bne.w	800949c <_Z41__static_initialization_and_destruction_0ii+0x474>
TEST(RingBuffer_Test_Group, InitTest)
 8009046:	489f      	ldr	r0, [pc, #636]	; (80092c4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8009048:	f7fb fd50 	bl	8004aec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 800904c:	232c      	movs	r3, #44	; 0x2c
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	4b9d      	ldr	r3, [pc, #628]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4b9d      	ldr	r3, [pc, #628]	; (80092cc <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8009056:	4a9e      	ldr	r2, [pc, #632]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009058:	499a      	ldr	r1, [pc, #616]	; (80092c4 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800905a:	489e      	ldr	r0, [pc, #632]	; (80092d4 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800905c:	f00e f812 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8009060:	489d      	ldr	r0, [pc, #628]	; (80092d8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8009062:	f7fb fdf7 	bl	8004c54 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8009066:	2336      	movs	r3, #54	; 0x36
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	4b97      	ldr	r3, [pc, #604]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	4b9b      	ldr	r3, [pc, #620]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8009070:	4a97      	ldr	r2, [pc, #604]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009072:	4999      	ldr	r1, [pc, #612]	; (80092d8 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8009074:	489a      	ldr	r0, [pc, #616]	; (80092e0 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8009076:	f00e f805 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800907a:	489a      	ldr	r0, [pc, #616]	; (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800907c:	f7fb fe74 	bl	8004d68 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8009080:	2340      	movs	r3, #64	; 0x40
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	4b90      	ldr	r3, [pc, #576]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	4b97      	ldr	r3, [pc, #604]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800908a:	4a91      	ldr	r2, [pc, #580]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800908c:	4995      	ldr	r1, [pc, #596]	; (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800908e:	4897      	ldr	r0, [pc, #604]	; (80092ec <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8009090:	f00d fff8 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8009094:	4896      	ldr	r0, [pc, #600]	; (80092f0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8009096:	f7fb feef 	bl	8004e78 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800909a:	234b      	movs	r3, #75	; 0x4b
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	4b8a      	ldr	r3, [pc, #552]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4b94      	ldr	r3, [pc, #592]	; (80092f4 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80090a4:	4a8a      	ldr	r2, [pc, #552]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80090a6:	4992      	ldr	r1, [pc, #584]	; (80092f0 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80090a8:	4893      	ldr	r0, [pc, #588]	; (80092f8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80090aa:	f00d ffeb 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80090ae:	4893      	ldr	r0, [pc, #588]	; (80092fc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80090b0:	f7fb ff4e 	bl	8004f50 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 80090b4:	2354      	movs	r3, #84	; 0x54
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	4b83      	ldr	r3, [pc, #524]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4b90      	ldr	r3, [pc, #576]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80090be:	4a84      	ldr	r2, [pc, #528]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80090c0:	498e      	ldr	r1, [pc, #568]	; (80092fc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80090c2:	4890      	ldr	r0, [pc, #576]	; (8009304 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80090c4:	f00d ffde 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80090c8:	488f      	ldr	r0, [pc, #572]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80090ca:	f7fb ffcd 	bl	8005068 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 80090ce:	2364      	movs	r3, #100	; 0x64
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	4b7d      	ldr	r3, [pc, #500]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	4b8d      	ldr	r3, [pc, #564]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80090d8:	4a7d      	ldr	r2, [pc, #500]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80090da:	498b      	ldr	r1, [pc, #556]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80090dc:	488c      	ldr	r0, [pc, #560]	; (8009310 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80090de:	f00d ffd1 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80090e2:	488c      	ldr	r0, [pc, #560]	; (8009314 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80090e4:	f7fc f87e 	bl	80051e4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 80090e8:	2379      	movs	r3, #121	; 0x79
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	4b76      	ldr	r3, [pc, #472]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4b89      	ldr	r3, [pc, #548]	; (8009318 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 80090f2:	4a77      	ldr	r2, [pc, #476]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80090f4:	4987      	ldr	r1, [pc, #540]	; (8009314 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80090f6:	4889      	ldr	r0, [pc, #548]	; (800931c <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80090f8:	f00d ffc4 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 80090fc:	4888      	ldr	r0, [pc, #544]	; (8009320 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80090fe:	f7fc f8d7 	bl	80052b0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8009102:	2380      	movs	r3, #128	; 0x80
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	4b70      	ldr	r3, [pc, #448]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	4b86      	ldr	r3, [pc, #536]	; (8009324 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800910c:	4a70      	ldr	r2, [pc, #448]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800910e:	4984      	ldr	r1, [pc, #528]	; (8009320 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8009110:	4885      	ldr	r0, [pc, #532]	; (8009328 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8009112:	f00d ffb7 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8009116:	4885      	ldr	r0, [pc, #532]	; (800932c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8009118:	f7fc f9b4 	bl	8005484 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 800911c:	2388      	movs	r3, #136	; 0x88
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	4b69      	ldr	r3, [pc, #420]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4b82      	ldr	r3, [pc, #520]	; (8009330 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8009126:	4a6a      	ldr	r2, [pc, #424]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009128:	4980      	ldr	r1, [pc, #512]	; (800932c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800912a:	4882      	ldr	r0, [pc, #520]	; (8009334 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800912c:	f00d ffaa 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8009130:	4881      	ldr	r0, [pc, #516]	; (8009338 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8009132:	f7fc fb33 	bl	800579c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8009136:	23c3      	movs	r3, #195	; 0xc3
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	4b63      	ldr	r3, [pc, #396]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	4b7f      	ldr	r3, [pc, #508]	; (800933c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8009140:	4a7f      	ldr	r2, [pc, #508]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009142:	497d      	ldr	r1, [pc, #500]	; (8009338 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8009144:	487f      	ldr	r0, [pc, #508]	; (8009344 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8009146:	f00d ff9d 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800914a:	487f      	ldr	r0, [pc, #508]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800914c:	f7fc fb90 	bl	8005870 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8009150:	23d5      	movs	r3, #213	; 0xd5
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	4b5c      	ldr	r3, [pc, #368]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	4b7c      	ldr	r3, [pc, #496]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800915a:	4a79      	ldr	r2, [pc, #484]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800915c:	497a      	ldr	r1, [pc, #488]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800915e:	487c      	ldr	r0, [pc, #496]	; (8009350 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8009160:	f00d ff90 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8009164:	487b      	ldr	r0, [pc, #492]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8009166:	f7fc fc71 	bl	8005a4c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 800916a:	23e1      	movs	r3, #225	; 0xe1
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	4b56      	ldr	r3, [pc, #344]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	4b79      	ldr	r3, [pc, #484]	; (8009358 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8009174:	4a72      	ldr	r2, [pc, #456]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009176:	4977      	ldr	r1, [pc, #476]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8009178:	4878      	ldr	r0, [pc, #480]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800917a:	f00d ff83 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800917e:	4878      	ldr	r0, [pc, #480]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8009180:	f7fc fd0e 	bl	8005ba0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8009184:	23f0      	movs	r3, #240	; 0xf0
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	4b4f      	ldr	r3, [pc, #316]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4b75      	ldr	r3, [pc, #468]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800918e:	4a6c      	ldr	r2, [pc, #432]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009190:	4973      	ldr	r1, [pc, #460]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8009192:	4875      	ldr	r0, [pc, #468]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8009194:	f00d ff76 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8009198:	4874      	ldr	r0, [pc, #464]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800919a:	f7fc fdb1 	bl	8005d00 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800919e:	f240 1301 	movw	r3, #257	; 0x101
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	4b48      	ldr	r3, [pc, #288]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	4b71      	ldr	r3, [pc, #452]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80091aa:	4a65      	ldr	r2, [pc, #404]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091ac:	496f      	ldr	r1, [pc, #444]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80091ae:	4871      	ldr	r0, [pc, #452]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80091b0:	f00d ff68 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80091b4:	4870      	ldr	r0, [pc, #448]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80091b6:	f7fc fe0f 	bl	8005dd8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 80091ba:	f240 1311 	movw	r3, #273	; 0x111
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4b6d      	ldr	r3, [pc, #436]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 80091c6:	4a5e      	ldr	r2, [pc, #376]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091c8:	496b      	ldr	r1, [pc, #428]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80091ca:	486d      	ldr	r0, [pc, #436]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 80091cc:	f00d ff5a 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80091d0:	486c      	ldr	r0, [pc, #432]	; (8009384 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80091d2:	f7fc febf 	bl	8005f54 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 80091d6:	f240 1327 	movw	r3, #295	; 0x127
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	4b3a      	ldr	r3, [pc, #232]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4b69      	ldr	r3, [pc, #420]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 80091e2:	4a57      	ldr	r2, [pc, #348]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091e4:	4967      	ldr	r1, [pc, #412]	; (8009384 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 80091e6:	4869      	ldr	r0, [pc, #420]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 80091e8:	f00d ff4c 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80091ec:	4868      	ldr	r0, [pc, #416]	; (8009390 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 80091ee:	f7fc ff79 	bl	80060e4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 80091f2:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	4b33      	ldr	r3, [pc, #204]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4b65      	ldr	r3, [pc, #404]	; (8009394 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 80091fe:	4a50      	ldr	r2, [pc, #320]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009200:	4963      	ldr	r1, [pc, #396]	; (8009390 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8009202:	4865      	ldr	r0, [pc, #404]	; (8009398 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8009204:	f00d ff3e 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8009208:	4864      	ldr	r0, [pc, #400]	; (800939c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800920a:	f7fd f8d5 	bl	80063b8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 800920e:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4b61      	ldr	r3, [pc, #388]	; (80093a0 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800921a:	4a49      	ldr	r2, [pc, #292]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800921c:	495f      	ldr	r1, [pc, #380]	; (800939c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800921e:	4861      	ldr	r0, [pc, #388]	; (80093a4 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8009220:	f00d ff30 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8009224:	4860      	ldr	r0, [pc, #384]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8009226:	f7fd fa2f 	bl	8006688 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 800922a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	4b5d      	ldr	r3, [pc, #372]	; (80093ac <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8009236:	4a42      	ldr	r2, [pc, #264]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009238:	495b      	ldr	r1, [pc, #364]	; (80093a8 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800923a:	485d      	ldr	r0, [pc, #372]	; (80093b0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800923c:	f00d ff22 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8009240:	485c      	ldr	r0, [pc, #368]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8009242:	f7fd fadf 	bl	8006804 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 8009246:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4b59      	ldr	r3, [pc, #356]	; (80093b8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8009252:	4a3b      	ldr	r2, [pc, #236]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009254:	4957      	ldr	r1, [pc, #348]	; (80093b4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8009256:	4859      	ldr	r0, [pc, #356]	; (80093bc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8009258:	f00d ff14 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800925c:	4858      	ldr	r0, [pc, #352]	; (80093c0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800925e:	f7fd fbcd 	bl	80069fc <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 8009262:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4b55      	ldr	r3, [pc, #340]	; (80093c4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800926e:	4a34      	ldr	r2, [pc, #208]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009270:	4953      	ldr	r1, [pc, #332]	; (80093c0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8009272:	4855      	ldr	r0, [pc, #340]	; (80093c8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8009274:	f00d ff06 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8009278:	4854      	ldr	r0, [pc, #336]	; (80093cc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800927a:	f7fd fd0d 	bl	8006c98 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 800927e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	4b10      	ldr	r3, [pc, #64]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	4b51      	ldr	r3, [pc, #324]	; (80093d0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800928a:	4a2d      	ldr	r2, [pc, #180]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800928c:	494f      	ldr	r1, [pc, #316]	; (80093cc <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800928e:	4851      	ldr	r0, [pc, #324]	; (80093d4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8009290:	f00d fef8 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8009294:	4850      	ldr	r0, [pc, #320]	; (80093d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8009296:	f7fd fe63 	bl	8006f60 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 800929a:	f44f 7306 	mov.w	r3, #536	; 0x218
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	4b4d      	ldr	r3, [pc, #308]	; (80093dc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80092a6:	4a26      	ldr	r2, [pc, #152]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80092a8:	494b      	ldr	r1, [pc, #300]	; (80093d8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80092aa:	484d      	ldr	r0, [pc, #308]	; (80093e0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 80092ac:	f00d feea 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80092b0:	484c      	ldr	r0, [pc, #304]	; (80093e4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 80092b2:	f7fd ff2b 	bl	800710c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 80092b6:	f240 2333 	movw	r3, #563	; 0x233
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	4b02      	ldr	r3, [pc, #8]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	e092      	b.n	80093e8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>
 80092c2:	bf00      	nop
 80092c4:	200003f8 	.word	0x200003f8
 80092c8:	08025d30 	.word	0x08025d30
 80092cc:	080265cc 	.word	0x080265cc
 80092d0:	080265d8 	.word	0x080265d8
 80092d4:	20000414 	.word	0x20000414
 80092d8:	20000418 	.word	0x20000418
 80092dc:	080265f0 	.word	0x080265f0
 80092e0:	20000434 	.word	0x20000434
 80092e4:	20000438 	.word	0x20000438
 80092e8:	08026600 	.word	0x08026600
 80092ec:	20000454 	.word	0x20000454
 80092f0:	20000458 	.word	0x20000458
 80092f4:	08026614 	.word	0x08026614
 80092f8:	20000474 	.word	0x20000474
 80092fc:	20000478 	.word	0x20000478
 8009300:	08026624 	.word	0x08026624
 8009304:	20000494 	.word	0x20000494
 8009308:	20000498 	.word	0x20000498
 800930c:	0802663c 	.word	0x0802663c
 8009310:	200004b4 	.word	0x200004b4
 8009314:	200004b8 	.word	0x200004b8
 8009318:	0802664c 	.word	0x0802664c
 800931c:	200004d4 	.word	0x200004d4
 8009320:	200004d8 	.word	0x200004d8
 8009324:	0802665c 	.word	0x0802665c
 8009328:	200004f4 	.word	0x200004f4
 800932c:	200004f8 	.word	0x200004f8
 8009330:	08026668 	.word	0x08026668
 8009334:	20000514 	.word	0x20000514
 8009338:	20000520 	.word	0x20000520
 800933c:	08026678 	.word	0x08026678
 8009340:	08026688 	.word	0x08026688
 8009344:	2000053c 	.word	0x2000053c
 8009348:	20000540 	.word	0x20000540
 800934c:	080266a0 	.word	0x080266a0
 8009350:	2000055c 	.word	0x2000055c
 8009354:	20000560 	.word	0x20000560
 8009358:	080266b8 	.word	0x080266b8
 800935c:	2000057c 	.word	0x2000057c
 8009360:	20000580 	.word	0x20000580
 8009364:	080266d4 	.word	0x080266d4
 8009368:	2000059c 	.word	0x2000059c
 800936c:	200005a0 	.word	0x200005a0
 8009370:	080266e8 	.word	0x080266e8
 8009374:	200005bc 	.word	0x200005bc
 8009378:	200005c0 	.word	0x200005c0
 800937c:	08026704 	.word	0x08026704
 8009380:	200005dc 	.word	0x200005dc
 8009384:	200005e0 	.word	0x200005e0
 8009388:	08026718 	.word	0x08026718
 800938c:	200005fc 	.word	0x200005fc
 8009390:	20000600 	.word	0x20000600
 8009394:	08026734 	.word	0x08026734
 8009398:	2000061c 	.word	0x2000061c
 800939c:	20000620 	.word	0x20000620
 80093a0:	0802674c 	.word	0x0802674c
 80093a4:	2000063c 	.word	0x2000063c
 80093a8:	20000640 	.word	0x20000640
 80093ac:	08026760 	.word	0x08026760
 80093b0:	2000065c 	.word	0x2000065c
 80093b4:	20000660 	.word	0x20000660
 80093b8:	08026780 	.word	0x08026780
 80093bc:	2000067c 	.word	0x2000067c
 80093c0:	20000680 	.word	0x20000680
 80093c4:	08026798 	.word	0x08026798
 80093c8:	2000069c 	.word	0x2000069c
 80093cc:	200006a0 	.word	0x200006a0
 80093d0:	080267b0 	.word	0x080267b0
 80093d4:	200006bc 	.word	0x200006bc
 80093d8:	200006c0 	.word	0x200006c0
 80093dc:	080267c4 	.word	0x080267c4
 80093e0:	200006dc 	.word	0x200006dc
 80093e4:	200006e0 	.word	0x200006e0
 80093e8:	4b8d      	ldr	r3, [pc, #564]	; (8009620 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80093ea:	4a8e      	ldr	r2, [pc, #568]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80093ec:	498e      	ldr	r1, [pc, #568]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80093ee:	488f      	ldr	r0, [pc, #572]	; (800962c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80093f0:	f00d fe48 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80093f4:	488e      	ldr	r0, [pc, #568]	; (8009630 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80093f6:	f7fd ffed 	bl	80073d4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 80093fa:	f240 235f 	movw	r3, #607	; 0x25f
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	4b8c      	ldr	r3, [pc, #560]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	4b8c      	ldr	r3, [pc, #560]	; (8009638 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8009406:	4a87      	ldr	r2, [pc, #540]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009408:	4989      	ldr	r1, [pc, #548]	; (8009630 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800940a:	488c      	ldr	r0, [pc, #560]	; (800963c <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800940c:	f00d fe3a 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8009410:	488b      	ldr	r0, [pc, #556]	; (8009640 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8009412:	f7fe f8db 	bl	80075cc <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 8009416:	f44f 731e 	mov.w	r3, #632	; 0x278
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	4b85      	ldr	r3, [pc, #532]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	4b88      	ldr	r3, [pc, #544]	; (8009644 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8009422:	4a80      	ldr	r2, [pc, #512]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009424:	4986      	ldr	r1, [pc, #536]	; (8009640 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8009426:	4888      	ldr	r0, [pc, #544]	; (8009648 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8009428:	f00d fe2c 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800942c:	4887      	ldr	r0, [pc, #540]	; (800964c <_Z41__static_initialization_and_destruction_0ii+0x624>)
 800942e:	f7fe fa47 	bl	80078c0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 8009432:	f240 239d 	movw	r3, #669	; 0x29d
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	4b7e      	ldr	r3, [pc, #504]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	4b84      	ldr	r3, [pc, #528]	; (8009650 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 800943e:	4a79      	ldr	r2, [pc, #484]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009440:	4982      	ldr	r1, [pc, #520]	; (800964c <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8009442:	4884      	ldr	r0, [pc, #528]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8009444:	f00d fe1e 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8009448:	4883      	ldr	r0, [pc, #524]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 800944a:	f7fe fb17 	bl	8007a7c <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 800944e:	f240 23b3 	movw	r3, #691	; 0x2b3
 8009452:	9301      	str	r3, [sp, #4]
 8009454:	4b77      	ldr	r3, [pc, #476]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	4b80      	ldr	r3, [pc, #512]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0x634>)
 800945a:	4a72      	ldr	r2, [pc, #456]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800945c:	497e      	ldr	r1, [pc, #504]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 800945e:	4880      	ldr	r0, [pc, #512]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8009460:	f00d fe10 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8009464:	487f      	ldr	r0, [pc, #508]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8009466:	f7fe fb81 	bl	8007b6c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 800946a:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 800946e:	9301      	str	r3, [sp, #4]
 8009470:	4b70      	ldr	r3, [pc, #448]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	4b7c      	ldr	r3, [pc, #496]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8009476:	4a6b      	ldr	r2, [pc, #428]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009478:	497a      	ldr	r1, [pc, #488]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 800947a:	487c      	ldr	r0, [pc, #496]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0x644>)
 800947c:	f00d fe02 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8009480:	487b      	ldr	r0, [pc, #492]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8009482:	f7fe fc59 	bl	8007d38 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>
 8009486:	f240 23df 	movw	r3, #735	; 0x2df
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	4b69      	ldr	r3, [pc, #420]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	4b78      	ldr	r3, [pc, #480]	; (8009674 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8009492:	4a64      	ldr	r2, [pc, #400]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009494:	4976      	ldr	r1, [pc, #472]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8009496:	4878      	ldr	r0, [pc, #480]	; (8009678 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8009498:	f00d fdf4 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 80ba 	bne.w	8009618 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094aa:	4293      	cmp	r3, r2
 80094ac:	f040 80b4 	bne.w	8009618 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 80094b0:	4871      	ldr	r0, [pc, #452]	; (8009678 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80094b2:	f00d fe11 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094b6:	486e      	ldr	r0, [pc, #440]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80094b8:	f7fe fdbe 	bl	8008038 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80094bc:	486b      	ldr	r0, [pc, #428]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0x644>)
 80094be:	f00d fe0b 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094c2:	4868      	ldr	r0, [pc, #416]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80094c4:	f7fe fdfc 	bl	80080c0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80094c8:	4865      	ldr	r0, [pc, #404]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80094ca:	f00d fe05 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094ce:	4862      	ldr	r0, [pc, #392]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80094d0:	f7fe fe3a 	bl	8008148 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80094d4:	485f      	ldr	r0, [pc, #380]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80094d6:	f00d fdff 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094da:	485c      	ldr	r0, [pc, #368]	; (800964c <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80094dc:	f7fe fe78 	bl	80081d0 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80094e0:	4859      	ldr	r0, [pc, #356]	; (8009648 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80094e2:	f00d fdf9 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094e6:	4856      	ldr	r0, [pc, #344]	; (8009640 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80094e8:	f7fe feb6 	bl	8008258 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 80094ec:	4853      	ldr	r0, [pc, #332]	; (800963c <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80094ee:	f00d fdf3 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094f2:	484f      	ldr	r0, [pc, #316]	; (8009630 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80094f4:	f7fe fef4 	bl	80082e0 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80094f8:	484c      	ldr	r0, [pc, #304]	; (800962c <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80094fa:	f00d fded 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80094fe:	484a      	ldr	r0, [pc, #296]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8009500:	f7fe ff32 	bl	8008368 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8009504:	485d      	ldr	r0, [pc, #372]	; (800967c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8009506:	f00d fde7 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800950a:	485d      	ldr	r0, [pc, #372]	; (8009680 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 800950c:	f7fe ff70 	bl	80083f0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8009510:	485c      	ldr	r0, [pc, #368]	; (8009684 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8009512:	f00d fde1 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009516:	485c      	ldr	r0, [pc, #368]	; (8009688 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8009518:	f7fe ffae 	bl	8008478 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 800951c:	485b      	ldr	r0, [pc, #364]	; (800968c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 800951e:	f00d fddb 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009522:	485b      	ldr	r0, [pc, #364]	; (8009690 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8009524:	f7fe ffec 	bl	8008500 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8009528:	485a      	ldr	r0, [pc, #360]	; (8009694 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 800952a:	f00d fdd5 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800952e:	485a      	ldr	r0, [pc, #360]	; (8009698 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8009530:	f7ff f82a 	bl	8008588 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8009534:	4859      	ldr	r0, [pc, #356]	; (800969c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8009536:	f00d fdcf 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800953a:	4859      	ldr	r0, [pc, #356]	; (80096a0 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 800953c:	f7ff f868 	bl	8008610 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8009540:	4858      	ldr	r0, [pc, #352]	; (80096a4 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8009542:	f00d fdc9 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009546:	4858      	ldr	r0, [pc, #352]	; (80096a8 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8009548:	f7ff f8a6 	bl	8008698 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800954c:	4857      	ldr	r0, [pc, #348]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x684>)
 800954e:	f00d fdc3 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009552:	4857      	ldr	r0, [pc, #348]	; (80096b0 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8009554:	f7ff f8e4 	bl	8008720 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8009558:	4856      	ldr	r0, [pc, #344]	; (80096b4 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 800955a:	f00d fdbd 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800955e:	4856      	ldr	r0, [pc, #344]	; (80096b8 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8009560:	f7ff f922 	bl	80087a8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8009564:	4855      	ldr	r0, [pc, #340]	; (80096bc <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8009566:	f00d fdb7 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800956a:	4855      	ldr	r0, [pc, #340]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 800956c:	f7ff f960 	bl	8008830 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8009570:	4854      	ldr	r0, [pc, #336]	; (80096c4 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8009572:	f00d fdb1 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009576:	4854      	ldr	r0, [pc, #336]	; (80096c8 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8009578:	f7ff f99e 	bl	80088b8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800957c:	4853      	ldr	r0, [pc, #332]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 800957e:	f00d fdab 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009582:	4853      	ldr	r0, [pc, #332]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8009584:	f7ff f9dc 	bl	8008940 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8009588:	4852      	ldr	r0, [pc, #328]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 800958a:	f00d fda5 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800958e:	4852      	ldr	r0, [pc, #328]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8009590:	f7ff fa1a 	bl	80089c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8009594:	4851      	ldr	r0, [pc, #324]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8009596:	f00d fd9f 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800959a:	4851      	ldr	r0, [pc, #324]	; (80096e0 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800959c:	f7ff fa58 	bl	8008a50 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80095a0:	4850      	ldr	r0, [pc, #320]	; (80096e4 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 80095a2:	f00d fd99 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095a6:	4850      	ldr	r0, [pc, #320]	; (80096e8 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 80095a8:	f7ff fa96 	bl	8008ad8 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 80095ac:	484f      	ldr	r0, [pc, #316]	; (80096ec <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 80095ae:	f00d fd93 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095b2:	484f      	ldr	r0, [pc, #316]	; (80096f0 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 80095b4:	f7ff fad4 	bl	8008b60 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80095b8:	484e      	ldr	r0, [pc, #312]	; (80096f4 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 80095ba:	f00d fd8d 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095be:	484e      	ldr	r0, [pc, #312]	; (80096f8 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80095c0:	f7ff fb12 	bl	8008be8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80095c4:	484d      	ldr	r0, [pc, #308]	; (80096fc <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80095c6:	f00d fd87 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095ca:	484d      	ldr	r0, [pc, #308]	; (8009700 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 80095cc:	f7ff fb50 	bl	8008c70 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80095d0:	484c      	ldr	r0, [pc, #304]	; (8009704 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 80095d2:	f00d fd81 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095d6:	484c      	ldr	r0, [pc, #304]	; (8009708 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 80095d8:	f7ff fb8e 	bl	8008cf8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80095dc:	484b      	ldr	r0, [pc, #300]	; (800970c <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 80095de:	f00d fd7b 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095e2:	484b      	ldr	r0, [pc, #300]	; (8009710 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80095e4:	f7ff fbcc 	bl	8008d80 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80095e8:	484a      	ldr	r0, [pc, #296]	; (8009714 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 80095ea:	f00d fd75 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095ee:	484a      	ldr	r0, [pc, #296]	; (8009718 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 80095f0:	f7ff fc0a 	bl	8008e08 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80095f4:	4849      	ldr	r0, [pc, #292]	; (800971c <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 80095f6:	f00d fd6f 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 80095fa:	4849      	ldr	r0, [pc, #292]	; (8009720 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 80095fc:	f7ff fc48 	bl	8008e90 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8009600:	4848      	ldr	r0, [pc, #288]	; (8009724 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8009602:	f00d fd69 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009606:	4848      	ldr	r0, [pc, #288]	; (8009728 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8009608:	f7ff fc86 	bl	8008f18 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 800960c:	4847      	ldr	r0, [pc, #284]	; (800972c <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800960e:	f00d fd63 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8009612:	4847      	ldr	r0, [pc, #284]	; (8009730 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 8009614:	f7ff fcc4 	bl	8008fa0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	080267e0 	.word	0x080267e0
 8009624:	08026688 	.word	0x08026688
 8009628:	200006e0 	.word	0x200006e0
 800962c:	200006fc 	.word	0x200006fc
 8009630:	20000700 	.word	0x20000700
 8009634:	08025d30 	.word	0x08025d30
 8009638:	080267f8 	.word	0x080267f8
 800963c:	2000071c 	.word	0x2000071c
 8009640:	20000720 	.word	0x20000720
 8009644:	0802680c 	.word	0x0802680c
 8009648:	2000073c 	.word	0x2000073c
 800964c:	20000740 	.word	0x20000740
 8009650:	08026824 	.word	0x08026824
 8009654:	2000075c 	.word	0x2000075c
 8009658:	20000760 	.word	0x20000760
 800965c:	0802683c 	.word	0x0802683c
 8009660:	2000077c 	.word	0x2000077c
 8009664:	20000780 	.word	0x20000780
 8009668:	0802685c 	.word	0x0802685c
 800966c:	2000079c 	.word	0x2000079c
 8009670:	200007a0 	.word	0x200007a0
 8009674:	08026874 	.word	0x08026874
 8009678:	200007bc 	.word	0x200007bc
 800967c:	200006dc 	.word	0x200006dc
 8009680:	200006c0 	.word	0x200006c0
 8009684:	200006bc 	.word	0x200006bc
 8009688:	200006a0 	.word	0x200006a0
 800968c:	2000069c 	.word	0x2000069c
 8009690:	20000680 	.word	0x20000680
 8009694:	2000067c 	.word	0x2000067c
 8009698:	20000660 	.word	0x20000660
 800969c:	2000065c 	.word	0x2000065c
 80096a0:	20000640 	.word	0x20000640
 80096a4:	2000063c 	.word	0x2000063c
 80096a8:	20000620 	.word	0x20000620
 80096ac:	2000061c 	.word	0x2000061c
 80096b0:	20000600 	.word	0x20000600
 80096b4:	200005fc 	.word	0x200005fc
 80096b8:	200005e0 	.word	0x200005e0
 80096bc:	200005dc 	.word	0x200005dc
 80096c0:	200005c0 	.word	0x200005c0
 80096c4:	200005bc 	.word	0x200005bc
 80096c8:	200005a0 	.word	0x200005a0
 80096cc:	2000059c 	.word	0x2000059c
 80096d0:	20000580 	.word	0x20000580
 80096d4:	2000057c 	.word	0x2000057c
 80096d8:	20000560 	.word	0x20000560
 80096dc:	2000055c 	.word	0x2000055c
 80096e0:	20000540 	.word	0x20000540
 80096e4:	2000053c 	.word	0x2000053c
 80096e8:	20000520 	.word	0x20000520
 80096ec:	20000514 	.word	0x20000514
 80096f0:	200004f8 	.word	0x200004f8
 80096f4:	200004f4 	.word	0x200004f4
 80096f8:	200004d8 	.word	0x200004d8
 80096fc:	200004d4 	.word	0x200004d4
 8009700:	200004b8 	.word	0x200004b8
 8009704:	200004b4 	.word	0x200004b4
 8009708:	20000498 	.word	0x20000498
 800970c:	20000494 	.word	0x20000494
 8009710:	20000478 	.word	0x20000478
 8009714:	20000474 	.word	0x20000474
 8009718:	20000458 	.word	0x20000458
 800971c:	20000454 	.word	0x20000454
 8009720:	20000438 	.word	0x20000438
 8009724:	20000434 	.word	0x20000434
 8009728:	20000418 	.word	0x20000418
 800972c:	20000414 	.word	0x20000414
 8009730:	200003f8 	.word	0x200003f8

08009734 <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
 8009738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800973c:	2001      	movs	r0, #1
 800973e:	f7ff fc73 	bl	8009028 <_Z41__static_initialization_and_destruction_0ii>
 8009742:	bd80      	pop	{r7, pc}

08009744 <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
 8009748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800974c:	2000      	movs	r0, #0
 800974e:	f7ff fc6b 	bl	8009028 <_Z41__static_initialization_and_destruction_0ii>
 8009752:	bd80      	pop	{r7, pc}

08009754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800975a:	f7f7 fc40 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800975e:	f000 f817 	bl	8009790 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009762:	f000 f973 	bl	8009a4c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8009766:	f000 f947 	bl	80099f8 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 800976a:	f000 f887 	bl	800987c <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 800976e:	f000 f8e3 	bl	8009938 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 8009772:	4a06      	ldr	r2, [pc, #24]	; (800978c <main+0x38>)
 8009774:	463b      	mov	r3, r7
 8009776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800977a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 800977e:	463b      	mov	r3, r7
 8009780:	4619      	mov	r1, r3
 8009782:	2002      	movs	r0, #2
 8009784:	f001 fd72 	bl	800b26c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8009788:	e7fe      	b.n	8009788 <main+0x34>
 800978a:	bf00      	nop
 800978c:	08026890 	.word	0x08026890

08009790 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b0a8      	sub	sp, #160	; 0xa0
 8009794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009796:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800979a:	2238      	movs	r2, #56	; 0x38
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f019 fada 	bl	8022d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80097a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	609a      	str	r2, [r3, #8]
 80097b0:	60da      	str	r2, [r3, #12]
 80097b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80097b4:	463b      	mov	r3, r7
 80097b6:	2254      	movs	r2, #84	; 0x54
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f019 facc 	bl	8022d58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80097c0:	2000      	movs	r0, #0
 80097c2:	f7f8 f9c5 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80097c6:	2301      	movs	r3, #1
 80097c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80097ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80097d0:	2302      	movs	r3, #2
 80097d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80097d6:	2303      	movs	r3, #3
 80097d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80097dc:	2306      	movs	r3, #6
 80097de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80097e2:	2355      	movs	r3, #85	; 0x55
 80097e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80097e8:	2302      	movs	r3, #2
 80097ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80097ee:	2302      	movs	r3, #2
 80097f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80097f4:	2302      	movs	r3, #2
 80097f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f8 fa5a 	bl	8001cb8 <HAL_RCC_OscConfig>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf14      	ite	ne
 800980a:	2301      	movne	r3, #1
 800980c:	2300      	moveq	r3, #0
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8009814:	f000 f98a 	bl	8009b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009818:	230f      	movs	r3, #15
 800981a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800981c:	2303      	movs	r3, #3
 800981e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009820:	2300      	movs	r3, #0
 8009822:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009824:	2300      	movs	r3, #0
 8009826:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009828:	2300      	movs	r3, #0
 800982a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800982c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009830:	2104      	movs	r1, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f7f8 fd58 	bl	80022e8 <HAL_RCC_ClockConfig>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	bf14      	ite	ne
 800983e:	2301      	movne	r3, #1
 8009840:	2300      	moveq	r3, #0
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8009848:	f000 f970 	bl	8009b2c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 800984c:	2321      	movs	r3, #33	; 0x21
 800984e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009850:	2300      	movs	r3, #0
 8009852:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009854:	2300      	movs	r3, #0
 8009856:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009858:	463b      	mov	r3, r7
 800985a:	4618      	mov	r0, r3
 800985c:	f7f8 ff60 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8009870:	f000 f95c 	bl	8009b2c <Error_Handler>
  }
}
 8009874:	bf00      	nop
 8009876:	37a0      	adds	r7, #160	; 0xa0
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009880:	4b2b      	ldr	r3, [pc, #172]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009882:	4a2c      	ldr	r2, [pc, #176]	; (8009934 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8009884:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009886:	4b2a      	ldr	r3, [pc, #168]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800988c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800988e:	4b28      	ldr	r3, [pc, #160]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009890:	2200      	movs	r2, #0
 8009892:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009894:	4b26      	ldr	r3, [pc, #152]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009896:	2200      	movs	r2, #0
 8009898:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800989a:	4b25      	ldr	r3, [pc, #148]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800989c:	2200      	movs	r2, #0
 800989e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80098a0:	4b23      	ldr	r3, [pc, #140]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098a2:	220c      	movs	r2, #12
 80098a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098a6:	4b22      	ldr	r3, [pc, #136]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098ac:	4b20      	ldr	r3, [pc, #128]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80098b2:	4b1f      	ldr	r3, [pc, #124]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80098b8:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80098be:	481c      	ldr	r0, [pc, #112]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098c0:	f7f9 f97a 	bl	8002bb8 <HAL_UART_Init>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	bf14      	ite	ne
 80098ca:	2301      	movne	r3, #1
 80098cc:	2300      	moveq	r3, #0
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80098d4:	f000 f92a 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098d8:	2100      	movs	r1, #0
 80098da:	4815      	ldr	r0, [pc, #84]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098dc:	f7fa f900 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf14      	ite	ne
 80098e6:	2301      	movne	r3, #1
 80098e8:	2300      	moveq	r3, #0
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 80098f0:	f000 f91c 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80098f4:	2100      	movs	r1, #0
 80098f6:	480e      	ldr	r0, [pc, #56]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80098f8:	f7fa f930 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bf14      	ite	ne
 8009902:	2301      	movne	r3, #1
 8009904:	2300      	moveq	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 800990c:	f000 f90e 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009910:	4807      	ldr	r0, [pc, #28]	; (8009930 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009912:	f7fa f8ac 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8009926:	f000 f901 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	200007c0 	.word	0x200007c0
 8009934:	40008000 	.word	0x40008000

08009938 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800993c:	4b2c      	ldr	r3, [pc, #176]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800993e:	4a2d      	ldr	r2, [pc, #180]	; (80099f4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8009940:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009942:	4b2b      	ldr	r3, [pc, #172]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009948:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800994a:	4b29      	ldr	r3, [pc, #164]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800994c:	2200      	movs	r2, #0
 800994e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009950:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009952:	2200      	movs	r2, #0
 8009954:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009956:	4b26      	ldr	r3, [pc, #152]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009958:	2200      	movs	r2, #0
 800995a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800995c:	4b24      	ldr	r3, [pc, #144]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800995e:	220c      	movs	r2, #12
 8009960:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009962:	4b23      	ldr	r3, [pc, #140]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009964:	2200      	movs	r2, #0
 8009966:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009968:	4b21      	ldr	r3, [pc, #132]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800996a:	2200      	movs	r2, #0
 800996c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800996e:	4b20      	ldr	r3, [pc, #128]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009970:	2200      	movs	r2, #0
 8009972:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009974:	4b1e      	ldr	r3, [pc, #120]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009976:	2200      	movs	r2, #0
 8009978:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800997a:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800997c:	2200      	movs	r2, #0
 800997e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009980:	481b      	ldr	r0, [pc, #108]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009982:	f7f9 f919 	bl	8002bb8 <HAL_UART_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8009996:	f000 f8c9 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800999a:	2100      	movs	r1, #0
 800999c:	4814      	ldr	r0, [pc, #80]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800999e:	f7fa f89f 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bf14      	ite	ne
 80099a8:	2301      	movne	r3, #1
 80099aa:	2300      	moveq	r3, #0
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80099b2:	f000 f8bb 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099b6:	2100      	movs	r1, #0
 80099b8:	480d      	ldr	r0, [pc, #52]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80099ba:	f7fa f8cf 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	bf14      	ite	ne
 80099c4:	2301      	movne	r3, #1
 80099c6:	2300      	moveq	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80099ce:	f000 f8ad 	bl	8009b2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80099d2:	4807      	ldr	r0, [pc, #28]	; (80099f0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80099d4:	f7fa f84b 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bf14      	ite	ne
 80099de:	2301      	movne	r3, #1
 80099e0:	2300      	moveq	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80099e8:	f000 f8a0 	bl	8009b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80099ec:	bf00      	nop
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000850 	.word	0x20000850
 80099f4:	40013800 	.word	0x40013800

080099f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80099fe:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a02:	4a11      	ldr	r2, [pc, #68]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a04:	f043 0304 	orr.w	r3, r3, #4
 8009a08:	6493      	str	r3, [r2, #72]	; 0x48
 8009a0a:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009a16:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a1a:	4a0b      	ldr	r2, [pc, #44]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a1c:	f043 0301 	orr.w	r3, r3, #1
 8009a20:	6493      	str	r3, [r2, #72]	; 0x48
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <_ZL11MX_DMA_Initv+0x50>)
 8009a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	200b      	movs	r0, #11
 8009a34:	f7f7 fc1f 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009a38:	200b      	movs	r0, #11
 8009a3a:	f7f7 fc36 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40021000 	.word	0x40021000

08009a4c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	; 0x28
 8009a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a52:	f107 0314 	add.w	r3, r7, #20
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	605a      	str	r2, [r3, #4]
 8009a5c:	609a      	str	r2, [r3, #8]
 8009a5e:	60da      	str	r2, [r3, #12]
 8009a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a62:	4b2f      	ldr	r3, [pc, #188]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a66:	4a2e      	ldr	r2, [pc, #184]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a68:	f043 0304 	orr.w	r3, r3, #4
 8009a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a6e:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a72:	f003 0304 	and.w	r3, r3, #4
 8009a76:	613b      	str	r3, [r7, #16]
 8009a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a7a:	4b29      	ldr	r3, [pc, #164]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7e:	4a28      	ldr	r2, [pc, #160]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a80:	f043 0320 	orr.w	r3, r3, #32
 8009a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a86:	4b26      	ldr	r3, [pc, #152]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a92:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a96:	4a22      	ldr	r2, [pc, #136]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a9e:	4b20      	ldr	r3, [pc, #128]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aaa:	4b1d      	ldr	r3, [pc, #116]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aae:	4a1c      	ldr	r2, [pc, #112]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ab6:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <_ZL12MX_GPIO_Initv+0xd4>)
 8009ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aba:	f003 0302 	and.w	r3, r3, #2
 8009abe:	607b      	str	r3, [r7, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2120      	movs	r1, #32
 8009ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009aca:	f7f8 f805 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009ad4:	4b13      	ldr	r3, [pc, #76]	; (8009b24 <_ZL12MX_GPIO_Initv+0xd8>)
 8009ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009adc:	f107 0314 	add.w	r3, r7, #20
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4811      	ldr	r0, [pc, #68]	; (8009b28 <_ZL12MX_GPIO_Initv+0xdc>)
 8009ae4:	f7f7 fe76 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8009ae8:	2320      	movs	r3, #32
 8009aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009aec:	2301      	movs	r3, #1
 8009aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009af4:	2300      	movs	r3, #0
 8009af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8009af8:	f107 0314 	add.w	r3, r7, #20
 8009afc:	4619      	mov	r1, r3
 8009afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b02:	f7f7 fe67 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2028      	movs	r0, #40	; 0x28
 8009b0c:	f7f7 fbb3 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009b10:	2028      	movs	r0, #40	; 0x28
 8009b12:	f7f7 fbca 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8009b16:	bf00      	nop
 8009b18:	3728      	adds	r7, #40	; 0x28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40021000 	.word	0x40021000
 8009b24:	10110000 	.word	0x10110000
 8009b28:	48000800 	.word	0x48000800

08009b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009b30:	b672      	cpsid	i
}
 8009b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009b34:	e7fe      	b.n	8009b34 <Error_Handler+0x8>
	...

08009b38 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:


TEST_GROUP(MqttTestGroup)
{

	void setup()
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8009b40:	23ff      	movs	r3, #255	; 0xff
 8009b42:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x1c>)
 8009b44:	4904      	ldr	r1, [pc, #16]	; (8009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x20>)
 8009b46:	4805      	ldr	r0, [pc, #20]	; (8009b5c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x24>)
 8009b48:	f7fa f894 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  255);
	}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	0800561d 	.word	0x0800561d
 8009b58:	080055b1 	.word	0x080055b1
 8009b5c:	080054f5 	.word	0x080054f5

08009b60 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	{
		mock().checkExpectations();
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	4917      	ldr	r1, [pc, #92]	; (8009bcc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f005 fc0d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f003 fce0 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8009b80:	4603      	mov	r3, r0
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	3294      	adds	r2, #148	; 0x94
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	4790      	blx	r2
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	4618      	mov	r0, r3
 8009b92:	f005 ffb4 	bl	800fafe <_ZN12SimpleStringD1Ev>
		mock().clear();
 8009b96:	f107 0310 	add.w	r3, r7, #16
 8009b9a:	490c      	ldr	r1, [pc, #48]	; (8009bcc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f005 fbf6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8009ba2:	f107 0310 	add.w	r3, r7, #16
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f003 fcc9 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	329c      	adds	r2, #156	; 0x9c
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	4790      	blx	r2
 8009bba:	f107 0310 	add.w	r3, r7, #16
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f005 ff9d 	bl	800fafe <_ZN12SimpleStringD1Ev>
	}
 8009bc4:	bf00      	nop
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	080268a4 	.word	0x080268a4

08009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f00c ffe4 	bl	8016ba8 <_ZN5UtestC1Ev>
 8009be0:	4a03      	ldr	r2, [pc, #12]	; (8009bf0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	0802b5f0 	.word	0x0802b5f0

08009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f00c ffdf 	bl	8016bc8 <_ZN5UtestD1Ev>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	0802b5f0 	.word	0x0802b5f0

08009c18 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ffe7 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009c26:	2104      	movs	r1, #4
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f003 f801 	bl	800cc30 <_ZdlPvj>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff ffc4 	bl	8009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009c48:	4a03      	ldr	r2, [pc, #12]	; (8009c58 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	0802b5d0 	.word	0x0802b5d0

08009c5c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8009c5c:	b590      	push	{r4, r7, lr}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	222a      	movs	r2, #42	; 0x2a
 8009c66:	4906      	ldr	r1, [pc, #24]	; (8009c80 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 8009c68:	2004      	movs	r0, #4
 8009c6a:	f002 ffcd 	bl	800cc08 <_ZnwjPKci>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7ff ffe1 	bl	8009c38 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 8009c76:	4623      	mov	r3, r4
 8009c78:	4618      	mov	r0, r3
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd90      	pop	{r4, r7, pc}
 8009c80:	080268a8 	.word	0x080268a8

08009c84 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f00b fba8 	bl	80153e4 <_ZN10UtestShellC1Ev>
 8009c94:	4a03      	ldr	r2, [pc, #12]	; (8009ca4 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	0802b524 	.word	0x0802b524

08009ca8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 8009ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cac:	b0b4      	sub	sp, #208	; 0xd0
 8009cae:	af04      	add	r7, sp, #16
 8009cb0:	6078      	str	r0, [r7, #4]

	char clientID[] = "Topuz";
 8009cb2:	4ac2      	ldr	r2, [pc, #776]	; (8009fbc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009cb4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cbc:	6018      	str	r0, [r3, #0]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 8009cc2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f6 fab8 	bl	800023c <strlen>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 8009cd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	330c      	adds	r3, #12
 8009cda:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 8009cde:	2300      	movs	r3, #0
 8009ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ce2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009ce6:	2260      	movs	r2, #96	; 0x60
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f019 f834 	bl	8022d58 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8009cf4:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009cf8:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 8009cfa:	2304      	movs	r3, #4
 8009cfc:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	3304      	adds	r3, #4
 8009d04:	4aae      	ldr	r2, [pc, #696]	; (8009fc0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 8009d06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d0a:	6018      	str	r0, [r3, #0]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 8009d10:	2304      	movs	r3, #4
 8009d12:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009d14:	2302      	movs	r3, #2
 8009d16:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8009d18:	233c      	movs	r3, #60	; 0x3c
 8009d1a:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d20:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 8009d22:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009d26:	f107 030c 	add.w	r3, r7, #12
 8009d2a:	330e      	adds	r3, #14
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f019 fa2b 	bl	802318a <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009d34:	f107 010c 	add.w	r1, r7, #12
 8009d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fa fae0 	bl	8004304 <mqtt_encode_packet>
 8009d44:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 8009d48:	f00c ff04 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	3338      	adds	r3, #56	; 0x38
 8009d52:	681d      	ldr	r5, [r3, #0]
 8009d54:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009d58:	1c9e      	adds	r6, r3, #2
 8009d5a:	f00c ff0b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	2341      	movs	r3, #65	; 0x41
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	4b97      	ldr	r3, [pc, #604]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	4b97      	ldr	r3, [pc, #604]	; (8009fc8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 8009d6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d70:	4631      	mov	r1, r6
 8009d72:	4620      	mov	r0, r4
 8009d74:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 8009d76:	f00c feed 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	3324      	adds	r3, #36	; 0x24
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8009d90:	18d6      	adds	r6, r2, r3
 8009d92:	f00c feef 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009d96:	4603      	mov	r3, r0
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	2342      	movs	r3, #66	; 0x42
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	4b89      	ldr	r3, [pc, #548]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	2300      	movs	r3, #0
 8009da4:	4632      	mov	r2, r6
 8009da6:	4985      	ldr	r1, [pc, #532]	; (8009fbc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009da8:	4620      	mov	r0, r4
 8009daa:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 8009dac:	f00c fed2 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009db0:	4604      	mov	r4, r0
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	3338      	adds	r3, #56	; 0x38
 8009db6:	681d      	ldr	r5, [r3, #0]
 8009db8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009dbc:	461e      	mov	r6, r3
 8009dbe:	f00c fed9 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	9302      	str	r3, [sp, #8]
 8009dc6:	2343      	movs	r3, #67	; 0x43
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	4b7e      	ldr	r3, [pc, #504]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	4b7f      	ldr	r3, [pc, #508]	; (8009fcc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	2110      	movs	r1, #16
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 8009dd8:	f00c febc 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	3338      	adds	r3, #56	; 0x38
 8009de2:	681d      	ldr	r5, [r3, #0]
 8009de4:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 8009de8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009dec:	4698      	mov	r8, r3
 8009dee:	f00c fec1 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009df2:	4603      	mov	r3, r0
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	2344      	movs	r3, #68	; 0x44
 8009df8:	9301      	str	r3, [sp, #4]
 8009dfa:	4b72      	ldr	r3, [pc, #456]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	4b74      	ldr	r3, [pc, #464]	; (8009fd0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 8009e00:	4642      	mov	r2, r8
 8009e02:	4631      	mov	r1, r6
 8009e04:	4620      	mov	r0, r4
 8009e06:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 8009e08:	f00c fea4 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	3338      	adds	r3, #56	; 0x38
 8009e12:	681d      	ldr	r5, [r3, #0]
 8009e14:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	4413      	add	r3, r2
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	461e      	mov	r6, r3
 8009e2a:	f00c fea3 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	9302      	str	r3, [sp, #8]
 8009e32:	2345      	movs	r3, #69	; 0x45
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	4b63      	ldr	r3, [pc, #396]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	4b66      	ldr	r3, [pc, #408]	; (8009fd4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	2104      	movs	r1, #4
 8009e40:	4620      	mov	r0, r4
 8009e42:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009e44:	f00c fe86 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009e48:	4604      	mov	r4, r0
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	3338      	adds	r3, #56	; 0x38
 8009e4e:	681d      	ldr	r5, [r3, #0]
 8009e50:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009e54:	461e      	mov	r6, r3
 8009e56:	f00c fe8d 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	9302      	str	r3, [sp, #8]
 8009e5e:	2346      	movs	r3, #70	; 0x46
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	4b58      	ldr	r3, [pc, #352]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4b5c      	ldr	r3, [pc, #368]	; (8009fd8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 8009e68:	4632      	mov	r2, r6
 8009e6a:	214d      	movs	r1, #77	; 0x4d
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 8009e70:	f00c fe70 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009e74:	4604      	mov	r4, r0
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	3338      	adds	r3, #56	; 0x38
 8009e7a:	681d      	ldr	r5, [r3, #0]
 8009e7c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009e80:	461e      	mov	r6, r3
 8009e82:	f00c fe77 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e86:	4603      	mov	r3, r0
 8009e88:	9302      	str	r3, [sp, #8]
 8009e8a:	2347      	movs	r3, #71	; 0x47
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	4b4d      	ldr	r3, [pc, #308]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	4b52      	ldr	r3, [pc, #328]	; (8009fdc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 8009e94:	4632      	mov	r2, r6
 8009e96:	2151      	movs	r1, #81	; 0x51
 8009e98:	4620      	mov	r0, r4
 8009e9a:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 8009e9c:	f00c fe5a 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	3338      	adds	r3, #56	; 0x38
 8009ea6:	681d      	ldr	r5, [r3, #0]
 8009ea8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009eac:	461e      	mov	r6, r3
 8009eae:	f00c fe61 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	9302      	str	r3, [sp, #8]
 8009eb6:	2348      	movs	r3, #72	; 0x48
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	4b48      	ldr	r3, [pc, #288]	; (8009fe0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	2154      	movs	r1, #84	; 0x54
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 8009ec8:	f00c fe44 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009ecc:	4604      	mov	r4, r0
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	3338      	adds	r3, #56	; 0x38
 8009ed2:	681d      	ldr	r5, [r3, #0]
 8009ed4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009ed8:	461e      	mov	r6, r3
 8009eda:	f00c fe4b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	2349      	movs	r3, #73	; 0x49
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	4b37      	ldr	r3, [pc, #220]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	4b3e      	ldr	r3, [pc, #248]	; (8009fe4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 8009eec:	4632      	mov	r2, r6
 8009eee:	2154      	movs	r1, #84	; 0x54
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 8009ef4:	f00c fe2e 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	3338      	adds	r3, #56	; 0x38
 8009efe:	681d      	ldr	r5, [r3, #0]
 8009f00:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009f04:	461e      	mov	r6, r3
 8009f06:	f00c fe35 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	9302      	str	r3, [sp, #8]
 8009f0e:	234a      	movs	r3, #74	; 0x4a
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	4b2c      	ldr	r3, [pc, #176]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 8009f18:	4632      	mov	r2, r6
 8009f1a:	2104      	movs	r1, #4
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 8009f20:	f00c fe18 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009f24:	4604      	mov	r4, r0
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	3338      	adds	r3, #56	; 0x38
 8009f2a:	681d      	ldr	r5, [r3, #0]
 8009f2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009f30:	461e      	mov	r6, r3
 8009f32:	f00c fe1f 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f36:	4603      	mov	r3, r0
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	234b      	movs	r3, #75	; 0x4b
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	4b21      	ldr	r3, [pc, #132]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009f44:	4632      	mov	r2, r6
 8009f46:	2102      	movs	r1, #2
 8009f48:	4620      	mov	r0, r4
 8009f4a:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009f4c:	f00c fe02 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009f50:	4604      	mov	r4, r0
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	3338      	adds	r3, #56	; 0x38
 8009f56:	681d      	ldr	r5, [r3, #0]
 8009f58:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4413      	add	r3, r2
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	461e      	mov	r6, r3
 8009f6e:	f00c fe01 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f72:	4603      	mov	r3, r0
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	234c      	movs	r3, #76	; 0x4c
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4b1c      	ldr	r3, [pc, #112]	; (8009ff0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 8009f80:	4632      	mov	r2, r6
 8009f82:	213c      	movs	r1, #60	; 0x3c
 8009f84:	4620      	mov	r0, r4
 8009f86:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 8009f88:	f00c fde4 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	3338      	adds	r3, #56	; 0x38
 8009f92:	681d      	ldr	r5, [r3, #0]
 8009f94:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 8009f98:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4413      	add	r3, r2
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	4698      	mov	r8, r3
 8009fae:	f00c fde1 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	234d      	movs	r3, #77	; 0x4d
 8009fb8:	e01c      	b.n	8009ff4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 8009fba:	bf00      	nop
 8009fbc:	080268f8 	.word	0x080268f8
 8009fc0:	080268c4 	.word	0x080268c4
 8009fc4:	080268a8 	.word	0x080268a8
 8009fc8:	080268cc 	.word	0x080268cc
 8009fcc:	08026900 	.word	0x08026900
 8009fd0:	0802692c 	.word	0x0802692c
 8009fd4:	08026960 	.word	0x08026960
 8009fd8:	080269b4 	.word	0x080269b4
 8009fdc:	080269e0 	.word	0x080269e0
 8009fe0:	08026a0c 	.word	0x08026a0c
 8009fe4:	08026a38 	.word	0x08026a38
 8009fe8:	08026a64 	.word	0x08026a64
 8009fec:	08026a90 	.word	0x08026a90
 8009ff0:	08026abc 	.word	0x08026abc
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	4b06      	ldr	r3, [pc, #24]	; (800a010 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	4b06      	ldr	r3, [pc, #24]	; (800a014 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	4631      	mov	r1, r6
 800a000:	4620      	mov	r0, r4
 800a002:	47a8      	blx	r5

}
 800a004:	bf00      	nop
 800a006:	37c0      	adds	r7, #192	; 0xc0
 800a008:	46bd      	mov	sp, r7
 800a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00e:	bf00      	nop
 800a010:	080268a8 	.word	0x080268a8
 800a014:	08026b18 	.word	0x08026b18

0800a018 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>:


TEST(MqttTestGroup, SubscribePacketTest)
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fdd4 	bl	8009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a028:	4a03      	ldr	r2, [pc, #12]	; (800a038 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev+0x20>)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	0802b504 	.word	0x0802b504

0800a03c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv>:
 800a03c:	b590      	push	{r4, r7, lr}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	2252      	movs	r2, #82	; 0x52
 800a046:	4906      	ldr	r1, [pc, #24]	; (800a060 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv+0x24>)
 800a048:	2004      	movs	r0, #4
 800a04a:	f002 fddd 	bl	800cc08 <_ZnwjPKci>
 800a04e:	4604      	mov	r4, r0
 800a050:	4620      	mov	r0, r4
 800a052:	f7ff ffe1 	bl	800a018 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>
 800a056:	4623      	mov	r3, r4
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd90      	pop	{r4, r7, pc}
 800a060:	080268a8 	.word	0x080268a8

0800a064 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>:
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4618      	mov	r0, r3
 800a070:	f00b f9b8 	bl	80153e4 <_ZN10UtestShellC1Ev>
 800a074:	4a03      	ldr	r2, [pc, #12]	; (800a084 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev+0x20>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	0802b458 	.word	0x0802b458

0800a088 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv>:
{
 800a088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08c:	b0b6      	sub	sp, #216	; 0xd8
 800a08e:	af04      	add	r7, sp, #16
 800a090:	6078      	str	r0, [r7, #4]
	char topicName[] = "Testtopic";
 800a092:	4a8c      	ldr	r2, [pc, #560]	; (800a2c4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x23c>)
 800a094:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a098:	ca07      	ldmia	r2, {r0, r1, r2}
 800a09a:	c303      	stmia	r3!, {r0, r1}
 800a09c:	801a      	strh	r2, [r3, #0]
	uint16_t topicLength = strlen(topicName);
 800a09e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f6 f8ca 	bl	800023c <strlen>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	uint8_t remainLength = (uint8_t)topicLength + 5;
 800a0ae:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	3305      	adds	r3, #5
 800a0b6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	uint8_t outputBuffer[100] = {0};
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a0c2:	2260      	movs	r2, #96	; 0x60
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f018 fe46 	bl	8022d58 <memset>

	MQTT_Subscribe_Packet subscribePacket;

	subscribePacket.subscribePacketByte = 0x82;
 800a0cc:	2382      	movs	r3, #130	; 0x82
 800a0ce:	733b      	strb	r3, [r7, #12]
	subscribePacket.remainLength = remainLength;
 800a0d0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800a0d4:	737b      	strb	r3, [r7, #13]
	subscribePacket.packetID = 1;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	81fb      	strh	r3, [r7, #14]
	subscribePacket.topicLength = topicLength;
 800a0da:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a0de:	823b      	strh	r3, [r7, #16]
	strcpy(subscribePacket.topic,topicName);
 800a0e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800a0e4:	f107 030c 	add.w	r3, r7, #12
 800a0e8:	3306      	adds	r3, #6
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f019 f84c 	bl	802318a <strcpy>
	subscribePacket.Qos = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &subscribePacket, SUBSCRIBE_PACKET);
 800a0f8:	f107 010c 	add.w	r1, r7, #12
 800a0fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a100:	2201      	movs	r2, #1
 800a102:	4618      	mov	r0, r3
 800a104:	f7fa f8fe 	bl	8004304 <mqtt_encode_packet>
 800a108:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800a10c:	f00c fd22 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a110:	4604      	mov	r4, r0
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	3338      	adds	r3, #56	; 0x38
 800a116:	681d      	ldr	r5, [r3, #0]
 800a118:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800a11c:	1c9e      	adds	r6, r3, #2
 800a11e:	f00c fd29 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a122:	4603      	mov	r3, r0
 800a124:	9302      	str	r3, [sp, #8]
 800a126:	2365      	movs	r3, #101	; 0x65
 800a128:	9301      	str	r3, [sp, #4]
 800a12a:	4b67      	ldr	r3, [pc, #412]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	4b67      	ldr	r3, [pc, #412]	; (800a2cc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x244>)
 800a130:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a134:	4631      	mov	r1, r6
 800a136:	4620      	mov	r0, r4
 800a138:	47a8      	blx	r5
	LONGS_EQUAL(0x82,outputBuffer[0]);
 800a13a:	f00c fd0b 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a13e:	4604      	mov	r4, r0
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	3338      	adds	r3, #56	; 0x38
 800a144:	681d      	ldr	r5, [r3, #0]
 800a146:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a14a:	461e      	mov	r6, r3
 800a14c:	f00c fd12 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a150:	4603      	mov	r3, r0
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	2366      	movs	r3, #102	; 0x66
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	4b5b      	ldr	r3, [pc, #364]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	4b5c      	ldr	r3, [pc, #368]	; (800a2d0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x248>)
 800a15e:	4632      	mov	r2, r6
 800a160:	2182      	movs	r1, #130	; 0x82
 800a162:	4620      	mov	r0, r4
 800a164:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800a166:	f00c fcf5 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a16a:	4604      	mov	r4, r0
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	3338      	adds	r3, #56	; 0x38
 800a170:	681d      	ldr	r5, [r3, #0]
 800a172:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 800a176:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a17a:	4698      	mov	r8, r3
 800a17c:	f00c fcfa 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a180:	4603      	mov	r3, r0
 800a182:	9302      	str	r3, [sp, #8]
 800a184:	2367      	movs	r3, #103	; 0x67
 800a186:	9301      	str	r3, [sp, #4]
 800a188:	4b4f      	ldr	r3, [pc, #316]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	4b51      	ldr	r3, [pc, #324]	; (800a2d4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x24c>)
 800a18e:	4642      	mov	r2, r8
 800a190:	4631      	mov	r1, r6
 800a192:	4620      	mov	r0, r4
 800a194:	47a8      	blx	r5
	LONGS_EQUAL(0x0001,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 800a196:	f00c fcdd 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a19a:	4604      	mov	r4, r0
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	3338      	adds	r3, #56	; 0x38
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f00c fcdc 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	2368      	movs	r3, #104	; 0x68
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	4b40      	ldr	r3, [pc, #256]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4b43      	ldr	r3, [pc, #268]	; (800a2d8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x250>)
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[4] << 8) + outputBuffer[5]));
 800a1d2:	f00c fcbf 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	3338      	adds	r3, #56	; 0x38
 800a1dc:	681d      	ldr	r5, [r3, #0]
 800a1de:	f8b7 60c0 	ldrh.w	r6, [r7, #192]	; 0xc0
 800a1e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	021b      	lsls	r3, r3, #8
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4413      	add	r3, r2
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4698      	mov	r8, r3
 800a1f8:	f00c fcbc 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	9302      	str	r3, [sp, #8]
 800a200:	2369      	movs	r3, #105	; 0x69
 800a202:	9301      	str	r3, [sp, #4]
 800a204:	4b30      	ldr	r3, [pc, #192]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	4b34      	ldr	r3, [pc, #208]	; (800a2dc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x254>)
 800a20a:	4642      	mov	r2, r8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4620      	mov	r0, r4
 800a210:	47a8      	blx	r5

	int32_t index = 6;
 800a212:	2306      	movs	r3, #6
 800a214:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	for(int16_t i=0;i<topicLength;i++)
 800a218:	2300      	movs	r3, #0
 800a21a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800a21e:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 800a222:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a226:	429a      	cmp	r2, r3
 800a228:	da2d      	bge.n	800a286 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x1fe>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800a22a:	f00c fc93 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a22e:	4604      	mov	r4, r0
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	3338      	adds	r3, #56	; 0x38
 800a234:	681d      	ldr	r5, [r3, #0]
 800a236:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800a23a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800a23e:	4413      	add	r3, r2
 800a240:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a244:	461e      	mov	r6, r3
 800a246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a250:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800a254:	4413      	add	r3, r2
 800a256:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800a25a:	4698      	mov	r8, r3
 800a25c:	f00c fc8a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a260:	4603      	mov	r3, r0
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	236f      	movs	r3, #111	; 0x6f
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4b1c      	ldr	r3, [pc, #112]	; (800a2e0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x258>)
 800a26e:	4642      	mov	r2, r8
 800a270:	4631      	mov	r1, r6
 800a272:	4620      	mov	r0, r4
 800a274:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800a276:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3301      	adds	r3, #1
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800a284:	e7cb      	b.n	800a21e <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x196>
	}

	LONGS_EQUAL(0,outputBuffer[index]);
 800a286:	f00c fc65 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a28a:	4604      	mov	r4, r0
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	3338      	adds	r3, #56	; 0x38
 800a290:	681d      	ldr	r5, [r3, #0]
 800a292:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a29a:	4413      	add	r3, r2
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	461e      	mov	r6, r3
 800a2a0:	f00c fc68 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	2372      	movs	r3, #114	; 0x72
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	4b06      	ldr	r3, [pc, #24]	; (800a2c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x25c>)
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	47a8      	blx	r5


}
 800a2ba:	bf00      	nop
 800a2bc:	37c8      	adds	r7, #200	; 0xc8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c4:	08026d2c 	.word	0x08026d2c
 800a2c8:	080268a8 	.word	0x080268a8
 800a2cc:	08026b74 	.word	0x08026b74
 800a2d0:	08026ba8 	.word	0x08026ba8
 800a2d4:	08026bd4 	.word	0x08026bd4
 800a2d8:	08026c08 	.word	0x08026c08
 800a2dc:	08026c5c 	.word	0x08026c5c
 800a2e0:	08026cb4 	.word	0x08026cb4
 800a2e4:	08026d00 	.word	0x08026d00

0800a2e8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>:

TEST(MqttTestGroup, PublishPacketTest)
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7ff fc6c 	bl	8009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a2f8:	4a03      	ldr	r2, [pc, #12]	; (800a308 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev+0x20>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	0802b438 	.word	0x0802b438

0800a30c <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv>:
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	2277      	movs	r2, #119	; 0x77
 800a316:	4906      	ldr	r1, [pc, #24]	; (800a330 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv+0x24>)
 800a318:	2004      	movs	r0, #4
 800a31a:	f002 fc75 	bl	800cc08 <_ZnwjPKci>
 800a31e:	4604      	mov	r4, r0
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff ffe1 	bl	800a2e8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>
 800a326:	4623      	mov	r3, r4
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd90      	pop	{r4, r7, pc}
 800a330:	080268a8 	.word	0x080268a8

0800a334 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>:
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	f00b f850 	bl	80153e4 <_ZN10UtestShellC1Ev>
 800a344:	4a03      	ldr	r2, [pc, #12]	; (800a354 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev+0x20>)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	0802b38c 	.word	0x0802b38c

0800a358 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv>:
{
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	b0d2      	sub	sp, #328	; 0x148
 800a35e:	af04      	add	r7, sp, #16
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	6018      	str	r0, [r3, #0]
	char topicName[] = "Testtopic";
 800a364:	4a9f      	ldr	r2, [pc, #636]	; (800a5e4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x28c>)
 800a366:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a36a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a36c:	c303      	stmia	r3!, {r0, r1}
 800a36e:	801a      	strh	r2, [r3, #0]
	char message[] = "hello world!";
 800a370:	4b9d      	ldr	r3, [pc, #628]	; (800a5e8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800a372:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800a376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a378:	c407      	stmia	r4!, {r0, r1, r2}
 800a37a:	7023      	strb	r3, [r4, #0]

	uint16_t topicLength = strlen(topicName);
 800a37c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a380:	4618      	mov	r0, r3
 800a382:	f7f5 ff5b 	bl	800023c <strlen>
 800a386:	4603      	mov	r3, r0
 800a388:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t messageLength = strlen(message);
 800a38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a390:	4618      	mov	r0, r3
 800a392:	f7f5 ff53 	bl	800023c <strlen>
 800a396:	4603      	mov	r3, r0
 800a398:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint8_t remainLength = (uint8_t)topicLength+ (uint8_t)messageLength + 2;
 800a39c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	3302      	adds	r3, #2
 800a3ae:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	uint8_t outputBuffer[100] = {0};
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a3bc:	2260      	movs	r2, #96	; 0x60
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f018 fcc9 	bl	8022d58 <memset>

	MQTT_Publish_Packet publishPacket = {0};
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	239a      	movs	r3, #154	; 0x9a
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	f018 fcc1 	bl	8022d58 <memset>

	publishPacket.publishPacketByte = 0x30;
 800a3d6:	f107 0308 	add.w	r3, r7, #8
 800a3da:	2230      	movs	r2, #48	; 0x30
 800a3dc:	701a      	strb	r2, [r3, #0]
	publishPacket.remainLength = remainLength;
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a3e6:	705a      	strb	r2, [r3, #1]
	publishPacket.topicLength = topicLength;
 800a3e8:	f107 0308 	add.w	r3, r7, #8
 800a3ec:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800a3f0:	805a      	strh	r2, [r3, #2]
	strcpy(publishPacket.topic,topicName);
 800a3f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800a3f6:	f107 0308 	add.w	r3, r7, #8
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f018 fec3 	bl	802318a <strcpy>
	strcpy(publishPacket.message,message);
 800a404:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	3336      	adds	r3, #54	; 0x36
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f018 feba 	bl	802318a <strcpy>

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &publishPacket, PUBLISH_PACKET);
 800a416:	f107 0108 	add.w	r1, r7, #8
 800a41a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a41e:	2202      	movs	r2, #2
 800a420:	4618      	mov	r0, r3
 800a422:	f7f9 ff6f 	bl	8004304 <mqtt_encode_packet>
 800a426:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800a42a:	f00c fb93 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a42e:	4604      	mov	r4, r0
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	3338      	adds	r3, #56	; 0x38
 800a434:	681d      	ldr	r5, [r3, #0]
 800a436:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a43a:	1c9e      	adds	r6, r3, #2
 800a43c:	f00c fb9a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a440:	4603      	mov	r3, r0
 800a442:	9302      	str	r3, [sp, #8]
 800a444:	238c      	movs	r3, #140	; 0x8c
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	4b68      	ldr	r3, [pc, #416]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4b68      	ldr	r3, [pc, #416]	; (800a5f0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x298>)
 800a44e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a452:	4631      	mov	r1, r6
 800a454:	4620      	mov	r0, r4
 800a456:	47a8      	blx	r5
	LONGS_EQUAL(0x30,outputBuffer[0]);
 800a458:	f00c fb7c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a45c:	4604      	mov	r4, r0
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	3338      	adds	r3, #56	; 0x38
 800a462:	681d      	ldr	r5, [r3, #0]
 800a464:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800a468:	461e      	mov	r6, r3
 800a46a:	f00c fb83 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a46e:	4603      	mov	r3, r0
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	238d      	movs	r3, #141	; 0x8d
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	4b5d      	ldr	r3, [pc, #372]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	4b5e      	ldr	r3, [pc, #376]	; (800a5f4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x29c>)
 800a47c:	4632      	mov	r2, r6
 800a47e:	2130      	movs	r1, #48	; 0x30
 800a480:	4620      	mov	r0, r4
 800a482:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800a484:	f00c fb66 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a488:	4604      	mov	r4, r0
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	3338      	adds	r3, #56	; 0x38
 800a48e:	681d      	ldr	r5, [r3, #0]
 800a490:	f897 612b 	ldrb.w	r6, [r7, #299]	; 0x12b
 800a494:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800a498:	4698      	mov	r8, r3
 800a49a:	f00c fb6b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	9302      	str	r3, [sp, #8]
 800a4a2:	238e      	movs	r3, #142	; 0x8e
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	4b51      	ldr	r3, [pc, #324]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4b53      	ldr	r3, [pc, #332]	; (800a5f8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a0>)
 800a4ac:	4642      	mov	r2, r8
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 800a4b4:	f00c fb4e 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	3338      	adds	r3, #56	; 0x38
 800a4be:	681d      	ldr	r5, [r3, #0]
 800a4c0:	f8b7 612e 	ldrh.w	r6, [r7, #302]	; 0x12e
 800a4c4:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	021b      	lsls	r3, r3, #8
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4413      	add	r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	4698      	mov	r8, r3
 800a4da:	f00c fb4b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	238f      	movs	r3, #143	; 0x8f
 800a4e4:	9301      	str	r3, [sp, #4]
 800a4e6:	4b41      	ldr	r3, [pc, #260]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4b44      	ldr	r3, [pc, #272]	; (800a5fc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a4>)
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	47a8      	blx	r5

	int32_t index = 4;
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	for(int16_t i=0;i<topicLength;i++)
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a500:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	; 0x132
 800a504:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a508:	429a      	cmp	r2, r3
 800a50a:	da2d      	bge.n	800a568 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x210>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800a50c:	f00c fb22 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a510:	4604      	mov	r4, r0
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	3338      	adds	r3, #56	; 0x38
 800a516:	681d      	ldr	r5, [r3, #0]
 800a518:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a51c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a520:	4413      	add	r3, r2
 800a522:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a526:	461e      	mov	r6, r3
 800a528:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a532:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a536:	4413      	add	r3, r2
 800a538:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a53c:	4698      	mov	r8, r3
 800a53e:	f00c fb19 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a542:	4603      	mov	r3, r0
 800a544:	9302      	str	r3, [sp, #8]
 800a546:	2395      	movs	r3, #149	; 0x95
 800a548:	9301      	str	r3, [sp, #4]
 800a54a:	4b28      	ldr	r3, [pc, #160]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	4b2c      	ldr	r3, [pc, #176]	; (800a600 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a8>)
 800a550:	4642      	mov	r2, r8
 800a552:	4631      	mov	r1, r6
 800a554:	4620      	mov	r0, r4
 800a556:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800a558:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	3301      	adds	r3, #1
 800a560:	b29b      	uxth	r3, r3
 800a562:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a566:	e7cb      	b.n	800a500 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x1a8>
	}

	for(int16_t i=0;i<messageLength;i++)
 800a568:	2300      	movs	r3, #0
 800a56a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a56e:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 800a572:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a576:	429a      	cmp	r2, r3
 800a578:	da2d      	bge.n	800a5d6 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x27e>
	{
		BYTES_EQUAL(message[i],outputBuffer[index++]);
 800a57a:	f00c faeb 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a57e:	4604      	mov	r4, r0
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	3338      	adds	r3, #56	; 0x38
 800a584:	681d      	ldr	r5, [r3, #0]
 800a586:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a58a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a58e:	4413      	add	r3, r2
 800a590:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800a594:	461e      	mov	r6, r3
 800a596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a5a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a5aa:	4698      	mov	r8, r3
 800a5ac:	f00c fae2 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	239a      	movs	r3, #154	; 0x9a
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	4b0c      	ldr	r3, [pc, #48]	; (800a5ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	4b11      	ldr	r3, [pc, #68]	; (800a604 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2ac>)
 800a5be:	4642      	mov	r2, r8
 800a5c0:	4631      	mov	r1, r6
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	47a8      	blx	r5
	for(int16_t i=0;i<messageLength;i++)
 800a5c6:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a5d4:	e7cb      	b.n	800a56e <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x216>
	}


}
 800a5d6:	bf00      	nop
 800a5d8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e2:	bf00      	nop
 800a5e4:	08026d2c 	.word	0x08026d2c
 800a5e8:	08026e04 	.word	0x08026e04
 800a5ec:	080268a8 	.word	0x080268a8
 800a5f0:	08026b74 	.word	0x08026b74
 800a5f4:	08026d38 	.word	0x08026d38
 800a5f8:	08026bd4 	.word	0x08026bd4
 800a5fc:	08026d64 	.word	0x08026d64
 800a600:	08026cb4 	.word	0x08026cb4
 800a604:	08026dbc 	.word	0x08026dbc

0800a608 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev>:

TEST(MqttTestGroup, MqttConnectBrokerTest)
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fadc 	bl	8009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a618:	4a03      	ldr	r2, [pc, #12]	; (800a628 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev+0x20>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	0802b36c 	.word	0x0802b36c

0800a62c <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShell10createTestEv>:
 800a62c:	b590      	push	{r4, r7, lr}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	22a0      	movs	r2, #160	; 0xa0
 800a636:	4906      	ldr	r1, [pc, #24]	; (800a650 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShell10createTestEv+0x24>)
 800a638:	2004      	movs	r0, #4
 800a63a:	f002 fae5 	bl	800cc08 <_ZnwjPKci>
 800a63e:	4604      	mov	r4, r0
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff ffe1 	bl	800a608 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev>
 800a646:	4623      	mov	r3, r4
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd90      	pop	{r4, r7, pc}
 800a650:	080268a8 	.word	0x080268a8

0800a654 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev>:
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4618      	mov	r0, r3
 800a660:	f00a fec0 	bl	80153e4 <_ZN10UtestShellC1Ev>
 800a664:	4a03      	ldr	r2, [pc, #12]	; (800a674 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev+0x20>)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4618      	mov	r0, r3
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0802b2c0 	.word	0x0802b2c0

0800a678 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv>:
{
 800a678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800a67e:	af04      	add	r7, sp, #16
 800a680:	1d3b      	adds	r3, r7, #4
 800a682:	6018      	str	r0, [r3, #0]
	const char ip[] = "broker.mqttdashboard.com";
 800a684:	4bc6      	ldr	r3, [pc, #792]	; (800a9a0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x328>)
 800a686:	f507 74d6 	add.w	r4, r7, #428	; 0x1ac
 800a68a:	461d      	mov	r5, r3
 800a68c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a68e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a694:	c403      	stmia	r4!, {r0, r1}
 800a696:	7022      	strb	r2, [r4, #0]
	const char port[] = "1883";
 800a698:	4ac2      	ldr	r2, [pc, #776]	; (800a9a4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x32c>)
 800a69a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800a69e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6a2:	6018      	str	r0, [r3, #0]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	7019      	strb	r1, [r3, #0]
	const char clientID[] = "Topuz";
 800a6a8:	4abf      	ldr	r2, [pc, #764]	; (800a9a8 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x330>)
 800a6aa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a6ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6b2:	6018      	str	r0, [r3, #0]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	8019      	strh	r1, [r3, #0]

	const char esp_response[4][50] = {
 800a6b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a6bc:	4abb      	ldr	r2, [pc, #748]	; (800a9ac <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x334>)
 800a6be:	4618      	mov	r0, r3
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	23c8      	movs	r3, #200	; 0xc8
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f018 fb39 	bl	8022d3c <memcpy>
			AT_RESPONSE_OK,
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	const char esp_commands[3][60] = {
 800a6ca:	f107 0320 	add.w	r3, r7, #32
 800a6ce:	4ab8      	ldr	r2, [pc, #736]	; (800a9b0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x338>)
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	23b4      	movs	r3, #180	; 0xb4
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f018 fb30 	bl	8022d3c <memcpy>
			AT_CIPMUX_SINGLE,
			"AT+CIPSTART=\"TCP\",\"broker.mqttdashboard.com\",1883\r\n",
			"AT+CIPSEND=19\r\n" // 19 represents the number of bytes to be sent.
	};

	for(int i=0;i<3;i++)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800a6e2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	dc74      	bgt.n	800a7d4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x15c>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)esp_commands[i], strlen(esp_commands[i])).withIntParameter("size", strlen(esp_commands[i]));
 800a6ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a6ee:	49b1      	ldr	r1, [pc, #708]	; (800a9b4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f004 fe4c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a6f6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f002 ff1f 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a702:	4604      	mov	r4, r0
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	330c      	adds	r3, #12
 800a708:	681d      	ldr	r5, [r3, #0]
 800a70a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a70e:	49aa      	ldr	r1, [pc, #680]	; (800a9b8 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x340>)
 800a710:	4618      	mov	r0, r3
 800a712:	f004 fe3c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a716:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a71a:	4619      	mov	r1, r3
 800a71c:	4620      	mov	r0, r4
 800a71e:	47a8      	blx	r5
 800a720:	4605      	mov	r5, r0
 800a722:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a726:	49a5      	ldr	r1, [pc, #660]	; (800a9bc <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x344>)
 800a728:	4618      	mov	r0, r3
 800a72a:	f004 fe30 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a72e:	f107 0120 	add.w	r1, r7, #32
 800a732:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a736:	4613      	mov	r3, r2
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	1a9b      	subs	r3, r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	18cc      	adds	r4, r1, r3
 800a740:	f107 0120 	add.w	r1, r7, #32
 800a744:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a748:	4613      	mov	r3, r2
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	440b      	add	r3, r1
 800a752:	4618      	mov	r0, r3
 800a754:	f7f5 fd72 	bl	800023c <strlen>
 800a758:	4603      	mov	r3, r0
 800a75a:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 800a75e:	4622      	mov	r2, r4
 800a760:	4628      	mov	r0, r5
 800a762:	f7fa f933 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800a766:	4604      	mov	r4, r0
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	332c      	adds	r3, #44	; 0x2c
 800a76c:	681d      	ldr	r5, [r3, #0]
 800a76e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a772:	4993      	ldr	r1, [pc, #588]	; (800a9c0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x348>)
 800a774:	4618      	mov	r0, r3
 800a776:	f004 fe0a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a77a:	f107 0120 	add.w	r1, r7, #32
 800a77e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a782:	4613      	mov	r3, r2
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	1a9b      	subs	r3, r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f5 fd55 	bl	800023c <strlen>
 800a792:	4603      	mov	r3, r0
 800a794:	461a      	mov	r2, r3
 800a796:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a79a:	4619      	mov	r1, r3
 800a79c:	4620      	mov	r0, r4
 800a79e:	47a8      	blx	r5
 800a7a0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f005 f9aa 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a7aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f005 f9a5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a7b4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f005 f9a0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a7be:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f005 f99b 	bl	800fafe <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800a7c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800a7d2:	e786      	b.n	800a6e2 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x6a>
	}
	// mocking connect packet
	uint8_t data_buffer[] = {0x10,0x11,0x00,0x04,'M','Q','T','T',0x04,0x02,0x00,0x3C,0x00,0x05,'T','o','p','u','z'};
 800a7d4:	f107 030c 	add.w	r3, r7, #12
 800a7d8:	4a7a      	ldr	r2, [pc, #488]	; (800a9c4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x34c>)
 800a7da:	461c      	mov	r4, r3
 800a7dc:	4615      	mov	r5, r2
 800a7de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	8022      	strh	r2, [r4, #0]
 800a7e8:	3402      	adds	r4, #2
 800a7ea:	0c1b      	lsrs	r3, r3, #16
 800a7ec:	7023      	strb	r3, [r4, #0]

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data",(uint8_t*)data_buffer,19).withIntParameter("size", 19);
 800a7ee:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a7f2:	4970      	ldr	r1, [pc, #448]	; (800a9b4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f004 fdca 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a7fa:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f002 fe9d 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a806:	4604      	mov	r4, r0
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	330c      	adds	r3, #12
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a812:	4969      	ldr	r1, [pc, #420]	; (800a9b8 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x340>)
 800a814:	4618      	mov	r0, r3
 800a816:	f004 fdba 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a81a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a81e:	4619      	mov	r1, r3
 800a820:	4620      	mov	r0, r4
 800a822:	47a8      	blx	r5
 800a824:	4604      	mov	r4, r0
 800a826:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800a82a:	4964      	ldr	r1, [pc, #400]	; (800a9bc <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x344>)
 800a82c:	4618      	mov	r0, r3
 800a82e:	f004 fdae 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a832:	f107 020c 	add.w	r2, r7, #12
 800a836:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800a83a:	2313      	movs	r3, #19
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7fa f8c5 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800a842:	4604      	mov	r4, r0
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	332c      	adds	r3, #44	; 0x2c
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a84e:	495c      	ldr	r1, [pc, #368]	; (800a9c0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x348>)
 800a850:	4618      	mov	r0, r3
 800a852:	f004 fd9c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a85a:	2213      	movs	r2, #19
 800a85c:	4619      	mov	r1, r3
 800a85e:	4620      	mov	r0, r4
 800a860:	47a8      	blx	r5
 800a862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a866:	4618      	mov	r0, r3
 800a868:	f005 f949 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a86c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800a870:	4618      	mov	r0, r3
 800a872:	f005 f944 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a876:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f005 f93f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a880:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a884:	4618      	mov	r0, r3
 800a886:	f005 f93a 	bl	800fafe <_ZN12SimpleStringD1Ev>


	Status status;
	int i = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while(1)
	{

		status = mqtt_connect_broker(ip, port, clientID);
 800a890:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a894:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a898:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7f9 fec1 	bl	8004624 <mqtt_connect_broker>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b

		if(status != IDLE)
 800a8a8:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d15c      	bne.n	800a96a <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x2f2>
		{
			break;
		}
		if(i<4)
 800a8b0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	dceb      	bgt.n	800a890 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x218>
		{
			for(int j=0;j<(int)strlen(esp_response[i]);j++)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800a8be:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a8c2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a8c6:	2132      	movs	r1, #50	; 0x32
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7f5 fcb4 	bl	800023c <strlen>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	da3e      	bge.n	800a95e <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x2e6>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)esp_response[i][j]);
 800a8e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a8e4:	4933      	ldr	r1, [pc, #204]	; (800a9b4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f004 fd51 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a8ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f002 fe24 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	681d      	ldr	r5, [r3, #0]
 800a900:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a904:	4930      	ldr	r1, [pc, #192]	; (800a9c8 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x350>)
 800a906:	4618      	mov	r0, r3
 800a908:	f004 fd41 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800a90c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a910:	4619      	mov	r1, r3
 800a912:	4620      	mov	r0, r4
 800a914:	47a8      	blx	r5
 800a916:	4603      	mov	r3, r0
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	3264      	adds	r2, #100	; 0x64
 800a91c:	6812      	ldr	r2, [r2, #0]
 800a91e:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800a922:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800a926:	2432      	movs	r4, #50	; 0x32
 800a928:	fb04 f101 	mul.w	r1, r4, r1
 800a92c:	4408      	add	r0, r1
 800a92e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800a932:	4401      	add	r1, r0
 800a934:	7809      	ldrb	r1, [r1, #0]
 800a936:	4618      	mov	r0, r3
 800a938:	4790      	blx	r2
 800a93a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a93e:	4618      	mov	r0, r3
 800a940:	f005 f8dd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800a944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a948:	4618      	mov	r0, r3
 800a94a:	f005 f8d8 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800a94e:	f7f9 f9d3 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(esp_response[i]);j++)
 800a952:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a956:	3301      	adds	r3, #1
 800a958:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800a95c:	e7af      	b.n	800a8be <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x246>
			}
			i++;
 800a95e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a962:	3301      	adds	r3, #1
 800a964:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		}
	}
 800a968:	e792      	b.n	800a890 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x218>
			break;
 800a96a:	bf00      	nop


	LONGS_EQUAL(STATUS_OK,status);
 800a96c:	f00c f8f2 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800a970:	4604      	mov	r4, r0
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	3338      	adds	r3, #56	; 0x38
 800a976:	681d      	ldr	r5, [r3, #0]
 800a978:	f897 621b 	ldrb.w	r6, [r7, #539]	; 0x21b
 800a97c:	f00c f8fa 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a980:	4603      	mov	r3, r0
 800a982:	9302      	str	r3, [sp, #8]
 800a984:	23d4      	movs	r3, #212	; 0xd4
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	4b10      	ldr	r3, [pc, #64]	; (800a9cc <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x354>)
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x358>)
 800a98e:	4632      	mov	r2, r6
 800a990:	2102      	movs	r1, #2
 800a992:	4620      	mov	r0, r4
 800a994:	47a8      	blx	r5

}
 800a996:	bf00      	nop
 800a998:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a0:	08026e74 	.word	0x08026e74
 800a9a4:	08026e90 	.word	0x08026e90
 800a9a8:	080268f8 	.word	0x080268f8
 800a9ac:	08026e98 	.word	0x08026e98
 800a9b0:	08026f60 	.word	0x08026f60
 800a9b4:	080268a4 	.word	0x080268a4
 800a9b8:	08026e14 	.word	0x08026e14
 800a9bc:	08026e28 	.word	0x08026e28
 800a9c0:	08026e30 	.word	0x08026e30
 800a9c4:	08027014 	.word	0x08027014
 800a9c8:	08026e38 	.word	0x08026e38
 800a9cc:	080268a8 	.word	0x080268a8
 800a9d0:	08026e4c 	.word	0x08026e4c

0800a9d4 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestC1Ev>:

TEST(MqttTestGroup, MqttPingRequestTest)
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff f8f6 	bl	8009bd0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a9e4:	4a03      	ldr	r2, [pc, #12]	; (800a9f4 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestC1Ev+0x20>)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	0802b2a0 	.word	0x0802b2a0

0800a9f8 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShell10createTestEv>:
 800a9f8:	b590      	push	{r4, r7, lr}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	22d8      	movs	r2, #216	; 0xd8
 800aa02:	4906      	ldr	r1, [pc, #24]	; (800aa1c <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShell10createTestEv+0x24>)
 800aa04:	2004      	movs	r0, #4
 800aa06:	f002 f8ff 	bl	800cc08 <_ZnwjPKci>
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff ffe1 	bl	800a9d4 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestC1Ev>
 800aa12:	4623      	mov	r3, r4
 800aa14:	4618      	mov	r0, r3
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd90      	pop	{r4, r7, pc}
 800aa1c:	080268a8 	.word	0x080268a8

0800aa20 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellC1Ev>:
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f00a fcda 	bl	80153e4 <_ZN10UtestShellC1Ev>
 800aa30:	4a03      	ldr	r2, [pc, #12]	; (800aa40 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellC1Ev+0x20>)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	0802b1f4 	.word	0x0802b1f4

0800aa44 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv>:
{
 800aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa46:	b0ab      	sub	sp, #172	; 0xac
 800aa48:	af04      	add	r7, sp, #16
 800aa4a:	6078      	str	r0, [r7, #4]
	// pingreq packet size is two bytes [ 0xC0, 0x00]
	uint8_t pingReqPacket[2] = {0xC0, 0x00};
 800aa4c:	23c0      	movs	r3, #192	; 0xc0
 800aa4e:	833b      	strh	r3, [r7, #24]
	// pingresp packet size is two bytes [ 0xC1, 0x00]
	uint8_t pingRespPacket[2] = {0xC1, 0x00};
 800aa50:	23c1      	movs	r3, #193	; 0xc1
 800aa52:	82bb      	strh	r3, [r7, #20]

	char *response_buffer[2] =
 800aa54:	4ac3      	ldr	r2, [pc, #780]	; (800ad64 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x320>)
 800aa56:	f107 030c 	add.w	r3, r7, #12
 800aa5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa5e:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT+CIPSEND=2\r\n", strlen("AT+CIPSEND=2\r\n")).withIntParameter("size", strlen("AT+CIPSEND=2\r\n"));
 800aa62:	f107 031c 	add.w	r3, r7, #28
 800aa66:	49c0      	ldr	r1, [pc, #768]	; (800ad68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x324>)
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f004 fc90 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800aa6e:	f107 031c 	add.w	r3, r7, #28
 800aa72:	2100      	movs	r1, #0
 800aa74:	4618      	mov	r0, r3
 800aa76:	f002 fd63 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	330c      	adds	r3, #12
 800aa80:	681d      	ldr	r5, [r3, #0]
 800aa82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa86:	49b9      	ldr	r1, [pc, #740]	; (800ad6c <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x328>)
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f004 fc80 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800aa8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa92:	4619      	mov	r1, r3
 800aa94:	4620      	mov	r0, r4
 800aa96:	47a8      	blx	r5
 800aa98:	4604      	mov	r4, r0
 800aa9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa9e:	49b4      	ldr	r1, [pc, #720]	; (800ad70 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x32c>)
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f004 fc74 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800aaa6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800aaaa:	230e      	movs	r3, #14
 800aaac:	4ab1      	ldr	r2, [pc, #708]	; (800ad74 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x330>)
 800aaae:	4620      	mov	r0, r4
 800aab0:	f7f9 ff8c 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800aab4:	4604      	mov	r4, r0
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	332c      	adds	r3, #44	; 0x2c
 800aaba:	681d      	ldr	r5, [r3, #0]
 800aabc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aac0:	49ad      	ldr	r1, [pc, #692]	; (800ad78 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x334>)
 800aac2:	4618      	mov	r0, r3
 800aac4:	f004 fc63 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800aac8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aacc:	220e      	movs	r2, #14
 800aace:	4619      	mov	r1, r3
 800aad0:	4620      	mov	r0, r4
 800aad2:	47a8      	blx	r5
 800aad4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aad8:	4618      	mov	r0, r3
 800aada:	f005 f810 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800aade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aae2:	4618      	mov	r0, r3
 800aae4:	f005 f80b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800aae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaec:	4618      	mov	r0, r3
 800aaee:	f005 f806 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800aaf2:	f107 031c 	add.w	r3, r7, #28
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f005 f801 	bl	800fafe <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", pingReqPacket, 2).withIntParameter("size", 2);
 800aafc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab00:	4999      	ldr	r1, [pc, #612]	; (800ad68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x324>)
 800ab02:	4618      	mov	r0, r3
 800ab04:	f004 fc43 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ab08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f002 fd16 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800ab14:	4604      	mov	r4, r0
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	681d      	ldr	r5, [r3, #0]
 800ab1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab20:	4992      	ldr	r1, [pc, #584]	; (800ad6c <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x328>)
 800ab22:	4618      	mov	r0, r3
 800ab24:	f004 fc33 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ab28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4620      	mov	r0, r4
 800ab30:	47a8      	blx	r5
 800ab32:	4604      	mov	r4, r0
 800ab34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab38:	498d      	ldr	r1, [pc, #564]	; (800ad70 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x32c>)
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f004 fc27 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ab40:	f107 0218 	add.w	r2, r7, #24
 800ab44:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ab48:	2302      	movs	r3, #2
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7f9 ff3e 	bl	80049cc <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800ab50:	4604      	mov	r4, r0
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	332c      	adds	r3, #44	; 0x2c
 800ab56:	681d      	ldr	r5, [r3, #0]
 800ab58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ab5c:	4986      	ldr	r1, [pc, #536]	; (800ad78 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x334>)
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f004 fc15 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ab64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ab68:	2202      	movs	r2, #2
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	47a8      	blx	r5
 800ab70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ab74:	4618      	mov	r0, r3
 800ab76:	f004 ffc2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ab7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f004 ffbd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ab84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f004 ffb8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ab8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab92:	4618      	mov	r0, r3
 800ab94:	f004 ffb3 	bl	800fafe <_ZN12SimpleStringD1Ev>

	Status response = IDLE;
 800ab98:	2304      	movs	r3, #4
 800ab9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	int i= 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while(1){

		response = mqtt_ping_request();
 800aba4:	f7f9 fdd4 	bl	8004750 <mqtt_ping_request>
 800aba8:	4603      	mov	r3, r0
 800abaa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		if(response != IDLE)
 800abae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	f040 80bb 	bne.w	800ad2e <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x2ea>
		{
			break;
		}
		if(i<2)
 800abb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	dc59      	bgt.n	800ac74 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x230>
		{
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800abd0:	4413      	add	r3, r2
 800abd2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f5 fb30 	bl	800023c <strlen>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800abe4:	4293      	cmp	r3, r2
 800abe6:	da3f      	bge.n	800ac68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x224>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_buffer[i][j]);
 800abe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800abec:	495e      	ldr	r1, [pc, #376]	; (800ad68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x324>)
 800abee:	4618      	mov	r0, r3
 800abf0:	f004 fbcd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800abf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800abf8:	2100      	movs	r1, #0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f002 fca0 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800ac00:	4604      	mov	r4, r0
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	681d      	ldr	r5, [r3, #0]
 800ac08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ac0c:	495b      	ldr	r1, [pc, #364]	; (800ad7c <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x338>)
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f004 fbbd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ac14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	47a8      	blx	r5
 800ac1e:	4602      	mov	r2, r0
 800ac20:	6813      	ldr	r3, [r2, #0]
 800ac22:	3364      	adds	r3, #100	; 0x64
 800ac24:	681c      	ldr	r4, [r3, #0]
 800ac26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800ac30:	440b      	add	r3, r1
 800ac32:	f853 1c8c 	ldr.w	r1, [r3, #-140]
 800ac36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac3a:	440b      	add	r3, r1
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	47a0      	blx	r4
 800ac44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f004 ff58 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ac4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ac52:	4618      	mov	r0, r3
 800ac54:	f004 ff53 	bl	800fafe <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800ac58:	f7f9 f84e 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 800ac5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac60:	3301      	adds	r3, #1
 800ac62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac66:	e7ae      	b.n	800abc6 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x182>
			}
			i++;
 800ac68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac72:	e797      	b.n	800aba4 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x160>
		}
		else{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)pingRespPacket[0]);
 800ac74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ac78:	493b      	ldr	r1, [pc, #236]	; (800ad68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x324>)
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f004 fb87 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ac80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f002 fc5a 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	330c      	adds	r3, #12
 800ac92:	681d      	ldr	r5, [r3, #0]
 800ac94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ac98:	4938      	ldr	r1, [pc, #224]	; (800ad7c <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x338>)
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f004 fb77 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800aca0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800aca4:	4619      	mov	r1, r3
 800aca6:	4620      	mov	r0, r4
 800aca8:	47a8      	blx	r5
 800acaa:	4603      	mov	r3, r0
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	3264      	adds	r2, #100	; 0x64
 800acb0:	6812      	ldr	r2, [r2, #0]
 800acb2:	7d39      	ldrb	r1, [r7, #20]
 800acb4:	4618      	mov	r0, r3
 800acb6:	4790      	blx	r2
 800acb8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800acbc:	4618      	mov	r0, r3
 800acbe:	f004 ff1e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800acc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800acc6:	4618      	mov	r0, r3
 800acc8:	f004 ff19 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800accc:	f7f9 f814 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)pingRespPacket[1]);
 800acd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800acd4:	4924      	ldr	r1, [pc, #144]	; (800ad68 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x324>)
 800acd6:	4618      	mov	r0, r3
 800acd8:	f004 fb59 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800acdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f002 fc2c 	bl	800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800ace8:	4604      	mov	r4, r0
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	330c      	adds	r3, #12
 800acee:	681d      	ldr	r5, [r3, #0]
 800acf0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800acf4:	4921      	ldr	r1, [pc, #132]	; (800ad7c <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x338>)
 800acf6:	4618      	mov	r0, r3
 800acf8:	f004 fb49 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800acfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ad00:	4619      	mov	r1, r3
 800ad02:	4620      	mov	r0, r4
 800ad04:	47a8      	blx	r5
 800ad06:	4603      	mov	r3, r0
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	3264      	adds	r2, #100	; 0x64
 800ad0c:	6812      	ldr	r2, [r2, #0]
 800ad0e:	7d79      	ldrb	r1, [r7, #21]
 800ad10:	4618      	mov	r0, r3
 800ad12:	4790      	blx	r2
 800ad14:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f004 fef0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ad1e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ad22:	4618      	mov	r0, r3
 800ad24:	f004 feeb 	bl	800fafe <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800ad28:	f7f8 ffe6 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		}

	}
 800ad2c:	e73a      	b.n	800aba4 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x160>
			break;
 800ad2e:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 800ad30:	f00b ff10 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800ad34:	4604      	mov	r4, r0
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	3338      	adds	r3, #56	; 0x38
 800ad3a:	681d      	ldr	r5, [r3, #0]
 800ad3c:	f897 608f 	ldrb.w	r6, [r7, #143]	; 0x8f
 800ad40:	f00b ff18 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ad44:	4603      	mov	r3, r0
 800ad46:	9302      	str	r3, [sp, #8]
 800ad48:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x33c>)
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_Test8testBodyEv+0x340>)
 800ad54:	4632      	mov	r2, r6
 800ad56:	2102      	movs	r1, #2
 800ad58:	4620      	mov	r0, r4
 800ad5a:	47a8      	blx	r5

}
 800ad5c:	bf00      	nop
 800ad5e:	379c      	adds	r7, #156	; 0x9c
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad64:	08027060 	.word	0x08027060
 800ad68:	080268a4 	.word	0x080268a4
 800ad6c:	08026e14 	.word	0x08026e14
 800ad70:	08026e28 	.word	0x08026e28
 800ad74:	08027028 	.word	0x08027028
 800ad78:	08026e30 	.word	0x08026e30
 800ad7c:	08026e38 	.word	0x08026e38
 800ad80:	080268a8 	.word	0x080268a8
 800ad84:	08027038 	.word	0x08027038

0800ad88 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellD1Ev>:
TEST(MqttTestGroup, MqttPingRequestTest)
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	4a05      	ldr	r2, [pc, #20]	; (800ada8 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellD1Ev+0x20>)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f00a fb77 	bl	801548c <_ZN10UtestShellD1Ev>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	0802b1f4 	.word	0x0802b1f4

0800adac <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellD0Ev>:
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ffe7 	bl	800ad88 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellD1Ev>
 800adba:	211c      	movs	r1, #28
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 ff37 	bl	800cc30 <_ZdlPvj>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestD1Ev>:
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	4a05      	ldr	r2, [pc, #20]	; (800adec <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestD1Ev+0x20>)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4618      	mov	r0, r3
 800adde:	f7fe ff09 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0802b2a0 	.word	0x0802b2a0

0800adf0 <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestD0Ev>:
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff ffe7 	bl	800adcc <_ZN43TEST_MqttTestGroup_MqttPingRequestTest_TestD1Ev>
 800adfe:	2104      	movs	r1, #4
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 ff15 	bl	800cc30 <_ZdlPvj>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>:
TEST(MqttTestGroup, MqttConnectBrokerTest)
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	4a05      	ldr	r2, [pc, #20]	; (800ae30 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev+0x20>)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f00a fb33 	bl	801548c <_ZN10UtestShellD1Ev>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	0802b2c0 	.word	0x0802b2c0

0800ae34 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD0Ev>:
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff ffe7 	bl	800ae10 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>
 800ae42:	211c      	movs	r1, #28
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 fef3 	bl	800cc30 <_ZdlPvj>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev>:
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	4a05      	ldr	r2, [pc, #20]	; (800ae74 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev+0x20>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe fec5 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	0802b36c 	.word	0x0802b36c

0800ae78 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD0Ev>:
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff ffe7 	bl	800ae54 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev>
 800ae86:	2104      	movs	r1, #4
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f001 fed1 	bl	800cc30 <_ZdlPvj>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, PublishPacketTest)
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	4a05      	ldr	r2, [pc, #20]	; (800aeb8 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev+0x20>)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f00a faef 	bl	801548c <_ZN10UtestShellD1Ev>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	0802b38c 	.word	0x0802b38c

0800aebc <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD0Ev>:
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ffe7 	bl	800ae98 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
 800aeca:	211c      	movs	r1, #28
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 feaf 	bl	800cc30 <_ZdlPvj>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>:
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	4a05      	ldr	r2, [pc, #20]	; (800aefc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev+0x20>)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fe fe81 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	0802b438 	.word	0x0802b438

0800af00 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD0Ev>:
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ffe7 	bl	800aedc <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>
 800af0e:	2104      	movs	r1, #4
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f001 fe8d 	bl	800cc30 <_ZdlPvj>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, SubscribePacketTest)
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	4a05      	ldr	r2, [pc, #20]	; (800af40 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev+0x20>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	f00a faab 	bl	801548c <_ZN10UtestShellD1Ev>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0802b458 	.word	0x0802b458

0800af44 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD0Ev>:
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ffe7 	bl	800af20 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
 800af52:	211c      	movs	r1, #28
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 fe6b 	bl	800cc30 <_ZdlPvj>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>:
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	4a05      	ldr	r2, [pc, #20]	; (800af84 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev+0x20>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe fe3d 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	0802b504 	.word	0x0802b504

0800af88 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD0Ev>:
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ffe7 	bl	800af64 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>
 800af96:	2104      	movs	r1, #4
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fe49 	bl	800cc30 <_ZdlPvj>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	4a05      	ldr	r2, [pc, #20]	; (800afc8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f00a fa67 	bl	801548c <_ZN10UtestShellD1Ev>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	0802b524 	.word	0x0802b524

0800afcc <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffe7 	bl	800afa8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 800afda:	211c      	movs	r1, #28
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fe27 	bl	800cc30 <_ZdlPvj>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	4a05      	ldr	r2, [pc, #20]	; (800b00c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	f7fe fdf9 	bl	8009bf4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	0802b5d0 	.word	0x0802b5d0

0800b010 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff ffe7 	bl	800afec <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 800b01e:	2104      	movs	r1, #4
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 fe05 	bl	800cc30 <_ZdlPvj>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <_Z41__static_initialization_and_destruction_0ii>:
}
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af02      	add	r7, sp, #8
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d145      	bne.n	800b0cc <_Z41__static_initialization_and_destruction_0ii+0x9c>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b046:	4293      	cmp	r3, r2
 800b048:	d140      	bne.n	800b0cc <_Z41__static_initialization_and_destruction_0ii+0x9c>
TEST(MqttTestGroup, ConnectPacketTest)
 800b04a:	4835      	ldr	r0, [pc, #212]	; (800b120 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800b04c:	f7fe fe1a 	bl	8009c84 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 800b050:	232a      	movs	r3, #42	; 0x2a
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	4b33      	ldr	r3, [pc, #204]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4b33      	ldr	r3, [pc, #204]	; (800b128 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800b05a:	4a34      	ldr	r2, [pc, #208]	; (800b12c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800b05c:	4930      	ldr	r1, [pc, #192]	; (800b120 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800b05e:	4834      	ldr	r0, [pc, #208]	; (800b130 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800b060:	f00c f810 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, SubscribePacketTest)
 800b064:	4833      	ldr	r0, [pc, #204]	; (800b134 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800b066:	f7fe fffd 	bl	800a064 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>
 800b06a:	2352      	movs	r3, #82	; 0x52
 800b06c:	9301      	str	r3, [sp, #4]
 800b06e:	4b2d      	ldr	r3, [pc, #180]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4b31      	ldr	r3, [pc, #196]	; (800b138 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800b074:	4a2d      	ldr	r2, [pc, #180]	; (800b12c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800b076:	492f      	ldr	r1, [pc, #188]	; (800b134 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800b078:	4830      	ldr	r0, [pc, #192]	; (800b13c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800b07a:	f00c f803 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, PublishPacketTest)
 800b07e:	4830      	ldr	r0, [pc, #192]	; (800b140 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800b080:	f7ff f958 	bl	800a334 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>
 800b084:	2377      	movs	r3, #119	; 0x77
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	4b26      	ldr	r3, [pc, #152]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4b2d      	ldr	r3, [pc, #180]	; (800b144 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 800b08e:	4a27      	ldr	r2, [pc, #156]	; (800b12c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800b090:	492b      	ldr	r1, [pc, #172]	; (800b140 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800b092:	482d      	ldr	r0, [pc, #180]	; (800b148 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800b094:	f00b fff6 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, MqttConnectBrokerTest)
 800b098:	482c      	ldr	r0, [pc, #176]	; (800b14c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800b09a:	f7ff fadb 	bl	800a654 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev>
 800b09e:	23a0      	movs	r3, #160	; 0xa0
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	4b20      	ldr	r3, [pc, #128]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	4b2a      	ldr	r3, [pc, #168]	; (800b150 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800b0a8:	4a20      	ldr	r2, [pc, #128]	; (800b12c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800b0aa:	4928      	ldr	r1, [pc, #160]	; (800b14c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800b0ac:	4829      	ldr	r0, [pc, #164]	; (800b154 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800b0ae:	f00b ffe9 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, MqttPingRequestTest)
 800b0b2:	4829      	ldr	r0, [pc, #164]	; (800b158 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800b0b4:	f7ff fcb4 	bl	800aa20 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellC1Ev>
 800b0b8:	23d8      	movs	r3, #216	; 0xd8
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	4b19      	ldr	r3, [pc, #100]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4b26      	ldr	r3, [pc, #152]	; (800b15c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800b0c2:	4a1a      	ldr	r2, [pc, #104]	; (800b12c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800b0c4:	4924      	ldr	r1, [pc, #144]	; (800b158 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800b0c6:	4826      	ldr	r0, [pc, #152]	; (800b160 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800b0c8:	f00b ffdc 	bl	8017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d122      	bne.n	800b118 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d11d      	bne.n	800b118 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 800b0dc:	4820      	ldr	r0, [pc, #128]	; (800b160 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800b0de:	f00b fffb 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800b0e2:	481d      	ldr	r0, [pc, #116]	; (800b158 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800b0e4:	f7ff fe50 	bl	800ad88 <_ZN48TEST_MqttTestGroup_MqttPingRequestTest_TestShellD1Ev>
TEST(MqttTestGroup, MqttConnectBrokerTest)
 800b0e8:	481a      	ldr	r0, [pc, #104]	; (800b154 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800b0ea:	f00b fff5 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800b0ee:	4817      	ldr	r0, [pc, #92]	; (800b14c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800b0f0:	f7ff fe8e 	bl	800ae10 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>
TEST(MqttTestGroup, PublishPacketTest)
 800b0f4:	4814      	ldr	r0, [pc, #80]	; (800b148 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800b0f6:	f00b ffef 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800b0fa:	4811      	ldr	r0, [pc, #68]	; (800b140 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800b0fc:	f7ff fecc 	bl	800ae98 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
TEST(MqttTestGroup, SubscribePacketTest)
 800b100:	480e      	ldr	r0, [pc, #56]	; (800b13c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 800b102:	f00b ffe9 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800b106:	480b      	ldr	r0, [pc, #44]	; (800b134 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800b108:	f7ff ff0a 	bl	800af20 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
TEST(MqttTestGroup, ConnectPacketTest)
 800b10c:	4808      	ldr	r0, [pc, #32]	; (800b130 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800b10e:	f00b ffe3 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 800b112:	4803      	ldr	r0, [pc, #12]	; (800b120 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800b114:	f7ff ff48 	bl	800afa8 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000940 	.word	0x20000940
 800b124:	080268a8 	.word	0x080268a8
 800b128:	08027068 	.word	0x08027068
 800b12c:	0802707c 	.word	0x0802707c
 800b130:	2000095c 	.word	0x2000095c
 800b134:	20000960 	.word	0x20000960
 800b138:	0802708c 	.word	0x0802708c
 800b13c:	2000097c 	.word	0x2000097c
 800b140:	20000980 	.word	0x20000980
 800b144:	080270a0 	.word	0x080270a0
 800b148:	2000099c 	.word	0x2000099c
 800b14c:	200009a0 	.word	0x200009a0
 800b150:	080270b4 	.word	0x080270b4
 800b154:	200009bc 	.word	0x200009bc
 800b158:	200009c0 	.word	0x200009c0
 800b15c:	080270cc 	.word	0x080270cc
 800b160:	200009dc 	.word	0x200009dc

0800b164 <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
 800b168:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b16c:	2001      	movs	r0, #1
 800b16e:	f7ff ff5f 	bl	800b030 <_Z41__static_initialization_and_destruction_0ii>
 800b172:	bd80      	pop	{r7, pc}

0800b174 <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
 800b178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b17c:	2000      	movs	r0, #0
 800b17e:	f7ff ff57 	bl	800b030 <_Z41__static_initialization_and_destruction_0ii>
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	68db      	ldr	r3, [r3, #12]
    }
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	69db      	ldr	r3, [r3, #28]
    }
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	695b      	ldr	r3, [r3, #20]
    }
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff ffed 	bl	800b1b4 <_ZNK10TestResult15getFailureCountEv>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10a      	bne.n	800b1f6 <_ZNK10TestResult9isFailureEv+0x2a>
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ffcf 	bl	800b184 <_ZNK10TestResult11getRunCountEv>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ffd7 	bl	800b19c <_ZNK10TestResult15getIgnoredCountEv>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4423      	add	r3, r4
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <_ZNK10TestResult9isFailureEv+0x2e>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <_ZNK10TestResult9isFailureEv+0x30>
 800b1fa:	2300      	movs	r3, #0
    }
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	bd90      	pop	{r4, r7, pc}

0800b204 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
    {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4618      	mov	r0, r3
 800b210:	f007 fde6 	bl	8012de0 <_ZN10TestOutputC1Ev>
 800b214:	4a03      	ldr	r2, [pc, #12]	; (800b224 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	601a      	str	r2, [r3, #0]
    }
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	0802bc84 	.word	0x0802bc84

0800b228 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
    {
 800b230:	4a05      	ldr	r2, [pc, #20]	; (800b248 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4618      	mov	r0, r3
 800b23a:	f007 fdef 	bl	8012e1c <_ZN10TestOutputD1Ev>
    }
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	0802bc84 	.word	0x0802bc84

0800b24c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
    }
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ffe7 	bl	800b228 <_ZN17ConsoleTestOutputD1Ev>
 800b25a:	2110      	movs	r1, #16
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f001 fce7 	bl	800cc30 <_ZdlPvj>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800b26c:	b5b0      	push	{r4, r5, r7, lr}
 800b26e:	b098      	sub	sp, #96	; 0x60
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
    int result = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800b27a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff ffc0 	bl	800b204 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800b284:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b288:	4935      	ldr	r1, [pc, #212]	; (800b360 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800b28a:	4618      	mov	r0, r3
 800b28c:	f004 f87f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800b290:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800b294:	f107 0318 	add.w	r3, r7, #24
 800b298:	2200      	movs	r2, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 ff6a 	bl	800d174 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 800b2a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f004 fc2a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800b2aa:	f107 0318 	add.w	r3, r7, #24
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f001 ff2f 	bl	800d114 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800b2b6:	f009 fb21 	bl	80148fc <_ZN12TestRegistry18getCurrentRegistryEv>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	3234      	adds	r2, #52	; 0x34
 800b2c0:	6812      	ldr	r2, [r2, #0]
 800b2c2:	f107 0118 	add.w	r1, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800b2ca:	f009 fb17 	bl	80148fc <_ZN12TestRegistry18getCurrentRegistryEv>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f107 0008 	add.w	r0, r7, #8
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	f000 f844 	bl	800b364 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 800b2dc:	f107 0308 	add.w	r3, r7, #8
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f899 	bl	800b418 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800b2e6:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800b2e8:	f107 0308 	add.w	r3, r7, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 f863 	bl	800b3b8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800b2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10c      	bne.n	800b312 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 800b2f8:	f107 0318 	add.w	r3, r7, #24
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f002 f83a 	bl	800d378 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800b304:	4602      	mov	r2, r0
 800b306:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f007 fe27 	bl	8012f60 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800b312:	f009 faf3 	bl	80148fc <_ZN12TestRegistry18getCurrentRegistryEv>
 800b316:	4604      	mov	r4, r0
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	3344      	adds	r3, #68	; 0x44
 800b31c:	681d      	ldr	r5, [r3, #0]
 800b31e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b322:	490f      	ldr	r1, [pc, #60]	; (800b360 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800b324:	4618      	mov	r0, r3
 800b326:	f004 f832 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800b32a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b32e:	4619      	mov	r1, r3
 800b330:	4620      	mov	r0, r4
 800b332:	47a8      	blx	r5
 800b334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b338:	4618      	mov	r0, r3
 800b33a:	f004 fbe0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return result;
 800b33e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800b340:	f107 0318 	add.w	r3, r7, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f001 ff4d 	bl	800d1e4 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800b34a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff ff6a 	bl	800b228 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800b354:	4623      	mov	r3, r4
}
 800b356:	4618      	mov	r0, r3
 800b358:	3760      	adds	r7, #96	; 0x60
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bdb0      	pop	{r4, r5, r7, pc}
 800b35e:	bf00      	nop
 800b360:	080270e0 	.word	0x080270e0

0800b364 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800b372:	4a0f      	ldr	r2, [pc, #60]	; (800b3b0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	609a      	str	r2, [r3, #8]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800b38a:	2241      	movs	r2, #65	; 0x41
 800b38c:	4909      	ldr	r1, [pc, #36]	; (800b3b4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800b38e:	2038      	movs	r0, #56	; 0x38
 800b390:	f001 fc3a 	bl	800cc08 <_ZnwjPKci>
 800b394:	4604      	mov	r4, r0
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	4620      	mov	r0, r4
 800b39c:	f00c f84a 	bl	8017434 <_ZN20CommandLineArgumentsC1EiPKPKc>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	609c      	str	r4, [r3, #8]
}
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd90      	pop	{r4, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0802b610 	.word	0x0802b610
 800b3b4:	080270f4 	.word	0x080270f4

0800b3b8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	4a0c      	ldr	r2, [pc, #48]	; (800b3f4 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d004      	beq.n	800b3d8 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	3204      	adds	r2, #4
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	4790      	blx	r2
    delete output_;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <_ZN21CommandLineTestRunnerD1Ev+0x32>
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	3204      	adds	r2, #4
 800b3e4:	6812      	ldr	r2, [r2, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	4790      	blx	r2
}
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0802b610 	.word	0x0802b610

0800b3f8 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
}
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff ffd9 	bl	800b3b8 <_ZN21CommandLineTestRunnerD1Ev>
 800b406:	2110      	movs	r1, #16
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 fc11 	bl	800cc30 <_ZdlPvj>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800b418:	b5b0      	push	{r4, r5, r7, lr}
 800b41a:	b08c      	sub	sp, #48	; 0x30
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800b420:	2301      	movs	r3, #1
 800b422:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800b424:	f107 031c 	add.w	r3, r7, #28
 800b428:	4929      	ldr	r1, [pc, #164]	; (800b4d0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800b42a:	4618      	mov	r0, r3
 800b42c:	f003 ffaf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800b430:	f107 021c 	add.w	r2, r7, #28
 800b434:	f107 0308 	add.w	r3, r7, #8
 800b438:	4611      	mov	r1, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f008 fe1c 	bl	8014078 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800b440:	f107 031c 	add.w	r3, r7, #28
 800b444:	4618      	mov	r0, r3
 800b446:	f004 fb5a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3334      	adds	r3, #52	; 0x34
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	333c      	adds	r3, #60	; 0x3c
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4610      	mov	r0, r2
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fa3e 	bl	800b8f8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f8ac 	bl	800b5e0 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800b488:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68dd      	ldr	r5, [r3, #12]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3344      	adds	r3, #68	; 0x44
 800b496:	681c      	ldr	r4, [r3, #0]
 800b498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b49c:	490c      	ldr	r1, [pc, #48]	; (800b4d0 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f003 ff75 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800b4a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	47a0      	blx	r4
 800b4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f004 fb23 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return testResult;
 800b4b8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800b4ba:	f107 0308 	add.w	r3, r7, #8
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 faaa 	bl	800ba18 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800b4c4:	4623      	mov	r3, r4
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3730      	adds	r7, #48	; 0x30
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	08027118 	.word	0x08027118

0800b4d4 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800b4d4:	b5b0      	push	{r4, r5, r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68dd      	ldr	r5, [r3, #12]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3330      	adds	r3, #48	; 0x30
 800b4e8:	681c      	ldr	r4, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f00c fce0 	bl	8017eb4 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68dd      	ldr	r5, [r3, #12]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	332c      	adds	r3, #44	; 0x2c
 800b508:	681c      	ldr	r4, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	4618      	mov	r0, r3
 800b510:	f00c fcdc 	bl	8017ecc <_ZNK20CommandLineArguments14getNameFiltersEv>
 800b514:	4603      	mov	r3, r0
 800b516:	4619      	mov	r1, r3
 800b518:	4628      	mov	r0, r5
 800b51a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	4618      	mov	r0, r3
 800b522:	f00c fc2b 	bl	8017d7c <_ZNK20CommandLineArguments9isVerboseEv>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3320      	adds	r3, #32
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2101      	movs	r1, #1
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	4618      	mov	r0, r3
 800b546:	f00c fc25 	bl	8017d94 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3320      	adds	r3, #32
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2102      	movs	r1, #2
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	4618      	mov	r0, r3
 800b56a:	f00c fc1f 	bl	8017dac <_ZNK20CommandLineArguments7isColorEv>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d008      	beq.n	800b586 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3324      	adds	r3, #36	; 0x24
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4610      	mov	r0, r2
 800b584:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f00c fc4a 	bl	8017e24 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3360      	adds	r3, #96	; 0x60
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f00c fc2d 	bl	8017e0c <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f009 fa19 	bl	80149f4 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f00c fc50 	bl	8017e6c <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800b5d2:	f00b fadb 	bl	8016b8c <_ZN10UtestShell14setCrashOnFailEv>
}
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5e0 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800b5e0:	b5b0      	push	{r4, r5, r7, lr}
 800b5e2:	b094      	sub	sp, #80	; 0x50
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ff73 	bl	800b4d4 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f00c fc1c 	bl	8017e3c <_ZNK20CommandLineArguments14getRepeatCountEv>
 800b604:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f00c fbda 	bl	8017dc4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d019      	beq.n	800b64a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	f107 0308 	add.w	r3, r7, #8
 800b61e:	4611      	mov	r1, r2
 800b620:	4618      	mov	r0, r3
 800b622:	f009 fbaf 	bl	8014d84 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3320      	adds	r3, #32
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f107 0108 	add.w	r1, r7, #8
 800b638:	4610      	mov	r0, r2
 800b63a:	4798      	blx	r3
        return 0;
 800b63c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4618      	mov	r0, r3
 800b644:	f009 fbd6 	bl	8014df4 <_ZN10TestResultD1Ev>
 800b648:	e0e1      	b.n	800b80e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	689b      	ldr	r3, [r3, #8]
 800b64e:	4618      	mov	r0, r3
 800b650:	f00c fbc4 	bl	8017ddc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d019      	beq.n	800b68e <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	4611      	mov	r1, r2
 800b664:	4618      	mov	r0, r3
 800b666:	f009 fb8d 	bl	8014d84 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3324      	adds	r3, #36	; 0x24
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f107 0108 	add.w	r1, r7, #8
 800b67c:	4610      	mov	r0, r2
 800b67e:	4798      	blx	r3
        return 0;
 800b680:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b682:	f107 0308 	add.w	r3, r7, #8
 800b686:	4618      	mov	r0, r3
 800b688:	f009 fbb4 	bl	8014df4 <_ZN10TestResultD1Ev>
 800b68c:	e0bf      	b.n	800b80e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	4618      	mov	r0, r3
 800b694:	f00c fbae 	bl	8017df4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d019      	beq.n	800b6d2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	f107 0308 	add.w	r3, r7, #8
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f009 fb6b 	bl	8014d84 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3328      	adds	r3, #40	; 0x28
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f107 0108 	add.w	r1, r7, #8
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	4798      	blx	r3
        return 0;
 800b6c4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f009 fb92 	bl	8014df4 <_ZN10TestResultD1Ev>
 800b6d0:	e09d      	b.n	800b80e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f00c fbbc 	bl	8017e54 <_ZNK20CommandLineArguments11isReversingEv>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d008      	beq.n	800b6f4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	331c      	adds	r3, #28
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3

    if (arguments_->isShuffling())
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f00c fbc3 	bl	8017e84 <_ZNK20CommandLineArguments11isShufflingEv>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d023      	beq.n	800b74c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	332c      	adds	r3, #44	; 0x2c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4941      	ldr	r1, [pc, #260]	; (800b818 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800b714:	4610      	mov	r0, r2
 800b716:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685d      	ldr	r5, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3334      	adds	r3, #52	; 0x34
 800b724:	681c      	ldr	r4, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f00c fbb6 	bl	8017e9c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800b730:	4603      	mov	r3, r0
 800b732:	4619      	mov	r1, r3
 800b734:	4628      	mov	r0, r5
 800b736:	47a0      	blx	r4
        output_->print("\n");
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	332c      	adds	r3, #44	; 0x2c
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4935      	ldr	r1, [pc, #212]	; (800b81c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800b748:	4610      	mov	r0, r2
 800b74a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800b74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74e:	1c5a      	adds	r2, r3, #1
 800b750:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b754:	429a      	cmp	r2, r3
 800b756:	bf8c      	ite	hi
 800b758:	2301      	movhi	r3, #1
 800b75a:	2300      	movls	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d04e      	beq.n	800b800 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	4618      	mov	r0, r3
 800b768:	f00c fb8c 	bl	8017e84 <_ZNK20CommandLineArguments11isShufflingEv>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00f      	beq.n	800b792 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68dd      	ldr	r5, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3318      	adds	r3, #24
 800b77e:	681c      	ldr	r4, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	4618      	mov	r0, r3
 800b786:	f00c fb89 	bl	8017e9c <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800b78a:	4603      	mov	r3, r0
 800b78c:	4619      	mov	r1, r3
 800b78e:	4628      	mov	r0, r5
 800b790:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6858      	ldr	r0, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3340      	adds	r3, #64	; 0x40
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b7a4:	4798      	blx	r3
        TestResult tr(*output_);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f009 fae7 	bl	8014d84 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f107 0108 	add.w	r1, r7, #8
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff fcef 	bl	800b1b4 <_ZNK10TestResult15getFailureCountEv>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7da:	4413      	add	r3, r2
 800b7dc:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800b7de:	f107 0308 	add.w	r3, r7, #8
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff fcf2 	bl	800b1cc <_ZNK10TestResult9isFailureEv>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800b7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800b7f4:	f107 0308 	add.w	r3, r7, #8
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f009 fafb 	bl	8014df4 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800b7fe:	e7a5      	b.n	800b74c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800b800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800b806:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800b808:	e000      	b.n	800b80c <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800b80a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800b80c:	bf00      	nop
 800b80e:	4623      	mov	r3, r4
}
 800b810:	4618      	mov	r0, r3
 800b812:	3750      	adds	r7, #80	; 0x50
 800b814:	46bd      	mov	sp, r7
 800b816:	bdb0      	pop	{r4, r5, r7, pc}
 800b818:	0802712c 	.word	0x0802712c
 800b81c:	08027158 	.word	0x08027158

0800b820 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800b820:	b590      	push	{r4, r7, lr}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800b828:	229d      	movs	r2, #157	; 0x9d
 800b82a:	4906      	ldr	r1, [pc, #24]	; (800b844 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800b82c:	201c      	movs	r0, #28
 800b82e:	f001 f9eb 	bl	800cc08 <_ZnwjPKci>
 800b832:	4604      	mov	r4, r0
 800b834:	4620      	mov	r0, r4
 800b836:	f005 f955 	bl	8010ae4 <_ZN18TeamCityTestOutputC1Ev>
 800b83a:	4623      	mov	r3, r4
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	bd90      	pop	{r4, r7, pc}
 800b844:	080270f4 	.word	0x080270f4

0800b848 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800b852:	22a2      	movs	r2, #162	; 0xa2
 800b854:	490a      	ldr	r1, [pc, #40]	; (800b880 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800b856:	2014      	movs	r0, #20
 800b858:	f001 f9d6 	bl	800cc08 <_ZnwjPKci>
 800b85c:	4604      	mov	r4, r0
 800b85e:	4620      	mov	r0, r4
 800b860:	f000 f980 	bl	800bb64 <_ZN15JUnitTestOutputC1Ev>
 800b864:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fbb2 	bl	800bfd8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800b874:	68fb      	ldr	r3, [r7, #12]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd90      	pop	{r4, r7, pc}
 800b87e:	bf00      	nop
 800b880:	080270f4 	.word	0x080270f4

0800b884 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800b884:	b590      	push	{r4, r7, lr}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800b88c:	22ab      	movs	r2, #171	; 0xab
 800b88e:	4906      	ldr	r1, [pc, #24]	; (800b8a8 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800b890:	2010      	movs	r0, #16
 800b892:	f001 f9b9 	bl	800cc08 <_ZnwjPKci>
 800b896:	4604      	mov	r4, r0
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff fcb3 	bl	800b204 <_ZN17ConsoleTestOutputC1Ev>
 800b89e:	4623      	mov	r3, r4
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd90      	pop	{r4, r7, pc}
 800b8a8:	080270f4 	.word	0x080270f4

0800b8ac <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800b8b8:	22b0      	movs	r2, #176	; 0xb0
 800b8ba:	490e      	ldr	r1, [pc, #56]	; (800b8f4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800b8bc:	2018      	movs	r0, #24
 800b8be:	f001 f9a3 	bl	800cc08 <_ZnwjPKci>
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f007 ff83 	bl	80137d0 <_ZN19CompositeTestOutputC1Ev>
 800b8ca:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	335c      	adds	r3, #92	; 0x5c
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68b9      	ldr	r1, [r7, #8]
 800b8d6:	6978      	ldr	r0, [r7, #20]
 800b8d8:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3360      	adds	r3, #96	; 0x60
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	6978      	ldr	r0, [r7, #20]
 800b8e6:	4798      	blx	r3
  return composite;
 800b8e8:	697b      	ldr	r3, [r7, #20]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd90      	pop	{r4, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	080270f4 	.word	0x080270f4

0800b8f8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800b8f8:	b5b0      	push	{r4, r5, r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	4618      	mov	r0, r3
 800b90a:	f00b fe4f 	bl	80175ac <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800b90e:	4603      	mov	r3, r0
 800b910:	f083 0301 	eor.w	r3, r3, #1
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d029      	beq.n	800b96e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3310      	adds	r3, #16
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	4798      	blx	r3
 800b926:	4602      	mov	r2, r0
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685d      	ldr	r5, [r3, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	332c      	adds	r3, #44	; 0x2c
 800b938:	681c      	ldr	r4, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	4618      	mov	r0, r3
 800b940:	f00c fa10 	bl	8017d64 <_ZNK20CommandLineArguments8needHelpEv>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d006      	beq.n	800b958 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	4618      	mov	r0, r3
 800b950:	f00c f9fa 	bl	8017d48 <_ZNK20CommandLineArguments4helpEv>
 800b954:	4603      	mov	r3, r0
 800b956:	e005      	b.n	800b964 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f00c f9e5 	bl	8017d2c <_ZNK20CommandLineArguments5usageEv>
 800b962:	4603      	mov	r3, r0
 800b964:	4619      	mov	r1, r3
 800b966:	4628      	mov	r0, r5
 800b968:	47a0      	blx	r4
    return false;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e050      	b.n	800ba10 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	4618      	mov	r0, r3
 800b974:	f00d f84c 	bl	8018a10 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d02c      	beq.n	800b9d8 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	330c      	adds	r3, #12
 800b984:	681c      	ldr	r4, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	4618      	mov	r0, r3
 800b98c:	f00d f864 	bl	8018a58 <_ZNK20CommandLineArguments14getPackageNameEv>
 800b990:	4603      	mov	r3, r0
 800b992:	4619      	mov	r1, r3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	47a0      	blx	r4
 800b998:	4602      	mov	r2, r0
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f00c f9ea 	bl	8017d7c <_ZNK20CommandLineArguments9isVerboseEv>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d02f      	beq.n	800ba0e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3314      	adds	r3, #20
 800b9b4:	681c      	ldr	r4, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685d      	ldr	r5, [r3, #4]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3310      	adds	r3, #16
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	4798      	blx	r3
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	47a0      	blx	r4
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	605a      	str	r2, [r3, #4]
 800b9d6:	e01a      	b.n	800ba0e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f00d f829 	bl	8018a34 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	4798      	blx	r3
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	e008      	b.n	800ba0e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3310      	adds	r3, #16
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	4798      	blx	r3
 800ba08:	4602      	mov	r2, r0
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	605a      	str	r2, [r3, #4]
  return true;
 800ba0e:	2301      	movs	r3, #1
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bdb0      	pop	{r4, r5, r7, pc}

0800ba18 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	4a05      	ldr	r2, [pc, #20]	; (800ba38 <_ZN16SetPointerPluginD1Ev+0x20>)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	601a      	str	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f008 f9e7 	bl	8013dfc <_ZN10TestPluginD1Ev>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	0802bd90 	.word	0x0802bd90

0800ba3c <_ZN16SetPointerPluginD0Ev>:
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff ffe7 	bl	800ba18 <_ZN16SetPointerPluginD1Ev>
 800ba4a:	2114      	movs	r1, #20
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 f8ef 	bl	800cc30 <_ZdlPvj>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
        return checkCount_;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	691b      	ldr	r3, [r3, #16]
    }
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4910      	ldr	r1, [pc, #64]	; (800bac0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800ba80:	4618      	mov	r0, r3
 800ba82:	f003 fc84 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	609a      	str	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	60da      	str	r2, [r3, #12]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	741a      	strb	r2, [r3, #16]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3314      	adds	r3, #20
 800ba9c:	4908      	ldr	r1, [pc, #32]	; (800bac0 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f003 fc75 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	61da      	str	r2, [r3, #28]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	621a      	str	r2, [r3, #32]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	0802715c 	.word	0x0802715c

0800bac4 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	605a      	str	r2, [r3, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	609a      	str	r2, [r3, #8]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	60da      	str	r2, [r3, #12]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	611a      	str	r2, [r3, #16]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	3314      	adds	r3, #20
 800baee:	4907      	ldr	r1, [pc, #28]	; (800bb0c <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800baf0:	4618      	mov	r0, r3
 800baf2:	f003 fc4c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	61da      	str	r2, [r3, #28]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	621a      	str	r2, [r3, #32]
    {
    }
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	0802715c 	.word	0x0802715c

0800bb10 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3314      	adds	r3, #20
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f003 ffee 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff ffc4 	bl	800bac4 <_ZN20JUnitTestGroupResultC1Ev>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3328      	adds	r3, #40	; 0x28
 800bb40:	4907      	ldr	r1, [pc, #28]	; (800bb60 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800bb42:	4618      	mov	r0, r3
 800bb44:	f003 fc23 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3330      	adds	r3, #48	; 0x30
 800bb4c:	4904      	ldr	r1, [pc, #16]	; (800bb60 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f003 fc1d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	0802715c 	.word	0x0802715c

0800bb64 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f007 f936 	bl	8012de0 <_ZN10TestOutputC1Ev>
 800bb74:	4a09      	ldr	r2, [pc, #36]	; (800bb9c <_ZN15JUnitTestOutputC1Ev+0x38>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	224d      	movs	r2, #77	; 0x4d
 800bb7c:	4908      	ldr	r1, [pc, #32]	; (800bba0 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800bb7e:	2038      	movs	r0, #56	; 0x38
 800bb80:	f001 f842 	bl	800cc08 <_ZnwjPKci>
 800bb84:	4604      	mov	r4, r0
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7ff ffd0 	bl	800bb2c <_ZN19JUnitTestOutputImplC1Ev>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	611c      	str	r4, [r3, #16]
{
}
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd90      	pop	{r4, r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0802b630 	.word	0x0802b630
 800bba0:	08027160 	.word	0x08027160

0800bba4 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3330      	adds	r3, #48	; 0x30
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f003 ffa4 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3328      	adds	r3, #40	; 0x28
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f003 ff9f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff ffa4 	bl	800bb10 <_ZN20JUnitTestGroupResultD1Ev>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800bbd4:	b590      	push	{r4, r7, lr}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	4a0c      	ldr	r2, [pc, #48]	; (800bc10 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f838 	bl	800bc58 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	691c      	ldr	r4, [r3, #16]
 800bbec:	2c00      	cmp	r4, #0
 800bbee:	d006      	beq.n	800bbfe <_ZN15JUnitTestOutputD1Ev+0x2a>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f7ff ffd7 	bl	800bba4 <_ZN19JUnitTestOutputImplD1Ev>
 800bbf6:	2138      	movs	r1, #56	; 0x38
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f001 f819 	bl	800cc30 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f007 f90b 	bl	8012e1c <_ZN10TestOutputD1Ev>
}
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd90      	pop	{r4, r7, pc}
 800bc10:	0802b630 	.word	0x0802b630

0800bc14 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
}
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ffd9 	bl	800bbd4 <_ZN15JUnitTestOutputD1Ev>
 800bc22:	2114      	movs	r1, #20
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f803 	bl	800cc30 <_ZdlPvj>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3314      	adds	r3, #20
 800bc40:	4618      	mov	r0, r3
 800bc42:	f003 ff5c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f003 ff58 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800bc58:	b590      	push	{r4, r7, lr}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	2200      	movs	r2, #0
 800bc66:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f103 0414 	add.w	r4, r3, #20
 800bc78:	f107 0308 	add.w	r3, r7, #8
 800bc7c:	491d      	ldr	r1, [pc, #116]	; (800bcf4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f003 fb85 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800bc84:	f107 0308 	add.w	r3, r7, #8
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f003 fbeb 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800bc90:	f107 0308 	add.w	r3, r7, #8
 800bc94:	4618      	mov	r0, r3
 800bc96:	f003 ff32 	bl	800fafe <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	617b      	str	r3, [r7, #20]
    while (cur) {
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d018      	beq.n	800bcda <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d004      	beq.n	800bcc0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	3204      	adds	r2, #4
 800bcba:	6812      	ldr	r2, [r2, #0]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4790      	blx	r2
        delete cur;
 800bcc0:	697c      	ldr	r4, [r7, #20]
 800bcc2:	2c00      	cmp	r4, #0
 800bcc4:	d006      	beq.n	800bcd4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff ffb4 	bl	800bc34 <_ZN23JUnitTestCaseResultNodeD1Ev>
 800bccc:	2128      	movs	r1, #40	; 0x28
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f000 ffae 	bl	800cc30 <_ZdlPvj>
        cur = tmp;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	617b      	str	r3, [r7, #20]
    while (cur) {
 800bcd8:	e7e3      	b.n	800bca2 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	2200      	movs	r2, #0
 800bce0:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2200      	movs	r2, #0
 800bce8:	621a      	str	r2, [r3, #32]
}
 800bcea:	bf00      	nop
 800bcec:	371c      	adds	r7, #28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd90      	pop	{r4, r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0802715c 	.word	0x0802715c

0800bcf8 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800bd22:	b590      	push	{r4, r7, lr}
 800bd24:	b083      	sub	sp, #12
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	6a1c      	ldr	r4, [r3, #32]
 800bd32:	6838      	ldr	r0, [r7, #0]
 800bd34:	f009 f9c6 	bl	80150c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	6a1c      	ldr	r4, [r3, #32]
 800bd42:	6838      	ldr	r0, [r7, #0]
 800bd44:	f7ff fe8a 	bl	800ba5c <_ZNK10TestResult13getCheckCountEv>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	6223      	str	r3, [r4, #32]
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd90      	pop	{r4, r7, pc}

0800bd54 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800bd6a:	b590      	push	{r4, r7, lr}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691c      	ldr	r4, [r3, #16]
 800bd78:	6838      	ldr	r0, [r7, #0]
 800bd7a:	f009 f9af 	bl	80150dc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3364      	adds	r3, #100	; 0x64
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	4798      	blx	r3
    resetTestGroupResult();
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff ff62 	bl	800bc58 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd90      	pop	{r4, r7, pc}

0800bd9c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b089      	sub	sp, #36	; 0x24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	3201      	adds	r2, #1
 800bdae:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	f103 0414 	add.w	r4, r3, #20
 800bdb8:	f107 0308 	add.w	r3, r7, #8
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f009 fcef 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 800bdc4:	f107 0308 	add.w	r3, r7, #8
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f003 fb4b 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800bdd0:	f107 0308 	add.w	r3, r7, #8
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f003 fe92 	bl	800fafe <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800bdda:	4b3c      	ldr	r3, [pc, #240]	; (800becc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4798      	blx	r3
 800bde0:	4602      	mov	r2, r0
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d110      	bne.n	800be14 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800bdf2:	2288      	movs	r2, #136	; 0x88
 800bdf4:	4936      	ldr	r1, [pc, #216]	; (800bed0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800bdf6:	2028      	movs	r0, #40	; 0x28
 800bdf8:	f000 ff06 	bl	800cc08 <_ZnwjPKci>
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7ff fe38 	bl	800ba74 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800be08:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6912      	ldr	r2, [r2, #16]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	61d3      	str	r3, [r2, #28]
 800be12:	e013      	b.n	800be3c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800be14:	228b      	movs	r2, #139	; 0x8b
 800be16:	492e      	ldr	r1, [pc, #184]	; (800bed0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800be18:	2028      	movs	r0, #40	; 0x28
 800be1a:	f000 fef5 	bl	800cc08 <_ZnwjPKci>
 800be1e:	4604      	mov	r4, r0
 800be20:	4620      	mov	r0, r4
 800be22:	f7ff fe27 	bl	800ba74 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	6a1a      	ldr	r2, [r3, #32]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800be3a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	461c      	mov	r4, r3
 800be44:	f107 0310 	add.w	r3, r7, #16
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f009 fc9a 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 800be50:	f107 0310 	add.w	r3, r7, #16
 800be54:	4619      	mov	r1, r3
 800be56:	4620      	mov	r0, r4
 800be58:	f003 fb05 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800be5c:	f107 0310 	add.w	r3, r7, #16
 800be60:	4618      	mov	r0, r3
 800be62:	f003 fe4c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	f103 0414 	add.w	r4, r3, #20
 800be70:	f107 0318 	add.w	r3, r7, #24
 800be74:	6839      	ldr	r1, [r7, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f009 fd55 	bl	8015926 <_ZNK10UtestShell7getFileEv>
 800be7c:	f107 0318 	add.w	r3, r7, #24
 800be80:	4619      	mov	r1, r3
 800be82:	4620      	mov	r0, r4
 800be84:	f003 faef 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800be88:	f107 0318 	add.w	r3, r7, #24
 800be8c:	4618      	mov	r0, r3
 800be8e:	f003 fe36 	bl	800fafe <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	6a1c      	ldr	r4, [r3, #32]
 800be98:	6838      	ldr	r0, [r7, #0]
 800be9a:	f009 fd53 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 800be9e:	4603      	mov	r3, r0
 800bea0:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3318      	adds	r3, #24
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6838      	ldr	r0, [r7, #0]
 800beac:	4798      	blx	r3
 800beae:	4603      	mov	r3, r0
 800beb0:	f083 0301 	eor.w	r3, r3, #1
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	6a1b      	ldr	r3, [r3, #32]
 800bec0:	2201      	movs	r2, #1
 800bec2:	741a      	strb	r2, [r3, #16]
    }
}
 800bec4:	bf00      	nop
 800bec6:	3724      	adds	r7, #36	; 0x24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd90      	pop	{r4, r7, pc}
 800becc:	200000a8 	.word	0x200000a8
 800bed0:	08027160 	.word	0x08027160

0800bed4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	; 0x28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800bee0:	f107 0310 	add.w	r3, r7, #16
 800bee4:	4928      	ldr	r1, [pc, #160]	; (800bf88 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800bee6:	4618      	mov	r0, r3
 800bee8:	f003 fa51 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	3328      	adds	r3, #40	; 0x28
 800bef2:	4618      	mov	r0, r3
 800bef4:	f003 fdf2 	bl	800fadc <_ZNK12SimpleString7isEmptyEv>
 800bef8:	4603      	mov	r3, r0
 800befa:	f083 0301 	eor.w	r3, r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00f      	beq.n	800bf24 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bf0c:	f107 0310 	add.w	r3, r7, #16
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f003 fe70 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800bf18:	f107 0310 	add.w	r3, r7, #16
 800bf1c:	491b      	ldr	r1, [pc, #108]	; (800bf8c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f003 fe7c 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800bf24:	f107 0310 	add.w	r3, r7, #16
 800bf28:	6879      	ldr	r1, [r7, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f003 fe64 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3384      	adds	r3, #132	; 0x84
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f107 0018 	add.w	r0, r7, #24
 800bf3c:	f107 0210 	add.w	r2, r7, #16
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	4798      	blx	r3
 800bf44:	f107 0320 	add.w	r3, r7, #32
 800bf48:	4911      	ldr	r1, [pc, #68]	; (800bf90 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f003 fa1f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f107 0220 	add.w	r2, r7, #32
 800bf56:	f107 0118 	add.w	r1, r7, #24
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f003 fe31 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 800bf60:	f107 0320 	add.w	r3, r7, #32
 800bf64:	4618      	mov	r0, r3
 800bf66:	f003 fdca 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800bf6a:	f107 0318 	add.w	r3, r7, #24
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f003 fdc5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800bf74:	f107 0310 	add.w	r3, r7, #16
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f003 fdc0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800bf7e:	bf00      	nop
}
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	3728      	adds	r7, #40	; 0x28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	0802717c 	.word	0x0802717c
 800bf8c:	08027188 	.word	0x08027188
 800bf90:	0802718c 	.word	0x0802718c

0800bf94 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f003 fa47 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00a      	beq.n	800bfca <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	225f      	movs	r2, #95	; 0x5f
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f003 fbcc 	bl	800f75a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e7f0      	b.n	800bfac <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800bfca:	bf00      	nop
}
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	08027194 	.word	0x08027194

0800bfd8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d006      	beq.n	800bff8 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	3328      	adds	r3, #40	; 0x28
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f003 fa37 	bl	800f466 <_ZN12SimpleStringaSERKS_>
    }
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800c000:	b590      	push	{r4, r7, lr}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3368      	adds	r3, #104	; 0x68
 800c00e:	681c      	ldr	r4, [r3, #0]
 800c010:	f107 0308 	add.w	r3, r7, #8
 800c014:	4908      	ldr	r1, [pc, #32]	; (800c038 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800c016:	4618      	mov	r0, r3
 800c018:	f003 f9b9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c01c:	f107 0308 	add.w	r3, r7, #8
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	47a0      	blx	r4
 800c026:	f107 0308 	add.w	r3, r7, #8
 800c02a:	4618      	mov	r0, r3
 800c02c:	f003 fd67 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	bd90      	pop	{r4, r7, pc}
 800c038:	080271a0 	.word	0x080271a0

0800c03c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c040:	b08a      	sub	sp, #40	; 0x28
 800c042:	af04      	add	r7, sp, #16
 800c044:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800c04c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800c052:	3314      	adds	r3, #20
 800c054:	4618      	mov	r0, r3
 800c056:	f003 fd25 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c05a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800c062:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	4a23      	ldr	r2, [pc, #140]	; (800c0f8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800c06c:	fba2 2303 	umull	r2, r3, r2, r3
 800c070:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800c072:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	691a      	ldr	r2, [r3, #16]
 800c07a:	4b1f      	ldr	r3, [pc, #124]	; (800c0f8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800c07c:	fba3 1302 	umull	r1, r3, r3, r2
 800c080:	099b      	lsrs	r3, r3, #6
 800c082:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c086:	fb01 f303 	mul.w	r3, r1, r3
 800c08a:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800c08c:	603b      	str	r3, [r7, #0]
 800c08e:	4b1b      	ldr	r3, [pc, #108]	; (800c0fc <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4798      	blx	r3
 800c094:	4603      	mov	r3, r0
 800c096:	f107 0008 	add.w	r0, r7, #8
 800c09a:	9303      	str	r3, [sp, #12]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	9302      	str	r3, [sp, #8]
 800c0a0:	9601      	str	r6, [sp, #4]
 800c0a2:	9500      	str	r5, [sp, #0]
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	4642      	mov	r2, r8
 800c0a8:	4915      	ldr	r1, [pc, #84]	; (800c100 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800c0aa:	f004 fa2f 	bl	801050c <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3368      	adds	r3, #104	; 0x68
 800c0b4:	681c      	ldr	r4, [r3, #0]
 800c0b6:	f107 0308 	add.w	r3, r7, #8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f003 fcf2 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	f107 0310 	add.w	r3, r7, #16
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f003 f960 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c0ce:	f107 0310 	add.w	r3, r7, #16
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	47a0      	blx	r4
 800c0d8:	f107 0310 	add.w	r3, r7, #16
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f003 fd0e 	bl	800fafe <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f003 fd09 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800c0ec:	bf00      	nop
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f6:	bf00      	nop
 800c0f8:	10624dd3 	.word	0x10624dd3
 800c0fc:	200000ac 	.word	0x200000ac
 800c100:	080271cc 	.word	0x080271cc

0800c104 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800c104:	b590      	push	{r4, r7, lr}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3368      	adds	r3, #104	; 0x68
 800c112:	681c      	ldr	r4, [r3, #0]
 800c114:	f107 0308 	add.w	r3, r7, #8
 800c118:	4912      	ldr	r1, [pc, #72]	; (800c164 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800c11a:	4618      	mov	r0, r3
 800c11c:	f003 f937 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c120:	f107 0308 	add.w	r3, r7, #8
 800c124:	4619      	mov	r1, r3
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	47a0      	blx	r4
 800c12a:	f107 0308 	add.w	r3, r7, #8
 800c12e:	4618      	mov	r0, r3
 800c130:	f003 fce5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3368      	adds	r3, #104	; 0x68
 800c13a:	681c      	ldr	r4, [r3, #0]
 800c13c:	f107 0310 	add.w	r3, r7, #16
 800c140:	4909      	ldr	r1, [pc, #36]	; (800c168 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800c142:	4618      	mov	r0, r3
 800c144:	f003 f923 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c148:	f107 0310 	add.w	r3, r7, #16
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	47a0      	blx	r4
 800c152:	f107 0310 	add.w	r3, r7, #16
 800c156:	4618      	mov	r0, r3
 800c158:	f003 fcd1 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800c15c:	bf00      	nop
 800c15e:	371c      	adds	r7, #28
 800c160:	46bd      	mov	sp, r7
 800c162:	bd90      	pop	{r4, r7, pc}
 800c164:	0802723c 	.word	0x0802723c
 800c168:	0802724c 	.word	0x0802724c

0800c16c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f003 fc93 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c17e:	4603      	mov	r3, r0
 800c180:	4619      	mov	r1, r3
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f003 f903 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800c188:	4a0e      	ldr	r2, [pc, #56]	; (800c1c4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800c18a:	490f      	ldr	r1, [pc, #60]	; (800c1c8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f003 fb13 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800c192:	4a0e      	ldr	r2, [pc, #56]	; (800c1cc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800c194:	490e      	ldr	r1, [pc, #56]	; (800c1d0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f003 fb0e 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800c19c:	4a0d      	ldr	r2, [pc, #52]	; (800c1d4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800c19e:	490e      	ldr	r1, [pc, #56]	; (800c1d8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f003 fb09 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800c1a6:	4a0d      	ldr	r2, [pc, #52]	; (800c1dc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800c1a8:	490d      	ldr	r1, [pc, #52]	; (800c1e0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f003 fb04 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800c1b0:	4a0c      	ldr	r2, [pc, #48]	; (800c1e4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800c1b2:	490d      	ldr	r1, [pc, #52]	; (800c1e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f003 faff 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800c1ba:	bf00      	nop
}
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	0802725c 	.word	0x0802725c
 800c1c8:	08027264 	.word	0x08027264
 800c1cc:	08027268 	.word	0x08027268
 800c1d0:	08027270 	.word	0x08027270
 800c1d4:	08027274 	.word	0x08027274
 800c1d8:	0802727c 	.word	0x0802727c
 800c1dc:	08027280 	.word	0x08027280
 800c1e0:	08027288 	.word	0x08027288
 800c1e4:	0802728c 	.word	0x0802728c
 800c1e8:	08027298 	.word	0x08027298

0800c1ec <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	b096      	sub	sp, #88	; 0x58
 800c1f2:	af08      	add	r7, sp, #32
 800c1f4:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800c1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80b2 	beq.w	800c36a <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800c20a:	3328      	adds	r3, #40	; 0x28
 800c20c:	4618      	mov	r0, r3
 800c20e:	f003 fc49 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c212:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	3328      	adds	r3, #40	; 0x28
 800c21a:	4618      	mov	r0, r3
 800c21c:	f003 fc5e 	bl	800fadc <_ZNK12SimpleString7isEmptyEv>
 800c220:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800c222:	2b00      	cmp	r3, #0
 800c224:	d001      	beq.n	800c22a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800c226:	4c53      	ldr	r4, [pc, #332]	; (800c374 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800c228:	e000      	b.n	800c22c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800c22a:	4c53      	ldr	r4, [pc, #332]	; (800c378 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800c230:	3314      	adds	r3, #20
 800c232:	4618      	mov	r0, r3
 800c234:	f003 fc36 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c238:	4605      	mov	r5, r0
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	4618      	mov	r0, r3
 800c23e:	f003 fc31 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c242:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800c244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c246:	6a1a      	ldr	r2, [r3, #32]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800c250:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	4a49      	ldr	r2, [pc, #292]	; (800c37c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800c258:	fba2 2303 	umull	r2, r3, r2, r3
 800c25c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800c25e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800c260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	4b45      	ldr	r3, [pc, #276]	; (800c37c <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800c266:	fba3 1302 	umull	r1, r3, r3, r2
 800c26a:	099b      	lsrs	r3, r3, #6
 800c26c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c270:	fb01 f303 	mul.w	r3, r1, r3
 800c274:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	3314      	adds	r3, #20
 800c27c:	4618      	mov	r0, r3
 800c27e:	f003 fc11 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c282:	4602      	mov	r2, r0
 800c284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c286:	69db      	ldr	r3, [r3, #28]
 800c288:	f107 0014 	add.w	r0, r7, #20
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	9205      	str	r2, [sp, #20]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	9204      	str	r2, [sp, #16]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	9203      	str	r2, [sp, #12]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	9302      	str	r3, [sp, #8]
 800c29c:	9601      	str	r6, [sp, #4]
 800c29e:	9500      	str	r5, [sp, #0]
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	4642      	mov	r2, r8
 800c2a4:	4936      	ldr	r1, [pc, #216]	; (800c380 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800c2a6:	f004 f931 	bl	801050c <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3368      	adds	r3, #104	; 0x68
 800c2b0:	681c      	ldr	r4, [r3, #0]
 800c2b2:	f107 0314 	add.w	r3, r7, #20
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f003 fbf4 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	f107 031c 	add.w	r3, r7, #28
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f003 f862 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c2ca:	f107 031c 	add.w	r3, r7, #28
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	47a0      	blx	r4
 800c2d4:	f107 031c 	add.w	r3, r7, #28
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f003 fc10 	bl	800fafe <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2e4:	6a12      	ldr	r2, [r2, #32]
 800c2e6:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d007      	beq.n	800c300 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3388      	adds	r3, #136	; 0x88
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	4798      	blx	r3
 800c2fe:	e017      	b.n	800c330 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800c300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c302:	7c1b      	ldrb	r3, [r3, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d013      	beq.n	800c330 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	3368      	adds	r3, #104	; 0x68
 800c30e:	681c      	ldr	r4, [r3, #0]
 800c310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c314:	491b      	ldr	r1, [pc, #108]	; (800c384 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800c316:	4618      	mov	r0, r3
 800c318:	f003 f839 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c31c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c320:	4619      	mov	r1, r3
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	47a0      	blx	r4
 800c326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c32a:	4618      	mov	r0, r3
 800c32c:	f003 fbe7 	bl	800fafe <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3368      	adds	r3, #104	; 0x68
 800c336:	681c      	ldr	r4, [r3, #0]
 800c338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c33c:	4912      	ldr	r1, [pc, #72]	; (800c388 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800c33e:	4618      	mov	r0, r3
 800c340:	f003 f825 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c348:	4619      	mov	r1, r3
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	47a0      	blx	r4
 800c34e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c352:	4618      	mov	r0, r3
 800c354:	f003 fbd3 	bl	800fafe <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800c358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800c35e:	f107 0314 	add.w	r3, r7, #20
 800c362:	4618      	mov	r0, r3
 800c364:	f003 fbcb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    while (cur) {
 800c368:	e749      	b.n	800c1fe <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800c36a:	bf00      	nop
 800c36c:	3738      	adds	r7, #56	; 0x38
 800c36e:	46bd      	mov	sp, r7
 800c370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c374:	0802715c 	.word	0x0802715c
 800c378:	0802729c 	.word	0x0802729c
 800c37c:	10624dd3 	.word	0x10624dd3
 800c380:	080272a0 	.word	0x080272a0
 800c384:	080272fc 	.word	0x080272fc
 800c388:	0802730c 	.word	0x0802730c

0800c38c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800c38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38e:	b091      	sub	sp, #68	; 0x44
 800c390:	af02      	add	r7, sp, #8
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68d9      	ldr	r1, [r3, #12]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f107 0210 	add.w	r2, r7, #16
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800c3ac:	f107 0310 	add.w	r3, r7, #16
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f003 fb77 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c3b6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	68da      	ldr	r2, [r3, #12]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3314      	adds	r3, #20
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800c3cc:	461e      	mov	r6, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	3380      	adds	r3, #128	; 0x80
 800c3d4:	681c      	ldr	r4, [r3, #0]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	68d9      	ldr	r1, [r3, #12]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3318      	adds	r3, #24
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f107 0220 	add.w	r2, r7, #32
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	f107 0318 	add.w	r3, r7, #24
 800c3f0:	f107 0220 	add.w	r2, r7, #32
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	47a0      	blx	r4
 800c3fa:	f107 0318 	add.w	r3, r7, #24
 800c3fe:	4618      	mov	r0, r3
 800c400:	f003 fb50 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c404:	4603      	mov	r3, r0
 800c406:	f107 0008 	add.w	r0, r7, #8
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4633      	mov	r3, r6
 800c40e:	462a      	mov	r2, r5
 800c410:	4924      	ldr	r1, [pc, #144]	; (800c4a4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800c412:	f004 f87b 	bl	801050c <_Z16StringFromFormatPKcz>
 800c416:	f107 0318 	add.w	r3, r7, #24
 800c41a:	4618      	mov	r0, r3
 800c41c:	f003 fb6f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800c420:	f107 0320 	add.w	r3, r7, #32
 800c424:	4618      	mov	r0, r3
 800c426:	f003 fb6a 	bl	800fafe <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800c42a:	f107 0310 	add.w	r3, r7, #16
 800c42e:	4618      	mov	r0, r3
 800c430:	f003 fb65 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3368      	adds	r3, #104	; 0x68
 800c43a:	681c      	ldr	r4, [r3, #0]
 800c43c:	f107 0308 	add.w	r3, r7, #8
 800c440:	4618      	mov	r0, r3
 800c442:	f003 fb2f 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c446:	4602      	mov	r2, r0
 800c448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f002 ff9d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	47a0      	blx	r4
 800c45e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c462:	4618      	mov	r0, r3
 800c464:	f003 fb4b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3368      	adds	r3, #104	; 0x68
 800c46e:	681c      	ldr	r4, [r3, #0]
 800c470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c474:	490c      	ldr	r1, [pc, #48]	; (800c4a8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800c476:	4618      	mov	r0, r3
 800c478:	f002 ff89 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c47c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	47a0      	blx	r4
 800c486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c48a:	4618      	mov	r0, r3
 800c48c:	f003 fb37 	bl	800fafe <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	4618      	mov	r0, r3
 800c496:	f003 fb32 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800c49a:	bf00      	nop
 800c49c:	373c      	adds	r7, #60	; 0x3c
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0802731c 	.word	0x0802731c
 800c4a8:	08027358 	.word	0x08027358

0800c4ac <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b08d      	sub	sp, #52	; 0x34
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	3368      	adds	r3, #104	; 0x68
 800c4ba:	681c      	ldr	r4, [r3, #0]
 800c4bc:	f107 0308 	add.w	r3, r7, #8
 800c4c0:	4933      	ldr	r1, [pc, #204]	; (800c590 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f002 ff63 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	47a0      	blx	r4
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f003 fb11 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3368      	adds	r3, #104	; 0x68
 800c4e2:	681c      	ldr	r4, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3380      	adds	r3, #128	; 0x80
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6912      	ldr	r2, [r2, #16]
 800c4f0:	3230      	adds	r2, #48	; 0x30
 800c4f2:	f107 0010 	add.w	r0, r7, #16
 800c4f6:	6879      	ldr	r1, [r7, #4]
 800c4f8:	4798      	blx	r3
 800c4fa:	f107 0310 	add.w	r3, r7, #16
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	47a0      	blx	r4
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	4618      	mov	r0, r3
 800c50a:	f003 faf8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3368      	adds	r3, #104	; 0x68
 800c514:	681c      	ldr	r4, [r3, #0]
 800c516:	f107 0318 	add.w	r3, r7, #24
 800c51a:	491e      	ldr	r1, [pc, #120]	; (800c594 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800c51c:	4618      	mov	r0, r3
 800c51e:	f002 ff36 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c522:	f107 0318 	add.w	r3, r7, #24
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	47a0      	blx	r4
 800c52c:	f107 0318 	add.w	r3, r7, #24
 800c530:	4618      	mov	r0, r3
 800c532:	f003 fae4 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3368      	adds	r3, #104	; 0x68
 800c53c:	681c      	ldr	r4, [r3, #0]
 800c53e:	f107 0320 	add.w	r3, r7, #32
 800c542:	4915      	ldr	r1, [pc, #84]	; (800c598 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800c544:	4618      	mov	r0, r3
 800c546:	f002 ff22 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c54a:	f107 0320 	add.w	r3, r7, #32
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	47a0      	blx	r4
 800c554:	f107 0320 	add.w	r3, r7, #32
 800c558:	4618      	mov	r0, r3
 800c55a:	f003 fad0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3368      	adds	r3, #104	; 0x68
 800c564:	681c      	ldr	r4, [r3, #0]
 800c566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c56a:	490c      	ldr	r1, [pc, #48]	; (800c59c <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800c56c:	4618      	mov	r0, r3
 800c56e:	f002 ff0e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800c572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	47a0      	blx	r4
 800c57c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c580:	4618      	mov	r0, r3
 800c582:	f003 fabc 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800c586:	bf00      	nop
 800c588:	3734      	adds	r7, #52	; 0x34
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd90      	pop	{r4, r7, pc}
 800c58e:	bf00      	nop
 800c590:	08027364 	.word	0x08027364
 800c594:	08027374 	.word	0x08027374
 800c598:	08027384 	.word	0x08027384
 800c59c:	080273a0 	.word	0x080273a0

0800c5a0 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3360      	adds	r3, #96	; 0x60
 800c5ae:	681c      	ldr	r4, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	335c      	adds	r3, #92	; 0x5c
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6912      	ldr	r2, [r2, #16]
 800c5bc:	3214      	adds	r2, #20
 800c5be:	f107 0008 	add.w	r0, r7, #8
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	4798      	blx	r3
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	47a0      	blx	r4
 800c5d0:	f107 0308 	add.w	r3, r7, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f003 fa92 	bl	800fafe <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3370      	adds	r3, #112	; 0x70
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	4798      	blx	r3
    writeTestSuiteSummary();
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3374      	adds	r3, #116	; 0x74
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
    writeProperties();
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3378      	adds	r3, #120	; 0x78
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
    writeTestCases();
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	337c      	adds	r3, #124	; 0x7c
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	4798      	blx	r3
    writeFileEnding();
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	338c      	adds	r3, #140	; 0x8c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	4798      	blx	r3
    closeFile();
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	336c      	adds	r3, #108	; 0x6c
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	4798      	blx	r3
}
 800c622:	bf00      	nop
 800c624:	3714      	adds	r7, #20
 800c626:	46bd      	mov	sp, r7
 800c628:	bd90      	pop	{r4, r7, pc}

0800c62a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b083      	sub	sp, #12
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	6039      	str	r1, [r7, #0]
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	3330      	adds	r3, #48	; 0x30
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f003 fae2 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800c6a0:	b590      	push	{r4, r7, lr}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d113      	bne.n	800c6de <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	3201      	adds	r2, #1
 800c6be:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800c6c0:	f240 1233 	movw	r2, #307	; 0x133
 800c6c4:	4908      	ldr	r1, [pc, #32]	; (800c6e8 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800c6c6:	2034      	movs	r0, #52	; 0x34
 800c6c8:	f000 fa9e 	bl	800cc08 <_ZnwjPKci>
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f004 fd37 	bl	8011144 <_ZN11TestFailureC1ERKS_>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	6a1b      	ldr	r3, [r3, #32]
 800c6dc:	60dc      	str	r4, [r3, #12]
    }
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd90      	pop	{r4, r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	08027160 	.word	0x08027160

0800c6ec <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800c6ec:	b5b0      	push	{r4, r5, r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800c6f8:	681d      	ldr	r5, [r3, #0]
 800c6fa:	6838      	ldr	r0, [r7, #0]
 800c6fc:	f003 f9d2 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c700:	4602      	mov	r2, r0
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691c      	ldr	r4, [r3, #16]
 800c706:	4905      	ldr	r1, [pc, #20]	; (800c71c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800c708:	4610      	mov	r0, r2
 800c70a:	47a8      	blx	r5
 800c70c:	4603      	mov	r3, r0
 800c70e:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bdb0      	pop	{r4, r5, r7, pc}
 800c718:	200000b4 	.word	0x200000b4
 800c71c:	080273b0 	.word	0x080273b0

0800c720 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800c720:	b590      	push	{r4, r7, lr}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800c72a:	4b08      	ldr	r3, [pc, #32]	; (800c74c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800c72c:	681c      	ldr	r4, [r3, #0]
 800c72e:	6838      	ldr	r0, [r7, #0]
 800c730:	f003 f9b8 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800c734:	4602      	mov	r2, r0
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73c:	4619      	mov	r1, r3
 800c73e:	4610      	mov	r0, r2
 800c740:	47a0      	blx	r4
}
 800c742:	bf00      	nop
 800c744:	370c      	adds	r7, #12
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}
 800c74a:	bf00      	nop
 800c74c:	200000b8 	.word	0x200000b8

0800c750 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800c758:	4b05      	ldr	r3, [pc, #20]	; (800c770 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6912      	ldr	r2, [r2, #16]
 800c760:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c762:	4610      	mov	r0, r2
 800c764:	4798      	blx	r3
}
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	200000bc 	.word	0x200000bc

0800c774 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	603b      	str	r3, [r7, #0]
        return false;
 800c782:	2300      	movs	r3, #0
    }
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
    {
 800c798:	4a04      	ldr	r2, [pc, #16]	; (800c7ac <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
    }
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	0802b6dc 	.word	0x0802b6dc

0800c7b0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
    }
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ffe9 	bl	800c790 <_ZN17MemoryLeakFailureD1Ev>
 800c7be:	2104      	movs	r1, #4
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fa35 	bl	800cc30 <_ZdlPvj>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800c7d0:	b590      	push	{r4, r7, lr}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	687c      	ldr	r4, [r7, #4]
 800c7da:	f000 fc71 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f00c ff6c 	bl	80196be <_ZN18MemoryLeakDetector8getMutexEv>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f002 fb24 	bl	800ee38 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd90      	pop	{r4, r7, pc}

0800c7fa <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4618      	mov	r0, r3
 800c806:	f002 fb29 	bl	800ee5c <_ZN15ScopedMutexLockD1Ev>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800c814:	b590      	push	{r4, r7, lr}
 800c816:	b087      	sub	sp, #28
 800c818:	af02      	add	r7, sp, #8
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800c820:	f000 fc4e 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c824:	4604      	mov	r4, r0
 800c826:	f006 f8df 	bl	80129e8 <_Z25getCurrentMallocAllocatorv>
 800c82a:	4601      	mov	r1, r0
 800c82c:	2301      	movs	r3, #1
 800c82e:	9301      	str	r3, [sp, #4]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4620      	mov	r0, r4
 800c83a:	f00d f983 	bl	8019b44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800c83e:	4603      	mov	r3, r0
}
 800c840:	4618      	mov	r0, r3
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	bd90      	pop	{r4, r7, pc}

0800c848 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800c848:	b590      	push	{r4, r7, lr}
 800c84a:	b087      	sub	sp, #28
 800c84c:	af02      	add	r7, sp, #8
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800c854:	f000 fc34 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c858:	4603      	mov	r3, r0
 800c85a:	68f9      	ldr	r1, [r7, #12]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f00c ffdd 	bl	801981c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800c862:	f000 fc2d 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c866:	4604      	mov	r4, r0
 800c868:	f006 f8be 	bl	80129e8 <_Z25getCurrentMallocAllocatorv>
 800c86c:	4601      	mov	r1, r0
 800c86e:	2301      	movs	r3, #1
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4620      	mov	r0, r4
 800c87c:	f00d f996 	bl	8019bac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	bd90      	pop	{r4, r7, pc}

0800c888 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800c888:	b590      	push	{r4, r7, lr}
 800c88a:	b089      	sub	sp, #36	; 0x24
 800c88c:	af04      	add	r7, sp, #16
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800c896:	f000 fc13 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c89a:	4604      	mov	r4, r0
 800c89c:	f006 f8a4 	bl	80129e8 <_Z25getCurrentMallocAllocatorv>
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f00d f9de 	bl	8019c74 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800c8b8:	4603      	mov	r3, r0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd90      	pop	{r4, r7, pc}
	...

0800c8c4 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800c8d0:	4b04      	ldr	r3, [pc, #16]	; (800c8e4 <_ZL13normal_mallocjPKcj+0x20>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	4798      	blx	r3
 800c8d8:	4603      	mov	r3, r0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	200000c8 	.word	0x200000c8

0800c8e8 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800c8f6:	4b05      	ldr	r3, [pc, #20]	; (800c90c <_ZL14normal_reallocPvjPKcj+0x24>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	4798      	blx	r3
 800c900:	4603      	mov	r3, r0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	200000cc 	.word	0x200000cc

0800c910 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800c91c:	4b03      	ldr	r3, [pc, #12]	; (800c92c <_ZL11normal_freePvPKcj+0x1c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	4798      	blx	r3
}
 800c924:	bf00      	nop
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	200000d0 	.word	0x200000d0

0800c930 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800c930:	b590      	push	{r4, r7, lr}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800c938:	f107 0308 	add.w	r3, r7, #8
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff ff47 	bl	800c7d0 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c942:	f000 fbbd 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c946:	4604      	mov	r4, r0
 800c948:	f005 ff9e 	bl	8012888 <_Z22getCurrentNewAllocatorv>
 800c94c:	4601      	mov	r1, r0
 800c94e:	2300      	movs	r3, #0
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4620      	mov	r0, r4
 800c954:	f00d f864 	bl	8019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c958:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c95a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800c95c:	f107 0308 	add.w	r3, r7, #8
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff ff4a 	bl	800c7fa <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800c966:	4623      	mov	r3, r4
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3714      	adds	r7, #20
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd90      	pop	{r4, r7, pc}

0800c970 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800c970:	b590      	push	{r4, r7, lr}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c978:	f000 fba2 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c97c:	4604      	mov	r4, r0
 800c97e:	f005 ff83 	bl	8012888 <_Z22getCurrentNewAllocatorv>
 800c982:	4601      	mov	r1, r0
 800c984:	2300      	movs	r3, #0
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	4620      	mov	r0, r4
 800c98a:	f00d f849 	bl	8019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c98e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c990:	68fb      	ldr	r3, [r7, #12]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3714      	adds	r7, #20
 800c996:	46bd      	mov	sp, r7
 800c998:	bd90      	pop	{r4, r7, pc}

0800c99a <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800c99a:	b590      	push	{r4, r7, lr}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c9a2:	f000 fb8d 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	f005 ff6e 	bl	8012888 <_Z22getCurrentNewAllocatorv>
 800c9ac:	4601      	mov	r1, r0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f00d f834 	bl	8019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c9b8:	4603      	mov	r3, r0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd90      	pop	{r4, r7, pc}

0800c9c2 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800c9c2:	b590      	push	{r4, r7, lr}
 800c9c4:	b089      	sub	sp, #36	; 0x24
 800c9c6:	af02      	add	r7, sp, #8
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800c9ce:	f000 fb77 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	f005 ff58 	bl	8012888 <_Z22getCurrentNewAllocatorv>
 800c9d8:	4601      	mov	r1, r0
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f00d f8ac 	bl	8019b44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800c9ec:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c9ee:	697b      	ldr	r3, [r7, #20]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd90      	pop	{r4, r7, pc}

0800c9f8 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800c9f8:	b590      	push	{r4, r7, lr}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800ca00:	f000 fb5e 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ca04:	4604      	mov	r4, r0
 800ca06:	f005 ff97 	bl	8012938 <_Z27getCurrentNewArrayAllocatorv>
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	4620      	mov	r0, r4
 800ca12:	f00d f805 	bl	8019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ca16:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ca18:	68fb      	ldr	r3, [r7, #12]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd90      	pop	{r4, r7, pc}

0800ca22 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800ca22:	b590      	push	{r4, r7, lr}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800ca2a:	f000 fb49 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ca2e:	4604      	mov	r4, r0
 800ca30:	f005 ff82 	bl	8012938 <_Z27getCurrentNewArrayAllocatorv>
 800ca34:	4601      	mov	r1, r0
 800ca36:	2300      	movs	r3, #0
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f00c fff0 	bl	8019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800ca40:	4603      	mov	r3, r0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd90      	pop	{r4, r7, pc}

0800ca4a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800ca4a:	b590      	push	{r4, r7, lr}
 800ca4c:	b089      	sub	sp, #36	; 0x24
 800ca4e:	af02      	add	r7, sp, #8
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800ca56:	f000 fb33 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	f005 ff6c 	bl	8012938 <_Z27getCurrentNewArrayAllocatorv>
 800ca60:	4601      	mov	r1, r0
 800ca62:	2300      	movs	r3, #0
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f00d f868 	bl	8019b44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800ca74:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800ca76:	697b      	ldr	r3, [r7, #20]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd90      	pop	{r4, r7, pc}

0800ca80 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800ca80:	b590      	push	{r4, r7, lr}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800ca88:	f000 fb1a 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f00c fec3 	bl	801981c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800ca96:	f000 fb13 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	f005 fef4 	bl	8012888 <_Z22getCurrentNewAllocatorv>
 800caa0:	4601      	mov	r1, r0
 800caa2:	2300      	movs	r3, #0
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4620      	mov	r0, r4
 800caa8:	f00d f8ca 	bl	8019c40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd90      	pop	{r4, r7, pc}

0800cab4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800cab4:	b590      	push	{r4, r7, lr}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800cabc:	f000 fb00 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800cac0:	4603      	mov	r3, r0
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f00c fea9 	bl	801981c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800caca:	f000 faf9 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800cace:	4604      	mov	r4, r0
 800cad0:	f005 ff32 	bl	8012938 <_Z27getCurrentNewArrayAllocatorv>
 800cad4:	4601      	mov	r1, r0
 800cad6:	2300      	movs	r3, #0
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	4620      	mov	r0, r4
 800cadc:	f00d f8b0 	bl	8019c40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd90      	pop	{r4, r7, pc}

0800cae8 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800caf0:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <_ZL19normal_operator_newj+0x1c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	4798      	blx	r3
 800caf8:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800cafa:	68fb      	ldr	r3, [r7, #12]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	200000c8 	.word	0x200000c8

0800cb08 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800cb10:	4b04      	ldr	r3, [pc, #16]	; (800cb24 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	4798      	blx	r3
 800cb18:	4603      	mov	r3, r0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	200000c8 	.word	0x200000c8

0800cb28 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800cb34:	4b04      	ldr	r3, [pc, #16]	; (800cb48 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	4798      	blx	r3
 800cb3c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800cb3e:	697b      	ldr	r3, [r7, #20]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200000c8 	.word	0x200000c8

0800cb4c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800cb54:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <_ZL25normal_operator_new_arrayj+0x1c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	4798      	blx	r3
 800cb5c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	200000c8 	.word	0x200000c8

0800cb6c <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800cb74:	4b04      	ldr	r3, [pc, #16]	; (800cb88 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	4798      	blx	r3
 800cb7c:	4603      	mov	r3, r0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200000c8 	.word	0x200000c8

0800cb8c <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800cb98:	4b04      	ldr	r3, [pc, #16]	; (800cbac <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	4798      	blx	r3
 800cba0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800cba2:	697b      	ldr	r3, [r7, #20]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	200000c8 	.word	0x200000c8

0800cbb0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800cbb8:	4b03      	ldr	r3, [pc, #12]	; (800cbc8 <_ZL22normal_operator_deletePv+0x18>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	4798      	blx	r3
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	200000d0 	.word	0x200000d0

0800cbcc <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800cbd4:	4b03      	ldr	r3, [pc, #12]	; (800cbe4 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	4798      	blx	r3
}
 800cbdc:	bf00      	nop
 800cbde:	3708      	adds	r7, #8
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	200000d0 	.word	0x200000d0

0800cbe8 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800cbf0:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <_Znwj+0x1c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	4798      	blx	r3
 800cbf8:	4603      	mov	r3, r0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	2000002c 	.word	0x2000002c

0800cc08 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800cc14:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <_ZnwjPKci+0x24>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	68b9      	ldr	r1, [r7, #8]
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	4798      	blx	r3
 800cc20:	4603      	mov	r3, r0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20000034 	.word	0x20000034

0800cc30 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800cc3a:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <_ZdlPvj+0x1c>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
}
 800cc42:	bf00      	nop
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000044 	.word	0x20000044

0800cc50 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <_ZnajPKci+0x24>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	4798      	blx	r3
 800cc68:	4603      	mov	r3, r0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3710      	adds	r7, #16
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000040 	.word	0x20000040

0800cc78 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800cc80:	4b03      	ldr	r3, [pc, #12]	; (800cc90 <_ZdaPv+0x18>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	4798      	blx	r3
}
 800cc88:	bf00      	nop
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	20000048 	.word	0x20000048

0800cc94 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800cc9e:	4b04      	ldr	r3, [pc, #16]	; (800ccb0 <_ZdaPvj+0x1c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	4798      	blx	r3
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000048 	.word	0x20000048

0800ccb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800ccb8:	4b12      	ldr	r3, [pc, #72]	; (800cd04 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800ccba:	4a13      	ldr	r2, [pc, #76]	; (800cd08 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800ccbc:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800ccc0:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800ccc2:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800ccc4:	4b13      	ldr	r3, [pc, #76]	; (800cd14 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800ccc6:	4a14      	ldr	r2, [pc, #80]	; (800cd18 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800ccc8:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800ccca:	4b14      	ldr	r3, [pc, #80]	; (800cd1c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800cccc:	4a14      	ldr	r2, [pc, #80]	; (800cd20 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800ccce:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800ccd0:	4b14      	ldr	r3, [pc, #80]	; (800cd24 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800ccd2:	4a15      	ldr	r2, [pc, #84]	; (800cd28 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800ccd4:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800ccd6:	4b15      	ldr	r3, [pc, #84]	; (800cd2c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800ccd8:	4a15      	ldr	r2, [pc, #84]	; (800cd30 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800ccda:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800ccdc:	4b15      	ldr	r3, [pc, #84]	; (800cd34 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800ccde:	4a16      	ldr	r2, [pc, #88]	; (800cd38 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800cce0:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800cce2:	4b16      	ldr	r3, [pc, #88]	; (800cd3c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800cce4:	4a16      	ldr	r2, [pc, #88]	; (800cd40 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800cce6:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800cce8:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800ccea:	4a17      	ldr	r2, [pc, #92]	; (800cd48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800ccec:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800ccee:	4b17      	ldr	r3, [pc, #92]	; (800cd4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800ccf0:	4a17      	ldr	r2, [pc, #92]	; (800cd50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800ccf2:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800ccf4:	4b17      	ldr	r3, [pc, #92]	; (800cd54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800ccf6:	4a18      	ldr	r2, [pc, #96]	; (800cd58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800ccf8:	601a      	str	r2, [r3, #0]

#endif
}
 800ccfa:	bf00      	nop
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	2000002c 	.word	0x2000002c
 800cd08:	0800cae9 	.word	0x0800cae9
 800cd0c:	20000030 	.word	0x20000030
 800cd10:	0800cb09 	.word	0x0800cb09
 800cd14:	20000034 	.word	0x20000034
 800cd18:	0800cb29 	.word	0x0800cb29
 800cd1c:	20000038 	.word	0x20000038
 800cd20:	0800cb4d 	.word	0x0800cb4d
 800cd24:	2000003c 	.word	0x2000003c
 800cd28:	0800cb6d 	.word	0x0800cb6d
 800cd2c:	20000040 	.word	0x20000040
 800cd30:	0800cb8d 	.word	0x0800cb8d
 800cd34:	20000044 	.word	0x20000044
 800cd38:	0800cbb1 	.word	0x0800cbb1
 800cd3c:	20000048 	.word	0x20000048
 800cd40:	0800cbcd 	.word	0x0800cbcd
 800cd44:	20000014 	.word	0x20000014
 800cd48:	0800c8c5 	.word	0x0800c8c5
 800cd4c:	2000001c 	.word	0x2000001c
 800cd50:	0800c8e9 	.word	0x0800c8e9
 800cd54:	20000018 	.word	0x20000018
 800cd58:	0800c911 	.word	0x0800c911

0800cd5c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800cd60:	4b08      	ldr	r3, [pc, #32]	; (800cd84 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d004      	beq.n	800cd74 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800cd6a:	4b06      	ldr	r3, [pc, #24]	; (800cd84 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a07      	ldr	r2, [pc, #28]	; (800cd8c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d101      	bne.n	800cd78 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800cd74:	2301      	movs	r3, #1
 800cd76:	e000      	b.n	800cd7a <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800cd78:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	2000002c 	.word	0x2000002c
 800cd88:	0800c971 	.word	0x0800c971
 800cd8c:	0800c931 	.word	0x0800c931

0800cd90 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800cd94:	4b1f      	ldr	r3, [pc, #124]	; (800ce14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	4a1e      	ldr	r2, [pc, #120]	; (800ce14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800cd9c:	6013      	str	r3, [r2, #0]
 800cd9e:	4b1d      	ldr	r3, [pc, #116]	; (800ce14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	bfcc      	ite	gt
 800cda6:	2301      	movgt	r3, #1
 800cda8:	2300      	movle	r3, #0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d12e      	bne.n	800ce0e <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800cdb0:	4b19      	ldr	r3, [pc, #100]	; (800ce18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a19      	ldr	r2, [pc, #100]	; (800ce1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800cdb6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800cdb8:	4b19      	ldr	r3, [pc, #100]	; (800ce20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a19      	ldr	r2, [pc, #100]	; (800ce24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800cdbe:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800cdc0:	4b19      	ldr	r3, [pc, #100]	; (800ce28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a19      	ldr	r2, [pc, #100]	; (800ce2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800cdc6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800cdc8:	4b19      	ldr	r3, [pc, #100]	; (800ce30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a19      	ldr	r2, [pc, #100]	; (800ce34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800cdce:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800cdd0:	4b19      	ldr	r3, [pc, #100]	; (800ce38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a19      	ldr	r2, [pc, #100]	; (800ce3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800cdd6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800cdd8:	4b19      	ldr	r3, [pc, #100]	; (800ce40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800cdde:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800cde0:	4b19      	ldr	r3, [pc, #100]	; (800ce48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a19      	ldr	r2, [pc, #100]	; (800ce4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800cde6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800cde8:	4b19      	ldr	r3, [pc, #100]	; (800ce50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800cdee:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800cdf0:	4b19      	ldr	r3, [pc, #100]	; (800ce58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a19      	ldr	r2, [pc, #100]	; (800ce5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800cdf6:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800cdf8:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a19      	ldr	r2, [pc, #100]	; (800ce64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800cdfe:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800ce00:	4b19      	ldr	r3, [pc, #100]	; (800ce68 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a19      	ldr	r2, [pc, #100]	; (800ce6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800ce06:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800ce08:	f7ff ff54 	bl	800ccb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800ce0c:	e000      	b.n	800ce10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800ce0e:	bf00      	nop
#endif
}
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	200009e0 	.word	0x200009e0
 800ce18:	2000002c 	.word	0x2000002c
 800ce1c:	2000004c 	.word	0x2000004c
 800ce20:	20000030 	.word	0x20000030
 800ce24:	20000050 	.word	0x20000050
 800ce28:	20000034 	.word	0x20000034
 800ce2c:	20000054 	.word	0x20000054
 800ce30:	20000038 	.word	0x20000038
 800ce34:	20000058 	.word	0x20000058
 800ce38:	2000003c 	.word	0x2000003c
 800ce3c:	2000005c 	.word	0x2000005c
 800ce40:	20000040 	.word	0x20000040
 800ce44:	20000060 	.word	0x20000060
 800ce48:	20000044 	.word	0x20000044
 800ce4c:	20000064 	.word	0x20000064
 800ce50:	20000048 	.word	0x20000048
 800ce54:	20000068 	.word	0x20000068
 800ce58:	20000014 	.word	0x20000014
 800ce5c:	20000020 	.word	0x20000020
 800ce60:	2000001c 	.word	0x2000001c
 800ce64:	20000028 	.word	0x20000028
 800ce68:	20000018 	.word	0x20000018
 800ce6c:	20000024 	.word	0x20000024

0800ce70 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800ce74:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	4a1e      	ldr	r2, [pc, #120]	; (800cef4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	4b1d      	ldr	r3, [pc, #116]	; (800cef4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bfcc      	ite	gt
 800ce86:	2301      	movgt	r3, #1
 800ce88:	2300      	movle	r3, #0
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d12c      	bne.n	800ceea <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800ce90:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a19      	ldr	r2, [pc, #100]	; (800cefc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800ce96:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800ce98:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a19      	ldr	r2, [pc, #100]	; (800cf04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800ce9e:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800cea0:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a19      	ldr	r2, [pc, #100]	; (800cf0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800cea6:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800cea8:	4b19      	ldr	r3, [pc, #100]	; (800cf10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800ceae:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800ceb0:	4b19      	ldr	r3, [pc, #100]	; (800cf18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a19      	ldr	r2, [pc, #100]	; (800cf1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800ceb6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a19      	ldr	r2, [pc, #100]	; (800cf24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800cebe:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800cec0:	4b19      	ldr	r3, [pc, #100]	; (800cf28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a19      	ldr	r2, [pc, #100]	; (800cf2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800cec6:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800cec8:	4b19      	ldr	r3, [pc, #100]	; (800cf30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4a19      	ldr	r2, [pc, #100]	; (800cf34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800cece:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800ced0:	4b19      	ldr	r3, [pc, #100]	; (800cf38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a19      	ldr	r2, [pc, #100]	; (800cf3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800ced6:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a19      	ldr	r2, [pc, #100]	; (800cf44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800cede:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800cee0:	4b19      	ldr	r3, [pc, #100]	; (800cf48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a19      	ldr	r2, [pc, #100]	; (800cf4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e000      	b.n	800ceec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800ceea:	bf00      	nop
#endif
}
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	200009e0 	.word	0x200009e0
 800cef8:	2000004c 	.word	0x2000004c
 800cefc:	2000002c 	.word	0x2000002c
 800cf00:	20000050 	.word	0x20000050
 800cf04:	20000030 	.word	0x20000030
 800cf08:	20000054 	.word	0x20000054
 800cf0c:	20000034 	.word	0x20000034
 800cf10:	20000058 	.word	0x20000058
 800cf14:	20000038 	.word	0x20000038
 800cf18:	2000005c 	.word	0x2000005c
 800cf1c:	2000003c 	.word	0x2000003c
 800cf20:	20000060 	.word	0x20000060
 800cf24:	20000040 	.word	0x20000040
 800cf28:	20000064 	.word	0x20000064
 800cf2c:	20000044 	.word	0x20000044
 800cf30:	20000068 	.word	0x20000068
 800cf34:	20000048 	.word	0x20000048
 800cf38:	20000020 	.word	0x20000020
 800cf3c:	20000014 	.word	0x20000014
 800cf40:	20000028 	.word	0x20000028
 800cf44:	2000001c 	.word	0x2000001c
 800cf48:	20000024 	.word	0x20000024
 800cf4c:	20000018 	.word	0x20000018

0800cf50 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
    {
 800cf58:	4a05      	ldr	r2, [pc, #20]	; (800cf70 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff fc15 	bl	800c790 <_ZN17MemoryLeakFailureD1Ev>
    }
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	0802b6c8 	.word	0x0802b6c8

0800cf74 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
    }
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ffe7 	bl	800cf50 <_ZN25MemoryLeakWarningReporterD1Ev>
 800cf82:	2104      	movs	r1, #4
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff fe53 	bl	800cc30 <_ZdlPvj>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	4a04      	ldr	r2, [pc, #16]	; (800cfb0 <_ZN14TestTerminatorC1Ev+0x1c>)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	0802c074 	.word	0x0802c074

0800cfb4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff ffe8 	bl	800cf94 <_ZN14TestTerminatorC1Ev>
 800cfc4:	4a03      	ldr	r2, [pc, #12]	; (800cfd4 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	0802c04c 	.word	0x0802c04c

0800cfd8 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800cfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfda:	b099      	sub	sp, #100	; 0x64
 800cfdc:	af02      	add	r7, sp, #8
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800cfe2:	f009 fdb7 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800cfe6:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800cfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	339c      	adds	r3, #156	; 0x9c
 800cfee:	681c      	ldr	r4, [r3, #0]
 800cff0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cff4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cff6:	4618      	mov	r0, r3
 800cff8:	f008 fbc4 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 800cffc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d000:	4618      	mov	r0, r3
 800d002:	f002 fd4f 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800d006:	4605      	mov	r5, r0
 800d008:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d00a:	f008 fc9b 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 800d00e:	4606      	mov	r6, r0
 800d010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f002 f9b9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800d01c:	f107 000c 	add.w	r0, r7, #12
 800d020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	4633      	mov	r3, r6
 800d028:	462a      	mov	r2, r5
 800d02a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d02c:	f004 fd14 	bl	8011a58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800d030:	2300      	movs	r3, #0
 800d032:	653b      	str	r3, [r7, #80]	; 0x50
 800d034:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d038:	4618      	mov	r0, r3
 800d03a:	f7ff ffbb 	bl	800cfb4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800d03e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d042:	f107 030c 	add.w	r3, r7, #12
 800d046:	4619      	mov	r1, r3
 800d048:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d04a:	47a0      	blx	r4
 800d04c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d050:	4618      	mov	r0, r3
 800d052:	f009 fe79 	bl	8016d48 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800d056:	f107 030c 	add.w	r3, r7, #12
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 f9ac 	bl	800d3b8 <_ZN11FailFailureD1Ev>
 800d060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d064:	4618      	mov	r0, r3
 800d066:	f002 fd4a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800d06a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d06e:	4618      	mov	r0, r3
 800d070:	f002 fd45 	bl	800fafe <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800d074:	bf00      	nop
 800d076:	375c      	adds	r7, #92	; 0x5c
 800d078:	46bd      	mov	sp, r7
 800d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d07c <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	4a04      	ldr	r2, [pc, #16]	; (800d098 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	0802b6dc 	.word	0x0802b6dc

0800d09c <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7ff ffe8 	bl	800d07c <_ZN17MemoryLeakFailureC1Ev>
 800d0ac:	4a03      	ldr	r2, [pc, #12]	; (800d0bc <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	0802b6c8 	.word	0x0802b6c8

0800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800d0c0:	b598      	push	{r3, r4, r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800d0c4:	4b11      	ldr	r3, [pc, #68]	; (800d10c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d11b      	bne.n	800d104 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800d0cc:	f7ff fe60 	bl	800cd90 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800d0d0:	2004      	movs	r0, #4
 800d0d2:	f7ff fd89 	bl	800cbe8 <_Znwj>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	461c      	mov	r4, r3
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff ffde 	bl	800d09c <_ZN25MemoryLeakWarningReporterC1Ev>
 800d0e0:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800d0e2:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800d0e4:	f241 1050 	movw	r0, #4432	; 0x1150
 800d0e8:	f7ff fd7e 	bl	800cbe8 <_Znwj>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	461c      	mov	r4, r3
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f00c fa3e 	bl	8019578 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800d0fc:	4b03      	ldr	r3, [pc, #12]	; (800d10c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800d0fe:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800d100:	f7ff feb6 	bl	800ce70 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800d104:	4b01      	ldr	r3, [pc, #4]	; (800d10c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800d106:	681b      	ldr	r3, [r3, #0]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	bd98      	pop	{r3, r4, r7, pc}
 800d10c:	200009e8 	.word	0x200009e8
 800d110:	200009e4 	.word	0x200009e4

0800d114 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	460b      	mov	r3, r1
 800d11e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	78fa      	ldrb	r2, [r7, #3]
 800d124:	765a      	strb	r2, [r3, #25]
}
 800d126:	bf00      	nop
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
	...

0800d134 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800d138:	f7ff fdbc 	bl	800ccb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800d13c:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d004      	beq.n	800d14e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	3204      	adds	r2, #4
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	4618      	mov	r0, r3
 800d14c:	4790      	blx	r2
    delete globalReporter;
 800d14e:	4b08      	ldr	r3, [pc, #32]	; (800d170 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d004      	beq.n	800d160 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	3204      	adds	r2, #4
 800d15a:	6812      	ldr	r2, [r2, #0]
 800d15c:	4618      	mov	r0, r3
 800d15e:	4790      	blx	r2
    globalDetector = NULLPTR;
 800d160:	4b02      	ldr	r3, [pc, #8]	; (800d16c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
}
 800d166:	bf00      	nop
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	200009e8 	.word	0x200009e8
 800d170:	200009e4 	.word	0x200009e4

0800d174 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	4618      	mov	r0, r3
 800d186:	f006 fdfd 	bl	8013d84 <_ZN10TestPluginC1ERK12SimpleString>
 800d18a:	4a14      	ldr	r2, [pc, #80]	; (800d1dc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	761a      	strb	r2, [r3, #24]
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	765a      	strb	r2, [r3, #25]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800d1a2:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d102      	bne.n	800d1b0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800d1aa:	4a0d      	ldr	r2, [pc, #52]	; (800d1e0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	615a      	str	r2, [r3, #20]
 800d1bc:	e004      	b.n	800d1c8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800d1be:	f7ff ff7f 	bl	800d0c0 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f00c fa69 	bl	80196a4 <_ZN18MemoryLeakDetector6enableEv>
}
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	0802b6f0 	.word	0x0802b6f0
 800d1e0:	200009ec 	.word	0x200009ec

0800d1e4 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	4a09      	ldr	r2, [pc, #36]	; (800d214 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7e5b      	ldrb	r3, [r3, #25]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800d1fa:	f7ff fd5b 	bl	800ccb4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800d1fe:	f7ff ff99 	bl	800d134 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	f006 fdf9 	bl	8013dfc <_ZN10TestPluginD1Ev>
    }
}
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	0802b6f0 	.word	0x0802b6f0

0800d218 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
}
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ffdf 	bl	800d1e4 <_ZN23MemoryLeakWarningPluginD1Ev>
 800d226:	2124      	movs	r1, #36	; 0x24
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff fd01 	bl	800cc30 <_ZdlPvj>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	4618      	mov	r0, r3
 800d24a:	f00c fa0e 	bl	801966a <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7fd ffb0 	bl	800b1b4 <_ZNK10TestResult15getFailureCountEv>
 800d254:	4602      	mov	r2, r0
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	621a      	str	r2, [r3, #32]
}
 800d25a:	bf00      	nop
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
	...

0800d264 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b097      	sub	sp, #92	; 0x5c
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	4618      	mov	r0, r3
 800d276:	f00c fa08 	bl	801968a <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	2103      	movs	r1, #3
 800d280:	4618      	mov	r0, r3
 800d282:	f00c fda5 	bl	8019dd0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800d286:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	7e1b      	ldrb	r3, [r3, #24]
 800d28c:	f083 0301 	eor.w	r3, r3, #1
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00e      	beq.n	800d2b4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	69db      	ldr	r3, [r3, #28]
 800d29a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d009      	beq.n	800d2b4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a1c      	ldr	r4, [r3, #32]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7fd ff85 	bl	800b1b4 <_ZNK10TestResult15getFailureCountEv>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	d101      	bne.n	800d2b4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e000      	b.n	800d2b6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d04c      	beq.n	800d354 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800d2ba:	f7ff fd4f 	bl	800cd5c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d028      	beq.n	800d316 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	2103      	movs	r1, #3
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f00c fd45 	bl	8019d5a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f002 f858 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800d2de:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800d2e2:	f107 0310 	add.w	r3, r7, #16
 800d2e6:	68b9      	ldr	r1, [r7, #8]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f003 feaf 	bl	801104c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800d2ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f002 fc03 	bl	800fafe <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3334      	adds	r3, #52	; 0x34
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f107 0210 	add.w	r2, r7, #16
 800d304:	4611      	mov	r1, r2
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800d30a:	f107 0310 	add.w	r3, r7, #16
 800d30e:	4618      	mov	r0, r3
 800d310:	f003 ff5c 	bl	80111cc <_ZN11TestFailureD1Ev>
 800d314:	e01e      	b.n	800d354 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d01a      	beq.n	800d354 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3338      	adds	r3, #56	; 0x38
 800d324:	681c      	ldr	r4, [r3, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	461a      	mov	r2, r3
 800d32c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d330:	4910      	ldr	r1, [pc, #64]	; (800d374 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800d332:	4618      	mov	r0, r3
 800d334:	f003 f8ea 	bl	801050c <_Z16StringFromFormatPKcz>
 800d338:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d33c:	4618      	mov	r0, r3
 800d33e:	f002 fbb1 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800d342:	4603      	mov	r3, r0
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	47a0      	blx	r4
 800d34a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d34e:	4618      	mov	r0, r3
 800d350:	f002 fbd5 	bl	800fafe <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	4618      	mov	r0, r3
 800d35a:	f00c fd13 	bl	8019d84 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	61da      	str	r2, [r3, #28]
}
 800d36a:	bf00      	nop
 800d36c:	375c      	adds	r7, #92	; 0x5c
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	bf00      	nop
 800d374:	080273b4 	.word	0x080273b4

0800d378 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	695b      	ldr	r3, [r3, #20]
 800d386:	2102      	movs	r1, #2
 800d388:	4618      	mov	r0, r3
 800d38a:	f00c fd21 	bl	8019dd0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800d38e:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d007      	beq.n	800d3a8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	2102      	movs	r1, #2
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f00c fcdb 	bl	8019d5a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	e000      	b.n	800d3aa <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800d3a8:	4b02      	ldr	r3, [pc, #8]	; (800d3b4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	080273f4 	.word	0x080273f4

0800d3b8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	4a05      	ldr	r2, [pc, #20]	; (800d3d8 <_ZN11FailFailureD1Ev+0x20>)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f003 feff 	bl	80111cc <_ZN11TestFailureD1Ev>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	0802b738 	.word	0x0802b738

0800d3dc <_ZN11FailFailureD0Ev>:
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ffe7 	bl	800d3b8 <_ZN11FailFailureD1Ev>
 800d3ea:	2134      	movs	r1, #52	; 0x34
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff fc1f 	bl	800cc30 <_ZdlPvj>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	4a06      	ldr	r2, [pc, #24]	; (800d450 <_ZN19MockFailureReporterC1Ev+0x24>)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	711a      	strb	r2, [r3, #4]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4618      	mov	r0, r3
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	0802c914 	.word	0x0802c914

0800d454 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	4a04      	ldr	r2, [pc, #16]	; (800d470 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	0802c914 	.word	0x0802c914

0800d474 <_ZN19MockFailureReporterD0Ev>:
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff ffe9 	bl	800d454 <_ZN19MockFailureReporterD1Ev>
 800d482:	2108      	movs	r1, #8
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fbd3 	bl	800cc30 <_ZdlPvj>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	3708      	adds	r7, #8
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	4a05      	ldr	r2, [pc, #20]	; (800d4b4 <_ZN11MockFailureD1Ev+0x20>)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	601a      	str	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f003 fe91 	bl	80111cc <_ZN11TestFailureD1Ev>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	0802b88c 	.word	0x0802b88c

0800d4b8 <_ZN11MockFailureD0Ev>:
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff ffe7 	bl	800d494 <_ZN11MockFailureD1Ev>
 800d4c6:	2134      	movs	r1, #52	; 0x34
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff fbb1 	bl	800cc30 <_ZdlPvj>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
 800d4e2:	4a16      	ldr	r2, [pc, #88]	; (800d53c <_ZN14MockNamedValueC1ERKS_+0x64>)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	1d1a      	adds	r2, r3, #4
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	3304      	adds	r3, #4
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	f001 ff9f 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 020c 	add.w	r2, r3, #12
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	330c      	adds	r3, #12
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f001 ff96 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	f102 0418 	add.w	r4, r2, #24
 800d512:	3318      	adds	r3, #24
 800d514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	629a      	str	r2, [r3, #40]	; 0x28
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	62da      	str	r2, [r3, #44]	; 0x2c
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	631a      	str	r2, [r3, #48]	; 0x30
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd90      	pop	{r4, r7, pc}
 800d53c:	0802c954 	.word	0x0802c954

0800d540 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800d54a:	f107 030c 	add.w	r3, r7, #12
 800d54e:	4916      	ldr	r1, [pc, #88]	; (800d5a8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800d550:	4618      	mov	r0, r3
 800d552:	f001 ff1c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800d556:	f107 030c 	add.w	r3, r7, #12
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f002 fb1f 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d005      	beq.n	800d574 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	4810      	ldr	r0, [pc, #64]	; (800d5ac <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800d56c:	f000 ff70 	bl	800e450 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800d570:	4603      	mov	r3, r0
 800d572:	e000      	b.n	800d576 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800d574:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800d576:	617b      	str	r3, [r7, #20]
 800d578:	f107 030c 	add.w	r3, r7, #12
 800d57c:	4618      	mov	r0, r3
 800d57e:	f002 fabe 	bl	800fafe <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	33a8      	adds	r3, #168	; 0xa8
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6978      	ldr	r0, [r7, #20]
 800d58e:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	33ac      	adds	r3, #172	; 0xac
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6978      	ldr	r0, [r7, #20]
 800d59a:	4798      	blx	r3
    return mock_support;
 800d59c:	697b      	ldr	r3, [r7, #20]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	080273f8 	.word	0x080273f8
 800d5ac:	200009f0 	.word	0x200009f0

0800d5b0 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800d5ba:	4a21      	ldr	r2, [pc, #132]	; (800d640 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	601a      	str	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	605a      	str	r2, [r3, #4]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	609a      	str	r2, [r3, #8]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	731a      	strb	r2, [r3, #12]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f103 0218 	add.w	r2, r3, #24
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	615a      	str	r2, [r3, #20]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3318      	adds	r3, #24
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff ff23 	bl	800d42c <_ZN19MockFailureReporterC1Ev>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3320      	adds	r3, #32
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f010 fefc 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	62da      	str	r2, [r3, #44]	; 0x2c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3330      	adds	r3, #48	; 0x30
 800d60a:	4618      	mov	r0, r3
 800d60c:	f014 fbea 	bl	8021de4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3338      	adds	r3, #56	; 0x38
 800d614:	4618      	mov	r0, r3
 800d616:	f014 faf4 	bl	8021c02 <_ZN18MockNamedValueListC1Ev>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	333c      	adds	r3, #60	; 0x3c
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f001 ff08 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800d62e:	2100      	movs	r1, #0
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f894 	bl	800d75e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	0802b764 	.word	0x0802b764

0800d644 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	4a0d      	ldr	r2, [pc, #52]	; (800d684 <_ZN11MockSupportD1Ev+0x40>)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	601a      	str	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	333c      	adds	r3, #60	; 0x3c
 800d656:	4618      	mov	r0, r3
 800d658:	f002 fa51 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3330      	adds	r3, #48	; 0x30
 800d660:	4618      	mov	r0, r3
 800d662:	f014 fbd3 	bl	8021e0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	3320      	adds	r3, #32
 800d66a:	4618      	mov	r0, r3
 800d66c:	f010 fed0 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3318      	adds	r3, #24
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff feed 	bl	800d454 <_ZN19MockFailureReporterD1Ev>
{
}
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0802b764 	.word	0x0802b764

0800d688 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
}
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ffd7 	bl	800d644 <_ZN11MockSupportD1Ev>
 800d696:	2148      	movs	r1, #72	; 0x48
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff fac9 	bl	800cc30 <_ZdlPvj>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	691a      	ldr	r2, [r3, #16]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3310      	adds	r3, #16
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	78f9      	ldrb	r1, [r7, #3]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d102      	bne.n	800d6e6 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	3318      	adds	r3, #24
 800d6e4:	e000      	b.n	800d6e8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00a      	beq.n	800d70a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	33c8      	adds	r3, #200	; 0xc8
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	6952      	ldr	r2, [r2, #20]
 800d706:	4611      	mov	r1, r2
 800d708:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3338      	adds	r3, #56	; 0x38
 800d70e:	4618      	mov	r0, r3
 800d710:	f014 fb0d 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01c      	beq.n	800d756 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800d71c:	68f9      	ldr	r1, [r7, #12]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 ff26 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	bf14      	ite	ne
 800d72a:	2301      	movne	r3, #1
 800d72c:	2300      	moveq	r3, #0
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00b      	beq.n	800d74c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800d734:	68f9      	ldr	r1, [r7, #12]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 ff1a 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d73c:	4603      	mov	r3, r0
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	32a4      	adds	r2, #164	; 0xa4
 800d742:	6812      	ldr	r2, [r2, #0]
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	6949      	ldr	r1, [r1, #20]
 800d748:	4618      	mov	r0, r3
 800d74a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f014 f9f7 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	e7df      	b.n	800d716 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	695b      	ldr	r3, [r3, #20]
 800d772:	e000      	b.n	800d776 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	6113      	str	r3, [r2, #16]
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b082      	sub	sp, #8
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3330      	adds	r3, #48	; 0x30
 800d792:	4618      	mov	r0, r3
 800d794:	f012 fb10 	bl	801fdb8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b087      	sub	sp, #28
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3330      	adds	r3, #48	; 0x30
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	68b9      	ldr	r1, [r7, #8]
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f014 fb77 	bl	8021ea8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3338      	adds	r3, #56	; 0x38
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f014 fab5 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d7c4:	6178      	str	r0, [r7, #20]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01c      	beq.n	800d806 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800d7cc:	6979      	ldr	r1, [r7, #20]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 fece 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bf14      	ite	ne
 800d7da:	2301      	movne	r3, #1
 800d7dc:	2300      	moveq	r3, #0
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00b      	beq.n	800d7fc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800d7e4:	6979      	ldr	r1, [r7, #20]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 fec2 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	32b0      	adds	r2, #176	; 0xb0
 800d7f2:	6814      	ldr	r4, [r2, #0]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	68b9      	ldr	r1, [r7, #8]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d7fc:	6978      	ldr	r0, [r7, #20]
 800d7fe:	f014 f99f 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d802:	6178      	str	r0, [r7, #20]
 800d804:	e7df      	b.n	800d7c6 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800d806:	bf00      	nop
 800d808:	371c      	adds	r7, #28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd90      	pop	{r4, r7, pc}

0800d80e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800d80e:	b590      	push	{r4, r7, lr}
 800d810:	b087      	sub	sp, #28
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3330      	adds	r3, #48	; 0x30
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68b9      	ldr	r1, [r7, #8]
 800d822:	4618      	mov	r0, r3
 800d824:	f014 fb5c 	bl	8021ee0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3338      	adds	r3, #56	; 0x38
 800d82c:	4618      	mov	r0, r3
 800d82e:	f014 fa7e 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d832:	6178      	str	r0, [r7, #20]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d01c      	beq.n	800d874 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800d83a:	6979      	ldr	r1, [r7, #20]
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 fe97 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	bf14      	ite	ne
 800d848:	2301      	movne	r3, #1
 800d84a:	2300      	moveq	r3, #0
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00b      	beq.n	800d86a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800d852:	6979      	ldr	r1, [r7, #20]
 800d854:	68f8      	ldr	r0, [r7, #12]
 800d856:	f000 fe8b 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d85a:	4603      	mov	r3, r0
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	32b4      	adds	r2, #180	; 0xb4
 800d860:	6814      	ldr	r4, [r2, #0]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	4618      	mov	r0, r3
 800d868:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d86a:	6978      	ldr	r0, [r7, #20]
 800d86c:	f014 f968 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d870:	6178      	str	r0, [r7, #20]
 800d872:	e7df      	b.n	800d834 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800d874:	bf00      	nop
 800d876:	371c      	adds	r7, #28
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3330      	adds	r3, #48	; 0x30
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f014 fb93 	bl	8021fb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3338      	adds	r3, #56	; 0x38
 800d896:	4618      	mov	r0, r3
 800d898:	f014 fa49 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d01b      	beq.n	800d8dc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800d8a4:	68f9      	ldr	r1, [r7, #12]
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fe62 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	bf14      	ite	ne
 800d8b2:	2301      	movne	r3, #1
 800d8b4:	2300      	moveq	r3, #0
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00a      	beq.n	800d8d2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800d8bc:	68f9      	ldr	r1, [r7, #12]
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 fe56 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	32b8      	adds	r2, #184	; 0xb8
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	6839      	ldr	r1, [r7, #0]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f014 f934 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	e7e0      	b.n	800d89e <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	3330      	adds	r3, #48	; 0x30
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f014 faba 	bl	8021e6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3338      	adds	r3, #56	; 0x38
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f014 fa17 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01a      	beq.n	800d93e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800d908:	68f9      	ldr	r1, [r7, #12]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fe30 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	bf14      	ite	ne
 800d916:	2301      	movne	r3, #1
 800d918:	2300      	moveq	r3, #0
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d009      	beq.n	800d934 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800d920:	68f9      	ldr	r1, [r7, #12]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fe24 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d928:	4603      	mov	r3, r0
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	32bc      	adds	r2, #188	; 0xbc
 800d92e:	6812      	ldr	r2, [r2, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f014 f903 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	e7e1      	b.n	800d902 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d952:	2b00      	cmp	r3, #0
 800d954:	d004      	beq.n	800d960 <_ZN11MockSupport5clearEv+0x1a>
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	3204      	adds	r2, #4
 800d95a:	6812      	ldr	r2, [r2, #0]
 800d95c:	4618      	mov	r0, r3
 800d95e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800d96e:	f00e fe0d 	bl	801c58c <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	3320      	adds	r3, #32
 800d976:	4618      	mov	r0, r3
 800d978:	f011 f937 	bl	801ebea <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3338      	adds	r3, #56	; 0x38
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f014 f9c3 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01a      	beq.n	800d9e6 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800d9b0:	68f9      	ldr	r1, [r7, #12]
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 fddc 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d9b8:	60b8      	str	r0, [r7, #8]
        if (support) {
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00d      	beq.n	800d9dc <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	339c      	adds	r3, #156	; 0x9c
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68b8      	ldr	r0, [r7, #8]
 800d9ca:	4798      	blx	r3
            delete support;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d004      	beq.n	800d9dc <_ZN11MockSupport5clearEv+0x96>
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	3204      	adds	r2, #4
 800d9d6:	6812      	ldr	r2, [r2, #0]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f014 f8af 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	e7e1      	b.n	800d9aa <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3338      	adds	r3, #56	; 0x38
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f014 f917 	bl	8021c1e <_ZN18MockNamedValueList5clearEv>
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	731a      	strb	r2, [r3, #12]
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800da14:	b590      	push	{r4, r7, lr}
 800da16:	b089      	sub	sp, #36	; 0x24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	333c      	adds	r3, #60	; 0x3c
 800da24:	4618      	mov	r0, r3
 800da26:	f002 f859 	bl	800fadc <_ZNK12SimpleString7isEmptyEv>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800da30:	6879      	ldr	r1, [r7, #4]
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f001 fcff 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 800da38:	e021      	b.n	800da7e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800da40:	f107 0318 	add.w	r3, r7, #24
 800da44:	4910      	ldr	r1, [pc, #64]	; (800da88 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800da46:	4618      	mov	r0, r3
 800da48:	f001 fca1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800da4c:	f107 0310 	add.w	r3, r7, #16
 800da50:	f107 0218 	add.w	r2, r7, #24
 800da54:	4621      	mov	r1, r4
 800da56:	4618      	mov	r0, r3
 800da58:	f002 f8b3 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f107 0110 	add.w	r1, r7, #16
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	f002 f8ac 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 800da6a:	f107 0310 	add.w	r3, r7, #16
 800da6e:	4618      	mov	r0, r3
 800da70:	f002 f845 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800da74:	f107 0318 	add.w	r3, r7, #24
 800da78:	4618      	mov	r0, r3
 800da7a:	f002 f840 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	3724      	adds	r7, #36	; 0x24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd90      	pop	{r4, r7, pc}
 800da86:	bf00      	nop
 800da88:	080273fc 	.word	0x080273fc

0800da8c <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3314      	adds	r3, #20
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	2101      	movs	r1, #1
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	4798      	blx	r3
 800daa6:	4603      	mov	r3, r0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	3314      	adds	r3, #20
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	4798      	blx	r3
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800dad4:	b590      	push	{r4, r7, lr}
 800dad6:	b089      	sub	sp, #36	; 0x24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dae6:	f083 0301 	eor.w	r3, r3, #1
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	d003      	beq.n	800daf8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800daf0:	f010 fbf6 	bl	801e2e0 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800daf4:	4603      	mov	r3, r0
 800daf6:	e041      	b.n	800db7c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f000 fb1b 	bl	800e134 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800dafe:	22a5      	movs	r2, #165	; 0xa5
 800db00:	4920      	ldr	r1, [pc, #128]	; (800db84 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800db02:	2070      	movs	r0, #112	; 0x70
 800db04:	f7ff f880 	bl	800cc08 <_ZnwjPKci>
 800db08:	4604      	mov	r4, r0
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	4620      	mov	r0, r4
 800db0e:	f00f f8f3 	bl	801ccf8 <_ZN23MockCheckedExpectedCallC1Ej>
 800db12:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	3308      	adds	r3, #8
 800db1a:	681c      	ldr	r4, [r3, #0]
 800db1c:	f107 0314 	add.w	r3, r7, #20
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	68f9      	ldr	r1, [r7, #12]
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff ff75 	bl	800da14 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800db2a:	f107 0314 	add.w	r3, r7, #20
 800db2e:	4619      	mov	r1, r3
 800db30:	69f8      	ldr	r0, [r7, #28]
 800db32:	47a0      	blx	r4
 800db34:	f107 0314 	add.w	r3, r7, #20
 800db38:	4618      	mov	r0, r3
 800db3a:	f001 ffe0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	7b1b      	ldrb	r3, [r3, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d013      	beq.n	800db6e <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	3310      	adds	r3, #16
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	6892      	ldr	r2, [r2, #8]
 800db52:	1c50      	adds	r0, r2, #1
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	6891      	ldr	r1, [r2, #8]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	440a      	add	r2, r1
 800db5c:	4601      	mov	r1, r0
 800db5e:	69f8      	ldr	r0, [r7, #28]
 800db60:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	689a      	ldr	r2, [r3, #8]
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	441a      	add	r2, r3
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	3320      	adds	r3, #32
 800db72:	69f9      	ldr	r1, [r7, #28]
 800db74:	4618      	mov	r0, r3
 800db76:	f010 fd89 	bl	801e68c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800db7a:	69fb      	ldr	r3, [r7, #28]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3724      	adds	r7, #36	; 0x24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd90      	pop	{r4, r7, pc}
 800db84:	08027400 	.word	0x08027400

0800db88 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800db88:	b5b0      	push	{r4, r5, r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	1c5a      	adds	r2, r3, #1
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	605a      	str	r2, [r3, #4]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	685d      	ldr	r5, [r3, #4]
 800db9e:	22b1      	movs	r2, #177	; 0xb1
 800dba0:	490a      	ldr	r1, [pc, #40]	; (800dbcc <_ZN11MockSupport16createActualCallEv+0x44>)
 800dba2:	202c      	movs	r0, #44	; 0x2c
 800dba4:	f7ff f830 	bl	800cc08 <_ZnwjPKci>
 800dba8:	4604      	mov	r4, r0
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691a      	ldr	r2, [r3, #16]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3320      	adds	r3, #32
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	f00c fbdb 	bl	801a370 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bdb0      	pop	{r4, r5, r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	08027400 	.word	0x08027400

0800dbd0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00d      	beq.n	800dc00 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3320      	adds	r3, #32
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f010 fd2a 	bl	801e644 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f083 0301 	eor.w	r3, r3, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800dc0a:	b590      	push	{r4, r7, lr}
 800dc0c:	b087      	sub	sp, #28
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800dc14:	f107 030c 	add.w	r3, r7, #12
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	6879      	ldr	r1, [r7, #4]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fef9 	bl	800da14 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d014      	beq.n	800dc54 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	33c4      	adds	r3, #196	; 0xc4
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4610      	mov	r0, r2
 800dc3a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d004      	beq.n	800dc4e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	3204      	adds	r2, #4
 800dc48:	6812      	ldr	r2, [r2, #0]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800dc5a:	f083 0301 	eor.w	r3, r3, #1
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d004      	beq.n	800dc6e <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800dc64:	f00e fcbe 	bl	801c5e4 <_ZN21MockIgnoredActualCall8instanceEv>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	461c      	mov	r4, r3
 800dc6c:	e02f      	b.n	800dcce <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00b      	beq.n	800dc90 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800dc78:	f00e fc6e 	bl	801c558 <_ZN19MockActualCallTrace8instanceEv>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	3208      	adds	r2, #8
 800dc82:	6812      	ldr	r2, [r2, #0]
 800dc84:	f107 010c 	add.w	r1, r7, #12
 800dc88:	4618      	mov	r0, r3
 800dc8a:	4790      	blx	r2
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	e01e      	b.n	800dcce <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800dc90:	f107 030c 	add.w	r3, r7, #12
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff ff9a 	bl	800dbd0 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d004      	beq.n	800dcac <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800dca2:	f00e fc9f 	bl	801c5e4 <_ZN21MockIgnoredActualCall8instanceEv>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461c      	mov	r4, r3
 800dcaa:	e010      	b.n	800dcce <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	33c0      	adds	r3, #192	; 0xc0
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	4798      	blx	r3
 800dcb8:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f107 020c 	add.w	r2, r7, #12
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	6978      	ldr	r0, [r7, #20]
 800dcca:	4798      	blx	r3
    return *call;
 800dccc:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800dcce:	f107 030c 	add.w	r3, r7, #12
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f001 ff13 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800dcd8:	4623      	mov	r3, r4
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}

0800dce2 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b084      	sub	sp, #16
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3338      	adds	r3, #56	; 0x38
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f014 f819 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800dcfc:	60f8      	str	r0, [r7, #12]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01a      	beq.n	800dd3a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800dd04:	68f9      	ldr	r1, [r7, #12]
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fc32 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bf14      	ite	ne
 800dd12:	2301      	movne	r3, #1
 800dd14:	2300      	moveq	r3, #0
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d009      	beq.n	800dd30 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800dd1c:	68f9      	ldr	r1, [r7, #12]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fc26 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd24:	4603      	mov	r3, r0
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	3290      	adds	r2, #144	; 0x90
 800dd2a:	6812      	ldr	r2, [r2, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f013 ff05 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	e7e1      	b.n	800dcfe <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3338      	adds	r3, #56	; 0x38
 800dd56:	4618      	mov	r0, r3
 800dd58:	f013 ffe9 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01a      	beq.n	800dd9a <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800dd64:	68f9      	ldr	r1, [r7, #12]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fc02 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	bf14      	ite	ne
 800dd72:	2301      	movne	r3, #1
 800dd74:	2300      	moveq	r3, #0
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d009      	beq.n	800dd90 <_ZN11MockSupport7disableEv+0x4e>
 800dd7c:	68f9      	ldr	r1, [r7, #12]
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 fbf6 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd84:	4603      	mov	r3, r0
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	3284      	adds	r2, #132	; 0x84
 800dd8a:	6812      	ldr	r2, [r2, #0]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f013 fed5 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	e7e1      	b.n	800dd5e <_ZN11MockSupport7disableEv+0x1c>
}
 800dd9a:	bf00      	nop
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	3338      	adds	r3, #56	; 0x38
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f013 ffb9 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d01a      	beq.n	800ddfa <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800ddc4:	68f9      	ldr	r1, [r7, #12]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fbd2 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bf14      	ite	ne
 800ddd2:	2301      	movne	r3, #1
 800ddd4:	2300      	moveq	r3, #0
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d009      	beq.n	800ddf0 <_ZN11MockSupport6enableEv+0x4e>
 800dddc:	68f9      	ldr	r1, [r7, #12]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fbc6 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dde4:	4603      	mov	r3, r0
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	3288      	adds	r2, #136	; 0x88
 800ddea:	6812      	ldr	r2, [r2, #0]
 800ddec:	4618      	mov	r0, r3
 800ddee:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f013 fea5 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	e7e1      	b.n	800ddbe <_ZN11MockSupport6enableEv+0x1c>
}
 800ddfa:	bf00      	nop
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}

0800de02 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800de02:	b580      	push	{r7, lr}
 800de04:	b084      	sub	sp, #16
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	460b      	mov	r3, r1
 800de0c:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	78fa      	ldrb	r2, [r7, #3]
 800de12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3338      	adds	r3, #56	; 0x38
 800de1a:	4618      	mov	r0, r3
 800de1c:	f013 ff87 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d01b      	beq.n	800de60 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800de28:	68f9      	ldr	r1, [r7, #12]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fba0 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	bf14      	ite	ne
 800de36:	2301      	movne	r3, #1
 800de38:	2300      	moveq	r3, #0
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00a      	beq.n	800de56 <_ZN11MockSupport7tracingEb+0x54>
 800de40:	68f9      	ldr	r1, [r7, #12]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fb94 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800de48:	4603      	mov	r3, r0
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	328c      	adds	r2, #140	; 0x8c
 800de4e:	6812      	ldr	r2, [r2, #0]
 800de50:	78f9      	ldrb	r1, [r7, #3]
 800de52:	4618      	mov	r0, r3
 800de54:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f013 fe72 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800de5c:	60f8      	str	r0, [r7, #12]
 800de5e:	e7e0      	b.n	800de22 <_ZN11MockSupport7tracingEb+0x20>
}
 800de60:	bf00      	nop
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3320      	adds	r3, #32
 800de74:	4618      	mov	r0, r3
 800de76:	f010 fbc1 	bl	801e5fc <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800de7a:	4603      	mov	r3, r0
 800de7c:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3338      	adds	r3, #56	; 0x38
 800de82:	4618      	mov	r0, r3
 800de84:	f013 ff53 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800de88:	60b8      	str	r0, [r7, #8]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d01f      	beq.n	800ded0 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fb6c 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	bf14      	ite	ne
 800de9e:	2301      	movne	r3, #1
 800dea0:	2300      	moveq	r3, #0
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d00e      	beq.n	800dec6 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fb60 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800deb0:	4603      	mov	r3, r0
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	3298      	adds	r2, #152	; 0x98
 800deb6:	6812      	ldr	r2, [r2, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	4790      	blx	r2
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4413      	add	r3, r2
 800dec4:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dec6:	68b8      	ldr	r0, [r7, #8]
 800dec8:	f013 fe3a 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800decc:	60b8      	str	r0, [r7, #8]
 800dece:	e7dc      	b.n	800de8a <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bf14      	ite	ne
 800ded6:	2301      	movne	r3, #1
 800ded8:	2300      	moveq	r3, #0
 800deda:	b2db      	uxtb	r3, r3
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	2b00      	cmp	r3, #0
 800def2:	d010      	beq.n	800df16 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	33bc      	adds	r3, #188	; 0xbc
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4610      	mov	r0, r2
 800df04:	4798      	blx	r3
 800df06:	4603      	mov	r3, r0
 800df08:	f083 0301 	eor.w	r3, r3, #1
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800df12:	2301      	movs	r3, #1
 800df14:	e000      	b.n	800df18 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800df16:	2300      	movs	r3, #0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800df1c:	2300      	movs	r3, #0
 800df1e:	e02a      	b.n	800df76 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	3338      	adds	r3, #56	; 0x38
 800df24:	4618      	mov	r0, r3
 800df26:	f013 ff02 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d020      	beq.n	800df74 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800df32:	68f9      	ldr	r1, [r7, #12]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fb1b 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00f      	beq.n	800df60 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800df40:	68f9      	ldr	r1, [r7, #12]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fb14 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800df48:	4603      	mov	r3, r0
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7ff ffca 	bl	800dee4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800df50:	4603      	mov	r3, r0
 800df52:	f083 0301 	eor.w	r3, r3, #1
 800df56:	b2db      	uxtb	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e000      	b.n	800df62 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800df60:	2300      	movs	r3, #0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800df66:	2300      	movs	r3, #0
 800df68:	e005      	b.n	800df76 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f013 fde8 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	e7db      	b.n	800df2c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800df74:	2301      	movs	r3, #1
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b092      	sub	sp, #72	; 0x48
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800df86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df8a:	4618      	mov	r0, r3
 800df8c:	f010 fa2c 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f103 0220 	add.w	r2, r3, #32
 800df96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df9a:	4611      	mov	r1, r2
 800df9c:	4618      	mov	r0, r3
 800df9e:	f010 fbf3 	bl	801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3338      	adds	r3, #56	; 0x38
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f013 fec1 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800dfac:	6478      	str	r0, [r7, #68]	; 0x44
 800dfae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d01d      	beq.n	800dff0 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800dfb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fada 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	bf14      	ite	ne
 800dfc2:	2301      	movne	r3, #1
 800dfc4:	2300      	moveq	r3, #0
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00c      	beq.n	800dfe6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800dfcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 face 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	f103 0220 	add.w	r2, r3, #32
 800dfda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dfde:	4611      	mov	r1, r2
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f010 fbd1 	bl	801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dfe6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dfe8:	f013 fdaa 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800dfec:	6478      	str	r0, [r7, #68]	; 0x44
 800dfee:	e7de      	b.n	800dfae <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	691a      	ldr	r2, [r3, #16]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	330c      	adds	r3, #12
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4610      	mov	r0, r2
 800e000:	4798      	blx	r3
 800e002:	4601      	mov	r1, r0
 800e004:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e008:	f107 0308 	add.w	r3, r7, #8
 800e00c:	4618      	mov	r0, r3
 800e00e:	f011 f9f5 	bl	801f3fc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	33c4      	adds	r3, #196	; 0xc4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f107 0208 	add.w	r2, r7, #8
 800e01e:	4611      	mov	r1, r2
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800e024:	f107 0308 	add.w	r3, r7, #8
 800e028:	4618      	mov	r0, r3
 800e02a:	f000 fe6d 	bl	800ed08 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800e02e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e032:	4618      	mov	r0, r3
 800e034:	f010 f9ec 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 800e038:	bf00      	nop
 800e03a:	3748      	adds	r7, #72	; 0x48
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b092      	sub	sp, #72	; 0x48
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800e048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e04c:	4618      	mov	r0, r3
 800e04e:	f010 f9cb 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f103 0220 	add.w	r2, r3, #32
 800e058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e05c:	4611      	mov	r1, r2
 800e05e:	4618      	mov	r0, r3
 800e060:	f010 fb92 	bl	801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3338      	adds	r3, #56	; 0x38
 800e068:	4618      	mov	r0, r3
 800e06a:	f013 fe60 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800e06e:	6478      	str	r0, [r7, #68]	; 0x44
 800e070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e072:	2b00      	cmp	r3, #0
 800e074:	d01d      	beq.n	800e0b2 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800e076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fa79 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	bf14      	ite	ne
 800e084:	2301      	movne	r3, #1
 800e086:	2300      	moveq	r3, #0
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00c      	beq.n	800e0a8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800e08e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fa6d 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e096:	4603      	mov	r3, r0
 800e098:	f103 0220 	add.w	r2, r3, #32
 800e09c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f010 fb70 	bl	801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800e0a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e0aa:	f013 fd49 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800e0ae:	6478      	str	r0, [r7, #68]	; 0x44
 800e0b0:	e7de      	b.n	800e070 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	691a      	ldr	r2, [r3, #16]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	330c      	adds	r3, #12
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	4798      	blx	r3
 800e0c4:	4601      	mov	r1, r0
 800e0c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e0ca:	f107 0308 	add.w	r3, r7, #8
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f011 fa38 	bl	801f544 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	33c4      	adds	r3, #196	; 0xc4
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f107 0208 	add.w	r2, r7, #8
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800e0e6:	f107 0308 	add.w	r3, r7, #8
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fe2e 	bl	800ed4c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800e0f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f010 f98b 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 800e0fa:	bf00      	nop
 800e0fc:	3748      	adds	r7, #72	; 0x48
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	6039      	str	r1, [r7, #0]
    clear();
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	339c      	adds	r3, #156	; 0x9c
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	691a      	ldr	r2, [r3, #16]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3308      	adds	r3, #8
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	6839      	ldr	r1, [r7, #0]
 800e128:	4610      	mov	r0, r2
 800e12a:	4798      	blx	r3
}
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800e13c:	f008 fd0a 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800e140:	4603      	mov	r3, r0
 800e142:	4618      	mov	r0, r3
 800e144:	f007 fb78 	bl	8015838 <_ZN10UtestShell10countCheckEv>
}
 800e148:	bf00      	nop
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d008      	beq.n	800e172 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	33c4      	adds	r3, #196	; 0xc4
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4610      	mov	r0, r2
 800e170:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3338      	adds	r3, #56	; 0x38
 800e176:	4618      	mov	r0, r3
 800e178:	f013 fdd9 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d023      	beq.n	800e1cc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800e184:	68f9      	ldr	r1, [r7, #12]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 f9f2 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d009      	beq.n	800e1a6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800e192:	68f9      	ldr	r1, [r7, #12]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f9eb 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e19a:	4603      	mov	r3, r0
 800e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e000      	b.n	800e1a8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800e1ac:	68f9      	ldr	r1, [r7, #12]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f9de 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	32c4      	adds	r2, #196	; 0xc4
 800e1bc:	6812      	ldr	r2, [r2, #0]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f013 fcbc 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	e7d8      	b.n	800e17e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800e1cc:	bf00      	nop
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	3320      	adds	r3, #32
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f010 f947 	bl	801e474 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e027      	b.n	800e240 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3338      	adds	r3, #56	; 0x38
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f013 fd9a 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d01d      	beq.n	800e23e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800e202:	68f9      	ldr	r1, [r7, #12]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f000 f9b3 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e20a:	4603      	mov	r3, r0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00c      	beq.n	800e22a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800e210:	68f9      	ldr	r1, [r7, #12]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f9ac 	bl	800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800e218:	4603      	mov	r3, r0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff ffda 	bl	800e1d4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800e226:	2301      	movs	r3, #1
 800e228:	e000      	b.n	800e22c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800e22a:	2300      	movs	r3, #0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800e230:	2301      	movs	r3, #1
 800e232:	e005      	b.n	800e240 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f013 fc83 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	e7de      	b.n	800e1fc <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7ff ff7d 	bl	800e150 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f7ff fe44 	bl	800dee4 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d00a      	beq.n	800e278 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3398      	adds	r3, #152	; 0x98
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	4798      	blx	r3
 800e26e:	4603      	mov	r3, r0
 800e270:	2b00      	cmp	r3, #0
 800e272:	d001      	beq.n	800e278 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800e274:	2301      	movs	r3, #1
 800e276:	e000      	b.n	800e27a <_ZN11MockSupport17checkExpectationsEv+0x32>
 800e278:	2300      	movs	r3, #0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff fe7d 	bl	800df7e <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff ffa5 	bl	800e1d4 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff fed5 	bl	800e040 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800e296:	bf00      	nop
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3338      	adds	r3, #56	; 0x38
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f013 fd0e 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	bf14      	ite	ne
 800e2ba:	2301      	movne	r3, #1
 800e2bc:	2300      	moveq	r3, #0
 800e2be:	b2db      	uxtb	r3, r3
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	3338      	adds	r3, #56	; 0x38
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f013 fcf9 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800e2de:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d111      	bne.n	800e30a <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800e2e6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e2ea:	490a      	ldr	r1, [pc, #40]	; (800e314 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800e2ec:	2038      	movs	r0, #56	; 0x38
 800e2ee:	f7fe fc8b 	bl	800cc08 <_ZnwjPKci>
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f011 fd6e 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800e2fc:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	3338      	adds	r3, #56	; 0x38
 800e302:	68f9      	ldr	r1, [r7, #12]
 800e304:	4618      	mov	r0, r3
 800e306:	f013 fcad 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800e30a:	68fb      	ldr	r3, [r7, #12]
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3714      	adds	r7, #20
 800e310:	46bd      	mov	sp, r7
 800e312:	bd90      	pop	{r4, r7, pc}
 800e314:	08027400 	.word	0x08027400

0800e318 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
 800e324:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7ff ffcd 	bl	800e2c8 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800e32e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3344      	adds	r3, #68	; 0x44
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	6978      	ldr	r0, [r7, #20]
 800e33e:	4798      	blx	r3
}
 800e340:	bf00      	nop
 800e342:	3718      	adds	r7, #24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b088      	sub	sp, #32
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	3338      	adds	r3, #56	; 0x38
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f013 fcb8 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800e360:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d111      	bne.n	800e38c <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800e368:	f107 0314 	add.w	r3, r7, #20
 800e36c:	490b      	ldr	r1, [pc, #44]	; (800e39c <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800e36e:	4618      	mov	r0, r3
 800e370:	f001 f80d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800e374:	f107 0314 	add.w	r3, r7, #20
 800e378:	4619      	mov	r1, r3
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f011 fd2c 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800e380:	f107 0314 	add.w	r3, r7, #20
 800e384:	4618      	mov	r0, r3
 800e386:	f001 fbba 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e38a:	e003      	b.n	800e394 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800e38c:	69f9      	ldr	r1, [r7, #28]
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7ff f8a2 	bl	800d4d8 <_ZN14MockNamedValueC1ERKS_>
}
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	3720      	adds	r7, #32
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	080273f8 	.word	0x080273f8

0800e3a0 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800e3aa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e3ae:	4927      	ldr	r1, [pc, #156]	; (800e44c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800e3b0:	2048      	movs	r0, #72	; 0x48
 800e3b2:	f7fe fc29 	bl	800cc08 <_ZnwjPKci>
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7ff f8f8 	bl	800d5b0 <_ZN11MockSupportC1ERK12SimpleString>
 800e3c0:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	33a4      	adds	r3, #164	; 0xa4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	6952      	ldr	r2, [r2, #20]
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d005      	beq.n	800e3ea <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3390      	adds	r3, #144	; 0x90
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e3f0:	f083 0301 	eor.w	r3, r3, #1
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d005      	beq.n	800e406 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3384      	adds	r3, #132	; 0x84
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	7b1b      	ldrb	r3, [r3, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d005      	beq.n	800e41a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3308      	adds	r3, #8
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	4798      	blx	r3

    newMock->tracing(tracing_);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	338c      	adds	r3, #140	; 0x8c
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800e428:	4611      	mov	r1, r2
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	33b8      	adds	r3, #184	; 0xb8
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	3230      	adds	r2, #48	; 0x30
 800e43a:	4611      	mov	r1, r2
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	4798      	blx	r3
    return newMock;
 800e440:	68fb      	ldr	r3, [r7, #12]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3714      	adds	r7, #20
 800e446:	46bd      	mov	sp, r7
 800e448:	bd90      	pop	{r4, r7, pc}
 800e44a:	bf00      	nop
 800e44c:	08027400 	.word	0x08027400

0800e450 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800e450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e452:	b0ab      	sub	sp, #172	; 0xac
 800e454:	af04      	add	r7, sp, #16
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800e45a:	f107 0308 	add.w	r3, r7, #8
 800e45e:	4941      	ldr	r1, [pc, #260]	; (800e564 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800e460:	4618      	mov	r0, r3
 800e462:	f000 ff94 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800e466:	f107 0308 	add.w	r3, r7, #8
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f001 fbc3 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800e472:	f107 0308 	add.w	r3, r7, #8
 800e476:	4619      	mov	r1, r3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff ff10 	bl	800e29e <_ZN11MockSupport7hasDataERK12SimpleString>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d048      	beq.n	800e516 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800e484:	f008 fb66 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800e488:	4604      	mov	r4, r0
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	3324      	adds	r3, #36	; 0x24
 800e48e:	681d      	ldr	r5, [r3, #0]
 800e490:	f107 0318 	add.w	r3, r7, #24
 800e494:	f107 0208 	add.w	r2, r7, #8
 800e498:	6879      	ldr	r1, [r7, #4]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ff54 	bl	800e348 <_ZN11MockSupport7getDataERK12SimpleString>
 800e4a0:	f107 0310 	add.w	r3, r7, #16
 800e4a4:	f107 0218 	add.w	r2, r7, #24
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f011 ff63 	bl	8020376 <_ZNK14MockNamedValue7getTypeEv>
 800e4b0:	f107 0310 	add.w	r3, r7, #16
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f001 faf5 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800e4ba:	4606      	mov	r6, r0
 800e4bc:	f008 fb5a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	9302      	str	r3, [sp, #8]
 800e4c4:	f240 13bd 	movw	r3, #445	; 0x1bd
 800e4c8:	9301      	str	r3, [sp, #4]
 800e4ca:	4b27      	ldr	r3, [pc, #156]	; (800e568 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4632      	mov	r2, r6
 800e4d2:	4926      	ldr	r1, [pc, #152]	; (800e56c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	47a8      	blx	r5
 800e4d8:	f107 0310 	add.w	r3, r7, #16
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f001 fb0e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e4e2:	f107 0318 	add.w	r3, r7, #24
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f011 fca0 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800e4ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e4f0:	f107 0208 	add.w	r2, r7, #8
 800e4f4:	6879      	ldr	r1, [r7, #4]
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7ff ff26 	bl	800e348 <_ZN11MockSupport7getDataERK12SimpleString>
 800e4fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e500:	4618      	mov	r0, r3
 800e502:	f012 fa51 	bl	80209a8 <_ZNK14MockNamedValue16getObjectPointerEv>
 800e506:	4604      	mov	r4, r0
 800e508:	bf00      	nop
 800e50a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e50e:	4618      	mov	r0, r3
 800e510:	f011 fc8c 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e514:	e01b      	b.n	800e54e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff ff41 	bl	800e3a0 <_ZN11MockSupport5cloneERK12SimpleString>
 800e51e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800e522:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e526:	4911      	ldr	r1, [pc, #68]	; (800e56c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800e528:	4618      	mov	r0, r3
 800e52a:	f000 ff30 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800e52e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800e532:	f107 0108 	add.w	r1, r7, #8
 800e536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff feec 	bl	800e318 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800e540:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e544:	4618      	mov	r0, r3
 800e546:	f001 fada 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return newMock;
 800e54a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800e54e:	f107 0308 	add.w	r3, r7, #8
 800e552:	4618      	mov	r0, r3
 800e554:	f001 fad3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e558:	4623      	mov	r3, r4
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	379c      	adds	r7, #156	; 0x9c
 800e55e:	46bd      	mov	sp, r7
 800e560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e562:	bf00      	nop
 800e564:	08027418 	.word	0x08027418
 800e568:	08027400 	.word	0x08027400
 800e56c:	08027438 	.word	0x08027438

0800e570 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800e570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e574:	b08b      	sub	sp, #44	; 0x2c
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800e57c:	2500      	movs	r5, #0
 800e57e:	2600      	movs	r6, #0
 800e580:	f107 0308 	add.w	r3, r7, #8
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	4618      	mov	r0, r3
 800e588:	f013 fb28 	bl	8021bdc <_ZNK22MockNamedValueListNode7getTypeEv>
 800e58c:	f04f 0801 	mov.w	r8, #1
 800e590:	f107 0310 	add.w	r3, r7, #16
 800e594:	492e      	ldr	r1, [pc, #184]	; (800e650 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800e596:	4618      	mov	r0, r3
 800e598:	f000 fef9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800e59c:	f04f 0901 	mov.w	r9, #1
 800e5a0:	f107 0210 	add.w	r2, r7, #16
 800e5a4:	f107 0308 	add.w	r3, r7, #8
 800e5a8:	4611      	mov	r1, r2
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f001 fab3 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d01a      	beq.n	800e5ec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800e5b6:	f107 0318 	add.w	r3, r7, #24
 800e5ba:	6839      	ldr	r1, [r7, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f013 fafa 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 800e5c2:	2501      	movs	r5, #1
 800e5c4:	f107 0320 	add.w	r3, r7, #32
 800e5c8:	4922      	ldr	r1, [pc, #136]	; (800e654 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 fedf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800e5d0:	2601      	movs	r6, #1
 800e5d2:	f107 0220 	add.w	r2, r7, #32
 800e5d6:	f107 0318 	add.w	r3, r7, #24
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 ff54 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800e5e8:	2401      	movs	r4, #1
 800e5ea:	e000      	b.n	800e5ee <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800e5ec:	2400      	movs	r4, #0
 800e5ee:	2e00      	cmp	r6, #0
 800e5f0:	d004      	beq.n	800e5fc <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800e5f2:	f107 0320 	add.w	r3, r7, #32
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f001 fa81 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e5fc:	2d00      	cmp	r5, #0
 800e5fe:	d004      	beq.n	800e60a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800e600:	f107 0318 	add.w	r3, r7, #24
 800e604:	4618      	mov	r0, r3
 800e606:	f001 fa7a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e60a:	f1b9 0f00 	cmp.w	r9, #0
 800e60e:	d004      	beq.n	800e61a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800e610:	f107 0310 	add.w	r3, r7, #16
 800e614:	4618      	mov	r0, r3
 800e616:	f001 fa72 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e61a:	f1b8 0f00 	cmp.w	r8, #0
 800e61e:	d004      	beq.n	800e62a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800e620:	f107 0308 	add.w	r3, r7, #8
 800e624:	4618      	mov	r0, r3
 800e626:	f001 fa6a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800e62a:	2c00      	cmp	r4, #0
 800e62c:	d00a      	beq.n	800e644 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800e62e:	6838      	ldr	r0, [r7, #0]
 800e630:	f013 fa92 	bl	8021b58 <_ZN22MockNamedValueListNode4itemEv>
 800e634:	4603      	mov	r3, r0
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	32a0      	adds	r2, #160	; 0xa0
 800e63a:	6812      	ldr	r2, [r2, #0]
 800e63c:	4618      	mov	r0, r3
 800e63e:	4790      	blx	r2
 800e640:	4603      	mov	r3, r0
 800e642:	e000      	b.n	800e646 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	372c      	adds	r7, #44	; 0x2c
 800e64a:	46bd      	mov	sp, r7
 800e64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e650:	08027438 	.word	0x08027438
 800e654:	08027418 	.word	0x08027418

0800e658 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00a      	beq.n	800e680 <_ZN11MockSupport11returnValueEv+0x28>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3354      	adds	r3, #84	; 0x54
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	4610      	mov	r0, r2
 800e67c:	4798      	blx	r3
 800e67e:	e010      	b.n	800e6a2 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800e680:	f107 0308 	add.w	r3, r7, #8
 800e684:	4909      	ldr	r1, [pc, #36]	; (800e6ac <_ZN11MockSupport11returnValueEv+0x54>)
 800e686:	4618      	mov	r0, r3
 800e688:	f000 fe81 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800e68c:	f107 0308 	add.w	r3, r7, #8
 800e690:	4619      	mov	r1, r3
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f011 fba0 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 800e698:	f107 0308 	add.w	r3, r7, #8
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 fa2e 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	080273f8 	.word	0x080273f8

0800e6b0 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800e6b0:	b590      	push	{r4, r7, lr}
 800e6b2:	b091      	sub	sp, #68	; 0x44
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3320      	adds	r3, #32
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f107 0208 	add.w	r2, r7, #8
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	4798      	blx	r3
 800e6ca:	f107 0308 	add.w	r3, r7, #8
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f011 fe60 	bl	8020394 <_ZNK14MockNamedValue12getBoolValueEv>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	461c      	mov	r4, r3
 800e6d8:	bf00      	nop
 800e6da:	f107 0308 	add.w	r3, r7, #8
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f011 fba4 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e6e4:	4623      	mov	r3, r4
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3744      	adds	r7, #68	; 0x44
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd90      	pop	{r4, r7, pc}

0800e6ee <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800e6ee:	b590      	push	{r4, r7, lr}
 800e6f0:	b091      	sub	sp, #68	; 0x44
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3320      	adds	r3, #32
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f107 0208 	add.w	r2, r7, #8
 800e702:	6879      	ldr	r1, [r7, #4]
 800e704:	4610      	mov	r0, r2
 800e706:	4798      	blx	r3
 800e708:	f107 0308 	add.w	r3, r7, #8
 800e70c:	4618      	mov	r0, r3
 800e70e:	f011 fe69 	bl	80203e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800e712:	4604      	mov	r4, r0
 800e714:	bf00      	nop
 800e716:	f107 0308 	add.w	r3, r7, #8
 800e71a:	4618      	mov	r0, r3
 800e71c:	f011 fb86 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e720:	4623      	mov	r3, r4
}
 800e722:	4618      	mov	r0, r3
 800e724:	3744      	adds	r7, #68	; 0x44
 800e726:	46bd      	mov	sp, r7
 800e728:	bd90      	pop	{r4, r7, pc}

0800e72a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800e72a:	b590      	push	{r4, r7, lr}
 800e72c:	b091      	sub	sp, #68	; 0x44
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	3320      	adds	r3, #32
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f107 0208 	add.w	r2, r7, #8
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	4610      	mov	r0, r2
 800e742:	4798      	blx	r3
 800e744:	f107 0308 	add.w	r3, r7, #8
 800e748:	4618      	mov	r0, r3
 800e74a:	f011 fe9b 	bl	8020484 <_ZNK14MockNamedValue11getIntValueEv>
 800e74e:	4604      	mov	r4, r0
 800e750:	bf00      	nop
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	4618      	mov	r0, r3
 800e758:	f011 fb68 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e75c:	4623      	mov	r3, r4
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3744      	adds	r7, #68	; 0x44
 800e762:	46bd      	mov	sp, r7
 800e764:	bd90      	pop	{r4, r7, pc}

0800e766 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b082      	sub	sp, #8
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
 800e76e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	331c      	adds	r3, #28
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	4798      	blx	r3
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d007      	beq.n	800e792 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	335c      	adds	r3, #92	; 0x5c
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	4798      	blx	r3
 800e78e:	4603      	mov	r3, r0
 800e790:	e000      	b.n	800e794 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800e792:	683b      	ldr	r3, [r7, #0]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	331c      	adds	r3, #28
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	4798      	blx	r3
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00a      	beq.n	800e7d0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3368      	adds	r3, #104	; 0x68
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	4798      	blx	r3
 800e7c6:	eeb0 7a40 	vmov.f32	s14, s0
 800e7ca:	eef0 7a60 	vmov.f32	s15, s1
 800e7ce:	e001      	b.n	800e7d4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800e7d0:	ed97 7b00 	vldr	d7, [r7]
}
 800e7d4:	eeb0 0a47 	vmov.f32	s0, s14
 800e7d8:	eef0 0a67 	vmov.f32	s1, s15
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b082      	sub	sp, #8
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	331c      	adds	r3, #28
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	4798      	blx	r3
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3338      	adds	r3, #56	; 0x38
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	4798      	blx	r3
 800e80a:	4603      	mov	r3, r0
 800e80c:	e000      	b.n	800e810 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800e80e:	683b      	ldr	r3, [r7, #0]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	331c      	adds	r3, #28
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	4798      	blx	r3
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3324      	adds	r3, #36	; 0x24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	4798      	blx	r3
 800e842:	4603      	mov	r3, r0
 800e844:	e000      	b.n	800e848 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800e846:	78fb      	ldrb	r3, [r7, #3]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	331c      	adds	r3, #28
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	4798      	blx	r3
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d007      	beq.n	800e87c <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	332c      	adds	r3, #44	; 0x2c
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	4798      	blx	r3
 800e878:	4603      	mov	r3, r0
 800e87a:	e000      	b.n	800e87e <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800e87c:	683b      	ldr	r3, [r7, #0]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b082      	sub	sp, #8
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	331c      	adds	r3, #28
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	4798      	blx	r3
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d007      	beq.n	800e8b2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3334      	adds	r3, #52	; 0x34
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	4798      	blx	r3
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	e000      	b.n	800e8b4 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800e8b2:	683b      	ldr	r3, [r7, #0]
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	331c      	adds	r3, #28
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	4798      	blx	r3
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3340      	adds	r3, #64	; 0x40
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	4798      	blx	r3
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	e000      	b.n	800e8ea <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800e8e8:	683b      	ldr	r3, [r7, #0]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800e8f2:	b590      	push	{r4, r7, lr}
 800e8f4:	b091      	sub	sp, #68	; 0x44
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3320      	adds	r3, #32
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f107 0208 	add.w	r2, r7, #8
 800e906:	6879      	ldr	r1, [r7, #4]
 800e908:	4610      	mov	r0, r2
 800e90a:	4798      	blx	r3
 800e90c:	f107 0308 	add.w	r3, r7, #8
 800e910:	4618      	mov	r0, r3
 800e912:	f011 fddf 	bl	80204d4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800e916:	4604      	mov	r4, r0
 800e918:	bf00      	nop
 800e91a:	f107 0308 	add.w	r3, r7, #8
 800e91e:	4618      	mov	r0, r3
 800e920:	f011 fa84 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e924:	4623      	mov	r3, r4
}
 800e926:	4618      	mov	r0, r3
 800e928:	3744      	adds	r7, #68	; 0x44
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd90      	pop	{r4, r7, pc}

0800e92e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800e92e:	b590      	push	{r4, r7, lr}
 800e930:	b091      	sub	sp, #68	; 0x44
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3320      	adds	r3, #32
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f107 0208 	add.w	r2, r7, #8
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
 800e948:	f107 0308 	add.w	r3, r7, #8
 800e94c:	4618      	mov	r0, r3
 800e94e:	f011 fe23 	bl	8020598 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800e952:	4604      	mov	r4, r0
 800e954:	bf00      	nop
 800e956:	f107 0308 	add.w	r3, r7, #8
 800e95a:	4618      	mov	r0, r3
 800e95c:	f011 fa66 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800e960:	4623      	mov	r3, r4
}
 800e962:	4618      	mov	r0, r3
 800e964:	3744      	adds	r7, #68	; 0x44
 800e966:	46bd      	mov	sp, r7
 800e968:	bd90      	pop	{r4, r7, pc}
	...

0800e96c <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800e96c:	b5b0      	push	{r4, r5, r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af02      	add	r7, sp, #8
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800e976:	f008 f8ed 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800e97a:	4604      	mov	r4, r0
 800e97c:	6823      	ldr	r3, [r4, #0]
 800e97e:	3368      	adds	r3, #104	; 0x68
 800e980:	681d      	ldr	r5, [r3, #0]
 800e982:	f008 f8f7 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e986:	4603      	mov	r3, r0
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	f240 2345 	movw	r3, #581	; 0x245
 800e98e:	4a06      	ldr	r2, [pc, #24]	; (800e9a8 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800e990:	4906      	ldr	r1, [pc, #24]	; (800e9ac <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800e992:	4620      	mov	r0, r4
 800e994:	47a8      	blx	r5
    return cpputest_longlong(0);
 800e996:	2100      	movs	r1, #0
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7fe fd2f 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
}
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	08027400 	.word	0x08027400
 800e9ac:	08027444 	.word	0x08027444

0800e9b0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800e9b0:	b5b0      	push	{r4, r5, r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800e9ba:	f008 f8cb 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800e9be:	4604      	mov	r4, r0
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	3368      	adds	r3, #104	; 0x68
 800e9c4:	681d      	ldr	r5, [r3, #0]
 800e9c6:	f008 f8d5 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	f240 234b 	movw	r3, #587	; 0x24b
 800e9d2:	4a06      	ldr	r2, [pc, #24]	; (800e9ec <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800e9d4:	4906      	ldr	r1, [pc, #24]	; (800e9f0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800e9da:	2100      	movs	r1, #0
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7fe fd19 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
}
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08027400 	.word	0x08027400
 800e9f0:	08027464 	.word	0x08027464

0800e9f4 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800e9f4:	b5b0      	push	{r4, r5, r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af02      	add	r7, sp, #8
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	4639      	mov	r1, r7
 800ea00:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800ea04:	f008 f8a6 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800ea08:	4604      	mov	r4, r0
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	3368      	adds	r3, #104	; 0x68
 800ea0e:	681d      	ldr	r5, [r3, #0]
 800ea10:	f008 f8b0 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ea14:	4603      	mov	r3, r0
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	f240 2351 	movw	r3, #593	; 0x251
 800ea1c:	4a06      	ldr	r2, [pc, #24]	; (800ea38 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800ea1e:	4907      	ldr	r1, [pc, #28]	; (800ea3c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800ea20:	4620      	mov	r0, r4
 800ea22:	47a8      	blx	r5
    return defaultValue;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	461a      	mov	r2, r3
 800ea28:	463b      	mov	r3, r7
 800ea2a:	cb03      	ldmia	r3!, {r0, r1}
 800ea2c:	6010      	str	r0, [r2, #0]
 800ea2e:	6051      	str	r1, [r2, #4]
}
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bdb0      	pop	{r4, r5, r7, pc}
 800ea38:	08027400 	.word	0x08027400
 800ea3c:	08027444 	.word	0x08027444

0800ea40 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800ea40:	b5b0      	push	{r4, r5, r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800ea50:	f008 f880 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 800ea54:	4604      	mov	r4, r0
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	3368      	adds	r3, #104	; 0x68
 800ea5a:	681d      	ldr	r5, [r3, #0]
 800ea5c:	f008 f88a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ea60:	4603      	mov	r3, r0
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	f240 2357 	movw	r3, #599	; 0x257
 800ea68:	4a06      	ldr	r2, [pc, #24]	; (800ea84 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800ea6a:	4907      	ldr	r1, [pc, #28]	; (800ea88 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	47a8      	blx	r5
    return defaultValue;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	461a      	mov	r2, r3
 800ea74:	463b      	mov	r3, r7
 800ea76:	cb03      	ldmia	r3!, {r0, r1}
 800ea78:	6010      	str	r0, [r2, #0]
 800ea7a:	6051      	str	r1, [r2, #4]
}
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bdb0      	pop	{r4, r5, r7, pc}
 800ea84:	08027400 	.word	0x08027400
 800ea88:	08027464 	.word	0x08027464

0800ea8c <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800ea8c:	b590      	push	{r4, r7, lr}
 800ea8e:	b091      	sub	sp, #68	; 0x44
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3320      	adds	r3, #32
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f107 0208 	add.w	r2, r7, #8
 800eaa0:	6879      	ldr	r1, [r7, #4]
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4798      	blx	r3
 800eaa6:	f107 0308 	add.w	r3, r7, #8
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f011 fea8 	bl	8020800 <_ZNK14MockNamedValue14getStringValueEv>
 800eab0:	4604      	mov	r4, r0
 800eab2:	bf00      	nop
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f011 f9b7 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800eabe:	4623      	mov	r3, r4
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3744      	adds	r7, #68	; 0x44
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}

0800eac8 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	ed2d 8b02 	vpush	{d8}
 800eace:	b090      	sub	sp, #64	; 0x40
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3320      	adds	r3, #32
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f107 0208 	add.w	r2, r7, #8
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	4610      	mov	r0, r2
 800eae4:	4798      	blx	r3
 800eae6:	f107 0308 	add.w	r3, r7, #8
 800eaea:	4618      	mov	r0, r3
 800eaec:	f011 fe2c 	bl	8020748 <_ZNK14MockNamedValue14getDoubleValueEv>
 800eaf0:	eeb0 8a40 	vmov.f32	s16, s0
 800eaf4:	eef0 8a60 	vmov.f32	s17, s1
 800eaf8:	bf00      	nop
 800eafa:	f107 0308 	add.w	r3, r7, #8
 800eafe:	4618      	mov	r0, r3
 800eb00:	f011 f994 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800eb04:	eeb0 7a48 	vmov.f32	s14, s16
 800eb08:	eef0 7a68 	vmov.f32	s15, s17
}
 800eb0c:	eeb0 0a47 	vmov.f32	s0, s14
 800eb10:	eef0 0a67 	vmov.f32	s1, s15
 800eb14:	3740      	adds	r7, #64	; 0x40
 800eb16:	46bd      	mov	sp, r7
 800eb18:	ecbd 8b02 	vpop	{d8}
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
 800eb26:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	331c      	adds	r3, #28
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	4798      	blx	r3
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	336c      	adds	r3, #108	; 0x6c
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	4798      	blx	r3
 800eb46:	4603      	mov	r3, r0
 800eb48:	e000      	b.n	800eb4c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800eb4a:	683b      	ldr	r3, [r7, #0]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	331c      	adds	r3, #28
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	4798      	blx	r3
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d007      	beq.n	800eb80 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3378      	adds	r3, #120	; 0x78
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	4798      	blx	r3
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	e000      	b.n	800eb82 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800eb80:	683b      	ldr	r3, [r7, #0]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b082      	sub	sp, #8
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	331c      	adds	r3, #28
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	4798      	blx	r3
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d007      	beq.n	800ebb6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	3380      	adds	r3, #128	; 0x80
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	4798      	blx	r3
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	e000      	b.n	800ebb8 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800ebb6:	683b      	ldr	r3, [r7, #0]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800ebc0:	b590      	push	{r4, r7, lr}
 800ebc2:	b091      	sub	sp, #68	; 0x44
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3320      	adds	r3, #32
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f107 0208 	add.w	r2, r7, #8
 800ebd4:	6879      	ldr	r1, [r7, #4]
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	4798      	blx	r3
 800ebda:	f107 0308 	add.w	r3, r7, #8
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f011 fe36 	bl	8020850 <_ZNK14MockNamedValue15getPointerValueEv>
 800ebe4:	4604      	mov	r4, r0
 800ebe6:	bf00      	nop
 800ebe8:	f107 0308 	add.w	r3, r7, #8
 800ebec:	4618      	mov	r0, r3
 800ebee:	f011 f91d 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800ebf2:	4623      	mov	r3, r4
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3744      	adds	r7, #68	; 0x44
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd90      	pop	{r4, r7, pc}

0800ebfc <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800ebfc:	b590      	push	{r4, r7, lr}
 800ebfe:	b091      	sub	sp, #68	; 0x44
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3320      	adds	r3, #32
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f107 0208 	add.w	r2, r7, #8
 800ec10:	6879      	ldr	r1, [r7, #4]
 800ec12:	4610      	mov	r0, r2
 800ec14:	4798      	blx	r3
 800ec16:	f107 0308 	add.w	r3, r7, #8
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f011 fe40 	bl	80208a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800ec20:	4604      	mov	r4, r0
 800ec22:	bf00      	nop
 800ec24:	f107 0308 	add.w	r3, r7, #8
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f011 f8ff 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800ec2e:	4623      	mov	r3, r4
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3744      	adds	r7, #68	; 0x44
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd90      	pop	{r4, r7, pc}

0800ec38 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800ec38:	b590      	push	{r4, r7, lr}
 800ec3a:	b091      	sub	sp, #68	; 0x44
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3320      	adds	r3, #32
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f107 0208 	add.w	r2, r7, #8
 800ec4c:	6879      	ldr	r1, [r7, #4]
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4798      	blx	r3
 800ec52:	f107 0308 	add.w	r3, r7, #8
 800ec56:	4618      	mov	r0, r3
 800ec58:	f011 fe4a 	bl	80208f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	bf00      	nop
 800ec60:	f107 0308 	add.w	r3, r7, #8
 800ec64:	4618      	mov	r0, r3
 800ec66:	f011 f8e1 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 800ec6a:	4623      	mov	r3, r4
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3744      	adds	r7, #68	; 0x44
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd90      	pop	{r4, r7, pc}

0800ec74 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00a      	beq.n	800ec9a <_ZN11MockSupport14hasReturnValueEv+0x26>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	3350      	adds	r3, #80	; 0x50
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	4610      	mov	r0, r2
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	e000      	b.n	800ec9c <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <_Z41__static_initialization_and_destruction_0ii>:
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d115      	bne.n	800ece0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d110      	bne.n	800ece0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800ecbe:	f107 0308 	add.w	r3, r7, #8
 800ecc2:	490f      	ldr	r1, [pc, #60]	; (800ed00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 fb62 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800ecca:	f107 0308 	add.w	r3, r7, #8
 800ecce:	4619      	mov	r1, r3
 800ecd0:	480c      	ldr	r0, [pc, #48]	; (800ed04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ecd2:	f7fe fc6d 	bl	800d5b0 <_ZN11MockSupportC1ERK12SimpleString>
 800ecd6:	f107 0308 	add.w	r3, r7, #8
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 ff0f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d107      	bne.n	800ecf6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d102      	bne.n	800ecf6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800ecf0:	4804      	ldr	r0, [pc, #16]	; (800ed04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ecf2:	f7fe fca7 	bl	800d644 <_ZN11MockSupportD1Ev>
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	080273f8 	.word	0x080273f8
 800ed04:	200009f0 	.word	0x200009f0

0800ed08 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	4a05      	ldr	r2, [pc, #20]	; (800ed28 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fe fbbb 	bl	800d494 <_ZN11MockFailureD1Ev>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	0802b860 	.word	0x0802b860

0800ed2c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7ff ffe7 	bl	800ed08 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800ed3a:	2134      	movs	r1, #52	; 0x34
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7fd ff77 	bl	800cc30 <_ZdlPvj>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4618      	mov	r0, r3
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	4a05      	ldr	r2, [pc, #20]	; (800ed6c <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fb99 	bl	800d494 <_ZN11MockFailureD1Ev>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4618      	mov	r0, r3
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	0802b834 	.word	0x0802b834

0800ed70 <_ZN20MockCallOrderFailureD0Ev>:
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7ff ffe7 	bl	800ed4c <_ZN20MockCallOrderFailureD1Ev>
 800ed7e:	2134      	movs	r1, #52	; 0x34
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7fd ff55 	bl	800cc30 <_ZdlPvj>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800ed90:	b580      	push	{r7, lr}
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f7ff ff83 	bl	800eca4 <_Z41__static_initialization_and_destruction_0ii>
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eda8:	2000      	movs	r0, #0
 800edaa:	f7ff ff7b 	bl	800eca4 <_Z41__static_initialization_and_destruction_0ii>
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800edb8:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <_ZN11SimpleMutexC1Ev+0x20>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4798      	blx	r3
 800edbe:	4602      	mov	r2, r0
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	601a      	str	r2, [r3, #0]
}
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4618      	mov	r0, r3
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	200000f0 	.word	0x200000f0

0800edd4 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800eddc:	4b05      	ldr	r3, [pc, #20]	; (800edf4 <_ZN11SimpleMutexD1Ev+0x20>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	6812      	ldr	r2, [r2, #0]
 800ede4:	4610      	mov	r0, r2
 800ede6:	4798      	blx	r3
}
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	200000fc 	.word	0x200000fc

0800edf8 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800ee00:	4b04      	ldr	r3, [pc, #16]	; (800ee14 <_ZN11SimpleMutex4LockEv+0x1c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	6812      	ldr	r2, [r2, #0]
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4798      	blx	r3
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	200000f4 	.word	0x200000f4

0800ee18 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800ee20:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	6812      	ldr	r2, [r2, #0]
 800ee28:	4610      	mov	r0, r2
 800ee2a:	4798      	blx	r3
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	200000f8 	.word	0x200000f8

0800ee38 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff ffd3 	bl	800edf8 <_ZN11SimpleMutex4LockEv>
}
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7ff ffd5 	bl	800ee18 <_ZN11SimpleMutex6UnlockEv>
}
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4618      	mov	r0, r3
 800ee72:	3708      	adds	r7, #8
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800ee7c:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d103      	bne.n	800ee8c <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800ee84:	f003 fd7a 	bl	801297c <_Z24defaultNewArrayAllocatorv>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	e001      	b.n	800ee90 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800ee8c:	4b01      	ldr	r3, [pc, #4]	; (800ee94 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	20000a38 	.word	0x20000a38

0800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800ee98:	b590      	push	{r4, r7, lr}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800eea4:	f7ff ffe8 	bl	800ee78 <_ZN12SimpleString18getStringAllocatorEv>
 800eea8:	6803      	ldr	r3, [r0, #0]
 800eeaa:	3308      	adds	r3, #8
 800eeac:	681c      	ldr	r4, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	68f9      	ldr	r1, [r7, #12]
 800eeb4:	47a0      	blx	r4
 800eeb6:	4603      	mov	r3, r0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd90      	pop	{r4, r7, pc}

0800eec0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800eec0:	b590      	push	{r4, r7, lr}
 800eec2:	b087      	sub	sp, #28
 800eec4:	af02      	add	r7, sp, #8
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800eece:	f7ff ffd3 	bl	800ee78 <_ZN12SimpleString18getStringAllocatorEv>
 800eed2:	6803      	ldr	r3, [r0, #0]
 800eed4:	330c      	adds	r3, #12
 800eed6:	681c      	ldr	r4, [r3, #0]
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	68f9      	ldr	r1, [r7, #12]
 800eee2:	47a0      	blx	r4
}
 800eee4:	bf00      	nop
 800eee6:	3714      	adds	r7, #20
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd90      	pop	{r4, r7, pc}

0800eeec <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800eef4:	2284      	movs	r2, #132	; 0x84
 800eef6:	4906      	ldr	r1, [pc, #24]	; (800ef10 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800eef8:	2001      	movs	r0, #1
 800eefa:	f7ff ffcd 	bl	800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800eefe:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	701a      	strb	r2, [r3, #0]
    return empty;
 800ef06:	68fb      	ldr	r3, [r7, #12]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	08027490 	.word	0x08027490

0800ef14 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	4618      	mov	r0, r3
 800ef22:	f001 f809 	bl	800ff38 <_ZN12SimpleString7isSpaceEc>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d003      	beq.n	800ef34 <_ZN12SimpleString4AtoUEPKc+0x20>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	607b      	str	r3, [r7, #4]
 800ef32:	e7f3      	b.n	800ef1c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f000 ffe7 	bl	800ff10 <_ZN12SimpleString7isDigitEc>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d005      	beq.n	800ef54 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	2b2f      	cmp	r3, #47	; 0x2f
 800ef4e:	d901      	bls.n	800ef54 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e000      	b.n	800ef56 <_ZN12SimpleString4AtoUEPKc+0x42>
 800ef54:	2300      	movs	r3, #0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d010      	beq.n	800ef7c <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	3b30      	subs	r3, #48	; 0x30
 800ef72:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3301      	adds	r3, #1
 800ef78:	607b      	str	r3, [r7, #4]
 800ef7a:	e7dd      	b.n	800ef38 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3710      	adds	r7, #16
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b084      	sub	sp, #16
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	4618      	mov	r0, r3
 800ef94:	f000 ffd0 	bl	800ff38 <_ZN12SimpleString7isSpaceEc>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <_ZN12SimpleString4AtoIEPKc+0x20>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3301      	adds	r3, #1
 800efa2:	607b      	str	r3, [r7, #4]
 800efa4:	e7f3      	b.n	800ef8e <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800efac:	7afb      	ldrb	r3, [r7, #11]
 800efae:	2b2d      	cmp	r3, #45	; 0x2d
 800efb0:	d002      	beq.n	800efb8 <_ZN12SimpleString4AtoIEPKc+0x32>
 800efb2:	7afb      	ldrb	r3, [r7, #11]
 800efb4:	2b2b      	cmp	r3, #43	; 0x2b
 800efb6:	d102      	bne.n	800efbe <_ZN12SimpleString4AtoIEPKc+0x38>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	3301      	adds	r3, #1
 800efbc:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 ffa2 	bl	800ff10 <_ZN12SimpleString7isDigitEc>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00f      	beq.n	800eff2 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	4613      	mov	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4413      	add	r3, r2
 800efda:	005b      	lsls	r3, r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	3b30      	subs	r3, #48	; 0x30
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	4413      	add	r3, r2
 800efe8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	3301      	adds	r3, #1
 800efee:	607b      	str	r3, [r7, #4]
 800eff0:	e7e7      	b.n	800efc2 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800eff2:	7afb      	ldrb	r3, [r7, #11]
 800eff4:	2b2d      	cmp	r3, #45	; 0x2d
 800eff6:	d102      	bne.n	800effe <_ZN12SimpleString4AtoIEPKc+0x78>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	425b      	negs	r3, r3
 800effc:	e000      	b.n	800f000 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800effe:	68fb      	ldr	r3, [r7, #12]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00c      	beq.n	800f034 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	781a      	ldrb	r2, [r3, #0]
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d106      	bne.n	800f034 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	3301      	adds	r3, #1
 800f02a:	607b      	str	r3, [r7, #4]
       ++s2;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	3301      	adds	r3, #1
 800f030:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800f032:	e7ee      	b.n	800f012 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	461a      	mov	r2, r3
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	1ad3      	subs	r3, r2, r3
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800f054:	f04f 33ff 	mov.w	r3, #4294967295
 800f058:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3301      	adds	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	607a      	str	r2, [r7, #4]
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bf14      	ite	ne
 800f06c:	2301      	movne	r3, #1
 800f06e:	2300      	moveq	r3, #0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	d000      	beq.n	800f078 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800f076:	e7f0      	b.n	800f05a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800f078:	68fb      	ldr	r3, [r7, #12]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800f086:	b480      	push	{r7}
 800f088:	b085      	sub	sp, #20
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	60f8      	str	r0, [r7, #12]
 800f08e:	60b9      	str	r1, [r7, #8]
 800f090:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d013      	beq.n	800f0c0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00f      	beq.n	800f0c0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	781a      	ldrb	r2, [r3, #0]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d109      	bne.n	800f0c0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	607b      	str	r3, [r7, #4]
        ++s1;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	60fb      	str	r3, [r7, #12]
        ++s2;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800f0be:	e7e8      	b.n	800f092 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d006      	beq.n	800f0d4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	e000      	b.n	800f0d6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr

0800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b087      	sub	sp, #28
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	60f8      	str	r0, [r7, #12]
 800f0ea:	60b9      	str	r1, [r7, #8]
 800f0ec:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d002      	beq.n	800f0fe <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	e01e      	b.n	800f140 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	781a      	ldrb	r2, [r3, #0]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	607b      	str	r3, [r7, #4]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d005      	beq.n	800f122 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800f11e:	2301      	movs	r3, #1
 800f120:	e000      	b.n	800f124 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800f122:	2300      	movs	r3, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00a      	beq.n	800f13e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	3301      	adds	r3, #1
 800f12c:	60bb      	str	r3, [r7, #8]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3301      	adds	r3, #1
 800f132:	60fb      	str	r3, [r7, #12]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	781a      	ldrb	r2, [r3, #0]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800f13c:	e7e5      	b.n	800f10a <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800f13e:	697b      	ldr	r3, [r7, #20]
}
 800f140:	4618      	mov	r0, r3
 800f142:	371c      	adds	r7, #28
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	e01b      	b.n	800f19a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d016      	beq.n	800f198 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800f16a:	6838      	ldr	r0, [r7, #0]
 800f16c:	f7ff ff6e 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800f170:	4603      	mov	r3, r0
 800f172:	461a      	mov	r2, r3
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff ff85 	bl	800f086 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bf0c      	ite	eq
 800f182:	2301      	moveq	r3, #1
 800f184:	2300      	movne	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	e004      	b.n	800f19a <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	3301      	adds	r3, #1
 800f194:	607b      	str	r3, [r7, #4]
 800f196:	e7e4      	b.n	800f162 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b082      	sub	sp, #8
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800f1ac:	79fb      	ldrb	r3, [r7, #7]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 fed9 	bl	800ff66 <_ZN12SimpleString7isUpperEc>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d003      	beq.n	800f1c2 <_ZN12SimpleString7ToLowerEc+0x20>
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	3320      	adds	r3, #32
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	e000      	b.n	800f1c4 <_ZN12SimpleString7ToLowerEc+0x22>
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	613b      	str	r3, [r7, #16]

    while (n--)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	1e5a      	subs	r2, r3, #1
 800f1e4:	607a      	str	r2, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	bf14      	ite	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	2300      	moveq	r3, #0
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d013      	beq.n	800f21c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	781a      	ldrb	r2, [r3, #0]
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d006      	beq.n	800f20e <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	461a      	mov	r2, r3
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	e007      	b.n	800f21e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	3301      	adds	r3, #1
 800f212:	617b      	str	r3, [r7, #20]
            ++p2;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	3301      	adds	r3, #1
 800f218:	613b      	str	r3, [r7, #16]
    while (n--)
 800f21a:	e7e1      	b.n	800f1e0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	371c      	adds	r7, #28
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
	...

0800f22c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00d      	beq.n	800f258 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6859      	ldr	r1, [r3, #4]
 800f244:	23ee      	movs	r3, #238	; 0xee
 800f246:	4a06      	ldr	r2, [pc, #24]	; (800f260 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800f248:	f7ff fe3a 	bl	800eec0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	605a      	str	r2, [r3, #4]
    }
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	08027490 	.word	0x08027490

0800f264 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff ffdd 	bl	800f22c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2201      	movs	r2, #1
 800f276:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7ff fe37 	bl	800eeec <_ZNK12SimpleString14getEmptyStringEv>
 800f27e:	4602      	mov	r2, r0
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	601a      	str	r2, [r3, #0]
}
 800f284:	bf00      	nop
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f7ff ffc7 	bl	800f22c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	68b8      	ldr	r0, [r7, #8]
 800f2ac:	f000 fe12 	bl	800fed4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	601a      	str	r2, [r3, #0]
}
 800f2b6:	bf00      	nop
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
	...

0800f2c0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff ffae 	bl	800f22c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	f240 1209 	movw	r2, #265	; 0x109
 800f2de:	4907      	ldr	r1, [pc, #28]	; (800f2fc <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7ff fdd9 	bl	800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	701a      	strb	r2, [r3, #0]
}
 800f2f4:	bf00      	nop
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	08027490 	.word	0x08027490

0800f300 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f7ff ff8d 	bl	800f22c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	68ba      	ldr	r2, [r7, #8]
 800f31c:	601a      	str	r2, [r3, #0]
}
 800f31e:	bf00      	nop
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800f326:	b590      	push	{r4, r7, lr}
 800f328:	b083      	sub	sp, #12
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681c      	ldr	r4, [r3, #0]
 800f334:	6838      	ldr	r0, [r7, #0]
 800f336:	f000 fbc1 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f33a:	4603      	mov	r3, r0
 800f33c:	3301      	adds	r3, #1
 800f33e:	461a      	mov	r2, r3
 800f340:	4621      	mov	r1, r4
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7ff ffa2 	bl	800f28c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd90      	pop	{r4, r7, pc}

0800f350 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800f35a:	6838      	ldr	r0, [r7, #0]
 800f35c:	f7ff fe76 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800f360:	4603      	mov	r3, r0
 800f362:	3301      	adds	r3, #1
 800f364:	461a      	mov	r2, r3
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ff8f 	bl	800f28c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800f36e:	bf00      	nop
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
    return buffer_;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
}
 800f382:	4618      	mov	r0, r3
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800f38e:	b580      	push	{r7, lr}
 800f390:	b082      	sub	sp, #8
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
 800f396:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2200      	movs	r2, #0
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d103      	bne.n	800f3b2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff ff5a 	bl	800f264 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800f3b0:	e003      	b.n	800f3ba <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7ff ffcb 	bl	800f350 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3708      	adds	r7, #8
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	601a      	str	r2, [r3, #0]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800f3dc:	68b8      	ldr	r0, [r7, #8]
 800f3de:	f7ff fe35 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800f3e2:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	fb02 f303 	mul.w	r3, r2, r3
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7ff ff65 	bl	800f2c0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61bb      	str	r3, [r7, #24]
 800f400:	69ba      	ldr	r2, [r7, #24]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	429a      	cmp	r2, r3
 800f406:	d20e      	bcs.n	800f426 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	3301      	adds	r3, #1
 800f40c:	461a      	mov	r2, r3
 800f40e:	68b9      	ldr	r1, [r7, #8]
 800f410:	69f8      	ldr	r0, [r7, #28]
 800f412:	f7ff fe66 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800f416:	69fa      	ldr	r2, [r7, #28]
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	4413      	add	r3, r2
 800f41c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	3301      	adds	r3, #1
 800f422:	61bb      	str	r3, [r7, #24]
 800f424:	e7ec      	b.n	800f400 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	2200      	movs	r2, #0
 800f42a:	701a      	strb	r2, [r3, #0]
}
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	4618      	mov	r0, r3
 800f430:	3720      	adds	r7, #32
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800f436:	b580      	push	{r7, lr}
 800f438:	b082      	sub	sp, #8
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800f44c:	6838      	ldr	r0, [r7, #0]
 800f44e:	f7ff ff92 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f452:	4603      	mov	r3, r0
 800f454:	4619      	mov	r1, r3
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff ff7a 	bl	800f350 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4618      	mov	r0, r3
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b082      	sub	sp, #8
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	429a      	cmp	r2, r3
 800f476:	d003      	beq.n	800f480 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff ff53 	bl	800f326 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800f480:	687b      	ldr	r3, [r7, #4]
}
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800f48a:	b590      	push	{r4, r7, lr}
 800f48c:	b083      	sub	sp, #12
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7ff ff6e 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f49a:	4604      	mov	r4, r0
 800f49c:	6838      	ldr	r0, [r7, #0]
 800f49e:	f7ff ff6a 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f7ff fe50 	bl	800f14c <_ZN12SimpleString6StrStrEPKcS1_>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	bf14      	ite	ne
 800f4b2:	2301      	movne	r3, #1
 800f4b4:	2300      	moveq	r3, #0
 800f4b6:	b2db      	uxtb	r3, r3
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd90      	pop	{r4, r7, pc}

0800f4c0 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800f4c0:	b590      	push	{r4, r7, lr}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800f4ca:	f107 0308 	add.w	r3, r7, #8
 800f4ce:	6879      	ldr	r1, [r7, #4]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 fabb 	bl	800fa4c <_ZNK12SimpleString9lowerCaseEv>
 800f4d6:	f107 0310 	add.w	r3, r7, #16
 800f4da:	6839      	ldr	r1, [r7, #0]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 fab5 	bl	800fa4c <_ZNK12SimpleString9lowerCaseEv>
 800f4e2:	f107 0210 	add.w	r2, r7, #16
 800f4e6:	f107 0308 	add.w	r3, r7, #8
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff ffcc 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	bf00      	nop
 800f4f8:	f107 0310 	add.w	r3, r7, #16
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 fafe 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800f502:	f107 0308 	add.w	r3, r7, #8
 800f506:	4618      	mov	r0, r3
 800f508:	f000 faf9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800f50c:	4623      	mov	r3, r4
}
 800f50e:	4618      	mov	r0, r3
 800f510:	371c      	adds	r7, #28
 800f512:	46bd      	mov	sp, r7
 800f514:	bd90      	pop	{r4, r7, pc}

0800f516 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800f516:	b590      	push	{r4, r7, lr}
 800f518:	b083      	sub	sp, #12
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800f520:	6838      	ldr	r0, [r7, #0]
 800f522:	f000 facb 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	bf0c      	ite	eq
 800f52c:	2301      	moveq	r3, #1
 800f52e:	2300      	movne	r3, #0
 800f530:	b2db      	uxtb	r3, r3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800f536:	2301      	movs	r3, #1
 800f538:	e022      	b.n	800f580 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fabe 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f540:	4603      	mov	r3, r0
 800f542:	2b00      	cmp	r3, #0
 800f544:	bf0c      	ite	eq
 800f546:	2301      	moveq	r3, #1
 800f548:	2300      	movne	r3, #0
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800f550:	2300      	movs	r3, #0
 800f552:	e015      	b.n	800f580 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff ff0e 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f55a:	4604      	mov	r4, r0
 800f55c:	6838      	ldr	r0, [r7, #0]
 800f55e:	f7ff ff0a 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f562:	4603      	mov	r3, r0
 800f564:	4619      	mov	r1, r3
 800f566:	4620      	mov	r0, r4
 800f568:	f7ff fdf0 	bl	800f14c <_ZN12SimpleString6StrStrEPKcS1_>
 800f56c:	4604      	mov	r4, r0
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7ff ff01 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f574:	4603      	mov	r3, r0
 800f576:	429c      	cmp	r4, r3
 800f578:	bf0c      	ite	eq
 800f57a:	2301      	moveq	r3, #1
 800f57c:	2300      	movne	r3, #0
 800f57e:	b2db      	uxtb	r3, r3
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	bd90      	pop	{r4, r7, pc}

0800f588 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 fa92 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f598:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800f59a:	6838      	ldr	r0, [r7, #0]
 800f59c:	f000 fa8e 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f5a0:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <_ZNK12SimpleString8endsWithERKS_+0x24>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e020      	b.n	800f5ee <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e01b      	b.n	800f5ee <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800f5b6:	68fa      	ldr	r2, [r7, #12]
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d201      	bcs.n	800f5c2 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	e015      	b.n	800f5ee <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7ff fed7 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f5c8:	4601      	mov	r1, r0
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	1ad3      	subs	r3, r2, r3
 800f5d0:	18cc      	adds	r4, r1, r3
 800f5d2:	6838      	ldr	r0, [r7, #0]
 800f5d4:	f7ff fecf 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	4619      	mov	r1, r3
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f7ff fd13 	bl	800f008 <_ZN12SimpleString6StrCmpEPKcS1_>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	2300      	movne	r3, #0
 800f5ec:	b2db      	uxtb	r3, r3
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd90      	pop	{r4, r7, pc}

0800f5f6 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b086      	sub	sp, #24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7ff feb6 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f60a:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800f60c:	2300      	movs	r3, #0
 800f60e:	60fb      	str	r3, [r7, #12]
    if (*str){
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d008      	beq.n	800f62a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800f618:	6838      	ldr	r0, [r7, #0]
 800f61a:	f7ff feac 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f61e:	4603      	mov	r3, r0
 800f620:	4619      	mov	r1, r3
 800f622:	6938      	ldr	r0, [r7, #16]
 800f624:	f7ff fd92 	bl	800f14c <_ZN12SimpleString6StrStrEPKcS1_>
 800f628:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d014      	beq.n	800f65c <_ZNK12SimpleString5countERKS_+0x66>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d011      	beq.n	800f65c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	613b      	str	r3, [r7, #16]
        str++;
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	3301      	adds	r3, #1
 800f640:	613b      	str	r3, [r7, #16]
        num++;
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	3301      	adds	r3, #1
 800f646:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800f648:	6838      	ldr	r0, [r7, #0]
 800f64a:	f7ff fe94 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f64e:	4603      	mov	r3, r0
 800f650:	4619      	mov	r1, r3
 800f652:	6938      	ldr	r0, [r7, #16]
 800f654:	f7ff fd7a 	bl	800f14c <_ZN12SimpleString6StrStrEPKcS1_>
 800f658:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800f65a:	e7e6      	b.n	800f62a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800f65c:	697b      	ldr	r3, [r7, #20]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3718      	adds	r7, #24
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800f666:	b590      	push	{r4, r7, lr}
 800f668:	b091      	sub	sp, #68	; 0x44
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	60f8      	str	r0, [r7, #12]
 800f66e:	60b9      	str	r1, [r7, #8]
 800f670:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800f672:	68b9      	ldr	r1, [r7, #8]
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f7ff ffbe 	bl	800f5f6 <_ZNK12SimpleString5countERKS_>
 800f67a:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800f67c:	68b9      	ldr	r1, [r7, #8]
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff ff82 	bl	800f588 <_ZNK12SimpleString8endsWithERKS_>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800f68a:	2300      	movs	r3, #0
 800f68c:	e000      	b.n	800f690 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800f68e:	2301      	movs	r3, #1
 800f690:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800f692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	4413      	add	r3, r2
 800f698:	4619      	mov	r1, r3
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f001 f95c 	bl	8010958 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f7ff fe68 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f6a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d235      	bcs.n	800f720 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800f6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800f6b8:	68b8      	ldr	r0, [r7, #8]
 800f6ba:	f7ff fe5c 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6c4:	f7ff fd42 	bl	800f14c <_ZN12SimpleString6StrStrEPKcS1_>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800f6ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f001 f9db 	bl	8010a8c <_ZN22SimpleStringCollectionixEj>
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	f107 031c 	add.w	r3, r7, #28
 800f6dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7ff fe55 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800f6e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	f107 0014 	add.w	r0, r7, #20
 800f6ee:	f107 011c 	add.w	r1, r7, #28
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f000 fb0c 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 800f6f8:	f107 0314 	add.w	r3, r7, #20
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4620      	mov	r0, r4
 800f700:	f7ff feb1 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800f704:	f107 0314 	add.w	r3, r7, #20
 800f708:	4618      	mov	r0, r3
 800f70a:	f000 f9f8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800f70e:	f107 031c 	add.w	r3, r7, #28
 800f712:	4618      	mov	r0, r3
 800f714:	f000 f9f3 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800f718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71a:	3301      	adds	r3, #1
 800f71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f71e:	e7c5      	b.n	800f6ac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	2b00      	cmp	r3, #0
 800f724:	d015      	beq.n	800f752 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800f726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 f9af 	bl	8010a8c <_ZN22SimpleStringCollectionixEj>
 800f72e:	4604      	mov	r4, r0
 800f730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f736:	4618      	mov	r0, r3
 800f738:	f7ff fe29 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800f73c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f740:	4619      	mov	r1, r3
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff fe8f 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800f748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 f9d6 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
}
 800f752:	bf00      	nop
 800f754:	3744      	adds	r7, #68	; 0x44
 800f756:	46bd      	mov	sp, r7
 800f758:	bd90      	pop	{r4, r7, pc}

0800f75a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	460b      	mov	r3, r1
 800f764:	70fb      	strb	r3, [r7, #3]
 800f766:	4613      	mov	r3, r2
 800f768:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f9a6 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f770:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800f772:	2300      	movs	r3, #0
 800f774:	60fb      	str	r3, [r7, #12]
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d218      	bcs.n	800f7b0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7ff fdf9 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f784:	4602      	mov	r2, r0
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	4413      	add	r3, r2
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	78fa      	ldrb	r2, [r7, #3]
 800f78e:	429a      	cmp	r2, r3
 800f790:	bf0c      	ite	eq
 800f792:	2301      	moveq	r3, #1
 800f794:	2300      	movne	r3, #0
 800f796:	b2db      	uxtb	r3, r3
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d005      	beq.n	800f7a8 <_ZN12SimpleString7replaceEcc+0x4e>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	78ba      	ldrb	r2, [r7, #2]
 800f7a6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	60fb      	str	r3, [r7, #12]
 800f7ae:	e7e2      	b.n	800f776 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800f7b0:	bf00      	nop
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b08e      	sub	sp, #56	; 0x38
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800f7c4:	f107 0310 	add.w	r3, r7, #16
 800f7c8:	68b9      	ldr	r1, [r7, #8]
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff fddf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800f7d0:	f107 0310 	add.w	r3, r7, #16
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff ff0d 	bl	800f5f6 <_ZNK12SimpleString5countERKS_>
 800f7dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f7de:	f107 0310 	add.w	r3, r7, #16
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f98b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d071      	beq.n	800f8d2 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f000 f964 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f7f4:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800f7f6:	68b8      	ldr	r0, [r7, #8]
 800f7f8:	f7ff fc28 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800f7fc:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7ff fc24 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800f804:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f80a:	fb02 f203 	mul.w	r2, r2, r3
 800f80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f810:	441a      	add	r2, r3
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f816:	fb01 f303 	mul.w	r3, r1, r3
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	3301      	adds	r3, #1
 800f81e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800f820:	69fb      	ldr	r3, [r7, #28]
 800f822:	2b01      	cmp	r3, #1
 800f824:	d951      	bls.n	800f8ca <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800f826:	f240 129d 	movw	r2, #413	; 0x19d
 800f82a:	492c      	ldr	r1, [pc, #176]	; (800f8dc <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800f82c:	69f8      	ldr	r0, [r7, #28]
 800f82e:	f7ff fb33 	bl	800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f832:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800f834:	2300      	movs	r3, #0
 800f836:	637b      	str	r3, [r7, #52]	; 0x34
 800f838:	2300      	movs	r3, #0
 800f83a:	633b      	str	r3, [r7, #48]	; 0x30
 800f83c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	429a      	cmp	r2, r3
 800f842:	d236      	bcs.n	800f8b2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f7ff fd96 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f84a:	4602      	mov	r2, r0
 800f84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84e:	4413      	add	r3, r2
 800f850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	4618      	mov	r0, r3
 800f856:	f7ff fc16 	bl	800f086 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	bf0c      	ite	eq
 800f860:	2301      	moveq	r3, #1
 800f862:	2300      	movne	r3, #0
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d011      	beq.n	800f88e <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800f86a:	69ba      	ldr	r2, [r7, #24]
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	18d0      	adds	r0, r2, r3
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	3301      	adds	r3, #1
 800f874:	461a      	mov	r2, r3
 800f876:	6879      	ldr	r1, [r7, #4]
 800f878:	f7ff fc33 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800f87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	4413      	add	r3, r2
 800f882:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800f884:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	4413      	add	r3, r2
 800f88a:	637b      	str	r3, [r7, #52]	; 0x34
 800f88c:	e7d6      	b.n	800f83c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f7ff fd71 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800f894:	4602      	mov	r2, r0
 800f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f898:	441a      	add	r2, r3
 800f89a:	69b9      	ldr	r1, [r7, #24]
 800f89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89e:	440b      	add	r3, r1
 800f8a0:	7812      	ldrb	r2, [r2, #0]
 800f8a2:	701a      	strb	r2, [r3, #0]
                j++;
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800f8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800f8b0:	e7c4      	b.n	800f83c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	69ba      	ldr	r2, [r7, #24]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800f8be:	69fa      	ldr	r2, [r7, #28]
 800f8c0:	69b9      	ldr	r1, [r7, #24]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7ff fd1c 	bl	800f300 <_ZN12SimpleString19setInternalBufferToEPcj>
 800f8c8:	e004      	b.n	800f8d4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fcca 	bl	800f264 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800f8d0:	e000      	b.n	800f8d4 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800f8d2:	bf00      	nop
}
 800f8d4:	3738      	adds	r7, #56	; 0x38
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	08027490 	.word	0x08027490

0800f8e0 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800f8e0:	b590      	push	{r4, r7, lr}
 800f8e2:	b089      	sub	sp, #36	; 0x24
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800f8ea:	493b      	ldr	r1, [pc, #236]	; (800f9d8 <_ZNK12SimpleString9printableEv+0xf8>)
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff fd4e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800f8f2:	6838      	ldr	r0, [r7, #0]
 800f8f4:	f000 f876 	bl	800f9e4 <_ZNK12SimpleString16getPrintableSizeEv>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f7ff fcde 	bl	800f2c0 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800f904:	6838      	ldr	r0, [r7, #0]
 800f906:	f000 f8d9 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f90a:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800f910:	2300      	movs	r3, #0
 800f912:	61bb      	str	r3, [r7, #24]
 800f914:	69ba      	ldr	r2, [r7, #24]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d252      	bcs.n	800f9c2 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	4413      	add	r3, r2
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800f928:	7cfb      	ldrb	r3, [r7, #19]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f000 fb43 	bl	800ffb6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d012      	beq.n	800f95c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	18d0      	adds	r0, r2, r3
 800f93e:	7cfb      	ldrb	r3, [r7, #19]
 800f940:	3b07      	subs	r3, #7
 800f942:	b2db      	uxtb	r3, r3
 800f944:	461a      	mov	r2, r3
 800f946:	4b25      	ldr	r3, [pc, #148]	; (800f9dc <_ZNK12SimpleString9printableEv+0xfc>)
 800f948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94c:	2202      	movs	r2, #2
 800f94e:	4619      	mov	r1, r3
 800f950:	f7ff fbc7 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	3302      	adds	r3, #2
 800f958:	61fb      	str	r3, [r7, #28]
 800f95a:	e02e      	b.n	800f9ba <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800f95c:	7cfb      	ldrb	r3, [r7, #19]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 fb15 	bl	800ff8e <_ZN12SimpleString9isControlEc>
 800f964:	4603      	mov	r3, r0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d01e      	beq.n	800f9a8 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800f96a:	7cfa      	ldrb	r2, [r7, #19]
 800f96c:	f107 0308 	add.w	r3, r7, #8
 800f970:	491b      	ldr	r1, [pc, #108]	; (800f9e0 <_ZNK12SimpleString9printableEv+0x100>)
 800f972:	4618      	mov	r0, r3
 800f974:	f000 fdca 	bl	801050c <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	18d4      	adds	r4, r2, r3
 800f980:	f107 0308 	add.w	r3, r7, #8
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f88d 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2204      	movs	r2, #4
 800f98e:	4619      	mov	r1, r3
 800f990:	4620      	mov	r0, r4
 800f992:	f7ff fba6 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	3304      	adds	r3, #4
 800f99a:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800f99c:	f107 0308 	add.w	r3, r7, #8
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 f8ac 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800f9a6:	e008      	b.n	800f9ba <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	7cfa      	ldrb	r2, [r7, #19]
 800f9b2:	701a      	strb	r2, [r3, #0]
            j++;
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	61bb      	str	r3, [r7, #24]
 800f9c0:	e7a8      	b.n	800f914 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	701a      	strb	r2, [r3, #0]

    return result;
 800f9ce:	bf00      	nop
}
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	3724      	adds	r7, #36	; 0x24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd90      	pop	{r4, r7, pc}
 800f9d8:	08027550 	.word	0x08027550
 800f9dc:	2000006c 	.word	0x2000006c
 800f9e0:	08027554 	.word	0x08027554

0800f9e4 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 f865 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800f9f2:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	613b      	str	r3, [r7, #16]
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d21e      	bcs.n	800fa42 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800fa10:	7afb      	ldrb	r3, [r7, #11]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 facf 	bl	800ffb6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d003      	beq.n	800fa26 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	3301      	adds	r3, #1
 800fa22:	617b      	str	r3, [r7, #20]
 800fa24:	e009      	b.n	800fa3a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800fa26:	7afb      	ldrb	r3, [r7, #11]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f000 fab0 	bl	800ff8e <_ZN12SimpleString9isControlEc>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d002      	beq.n	800fa3a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	3303      	adds	r3, #3
 800fa38:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	e7dc      	b.n	800f9fc <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800fa42:	697b      	ldr	r3, [r7, #20]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3718      	adds	r7, #24
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800fa4c:	b590      	push	{r4, r7, lr}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff fcec 	bl	800f436 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 f82c 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fa64:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800fa66:	2300      	movs	r3, #0
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d213      	bcs.n	800fa9a <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f7ff fc7f 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	7819      	ldrb	r1, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	18d4      	adds	r4, r2, r3
 800fa88:	4608      	mov	r0, r1
 800fa8a:	f7ff fb8a 	bl	800f1a2 <_ZN12SimpleString7ToLowerEc>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	3301      	adds	r3, #1
 800fa96:	60fb      	str	r3, [r7, #12]
 800fa98:	e7e7      	b.n	800fa6a <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800fa9a:	bf00      	nop
}
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd90      	pop	{r4, r7, pc}

0800faa4 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f7ff fc62 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fab2:	4603      	mov	r3, r0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}

0800fabc <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff fc56 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800faca:	4603      	mov	r3, r0
 800facc:	4618      	mov	r0, r3
 800face:	f7ff fabd 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800fad2:	4603      	mov	r3, r0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7ff ffe9 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	bf0c      	ite	eq
 800faf0:	2301      	moveq	r3, #1
 800faf2:	2300      	movne	r3, #0
 800faf4:	b2db      	uxtb	r3, r3
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b082      	sub	sp, #8
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fb90 	bl	800f22c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800fb16:	b590      	push	{r4, r7, lr}
 800fb18:	b083      	sub	sp, #12
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7ff ffbf 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800fb26:	4604      	mov	r4, r0
 800fb28:	6838      	ldr	r0, [r7, #0]
 800fb2a:	f7ff ffbb 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	4619      	mov	r1, r3
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7ff fa68 	bl	800f008 <_ZN12SimpleString6StrCmpEPKcS1_>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	bf0c      	ite	eq
 800fb3e:	2301      	moveq	r3, #1
 800fb40:	2300      	movne	r3, #0
 800fb42:	b2db      	uxtb	r3, r3
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd90      	pop	{r4, r7, pc}

0800fb4c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800fb4c:	b590      	push	{r4, r7, lr}
 800fb4e:	b087      	sub	sp, #28
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800fb56:	f107 0308 	add.w	r3, r7, #8
 800fb5a:	6879      	ldr	r1, [r7, #4]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff ff75 	bl	800fa4c <_ZNK12SimpleString9lowerCaseEv>
 800fb62:	f107 0310 	add.w	r3, r7, #16
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ff6f 	bl	800fa4c <_ZNK12SimpleString9lowerCaseEv>
 800fb6e:	f107 0210 	add.w	r2, r7, #16
 800fb72:	f107 0308 	add.w	r3, r7, #8
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff ffcc 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461c      	mov	r4, r3
 800fb82:	f107 0310 	add.w	r3, r7, #16
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff ffb9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800fb8c:	f107 0308 	add.w	r3, r7, #8
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff ffb4 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800fb96:	4623      	mov	r3, r4
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	371c      	adds	r7, #28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd90      	pop	{r4, r7, pc}

0800fba0 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800fbaa:	6839      	ldr	r1, [r7, #0]
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7ff ffb2 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	f083 0301 	eor.w	r3, r3, #1
 800fbb8:	b2db      	uxtb	r3, r3
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	60f8      	str	r0, [r7, #12]
 800fbca:	60b9      	str	r1, [r7, #8]
 800fbcc:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800fbce:	68b8      	ldr	r0, [r7, #8]
 800fbd0:	f7ff fbd1 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7ff fbd8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff fbc9 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f000 f817 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    return t;
 800fbee:	bf00      	nop
}
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	3710      	adds	r7, #16
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800fc02:	6838      	ldr	r0, [r7, #0]
 800fc04:	f7ff fbb7 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 f805 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
 800fc12:	4603      	mov	r3, r0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b086      	sub	sp, #24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff ff48 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fc2c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800fc2e:	6838      	ldr	r0, [r7, #0]
 800fc30:	f7ff fa0c 	bl	800f04c <_ZN12SimpleString6StrLenEPKc>
 800fc34:	4603      	mov	r3, r0
 800fc36:	3301      	adds	r3, #1
 800fc38:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800fc3a:	697a      	ldr	r2, [r7, #20]
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	4413      	add	r3, r2
 800fc40:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7ff fb97 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	68f9      	ldr	r1, [r7, #12]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 f941 	bl	800fed4 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800fc52:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	4413      	add	r3, r2
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7ff fa3f 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	68b9      	ldr	r1, [r7, #8]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff fb49 	bl	800f300 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800fc6e:	687b      	ldr	r3, [r7, #4]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800fc78:	b590      	push	{r4, r7, lr}
 800fc7a:	b08b      	sub	sp, #44	; 0x2c
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	4613      	mov	r3, r2
 800fc84:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff ff18 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	68b8      	ldr	r0, [r7, #8]
 800fc90:	f7ff ff14 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fc94:	4603      	mov	r3, r0
 800fc96:	429c      	cmp	r4, r3
 800fc98:	bf8c      	ite	hi
 800fc9a:	2301      	movhi	r3, #1
 800fc9c:	2300      	movls	r3, #0
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d006      	beq.n	800fcb2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	461a      	mov	r2, r3
 800fca8:	68f9      	ldr	r1, [r7, #12]
 800fcaa:	68b8      	ldr	r0, [r7, #8]
 800fcac:	f7ff ffe4 	bl	800fc78 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800fcb0:	e02b      	b.n	800fd0a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800fcb2:	79fb      	ldrb	r3, [r7, #7]
 800fcb4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800fcba:	68b8      	ldr	r0, [r7, #8]
 800fcbc:	f7ff fefe 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f7ff fefa 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	1ae2      	subs	r2, r4, r3
 800fccc:	f107 0114 	add.w	r1, r7, #20
 800fcd0:	f107 0320 	add.w	r3, r7, #32
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fb75 	bl	800f3c4 <_ZN12SimpleStringC1EPKcj>
 800fcda:	f107 0318 	add.w	r3, r7, #24
 800fcde:	f107 0120 	add.w	r1, r7, #32
 800fce2:	68fa      	ldr	r2, [r7, #12]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7ff ff6c 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 800fcea:	f107 0318 	add.w	r3, r7, #24
 800fcee:	4619      	mov	r1, r3
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff fbb8 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 800fcf6:	f107 0318 	add.w	r3, r7, #24
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff feff 	bl	800fafe <_ZN12SimpleStringD1Ev>
 800fd00:	f107 0320 	add.w	r3, r7, #32
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff fefa 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800fd0a:	372c      	adds	r7, #44	; 0x2c
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd90      	pop	{r4, r7, pc}

0800fd10 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	607a      	str	r2, [r7, #4]
 800fd1c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800fd1e:	68b8      	ldr	r0, [r7, #8]
 800fd20:	f7ff fecc 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fd24:	4603      	mov	r3, r0
 800fd26:	3b01      	subs	r3, #1
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	bf8c      	ite	hi
 800fd2e:	2301      	movhi	r3, #1
 800fd30:	2300      	movls	r3, #0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <_ZNK12SimpleString9subStringEjj+0x32>
 800fd38:	4919      	ldr	r1, [pc, #100]	; (800fda0 <_ZNK12SimpleString9subStringEjj+0x90>)
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f7ff fb27 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800fd40:	e029      	b.n	800fd96 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800fd42:	68b8      	ldr	r0, [r7, #8]
 800fd44:	f7ff fb17 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	441a      	add	r2, r3
 800fd4e:	f107 0310 	add.w	r3, r7, #16
 800fd52:	4611      	mov	r1, r2
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff fb1a 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800fd5a:	f107 0310 	add.w	r3, r7, #16
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff feac 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fd64:	4602      	mov	r2, r0
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	bf34      	ite	cc
 800fd6c:	2301      	movcc	r3, #1
 800fd6e:	2300      	movcs	r3, #0
 800fd70:	b2db      	uxtb	r3, r3
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d004      	beq.n	800fd80 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800fd76:	693a      	ldr	r2, [r7, #16]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	701a      	strb	r2, [r3, #0]

    return newString;
 800fd80:	f107 0310 	add.w	r3, r7, #16
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff fb55 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800fd8c:	f107 0310 	add.w	r3, r7, #16
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff feb4 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	3718      	adds	r7, #24
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	08027550 	.word	0x08027550

0800fda4 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	68b9      	ldr	r1, [r7, #8]
 800fdba:	f7ff ffa9 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
}
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
 800fdce:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7ff fad0 	bl	800f376 <_ZNK12SimpleString9getBufferEv>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	4413      	add	r3, r2
 800fddc:	781b      	ldrb	r3, [r3, #0]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	460b      	mov	r3, r1
 800fdf0:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800fdf2:	78fb      	ldrb	r3, [r7, #3]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 f805 	bl	800fe08 <_ZNK12SimpleString8findFromEjc>
 800fdfe:	4603      	mov	r3, r0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b086      	sub	sp, #24
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	4613      	mov	r3, r2
 800fe14:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff fe50 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 800fe1c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	617b      	str	r3, [r7, #20]
 800fe22:	697a      	ldr	r2, [r7, #20]
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d213      	bcs.n	800fe52 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800fe2a:	6979      	ldr	r1, [r7, #20]
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff ffca 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 800fe32:	4603      	mov	r3, r0
 800fe34:	461a      	mov	r2, r3
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	bf0c      	ite	eq
 800fe3c:	2301      	moveq	r3, #1
 800fe3e:	2300      	movne	r3, #0
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <_ZNK12SimpleString8findFromEjc+0x42>
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	e005      	b.n	800fe56 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	617b      	str	r3, [r7, #20]
 800fe50:	e7e7      	b.n	800fe22 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800fe52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	460b      	mov	r3, r1
 800fe70:	71fb      	strb	r3, [r7, #7]
 800fe72:	4613      	mov	r3, r2
 800fe74:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800fe76:	79fb      	ldrb	r3, [r7, #7]
 800fe78:	4619      	mov	r1, r3
 800fe7a:	68b8      	ldr	r0, [r7, #8]
 800fe7c:	f7ff ffb3 	bl	800fde6 <_ZNK12SimpleString4findEc>
 800fe80:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe88:	d104      	bne.n	800fe94 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800fe8a:	4911      	ldr	r1, [pc, #68]	; (800fed0 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800fe8c:	68f8      	ldr	r0, [r7, #12]
 800fe8e:	f7ff fa7e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 800fe92:	e019      	b.n	800fec8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800fe94:	79bb      	ldrb	r3, [r7, #6]
 800fe96:	461a      	mov	r2, r3
 800fe98:	6979      	ldr	r1, [r7, #20]
 800fe9a:	68b8      	ldr	r0, [r7, #8]
 800fe9c:	f7ff ffb4 	bl	800fe08 <_ZNK12SimpleString8findFromEjc>
 800fea0:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea8:	d106      	bne.n	800feb8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	697a      	ldr	r2, [r7, #20]
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7ff ff77 	bl	800fda4 <_ZNK12SimpleString9subStringEj>
 800feb6:	e007      	b.n	800fec8 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	697a      	ldr	r2, [r7, #20]
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	f7ff ff24 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
}
 800fec8:	68f8      	ldr	r0, [r7, #12]
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	08027550 	.word	0x08027550

0800fed4 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800fede:	f240 2275 	movw	r2, #629	; 0x275
 800fee2:	490a      	ldr	r1, [pc, #40]	; (800ff0c <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800fee4:	6838      	ldr	r0, [r7, #0]
 800fee6:	f7fe ffd7 	bl	800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800feea:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f7ff f8f6 	bl	800f0e2 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	4413      	add	r3, r2
 800fefe:	2200      	movs	r2, #0
 800ff00:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800ff02:	68fb      	ldr	r3, [r7, #12]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	08027490 	.word	0x08027490

0800ff10 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	4603      	mov	r3, r0
 800ff18:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800ff1a:	79fb      	ldrb	r3, [r7, #7]
 800ff1c:	2b2f      	cmp	r3, #47	; 0x2f
 800ff1e:	d904      	bls.n	800ff2a <_ZN12SimpleString7isDigitEc+0x1a>
 800ff20:	79fb      	ldrb	r3, [r7, #7]
 800ff22:	2b39      	cmp	r3, #57	; 0x39
 800ff24:	d801      	bhi.n	800ff2a <_ZN12SimpleString7isDigitEc+0x1a>
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <_ZN12SimpleString7isDigitEc+0x1c>
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	4603      	mov	r3, r0
 800ff40:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800ff42:	79fb      	ldrb	r3, [r7, #7]
 800ff44:	2b20      	cmp	r3, #32
 800ff46:	d005      	beq.n	800ff54 <_ZN12SimpleString7isSpaceEc+0x1c>
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	2b08      	cmp	r3, #8
 800ff4c:	d904      	bls.n	800ff58 <_ZN12SimpleString7isSpaceEc+0x20>
 800ff4e:	79fb      	ldrb	r3, [r7, #7]
 800ff50:	2b0d      	cmp	r3, #13
 800ff52:	d801      	bhi.n	800ff58 <_ZN12SimpleString7isSpaceEc+0x20>
 800ff54:	2301      	movs	r3, #1
 800ff56:	e000      	b.n	800ff5a <_ZN12SimpleString7isSpaceEc+0x22>
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800ff66:	b480      	push	{r7}
 800ff68:	b083      	sub	sp, #12
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	2b40      	cmp	r3, #64	; 0x40
 800ff74:	d904      	bls.n	800ff80 <_ZN12SimpleString7isUpperEc+0x1a>
 800ff76:	79fb      	ldrb	r3, [r7, #7]
 800ff78:	2b5a      	cmp	r3, #90	; 0x5a
 800ff7a:	d801      	bhi.n	800ff80 <_ZN12SimpleString7isUpperEc+0x1a>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	e000      	b.n	800ff82 <_ZN12SimpleString7isUpperEc+0x1c>
 800ff80:	2300      	movs	r3, #0
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	370c      	adds	r7, #12
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b083      	sub	sp, #12
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	4603      	mov	r3, r0
 800ff96:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	2b1f      	cmp	r3, #31
 800ff9c:	d902      	bls.n	800ffa4 <_ZN12SimpleString9isControlEc+0x16>
 800ff9e:	79fb      	ldrb	r3, [r7, #7]
 800ffa0:	2b7f      	cmp	r3, #127	; 0x7f
 800ffa2:	d101      	bne.n	800ffa8 <_ZN12SimpleString9isControlEc+0x1a>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e000      	b.n	800ffaa <_ZN12SimpleString9isControlEc+0x1c>
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	370c      	adds	r7, #12
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b083      	sub	sp, #12
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	2b06      	cmp	r3, #6
 800ffc4:	d904      	bls.n	800ffd0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	2b0d      	cmp	r3, #13
 800ffca:	d801      	bhi.n	800ffd0 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e000      	b.n	800ffd2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	370c      	adds	r7, #12
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
	...

0800ffe0 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800ffec:	78fb      	ldrb	r3, [r7, #3]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <_Z10StringFromb+0x16>
 800fff2:	4a06      	ldr	r2, [pc, #24]	; (801000c <_Z10StringFromb+0x2c>)
 800fff4:	e000      	b.n	800fff8 <_Z10StringFromb+0x18>
 800fff6:	4a06      	ldr	r2, [pc, #24]	; (8010010 <_Z10StringFromb+0x30>)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4906      	ldr	r1, [pc, #24]	; (8010014 <_Z10StringFromb+0x34>)
 800fffc:	4618      	mov	r0, r3
 800fffe:	f000 fa85 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	3708      	adds	r7, #8
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	0802755c 	.word	0x0802755c
 8010010:	08027564 	.word	0x08027564
 8010014:	0802756c 	.word	0x0802756c

08010018 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 8010022:	6839      	ldr	r1, [r7, #0]
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7ff f9b2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
	...

08010034 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 8010034:	b590      	push	{r4, r7, lr}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 801003e:	2400      	movs	r4, #0
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d00e      	beq.n	8010064 <_Z25PrintableStringFromOrNullPKc+0x30>
 8010046:	f107 0308 	add.w	r3, r7, #8
 801004a:	6839      	ldr	r1, [r7, #0]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff ffe3 	bl	8010018 <_Z10StringFromPKc>
 8010052:	2401      	movs	r4, #1
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f107 0208 	add.w	r2, r7, #8
 801005a:	4611      	mov	r1, r2
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff fc3f 	bl	800f8e0 <_ZNK12SimpleString9printableEv>
 8010062:	e004      	b.n	801006e <_Z25PrintableStringFromOrNullPKc+0x3a>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4908      	ldr	r1, [pc, #32]	; (8010088 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff ffd5 	bl	8010018 <_Z10StringFromPKc>
 801006e:	2c00      	cmp	r4, #0
 8010070:	d004      	beq.n	801007c <_Z25PrintableStringFromOrNullPKc+0x48>
 8010072:	f107 0308 	add.w	r3, r7, #8
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fd41 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801007c:	bf00      	nop
}
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	3714      	adds	r7, #20
 8010082:	46bd      	mov	sp, r7
 8010084:	bd90      	pop	{r4, r7, pc}
 8010086:	bf00      	nop
 8010088:	08027570 	.word	0x08027570

0801008c <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	683a      	ldr	r2, [r7, #0]
 801009a:	4904      	ldr	r1, [pc, #16]	; (80100ac <_Z10StringFromi+0x20>)
 801009c:	4618      	mov	r0, r3
 801009e:	f000 fa35 	bl	801050c <_Z16StringFromFormatPKcz>
}
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	08027578 	.word	0x08027578

080100b0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	683a      	ldr	r2, [r7, #0]
 80100be:	4904      	ldr	r1, [pc, #16]	; (80100d0 <_Z10StringFroml+0x20>)
 80100c0:	4618      	mov	r0, r3
 80100c2:	f000 fa23 	bl	801050c <_Z16StringFromFormatPKcz>
}
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	0802757c 	.word	0x0802757c

080100d4 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b086      	sub	sp, #24
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80100de:	f107 0308 	add.w	r3, r7, #8
 80100e2:	4910      	ldr	r1, [pc, #64]	; (8010124 <_Z10StringFromPKv+0x50>)
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff f952 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80100ea:	f107 0310 	add.w	r3, r7, #16
 80100ee:	6839      	ldr	r1, [r7, #0]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 f9a1 	bl	8010438 <_Z13HexStringFromPKv>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f107 0210 	add.w	r2, r7, #16
 80100fc:	f107 0108 	add.w	r1, r7, #8
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fd5e 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8010106:	f107 0310 	add.w	r3, r7, #16
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff fcf7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fcf2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801011a:	bf00      	nop
}
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	08027580 	.word	0x08027580

08010128 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b086      	sub	sp, #24
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8010132:	f107 0308 	add.w	r3, r7, #8
 8010136:	4910      	ldr	r1, [pc, #64]	; (8010178 <_Z10StringFromPFvvE+0x50>)
 8010138:	4618      	mov	r0, r3
 801013a:	f7ff f928 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801013e:	f107 0310 	add.w	r3, r7, #16
 8010142:	6839      	ldr	r1, [r7, #0]
 8010144:	4618      	mov	r0, r3
 8010146:	f000 f98b 	bl	8010460 <_Z13HexStringFromPFvvE>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f107 0210 	add.w	r2, r7, #16
 8010150:	f107 0108 	add.w	r1, r7, #8
 8010154:	4618      	mov	r0, r3
 8010156:	f7ff fd34 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801015a:	f107 0310 	add.w	r3, r7, #16
 801015e:	4618      	mov	r0, r3
 8010160:	f7ff fccd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fcc8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801016e:	bf00      	nop
}
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	08027580 	.word	0x08027580

0801017c <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	4904      	ldr	r1, [pc, #16]	; (801019c <_Z13HexStringFroml+0x20>)
 801018c:	4618      	mov	r0, r3
 801018e:	f000 f9bd 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	08027584 	.word	0x08027584

080101a0 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	4904      	ldr	r1, [pc, #16]	; (80101c0 <_Z13HexStringFromi+0x20>)
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 f9ab 	bl	801050c <_Z16StringFromFormatPKcz>
}
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	08027588 	.word	0x08027588

080101c4 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 80101d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4912      	ldr	r1, [pc, #72]	; (8010220 <_Z13HexStringFroma+0x5c>)
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f997 	bl	801050c <_Z16StringFromFormatPKcz>
    if(value < 0) {
 80101de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	da16      	bge.n	8010214 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7ff fc68 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80101ec:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	1e9a      	subs	r2, r3, #2
 80101f2:	f107 030c 	add.w	r3, r7, #12
 80101f6:	6879      	ldr	r1, [r7, #4]
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7ff fdd3 	bl	800fda4 <_ZNK12SimpleString9subStringEj>
 80101fe:	f107 030c 	add.w	r3, r7, #12
 8010202:	4619      	mov	r1, r3
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7ff f92e 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801020a:	f107 030c 	add.w	r3, r7, #12
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff fc75 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
    return result;
 8010214:	bf00      	nop
}
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	3718      	adds	r7, #24
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	08027588 	.word	0x08027588

08010224 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	683a      	ldr	r2, [r7, #0]
 8010232:	4904      	ldr	r1, [pc, #16]	; (8010244 <_Z13HexStringFromm+0x20>)
 8010234:	4618      	mov	r0, r3
 8010236:	f000 f969 	bl	801050c <_Z16StringFromFormatPKcz>
}
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	08027584 	.word	0x08027584

08010248 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	683a      	ldr	r2, [r7, #0]
 8010256:	4904      	ldr	r1, [pc, #16]	; (8010268 <_Z13HexStringFromj+0x20>)
 8010258:	4618      	mov	r0, r3
 801025a:	f000 f957 	bl	801050c <_Z16StringFromFormatPKcz>
}
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	3708      	adds	r7, #8
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	08027588 	.word	0x08027588

0801026c <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 8010276:	f107 0308 	add.w	r3, r7, #8
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	4618      	mov	r0, r3
 801027e:	f7ff ff8f 	bl	80101a0 <_Z13HexStringFromi>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f107 0208 	add.w	r2, r7, #8
 8010288:	4611      	mov	r1, r2
 801028a:	4618      	mov	r0, r3
 801028c:	f000 f87e 	bl	801038c <_Z26BracketsFormattedHexString12SimpleString>
 8010290:	f107 0308 	add.w	r3, r7, #8
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fc32 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801029a:	bf00      	nop
}
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80102ae:	f107 0308 	add.w	r3, r7, #8
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff ffc7 	bl	8010248 <_Z13HexStringFromj>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f107 0208 	add.w	r2, r7, #8
 80102c0:	4611      	mov	r1, r2
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 f862 	bl	801038c <_Z26BracketsFormattedHexString12SimpleString>
 80102c8:	f107 0308 	add.w	r3, r7, #8
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff fc16 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80102d2:	bf00      	nop
}
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	3710      	adds	r7, #16
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80102e6:	f107 0308 	add.w	r3, r7, #8
 80102ea:	6839      	ldr	r1, [r7, #0]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7ff ff45 	bl	801017c <_Z13HexStringFroml>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f107 0208 	add.w	r2, r7, #8
 80102f8:	4611      	mov	r1, r2
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 f846 	bl	801038c <_Z26BracketsFormattedHexString12SimpleString>
 8010300:	f107 0308 	add.w	r3, r7, #8
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff fbfa 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801030a:	bf00      	nop
}
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 801031e:	f107 0308 	add.w	r3, r7, #8
 8010322:	6839      	ldr	r1, [r7, #0]
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff ff7d 	bl	8010224 <_Z13HexStringFromm>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f107 0208 	add.w	r2, r7, #8
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f000 f82a 	bl	801038c <_Z26BracketsFormattedHexString12SimpleString>
 8010338:	f107 0308 	add.w	r3, r7, #8
 801033c:	4618      	mov	r0, r3
 801033e:	f7ff fbde 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010342:	bf00      	nop
}
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	460b      	mov	r3, r1
 8010356:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8010358:	f107 0308 	add.w	r3, r7, #8
 801035c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8010360:	4611      	mov	r1, r2
 8010362:	4618      	mov	r0, r3
 8010364:	f7ff ff2e 	bl	80101c4 <_Z13HexStringFroma>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f107 0208 	add.w	r2, r7, #8
 801036e:	4611      	mov	r1, r2
 8010370:	4618      	mov	r0, r3
 8010372:	f000 f80b 	bl	801038c <_Z26BracketsFormattedHexString12SimpleString>
 8010376:	f107 0308 	add.w	r3, r7, #8
 801037a:	4618      	mov	r0, r3
 801037c:	f7ff fbbf 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010380:	bf00      	nop
}
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b088      	sub	sp, #32
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 8010396:	f107 0310 	add.w	r3, r7, #16
 801039a:	4917      	ldr	r1, [pc, #92]	; (80103f8 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fff6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80103a2:	f107 0308 	add.w	r3, r7, #8
 80103a6:	f107 0110 	add.w	r1, r7, #16
 80103aa:	683a      	ldr	r2, [r7, #0]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff fc08 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80103b2:	f107 0318 	add.w	r3, r7, #24
 80103b6:	4911      	ldr	r1, [pc, #68]	; (80103fc <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fe ffe8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f107 0218 	add.w	r2, r7, #24
 80103c4:	f107 0108 	add.w	r1, r7, #8
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7ff fbfa 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80103ce:	f107 0318 	add.w	r3, r7, #24
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7ff fb93 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80103d8:	f107 0308 	add.w	r3, r7, #8
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff fb8e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80103e2:	f107 0310 	add.w	r3, r7, #16
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ff fb89 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80103ec:	bf00      	nop
}
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	0802758c 	.word	0x0802758c
 80103fc:	08027590 	.word	0x08027590

08010400 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8010408:	1d3b      	adds	r3, r7, #4
 801040a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3714      	adds	r7, #20
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	4770      	bx	lr

0801041c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8010424:	1d3b      	adds	r3, r7, #4
 8010426:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 8010442:	6838      	ldr	r0, [r7, #0]
 8010444:	f7ff ffdc 	bl	8010400 <_ZL25convertPointerToLongValuePKv>
 8010448:	4602      	mov	r2, r0
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4903      	ldr	r1, [pc, #12]	; (801045c <_Z13HexStringFromPKv+0x24>)
 801044e:	4618      	mov	r0, r3
 8010450:	f000 f85c 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	08027584 	.word	0x08027584

08010460 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 801046a:	6838      	ldr	r0, [r7, #0]
 801046c:	f7ff ffd6 	bl	801041c <_ZL33convertFunctionPointerToLongValuePFvvE>
 8010470:	4602      	mov	r2, r0
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	4903      	ldr	r1, [pc, #12]	; (8010484 <_Z13HexStringFromPFvvE+0x24>)
 8010476:	4618      	mov	r0, r3
 8010478:	f000 f848 	bl	801050c <_Z16StringFromFormatPKcz>
}
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	3708      	adds	r7, #8
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	08027584 	.word	0x08027584

08010488 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af02      	add	r7, sp, #8
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	ed87 0b00 	vstr	d0, [r7]
 8010494:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 8010496:	4b18      	ldr	r3, [pc, #96]	; (80104f8 <_Z10StringFromdi+0x70>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	ed97 0b00 	vldr	d0, [r7]
 801049e:	4798      	blx	r3
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	bf14      	ite	ne
 80104a6:	2301      	movne	r3, #1
 80104a8:	2300      	moveq	r3, #0
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d004      	beq.n	80104ba <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 80104b0:	4912      	ldr	r1, [pc, #72]	; (80104fc <_Z10StringFromdi+0x74>)
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7fe ff6b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80104b8:	e01a      	b.n	80104f0 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 80104ba:	4b11      	ldr	r3, [pc, #68]	; (8010500 <_Z10StringFromdi+0x78>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	ed97 0b00 	vldr	d0, [r7]
 80104c2:	4798      	blx	r3
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bf14      	ite	ne
 80104ca:	2301      	movne	r3, #1
 80104cc:	2300      	moveq	r3, #0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d004      	beq.n	80104de <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 80104d4:	490b      	ldr	r1, [pc, #44]	; (8010504 <_Z10StringFromdi+0x7c>)
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f7fe ff59 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80104dc:	e008      	b.n	80104f0 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104e4:	e9cd 2300 	strd	r2, r3, [sp]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	4907      	ldr	r1, [pc, #28]	; (8010508 <_Z10StringFromdi+0x80>)
 80104ec:	f000 f80e 	bl	801050c <_Z16StringFromFormatPKcz>
}
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	3710      	adds	r7, #16
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	200000e8 	.word	0x200000e8
 80104fc:	080275c4 	.word	0x080275c4
 8010500:	200000ec 	.word	0x200000ec
 8010504:	080275d8 	.word	0x080275d8
 8010508:	080275e8 	.word	0x080275e8

0801050c <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 801050c:	b40e      	push	{r1, r2, r3}
 801050e:	b580      	push	{r7, lr}
 8010510:	b087      	sub	sp, #28
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 8010516:	4910      	ldr	r1, [pc, #64]	; (8010558 <_Z16StringFromFormatPKcz+0x4c>)
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7fe ff38 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 801051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010522:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8010524:	f107 0310 	add.w	r3, r7, #16
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801052c:	4618      	mov	r0, r3
 801052e:	f000 f839 	bl	80105a4 <_Z17VStringFromFormatPKcSt9__va_list>
 8010532:	f107 0310 	add.w	r3, r7, #16
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7fe ff94 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801053e:	f107 0310 	add.w	r3, r7, #16
 8010542:	4618      	mov	r0, r3
 8010544:	f7ff fadb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8010548:	bf00      	nop
}
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	371c      	adds	r7, #28
 801054e:	46bd      	mov	sp, r7
 8010550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010554:	b003      	add	sp, #12
 8010556:	4770      	bx	lr
 8010558:	08027550 	.word	0x08027550

0801055c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	683a      	ldr	r2, [r7, #0]
 801056a:	4904      	ldr	r1, [pc, #16]	; (801057c <_Z10StringFromj+0x20>)
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff ffcd 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	080275f4 	.word	0x080275f4

08010580 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	4904      	ldr	r1, [pc, #16]	; (80105a0 <_Z10StringFromm+0x20>)
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff ffbb 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	080275f8 	.word	0x080275f8

080105a4 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b0a7      	sub	sp, #156	; 0x9c
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 80105b4:	492e      	ldr	r1, [pc, #184]	; (8010670 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f7fe fee9 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 80105bc:	4b2d      	ldr	r3, [pc, #180]	; (8010674 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 80105be:	681c      	ldr	r4, [r3, #0]
 80105c0:	f107 0014 	add.w	r0, r7, #20
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	2164      	movs	r1, #100	; 0x64
 80105ca:	47a0      	blx	r4
 80105cc:	4603      	mov	r3, r0
 80105ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 80105d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105d6:	2b63      	cmp	r3, #99	; 0x63
 80105d8:	d813      	bhi.n	8010602 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 80105da:	f107 0214 	add.w	r2, r7, #20
 80105de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe fed2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80105ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80105ee:	4619      	mov	r1, r3
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7fe ff38 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80105f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff fa7f 	bl	800fafe <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 8010600:	e031      	b.n	8010666 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 8010602:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010606:	3301      	adds	r3, #1
 8010608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 801060c:	f240 32c3 	movw	r2, #963	; 0x3c3
 8010610:	4919      	ldr	r1, [pc, #100]	; (8010678 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8010612:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010616:	f7fe fc3f 	bl	800ee98 <_ZN12SimpleString17allocStringBufferEjPKcj>
 801061a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 801061e:	4b15      	ldr	r3, [pc, #84]	; (8010674 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8010620:	681c      	ldr	r4, [r3, #0]
 8010622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801062a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801062e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8010630:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010634:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe fea8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801063e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010642:	4619      	mov	r1, r3
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7fe ff0e 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801064a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fa55 	bl	800fafe <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8010654:	f240 33c7 	movw	r3, #967	; 0x3c7
 8010658:	4a07      	ldr	r2, [pc, #28]	; (8010678 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 801065a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801065e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010662:	f7fe fc2d 	bl	800eec0 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8010666:	bf00      	nop
}
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	379c      	adds	r7, #156	; 0x9c
 801066c:	46bd      	mov	sp, r7
 801066e:	bd90      	pop	{r4, r7, pc}
 8010670:	08027550 	.word	0x08027550
 8010674:	200000b0 	.word	0x200000b0
 8010678:	08027490 	.word	0x08027490

0801067c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b08a      	sub	sp, #40	; 0x28
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8010688:	491f      	ldr	r1, [pc, #124]	; (8010708 <_Z16StringFromBinaryPKhj+0x8c>)
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f7fe fe7f 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8010690:	2300      	movs	r3, #0
 8010692:	627b      	str	r3, [r7, #36]	; 0x24
 8010694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	429a      	cmp	r2, r3
 801069a:	d219      	bcs.n	80106d0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	4413      	add	r3, r2
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	461a      	mov	r2, r3
 80106a6:	f107 0314 	add.w	r3, r7, #20
 80106aa:	4918      	ldr	r1, [pc, #96]	; (801070c <_Z16StringFromBinaryPKhj+0x90>)
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7ff ff2d 	bl	801050c <_Z16StringFromFormatPKcz>
 80106b2:	f107 0314 	add.w	r3, r7, #20
 80106b6:	4619      	mov	r1, r3
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f7ff fa9d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80106be:	f107 0314 	add.w	r3, r7, #20
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7ff fa1b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	3301      	adds	r3, #1
 80106cc:	627b      	str	r3, [r7, #36]	; 0x24
 80106ce:	e7e1      	b.n	8010694 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f7ff f9f3 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80106d6:	4603      	mov	r3, r0
 80106d8:	3b01      	subs	r3, #1
 80106da:	f107 001c 	add.w	r0, r7, #28
 80106de:	2200      	movs	r2, #0
 80106e0:	68f9      	ldr	r1, [r7, #12]
 80106e2:	f7ff fb15 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 80106e6:	f107 031c 	add.w	r3, r7, #28
 80106ea:	4619      	mov	r1, r3
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f7fe feba 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80106f2:	f107 031c 	add.w	r3, r7, #28
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fa01 	bl	800fafe <_ZN12SimpleStringD1Ev>

    return result;
 80106fc:	bf00      	nop
}
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	3728      	adds	r7, #40	; 0x28
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	08027550 	.word	0x08027550
 801070c:	080275fc 	.word	0x080275fc

08010710 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d006      	beq.n	8010730 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	68b9      	ldr	r1, [r7, #8]
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff ffa7 	bl	801067c <_Z16StringFromBinaryPKhj>
 801072e:	e004      	b.n	801073a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4904      	ldr	r1, [pc, #16]	; (8010744 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8010734:	4618      	mov	r0, r3
 8010736:	f7ff fc6f 	bl	8010018 <_Z10StringFromPKc>
}
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	08027570 	.word	0x08027570

08010748 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b088      	sub	sp, #32
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	4913      	ldr	r1, [pc, #76]	; (80107a8 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 801075a:	4618      	mov	r0, r3
 801075c:	f7ff fed6 	bl	801050c <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b80      	cmp	r3, #128	; 0x80
 8010764:	bf28      	it	cs
 8010766:	2380      	movcs	r3, #128	; 0x80
 8010768:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 801076a:	f107 0314 	add.w	r3, r7, #20
 801076e:	69fa      	ldr	r2, [r7, #28]
 8010770:	68b9      	ldr	r1, [r7, #8]
 8010772:	4618      	mov	r0, r3
 8010774:	f7ff ffcc 	bl	8010710 <_Z22StringFromBinaryOrNullPKhj>
 8010778:	f107 0314 	add.w	r3, r7, #20
 801077c:	4619      	mov	r1, r3
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f7ff fa3a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8010784:	f107 0314 	add.w	r3, r7, #20
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff f9b8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	429a      	cmp	r2, r3
 8010794:	d903      	bls.n	801079e <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 8010796:	4905      	ldr	r1, [pc, #20]	; (80107ac <_Z24StringFromBinaryWithSizePKhj+0x64>)
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f7ff fa3f 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 801079e:	bf00      	nop
}
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	08027604 	.word	0x08027604
 80107ac:	08027620 	.word	0x08027620

080107b0 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d006      	beq.n	80107d0 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	68b9      	ldr	r1, [r7, #8]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff ffbd 	bl	8010748 <_Z24StringFromBinaryWithSizePKhj>
 80107ce:	e004      	b.n	80107da <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	4904      	ldr	r1, [pc, #16]	; (80107e4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7ff fc1f 	bl	8010018 <_Z10StringFromPKc>
}
 80107da:	68f8      	ldr	r0, [r7, #12]
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	08027570 	.word	0x08027570

080107e8 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
 80107f4:	603b      	str	r3, [r7, #0]
    SimpleString result;
 80107f6:	4925      	ldr	r1, [pc, #148]	; (801088c <_Z20StringFromMaskedBitsmmj+0xa4>)
 80107f8:	68f8      	ldr	r0, [r7, #12]
 80107fa:	f7fe fdc8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b04      	cmp	r3, #4
 8010802:	d802      	bhi.n	801080a <_Z20StringFromMaskedBitsmmj+0x22>
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	00db      	lsls	r3, r3, #3
 8010808:	e000      	b.n	801080c <_Z20StringFromMaskedBitsmmj+0x24>
 801080a:	2320      	movs	r3, #32
 801080c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 801080e:	69bb      	ldr	r3, [r7, #24]
 8010810:	3b01      	subs	r3, #1
 8010812:	2201      	movs	r2, #1
 8010814:	fa02 f303 	lsl.w	r3, r2, r3
 8010818:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 801081a:	2300      	movs	r3, #0
 801081c:	61fb      	str	r3, [r7, #28]
 801081e:	69fa      	ldr	r2, [r7, #28]
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	429a      	cmp	r2, r3
 8010824:	d22d      	bcs.n	8010882 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	4013      	ands	r3, r2
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00c      	beq.n	801084a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	4013      	ands	r3, r2
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <_Z20StringFromMaskedBitsmmj+0x56>
 801083a:	4b15      	ldr	r3, [pc, #84]	; (8010890 <_Z20StringFromMaskedBitsmmj+0xa8>)
 801083c:	e000      	b.n	8010840 <_Z20StringFromMaskedBitsmmj+0x58>
 801083e:	4b15      	ldr	r3, [pc, #84]	; (8010894 <_Z20StringFromMaskedBitsmmj+0xac>)
 8010840:	4619      	mov	r1, r3
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7ff f9ea 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
 8010848:	e003      	b.n	8010852 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 801084a:	4913      	ldr	r1, [pc, #76]	; (8010898 <_Z20StringFromMaskedBitsmmj+0xb0>)
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f7ff f9e5 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	f003 0307 	and.w	r3, r3, #7
 8010858:	2b07      	cmp	r3, #7
 801085a:	d108      	bne.n	801086e <_Z20StringFromMaskedBitsmmj+0x86>
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	3b01      	subs	r3, #1
 8010860:	69fa      	ldr	r2, [r7, #28]
 8010862:	429a      	cmp	r2, r3
 8010864:	d003      	beq.n	801086e <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8010866:	490d      	ldr	r1, [pc, #52]	; (801089c <_Z20StringFromMaskedBitsmmj+0xb4>)
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7ff f9d7 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	3301      	adds	r3, #1
 801087e:	61fb      	str	r3, [r7, #28]
 8010880:	e7cd      	b.n	801081e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 8010882:	bf00      	nop
}
 8010884:	68f8      	ldr	r0, [r7, #12]
 8010886:	3720      	adds	r7, #32
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	08027550 	.word	0x08027550
 8010890:	08027628 	.word	0x08027628
 8010894:	0802762c 	.word	0x0802762c
 8010898:	08027630 	.word	0x08027630
 801089c:	08027634 	.word	0x08027634

080108a0 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	4b18      	ldr	r3, [pc, #96]	; (8010910 <_Z23StringFromOrdinalNumberj+0x70>)
 80108ae:	fba3 1302 	umull	r1, r3, r3, r2
 80108b2:	08d9      	lsrs	r1, r3, #3
 80108b4:	460b      	mov	r3, r1
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	440b      	add	r3, r1
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	2b0a      	cmp	r3, #10
 80108c4:	d905      	bls.n	80108d2 <_Z23StringFromOrdinalNumberj+0x32>
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	2b0d      	cmp	r3, #13
 80108ca:	d802      	bhi.n	80108d2 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 80108cc:	4b11      	ldr	r3, [pc, #68]	; (8010914 <_Z23StringFromOrdinalNumberj+0x74>)
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	e013      	b.n	80108fa <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b03      	cmp	r3, #3
 80108d6:	d102      	bne.n	80108de <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 80108d8:	4b0f      	ldr	r3, [pc, #60]	; (8010918 <_Z23StringFromOrdinalNumberj+0x78>)
 80108da:	60fb      	str	r3, [r7, #12]
 80108dc:	e00d      	b.n	80108fa <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	d102      	bne.n	80108ea <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 80108e4:	4b0d      	ldr	r3, [pc, #52]	; (801091c <_Z23StringFromOrdinalNumberj+0x7c>)
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	e007      	b.n	80108fa <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d102      	bne.n	80108f6 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 80108f0:	4b0b      	ldr	r3, [pc, #44]	; (8010920 <_Z23StringFromOrdinalNumberj+0x80>)
 80108f2:	60fb      	str	r3, [r7, #12]
 80108f4:	e001      	b.n	80108fa <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 80108f6:	4b07      	ldr	r3, [pc, #28]	; (8010914 <_Z23StringFromOrdinalNumberj+0x74>)
 80108f8:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	683a      	ldr	r2, [r7, #0]
 8010900:	4908      	ldr	r1, [pc, #32]	; (8010924 <_Z23StringFromOrdinalNumberj+0x84>)
 8010902:	f7ff fe03 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	cccccccd 	.word	0xcccccccd
 8010914:	08027638 	.word	0x08027638
 8010918:	0802763c 	.word	0x0802763c
 801091c:	08027640 	.word	0x08027640
 8010920:	08027644 	.word	0x08027644
 8010924:	08027648 	.word	0x08027648

08010928 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	3304      	adds	r3, #4
 8010934:	4907      	ldr	r1, [pc, #28]	; (8010954 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fd29 	bl	800f38e <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	601a      	str	r2, [r3, #0]
    size_ = 0;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	60da      	str	r2, [r3, #12]
}
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4618      	mov	r0, r3
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	08027550 	.word	0x08027550

08010958 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8010958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d01e      	beq.n	80109a8 <_ZN22SimpleStringCollection8allocateEj+0x50>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	3b04      	subs	r3, #4
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	18d4      	adds	r4, r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	429c      	cmp	r4, r3
 8010980:	d004      	beq.n	801098c <_ZN22SimpleStringCollection8allocateEj+0x34>
 8010982:	3c08      	subs	r4, #8
 8010984:	4620      	mov	r0, r4
 8010986:	f7ff f8ba 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801098a:	e7f6      	b.n	801097a <_ZN22SimpleStringCollection8allocateEj+0x22>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f1a3 0208 	sub.w	r2, r3, #8
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3b04      	subs	r3, #4
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	3301      	adds	r3, #1
 801099e:	00db      	lsls	r3, r3, #3
 80109a0:	4619      	mov	r1, r3
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7fc f976 	bl	800cc94 <_ZdaPvj>

    size_ = _size;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	683a      	ldr	r2, [r7, #0]
 80109ac:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	68dc      	ldr	r4, [r3, #12]
 80109b2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 80109b6:	d202      	bcs.n	80109be <_ZN22SimpleStringCollection8allocateEj+0x66>
 80109b8:	1c63      	adds	r3, r4, #1
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	e001      	b.n	80109c2 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 80109be:	f04f 33ff 	mov.w	r3, #4294967295
 80109c2:	f240 4227 	movw	r2, #1063	; 0x427
 80109c6:	4910      	ldr	r1, [pc, #64]	; (8010a08 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fc f941 	bl	800cc50 <_ZnajPKci>
 80109ce:	4605      	mov	r5, r0
 80109d0:	1d2b      	adds	r3, r5, #4
 80109d2:	3b04      	subs	r3, #4
 80109d4:	2208      	movs	r2, #8
 80109d6:	601a      	str	r2, [r3, #0]
 80109d8:	1d2b      	adds	r3, r5, #4
 80109da:	601c      	str	r4, [r3, #0]
 80109dc:	f105 0308 	add.w	r3, r5, #8
 80109e0:	1e62      	subs	r2, r4, #1
 80109e2:	4614      	mov	r4, r2
 80109e4:	461e      	mov	r6, r3
 80109e6:	2c00      	cmp	r4, #0
 80109e8:	db06      	blt.n	80109f8 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 80109ea:	4908      	ldr	r1, [pc, #32]	; (8010a0c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 80109ec:	4630      	mov	r0, r6
 80109ee:	f7fe fcce 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80109f2:	3608      	adds	r6, #8
 80109f4:	3c01      	subs	r4, #1
 80109f6:	e7f6      	b.n	80109e6 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 80109f8:	f105 0208 	add.w	r2, r5, #8
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	601a      	str	r2, [r3, #0]
}
 8010a00:	bf00      	nop
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a08:	08027490 	.word	0x08027490
 8010a0c:	08027550 	.word	0x08027550

08010a10 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 8010a10:	b590      	push	{r4, r7, lr}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d01e      	beq.n	8010a5e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	3b04      	subs	r3, #4
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	00db      	lsls	r3, r3, #3
 8010a2e:	18d4      	adds	r4, r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	429c      	cmp	r4, r3
 8010a36:	d004      	beq.n	8010a42 <_ZN22SimpleStringCollectionD1Ev+0x32>
 8010a38:	3c08      	subs	r4, #8
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f7ff f85f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010a40:	e7f6      	b.n	8010a30 <_ZN22SimpleStringCollectionD1Ev+0x20>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f1a3 0208 	sub.w	r2, r3, #8
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3b04      	subs	r3, #4
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	3301      	adds	r3, #1
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	4619      	mov	r1, r3
 8010a58:	4610      	mov	r0, r2
 8010a5a:	f7fc f91b 	bl	800cc94 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	3304      	adds	r3, #4
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7ff f84b 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	370c      	adds	r7, #12
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd90      	pop	{r4, r7, pc}

08010a72 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 8010a72:	b480      	push	{r7}
 8010a74:	b083      	sub	sp, #12
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
    return size_;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	68db      	ldr	r3, [r3, #12]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	370c      	adds	r7, #12
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
	...

08010a8c <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8010a8c:	b590      	push	{r4, r7, lr}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	683a      	ldr	r2, [r7, #0]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d315      	bcc.n	8010acc <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	1d1c      	adds	r4, r3, #4
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	490d      	ldr	r1, [pc, #52]	; (8010ae0 <_ZN22SimpleStringCollectionixEj+0x54>)
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fe fc6f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8010ab0:	f107 0308 	add.w	r3, r7, #8
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f7fe fcd5 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8010abc:	f107 0308 	add.w	r3, r7, #8
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff f81c 	bl	800fafe <_ZN12SimpleStringD1Ev>
        return empty_;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	3304      	adds	r3, #4
 8010aca:	e004      	b.n	8010ad6 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	00db      	lsls	r3, r3, #3
 8010ad4:	4413      	add	r3, r2
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3714      	adds	r7, #20
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd90      	pop	{r4, r7, pc}
 8010ade:	bf00      	nop
 8010ae0:	08027550 	.word	0x08027550

08010ae4 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fa fb88 	bl	800b204 <_ZN17ConsoleTestOutputC1Ev>
 8010af4:	4a08      	ldr	r2, [pc, #32]	; (8010b18 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	601a      	str	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	611a      	str	r2, [r3, #16]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	3314      	adds	r3, #20
 8010b04:	4905      	ldr	r1, [pc, #20]	; (8010b1c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fe fc41 	bl	800f38e <_ZN12SimpleStringC1EPKc>
{
}
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	0802b8b8 	.word	0x0802b8b8
 8010b1c:	08027650 	.word	0x08027650

08010b20 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	4a08      	ldr	r2, [pc, #32]	; (8010b4c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	3314      	adds	r3, #20
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe ffe3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fa fb74 	bl	800b228 <_ZN17ConsoleTestOutputD1Ev>
{
}
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	0802b8b8 	.word	0x0802b8b8

08010b50 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
}
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff ffe1 	bl	8010b20 <_ZN18TeamCityTestOutputD1Ev>
 8010b5e:	211c      	movs	r1, #28
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7fc f865 	bl	800cc30 <_ZdlPvj>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b086      	sub	sp, #24
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	332c      	adds	r3, #44	; 0x2c
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	492b      	ldr	r1, [pc, #172]	; (8010c34 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 8010b86:	4610      	mov	r0, r2
 8010b88:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8010b8a:	f107 0308 	add.w	r3, r7, #8
 8010b8e:	6839      	ldr	r1, [r7, #0]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f004 fdf7 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 8010b96:	f107 0308 	add.w	r3, r7, #8
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fe ff82 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 f919 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010baa:	f107 0308 	add.w	r3, r7, #8
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fe ffa5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print("']\n");
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	332c      	adds	r3, #44	; 0x2c
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	491e      	ldr	r1, [pc, #120]	; (8010c38 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	4798      	blx	r3
    if (!test.willRun()) {
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	3318      	adds	r3, #24
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	6838      	ldr	r0, [r7, #0]
 8010bce:	4798      	blx	r3
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	f083 0301 	eor.w	r3, r3, #1
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d024      	beq.n	8010c26 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	332c      	adds	r3, #44	; 0x2c
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4915      	ldr	r1, [pc, #84]	; (8010c3c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8010be8:	4610      	mov	r0, r2
 8010bea:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8010bec:	f107 0310 	add.w	r3, r7, #16
 8010bf0:	6839      	ldr	r1, [r7, #0]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f004 fdc6 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 8010bf8:	f107 0310 	add.w	r3, r7, #16
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe ff51 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010c02:	4603      	mov	r3, r0
 8010c04:	4619      	mov	r1, r3
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 f8e8 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010c0c:	f107 0310 	add.w	r3, r7, #16
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe ff74 	bl	800fafe <_ZN12SimpleStringD1Ev>
        print("']\n");
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	332c      	adds	r3, #44	; 0x2c
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4905      	ldr	r1, [pc, #20]	; (8010c38 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8010c22:	4610      	mov	r0, r2
 8010c24:	4798      	blx	r3
    }
    currtest_ = &test;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	683a      	ldr	r2, [r7, #0]
 8010c2a:	611a      	str	r2, [r3, #16]
}
 8010c2c:	bf00      	nop
 8010c2e:	3718      	adds	r7, #24
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	08027654 	.word	0x08027654
 8010c38:	08027674 	.word	0x08027674
 8010c3c:	08027678 	.word	0x08027678

08010c40 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8010c40:	b5b0      	push	{r4, r5, r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d03b      	beq.n	8010cca <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	332c      	adds	r3, #44	; 0x2c
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	491d      	ldr	r1, [pc, #116]	; (8010cd4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8010c5e:	4610      	mov	r0, r2
 8010c60:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	691a      	ldr	r2, [r3, #16]
 8010c66:	f107 0308 	add.w	r3, r7, #8
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f004 fd89 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 8010c72:	f107 0308 	add.w	r3, r7, #8
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fe ff14 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 f8ab 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe ff37 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	332c      	adds	r3, #44	; 0x2c
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	490f      	ldr	r1, [pc, #60]	; (8010cd8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8010c9c:	4610      	mov	r0, r2
 8010c9e:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8010ca0:	687d      	ldr	r5, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	3334      	adds	r3, #52	; 0x34
 8010ca8:	681c      	ldr	r4, [r3, #0]
 8010caa:	6838      	ldr	r0, [r7, #0]
 8010cac:	f004 fa0a 	bl	80150c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	47a0      	blx	r4
    print("']\n");
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	332c      	adds	r3, #44	; 0x2c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4906      	ldr	r1, [pc, #24]	; (8010cdc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8010cc4:	4610      	mov	r0, r2
 8010cc6:	4798      	blx	r3
 8010cc8:	e000      	b.n	8010ccc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8010cca:	bf00      	nop
}
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	08027698 	.word	0x08027698
 8010cd8:	080276b8 	.word	0x080276b8
 8010cdc:	08027674 	.word	0x08027674

08010ce0 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8010ce0:	b590      	push	{r4, r7, lr}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f103 0414 	add.w	r4, r3, #20
 8010cf0:	f107 0308 	add.w	r3, r7, #8
 8010cf4:	6839      	ldr	r1, [r7, #0]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f004 fd53 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 8010cfc:	f107 0308 	add.w	r3, r7, #8
 8010d00:	4619      	mov	r1, r3
 8010d02:	4620      	mov	r0, r4
 8010d04:	f7fe fbaf 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8010d08:	f107 0308 	add.w	r3, r7, #8
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fe fef6 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	332c      	adds	r3, #44	; 0x2c
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	490c      	ldr	r1, [pc, #48]	; (8010d50 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 8010d1e:	4610      	mov	r0, r2
 8010d20:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	3314      	adds	r3, #20
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe febc 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 f853 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	332c      	adds	r3, #44	; 0x2c
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4904      	ldr	r1, [pc, #16]	; (8010d54 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 8010d42:	4610      	mov	r0, r2
 8010d44:	4798      	blx	r3
}
 8010d46:	bf00      	nop
 8010d48:	3714      	adds	r7, #20
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd90      	pop	{r4, r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	080276c8 	.word	0x080276c8
 8010d54:	08027674 	.word	0x08027674

08010d58 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010d58:	b590      	push	{r4, r7, lr}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f103 0414 	add.w	r4, r3, #20
 8010d68:	f107 0308 	add.w	r3, r7, #8
 8010d6c:	4918      	ldr	r1, [pc, #96]	; (8010dd0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fe fb0d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8010d74:	f107 0308 	add.w	r3, r7, #8
 8010d78:	4619      	mov	r1, r3
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f7fe fecb 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8010d80:	4603      	mov	r3, r0
 8010d82:	461c      	mov	r4, r3
 8010d84:	f107 0308 	add.w	r3, r7, #8
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fe feb8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8010d8e:	2c00      	cmp	r4, #0
 8010d90:	d11a      	bne.n	8010dc8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	332c      	adds	r3, #44	; 0x2c
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	490d      	ldr	r1, [pc, #52]	; (8010dd4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 8010d9e:	4610      	mov	r0, r2
 8010da0:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3314      	adds	r3, #20
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fe7c 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010dac:	4603      	mov	r3, r0
 8010dae:	4619      	mov	r1, r3
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 f813 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	332c      	adds	r3, #44	; 0x2c
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4905      	ldr	r1, [pc, #20]	; (8010dd8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 8010dc2:	4610      	mov	r0, r2
 8010dc4:	4798      	blx	r3
 8010dc6:	e000      	b.n	8010dca <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8010dc8:	bf00      	nop
}
 8010dca:	3714      	adds	r7, #20
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd90      	pop	{r4, r7, pc}
 8010dd0:	08027650 	.word	0x08027650
 8010dd4:	080276ec 	.word	0x080276ec
 8010dd8:	08027674 	.word	0x08027674

08010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b084      	sub	sp, #16
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d03f      	beq.n	8010e6e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	2b27      	cmp	r3, #39	; 0x27
 8010df4:	d00b      	beq.n	8010e0e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2b7c      	cmp	r3, #124	; 0x7c
 8010dfc:	d007      	beq.n	8010e0e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	2b5b      	cmp	r3, #91	; 0x5b
 8010e04:	d003      	beq.n	8010e0e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b5d      	cmp	r3, #93	; 0x5d
 8010e0c:	d107      	bne.n	8010e1e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 8010e0e:	237c      	movs	r3, #124	; 0x7c
 8010e10:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	73bb      	strb	r3, [r7, #14]
 8010e1c:	e01a      	b.n	8010e54 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	2b0d      	cmp	r3, #13
 8010e24:	d106      	bne.n	8010e34 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8010e26:	237c      	movs	r3, #124	; 0x7c
 8010e28:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8010e2a:	2372      	movs	r3, #114	; 0x72
 8010e2c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73bb      	strb	r3, [r7, #14]
 8010e32:	e00f      	b.n	8010e54 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	2b0a      	cmp	r3, #10
 8010e3a:	d106      	bne.n	8010e4a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8010e3c:	237c      	movs	r3, #124	; 0x7c
 8010e3e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8010e40:	236e      	movs	r3, #110	; 0x6e
 8010e42:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	73bb      	strb	r3, [r7, #14]
 8010e48:	e004      	b.n	8010e54 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8010e54:	687a      	ldr	r2, [r7, #4]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3328      	adds	r3, #40	; 0x28
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f107 010c 	add.w	r1, r7, #12
 8010e62:	4610      	mov	r0, r2
 8010e64:	4798      	blx	r3
        s++;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	603b      	str	r3, [r7, #0]
    while (*s) {
 8010e6c:	e7bb      	b.n	8010de6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 8010e6e:	bf00      	nop
 8010e70:	3710      	adds	r7, #16
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
	...

08010e78 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8010e78:	b5b0      	push	{r4, r5, r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 8010e82:	687a      	ldr	r2, [r7, #4]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	332c      	adds	r3, #44	; 0x2c
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4968      	ldr	r1, [pc, #416]	; (8011030 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 8010e8e:	4610      	mov	r0, r2
 8010e90:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3310      	adds	r3, #16
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f107 0208 	add.w	r2, r7, #8
 8010e9e:	6839      	ldr	r1, [r7, #0]
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	4798      	blx	r3
 8010ea4:	f107 0308 	add.w	r3, r7, #8
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fe fdfb 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7ff ff92 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010eb8:	f107 0308 	add.w	r3, r7, #8
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fe fe1e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print("' message='");
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	332c      	adds	r3, #44	; 0x2c
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4959      	ldr	r1, [pc, #356]	; (8011034 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 8010ece:	4610      	mov	r0, r2
 8010ed0:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 8010ed2:	6838      	ldr	r0, [r7, #0]
 8010ed4:	f000 fa15 	bl	8011302 <_ZNK11TestFailure17isOutsideTestFileEv>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d105      	bne.n	8010eea <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 8010ede:	6838      	ldr	r0, [r7, #0]
 8010ee0:	f000 fa21 	bl	8011326 <_ZNK11TestFailure18isInHelperFunctionEv>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8010eea:	2301      	movs	r3, #1
 8010eec:	e000      	b.n	8010ef0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d042      	beq.n	8010f7a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	332c      	adds	r3, #44	; 0x2c
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	494e      	ldr	r1, [pc, #312]	; (8011038 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8010f00:	4610      	mov	r0, r2
 8010f02:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8010f04:	687d      	ldr	r5, [r7, #4]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	332c      	adds	r3, #44	; 0x2c
 8010f0c:	681c      	ldr	r4, [r3, #0]
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	331c      	adds	r3, #28
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	f107 0210 	add.w	r2, r7, #16
 8010f1a:	6839      	ldr	r1, [r7, #0]
 8010f1c:	4610      	mov	r0, r2
 8010f1e:	4798      	blx	r3
 8010f20:	f107 0310 	add.w	r3, r7, #16
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7fe fdbd 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4628      	mov	r0, r5
 8010f30:	47a0      	blx	r4
 8010f32:	f107 0310 	add.w	r3, r7, #16
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fe fde1 	bl	800fafe <_ZN12SimpleStringD1Ev>
        print(":");
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	332c      	adds	r3, #44	; 0x2c
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	493d      	ldr	r1, [pc, #244]	; (801103c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8010f48:	4610      	mov	r0, r2
 8010f4a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8010f4c:	687d      	ldr	r5, [r7, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3334      	adds	r3, #52	; 0x34
 8010f54:	681c      	ldr	r4, [r3, #0]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	3320      	adds	r3, #32
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	6838      	ldr	r0, [r7, #0]
 8010f60:	4798      	blx	r3
 8010f62:	4603      	mov	r3, r0
 8010f64:	4619      	mov	r1, r3
 8010f66:	4628      	mov	r0, r5
 8010f68:	47a0      	blx	r4
        print("): ");
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	332c      	adds	r3, #44	; 0x2c
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4932      	ldr	r1, [pc, #200]	; (8011040 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3308      	adds	r3, #8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f107 0218 	add.w	r2, r7, #24
 8010f86:	6839      	ldr	r1, [r7, #0]
 8010f88:	4610      	mov	r0, r2
 8010f8a:	4798      	blx	r3
 8010f8c:	f107 0318 	add.w	r3, r7, #24
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fe fd87 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8010f96:	4603      	mov	r3, r0
 8010f98:	4619      	mov	r1, r3
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f7ff ff1e 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010fa0:	f107 0318 	add.w	r3, r7, #24
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fe fdaa 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print(":");
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	332c      	adds	r3, #44	; 0x2c
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	4921      	ldr	r1, [pc, #132]	; (801103c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8010fba:	687d      	ldr	r5, [r7, #4]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3334      	adds	r3, #52	; 0x34
 8010fc2:	681c      	ldr	r4, [r3, #0]
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	3314      	adds	r3, #20
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	6838      	ldr	r0, [r7, #0]
 8010fce:	4798      	blx	r3
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	47a0      	blx	r4

    print("' details='");
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	332c      	adds	r3, #44	; 0x2c
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	4918      	ldr	r1, [pc, #96]	; (8011044 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8010fe4:	4610      	mov	r0, r2
 8010fe6:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	3318      	adds	r3, #24
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	f107 0220 	add.w	r2, r7, #32
 8010ff4:	6839      	ldr	r1, [r7, #0]
 8010ff6:	4610      	mov	r0, r2
 8010ff8:	4798      	blx	r3
 8010ffa:	f107 0320 	add.w	r3, r7, #32
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fe fd50 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011004:	4603      	mov	r3, r0
 8011006:	4619      	mov	r1, r3
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff fee7 	bl	8010ddc <_ZN18TeamCityTestOutput12printEscapedEPKc>
 801100e:	f107 0320 	add.w	r3, r7, #32
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fd73 	bl	800fafe <_ZN12SimpleStringD1Ev>
    print("']\n");
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	332c      	adds	r3, #44	; 0x2c
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4909      	ldr	r1, [pc, #36]	; (8011048 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8011024:	4610      	mov	r0, r2
 8011026:	4798      	blx	r3
}
 8011028:	bf00      	nop
 801102a:	3728      	adds	r7, #40	; 0x28
 801102c:	46bd      	mov	sp, r7
 801102e:	bdb0      	pop	{r4, r5, r7, pc}
 8011030:	08027710 	.word	0x08027710
 8011034:	08027730 	.word	0x08027730
 8011038:	0802773c 	.word	0x0802773c
 801103c:	0802774c 	.word	0x0802774c
 8011040:	08027750 	.word	0x08027750
 8011044:	08027754 	.word	0x08027754
 8011048:	08027674 	.word	0x08027674

0801104c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8011058:	4a1a      	ldr	r2, [pc, #104]	; (80110c4 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	601a      	str	r2, [r3, #0]
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	3314      	adds	r3, #20
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	3204      	adds	r2, #4
 801106a:	68b9      	ldr	r1, [r7, #8]
 801106c:	4610      	mov	r0, r2
 801106e:	4798      	blx	r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	330c      	adds	r3, #12
 8011074:	68b9      	ldr	r1, [r7, #8]
 8011076:	4618      	mov	r0, r3
 8011078:	f004 fb84 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	3314      	adds	r3, #20
 8011080:	68b9      	ldr	r1, [r7, #8]
 8011082:	4618      	mov	r0, r3
 8011084:	f004 fc4f 	bl	8015926 <_ZNK10UtestShell7getFileEv>
 8011088:	68b8      	ldr	r0, [r7, #8]
 801108a:	f004 fc5b 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 801108e:	4602      	mov	r2, r0
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	61da      	str	r2, [r3, #28]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3320      	adds	r3, #32
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	4618      	mov	r0, r3
 801109c:	f004 fc43 	bl	8015926 <_ZNK10UtestShell7getFileEv>
 80110a0:	68b8      	ldr	r0, [r7, #8]
 80110a2:	f004 fc4f 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 80110a6:	4602      	mov	r2, r0
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	629a      	str	r2, [r3, #40]	; 0x28
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	332c      	adds	r3, #44	; 0x2c
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe f9bf 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
{
}
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	4618      	mov	r0, r3
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	0802bb84 	.word	0x0802bb84

080110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	60f8      	str	r0, [r7, #12]
 80110d0:	60b9      	str	r1, [r7, #8]
 80110d2:	607a      	str	r2, [r7, #4]
 80110d4:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 80110d6:	4a19      	ldr	r2, [pc, #100]	; (801113c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	601a      	str	r2, [r3, #0]
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	3314      	adds	r3, #20
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	3204      	adds	r2, #4
 80110e8:	68b9      	ldr	r1, [r7, #8]
 80110ea:	4610      	mov	r0, r2
 80110ec:	4798      	blx	r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	330c      	adds	r3, #12
 80110f2:	68b9      	ldr	r1, [r7, #8]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f004 fb45 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3314      	adds	r3, #20
 80110fe:	6879      	ldr	r1, [r7, #4]
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe f944 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	683a      	ldr	r2, [r7, #0]
 801110a:	61da      	str	r2, [r3, #28]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	3320      	adds	r3, #32
 8011110:	68b9      	ldr	r1, [r7, #8]
 8011112:	4618      	mov	r0, r3
 8011114:	f004 fc07 	bl	8015926 <_ZNK10UtestShell7getFileEv>
 8011118:	68b8      	ldr	r0, [r7, #8]
 801111a:	f004 fc13 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 801111e:	4602      	mov	r2, r0
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	629a      	str	r2, [r3, #40]	; 0x28
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	332c      	adds	r3, #44	; 0x2c
 8011128:	4905      	ldr	r1, [pc, #20]	; (8011140 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 801112a:	4618      	mov	r0, r3
 801112c:	f7fe f92f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
{
}
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	0802bb84 	.word	0x0802bb84
 8011140:	08027760 	.word	0x08027760

08011144 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 801114e:	4a1e      	ldr	r2, [pc, #120]	; (80111c8 <_ZN11TestFailureC1ERKS_+0x84>)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	601a      	str	r2, [r3, #0]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	1d1a      	adds	r2, r3, #4
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	3304      	adds	r3, #4
 801115c:	4619      	mov	r1, r3
 801115e:	4610      	mov	r0, r2
 8011160:	f7fe f969 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f103 020c 	add.w	r2, r3, #12
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	330c      	adds	r3, #12
 801116e:	4619      	mov	r1, r3
 8011170:	4610      	mov	r0, r2
 8011172:	f7fe f960 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f103 0214 	add.w	r2, r3, #20
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	3314      	adds	r3, #20
 8011180:	4619      	mov	r1, r3
 8011182:	4610      	mov	r0, r2
 8011184:	f7fe f957 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	69da      	ldr	r2, [r3, #28]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	61da      	str	r2, [r3, #28]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f103 0220 	add.w	r2, r3, #32
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	3320      	adds	r3, #32
 801119a:	4619      	mov	r1, r3
 801119c:	4610      	mov	r0, r2
 801119e:	f7fe f94a 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	629a      	str	r2, [r3, #40]	; 0x28
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	332c      	adds	r3, #44	; 0x2c
 80111b4:	4619      	mov	r1, r3
 80111b6:	4610      	mov	r0, r2
 80111b8:	f7fe f93d 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
{
}
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	4618      	mov	r0, r3
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	0802bb84 	.word	0x0802bb84

080111cc <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	4a10      	ldr	r2, [pc, #64]	; (8011218 <_ZN11TestFailureD1Ev+0x4c>)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	332c      	adds	r3, #44	; 0x2c
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fe fc8d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	3320      	adds	r3, #32
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7fe fc88 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3314      	adds	r3, #20
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fe fc83 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	330c      	adds	r3, #12
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7fe fc7e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	3304      	adds	r3, #4
 8011206:	4618      	mov	r0, r3
 8011208:	f7fe fc79 	bl	800fafe <_ZN12SimpleStringD1Ev>
{
}
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0802bb84 	.word	0x0802bb84

0801121c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
}
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff ffd1 	bl	80111cc <_ZN11TestFailureD1Ev>
 801122a:	2134      	movs	r1, #52	; 0x34
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7fb fcff 	bl	800cc30 <_ZdlPvj>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4618      	mov	r0, r3
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
    return fileName_;
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	3314      	adds	r3, #20
 801124a:	4619      	mov	r1, r3
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7fe f8f2 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	3708      	adds	r7, #8
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b082      	sub	sp, #8
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
 8011262:	6039      	str	r1, [r7, #0]
    return testFileName_;
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	3320      	adds	r3, #32
 8011268:	4619      	mov	r1, r3
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7fe f8e3 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
    return testName_;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	3304      	adds	r3, #4
 8011286:	4619      	mov	r1, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7fe f8d4 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	3708      	adds	r7, #8
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b082      	sub	sp, #8
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	330c      	adds	r3, #12
 80112a4:	4619      	mov	r1, r3
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f7fe f8c5 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	69db      	ldr	r3, [r3, #28]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
    return message_;
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	332c      	adds	r3, #44	; 0x2c
 80112f2:	4619      	mov	r1, r3
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f7fe f89e 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	3708      	adds	r7, #8
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 8011302:	b580      	push	{r7, lr}
 8011304:	b082      	sub	sp, #8
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f103 0220 	add.w	r2, r3, #32
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	3314      	adds	r3, #20
 8011314:	4619      	mov	r1, r3
 8011316:	4610      	mov	r0, r2
 8011318:	f7fe fc42 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 801131c:	4603      	mov	r3, r0
}
 801131e:	4618      	mov	r0, r3
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8011326:	b480      	push	{r7}
 8011328:	b083      	sub	sp, #12
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	69da      	ldr	r2, [r3, #28]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011336:	429a      	cmp	r2, r3
 8011338:	bf34      	ite	cc
 801133a:	2301      	movcc	r3, #1
 801133c:	2300      	movcs	r3, #0
 801133e:	b2db      	uxtb	r3, r3
}
 8011340:	4618      	mov	r0, r3
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134a:	4770      	bx	lr

0801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
 8011358:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f7fe fba2 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011360:	4604      	mov	r4, r0
 8011362:	6838      	ldr	r0, [r7, #0]
 8011364:	f7fe fb9e 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011368:	4603      	mov	r3, r0
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	4622      	mov	r2, r4
 801136e:	4903      	ldr	r1, [pc, #12]	; (801137c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8011370:	f7ff f8cc 	bl	801050c <_Z16StringFromFormatPKcz>
}
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	bd90      	pop	{r4, r7, pc}
 801137c:	0802776c 	.word	0x0802776c

08011380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8011380:	b590      	push	{r4, r7, lr}
 8011382:	b097      	sub	sp, #92	; 0x5c
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	607a      	str	r2, [r7, #4]
 801138c:	603b      	str	r3, [r7, #0]
    SimpleString result;
 801138e:	494c      	ldr	r1, [pc, #304]	; (80114c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f7fd fffc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 8011396:	2314      	movs	r3, #20
 8011398:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 801139a:	230a      	movs	r3, #10
 801139c:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 801139e:	f107 0320 	add.w	r3, r7, #32
 80113a2:	220a      	movs	r2, #10
 80113a4:	4947      	ldr	r1, [pc, #284]	; (80114c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fe f80c 	bl	800f3c4 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80113ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113b0:	f107 0120 	add.w	r1, r7, #32
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fe fc03 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80113bc:	f107 0318 	add.w	r3, r7, #24
 80113c0:	f107 0220 	add.w	r2, r7, #32
 80113c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7fe fbfa 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80113ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fe fb93 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 80113d8:	f107 0310 	add.w	r3, r7, #16
 80113dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80113de:	493a      	ldr	r1, [pc, #232]	; (80114c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7ff f893 	bl	801050c <_Z16StringFromFormatPKcz>

    result += "\n";
 80113e6:	4939      	ldr	r1, [pc, #228]	; (80114cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7fe fc17 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 80113ee:	f107 0310 	add.w	r3, r7, #16
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7fe fb56 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80113f8:	4604      	mov	r4, r0
 80113fa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80113fe:	f107 0118 	add.w	r1, r7, #24
 8011402:	2314      	movs	r3, #20
 8011404:	683a      	ldr	r2, [r7, #0]
 8011406:	f7fe fc83 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 801140a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801140e:	4618      	mov	r0, r3
 8011410:	f7fe fb48 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011414:	4603      	mov	r3, r0
 8011416:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801141a:	4622      	mov	r2, r4
 801141c:	492c      	ldr	r1, [pc, #176]	; (80114d0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 801141e:	f7ff f875 	bl	801050c <_Z16StringFromFormatPKcz>
 8011422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011426:	4619      	mov	r1, r3
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7fe fbe5 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fb63 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011438:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801143c:	4618      	mov	r0, r3
 801143e:	f7fe fb5e 	bl	800fafe <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8011442:	f107 0310 	add.w	r3, r7, #16
 8011446:	4618      	mov	r0, r3
 8011448:	f7fe fb38 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 801144c:	4603      	mov	r3, r0
 801144e:	f103 020a 	add.w	r2, r3, #10
 8011452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011456:	491b      	ldr	r1, [pc, #108]	; (80114c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8011458:	4618      	mov	r0, r3
 801145a:	f7fd ffb3 	bl	800f3c4 <_ZN12SimpleStringC1EPKcj>
 801145e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011462:	4618      	mov	r0, r3
 8011464:	f7fe fb1e 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011468:	4602      	mov	r2, r0
 801146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801146e:	4919      	ldr	r1, [pc, #100]	; (80114d4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff f84b 	bl	801050c <_Z16StringFromFormatPKcz>
 8011476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801147a:	4619      	mov	r1, r3
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7fe fbbb 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011486:	4618      	mov	r0, r3
 8011488:	f7fe fb39 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801148c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011490:	4618      	mov	r0, r3
 8011492:	f7fe fb34 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return result;
 8011496:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8011498:	f107 0310 	add.w	r3, r7, #16
 801149c:	4618      	mov	r0, r3
 801149e:	f7fe fb2e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 80114a2:	f107 0318 	add.w	r3, r7, #24
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fe fb29 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80114ac:	f107 0320 	add.w	r3, r7, #32
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fe fb24 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return result;
 80114b6:	bf00      	nop
}
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	375c      	adds	r7, #92	; 0x5c
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd90      	pop	{r4, r7, pc}
 80114c0:	0802778c 	.word	0x0802778c
 80114c4:	08027790 	.word	0x08027790
 80114c8:	08027794 	.word	0x08027794
 80114cc:	080277bc 	.word	0x080277bc
 80114d0:	080277c0 	.word	0x080277c0
 80114d4:	080277c8 	.word	0x080277c8

080114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 80114d8:	b590      	push	{r4, r7, lr}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 80114e4:	491a      	ldr	r1, [pc, #104]	; (8011550 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 80114e6:	68f8      	ldr	r0, [r7, #12]
 80114e8:	f7fd ff51 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f7fe faf5 	bl	800fadc <_ZNK12SimpleString7isEmptyEv>
 80114f2:	4603      	mov	r3, r0
 80114f4:	f083 0301 	eor.w	r3, r3, #1
 80114f8:	b2db      	uxtb	r3, r3
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d022      	beq.n	8011544 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 80114fe:	f107 0310 	add.w	r3, r7, #16
 8011502:	4914      	ldr	r1, [pc, #80]	; (8011554 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8011504:	4618      	mov	r0, r3
 8011506:	f7fd ff42 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801150a:	f107 0310 	add.w	r3, r7, #16
 801150e:	4619      	mov	r1, r3
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7fe f800 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8011516:	4603      	mov	r3, r0
 8011518:	f083 0301 	eor.w	r3, r3, #1
 801151c:	b2dc      	uxtb	r4, r3
 801151e:	f107 0310 	add.w	r3, r7, #16
 8011522:	4618      	mov	r0, r3
 8011524:	f7fe faeb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011528:	2c00      	cmp	r4, #0
 801152a:	d003      	beq.n	8011534 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 801152c:	490a      	ldr	r1, [pc, #40]	; (8011558 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7fe fb74 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8011534:	6879      	ldr	r1, [r7, #4]
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f7fe fb5e 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 801153c:	4907      	ldr	r1, [pc, #28]	; (801155c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f7fe fb6c 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8011544:	bf00      	nop
}
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}
 801154e:	bf00      	nop
 8011550:	0802778c 	.word	0x0802778c
 8011554:	080277d0 	.word	0x080277d0
 8011558:	080277dc 	.word	0x080277dc
 801155c:	080277e8 	.word	0x080277e8

08011560 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8011560:	b590      	push	{r4, r7, lr}
 8011562:	b089      	sub	sp, #36	; 0x24
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	60b9      	str	r1, [r7, #8]
 801156a:	607a      	str	r2, [r7, #4]
 801156c:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	68b9      	ldr	r1, [r7, #8]
 8011576:	f7ff fda7 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801157a:	4a19      	ldr	r2, [pc, #100]	; (80115e0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011586:	68f9      	ldr	r1, [r7, #12]
 8011588:	f107 0310 	add.w	r3, r7, #16
 801158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff ffa2 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011594:	f107 0310 	add.w	r3, r7, #16
 8011598:	4619      	mov	r1, r3
 801159a:	4620      	mov	r0, r4
 801159c:	f7fd ff63 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7fe faaa 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80115b0:	68f9      	ldr	r1, [r7, #12]
 80115b2:	f107 0018 	add.w	r0, r7, #24
 80115b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ba:	f7ff fec7 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80115be:	f107 0318 	add.w	r3, r7, #24
 80115c2:	4619      	mov	r1, r3
 80115c4:	4620      	mov	r0, r4
 80115c6:	f7fe fb17 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80115ca:	f107 0318 	add.w	r3, r7, #24
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fe fa95 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	4618      	mov	r0, r3
 80115d8:	3724      	adds	r7, #36	; 0x24
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd90      	pop	{r4, r7, pc}
 80115de:	bf00      	nop
 80115e0:	0802bb58 	.word	0x0802bb58

080115e4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 80115e4:	b5b0      	push	{r4, r5, r7, lr}
 80115e6:	b094      	sub	sp, #80	; 0x50
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6278      	str	r0, [r7, #36]	; 0x24
 80115ec:	6239      	str	r1, [r7, #32]
 80115ee:	61fa      	str	r2, [r7, #28]
 80115f0:	61bb      	str	r3, [r7, #24]
 80115f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80115f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80115fa:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 80115fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	69fa      	ldr	r2, [r7, #28]
 8011604:	6a39      	ldr	r1, [r7, #32]
 8011606:	f7ff fd5f 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801160a:	4a4a      	ldr	r2, [pc, #296]	; (8011734 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011612:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801161c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801161e:	4618      	mov	r0, r3
 8011620:	f7ff ff5a 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011628:	4619      	mov	r1, r3
 801162a:	4620      	mov	r0, r4
 801162c:	f7fd ff1b 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011634:	4618      	mov	r0, r3
 8011636:	f7fe fa62 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 801163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011640:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8011642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011646:	2107      	movs	r1, #7
 8011648:	ed97 0b04 	vldr	d0, [r7, #16]
 801164c:	4618      	mov	r0, r3
 801164e:	f7fe ff1b 	bl	8010488 <_Z10StringFromdi>
 8011652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011656:	2107      	movs	r1, #7
 8011658:	ed97 0b02 	vldr	d0, [r7, #8]
 801165c:	4618      	mov	r0, r3
 801165e:	f7fe ff13 	bl	8010488 <_Z10StringFromdi>
 8011662:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011666:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801166a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801166e:	4629      	mov	r1, r5
 8011670:	f7ff fe6c 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011678:	4619      	mov	r1, r3
 801167a:	4620      	mov	r0, r4
 801167c:	f7fe fabc 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011684:	4618      	mov	r0, r3
 8011686:	f7fe fa3a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801168a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801168e:	4618      	mov	r0, r3
 8011690:	f7fe fa35 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011694:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011698:	4618      	mov	r0, r3
 801169a:	f7fe fa30 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 801169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a0:	332c      	adds	r3, #44	; 0x2c
 80116a2:	4925      	ldr	r1, [pc, #148]	; (8011738 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fe fab9 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80116aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80116b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116b4:	2107      	movs	r1, #7
 80116b6:	ed97 0b00 	vldr	d0, [r7]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fe fee4 	bl	8010488 <_Z10StringFromdi>
 80116c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116c4:	4619      	mov	r1, r3
 80116c6:	4620      	mov	r0, r4
 80116c8:	f7fe fa96 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80116cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fe fa14 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80116d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d8:	332c      	adds	r3, #44	; 0x2c
 80116da:	4918      	ldr	r1, [pc, #96]	; (801173c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fe fa9d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80116e2:	4b17      	ldr	r3, [pc, #92]	; (8011740 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	ed97 0b04 	vldr	d0, [r7, #16]
 80116ea:	4798      	blx	r3
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10f      	bne.n	8011712 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80116f2:	4b13      	ldr	r3, [pc, #76]	; (8011740 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80116fa:	4798      	blx	r3
 80116fc:	4603      	mov	r3, r0
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 8011702:	4b0f      	ldr	r3, [pc, #60]	; (8011740 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	ed97 0b00 	vldr	d0, [r7]
 801170a:	4798      	blx	r3
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 8011712:	2301      	movs	r3, #1
 8011714:	e000      	b.n	8011718 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8011716:	2300      	movs	r3, #0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d005      	beq.n	8011728 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 801171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171e:	332c      	adds	r3, #44	; 0x2c
 8011720:	4908      	ldr	r1, [pc, #32]	; (8011744 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe fa7a 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
}
 8011728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172a:	4618      	mov	r0, r3
 801172c:	3750      	adds	r7, #80	; 0x50
 801172e:	46bd      	mov	sp, r7
 8011730:	bdb0      	pop	{r4, r5, r7, pc}
 8011732:	bf00      	nop
 8011734:	0802bb2c 	.word	0x0802bb2c
 8011738:	080277ec 	.word	0x080277ec
 801173c:	08027804 	.word	0x08027804
 8011740:	200000e8 	.word	0x200000e8
 8011744:	08027808 	.word	0x08027808

08011748 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b093      	sub	sp, #76	; 0x4c
 801174c:	af02      	add	r7, sp, #8
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	68b9      	ldr	r1, [r7, #8]
 801175e:	f7ff fcb3 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011762:	4a4f      	ldr	r2, [pc, #316]	; (80118a0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801176e:	68f9      	ldr	r1, [r7, #12]
 8011770:	f107 0320 	add.w	r3, r7, #32
 8011774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff feae 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801177c:	f107 0320 	add.w	r3, r7, #32
 8011780:	4619      	mov	r1, r3
 8011782:	4620      	mov	r0, r4
 8011784:	f7fd fe6f 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011788:	f107 0320 	add.w	r3, r7, #32
 801178c:	4618      	mov	r0, r3
 801178e:	f7fe f9b6 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8011792:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011794:	f7fe f986 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011798:	4602      	mov	r2, r0
 801179a:	f107 0318 	add.w	r3, r7, #24
 801179e:	4611      	mov	r1, r2
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7fe fc47 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 80117a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117a8:	f7fe f97c 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80117ac:	4602      	mov	r2, r0
 80117ae:	f107 0310 	add.w	r3, r7, #16
 80117b2:	4611      	mov	r1, r2
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fe fc3d 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80117c0:	68f9      	ldr	r1, [r7, #12]
 80117c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80117c6:	f107 0310 	add.w	r3, r7, #16
 80117ca:	f107 0218 	add.w	r2, r7, #24
 80117ce:	f7ff fdbd 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80117d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117d6:	4619      	mov	r1, r3
 80117d8:	4620      	mov	r0, r4
 80117da:	f7fe fa0d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80117de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fe f98b 	bl	800fafe <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 80117e8:	2300      	movs	r3, #0
 80117ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80117f0:	f7fe fae9 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 80117f4:	4603      	mov	r3, r0
 80117f6:	461c      	mov	r4, r3
 80117f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80117fa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80117fc:	f7fe fae3 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8011800:	4603      	mov	r3, r0
 8011802:	429c      	cmp	r4, r3
 8011804:	bf0c      	ite	eq
 8011806:	2301      	moveq	r3, #1
 8011808:	2300      	movne	r3, #0
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b00      	cmp	r3, #0
 801180e:	d003      	beq.n	8011818 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8011810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011812:	3301      	adds	r3, #1
 8011814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011816:	e7e9      	b.n	80117ec <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8011818:	2300      	movs	r3, #0
 801181a:	63bb      	str	r3, [r7, #56]	; 0x38
 801181c:	f107 0310 	add.w	r3, r7, #16
 8011820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011822:	4618      	mov	r0, r3
 8011824:	f7fe facf 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8011828:	4603      	mov	r3, r0
 801182a:	461c      	mov	r4, r3
 801182c:	f107 0318 	add.w	r3, r7, #24
 8011830:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011832:	4618      	mov	r0, r3
 8011834:	f7fe fac7 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8011838:	4603      	mov	r3, r0
 801183a:	429c      	cmp	r4, r3
 801183c:	bf0c      	ite	eq
 801183e:	2301      	moveq	r3, #1
 8011840:	2300      	movne	r3, #0
 8011842:	b2db      	uxtb	r3, r3
 8011844:	2b00      	cmp	r3, #0
 8011846:	d003      	beq.n	8011850 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8011848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184a:	3301      	adds	r3, #1
 801184c:	63bb      	str	r3, [r7, #56]	; 0x38
 801184e:	e7e5      	b.n	801181c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801185c:	f107 0210 	add.w	r2, r7, #16
 8011860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	f7ff fd8b 	bl	8011380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 801186a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801186e:	4619      	mov	r1, r3
 8011870:	4620      	mov	r0, r4
 8011872:	f7fe f9c1 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe f93f 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8011880:	f107 0310 	add.w	r3, r7, #16
 8011884:	4618      	mov	r0, r3
 8011886:	f7fe f93a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 801188a:	f107 0318 	add.w	r3, r7, #24
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe f935 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	4618      	mov	r0, r3
 8011898:	3744      	adds	r7, #68	; 0x44
 801189a:	46bd      	mov	sp, r7
 801189c:	bd90      	pop	{r4, r7, pc}
 801189e:	bf00      	nop
 80118a0:	0802bb00 	.word	0x0802bb00

080118a4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 80118a4:	b590      	push	{r4, r7, lr}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
 80118b0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80118b2:	68f8      	ldr	r0, [r7, #12]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	f7ff fc05 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80118be:	4a1a      	ldr	r2, [pc, #104]	; (8011928 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80118ca:	68f9      	ldr	r1, [r7, #12]
 80118cc:	f107 0310 	add.w	r3, r7, #16
 80118d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7ff fe00 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80118d8:	f107 0310 	add.w	r3, r7, #16
 80118dc:	4619      	mov	r1, r3
 80118de:	4620      	mov	r0, r4
 80118e0:	f7fd fdc1 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80118e4:	f107 0310 	add.w	r3, r7, #16
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fe f908 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	332c      	adds	r3, #44	; 0x2c
 80118f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fe f97f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	332c      	adds	r3, #44	; 0x2c
 80118fe:	490b      	ldr	r1, [pc, #44]	; (801192c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8011900:	4618      	mov	r0, r3
 8011902:	f7fe f98b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	332c      	adds	r3, #44	; 0x2c
 801190a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801190c:	4618      	mov	r0, r3
 801190e:	f7fe f973 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	332c      	adds	r3, #44	; 0x2c
 8011916:	4906      	ldr	r1, [pc, #24]	; (8011930 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8011918:	4618      	mov	r0, r3
 801191a:	f7fe f97f 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
}
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	4618      	mov	r0, r3
 8011922:	371c      	adds	r7, #28
 8011924:	46bd      	mov	sp, r7
 8011926:	bd90      	pop	{r4, r7, pc}
 8011928:	0802bad4 	.word	0x0802bad4
 801192c:	0802782c 	.word	0x0802782c
 8011930:	08027830 	.word	0x08027830

08011934 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8011934:	b5b0      	push	{r4, r5, r7, lr}
 8011936:	b088      	sub	sp, #32
 8011938:	af00      	add	r7, sp, #0
 801193a:	60f8      	str	r0, [r7, #12]
 801193c:	60b9      	str	r1, [r7, #8]
 801193e:	607a      	str	r2, [r7, #4]
 8011940:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	68b9      	ldr	r1, [r7, #8]
 801194a:	f7ff fbbd 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801194e:	4a1c      	ldr	r2, [pc, #112]	; (80119c0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801195a:	68f9      	ldr	r1, [r7, #12]
 801195c:	f107 0310 	add.w	r3, r7, #16
 8011960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff fdb8 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011968:	f107 0310 	add.w	r3, r7, #16
 801196c:	4619      	mov	r1, r3
 801196e:	4620      	mov	r0, r4
 8011970:	f7fd fd79 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011974:	f107 0310 	add.w	r3, r7, #16
 8011978:	4618      	mov	r0, r3
 801197a:	f7fe f8c0 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011984:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011986:	f7fe f88d 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801198a:	4605      	mov	r5, r0
 801198c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801198e:	f7fe f889 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8011992:	4603      	mov	r3, r0
 8011994:	f107 0018 	add.w	r0, r7, #24
 8011998:	462a      	mov	r2, r5
 801199a:	490a      	ldr	r1, [pc, #40]	; (80119c4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 801199c:	f7fe fdb6 	bl	801050c <_Z16StringFromFormatPKcz>
 80119a0:	f107 0318 	add.w	r3, r7, #24
 80119a4:	4619      	mov	r1, r3
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7fe f926 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80119ac:	f107 0318 	add.w	r3, r7, #24
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe f8a4 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	4618      	mov	r0, r3
 80119ba:	3720      	adds	r7, #32
 80119bc:	46bd      	mov	sp, r7
 80119be:	bdb0      	pop	{r4, r5, r7, pc}
 80119c0:	0802baa8 	.word	0x0802baa8
 80119c4:	0802783c 	.word	0x0802783c

080119c8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 80119c8:	b590      	push	{r4, r7, lr}
 80119ca:	b087      	sub	sp, #28
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80119d6:	68f8      	ldr	r0, [r7, #12]
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	68b9      	ldr	r1, [r7, #8]
 80119de:	f7ff fb73 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80119e2:	4a1a      	ldr	r2, [pc, #104]	; (8011a4c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80119ee:	68f9      	ldr	r1, [r7, #12]
 80119f0:	f107 0310 	add.w	r3, r7, #16
 80119f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fd6e 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80119fc:	f107 0310 	add.w	r3, r7, #16
 8011a00:	4619      	mov	r1, r3
 8011a02:	4620      	mov	r0, r4
 8011a04:	f7fd fd2f 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011a08:	f107 0310 	add.w	r3, r7, #16
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe f876 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	332c      	adds	r3, #44	; 0x2c
 8011a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7fe f8ed 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	332c      	adds	r3, #44	; 0x2c
 8011a22:	490b      	ldr	r1, [pc, #44]	; (8011a50 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fe f8f9 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	332c      	adds	r3, #44	; 0x2c
 8011a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fe f8e1 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	332c      	adds	r3, #44	; 0x2c
 8011a3a:	4906      	ldr	r1, [pc, #24]	; (8011a54 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe f8ed 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
}
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	4618      	mov	r0, r3
 8011a46:	371c      	adds	r7, #28
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd90      	pop	{r4, r7, pc}
 8011a4c:	0802ba7c 	.word	0x0802ba7c
 8011a50:	0802782c 	.word	0x0802782c
 8011a54:	08027830 	.word	0x08027830

08011a58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	60b9      	str	r1, [r7, #8]
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	603b      	str	r3, [r7, #0]
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	68b9      	ldr	r1, [r7, #8]
 8011a6e:	f7ff fb2b 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011a72:	4a07      	ldr	r2, [pc, #28]	; (8011a90 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	332c      	adds	r3, #44	; 0x2c
 8011a7c:	69b9      	ldr	r1, [r7, #24]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fd fcf1 	bl	800f466 <_ZN12SimpleStringaSERKS_>
}
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	4618      	mov	r0, r3
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	0802b738 	.word	0x0802b738

08011a94 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 8011a94:	b590      	push	{r4, r7, lr}
 8011a96:	b09d      	sub	sp, #116	; 0x74
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011aa2:	68f8      	ldr	r0, [r7, #12]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	68b9      	ldr	r1, [r7, #8]
 8011aaa:	f7ff fb0d 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011aae:	4a5d      	ldr	r2, [pc, #372]	; (8011c24 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011aba:	68f9      	ldr	r1, [r7, #12]
 8011abc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ac0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff fd07 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011aca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ace:	4619      	mov	r1, r3
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7fd fcc8 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe f80f 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8011ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ae4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fe fae1 	bl	80100b0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 8011aee:	f107 0320 	add.w	r3, r7, #32
 8011af2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe fada 	bl	80100b0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8011afc:	f107 0120 	add.w	r1, r7, #32
 8011b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b04:	2220      	movs	r2, #32
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fe f8b6 	bl	800fc78 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011b0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b10:	4945      	ldr	r1, [pc, #276]	; (8011c28 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fd fc3b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011b18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011b20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fe f84c 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b2e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe fbd2 	bl	80102dc <_Z30BracketsFormattedHexStringFroml>
 8011b38:	f107 0318 	add.w	r3, r7, #24
 8011b3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011b40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fe f83c 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011b4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fd ffd5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011b54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fd ffd0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fd ffcb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011b68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011b6c:	492e      	ldr	r1, [pc, #184]	; (8011c28 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fd fc0d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011b78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011b7c:	f107 0120 	add.w	r1, r7, #32
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe f81e 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011b86:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011b8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fe fba4 	bl	80102dc <_Z30BracketsFormattedHexStringFroml>
 8011b94:	f107 0310 	add.w	r3, r7, #16
 8011b98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011b9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fe f80e 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011ba6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fd ffa7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011bb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fd ffa2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011bba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fd ff9d 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011bca:	68f9      	ldr	r1, [r7, #12]
 8011bcc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011bd0:	f107 0318 	add.w	r3, r7, #24
 8011bd4:	f107 0210 	add.w	r2, r7, #16
 8011bd8:	f7ff fbb8 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011bdc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011be0:	4619      	mov	r1, r3
 8011be2:	4620      	mov	r0, r4
 8011be4:	f7fe f808 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011be8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fd ff86 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011bf2:	f107 0310 	add.w	r3, r7, #16
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7fd ff81 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011bfc:	f107 0318 	add.w	r3, r7, #24
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fd ff7c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8011c06:	f107 0320 	add.w	r3, r7, #32
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fd ff77 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8011c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fd ff72 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3774      	adds	r7, #116	; 0x74
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd90      	pop	{r4, r7, pc}
 8011c24:	0802ba50 	.word	0x0802ba50
 8011c28:	08027790 	.word	0x08027790

08011c2c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8011c2c:	b590      	push	{r4, r7, lr}
 8011c2e:	b09d      	sub	sp, #116	; 0x74
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	68b9      	ldr	r1, [r7, #8]
 8011c42:	f7ff fa41 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011c46:	4a5d      	ldr	r2, [pc, #372]	; (8011dbc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011c52:	68f9      	ldr	r1, [r7, #12]
 8011c54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff fc3b 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c66:	4619      	mov	r1, r3
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f7fd fbfc 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fd ff43 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8011c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7fe fc7d 	bl	8010580 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 8011c86:	f107 0320 	add.w	r3, r7, #32
 8011c8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fe fc76 	bl	8010580 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8011c94:	f107 0120 	add.w	r1, r7, #32
 8011c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c9c:	2220      	movs	r2, #32
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fd ffea 	bl	800fc78 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ca8:	4945      	ldr	r1, [pc, #276]	; (8011dc0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fd fb6f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011cb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011cb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011cb8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fd ff80 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011cc6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fe fb22 	bl	8010314 <_Z30BracketsFormattedHexStringFromm>
 8011cd0:	f107 0318 	add.w	r3, r7, #24
 8011cd4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011cd8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fd ff70 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fd ff09 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011cec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fd ff04 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011cf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fd feff 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d04:	492e      	ldr	r1, [pc, #184]	; (8011dc0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fd fb41 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011d0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d14:	f107 0120 	add.w	r1, r7, #32
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fd ff52 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011d1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011d22:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fe faf4 	bl	8010314 <_Z30BracketsFormattedHexStringFromm>
 8011d2c:	f107 0310 	add.w	r3, r7, #16
 8011d30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011d34:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fd ff42 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011d3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fd fedb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fd fed6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fd fed1 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011d62:	68f9      	ldr	r1, [r7, #12]
 8011d64:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011d68:	f107 0318 	add.w	r3, r7, #24
 8011d6c:	f107 0210 	add.w	r2, r7, #16
 8011d70:	f7ff faec 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011d74:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011d78:	4619      	mov	r1, r3
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	f7fd ff3c 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011d80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fd feba 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011d8a:	f107 0310 	add.w	r3, r7, #16
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fd feb5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011d94:	f107 0318 	add.w	r3, r7, #24
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7fd feb0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8011d9e:	f107 0320 	add.w	r3, r7, #32
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fd feab 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8011da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd fea6 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	4618      	mov	r0, r3
 8011db6:	3774      	adds	r7, #116	; 0x74
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd90      	pop	{r4, r7, pc}
 8011dbc:	0802ba24 	.word	0x0802ba24
 8011dc0:	08027790 	.word	0x08027790

08011dc4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8011dc4:	b590      	push	{r4, r7, lr}
 8011dc6:	b09d      	sub	sp, #116	; 0x74
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011dd2:	68f8      	ldr	r0, [r7, #12]
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	687a      	ldr	r2, [r7, #4]
 8011dd8:	68b9      	ldr	r1, [r7, #8]
 8011dda:	f7ff f975 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011dde:	4a5f      	ldr	r2, [pc, #380]	; (8011f5c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011dea:	68f9      	ldr	r1, [r7, #12]
 8011dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011df0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7ff fb6f 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011dfe:	4619      	mov	r1, r3
 8011e00:	4620      	mov	r0, r4
 8011e02:	f7fd fb30 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011e06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7fd fe77 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8011e10:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8011e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e18:	4611      	mov	r1, r2
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7fe f936 	bl	801008c <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8011e20:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8011e24:	f107 0320 	add.w	r3, r7, #32
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fe f92e 	bl	801008c <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8011e30:	f107 0120 	add.w	r1, r7, #32
 8011e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011e38:	2220      	movs	r2, #32
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fd ff1c 	bl	800fc78 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011e44:	4946      	ldr	r1, [pc, #280]	; (8011f60 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fd faa1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011e4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e50:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011e54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fd feb2 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e62:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8011e66:	4611      	mov	r1, r2
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fe fa6f 	bl	801034c <_Z30BracketsFormattedHexStringFroma>
 8011e6e:	f107 0318 	add.w	r3, r7, #24
 8011e72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011e76:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fd fea1 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011e80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd fe3a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011e8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fd fe35 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011e94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fd fe30 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011e9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ea2:	492f      	ldr	r1, [pc, #188]	; (8011f60 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fd fa72 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8011eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011eae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011eb2:	f107 0120 	add.w	r1, r7, #32
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fd fe83 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011ebc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ec0:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8011ec4:	4611      	mov	r1, r2
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fe fa40 	bl	801034c <_Z30BracketsFormattedHexStringFroma>
 8011ecc:	f107 0310 	add.w	r3, r7, #16
 8011ed0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011ed4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fd fe72 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8011ede:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fd fe0b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011ee8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fd fe06 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8011ef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fd fe01 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011f02:	68f9      	ldr	r1, [r7, #12]
 8011f04:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011f08:	f107 0318 	add.w	r3, r7, #24
 8011f0c:	f107 0210 	add.w	r2, r7, #16
 8011f10:	f7ff fa1c 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011f14:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011f18:	4619      	mov	r1, r3
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f7fd fe6c 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011f20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7fd fdea 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011f2a:	f107 0310 	add.w	r3, r7, #16
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fd fde5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011f34:	f107 0318 	add.w	r3, r7, #24
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fd fde0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8011f3e:	f107 0320 	add.w	r3, r7, #32
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fd fddb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8011f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7fd fdd6 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	4618      	mov	r0, r3
 8011f56:	3774      	adds	r7, #116	; 0x74
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd90      	pop	{r4, r7, pc}
 8011f5c:	0802b9f8 	.word	0x0802b9f8
 8011f60:	08027790 	.word	0x08027790

08011f64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8011f64:	b590      	push	{r4, r7, lr}
 8011f66:	b093      	sub	sp, #76	; 0x4c
 8011f68:	af02      	add	r7, sp, #8
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
 8011f70:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	68b9      	ldr	r1, [r7, #8]
 8011f7a:	f7ff f8a5 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011f7e:	4a4a      	ldr	r2, [pc, #296]	; (80120a8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011f8a:	68f9      	ldr	r1, [r7, #12]
 8011f8c:	f107 0320 	add.w	r3, r7, #32
 8011f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ff faa0 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011f98:	f107 0320 	add.w	r3, r7, #32
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f7fd fa61 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8011fa4:	f107 0320 	add.w	r3, r7, #32
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fd fda8 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011fae:	f107 0318 	add.w	r3, r7, #24
 8011fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fe f83d 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011fba:	f107 0310 	add.w	r3, r7, #16
 8011fbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fe f837 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011fcc:	68f9      	ldr	r1, [r7, #12]
 8011fce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011fd2:	f107 0310 	add.w	r3, r7, #16
 8011fd6:	f107 0218 	add.w	r2, r7, #24
 8011fda:	f7ff f9b7 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f7fd fe07 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8011fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fd fd85 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8011ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d046      	beq.n	8012088 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8011ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d043      	beq.n	8012088 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8012000:	2300      	movs	r3, #0
 8012002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012008:	4413      	add	r3, r2
 801200a:	781a      	ldrb	r2, [r3, #0]
 801200c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801200e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012010:	440b      	add	r3, r1
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	429a      	cmp	r2, r3
 8012016:	d103      	bne.n	8012020 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8012018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201a:	3301      	adds	r3, #1
 801201c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801201e:	e7f1      	b.n	8012004 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8012020:	2300      	movs	r3, #0
 8012022:	63bb      	str	r3, [r7, #56]	; 0x38
 8012024:	f107 0310 	add.w	r3, r7, #16
 8012028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801202a:	4618      	mov	r0, r3
 801202c:	f7fd fecb 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8012030:	4603      	mov	r3, r0
 8012032:	461c      	mov	r4, r3
 8012034:	f107 0318 	add.w	r3, r7, #24
 8012038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801203a:	4618      	mov	r0, r3
 801203c:	f7fd fec3 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8012040:	4603      	mov	r3, r0
 8012042:	429c      	cmp	r4, r3
 8012044:	bf0c      	ite	eq
 8012046:	2301      	moveq	r3, #1
 8012048:	2300      	movne	r3, #0
 801204a:	b2db      	uxtb	r3, r3
 801204c:	2b00      	cmp	r3, #0
 801204e:	d003      	beq.n	8012058 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	3301      	adds	r3, #1
 8012054:	63bb      	str	r3, [r7, #56]	; 0x38
 8012056:	e7e5      	b.n	8012024 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801205e:	68f9      	ldr	r1, [r7, #12]
 8012060:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012064:	f107 0210 	add.w	r2, r7, #16
 8012068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206e:	f7ff f987 	bl	8011380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8012072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012076:	4619      	mov	r1, r3
 8012078:	4620      	mov	r0, r4
 801207a:	f7fd fdbd 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801207e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012082:	4618      	mov	r0, r3
 8012084:	f7fd fd3b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8012088:	f107 0310 	add.w	r3, r7, #16
 801208c:	4618      	mov	r0, r3
 801208e:	f7fd fd36 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8012092:	f107 0318 	add.w	r3, r7, #24
 8012096:	4618      	mov	r0, r3
 8012098:	f7fd fd31 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
}
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	4618      	mov	r0, r3
 80120a0:	3744      	adds	r7, #68	; 0x44
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd90      	pop	{r4, r7, pc}
 80120a6:	bf00      	nop
 80120a8:	0802b9cc 	.word	0x0802b9cc

080120ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 80120ac:	b590      	push	{r4, r7, lr}
 80120ae:	b093      	sub	sp, #76	; 0x4c
 80120b0:	af02      	add	r7, sp, #8
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	607a      	str	r2, [r7, #4]
 80120b8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80120ba:	68f8      	ldr	r0, [r7, #12]
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	68b9      	ldr	r1, [r7, #8]
 80120c2:	f7ff f801 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80120c6:	4a55      	ldr	r2, [pc, #340]	; (801221c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80120d2:	68f9      	ldr	r1, [r7, #12]
 80120d4:	f107 0320 	add.w	r3, r7, #32
 80120d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120da:	4618      	mov	r0, r3
 80120dc:	f7ff f9fc 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80120e0:	f107 0320 	add.w	r3, r7, #32
 80120e4:	4619      	mov	r1, r3
 80120e6:	4620      	mov	r0, r4
 80120e8:	f7fd f9bd 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80120ec:	f107 0320 	add.w	r3, r7, #32
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7fd fd04 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80120f6:	f107 0318 	add.w	r3, r7, #24
 80120fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fd ff99 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8012102:	f107 0310 	add.w	r3, r7, #16
 8012106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012108:	4618      	mov	r0, r3
 801210a:	f7fd ff93 	bl	8010034 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012114:	68f9      	ldr	r1, [r7, #12]
 8012116:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801211a:	f107 0310 	add.w	r3, r7, #16
 801211e:	f107 0218 	add.w	r2, r7, #24
 8012122:	f7ff f913 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8012126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801212a:	4619      	mov	r1, r3
 801212c:	4620      	mov	r0, r4
 801212e:	f7fd fd63 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8012132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012136:	4618      	mov	r0, r3
 8012138:	f7fd fce1 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 801213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213e:	2b00      	cmp	r3, #0
 8012140:	d05c      	beq.n	80121fc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8012142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012144:	2b00      	cmp	r3, #0
 8012146:	d059      	beq.n	80121fc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8012148:	2300      	movs	r3, #0
 801214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801214c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012150:	4413      	add	r3, r2
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	4618      	mov	r0, r3
 8012156:	f7fd f824 	bl	800f1a2 <_ZN12SimpleString7ToLowerEc>
 801215a:	4603      	mov	r3, r0
 801215c:	461c      	mov	r4, r3
 801215e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012162:	4413      	add	r3, r2
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	4618      	mov	r0, r3
 8012168:	f7fd f81b 	bl	800f1a2 <_ZN12SimpleString7ToLowerEc>
 801216c:	4603      	mov	r3, r0
 801216e:	429c      	cmp	r4, r3
 8012170:	bf0c      	ite	eq
 8012172:	2301      	moveq	r3, #1
 8012174:	2300      	movne	r3, #0
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b00      	cmp	r3, #0
 801217a:	d003      	beq.n	8012184 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 801217c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801217e:	3301      	adds	r3, #1
 8012180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012182:	e7e3      	b.n	801214c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8012188:	f107 0310 	add.w	r3, r7, #16
 801218c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801218e:	4618      	mov	r0, r3
 8012190:	f7fd fe19 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 8012194:	4603      	mov	r3, r0
 8012196:	4618      	mov	r0, r3
 8012198:	f7fd f803 	bl	800f1a2 <_ZN12SimpleString7ToLowerEc>
 801219c:	4603      	mov	r3, r0
 801219e:	461c      	mov	r4, r3
 80121a0:	f107 0318 	add.w	r3, r7, #24
 80121a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fd fe0d 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 80121ac:	4603      	mov	r3, r0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fc fff7 	bl	800f1a2 <_ZN12SimpleString7ToLowerEc>
 80121b4:	4603      	mov	r3, r0
 80121b6:	429c      	cmp	r4, r3
 80121b8:	bf0c      	ite	eq
 80121ba:	2301      	moveq	r3, #1
 80121bc:	2300      	movne	r3, #0
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d003      	beq.n	80121cc <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 80121c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c6:	3301      	adds	r3, #1
 80121c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80121ca:	e7dd      	b.n	8012188 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80121d2:	68f9      	ldr	r1, [r7, #12]
 80121d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80121d8:	f107 0210 	add.w	r2, r7, #16
 80121dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e2:	f7ff f8cd 	bl	8011380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80121e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121ea:	4619      	mov	r1, r3
 80121ec:	4620      	mov	r0, r4
 80121ee:	f7fd fd03 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80121f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fd fc81 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80121fc:	f107 0310 	add.w	r3, r7, #16
 8012200:	4618      	mov	r0, r3
 8012202:	f7fd fc7c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8012206:	f107 0318 	add.w	r3, r7, #24
 801220a:	4618      	mov	r0, r3
 801220c:	f7fd fc77 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
}
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	4618      	mov	r0, r3
 8012214:	3744      	adds	r7, #68	; 0x44
 8012216:	46bd      	mov	sp, r7
 8012218:	bd90      	pop	{r4, r7, pc}
 801221a:	bf00      	nop
 801221c:	0802b9a0 	.word	0x0802b9a0

08012220 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8012220:	b5b0      	push	{r4, r5, r7, lr}
 8012222:	b092      	sub	sp, #72	; 0x48
 8012224:	af02      	add	r7, sp, #8
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	607a      	str	r2, [r7, #4]
 801222c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 801222e:	68f8      	ldr	r0, [r7, #12]
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	68b9      	ldr	r1, [r7, #8]
 8012236:	f7fe ff47 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801223a:	4a40      	ldr	r2, [pc, #256]	; (801233c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012246:	68f9      	ldr	r1, [r7, #12]
 8012248:	f107 031c 	add.w	r3, r7, #28
 801224c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff f942 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8012254:	f107 031c 	add.w	r3, r7, #28
 8012258:	4619      	mov	r1, r3
 801225a:	4620      	mov	r0, r4
 801225c:	f7fd f903 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8012260:	f107 031c 	add.w	r3, r7, #28
 8012264:	4618      	mov	r0, r3
 8012266:	f7fd fc4a 	bl	800fafe <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 801226a:	f107 0314 	add.w	r3, r7, #20
 801226e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012272:	4618      	mov	r0, r3
 8012274:	f7fe fa4c 	bl	8010710 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801227e:	68fd      	ldr	r5, [r7, #12]
 8012280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fa41 	bl	8010710 <_Z22StringFromBinaryOrNullPKhj>
 801228e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012292:	f107 0314 	add.w	r3, r7, #20
 8012296:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801229a:	4629      	mov	r1, r5
 801229c:	f7ff f856 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80122a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122a4:	4619      	mov	r1, r3
 80122a6:	4620      	mov	r0, r4
 80122a8:	f7fd fca6 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80122ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fd fc24 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80122b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7fd fc1f 	bl	800fafe <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 80122c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d02f      	beq.n	8012326 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 80122c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d02c      	beq.n	8012326 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 80122cc:	2300      	movs	r3, #0
 80122ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80122d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d4:	4413      	add	r3, r2
 80122d6:	781a      	ldrb	r2, [r3, #0]
 80122d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122dc:	440b      	add	r3, r1
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d103      	bne.n	80122ec <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 80122e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e6:	3301      	adds	r3, #1
 80122e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122ea:	e7f1      	b.n	80122d0 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80122f2:	68f9      	ldr	r1, [r7, #12]
 80122f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122f6:	4613      	mov	r3, r2
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	4413      	add	r3, r2
 80122fc:	1c5d      	adds	r5, r3, #1
 80122fe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8012302:	f107 0214 	add.w	r2, r7, #20
 8012306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012308:	9300      	str	r3, [sp, #0]
 801230a:	462b      	mov	r3, r5
 801230c:	f7ff f838 	bl	8011380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8012310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012314:	4619      	mov	r1, r3
 8012316:	4620      	mov	r0, r4
 8012318:	f7fd fc6e 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801231c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012320:	4618      	mov	r0, r3
 8012322:	f7fd fbec 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8012326:	f107 0314 	add.w	r3, r7, #20
 801232a:	4618      	mov	r0, r3
 801232c:	f7fd fbe7 	bl	800fafe <_ZN12SimpleStringD1Ev>
	}
}
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	4618      	mov	r0, r3
 8012334:	3740      	adds	r7, #64	; 0x40
 8012336:	46bd      	mov	sp, r7
 8012338:	bdb0      	pop	{r4, r5, r7, pc}
 801233a:	bf00      	nop
 801233c:	0802b974 	.word	0x0802b974

08012340 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8012340:	b5b0      	push	{r4, r5, r7, lr}
 8012342:	b08c      	sub	sp, #48	; 0x30
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
 801234c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 801234e:	68f8      	ldr	r0, [r7, #12]
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	68b9      	ldr	r1, [r7, #8]
 8012356:	f7fe feb7 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801235a:	4a26      	ldr	r2, [pc, #152]	; (80123f4 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012366:	68f9      	ldr	r1, [r7, #12]
 8012368:	f107 0310 	add.w	r3, r7, #16
 801236c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff f8b2 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8012374:	f107 0310 	add.w	r3, r7, #16
 8012378:	4619      	mov	r1, r3
 801237a:	4620      	mov	r0, r4
 801237c:	f7fd f873 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8012380:	f107 0310 	add.w	r3, r7, #16
 8012384:	4618      	mov	r0, r3
 8012386:	f7fd fbba 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012390:	68fd      	ldr	r5, [r7, #12]
 8012392:	f107 0020 	add.w	r0, r7, #32
 8012396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801239a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801239c:	f7fe fa24 	bl	80107e8 <_Z20StringFromMaskedBitsmmj>
 80123a0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80123a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80123a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80123aa:	f7fe fa1d 	bl	80107e8 <_Z20StringFromMaskedBitsmmj>
 80123ae:	f107 0018 	add.w	r0, r7, #24
 80123b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80123b6:	f107 0220 	add.w	r2, r7, #32
 80123ba:	4629      	mov	r1, r5
 80123bc:	f7fe ffc6 	bl	801134c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80123c0:	f107 0318 	add.w	r3, r7, #24
 80123c4:	4619      	mov	r1, r3
 80123c6:	4620      	mov	r0, r4
 80123c8:	f7fd fc16 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80123cc:	f107 0318 	add.w	r3, r7, #24
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7fd fb94 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80123d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fd fb8f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80123e0:	f107 0320 	add.w	r3, r7, #32
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fd fb8a 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	4618      	mov	r0, r3
 80123ee:	3730      	adds	r7, #48	; 0x30
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bdb0      	pop	{r4, r5, r7, pc}
 80123f4:	0802b948 	.word	0x0802b948

080123f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b089      	sub	sp, #36	; 0x24
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
 8012404:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8012406:	68f8      	ldr	r0, [r7, #12]
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	687a      	ldr	r2, [r7, #4]
 801240c:	68b9      	ldr	r1, [r7, #8]
 801240e:	f7fe fe5b 	bl	80110c8 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8012412:	4a1a      	ldr	r2, [pc, #104]	; (801247c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801241e:	68f9      	ldr	r1, [r7, #12]
 8012420:	f107 0310 	add.w	r3, r7, #16
 8012424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff f856 	bl	80114d8 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801242c:	f107 0310 	add.w	r3, r7, #16
 8012430:	4619      	mov	r1, r3
 8012432:	4620      	mov	r0, r4
 8012434:	f7fd f817 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8012438:	f107 0310 	add.w	r3, r7, #16
 801243c:	4618      	mov	r0, r3
 801243e:	f7fd fb5e 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8012448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244a:	f7fd fb2b 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801244e:	4602      	mov	r2, r0
 8012450:	f107 0318 	add.w	r3, r7, #24
 8012454:	490a      	ldr	r1, [pc, #40]	; (8012480 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8012456:	4618      	mov	r0, r3
 8012458:	f7fe f858 	bl	801050c <_Z16StringFromFormatPKcz>
 801245c:	f107 0318 	add.w	r3, r7, #24
 8012460:	4619      	mov	r1, r3
 8012462:	4620      	mov	r0, r4
 8012464:	f7fd fbc8 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8012468:	f107 0318 	add.w	r3, r7, #24
 801246c:	4618      	mov	r0, r3
 801246e:	f7fd fb46 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	4618      	mov	r0, r3
 8012476:	3724      	adds	r7, #36	; 0x24
 8012478:	46bd      	mov	sp, r7
 801247a:	bd90      	pop	{r4, r7, pc}
 801247c:	0802b91c 	.word	0x0802b91c
 8012480:	08027860 	.word	0x08027860

08012484 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	4a05      	ldr	r2, [pc, #20]	; (80124a4 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4618      	mov	r0, r3
 8012496:	f7fe fe99 	bl	80111cc <_ZN11TestFailureD1Ev>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	4618      	mov	r0, r3
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	0802b91c 	.word	0x0802b91c

080124a8 <_ZN25FeatureUnsupportedFailureD0Ev>:
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff ffe7 	bl	8012484 <_ZN25FeatureUnsupportedFailureD1Ev>
 80124b6:	2134      	movs	r1, #52	; 0x34
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f7fa fbb9 	bl	800cc30 <_ZdlPvj>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	4a05      	ldr	r2, [pc, #20]	; (80124e8 <_ZN16BitsEqualFailureD1Ev+0x20>)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	601a      	str	r2, [r3, #0]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fe77 	bl	80111cc <_ZN11TestFailureD1Ev>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	0802b948 	.word	0x0802b948

080124ec <_ZN16BitsEqualFailureD0Ev>:
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff ffe7 	bl	80124c8 <_ZN16BitsEqualFailureD1Ev>
 80124fa:	2134      	movs	r1, #52	; 0x34
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7fa fb97 	bl	800cc30 <_ZdlPvj>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	4a05      	ldr	r2, [pc, #20]	; (801252c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	601a      	str	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fe55 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4618      	mov	r0, r3
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}
 801252c:	0802b974 	.word	0x0802b974

08012530 <_ZN18BinaryEqualFailureD0Ev>:
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff ffe7 	bl	801250c <_ZN18BinaryEqualFailureD1Ev>
 801253e:	2134      	movs	r1, #52	; 0x34
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7fa fb75 	bl	800cc30 <_ZdlPvj>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4618      	mov	r0, r3
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	4a05      	ldr	r2, [pc, #20]	; (8012570 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	f7fe fe33 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4618      	mov	r0, r3
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}
 8012570:	0802b9a0 	.word	0x0802b9a0

08012574 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7ff ffe7 	bl	8012550 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012582:	2134      	movs	r1, #52	; 0x34
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7fa fb53 	bl	800cc30 <_ZdlPvj>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	4a05      	ldr	r2, [pc, #20]	; (80125b4 <_ZN18StringEqualFailureD1Ev+0x20>)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	601a      	str	r2, [r3, #0]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fe fe11 	bl	80111cc <_ZN11TestFailureD1Ev>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	0802b9cc 	.word	0x0802b9cc

080125b8 <_ZN18StringEqualFailureD0Ev>:
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f7ff ffe7 	bl	8012594 <_ZN18StringEqualFailureD1Ev>
 80125c6:	2134      	movs	r1, #52	; 0x34
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7fa fb31 	bl	800cc30 <_ZdlPvj>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4618      	mov	r0, r3
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	4a05      	ldr	r2, [pc, #20]	; (80125f8 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	601a      	str	r2, [r3, #0]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fe fdef 	bl	80111cc <_ZN11TestFailureD1Ev>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4618      	mov	r0, r3
 80125f2:	3708      	adds	r7, #8
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	0802b9f8 	.word	0x0802b9f8

080125fc <_ZN23SignedBytesEqualFailureD0Ev>:
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7ff ffe7 	bl	80125d8 <_ZN23SignedBytesEqualFailureD1Ev>
 801260a:	2134      	movs	r1, #52	; 0x34
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7fa fb0f 	bl	800cc30 <_ZdlPvj>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	4618      	mov	r0, r3
 8012616:	3708      	adds	r7, #8
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}

0801261c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	4a05      	ldr	r2, [pc, #20]	; (801263c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	601a      	str	r2, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4618      	mov	r0, r3
 801262e:	f7fe fdcd 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	0802ba24 	.word	0x0802ba24

08012640 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f7ff ffe7 	bl	801261c <_ZN25UnsignedLongsEqualFailureD1Ev>
 801264e:	2134      	movs	r1, #52	; 0x34
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7fa faed 	bl	800cc30 <_ZdlPvj>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4618      	mov	r0, r3
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	4a05      	ldr	r2, [pc, #20]	; (8012680 <_ZN17LongsEqualFailureD1Ev+0x20>)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f7fe fdab 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	0802ba50 	.word	0x0802ba50

08012684 <_ZN17LongsEqualFailureD0Ev>:
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7ff ffe7 	bl	8012660 <_ZN17LongsEqualFailureD1Ev>
 8012692:	2134      	movs	r1, #52	; 0x34
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7fa facb 	bl	800cc30 <_ZdlPvj>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	4a05      	ldr	r2, [pc, #20]	; (80126c4 <_ZN12CheckFailureD1Ev+0x20>)
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	601a      	str	r2, [r3, #0]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fe fd89 	bl	80111cc <_ZN11TestFailureD1Ev>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	0802ba7c 	.word	0x0802ba7c

080126c8 <_ZN12CheckFailureD0Ev>:
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff ffe7 	bl	80126a4 <_ZN12CheckFailureD1Ev>
 80126d6:	2134      	movs	r1, #52	; 0x34
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f7fa faa9 	bl	800cc30 <_ZdlPvj>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	4a05      	ldr	r2, [pc, #20]	; (8012708 <_ZN15ContainsFailureD1Ev+0x20>)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	601a      	str	r2, [r3, #0]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fe fd67 	bl	80111cc <_ZN11TestFailureD1Ev>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4618      	mov	r0, r3
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	0802baa8 	.word	0x0802baa8

0801270c <_ZN15ContainsFailureD0Ev>:
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff ffe7 	bl	80126e8 <_ZN15ContainsFailureD1Ev>
 801271a:	2134      	movs	r1, #52	; 0x34
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7fa fa87 	bl	800cc30 <_ZdlPvj>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4618      	mov	r0, r3
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	4a05      	ldr	r2, [pc, #20]	; (801274c <_ZN17ComparisonFailureD1Ev+0x20>)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	601a      	str	r2, [r3, #0]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	f7fe fd45 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4618      	mov	r0, r3
 8012746:	3708      	adds	r7, #8
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	0802bad4 	.word	0x0802bad4

08012750 <_ZN17ComparisonFailureD0Ev>:
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff ffe7 	bl	801272c <_ZN17ComparisonFailureD1Ev>
 801275e:	2134      	movs	r1, #52	; 0x34
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7fa fa65 	bl	800cc30 <_ZdlPvj>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4618      	mov	r0, r3
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	4a05      	ldr	r2, [pc, #20]	; (8012790 <_ZN17CheckEqualFailureD1Ev+0x20>)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	f7fe fd23 	bl	80111cc <_ZN11TestFailureD1Ev>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	0802bb00 	.word	0x0802bb00

08012794 <_ZN17CheckEqualFailureD0Ev>:
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff ffe7 	bl	8012770 <_ZN17CheckEqualFailureD1Ev>
 80127a2:	2134      	movs	r1, #52	; 0x34
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7fa fa43 	bl	800cc30 <_ZdlPvj>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
 80127bc:	4a05      	ldr	r2, [pc, #20]	; (80127d4 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fe fd01 	bl	80111cc <_ZN11TestFailureD1Ev>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	0802bb2c 	.word	0x0802bb2c

080127d8 <_ZN19DoublesEqualFailureD0Ev>:
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7ff ffe7 	bl	80127b4 <_ZN19DoublesEqualFailureD1Ev>
 80127e6:	2134      	movs	r1, #52	; 0x34
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f7fa fa21 	bl	800cc30 <_ZdlPvj>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4618      	mov	r0, r3
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	4a05      	ldr	r2, [pc, #20]	; (8012818 <_ZN13EqualsFailureD1Ev+0x20>)
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	601a      	str	r2, [r3, #0]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	f7fe fcdf 	bl	80111cc <_ZN11TestFailureD1Ev>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	0802bb58 	.word	0x0802bb58

0801281c <_ZN13EqualsFailureD0Ev>:
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff ffe7 	bl	80127f8 <_ZN13EqualsFailureD1Ev>
 801282a:	2134      	movs	r1, #52	; 0x34
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	f7fa f9ff 	bl	800cc30 <_ZdlPvj>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}

0801283c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 801283c:	b5b0      	push	{r4, r5, r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af02      	add	r7, sp, #8
 8012842:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8012844:	4b0d      	ldr	r3, [pc, #52]	; (801287c <_ZL13checkedMallocj+0x40>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	4798      	blx	r3
 801284c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10e      	bne.n	8012872 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8012854:	f004 f97e 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8012858:	4604      	mov	r4, r0
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	3368      	adds	r3, #104	; 0x68
 801285e:	681d      	ldr	r5, [r3, #0]
 8012860:	f004 f988 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012864:	4603      	mov	r3, r0
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	2325      	movs	r3, #37	; 0x25
 801286a:	4a05      	ldr	r2, [pc, #20]	; (8012880 <_ZL13checkedMallocj+0x44>)
 801286c:	4905      	ldr	r1, [pc, #20]	; (8012884 <_ZL13checkedMallocj+0x48>)
 801286e:	4620      	mov	r0, r4
 8012870:	47a8      	blx	r5
    return mem;
 8012872:	68fb      	ldr	r3, [r7, #12]
}
 8012874:	4618      	mov	r0, r3
 8012876:	3710      	adds	r7, #16
 8012878:	46bd      	mov	sp, r7
 801287a:	bdb0      	pop	{r4, r5, r7, pc}
 801287c:	200000c8 	.word	0x200000c8
 8012880:	080278d4 	.word	0x080278d4
 8012884:	080278f4 	.word	0x080278f4

08012888 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8012888:	b580      	push	{r7, lr}
 801288a:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 801288c:	4b04      	ldr	r3, [pc, #16]	; (80128a0 <_Z22getCurrentNewAllocatorv+0x18>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d101      	bne.n	8012898 <_Z22getCurrentNewAllocatorv+0x10>
 8012894:	f000 f806 	bl	80128a4 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8012898:	4b01      	ldr	r3, [pc, #4]	; (80128a0 <_Z22getCurrentNewAllocatorv+0x18>)
 801289a:	681b      	ldr	r3, [r3, #0]
}
 801289c:	4618      	mov	r0, r3
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20000a3c 	.word	0x20000a3c

080128a4 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 80128a8:	f000 f810 	bl	80128cc <_Z19defaultNewAllocatorv>
 80128ac:	4603      	mov	r3, r0
 80128ae:	4a02      	ldr	r2, [pc, #8]	; (80128b8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80128b0:	6013      	str	r3, [r2, #0]
}
 80128b2:	bf00      	nop
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20000a3c 	.word	0x20000a3c

080128bc <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80128bc:	b580      	push	{r7, lr}
 80128be:	af00      	add	r7, sp, #0
 80128c0:	4801      	ldr	r0, [pc, #4]	; (80128c8 <__tcf_0+0xc>)
 80128c2:	f000 f909 	bl	8012ad8 <_ZN19TestMemoryAllocatorD1Ev>
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20000a48 	.word	0x20000a48

080128cc <_Z19defaultNewAllocatorv>:
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80128d0:	4b13      	ldr	r3, [pc, #76]	; (8012920 <_Z19defaultNewAllocatorv+0x54>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	f3bf 8f5b 	dmb	ish
 80128d8:	b2db      	uxtb	r3, r3
 80128da:	f003 0301 	and.w	r3, r3, #1
 80128de:	2b00      	cmp	r3, #0
 80128e0:	bf0c      	ite	eq
 80128e2:	2301      	moveq	r3, #1
 80128e4:	2300      	movne	r3, #0
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d016      	beq.n	801291a <_Z19defaultNewAllocatorv+0x4e>
 80128ec:	480c      	ldr	r0, [pc, #48]	; (8012920 <_Z19defaultNewAllocatorv+0x54>)
 80128ee:	f00f fc0f 	bl	8022110 <__cxa_guard_acquire>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	bf14      	ite	ne
 80128f8:	2301      	movne	r3, #1
 80128fa:	2300      	moveq	r3, #0
 80128fc:	b2db      	uxtb	r3, r3
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00b      	beq.n	801291a <_Z19defaultNewAllocatorv+0x4e>
 8012902:	4b08      	ldr	r3, [pc, #32]	; (8012924 <_Z19defaultNewAllocatorv+0x58>)
 8012904:	4a08      	ldr	r2, [pc, #32]	; (8012928 <_Z19defaultNewAllocatorv+0x5c>)
 8012906:	4909      	ldr	r1, [pc, #36]	; (801292c <_Z19defaultNewAllocatorv+0x60>)
 8012908:	4809      	ldr	r0, [pc, #36]	; (8012930 <_Z19defaultNewAllocatorv+0x64>)
 801290a:	f000 f8c5 	bl	8012a98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801290e:	4804      	ldr	r0, [pc, #16]	; (8012920 <_Z19defaultNewAllocatorv+0x54>)
 8012910:	f00f fc0a 	bl	8022128 <__cxa_guard_release>
 8012914:	4807      	ldr	r0, [pc, #28]	; (8012934 <_Z19defaultNewAllocatorv+0x68>)
 8012916:	f00f fc2e 	bl	8022176 <atexit>
    return &allocator;
 801291a:	4b05      	ldr	r3, [pc, #20]	; (8012930 <_Z19defaultNewAllocatorv+0x64>)
}
 801291c:	4618      	mov	r0, r3
 801291e:	bd80      	pop	{r7, pc}
 8012920:	20000a5c 	.word	0x20000a5c
 8012924:	08027914 	.word	0x08027914
 8012928:	0802791c 	.word	0x0802791c
 801292c:	08027920 	.word	0x08027920
 8012930:	20000a48 	.word	0x20000a48
 8012934:	080128bd 	.word	0x080128bd

08012938 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8012938:	b580      	push	{r7, lr}
 801293a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 801293c:	4b04      	ldr	r3, [pc, #16]	; (8012950 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d101      	bne.n	8012948 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8012944:	f000 f806 	bl	8012954 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8012948:	4b01      	ldr	r3, [pc, #4]	; (8012950 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801294a:	681b      	ldr	r3, [r3, #0]
}
 801294c:	4618      	mov	r0, r3
 801294e:	bd80      	pop	{r7, pc}
 8012950:	20000a40 	.word	0x20000a40

08012954 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8012954:	b580      	push	{r7, lr}
 8012956:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8012958:	f000 f810 	bl	801297c <_Z24defaultNewArrayAllocatorv>
 801295c:	4603      	mov	r3, r0
 801295e:	4a02      	ldr	r2, [pc, #8]	; (8012968 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8012960:	6013      	str	r3, [r2, #0]
}
 8012962:	bf00      	nop
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	20000a40 	.word	0x20000a40

0801296c <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 801296c:	b580      	push	{r7, lr}
 801296e:	af00      	add	r7, sp, #0
 8012970:	4801      	ldr	r0, [pc, #4]	; (8012978 <__tcf_1+0xc>)
 8012972:	f000 f8b1 	bl	8012ad8 <_ZN19TestMemoryAllocatorD1Ev>
 8012976:	bd80      	pop	{r7, pc}
 8012978:	20000a60 	.word	0x20000a60

0801297c <_Z24defaultNewArrayAllocatorv>:
{
 801297c:	b580      	push	{r7, lr}
 801297e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8012980:	4b13      	ldr	r3, [pc, #76]	; (80129d0 <_Z24defaultNewArrayAllocatorv+0x54>)
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	f3bf 8f5b 	dmb	ish
 8012988:	b2db      	uxtb	r3, r3
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	2b00      	cmp	r3, #0
 8012990:	bf0c      	ite	eq
 8012992:	2301      	moveq	r3, #1
 8012994:	2300      	movne	r3, #0
 8012996:	b2db      	uxtb	r3, r3
 8012998:	2b00      	cmp	r3, #0
 801299a:	d016      	beq.n	80129ca <_Z24defaultNewArrayAllocatorv+0x4e>
 801299c:	480c      	ldr	r0, [pc, #48]	; (80129d0 <_Z24defaultNewArrayAllocatorv+0x54>)
 801299e:	f00f fbb7 	bl	8022110 <__cxa_guard_acquire>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	bf14      	ite	ne
 80129a8:	2301      	movne	r3, #1
 80129aa:	2300      	moveq	r3, #0
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00b      	beq.n	80129ca <_Z24defaultNewArrayAllocatorv+0x4e>
 80129b2:	4b08      	ldr	r3, [pc, #32]	; (80129d4 <_Z24defaultNewArrayAllocatorv+0x58>)
 80129b4:	4a08      	ldr	r2, [pc, #32]	; (80129d8 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80129b6:	4909      	ldr	r1, [pc, #36]	; (80129dc <_Z24defaultNewArrayAllocatorv+0x60>)
 80129b8:	4809      	ldr	r0, [pc, #36]	; (80129e0 <_Z24defaultNewArrayAllocatorv+0x64>)
 80129ba:	f000 f86d 	bl	8012a98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80129be:	4804      	ldr	r0, [pc, #16]	; (80129d0 <_Z24defaultNewArrayAllocatorv+0x54>)
 80129c0:	f00f fbb2 	bl	8022128 <__cxa_guard_release>
 80129c4:	4807      	ldr	r0, [pc, #28]	; (80129e4 <_Z24defaultNewArrayAllocatorv+0x68>)
 80129c6:	f00f fbd6 	bl	8022176 <atexit>
    return &allocator;
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	20000a74 	.word	0x20000a74
 80129d4:	08027938 	.word	0x08027938
 80129d8:	08027944 	.word	0x08027944
 80129dc:	0802794c 	.word	0x0802794c
 80129e0:	20000a60 	.word	0x20000a60
 80129e4:	0801296d 	.word	0x0801296d

080129e8 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 80129ec:	4b04      	ldr	r3, [pc, #16]	; (8012a00 <_Z25getCurrentMallocAllocatorv+0x18>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <_Z25getCurrentMallocAllocatorv+0x10>
 80129f4:	f000 f806 	bl	8012a04 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 80129f8:	4b01      	ldr	r3, [pc, #4]	; (8012a00 <_Z25getCurrentMallocAllocatorv+0x18>)
 80129fa:	681b      	ldr	r3, [r3, #0]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	20000a44 	.word	0x20000a44

08012a04 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8012a08:	f000 f810 	bl	8012a2c <_Z22defaultMallocAllocatorv>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	4a02      	ldr	r2, [pc, #8]	; (8012a18 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8012a10:	6013      	str	r3, [r2, #0]
}
 8012a12:	bf00      	nop
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	20000a44 	.word	0x20000a44

08012a1c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	4801      	ldr	r0, [pc, #4]	; (8012a28 <__tcf_2+0xc>)
 8012a22:	f000 f859 	bl	8012ad8 <_ZN19TestMemoryAllocatorD1Ev>
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	20000a78 	.word	0x20000a78

08012a2c <_Z22defaultMallocAllocatorv>:
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8012a30:	4b13      	ldr	r3, [pc, #76]	; (8012a80 <_Z22defaultMallocAllocatorv+0x54>)
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	f3bf 8f5b 	dmb	ish
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	f003 0301 	and.w	r3, r3, #1
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	bf0c      	ite	eq
 8012a42:	2301      	moveq	r3, #1
 8012a44:	2300      	movne	r3, #0
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d016      	beq.n	8012a7a <_Z22defaultMallocAllocatorv+0x4e>
 8012a4c:	480c      	ldr	r0, [pc, #48]	; (8012a80 <_Z22defaultMallocAllocatorv+0x54>)
 8012a4e:	f00f fb5f 	bl	8022110 <__cxa_guard_acquire>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	bf14      	ite	ne
 8012a58:	2301      	movne	r3, #1
 8012a5a:	2300      	moveq	r3, #0
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d00b      	beq.n	8012a7a <_Z22defaultMallocAllocatorv+0x4e>
 8012a62:	4b08      	ldr	r3, [pc, #32]	; (8012a84 <_Z22defaultMallocAllocatorv+0x58>)
 8012a64:	4a08      	ldr	r2, [pc, #32]	; (8012a88 <_Z22defaultMallocAllocatorv+0x5c>)
 8012a66:	4909      	ldr	r1, [pc, #36]	; (8012a8c <_Z22defaultMallocAllocatorv+0x60>)
 8012a68:	4809      	ldr	r0, [pc, #36]	; (8012a90 <_Z22defaultMallocAllocatorv+0x64>)
 8012a6a:	f000 f815 	bl	8012a98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8012a6e:	4804      	ldr	r0, [pc, #16]	; (8012a80 <_Z22defaultMallocAllocatorv+0x54>)
 8012a70:	f00f fb5a 	bl	8022128 <__cxa_guard_release>
 8012a74:	4807      	ldr	r0, [pc, #28]	; (8012a94 <_Z22defaultMallocAllocatorv+0x68>)
 8012a76:	f00f fb7e 	bl	8022176 <atexit>
    return &allocator;
 8012a7a:	4b05      	ldr	r3, [pc, #20]	; (8012a90 <_Z22defaultMallocAllocatorv+0x64>)
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	20000a8c 	.word	0x20000a8c
 8012a84:	08027968 	.word	0x08027968
 8012a88:	08027970 	.word	0x08027970
 8012a8c:	08027978 	.word	0x08027978
 8012a90:	20000a78 	.word	0x20000a78
 8012a94:	08012a1d 	.word	0x08012a1d

08012a98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 8012aa6:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	601a      	str	r2, [r3, #0]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	68ba      	ldr	r2, [r7, #8]
 8012ab0:	605a      	str	r2, [r3, #4]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	609a      	str	r2, [r3, #8]
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	60da      	str	r2, [r3, #12]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	741a      	strb	r2, [r3, #16]
{
}
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3714      	adds	r7, #20
 8012aca:	46bd      	mov	sp, r7
 8012acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	0802bbe4 	.word	0x0802bbe4

08012ad8 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8012ad8:	b480      	push	{r7}
 8012ada:	b083      	sub	sp, #12
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	4a06      	ldr	r2, [pc, #24]	; (8012afc <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2201      	movs	r2, #1
 8012aea:	741a      	strb	r2, [r3, #16]
}
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	0802bbe4 	.word	0x0802bbe4

08012b00 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
}
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f7ff ffe5 	bl	8012ad8 <_ZN19TestMemoryAllocatorD1Ev>
 8012b0e:	2114      	movs	r1, #20
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7fa f88d 	bl	800cc30 <_ZdlPvj>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3708      	adds	r7, #8
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8012b20:	b480      	push	{r7}
 8012b22:	b083      	sub	sp, #12
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	7c1b      	ldrb	r3, [r3, #16]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	3310      	adds	r3, #16
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	4798      	blx	r3
 8012b4e:	4604      	mov	r4, r0
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	3310      	adds	r3, #16
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	6838      	ldr	r0, [r7, #0]
 8012b5a:	4798      	blx	r3
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	4619      	mov	r1, r3
 8012b60:	4620      	mov	r0, r4
 8012b62:	f7fc fa51 	bl	800f008 <_ZN12SimpleString6StrCmpEPKcS1_>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	bf0c      	ite	eq
 8012b6c:	2301      	moveq	r3, #1
 8012b6e:	2300      	movne	r3, #0
 8012b70:	b2db      	uxtb	r3, r3
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	370c      	adds	r7, #12
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd90      	pop	{r4, r7, pc}
	...

08012b7c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8012b7c:	b590      	push	{r4, r7, lr}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3308      	adds	r3, #8
 8012b8c:	681c      	ldr	r4, [r3, #0]
 8012b8e:	2301      	movs	r3, #1
 8012b90:	4a04      	ldr	r2, [pc, #16]	; (8012ba4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8012b92:	6839      	ldr	r1, [r7, #0]
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	47a0      	blx	r4
 8012b98:	4603      	mov	r3, r0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	370c      	adds	r7, #12
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd90      	pop	{r4, r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08027994 	.word	0x08027994

08012ba8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8012ba8:	b590      	push	{r4, r7, lr}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af02      	add	r7, sp, #8
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	330c      	adds	r3, #12
 8012bb8:	681c      	ldr	r4, [r3, #0]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	4b04      	ldr	r3, [pc, #16]	; (8012bd0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	6839      	ldr	r1, [r7, #0]
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	47a0      	blx	r4
}
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd90      	pop	{r4, r7, pc}
 8012bd0:	08027994 	.word	0x08027994

08012bd4 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	60f8      	str	r0, [r7, #12]
 8012bdc:	60b9      	str	r1, [r7, #8]
 8012bde:	607a      	str	r2, [r7, #4]
 8012be0:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8012be2:	68b8      	ldr	r0, [r7, #8]
 8012be4:	f7ff fe2a 	bl	801283c <_ZL13checkedMallocj>
 8012be8:	4603      	mov	r3, r0
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3710      	adds	r7, #16
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}
	...

08012bf4 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
 8012c00:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8012c02:	4b04      	ldr	r3, [pc, #16]	; (8012c14 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	68b8      	ldr	r0, [r7, #8]
 8012c08:	4798      	blx	r3
}
 8012c0a:	bf00      	nop
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	200000d0 	.word	0x200000d0

08012c18 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
    return name_;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	685b      	ldr	r3, [r3, #4]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr

08012c30 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	689b      	ldr	r3, [r3, #8]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
    return free_name_;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68db      	ldr	r3, [r3, #12]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
    return this;
 8012c68:	687b      	ldr	r3, [r7, #4]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	370c      	adds	r7, #12
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c74:	4770      	bx	lr
	...

08012c78 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	4a05      	ldr	r2, [pc, #20]	; (8012c98 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	601a      	str	r2, [r3, #0]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff ff25 	bl	8012ad8 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	4618      	mov	r0, r3
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	0802bbb0 	.word	0x0802bbb0

08012c9c <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b082      	sub	sp, #8
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
}
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7ff ffe7 	bl	8012c78 <_ZN20NullUnknownAllocatorD1Ev>
 8012caa:	2114      	movs	r1, #20
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f7f9 ffbf 	bl	800cc30 <_ZdlPvj>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b085      	sub	sp, #20
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	60f8      	str	r0, [r7, #12]
 8012cc4:	60b9      	str	r1, [r7, #8]
 8012cc6:	607a      	str	r2, [r7, #4]
 8012cc8:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3714      	adds	r7, #20
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b085      	sub	sp, #20
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	607a      	str	r2, [r7, #4]
 8012ce4:	603b      	str	r3, [r7, #0]
}
 8012ce6:	bf00      	nop
 8012ce8:	3714      	adds	r7, #20
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr
	...

08012cf4 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	4b06      	ldr	r3, [pc, #24]	; (8012d18 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8012d00:	4a05      	ldr	r2, [pc, #20]	; (8012d18 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8012d02:	4906      	ldr	r1, [pc, #24]	; (8012d1c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8012d04:	f7ff fec8 	bl	8012a98 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8012d08:	4a05      	ldr	r2, [pc, #20]	; (8012d20 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	601a      	str	r2, [r3, #0]
{
}
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	080279c8 	.word	0x080279c8
 8012d1c:	080279d0 	.word	0x080279d0
 8012d20:	0802bbb0 	.word	0x0802bbb0

08012d24 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8012d24:	b580      	push	{r7, lr}
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	4801      	ldr	r0, [pc, #4]	; (8012d30 <__tcf_3+0xc>)
 8012d2a:	f7ff ffa5 	bl	8012c78 <_ZN20NullUnknownAllocatorD1Ev>
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	20000a90 	.word	0x20000a90

08012d34 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8012d38:	4b12      	ldr	r3, [pc, #72]	; (8012d84 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	f3bf 8f5b 	dmb	ish
 8012d40:	b2db      	uxtb	r3, r3
 8012d42:	f003 0301 	and.w	r3, r3, #1
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	bf0c      	ite	eq
 8012d4a:	2301      	moveq	r3, #1
 8012d4c:	2300      	movne	r3, #0
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d013      	beq.n	8012d7c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8012d54:	480b      	ldr	r0, [pc, #44]	; (8012d84 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012d56:	f00f f9db 	bl	8022110 <__cxa_guard_acquire>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	bf14      	ite	ne
 8012d60:	2301      	movne	r3, #1
 8012d62:	2300      	moveq	r3, #0
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d008      	beq.n	8012d7c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8012d6a:	4807      	ldr	r0, [pc, #28]	; (8012d88 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8012d6c:	f7ff ffc2 	bl	8012cf4 <_ZN20NullUnknownAllocatorC1Ev>
 8012d70:	4804      	ldr	r0, [pc, #16]	; (8012d84 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012d72:	f00f f9d9 	bl	8022128 <__cxa_guard_release>
 8012d76:	4805      	ldr	r0, [pc, #20]	; (8012d8c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8012d78:	f00f f9fd 	bl	8022176 <atexit>
    return &allocator;
 8012d7c:	4b02      	ldr	r3, [pc, #8]	; (8012d88 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	20000aa4 	.word	0x20000aa4
 8012d88:	20000a90 	.word	0x20000a90
 8012d8c:	08012d25 	.word	0x08012d25

08012d90 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
        return testCount_;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	689b      	ldr	r3, [r3, #8]
    }
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8012da8:	b480      	push	{r7}
 8012daa:	b083      	sub	sp, #12
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	699b      	ldr	r3, [r3, #24]
    }
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr

08012dc0 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8012dc4:	4b05      	ldr	r3, [pc, #20]	; (8012ddc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d103      	bne.n	8012dd4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8012dcc:	f004 fa4a 	bl	8017264 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	e001      	b.n	8012dd8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8012dd4:	4b01      	ldr	r3, [pc, #4]	; (8012ddc <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8012dd6:	781b      	ldrb	r3, [r3, #0]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	20000088 	.word	0x20000088

08012de0 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8012de8:	4a0a      	ldr	r2, [pc, #40]	; (8012e14 <_ZN10TestOutputC1Ev+0x34>)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	601a      	str	r2, [r3, #0]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2200      	movs	r2, #0
 8012df2:	605a      	str	r2, [r3, #4]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	721a      	strb	r2, [r3, #8]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	725a      	strb	r2, [r3, #9]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	4a05      	ldr	r2, [pc, #20]	; (8012e18 <_ZN10TestOutputC1Ev+0x38>)
 8012e04:	60da      	str	r2, [r3, #12]
{
}
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	370c      	adds	r7, #12
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr
 8012e14:	0802bce8 	.word	0x0802bce8
 8012e18:	08027dd0 	.word	0x08027dd0

08012e1c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
 8012e24:	4a04      	ldr	r2, [pc, #16]	; (8012e38 <_ZN10TestOutputD1Ev+0x1c>)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	601a      	str	r2, [r3, #0]
{
}
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	370c      	adds	r7, #12
 8012e30:	46bd      	mov	sp, r7
 8012e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e36:	4770      	bx	lr
 8012e38:	0802bce8 	.word	0x0802bce8

08012e3c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	460b      	mov	r3, r1
 8012e46:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	78fa      	ldrb	r2, [r7, #3]
 8012e4c:	721a      	strb	r2, [r3, #8]
}
 8012e4e:	bf00      	nop
 8012e50:	370c      	adds	r7, #12
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr

08012e5a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8012e5a:	b480      	push	{r7}
 8012e5c:	b083      	sub	sp, #12
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
    color_ = true;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2201      	movs	r2, #1
 8012e66:	725a      	strb	r2, [r3, #9]
}
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	3328      	adds	r3, #40	; 0x28
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	4798      	blx	r3
}
 8012e8c:	bf00      	nop
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8012e94:	b590      	push	{r4, r7, lr}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	332c      	adds	r3, #44	; 0x2c
 8012ea4:	681c      	ldr	r4, [r3, #0]
 8012ea6:	f107 0308 	add.w	r3, r7, #8
 8012eaa:	6839      	ldr	r1, [r7, #0]
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fd f8ff 	bl	80100b0 <_Z10StringFroml>
 8012eb2:	f107 0308 	add.w	r3, r7, #8
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fc fdf4 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	47a0      	blx	r4
 8012ec4:	f107 0308 	add.w	r3, r7, #8
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7fc fe18 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8012ece:	bf00      	nop
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd90      	pop	{r4, r7, pc}

08012ed6 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8012ed6:	b590      	push	{r4, r7, lr}
 8012ed8:	b085      	sub	sp, #20
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
 8012ede:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	332c      	adds	r3, #44	; 0x2c
 8012ee6:	681c      	ldr	r4, [r3, #0]
 8012ee8:	f107 0308 	add.w	r3, r7, #8
 8012eec:	6839      	ldr	r1, [r7, #0]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fd fb34 	bl	801055c <_Z10StringFromj>
 8012ef4:	f107 0308 	add.w	r3, r7, #8
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7fc fdd3 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8012efe:	4603      	mov	r3, r0
 8012f00:	4619      	mov	r1, r3
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	47a0      	blx	r4
 8012f06:	f107 0308 	add.w	r3, r7, #8
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fc fdf7 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8012f10:	bf00      	nop
 8012f12:	3714      	adds	r7, #20
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd90      	pop	{r4, r7, pc}

08012f18 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8012f18:	b590      	push	{r4, r7, lr}
 8012f1a:	b087      	sub	sp, #28
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	332c      	adds	r3, #44	; 0x2c
 8012f2a:	681c      	ldr	r4, [r3, #0]
 8012f2c:	f107 0310 	add.w	r3, r7, #16
 8012f30:	2106      	movs	r1, #6
 8012f32:	ed97 0b00 	vldr	d0, [r7]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fd faa6 	bl	8010488 <_Z10StringFromdi>
 8012f3c:	f107 0310 	add.w	r3, r7, #16
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fc fdaf 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8012f46:	4603      	mov	r3, r0
 8012f48:	4619      	mov	r1, r3
 8012f4a:	68f8      	ldr	r0, [r7, #12]
 8012f4c:	47a0      	blx	r4
 8012f4e:	f107 0310 	add.w	r3, r7, #16
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fc fdd3 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8012f58:	bf00      	nop
 8012f5a:	371c      	adds	r7, #28
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd90      	pop	{r4, r7, pc}

08012f60 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
    p.print(s);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	332c      	adds	r3, #44	; 0x2c
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	4798      	blx	r3
    return p;
 8012f78:	687b      	ldr	r3, [r7, #4]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
	...

08012f84 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8012f84:	b590      	push	{r4, r7, lr}
 8012f86:	b085      	sub	sp, #20
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	7a1b      	ldrb	r3, [r3, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d01a      	beq.n	8012fcc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	332c      	adds	r3, #44	; 0x2c
 8012f9c:	681c      	ldr	r4, [r3, #0]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	3314      	adds	r3, #20
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	f107 0208 	add.w	r2, r7, #8
 8012faa:	6839      	ldr	r1, [r7, #0]
 8012fac:	4610      	mov	r0, r2
 8012fae:	4798      	blx	r3
 8012fb0:	f107 0308 	add.w	r3, r7, #8
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fc fd75 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	47a0      	blx	r4
 8012fc2:	f107 0308 	add.w	r3, r7, #8
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fc fd99 	bl	800fafe <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	3318      	adds	r3, #24
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	6838      	ldr	r0, [r7, #0]
 8012fd6:	4798      	blx	r3
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d007      	beq.n	8012fee <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	3344      	adds	r3, #68	; 0x44
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4907      	ldr	r1, [pc, #28]	; (8013004 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8012fec:	e006      	b.n	8012ffc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	3344      	adds	r3, #68	; 0x44
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	4904      	ldr	r1, [pc, #16]	; (8013008 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	4798      	blx	r3
}
 8012ffc:	bf00      	nop
 8012ffe:	3714      	adds	r7, #20
 8013000:	46bd      	mov	sp, r7
 8013002:	bd90      	pop	{r4, r7, pc}
 8013004:	08027dd0 	.word	0x08027dd0
 8013008:	08027dd4 	.word	0x08027dd4

0801300c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 801300c:	b590      	push	{r4, r7, lr}
 801300e:	b083      	sub	sp, #12
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	7a1b      	ldrb	r3, [r3, #8]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d019      	beq.n	8013052 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	332c      	adds	r3, #44	; 0x2c
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	4910      	ldr	r1, [pc, #64]	; (8013068 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	3334      	adds	r3, #52	; 0x34
 8013032:	681c      	ldr	r4, [r3, #0]
 8013034:	6838      	ldr	r0, [r7, #0]
 8013036:	f002 f845 	bl	80150c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 801303a:	4603      	mov	r3, r0
 801303c:	4619      	mov	r1, r3
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	47a0      	blx	r4
        print(" ms\n");
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	332c      	adds	r3, #44	; 0x2c
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4908      	ldr	r1, [pc, #32]	; (801306c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8013050:	e005      	b.n	801305e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	3358      	adds	r3, #88	; 0x58
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	4798      	blx	r3
}
 801305e:	bf00      	nop
 8013060:	370c      	adds	r7, #12
 8013062:	46bd      	mov	sp, r7
 8013064:	bd90      	pop	{r4, r7, pc}
 8013066:	bf00      	nop
 8013068:	08027dd8 	.word	0x08027dd8
 801306c:	08027ddc 	.word	0x08027ddc

08013070 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	332c      	adds	r3, #44	; 0x2c
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	68d2      	ldr	r2, [r2, #12]
 8013084:	4611      	mov	r1, r2
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	1c5a      	adds	r2, r3, #1
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	605a      	str	r2, [r3, #4]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	685a      	ldr	r2, [r3, #4]
 8013098:	4b0d      	ldr	r3, [pc, #52]	; (80130d0 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 801309a:	fb83 1302 	smull	r1, r3, r3, r2
 801309e:	1119      	asrs	r1, r3, #4
 80130a0:	17d3      	asrs	r3, r2, #31
 80130a2:	1acb      	subs	r3, r1, r3
 80130a4:	2132      	movs	r1, #50	; 0x32
 80130a6:	fb01 f303 	mul.w	r3, r1, r3
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	bf0c      	ite	eq
 80130b0:	2301      	moveq	r3, #1
 80130b2:	2300      	movne	r3, #0
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d006      	beq.n	80130c8 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	332c      	adds	r3, #44	; 0x2c
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	4904      	ldr	r1, [pc, #16]	; (80130d4 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	4798      	blx	r3
}
 80130c8:	bf00      	nop
 80130ca:	3708      	adds	r7, #8
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}
 80130d0:	51eb851f 	.word	0x51eb851f
 80130d4:	08027de4 	.word	0x08027de4

080130d8 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	683a      	ldr	r2, [r7, #0]
 80130e6:	60da      	str	r2, [r3, #12]
}
 80130e8:	bf00      	nop
 80130ea:	370c      	adds	r7, #12
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr

080130f4 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
}
 80130fc:	bf00      	nop
 80130fe:	370c      	adds	r7, #12
 8013100:	46bd      	mov	sp, r7
 8013102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013106:	4770      	bx	lr

08013108 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	6039      	str	r1, [r7, #0]
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr

0801311e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 801311e:	b480      	push	{r7}
 8013120:	b083      	sub	sp, #12
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	6039      	str	r1, [r7, #0]
}
 8013128:	bf00      	nop
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8013134:	b590      	push	{r4, r7, lr}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	6039      	str	r1, [r7, #0]
    print("\n");
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	332c      	adds	r3, #44	; 0x2c
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	496f      	ldr	r1, [pc, #444]	; (8013304 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 801314c:	6838      	ldr	r0, [r7, #0]
 801314e:	f7f8 f83d 	bl	800b1cc <_ZNK10TestResult9isFailureEv>
 8013152:	4603      	mov	r3, r0
 8013154:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8013156:	6838      	ldr	r0, [r7, #0]
 8013158:	f7f8 f82c 	bl	800b1b4 <_ZNK10TestResult15getFailureCountEv>
 801315c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 801315e:	7bfb      	ldrb	r3, [r7, #15]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d02b      	beq.n	80131bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	7a5b      	ldrb	r3, [r3, #9]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d006      	beq.n	801317a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	332c      	adds	r3, #44	; 0x2c
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4964      	ldr	r1, [pc, #400]	; (8013308 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	4798      	blx	r3
        }
        print("Errors (");
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	332c      	adds	r3, #44	; 0x2c
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	4962      	ldr	r1, [pc, #392]	; (801330c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	4798      	blx	r3
        if (failureCount > 0) {
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00e      	beq.n	80131ac <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	3334      	adds	r3, #52	; 0x34
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	68b9      	ldr	r1, [r7, #8]
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	4798      	blx	r3
            print(" failures, ");
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	332c      	adds	r3, #44	; 0x2c
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	495a      	ldr	r1, [pc, #360]	; (8013310 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	4798      	blx	r3
 80131aa:	e019      	b.n	80131e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	332c      	adds	r3, #44	; 0x2c
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4957      	ldr	r1, [pc, #348]	; (8013314 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	4798      	blx	r3
 80131ba:	e011      	b.n	80131e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	7a5b      	ldrb	r3, [r3, #9]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d006      	beq.n	80131d2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	332c      	adds	r3, #44	; 0x2c
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4952      	ldr	r1, [pc, #328]	; (8013318 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	4798      	blx	r3
        }
        print("OK (");
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	332c      	adds	r3, #44	; 0x2c
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	4950      	ldr	r1, [pc, #320]	; (801331c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	4798      	blx	r3
    }
    print(result.getTestCount());
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	3334      	adds	r3, #52	; 0x34
 80131e6:	681c      	ldr	r4, [r3, #0]
 80131e8:	6838      	ldr	r0, [r7, #0]
 80131ea:	f7ff fdd1 	bl	8012d90 <_ZNK10TestResult12getTestCountEv>
 80131ee:	4603      	mov	r3, r0
 80131f0:	4619      	mov	r1, r3
 80131f2:	6878      	ldr	r0, [r7, #4]
 80131f4:	47a0      	blx	r4
    print(" tests, ");
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	332c      	adds	r3, #44	; 0x2c
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	4948      	ldr	r1, [pc, #288]	; (8013320 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	4798      	blx	r3
    print(result.getRunCount());
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	3334      	adds	r3, #52	; 0x34
 801320a:	681c      	ldr	r4, [r3, #0]
 801320c:	6838      	ldr	r0, [r7, #0]
 801320e:	f7f7 ffb9 	bl	800b184 <_ZNK10TestResult11getRunCountEv>
 8013212:	4603      	mov	r3, r0
 8013214:	4619      	mov	r1, r3
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	47a0      	blx	r4
    print(" ran, ");
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	332c      	adds	r3, #44	; 0x2c
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4940      	ldr	r1, [pc, #256]	; (8013324 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	4798      	blx	r3
    print(result.getCheckCount());
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	3334      	adds	r3, #52	; 0x34
 801322e:	681c      	ldr	r4, [r3, #0]
 8013230:	6838      	ldr	r0, [r7, #0]
 8013232:	f7f8 fc13 	bl	800ba5c <_ZNK10TestResult13getCheckCountEv>
 8013236:	4603      	mov	r3, r0
 8013238:	4619      	mov	r1, r3
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	47a0      	blx	r4
    print(" checks, ");
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	332c      	adds	r3, #44	; 0x2c
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	4938      	ldr	r1, [pc, #224]	; (8013328 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	4798      	blx	r3
    print(result.getIgnoredCount());
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	3334      	adds	r3, #52	; 0x34
 8013252:	681c      	ldr	r4, [r3, #0]
 8013254:	6838      	ldr	r0, [r7, #0]
 8013256:	f7f7 ffa1 	bl	800b19c <_ZNK10TestResult15getIgnoredCountEv>
 801325a:	4603      	mov	r3, r0
 801325c:	4619      	mov	r1, r3
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	47a0      	blx	r4
    print(" ignored, ");
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	332c      	adds	r3, #44	; 0x2c
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4930      	ldr	r1, [pc, #192]	; (801332c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	3334      	adds	r3, #52	; 0x34
 8013276:	681c      	ldr	r4, [r3, #0]
 8013278:	6838      	ldr	r0, [r7, #0]
 801327a:	f7ff fd95 	bl	8012da8 <_ZNK10TestResult19getFilteredOutCountEv>
 801327e:	4603      	mov	r3, r0
 8013280:	4619      	mov	r1, r3
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	47a0      	blx	r4
    print(" filtered out, ");
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	332c      	adds	r3, #44	; 0x2c
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4928      	ldr	r1, [pc, #160]	; (8013330 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	3334      	adds	r3, #52	; 0x34
 801329a:	681c      	ldr	r4, [r3, #0]
 801329c:	6838      	ldr	r0, [r7, #0]
 801329e:	f001 ff05 	bl	80150ac <_ZNK10TestResult21getTotalExecutionTimeEv>
 80132a2:	4603      	mov	r3, r0
 80132a4:	4619      	mov	r1, r3
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	47a0      	blx	r4
    print(" ms)");
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	332c      	adds	r3, #44	; 0x2c
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	4920      	ldr	r1, [pc, #128]	; (8013334 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	4798      	blx	r3
    if (color_) {
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	7a5b      	ldrb	r3, [r3, #9]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d006      	beq.n	80132ce <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	332c      	adds	r3, #44	; 0x2c
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	491b      	ldr	r1, [pc, #108]	; (8013338 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 80132ce:	7bfb      	ldrb	r3, [r7, #15]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d009      	beq.n	80132e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d106      	bne.n	80132e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	332c      	adds	r3, #44	; 0x2c
 80132e0:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 80132e2:	4916      	ldr	r1, [pc, #88]	; (801333c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	4798      	blx	r3
    }
    print("\n\n");
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	332c      	adds	r3, #44	; 0x2c
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4913      	ldr	r1, [pc, #76]	; (8013340 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 80132f2:	6878      	ldr	r0, [r7, #4]
 80132f4:	4798      	blx	r3

    dotCount_ = 0;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	605a      	str	r2, [r3, #4]
}
 80132fc:	bf00      	nop
 80132fe:	3714      	adds	r7, #20
 8013300:	46bd      	mov	sp, r7
 8013302:	bd90      	pop	{r4, r7, pc}
 8013304:	08027de4 	.word	0x08027de4
 8013308:	08027de8 	.word	0x08027de8
 801330c:	08027df0 	.word	0x08027df0
 8013310:	08027dfc 	.word	0x08027dfc
 8013314:	08027e08 	.word	0x08027e08
 8013318:	08027e18 	.word	0x08027e18
 801331c:	08027e20 	.word	0x08027e20
 8013320:	08027e28 	.word	0x08027e28
 8013324:	08027e34 	.word	0x08027e34
 8013328:	08027e3c 	.word	0x08027e3c
 801332c:	08027e48 	.word	0x08027e48
 8013330:	08027e54 	.word	0x08027e54
 8013334:	08027e64 	.word	0x08027e64
 8013338:	08027e6c 	.word	0x08027e6c
 801333c:	08027e70 	.word	0x08027e70
 8013340:	08027f14 	.word	0x08027f14

08013344 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2b01      	cmp	r3, #1
 8013354:	d922      	bls.n	801339c <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	332c      	adds	r3, #44	; 0x2c
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4911      	ldr	r1, [pc, #68]	; (80133a4 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8013360:	68f8      	ldr	r0, [r7, #12]
 8013362:	4798      	blx	r3
        print(number);
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	3334      	adds	r3, #52	; 0x34
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	68b9      	ldr	r1, [r7, #8]
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	4798      	blx	r3
        print(" of ");
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	332c      	adds	r3, #44	; 0x2c
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	490b      	ldr	r1, [pc, #44]	; (80133a8 <_ZN10TestOutput12printTestRunEjj+0x64>)
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	4798      	blx	r3
        print(total);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	3334      	adds	r3, #52	; 0x34
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	6879      	ldr	r1, [r7, #4]
 801338a:	68f8      	ldr	r0, [r7, #12]
 801338c:	4798      	blx	r3
        print("\n");
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	332c      	adds	r3, #44	; 0x2c
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	4905      	ldr	r1, [pc, #20]	; (80133ac <_ZN10TestOutput12printTestRunEjj+0x68>)
 8013398:	68f8      	ldr	r0, [r7, #12]
 801339a:	4798      	blx	r3
    }
}
 801339c:	bf00      	nop
 801339e:	3710      	adds	r7, #16
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	08027f18 	.word	0x08027f18
 80133a8:	08027f24 	.word	0x08027f24
 80133ac:	08027de4 	.word	0x08027de4

080133b0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 80133ba:	6838      	ldr	r0, [r7, #0]
 80133bc:	f7fd ffa1 	bl	8011302 <_ZNK11TestFailure17isOutsideTestFileEv>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d105      	bne.n	80133d2 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 80133c6:	6838      	ldr	r0, [r7, #0]
 80133c8:	f7fd ffad 	bl	8011326 <_ZNK11TestFailure18isInHelperFunctionEv>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d001      	beq.n	80133d6 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 80133d2:	2301      	movs	r3, #1
 80133d4:	e000      	b.n	80133d8 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 80133d6:	2300      	movs	r3, #0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d004      	beq.n	80133e6 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 80133dc:	6839      	ldr	r1, [r7, #0]
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f000 f81d 	bl	801341e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 80133e4:	e003      	b.n	80133ee <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 80133e6:	6839      	ldr	r1, [r7, #0]
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f000 f86b 	bl	80134c4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	3318      	adds	r3, #24
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f107 0208 	add.w	r2, r7, #8
 80133fa:	6839      	ldr	r1, [r7, #0]
 80133fc:	4610      	mov	r0, r2
 80133fe:	4798      	blx	r3
 8013400:	f107 0308 	add.w	r3, r7, #8
 8013404:	4619      	mov	r1, r3
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 f8b2 	bl	8013570 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 801340c:	f107 0308 	add.w	r3, r7, #8
 8013410:	4618      	mov	r0, r3
 8013412:	f7fc fb74 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8013416:	bf00      	nop
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b088      	sub	sp, #32
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
 8013426:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	331c      	adds	r3, #28
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f107 0208 	add.w	r2, r7, #8
 8013434:	6839      	ldr	r1, [r7, #0]
 8013436:	4610      	mov	r0, r2
 8013438:	4798      	blx	r3
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	3320      	adds	r3, #32
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	6838      	ldr	r0, [r7, #0]
 8013444:	4798      	blx	r3
 8013446:	4602      	mov	r2, r0
 8013448:	f107 0308 	add.w	r3, r7, #8
 801344c:	4619      	mov	r1, r3
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 f8be 	bl	80135d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8013454:	f107 0308 	add.w	r3, r7, #8
 8013458:	4618      	mov	r0, r3
 801345a:	f7fc fb50 	bl	800fafe <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	330c      	adds	r3, #12
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	f107 0210 	add.w	r2, r7, #16
 801346a:	6839      	ldr	r1, [r7, #0]
 801346c:	4610      	mov	r0, r2
 801346e:	4798      	blx	r3
 8013470:	f107 0310 	add.w	r3, r7, #16
 8013474:	4619      	mov	r1, r3
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 f85c 	bl	8013534 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801347c:	f107 0310 	add.w	r3, r7, #16
 8013480:	4618      	mov	r0, r3
 8013482:	f7fc fb3c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	3308      	adds	r3, #8
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	f107 0218 	add.w	r2, r7, #24
 8013492:	6839      	ldr	r1, [r7, #0]
 8013494:	4610      	mov	r0, r2
 8013496:	4798      	blx	r3
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	3314      	adds	r3, #20
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	6838      	ldr	r0, [r7, #0]
 80134a2:	4798      	blx	r3
 80134a4:	4602      	mov	r2, r0
 80134a6:	f107 0318 	add.w	r3, r7, #24
 80134aa:	4619      	mov	r1, r3
 80134ac:	6878      	ldr	r0, [r7, #4]
 80134ae:	f000 f88f 	bl	80135d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80134b2:	f107 0318 	add.w	r3, r7, #24
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7fc fb21 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80134bc:	bf00      	nop
 80134be:	3720      	adds	r7, #32
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	3308      	adds	r3, #8
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f107 0208 	add.w	r2, r7, #8
 80134da:	6839      	ldr	r1, [r7, #0]
 80134dc:	4610      	mov	r0, r2
 80134de:	4798      	blx	r3
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	3314      	adds	r3, #20
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	6838      	ldr	r0, [r7, #0]
 80134ea:	4798      	blx	r3
 80134ec:	4602      	mov	r2, r0
 80134ee:	f107 0308 	add.w	r3, r7, #8
 80134f2:	4619      	mov	r1, r3
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f000 f86b 	bl	80135d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80134fa:	f107 0308 	add.w	r3, r7, #8
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fc fafd 	bl	800fafe <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	330c      	adds	r3, #12
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f107 0210 	add.w	r2, r7, #16
 8013510:	6839      	ldr	r1, [r7, #0]
 8013512:	4610      	mov	r0, r2
 8013514:	4798      	blx	r3
 8013516:	f107 0310 	add.w	r3, r7, #16
 801351a:	4619      	mov	r1, r3
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f000 f809 	bl	8013534 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8013522:	f107 0310 	add.w	r3, r7, #16
 8013526:	4618      	mov	r0, r3
 8013528:	f7fc fae9 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801352c:	bf00      	nop
 801352e:	3718      	adds	r7, #24
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}

08013534 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8013534:	b590      	push	{r4, r7, lr}
 8013536:	b083      	sub	sp, #12
 8013538:	af00      	add	r7, sp, #0
 801353a:	6078      	str	r0, [r7, #4]
 801353c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	332c      	adds	r3, #44	; 0x2c
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	4909      	ldr	r1, [pc, #36]	; (801356c <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	4798      	blx	r3
    print(testName.asCharString());
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	332c      	adds	r3, #44	; 0x2c
 8013552:	681c      	ldr	r4, [r3, #0]
 8013554:	6838      	ldr	r0, [r7, #0]
 8013556:	f7fc faa5 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801355a:	4603      	mov	r3, r0
 801355c:	4619      	mov	r1, r3
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	47a0      	blx	r4
}
 8013562:	bf00      	nop
 8013564:	370c      	adds	r7, #12
 8013566:	46bd      	mov	sp, r7
 8013568:	bd90      	pop	{r4, r7, pc}
 801356a:	bf00      	nop
 801356c:	08027f2c 	.word	0x08027f2c

08013570 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8013570:	b590      	push	{r4, r7, lr}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
    print("\n");
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	332c      	adds	r3, #44	; 0x2c
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	4910      	ldr	r1, [pc, #64]	; (80135c4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	4798      	blx	r3
    print("\t");
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	332c      	adds	r3, #44	; 0x2c
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	490d      	ldr	r1, [pc, #52]	; (80135c8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	4798      	blx	r3
    print(reason.asCharString());
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	332c      	adds	r3, #44	; 0x2c
 801359c:	681c      	ldr	r4, [r3, #0]
 801359e:	6838      	ldr	r0, [r7, #0]
 80135a0:	f7fc fa80 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80135a4:	4603      	mov	r3, r0
 80135a6:	4619      	mov	r1, r3
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	47a0      	blx	r4
    print("\n\n");
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	332c      	adds	r3, #44	; 0x2c
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	4905      	ldr	r1, [pc, #20]	; (80135cc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	4798      	blx	r3
}
 80135ba:	bf00      	nop
 80135bc:	370c      	adds	r7, #12
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}
 80135c2:	bf00      	nop
 80135c4:	08027de4 	.word	0x08027de4
 80135c8:	08027f3c 	.word	0x08027f3c
 80135cc:	08027f14 	.word	0x08027f14

080135d0 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80135d0:	b590      	push	{r4, r7, lr}
 80135d2:	b089      	sub	sp, #36	; 0x24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80135dc:	f7ff fbf0 	bl	8012dc0 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	bf0c      	ite	eq
 80135e6:	2301      	moveq	r3, #1
 80135e8:	2300      	movne	r3, #0
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d015      	beq.n	801361c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	3354      	adds	r3, #84	; 0x54
 80135f6:	681c      	ldr	r4, [r3, #0]
 80135f8:	f107 0310 	add.w	r3, r7, #16
 80135fc:	68b9      	ldr	r1, [r7, #8]
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fb ff19 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8013604:	f107 0310 	add.w	r3, r7, #16
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	4619      	mov	r1, r3
 801360c:	68f8      	ldr	r0, [r7, #12]
 801360e:	47a0      	blx	r4
 8013610:	f107 0310 	add.w	r3, r7, #16
 8013614:	4618      	mov	r0, r3
 8013616:	f7fc fa72 	bl	800fafe <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 801361a:	e014      	b.n	8013646 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	3350      	adds	r3, #80	; 0x50
 8013622:	681c      	ldr	r4, [r3, #0]
 8013624:	f107 0318 	add.w	r3, r7, #24
 8013628:	68b9      	ldr	r1, [r7, #8]
 801362a:	4618      	mov	r0, r3
 801362c:	f7fb ff03 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8013630:	f107 0318 	add.w	r3, r7, #24
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	4619      	mov	r1, r3
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	47a0      	blx	r4
 801363c:	f107 0318 	add.w	r3, r7, #24
 8013640:	4618      	mov	r0, r3
 8013642:	f7fc fa5c 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8013646:	bf00      	nop
 8013648:	3724      	adds	r7, #36	; 0x24
 801364a:	46bd      	mov	sp, r7
 801364c:	bd90      	pop	{r4, r7, pc}
	...

08013650 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8013650:	b590      	push	{r4, r7, lr}
 8013652:	b085      	sub	sp, #20
 8013654:	af00      	add	r7, sp, #0
 8013656:	60f8      	str	r0, [r7, #12]
 8013658:	60b9      	str	r1, [r7, #8]
 801365a:	607a      	str	r2, [r7, #4]
    print("\n");
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	332c      	adds	r3, #44	; 0x2c
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	4916      	ldr	r1, [pc, #88]	; (80136c0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	4798      	blx	r3
    print(file.asCharString());
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	332c      	adds	r3, #44	; 0x2c
 8013670:	681c      	ldr	r4, [r3, #0]
 8013672:	68b8      	ldr	r0, [r7, #8]
 8013674:	f7fc fa16 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8013678:	4603      	mov	r3, r0
 801367a:	4619      	mov	r1, r3
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	47a0      	blx	r4
    print(":");
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	332c      	adds	r3, #44	; 0x2c
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	490e      	ldr	r1, [pc, #56]	; (80136c4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801368a:	68f8      	ldr	r0, [r7, #12]
 801368c:	4798      	blx	r3
    print(lineNumber);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	3334      	adds	r3, #52	; 0x34
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	6879      	ldr	r1, [r7, #4]
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	4798      	blx	r3
    print(":");
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	332c      	adds	r3, #44	; 0x2c
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4907      	ldr	r1, [pc, #28]	; (80136c4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	4798      	blx	r3
    print(" error:");
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	332c      	adds	r3, #44	; 0x2c
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	4905      	ldr	r1, [pc, #20]	; (80136c8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	4798      	blx	r3
}
 80136b8:	bf00      	nop
 80136ba:	3714      	adds	r7, #20
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd90      	pop	{r4, r7, pc}
 80136c0:	08027de4 	.word	0x08027de4
 80136c4:	08027f40 	.word	0x08027f40
 80136c8:	08027f44 	.word	0x08027f44

080136cc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80136cc:	b590      	push	{r4, r7, lr}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	60f8      	str	r0, [r7, #12]
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
    print("\n");
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	332c      	adds	r3, #44	; 0x2c
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4916      	ldr	r1, [pc, #88]	; (801373c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80136e2:	68f8      	ldr	r0, [r7, #12]
 80136e4:	4798      	blx	r3
    print(file.asCharString());
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	332c      	adds	r3, #44	; 0x2c
 80136ec:	681c      	ldr	r4, [r3, #0]
 80136ee:	68b8      	ldr	r0, [r7, #8]
 80136f0:	f7fc f9d8 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80136f4:	4603      	mov	r3, r0
 80136f6:	4619      	mov	r1, r3
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	47a0      	blx	r4
    print("(");
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	332c      	adds	r3, #44	; 0x2c
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	490e      	ldr	r1, [pc, #56]	; (8013740 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8013706:	68f8      	ldr	r0, [r7, #12]
 8013708:	4798      	blx	r3
    print(lineNumber);
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3334      	adds	r3, #52	; 0x34
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	6879      	ldr	r1, [r7, #4]
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	4798      	blx	r3
    print("):");
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	332c      	adds	r3, #44	; 0x2c
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4908      	ldr	r1, [pc, #32]	; (8013744 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	4798      	blx	r3
    print(" error:");
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	332c      	adds	r3, #44	; 0x2c
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	4906      	ldr	r1, [pc, #24]	; (8013748 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8013730:	68f8      	ldr	r0, [r7, #12]
 8013732:	4798      	blx	r3
}
 8013734:	bf00      	nop
 8013736:	3714      	adds	r7, #20
 8013738:	46bd      	mov	sp, r7
 801373a:	bd90      	pop	{r4, r7, pc}
 801373c:	08027de4 	.word	0x08027de4
 8013740:	08027f4c 	.word	0x08027f4c
 8013744:	08027f50 	.word	0x08027f50
 8013748:	08027f44 	.word	0x08027f44

0801374c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	7a1b      	ldrb	r3, [r3, #8]
 801375a:	2b02      	cmp	r3, #2
 801375c:	d106      	bne.n	801376c <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	3328      	adds	r3, #40	; 0x28
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	6839      	ldr	r1, [r7, #0]
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	4798      	blx	r3
}
 801376c:	bf00      	nop
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
    while (*s) {
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	781b      	ldrb	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d009      	beq.n	801379a <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 8013786:	4b0a      	ldr	r3, [pc, #40]	; (80137b0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	683a      	ldr	r2, [r7, #0]
 801378c:	7812      	ldrb	r2, [r2, #0]
 801378e:	4610      	mov	r0, r2
 8013790:	4798      	blx	r3
        s++;
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	3301      	adds	r3, #1
 8013796:	603b      	str	r3, [r7, #0]
    while (*s) {
 8013798:	e7f1      	b.n	801377e <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	334c      	adds	r3, #76	; 0x4c
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	4798      	blx	r3
}
 80137a6:	bf00      	nop
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	bf00      	nop
 80137b0:	200000c0 	.word	0x200000c0

080137b4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80137bc:	4b03      	ldr	r3, [pc, #12]	; (80137cc <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4798      	blx	r3
}
 80137c2:	bf00      	nop
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	200000c4 	.word	0x200000c4

080137d0 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ff fb00 	bl	8012de0 <_ZN10TestOutputC1Ev>
 80137e0:	4a06      	ldr	r2, [pc, #24]	; (80137fc <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2200      	movs	r2, #0
 80137ea:	611a      	str	r2, [r3, #16]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2200      	movs	r2, #0
 80137f0:	615a      	str	r2, [r3, #20]
{
}
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	0802bc18 	.word	0x0802bc18

08013800 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 8013800:	b580      	push	{r7, lr}
 8013802:	b082      	sub	sp, #8
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	4a0e      	ldr	r2, [pc, #56]	; (8013844 <_ZN19CompositeTestOutputD1Ev+0x44>)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	691b      	ldr	r3, [r3, #16]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d004      	beq.n	8013820 <_ZN19CompositeTestOutputD1Ev+0x20>
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	3204      	adds	r2, #4
 801381a:	6812      	ldr	r2, [r2, #0]
 801381c:	4618      	mov	r0, r3
 801381e:	4790      	blx	r2
  delete outputTwo_;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	695b      	ldr	r3, [r3, #20]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d004      	beq.n	8013832 <_ZN19CompositeTestOutputD1Ev+0x32>
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	3204      	adds	r2, #4
 801382c:	6812      	ldr	r2, [r2, #0]
 801382e:	4618      	mov	r0, r3
 8013830:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff faf1 	bl	8012e1c <_ZN10TestOutputD1Ev>
}
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	0802bc18 	.word	0x0802bc18

08013848 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
}
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff ffd5 	bl	8013800 <_ZN19CompositeTestOutputD1Ev>
 8013856:	2118      	movs	r1, #24
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f7f9 f9e9 	bl	800cc30 <_ZdlPvj>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4618      	mov	r0, r3
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d004      	beq.n	8013884 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	3204      	adds	r2, #4
 801387e:	6812      	ldr	r2, [r2, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	4790      	blx	r2
  outputOne_ = output;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	611a      	str	r2, [r3, #16]
}
 801388a:	bf00      	nop
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}

08013892 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 8013892:	b580      	push	{r7, lr}
 8013894:	b082      	sub	sp, #8
 8013896:	af00      	add	r7, sp, #0
 8013898:	6078      	str	r0, [r7, #4]
 801389a:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	695b      	ldr	r3, [r3, #20]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d004      	beq.n	80138ae <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	3204      	adds	r2, #4
 80138a8:	6812      	ldr	r2, [r2, #0]
 80138aa:	4618      	mov	r0, r3
 80138ac:	4790      	blx	r2
  outputTwo_ = output;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	683a      	ldr	r2, [r7, #0]
 80138b2:	615a      	str	r2, [r3, #20]
}
 80138b4:	bf00      	nop
 80138b6:	3708      	adds	r7, #8
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	691b      	ldr	r3, [r3, #16]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d008      	beq.n	80138de <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	691a      	ldr	r2, [r3, #16]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	691b      	ldr	r3, [r3, #16]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	3308      	adds	r3, #8
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	4610      	mov	r0, r2
 80138dc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d008      	beq.n	80138f8 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	695a      	ldr	r2, [r3, #20]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	695b      	ldr	r3, [r3, #20]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	3308      	adds	r3, #8
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4610      	mov	r0, r2
 80138f6:	4798      	blx	r3
}
 80138f8:	bf00      	nop
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	691b      	ldr	r3, [r3, #16]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d009      	beq.n	8013926 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	691a      	ldr	r2, [r3, #16]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	691b      	ldr	r3, [r3, #16]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	330c      	adds	r3, #12
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	6839      	ldr	r1, [r7, #0]
 8013922:	4610      	mov	r0, r2
 8013924:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	695b      	ldr	r3, [r3, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d009      	beq.n	8013942 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	695a      	ldr	r2, [r3, #20]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	695b      	ldr	r3, [r3, #20]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	330c      	adds	r3, #12
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	6839      	ldr	r1, [r7, #0]
 801393e:	4610      	mov	r0, r2
 8013940:	4798      	blx	r3
}
 8013942:	bf00      	nop
 8013944:	3708      	adds	r7, #8
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801394a:	b580      	push	{r7, lr}
 801394c:	b082      	sub	sp, #8
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
 8013952:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	691b      	ldr	r3, [r3, #16]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d009      	beq.n	8013970 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	691a      	ldr	r2, [r3, #16]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	691b      	ldr	r3, [r3, #16]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	3310      	adds	r3, #16
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	6839      	ldr	r1, [r7, #0]
 801396c:	4610      	mov	r0, r2
 801396e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	695b      	ldr	r3, [r3, #20]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d009      	beq.n	801398c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	695a      	ldr	r2, [r3, #20]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	695b      	ldr	r3, [r3, #20]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	3310      	adds	r3, #16
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	6839      	ldr	r1, [r7, #0]
 8013988:	4610      	mov	r0, r2
 801398a:	4798      	blx	r3
}
 801398c:	bf00      	nop
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	691b      	ldr	r3, [r3, #16]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d009      	beq.n	80139ba <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	691a      	ldr	r2, [r3, #16]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	691b      	ldr	r3, [r3, #16]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	3314      	adds	r3, #20
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	6839      	ldr	r1, [r7, #0]
 80139b6:	4610      	mov	r0, r2
 80139b8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	695b      	ldr	r3, [r3, #20]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d009      	beq.n	80139d6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	695a      	ldr	r2, [r3, #20]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	695b      	ldr	r3, [r3, #20]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	3314      	adds	r3, #20
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	6839      	ldr	r1, [r7, #0]
 80139d2:	4610      	mov	r0, r2
 80139d4:	4798      	blx	r3
}
 80139d6:	bf00      	nop
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}

080139de <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80139de:	b580      	push	{r7, lr}
 80139e0:	b082      	sub	sp, #8
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	6078      	str	r0, [r7, #4]
 80139e6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	691b      	ldr	r3, [r3, #16]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d009      	beq.n	8013a04 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	691a      	ldr	r2, [r3, #16]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	691b      	ldr	r3, [r3, #16]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	3318      	adds	r3, #24
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	4610      	mov	r0, r2
 8013a02:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d009      	beq.n	8013a20 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	695a      	ldr	r2, [r3, #20]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	695b      	ldr	r3, [r3, #20]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	3318      	adds	r3, #24
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	6839      	ldr	r1, [r7, #0]
 8013a1c:	4610      	mov	r0, r2
 8013a1e:	4798      	blx	r3
}
 8013a20:	bf00      	nop
 8013a22:	3708      	adds	r7, #8
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	691b      	ldr	r3, [r3, #16]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d009      	beq.n	8013a4e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	691a      	ldr	r2, [r3, #16]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	691b      	ldr	r3, [r3, #16]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	331c      	adds	r3, #28
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	6839      	ldr	r1, [r7, #0]
 8013a4a:	4610      	mov	r0, r2
 8013a4c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	695b      	ldr	r3, [r3, #20]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d009      	beq.n	8013a6a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	695a      	ldr	r2, [r3, #20]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	695b      	ldr	r3, [r3, #20]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	331c      	adds	r3, #28
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	6839      	ldr	r1, [r7, #0]
 8013a66:	4610      	mov	r0, r2
 8013a68:	4798      	blx	r3
}
 8013a6a:	bf00      	nop
 8013a6c:	3708      	adds	r7, #8
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b082      	sub	sp, #8
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	691b      	ldr	r3, [r3, #16]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d009      	beq.n	8013a9a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	691a      	ldr	r2, [r3, #16]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	691b      	ldr	r3, [r3, #16]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	3320      	adds	r3, #32
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	78f9      	ldrb	r1, [r7, #3]
 8013a96:	4610      	mov	r0, r2
 8013a98:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	695b      	ldr	r3, [r3, #20]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d009      	beq.n	8013ab6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	695a      	ldr	r2, [r3, #20]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	695b      	ldr	r3, [r3, #20]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	3320      	adds	r3, #32
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	78f9      	ldrb	r1, [r7, #3]
 8013ab2:	4610      	mov	r0, r2
 8013ab4:	4798      	blx	r3
}
 8013ab6:	bf00      	nop
 8013ab8:	3708      	adds	r7, #8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}

08013abe <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b082      	sub	sp, #8
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	691b      	ldr	r3, [r3, #16]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d008      	beq.n	8013ae0 <_ZN19CompositeTestOutput5colorEv+0x22>
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	691a      	ldr	r2, [r3, #16]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3324      	adds	r3, #36	; 0x24
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4610      	mov	r0, r2
 8013ade:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	695b      	ldr	r3, [r3, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d008      	beq.n	8013afa <_ZN19CompositeTestOutput5colorEv+0x3c>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	695a      	ldr	r2, [r3, #20]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	3324      	adds	r3, #36	; 0x24
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	4610      	mov	r0, r2
 8013af8:	4798      	blx	r3
}
 8013afa:	bf00      	nop
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b082      	sub	sp, #8
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d009      	beq.n	8013b28 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	691a      	ldr	r2, [r3, #16]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	691b      	ldr	r3, [r3, #16]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3328      	adds	r3, #40	; 0x28
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	6839      	ldr	r1, [r7, #0]
 8013b24:	4610      	mov	r0, r2
 8013b26:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	695b      	ldr	r3, [r3, #20]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d009      	beq.n	8013b44 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	695a      	ldr	r2, [r3, #20]
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	695b      	ldr	r3, [r3, #20]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	3328      	adds	r3, #40	; 0x28
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	4610      	mov	r0, r2
 8013b42:	4798      	blx	r3
}
 8013b44:	bf00      	nop
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	691b      	ldr	r3, [r3, #16]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d009      	beq.n	8013b72 <_ZN19CompositeTestOutput5printEPKc+0x26>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	691a      	ldr	r2, [r3, #16]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	691b      	ldr	r3, [r3, #16]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	332c      	adds	r3, #44	; 0x2c
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	6839      	ldr	r1, [r7, #0]
 8013b6e:	4610      	mov	r0, r2
 8013b70:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	695b      	ldr	r3, [r3, #20]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d009      	beq.n	8013b8e <_ZN19CompositeTestOutput5printEPKc+0x42>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	695a      	ldr	r2, [r3, #20]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	695b      	ldr	r3, [r3, #20]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	332c      	adds	r3, #44	; 0x2c
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	4610      	mov	r0, r2
 8013b8c:	4798      	blx	r3
}
 8013b8e:	bf00      	nop
 8013b90:	3708      	adds	r7, #8
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}

08013b96 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 8013b96:	b580      	push	{r7, lr}
 8013b98:	b082      	sub	sp, #8
 8013b9a:	af00      	add	r7, sp, #0
 8013b9c:	6078      	str	r0, [r7, #4]
 8013b9e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	691b      	ldr	r3, [r3, #16]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d009      	beq.n	8013bbc <_ZN19CompositeTestOutput5printEl+0x26>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	691a      	ldr	r2, [r3, #16]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	691b      	ldr	r3, [r3, #16]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	3330      	adds	r3, #48	; 0x30
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	6839      	ldr	r1, [r7, #0]
 8013bb8:	4610      	mov	r0, r2
 8013bba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	695b      	ldr	r3, [r3, #20]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d009      	beq.n	8013bd8 <_ZN19CompositeTestOutput5printEl+0x42>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	695a      	ldr	r2, [r3, #20]
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	695b      	ldr	r3, [r3, #20]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	3330      	adds	r3, #48	; 0x30
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	6839      	ldr	r1, [r7, #0]
 8013bd4:	4610      	mov	r0, r2
 8013bd6:	4798      	blx	r3
}
 8013bd8:	bf00      	nop
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	691b      	ldr	r3, [r3, #16]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d009      	beq.n	8013c06 <_ZN19CompositeTestOutput5printEj+0x26>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	691a      	ldr	r2, [r3, #16]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	691b      	ldr	r3, [r3, #16]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	3334      	adds	r3, #52	; 0x34
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	6839      	ldr	r1, [r7, #0]
 8013c02:	4610      	mov	r0, r2
 8013c04:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	695b      	ldr	r3, [r3, #20]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d009      	beq.n	8013c22 <_ZN19CompositeTestOutput5printEj+0x42>
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	695a      	ldr	r2, [r3, #20]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	695b      	ldr	r3, [r3, #20]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	3334      	adds	r3, #52	; 0x34
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	6839      	ldr	r1, [r7, #0]
 8013c1e:	4610      	mov	r0, r2
 8013c20:	4798      	blx	r3
}
 8013c22:	bf00      	nop
 8013c24:	3708      	adds	r7, #8
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b084      	sub	sp, #16
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	60f8      	str	r0, [r7, #12]
 8013c32:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00a      	beq.n	8013c54 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	691a      	ldr	r2, [r3, #16]
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	691b      	ldr	r3, [r3, #16]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	3338      	adds	r3, #56	; 0x38
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	ed97 0b00 	vldr	d0, [r7]
 8013c50:	4610      	mov	r0, r2
 8013c52:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00a      	beq.n	8013c72 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	695a      	ldr	r2, [r3, #20]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	695b      	ldr	r3, [r3, #20]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	3338      	adds	r3, #56	; 0x38
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	ed97 0b00 	vldr	d0, [r7]
 8013c6e:	4610      	mov	r0, r2
 8013c70:	4798      	blx	r3
}
 8013c72:	bf00      	nop
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b082      	sub	sp, #8
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
 8013c82:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d009      	beq.n	8013ca0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	691a      	ldr	r2, [r3, #16]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	691b      	ldr	r3, [r3, #16]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	333c      	adds	r3, #60	; 0x3c
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	4610      	mov	r0, r2
 8013c9e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	695b      	ldr	r3, [r3, #20]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d009      	beq.n	8013cbc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	695a      	ldr	r2, [r3, #20]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	695b      	ldr	r3, [r3, #20]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	333c      	adds	r3, #60	; 0x3c
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	4610      	mov	r0, r2
 8013cba:	4798      	blx	r3
}
 8013cbc:	bf00      	nop
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d009      	beq.n	8013cea <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	691a      	ldr	r2, [r3, #16]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	691b      	ldr	r3, [r3, #16]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	3344      	adds	r3, #68	; 0x44
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	6839      	ldr	r1, [r7, #0]
 8013ce6:	4610      	mov	r0, r2
 8013ce8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	695b      	ldr	r3, [r3, #20]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d009      	beq.n	8013d06 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	695a      	ldr	r2, [r3, #20]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	695b      	ldr	r3, [r3, #20]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3344      	adds	r3, #68	; 0x44
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	6839      	ldr	r1, [r7, #0]
 8013d02:	4610      	mov	r0, r2
 8013d04:	4798      	blx	r3
}
 8013d06:	bf00      	nop
 8013d08:	3708      	adds	r7, #8
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b082      	sub	sp, #8
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	691b      	ldr	r3, [r3, #16]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d008      	beq.n	8013d30 <_ZN19CompositeTestOutput5flushEv+0x22>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	691a      	ldr	r2, [r3, #16]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	334c      	adds	r3, #76	; 0x4c
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	695b      	ldr	r3, [r3, #20]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d008      	beq.n	8013d4a <_ZN19CompositeTestOutput5flushEv+0x3c>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	695a      	ldr	r2, [r3, #20]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	695b      	ldr	r3, [r3, #20]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	334c      	adds	r3, #76	; 0x4c
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	4610      	mov	r0, r2
 8013d48:	4798      	blx	r3
}
 8013d4a:	bf00      	nop
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}

08013d52 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8013d52:	b480      	push	{r7}
 8013d54:	b085      	sub	sp, #20
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	60f8      	str	r0, [r7, #12]
 8013d5a:	60b9      	str	r1, [r7, #8]
 8013d5c:	607a      	str	r2, [r7, #4]
    }
 8013d5e:	bf00      	nop
 8013d60:	3714      	adds	r7, #20
 8013d62:	46bd      	mov	sp, r7
 8013d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d68:	4770      	bx	lr

08013d6a <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8013d6a:	b480      	push	{r7}
 8013d6c:	b085      	sub	sp, #20
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	60b9      	str	r1, [r7, #8]
 8013d74:	607a      	str	r2, [r7, #4]
    }
 8013d76:	bf00      	nop
 8013d78:	3714      	adds	r7, #20
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr
	...

08013d84 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b082      	sub	sp, #8
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8013d8e:	4a0b      	ldr	r2, [pc, #44]	; (8013dbc <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f000 f9ce 	bl	8014134 <_ZN14NullTestPlugin8instanceEv>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	605a      	str	r2, [r3, #4]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	3308      	adds	r3, #8
 8013da2:	6839      	ldr	r1, [r7, #0]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fb fb46 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2201      	movs	r2, #1
 8013dae:	741a      	strb	r2, [r3, #16]
{
}
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	4618      	mov	r0, r3
 8013db4:	3708      	adds	r7, #8
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
 8013dba:	bf00      	nop
 8013dbc:	0802bdd4 	.word	0x0802bdd4

08013dc0 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 8013dca:	4a0a      	ldr	r2, [pc, #40]	; (8013df4 <_ZN10TestPluginC1EPS_+0x34>)
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	601a      	str	r2, [r3, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	683a      	ldr	r2, [r7, #0]
 8013dd4:	605a      	str	r2, [r3, #4]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	3308      	adds	r3, #8
 8013dda:	4907      	ldr	r1, [pc, #28]	; (8013df8 <_ZN10TestPluginC1EPS_+0x38>)
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fb fad6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2201      	movs	r2, #1
 8013de6:	741a      	strb	r2, [r3, #16]
{
}
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	4618      	mov	r0, r3
 8013dec:	3708      	adds	r7, #8
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	0802bdd4 	.word	0x0802bdd4
 8013df8:	08027f54 	.word	0x08027f54

08013dfc <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	4a06      	ldr	r2, [pc, #24]	; (8013e20 <_ZN10TestPluginD1Ev+0x24>)
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	601a      	str	r2, [r3, #0]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	3308      	adds	r3, #8
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7fb fe75 	bl	800fafe <_ZN12SimpleStringD1Ev>
{
}
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4618      	mov	r0, r3
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	0802bdd4 	.word	0x0802bdd4

08013e24 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
}
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7ff ffe5 	bl	8013dfc <_ZN10TestPluginD1Ev>
 8013e32:	2114      	movs	r1, #20
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7f8 fefb 	bl	800cc30 <_ZdlPvj>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	683a      	ldr	r2, [r7, #0]
 8013e52:	605a      	str	r2, [r3, #4]
    return this;
 8013e54:	687b      	ldr	r3, [r7, #4]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	370c      	adds	r7, #12
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e60:	4770      	bx	lr

08013e62 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8013e62:	b580      	push	{r7, lr}
 8013e64:	b084      	sub	sp, #16
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	60f8      	str	r0, [r7, #12]
 8013e6a:	60b9      	str	r1, [r7, #8]
 8013e6c:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	7c1b      	ldrb	r3, [r3, #16]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d007      	beq.n	8013e86 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	3308      	adds	r3, #8
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	68b9      	ldr	r1, [r7, #8]
 8013e82:	68f8      	ldr	r0, [r7, #12]
 8013e84:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	6858      	ldr	r0, [r3, #4]
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	3314      	adds	r3, #20
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	687a      	ldr	r2, [r7, #4]
 8013e96:	68b9      	ldr	r1, [r7, #8]
 8013e98:	4798      	blx	r3
}
 8013e9a:	bf00      	nop
 8013e9c:	3710      	adds	r7, #16
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b084      	sub	sp, #16
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	60f8      	str	r0, [r7, #12]
 8013eaa:	60b9      	str	r1, [r7, #8]
 8013eac:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	6858      	ldr	r0, [r3, #4]
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	3318      	adds	r3, #24
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	687a      	ldr	r2, [r7, #4]
 8013ebe:	68b9      	ldr	r1, [r7, #8]
 8013ec0:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	7c1b      	ldrb	r3, [r3, #16]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d007      	beq.n	8013eda <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	330c      	adds	r3, #12
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	68b9      	ldr	r1, [r7, #8]
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	4798      	blx	r3
}
 8013eda:	bf00      	nop
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8013ee2:	b590      	push	{r4, r7, lr}
 8013ee4:	b085      	sub	sp, #20
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	60f8      	str	r0, [r7, #12]
 8013eea:	60b9      	str	r1, [r7, #8]
 8013eec:	607a      	str	r2, [r7, #4]
 8013eee:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	331c      	adds	r3, #28
 8013ef6:	681c      	ldr	r4, [r3, #0]
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	68b9      	ldr	r1, [r7, #8]
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	47a0      	blx	r4
 8013f02:	4603      	mov	r3, r0
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	3714      	adds	r7, #20
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd90      	pop	{r4, r7, pc}

08013f0c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8013f0c:	b590      	push	{r4, r7, lr}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
 8013f18:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	3310      	adds	r3, #16
 8013f20:	681c      	ldr	r4, [r3, #0]
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	68b9      	ldr	r1, [r7, #8]
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	47a0      	blx	r4
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d001      	beq.n	8013f36 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8013f32:	2301      	movs	r3, #1
 8013f34:	e011      	b.n	8013f5a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d00c      	beq.n	8013f58 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6858      	ldr	r0, [r3, #4]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	331c      	adds	r3, #28
 8013f4a:	681c      	ldr	r4, [r3, #0]
 8013f4c:	683b      	ldr	r3, [r7, #0]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	68b9      	ldr	r1, [r7, #8]
 8013f52:	47a0      	blx	r4
 8013f54:	4603      	mov	r3, r0
 8013f56:	e000      	b.n	8013f5a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3714      	adds	r7, #20
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd90      	pop	{r4, r7, pc}

08013f62 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8013f62:	b480      	push	{r7}
 8013f64:	b083      	sub	sp, #12
 8013f66:	af00      	add	r7, sp, #0
 8013f68:	6078      	str	r0, [r7, #4]
    return name_;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	3308      	adds	r3, #8
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	370c      	adds	r7, #12
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr

08013f7a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b082      	sub	sp, #8
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	3308      	adds	r3, #8
 8013f88:	4619      	mov	r1, r3
 8013f8a:	6838      	ldr	r0, [r7, #0]
 8013f8c:	f7fb fdc3 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d001      	beq.n	8013f9a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	e00d      	b.n	8013fb6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d007      	beq.n	8013fb2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	6839      	ldr	r1, [r7, #0]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ff ffe6 	bl	8013f7a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	e001      	b.n	8013fb6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	685b      	ldr	r3, [r3, #4]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}

08013fbe <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8013fbe:	b480      	push	{r7}
 8013fc0:	b083      	sub	sp, #12
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	6078      	str	r0, [r7, #4]
    return next_;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	685b      	ldr	r3, [r3, #4]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	370c      	adds	r7, #12
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b084      	sub	sp, #16
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	685b      	ldr	r3, [r3, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d00e      	beq.n	801400a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7ff ffb6 	bl	8013f62 <_ZN10TestPlugin7getNameEv>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	6839      	ldr	r1, [r7, #0]
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	f7fb fd8b 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8014000:	4603      	mov	r3, r0
 8014002:	2b00      	cmp	r3, #0
 8014004:	d001      	beq.n	801400a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8014006:	2301      	movs	r3, #1
 8014008:	e000      	b.n	801400c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 801400a:	2300      	movs	r3, #0
 801400c:	2b00      	cmp	r3, #0
 801400e:	d007      	beq.n	8014020 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	685b      	ldr	r3, [r3, #4]
 8014014:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	685a      	ldr	r2, [r3, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8014020:	68fb      	ldr	r3, [r7, #12]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801402a:	b480      	push	{r7}
 801402c:	b083      	sub	sp, #12
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2200      	movs	r2, #0
 8014036:	741a      	strb	r2, [r3, #16]
}
 8014038:	bf00      	nop
 801403a:	370c      	adds	r7, #12
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2201      	movs	r2, #1
 8014050:	741a      	strb	r2, [r3, #16]
}
 8014052:	bf00      	nop
 8014054:	370c      	adds	r7, #12
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr

0801405e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 801405e:	b480      	push	{r7}
 8014060:	b083      	sub	sp, #12
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
    return enabled_;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	7c1b      	ldrb	r3, [r3, #16]
}
 801406a:	4618      	mov	r0, r3
 801406c:	370c      	adds	r7, #12
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr
	...

08014078 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6839      	ldr	r1, [r7, #0]
 8014086:	4618      	mov	r0, r3
 8014088:	f7ff fe7c 	bl	8013d84 <_ZN10TestPluginC1ERK12SimpleString>
 801408c:	4a05      	ldr	r2, [pc, #20]	; (80140a4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8014092:	4b05      	ldr	r3, [pc, #20]	; (80140a8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8014094:	2200      	movs	r2, #0
 8014096:	601a      	str	r2, [r3, #0]
}
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	0802bd90 	.word	0x0802bd90
 80140a8:	20000aa8 	.word	0x20000aa8

080140ac <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 80140ac:	b480      	push	{r7}
 80140ae:	b087      	sub	sp, #28
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	60f8      	str	r0, [r7, #12]
 80140b4:	60b9      	str	r1, [r7, #8]
 80140b6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80140b8:	4b0e      	ldr	r3, [pc, #56]	; (80140f4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	3b01      	subs	r3, #1
 80140be:	617b      	str	r3, [r7, #20]
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	db0d      	blt.n	80140e2 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80140c6:	4a0c      	ldr	r2, [pc, #48]	; (80140f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80140ce:	490a      	ldr	r1, [pc, #40]	; (80140f8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	440b      	add	r3, r1
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	3b01      	subs	r3, #1
 80140de:	617b      	str	r3, [r7, #20]
 80140e0:	e7ee      	b.n	80140c0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 80140e2:	4b04      	ldr	r3, [pc, #16]	; (80140f4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80140e4:	2200      	movs	r2, #0
 80140e6:	601a      	str	r2, [r3, #0]
}
 80140e8:	bf00      	nop
 80140ea:	371c      	adds	r7, #28
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr
 80140f4:	20000aa8 	.word	0x20000aa8
 80140f8:	20000aac 	.word	0x20000aac

080140fc <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2100      	movs	r1, #0
 8014108:	4618      	mov	r0, r3
 801410a:	f7ff fe59 	bl	8013dc0 <_ZN10TestPluginC1EPS_>
 801410e:	4a04      	ldr	r2, [pc, #16]	; (8014120 <_ZN14NullTestPluginC1Ev+0x24>)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	601a      	str	r2, [r3, #0]
{
}
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	4618      	mov	r0, r3
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	0802bd4c 	.word	0x0802bd4c

08014124 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8014124:	b580      	push	{r7, lr}
 8014126:	af00      	add	r7, sp, #0
 8014128:	4801      	ldr	r0, [pc, #4]	; (8014130 <__tcf_0+0xc>)
 801412a:	f000 f849 	bl	80141c0 <_ZN14NullTestPluginD1Ev>
 801412e:	bd80      	pop	{r7, pc}
 8014130:	20000bac 	.word	0x20000bac

08014134 <_ZN14NullTestPlugin8instanceEv>:
{
 8014134:	b580      	push	{r7, lr}
 8014136:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8014138:	4b12      	ldr	r3, [pc, #72]	; (8014184 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	f3bf 8f5b 	dmb	ish
 8014140:	b2db      	uxtb	r3, r3
 8014142:	f003 0301 	and.w	r3, r3, #1
 8014146:	2b00      	cmp	r3, #0
 8014148:	bf0c      	ite	eq
 801414a:	2301      	moveq	r3, #1
 801414c:	2300      	movne	r3, #0
 801414e:	b2db      	uxtb	r3, r3
 8014150:	2b00      	cmp	r3, #0
 8014152:	d013      	beq.n	801417c <_ZN14NullTestPlugin8instanceEv+0x48>
 8014154:	480b      	ldr	r0, [pc, #44]	; (8014184 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8014156:	f00d ffdb 	bl	8022110 <__cxa_guard_acquire>
 801415a:	4603      	mov	r3, r0
 801415c:	2b00      	cmp	r3, #0
 801415e:	bf14      	ite	ne
 8014160:	2301      	movne	r3, #1
 8014162:	2300      	moveq	r3, #0
 8014164:	b2db      	uxtb	r3, r3
 8014166:	2b00      	cmp	r3, #0
 8014168:	d008      	beq.n	801417c <_ZN14NullTestPlugin8instanceEv+0x48>
 801416a:	4807      	ldr	r0, [pc, #28]	; (8014188 <_ZN14NullTestPlugin8instanceEv+0x54>)
 801416c:	f7ff ffc6 	bl	80140fc <_ZN14NullTestPluginC1Ev>
 8014170:	4804      	ldr	r0, [pc, #16]	; (8014184 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8014172:	f00d ffd9 	bl	8022128 <__cxa_guard_release>
 8014176:	4805      	ldr	r0, [pc, #20]	; (801418c <_ZN14NullTestPlugin8instanceEv+0x58>)
 8014178:	f00d fffd 	bl	8022176 <atexit>
    return &_instance;
 801417c:	4b02      	ldr	r3, [pc, #8]	; (8014188 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 801417e:	4618      	mov	r0, r3
 8014180:	bd80      	pop	{r7, pc}
 8014182:	bf00      	nop
 8014184:	20000bc0 	.word	0x20000bc0
 8014188:	20000bac 	.word	0x20000bac
 801418c:	08014125 	.word	0x08014125

08014190 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8014190:	b480      	push	{r7}
 8014192:	b085      	sub	sp, #20
 8014194:	af00      	add	r7, sp, #0
 8014196:	60f8      	str	r0, [r7, #12]
 8014198:	60b9      	str	r1, [r7, #8]
 801419a:	607a      	str	r2, [r7, #4]
}
 801419c:	bf00      	nop
 801419e:	3714      	adds	r7, #20
 80141a0:	46bd      	mov	sp, r7
 80141a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a6:	4770      	bx	lr

080141a8 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 80141a8:	b480      	push	{r7}
 80141aa:	b085      	sub	sp, #20
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
}
 80141b4:	bf00      	nop
 80141b6:	3714      	adds	r7, #20
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	4a05      	ldr	r2, [pc, #20]	; (80141e0 <_ZN14NullTestPluginD1Ev+0x20>)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	601a      	str	r2, [r3, #0]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff fe13 	bl	8013dfc <_ZN10TestPluginD1Ev>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	0802bd4c 	.word	0x0802bd4c

080141e4 <_ZN14NullTestPluginD0Ev>:
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f7ff ffe7 	bl	80141c0 <_ZN14NullTestPluginD1Ev>
 80141f2:	2114      	movs	r1, #20
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7f8 fd1b 	bl	800cc30 <_ZdlPvj>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	4618      	mov	r0, r3
 80141fe:	3708      	adds	r7, #8
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 801420c:	4a0f      	ldr	r2, [pc, #60]	; (801424c <_ZN12TestRegistryC1Ev+0x48>)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	601a      	str	r2, [r3, #0]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	605a      	str	r2, [r3, #4]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2200      	movs	r2, #0
 801421c:	609a      	str	r2, [r3, #8]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2200      	movs	r2, #0
 8014222:	60da      	str	r2, [r3, #12]
 8014224:	f7ff ff86 	bl	8014134 <_ZN14NullTestPlugin8instanceEv>
 8014228:	4602      	mov	r2, r0
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	611a      	str	r2, [r3, #16]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	751a      	strb	r2, [r3, #20]
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	619a      	str	r2, [r3, #24]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2200      	movs	r2, #0
 801423e:	771a      	strb	r2, [r3, #28]
{
}
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	4618      	mov	r0, r3
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	0802be18 	.word	0x0802be18

08014250 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8014250:	b480      	push	{r7}
 8014252:	b083      	sub	sp, #12
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	4a04      	ldr	r2, [pc, #16]	; (801426c <_ZN12TestRegistryD1Ev+0x1c>)
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	601a      	str	r2, [r3, #0]
{
}
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	4618      	mov	r0, r3
 8014262:	370c      	adds	r7, #12
 8014264:	46bd      	mov	sp, r7
 8014266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426a:	4770      	bx	lr
 801426c:	0802be18 	.word	0x0802be18

08014270 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8014270:	b580      	push	{r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
}
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7ff ffe9 	bl	8014250 <_ZN12TestRegistryD1Ev>
 801427e:	2120      	movs	r1, #32
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f7f8 fcd5 	bl	800cc30 <_ZdlPvj>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	4618      	mov	r0, r3
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	3308      	adds	r3, #8
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	6852      	ldr	r2, [r2, #4]
 80142a6:	4611      	mov	r1, r2
 80142a8:	6838      	ldr	r0, [r7, #0]
 80142aa:	4798      	blx	r3
 80142ac:	4602      	mov	r2, r0
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	605a      	str	r2, [r3, #4]
}
 80142b2:	bf00      	nop
 80142b4:	3708      	adds	r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b084      	sub	sp, #16
 80142be:	af00      	add	r7, sp, #0
 80142c0:	6078      	str	r0, [r7, #4]
 80142c2:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80142c4:	2301      	movs	r3, #1
 80142c6:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	3308      	adds	r3, #8
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	6838      	ldr	r0, [r7, #0]
 80142d2:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	60bb      	str	r3, [r7, #8]
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d05c      	beq.n	801439a <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	7d1b      	ldrb	r3, [r3, #20]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d005      	beq.n	80142f4 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	3380      	adds	r3, #128	; 0x80
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	68b8      	ldr	r0, [r7, #8]
 80142f2:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	7f1b      	ldrb	r3, [r3, #28]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d005      	beq.n	8014308 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	3384      	adds	r3, #132	; 0x84
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	68b8      	ldr	r0, [r7, #8]
 8014306:	4798      	blx	r3

        if (groupStart) {
 8014308:	7bfb      	ldrb	r3, [r7, #15]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d008      	beq.n	8014320 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	3310      	adds	r3, #16
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	6838      	ldr	r0, [r7, #0]
 801431a:	4798      	blx	r3
            groupStart = false;
 801431c:	2300      	movs	r3, #0
 801431e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	3320      	adds	r3, #32
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	6838      	ldr	r0, [r7, #0]
 801432a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 801432c:	683a      	ldr	r2, [r7, #0]
 801432e:	68b9      	ldr	r1, [r7, #8]
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 fb79 	bl	8014a28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d016      	beq.n	801436a <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	3318      	adds	r3, #24
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	68b9      	ldr	r1, [r7, #8]
 8014346:	6838      	ldr	r0, [r7, #0]
 8014348:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	3390      	adds	r3, #144	; 0x90
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	6911      	ldr	r1, [r2, #16]
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	68b8      	ldr	r0, [r7, #8]
 801435a:	4798      	blx	r3
            result.currentTestEnded(test);
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	331c      	adds	r3, #28
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	68b9      	ldr	r1, [r7, #8]
 8014366:	6838      	ldr	r0, [r7, #0]
 8014368:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801436a:	68b9      	ldr	r1, [r7, #8]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fa5b 	bl	8014828 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d008      	beq.n	801438a <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8014378:	2301      	movs	r3, #1
 801437a:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	3314      	adds	r3, #20
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	68b9      	ldr	r1, [r7, #8]
 8014386:	6838      	ldr	r0, [r7, #0]
 8014388:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	330c      	adds	r3, #12
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	68b8      	ldr	r0, [r7, #8]
 8014394:	4798      	blx	r3
 8014396:	60b8      	str	r0, [r7, #8]
 8014398:	e79f      	b.n	80142da <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	330c      	adds	r3, #12
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	6838      	ldr	r0, [r7, #0]
 80143a4:	4798      	blx	r3
    currentRepetition_++;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	699b      	ldr	r3, [r3, #24]
 80143aa:	1c5a      	adds	r2, r3, #1
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	619a      	str	r2, [r3, #24]
}
 80143b0:	bf00      	nop
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 80143b8:	b590      	push	{r4, r7, lr}
 80143ba:	b08f      	sub	sp, #60	; 0x3c
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80143c2:	f107 0314 	add.w	r3, r7, #20
 80143c6:	4953      	ldr	r1, [pc, #332]	; (8014514 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fa ffe0 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	637b      	str	r3, [r7, #52]	; 0x34
 80143d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d04d      	beq.n	8014476 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80143da:	f107 030c 	add.w	r3, r7, #12
 80143de:	494d      	ldr	r1, [pc, #308]	; (8014514 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fa ffd4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
        gname += "#";
 80143e6:	f107 030c 	add.w	r3, r7, #12
 80143ea:	494b      	ldr	r1, [pc, #300]	; (8014518 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fb fc15 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 80143f2:	f107 031c 	add.w	r3, r7, #28
 80143f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80143f8:	4618      	mov	r0, r3
 80143fa:	f001 f9d2 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 80143fe:	f107 021c 	add.w	r2, r7, #28
 8014402:	f107 030c 	add.w	r3, r7, #12
 8014406:	4611      	mov	r1, r2
 8014408:	4618      	mov	r0, r3
 801440a:	f7fb fbf5 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801440e:	f107 031c 	add.w	r3, r7, #28
 8014412:	4618      	mov	r0, r3
 8014414:	f7fb fb73 	bl	800fafe <_ZN12SimpleStringD1Ev>
        gname += "#";
 8014418:	f107 030c 	add.w	r3, r7, #12
 801441c:	493e      	ldr	r1, [pc, #248]	; (8014518 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801441e:	4618      	mov	r0, r3
 8014420:	f7fb fbfc 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8014424:	f107 020c 	add.w	r2, r7, #12
 8014428:	f107 0314 	add.w	r3, r7, #20
 801442c:	4611      	mov	r1, r2
 801442e:	4618      	mov	r0, r3
 8014430:	f7fb f82b 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 8014434:	4603      	mov	r3, r0
 8014436:	f083 0301 	eor.w	r3, r3, #1
 801443a:	b2db      	uxtb	r3, r3
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00d      	beq.n	801445c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8014440:	f107 020c 	add.w	r2, r7, #12
 8014444:	f107 0314 	add.w	r3, r7, #20
 8014448:	4611      	mov	r1, r2
 801444a:	4618      	mov	r0, r3
 801444c:	f7fb fbd4 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8014450:	f107 0314 	add.w	r3, r7, #20
 8014454:	4931      	ldr	r1, [pc, #196]	; (801451c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8014456:	4618      	mov	r0, r3
 8014458:	f7fb fbe0 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 801445c:	f107 030c 	add.w	r3, r7, #12
 8014460:	4618      	mov	r0, r3
 8014462:	f7fb fb4c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8014466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	330c      	adds	r3, #12
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014470:	4798      	blx	r3
 8014472:	6378      	str	r0, [r7, #52]	; 0x34
 8014474:	e7ae      	b.n	80143d4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8014476:	f107 0314 	add.w	r3, r7, #20
 801447a:	4a26      	ldr	r2, [pc, #152]	; (8014514 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 801447c:	4926      	ldr	r1, [pc, #152]	; (8014518 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 801447e:	4618      	mov	r0, r3
 8014480:	f7fb f99a 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8014484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014488:	4924      	ldr	r1, [pc, #144]	; (801451c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801448a:	4618      	mov	r0, r3
 801448c:	f7fa ff7f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8014490:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014494:	f107 0314 	add.w	r3, r7, #20
 8014498:	4611      	mov	r1, r2
 801449a:	4618      	mov	r0, r3
 801449c:	f7fb f874 	bl	800f588 <_ZNK12SimpleString8endsWithERKS_>
 80144a0:	4603      	mov	r3, r0
 80144a2:	461c      	mov	r4, r3
 80144a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fb fb28 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80144ae:	2c00      	cmp	r4, #0
 80144b0:	d01a      	beq.n	80144e8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80144b2:	f107 0314 	add.w	r3, r7, #20
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7fb fb00 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80144bc:	4603      	mov	r3, r0
 80144be:	3b01      	subs	r3, #1
 80144c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80144c4:	f107 0114 	add.w	r1, r7, #20
 80144c8:	2200      	movs	r2, #0
 80144ca:	f7fb fc21 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 80144ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80144d2:	f107 0314 	add.w	r3, r7, #20
 80144d6:	4611      	mov	r1, r2
 80144d8:	4618      	mov	r0, r3
 80144da:	f7fa ffc4 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80144de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fb fb0b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	3338      	adds	r3, #56	; 0x38
 80144ee:	681c      	ldr	r4, [r3, #0]
 80144f0:	f107 0314 	add.w	r3, r7, #20
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fb fad5 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80144fa:	4603      	mov	r3, r0
 80144fc:	4619      	mov	r1, r3
 80144fe:	6838      	ldr	r0, [r7, #0]
 8014500:	47a0      	blx	r4
    SimpleString groupList;
 8014502:	f107 0314 	add.w	r3, r7, #20
 8014506:	4618      	mov	r0, r3
 8014508:	f7fb faf9 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801450c:	bf00      	nop
 801450e:	373c      	adds	r7, #60	; 0x3c
 8014510:	46bd      	mov	sp, r7
 8014512:	bd90      	pop	{r4, r7, pc}
 8014514:	08027fa4 	.word	0x08027fa4
 8014518:	08027fa8 	.word	0x08027fa8
 801451c:	08027fac 	.word	0x08027fac

08014520 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8014520:	b590      	push	{r4, r7, lr}
 8014522:	b091      	sub	sp, #68	; 0x44
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801452a:	f107 0314 	add.w	r3, r7, #20
 801452e:	4964      	ldr	r1, [pc, #400]	; (80146c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8014530:	4618      	mov	r0, r3
 8014532:	f7fa ff2c 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801453e:	2b00      	cmp	r3, #0
 8014540:	d06e      	beq.n	8014620 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8014542:	683a      	ldr	r2, [r7, #0]
 8014544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 fa6e 	bl	8014a28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d05e      	beq.n	8014610 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8014552:	f107 030c 	add.w	r3, r7, #12
 8014556:	495a      	ldr	r1, [pc, #360]	; (80146c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8014558:	4618      	mov	r0, r3
 801455a:	f7fa ff18 	bl	800f38e <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801455e:	f107 030c 	add.w	r3, r7, #12
 8014562:	4958      	ldr	r1, [pc, #352]	; (80146c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8014564:	4618      	mov	r0, r3
 8014566:	f7fb fb59 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801456a:	f107 031c 	add.w	r3, r7, #28
 801456e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014570:	4618      	mov	r0, r3
 8014572:	f001 f916 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 8014576:	f107 021c 	add.w	r2, r7, #28
 801457a:	f107 030c 	add.w	r3, r7, #12
 801457e:	4611      	mov	r1, r2
 8014580:	4618      	mov	r0, r3
 8014582:	f7fb fb39 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8014586:	f107 031c 	add.w	r3, r7, #28
 801458a:	4618      	mov	r0, r3
 801458c:	f7fb fab7 	bl	800fafe <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8014590:	f107 030c 	add.w	r3, r7, #12
 8014594:	494c      	ldr	r1, [pc, #304]	; (80146c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 8014596:	4618      	mov	r0, r3
 8014598:	f7fb fb40 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 801459c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145a2:	4618      	mov	r0, r3
 80145a4:	f001 f8ee 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 80145a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80145ac:	f107 030c 	add.w	r3, r7, #12
 80145b0:	4611      	mov	r1, r2
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fb fb20 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80145b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fb fa9e 	bl	800fafe <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80145c2:	f107 030c 	add.w	r3, r7, #12
 80145c6:	493f      	ldr	r1, [pc, #252]	; (80146c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fb fb27 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80145ce:	f107 020c 	add.w	r2, r7, #12
 80145d2:	f107 0314 	add.w	r3, r7, #20
 80145d6:	4611      	mov	r1, r2
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fa ff56 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 80145de:	4603      	mov	r3, r0
 80145e0:	f083 0301 	eor.w	r3, r3, #1
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d00d      	beq.n	8014606 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80145ea:	f107 020c 	add.w	r2, r7, #12
 80145ee:	f107 0314 	add.w	r3, r7, #20
 80145f2:	4611      	mov	r1, r2
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7fb faff 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80145fa:	f107 0314 	add.w	r3, r7, #20
 80145fe:	4933      	ldr	r1, [pc, #204]	; (80146cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8014600:	4618      	mov	r0, r3
 8014602:	f7fb fb0b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8014606:	f107 030c 	add.w	r3, r7, #12
 801460a:	4618      	mov	r0, r3
 801460c:	f7fb fa77 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8014610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	330c      	adds	r3, #12
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801461a:	4798      	blx	r3
 801461c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801461e:	e78d      	b.n	801453c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8014620:	f107 0314 	add.w	r3, r7, #20
 8014624:	4a26      	ldr	r2, [pc, #152]	; (80146c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8014626:	4927      	ldr	r1, [pc, #156]	; (80146c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8014628:	4618      	mov	r0, r3
 801462a:	f7fb f8c5 	bl	800f7b8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801462e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014632:	4926      	ldr	r1, [pc, #152]	; (80146cc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8014634:	4618      	mov	r0, r3
 8014636:	f7fa feaa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801463a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801463e:	f107 0314 	add.w	r3, r7, #20
 8014642:	4611      	mov	r1, r2
 8014644:	4618      	mov	r0, r3
 8014646:	f7fa ff9f 	bl	800f588 <_ZNK12SimpleString8endsWithERKS_>
 801464a:	4603      	mov	r3, r0
 801464c:	461c      	mov	r4, r3
 801464e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014652:	4618      	mov	r0, r3
 8014654:	f7fb fa53 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8014658:	2c00      	cmp	r4, #0
 801465a:	d01a      	beq.n	8014692 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 801465c:	f107 0314 	add.w	r3, r7, #20
 8014660:	4618      	mov	r0, r3
 8014662:	f7fb fa2b 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 8014666:	4603      	mov	r3, r0
 8014668:	3b01      	subs	r3, #1
 801466a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801466e:	f107 0114 	add.w	r1, r7, #20
 8014672:	2200      	movs	r2, #0
 8014674:	f7fb fb4c 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 8014678:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801467c:	f107 0314 	add.w	r3, r7, #20
 8014680:	4611      	mov	r1, r2
 8014682:	4618      	mov	r0, r3
 8014684:	f7fa feef 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8014688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801468c:	4618      	mov	r0, r3
 801468e:	f7fb fa36 	bl	800fafe <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	3338      	adds	r3, #56	; 0x38
 8014698:	681c      	ldr	r4, [r3, #0]
 801469a:	f107 0314 	add.w	r3, r7, #20
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fb fa00 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80146a4:	4603      	mov	r3, r0
 80146a6:	4619      	mov	r1, r3
 80146a8:	6838      	ldr	r0, [r7, #0]
 80146aa:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80146ac:	f107 0314 	add.w	r3, r7, #20
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7fb fa24 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80146b6:	bf00      	nop
 80146b8:	3744      	adds	r7, #68	; 0x44
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd90      	pop	{r4, r7, pc}
 80146be:	bf00      	nop
 80146c0:	08027fa4 	.word	0x08027fa4
 80146c4:	08027fa8 	.word	0x08027fa8
 80146c8:	08027fb0 	.word	0x08027fb0
 80146cc:	08027fac 	.word	0x08027fac

080146d0 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80146d0:	b590      	push	{r4, r7, lr}
 80146d2:	b091      	sub	sp, #68	; 0x44
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80146da:	f107 0314 	add.w	r3, r7, #20
 80146de:	494f      	ldr	r1, [pc, #316]	; (801481c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fa fe54 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80146ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d07d      	beq.n	80147ee <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80146f2:	f107 030c 	add.w	r3, r7, #12
 80146f6:	4949      	ldr	r1, [pc, #292]	; (801481c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7fa fe48 	bl	800f38e <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80146fe:	f107 031c 	add.w	r3, r7, #28
 8014702:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014704:	4618      	mov	r0, r3
 8014706:	f001 f84c 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 801470a:	f107 021c 	add.w	r2, r7, #28
 801470e:	f107 030c 	add.w	r3, r7, #12
 8014712:	4611      	mov	r1, r2
 8014714:	4618      	mov	r0, r3
 8014716:	f7fb fa6f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801471a:	f107 031c 	add.w	r3, r7, #28
 801471e:	4618      	mov	r0, r3
 8014720:	f7fb f9ed 	bl	800fafe <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8014724:	f107 030c 	add.w	r3, r7, #12
 8014728:	493d      	ldr	r1, [pc, #244]	; (8014820 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801472a:	4618      	mov	r0, r3
 801472c:	f7fb fa76 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8014730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014736:	4618      	mov	r0, r3
 8014738:	f001 f824 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 801473c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014740:	f107 030c 	add.w	r3, r7, #12
 8014744:	4611      	mov	r1, r2
 8014746:	4618      	mov	r0, r3
 8014748:	f7fb fa56 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801474c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014750:	4618      	mov	r0, r3
 8014752:	f7fb f9d4 	bl	800fafe <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8014756:	f107 030c 	add.w	r3, r7, #12
 801475a:	4931      	ldr	r1, [pc, #196]	; (8014820 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801475c:	4618      	mov	r0, r3
 801475e:	f7fb fa5d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8014762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014768:	4618      	mov	r0, r3
 801476a:	f001 f8dc 	bl	8015926 <_ZNK10UtestShell7getFileEv>
 801476e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014772:	f107 030c 	add.w	r3, r7, #12
 8014776:	4611      	mov	r1, r2
 8014778:	4618      	mov	r0, r3
 801477a:	f7fb fa3d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801477e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014782:	4618      	mov	r0, r3
 8014784:	f7fb f9bb 	bl	800fafe <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8014788:	f107 030c 	add.w	r3, r7, #12
 801478c:	4924      	ldr	r1, [pc, #144]	; (8014820 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 801478e:	4618      	mov	r0, r3
 8014790:	f7fb fa44 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8014794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014796:	f001 f8d5 	bl	8015944 <_ZNK10UtestShell13getLineNumberEv>
 801479a:	4603      	mov	r3, r0
 801479c:	461a      	mov	r2, r3
 801479e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147a2:	4920      	ldr	r1, [pc, #128]	; (8014824 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fb feb1 	bl	801050c <_Z16StringFromFormatPKcz>
 80147aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80147ae:	f107 030c 	add.w	r3, r7, #12
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fb fa1f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 80147ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80147be:	4618      	mov	r0, r3
 80147c0:	f7fb f99d 	bl	800fafe <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80147c4:	f107 020c 	add.w	r2, r7, #12
 80147c8:	f107 0314 	add.w	r3, r7, #20
 80147cc:	4611      	mov	r1, r2
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fb fa12 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80147d4:	f107 030c 	add.w	r3, r7, #12
 80147d8:	4618      	mov	r0, r3
 80147da:	f7fb f990 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80147de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	330c      	adds	r3, #12
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80147e8:	4798      	blx	r3
 80147ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80147ec:	e77e      	b.n	80146ec <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	3338      	adds	r3, #56	; 0x38
 80147f4:	681c      	ldr	r4, [r3, #0]
 80147f6:	f107 0314 	add.w	r3, r7, #20
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fb f952 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8014800:	4603      	mov	r3, r0
 8014802:	4619      	mov	r1, r3
 8014804:	6838      	ldr	r0, [r7, #0]
 8014806:	47a0      	blx	r4
    SimpleString testLocations;
 8014808:	f107 0314 	add.w	r3, r7, #20
 801480c:	4618      	mov	r0, r3
 801480e:	f7fb f976 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8014812:	bf00      	nop
 8014814:	3744      	adds	r7, #68	; 0x44
 8014816:	46bd      	mov	sp, r7
 8014818:	bd90      	pop	{r4, r7, pc}
 801481a:	bf00      	nop
 801481c:	08027fa4 	.word	0x08027fa4
 8014820:	08027fb0 	.word	0x08027fb0
 8014824:	08027fb4 	.word	0x08027fb4

08014828 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8014828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801482a:	b087      	sub	sp, #28
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8014832:	2400      	movs	r4, #0
 8014834:	2500      	movs	r5, #0
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d028      	beq.n	801488e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	330c      	adds	r3, #12
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	6838      	ldr	r0, [r7, #0]
 8014846:	4798      	blx	r3
 8014848:	4603      	mov	r3, r0
 801484a:	2b00      	cmp	r3, #0
 801484c:	d01f      	beq.n	801488e <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801484e:	f107 0308 	add.w	r3, r7, #8
 8014852:	6839      	ldr	r1, [r7, #0]
 8014854:	4618      	mov	r0, r3
 8014856:	f000 ffa4 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 801485a:	2401      	movs	r4, #1
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	330c      	adds	r3, #12
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	6838      	ldr	r0, [r7, #0]
 8014866:	4798      	blx	r3
 8014868:	4602      	mov	r2, r0
 801486a:	f107 0310 	add.w	r3, r7, #16
 801486e:	4611      	mov	r1, r2
 8014870:	4618      	mov	r0, r3
 8014872:	f000 ff96 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 8014876:	2501      	movs	r5, #1
 8014878:	f107 0210 	add.w	r2, r7, #16
 801487c:	f107 0308 	add.w	r3, r7, #8
 8014880:	4611      	mov	r1, r2
 8014882:	4618      	mov	r0, r3
 8014884:	f7fb f98c 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 8014888:	4603      	mov	r3, r0
 801488a:	2b00      	cmp	r3, #0
 801488c:	d001      	beq.n	8014892 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 801488e:	2601      	movs	r6, #1
 8014890:	e000      	b.n	8014894 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8014892:	2600      	movs	r6, #0
 8014894:	2d00      	cmp	r5, #0
 8014896:	d004      	beq.n	80148a2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8014898:	f107 0310 	add.w	r3, r7, #16
 801489c:	4618      	mov	r0, r3
 801489e:	f7fb f92e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80148a2:	2c00      	cmp	r4, #0
 80148a4:	d004      	beq.n	80148b0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 80148a6:	f107 0308 	add.w	r3, r7, #8
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fb f927 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80148b0:	4633      	mov	r3, r6
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	371c      	adds	r7, #28
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148ba <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80148ba:	b580      	push	{r7, lr}
 80148bc:	b082      	sub	sp, #8
 80148be:	af00      	add	r7, sp, #0
 80148c0:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d00a      	beq.n	80148e0 <_ZN12TestRegistry10countTestsEv+0x26>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	685a      	ldr	r2, [r3, #4]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	685b      	ldr	r3, [r3, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	3310      	adds	r3, #16
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4610      	mov	r0, r2
 80148da:	4798      	blx	r3
 80148dc:	4603      	mov	r3, r0
 80148de:	e000      	b.n	80148e2 <_ZN12TestRegistry10countTestsEv+0x28>
 80148e0:	2300      	movs	r3, #0
}
 80148e2:	4618      	mov	r0, r3
 80148e4:	3708      	adds	r7, #8
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
	...

080148ec <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80148ec:	b580      	push	{r7, lr}
 80148ee:	af00      	add	r7, sp, #0
 80148f0:	4801      	ldr	r0, [pc, #4]	; (80148f8 <__tcf_0+0xc>)
 80148f2:	f7ff fcad 	bl	8014250 <_ZN12TestRegistryD1Ev>
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	20000bc8 	.word	0x20000bc8

080148fc <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8014900:	4b15      	ldr	r3, [pc, #84]	; (8014958 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	f3bf 8f5b 	dmb	ish
 8014908:	b2db      	uxtb	r3, r3
 801490a:	f003 0301 	and.w	r3, r3, #1
 801490e:	2b00      	cmp	r3, #0
 8014910:	bf0c      	ite	eq
 8014912:	2301      	moveq	r3, #1
 8014914:	2300      	movne	r3, #0
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	d013      	beq.n	8014944 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801491c:	480e      	ldr	r0, [pc, #56]	; (8014958 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801491e:	f00d fbf7 	bl	8022110 <__cxa_guard_acquire>
 8014922:	4603      	mov	r3, r0
 8014924:	2b00      	cmp	r3, #0
 8014926:	bf14      	ite	ne
 8014928:	2301      	movne	r3, #1
 801492a:	2300      	moveq	r3, #0
 801492c:	b2db      	uxtb	r3, r3
 801492e:	2b00      	cmp	r3, #0
 8014930:	d008      	beq.n	8014944 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8014932:	480a      	ldr	r0, [pc, #40]	; (801495c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8014934:	f7ff fc66 	bl	8014204 <_ZN12TestRegistryC1Ev>
 8014938:	4807      	ldr	r0, [pc, #28]	; (8014958 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801493a:	f00d fbf5 	bl	8022128 <__cxa_guard_release>
 801493e:	4808      	ldr	r0, [pc, #32]	; (8014960 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8014940:	f00d fc19 	bl	8022176 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8014944:	4b07      	ldr	r3, [pc, #28]	; (8014964 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d002      	beq.n	8014952 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 801494c:	4b05      	ldr	r3, [pc, #20]	; (8014964 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	e000      	b.n	8014954 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8014952:	4b02      	ldr	r3, [pc, #8]	; (801495c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8014954:	4618      	mov	r0, r3
 8014956:	bd80      	pop	{r7, pc}
 8014958:	20000be8 	.word	0x20000be8
 801495c:	20000bc8 	.word	0x20000bc8
 8014960:	080148ed 	.word	0x080148ed
 8014964:	20000bc4 	.word	0x20000bc4

08014968 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8014968:	b480      	push	{r7}
 801496a:	b083      	sub	sp, #12
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8014972:	4a04      	ldr	r2, [pc, #16]	; (8014984 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	6013      	str	r3, [r2, #0]
}
 8014978:	bf00      	nop
 801497a:	370c      	adds	r7, #12
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr
 8014984:	20000bc4 	.word	0x20000bc4

08014988 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d00a      	beq.n	80149ae <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	685a      	ldr	r2, [r3, #4]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	330c      	adds	r3, #12
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	4610      	mov	r0, r2
 80149a8:	4798      	blx	r3
 80149aa:	4603      	mov	r3, r0
 80149ac:	e000      	b.n	80149b0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 80149ae:	2300      	movs	r3, #0
 80149b0:	687a      	ldr	r2, [r7, #4]
 80149b2:	6053      	str	r3, [r2, #4]

}
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	609a      	str	r2, [r3, #8]
}
 80149cc:	bf00      	nop
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
 80149e0:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	683a      	ldr	r2, [r7, #0]
 80149e6:	60da      	str	r2, [r3, #12]
}
 80149e8:	bf00      	nop
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2201      	movs	r2, #1
 8014a00:	771a      	strb	r2, [r3, #28]
}
 8014a02:	bf00      	nop
 8014a04:	370c      	adds	r7, #12
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr

08014a0e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8014a0e:	b480      	push	{r7}
 8014a10:	b083      	sub	sp, #12
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2201      	movs	r2, #1
 8014a1a:	751a      	strb	r2, [r3, #20]
}
 8014a1c:	bf00      	nop
 8014a1e:	370c      	adds	r7, #12
 8014a20:	46bd      	mov	sp, r7
 8014a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a26:	4770      	bx	lr

08014a28 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	60f8      	str	r0, [r7, #12]
 8014a30:	60b9      	str	r1, [r7, #8]
 8014a32:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	68d9      	ldr	r1, [r3, #12]
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	68b8      	ldr	r0, [r7, #8]
 8014a40:	f000 ffbb 	bl	80159ba <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8014a44:	4603      	mov	r3, r0
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d001      	beq.n	8014a4e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	e006      	b.n	8014a5c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	332c      	adds	r3, #44	; 0x2c
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	4798      	blx	r3
        return false;
 8014a5a:	2300      	movs	r3, #0
    }
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8014a6c:	f7ff fb62 	bl	8014134 <_ZN14NullTestPlugin8instanceEv>
 8014a70:	4602      	mov	r2, r0
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	611a      	str	r2, [r3, #16]
}
 8014a76:	bf00      	nop
 8014a78:	3708      	adds	r7, #8
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b082      	sub	sp, #8
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	3324      	adds	r3, #36	; 0x24
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	6912      	ldr	r2, [r2, #16]
 8014a94:	4611      	mov	r1, r2
 8014a96:	6838      	ldr	r0, [r7, #0]
 8014a98:	4798      	blx	r3
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	611a      	str	r2, [r3, #16]
}
 8014aa0:	bf00      	nop
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8014aa8:	b480      	push	{r7}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	691b      	ldr	r3, [r3, #16]
}
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr

08014ac0 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	691b      	ldr	r3, [r3, #16]
 8014ace:	6839      	ldr	r1, [r7, #0]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7ff fa52 	bl	8013f7a <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8014ad6:	4603      	mov	r3, r0
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	691a      	ldr	r2, [r3, #16]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	691b      	ldr	r3, [r3, #16]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	3328      	adds	r3, #40	; 0x28
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	6839      	ldr	r1, [r7, #0]
 8014afa:	4610      	mov	r0, r2
 8014afc:	4798      	blx	r3
 8014afe:	4602      	mov	r2, r0
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	691b      	ldr	r3, [r3, #16]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	bf0c      	ite	eq
 8014b08:	2301      	moveq	r3, #1
 8014b0a:	2300      	movne	r3, #0
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00b      	beq.n	8014b2a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	691a      	ldr	r2, [r3, #16]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	691b      	ldr	r3, [r3, #16]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	332c      	adds	r3, #44	; 0x2c
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4610      	mov	r0, r2
 8014b22:	4798      	blx	r3
 8014b24:	4602      	mov	r2, r0
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	691b      	ldr	r3, [r3, #16]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7ff fa17 	bl	8013f62 <_ZN10TestPlugin7getNameEv>
 8014b34:	4603      	mov	r3, r0
 8014b36:	6839      	ldr	r1, [r7, #0]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fa ffec 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d00b      	beq.n	8014b5c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	691a      	ldr	r2, [r3, #16]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	691b      	ldr	r3, [r3, #16]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	332c      	adds	r3, #44	; 0x2c
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	4610      	mov	r0, r2
 8014b54:	4798      	blx	r3
 8014b56:	4602      	mov	r2, r0
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	691a      	ldr	r2, [r3, #16]
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	691b      	ldr	r3, [r3, #16]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	3328      	adds	r3, #40	; 0x28
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	6839      	ldr	r1, [r7, #0]
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	4798      	blx	r3
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}

08014b78 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
    int count = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	60bb      	str	r3, [r7, #8]
 8014b8a:	f7ff fad3 	bl	8014134 <_ZN14NullTestPlugin8instanceEv>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	4293      	cmp	r3, r2
 8014b94:	bf14      	ite	ne
 8014b96:	2301      	movne	r3, #1
 8014b98:	2300      	moveq	r3, #0
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d00a      	beq.n	8014bb6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8014ba6:	68bb      	ldr	r3, [r7, #8]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	332c      	adds	r3, #44	; 0x2c
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	68b8      	ldr	r0, [r7, #8]
 8014bb0:	4798      	blx	r3
 8014bb2:	60b8      	str	r0, [r7, #8]
 8014bb4:	e7e9      	b.n	8014b8a <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3710      	adds	r7, #16
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}

08014bc0 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b083      	sub	sp, #12
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
    return tests_;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	685b      	ldr	r3, [r3, #4]
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	370c      	adds	r7, #12
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr

08014bd8 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b084      	sub	sp, #16
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	334c      	adds	r3, #76	; 0x4c
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	4798      	blx	r3
 8014bee:	4602      	mov	r2, r0
 8014bf0:	f107 0308 	add.w	r3, r7, #8
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f002 f8f8 	bl	8016dec <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8014bfc:	f107 0308 	add.w	r3, r7, #8
 8014c00:	6839      	ldr	r1, [r7, #0]
 8014c02:	4618      	mov	r0, r3
 8014c04:	f002 f980 	bl	8016f08 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8014c08:	f107 0308 	add.w	r3, r7, #8
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f002 fa13 	bl	8017038 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8014c12:	4602      	mov	r2, r0
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8014c18:	f107 0308 	add.w	r3, r7, #8
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f002 f939 	bl	8016e94 <_ZN22UtestShellPointerArrayD1Ev>
}
 8014c22:	bf00      	nop
 8014c24:	3710      	adds	r7, #16
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}

08014c2a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8014c2a:	b580      	push	{r7, lr}
 8014c2c:	b084      	sub	sp, #16
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	334c      	adds	r3, #76	; 0x4c
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	4798      	blx	r3
 8014c3e:	4602      	mov	r2, r0
 8014c40:	f107 0308 	add.w	r3, r7, #8
 8014c44:	4611      	mov	r1, r2
 8014c46:	4618      	mov	r0, r3
 8014c48:	f002 f8d0 	bl	8016dec <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8014c4c:	f107 0308 	add.w	r3, r7, #8
 8014c50:	4618      	mov	r0, r3
 8014c52:	f002 f995 	bl	8016f80 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8014c56:	f107 0308 	add.w	r3, r7, #8
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f002 f9ec 	bl	8017038 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8014c60:	4602      	mov	r2, r0
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8014c66:	f107 0308 	add.w	r3, r7, #8
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f002 f912 	bl	8016e94 <_ZN22UtestShellPointerArrayD1Ev>
}
 8014c70:	bf00      	nop
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d00b      	beq.n	8014ca6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	330c      	adds	r3, #12
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	68f8      	ldr	r0, [r7, #12]
 8014c98:	4798      	blx	r3
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	683b      	ldr	r3, [r7, #0]
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d001      	beq.n	8014ca6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e000      	b.n	8014ca8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d007      	beq.n	8014cbc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	330c      	adds	r3, #12
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	4798      	blx	r3
 8014cb8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 8014cba:	e7e5      	b.n	8014c88 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
}
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}

08014cc6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 8014cc6:	b590      	push	{r4, r7, lr}
 8014cc8:	b087      	sub	sp, #28
 8014cca:	af00      	add	r7, sp, #0
 8014ccc:	6078      	str	r0, [r7, #4]
 8014cce:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	617b      	str	r3, [r7, #20]
    while (current) {
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d01e      	beq.n	8014d1a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8014cdc:	f107 030c 	add.w	r3, r7, #12
 8014ce0:	6979      	ldr	r1, [r7, #20]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f000 fd4e 	bl	8015784 <_ZNK10UtestShell7getNameEv>
 8014ce8:	f107 030c 	add.w	r3, r7, #12
 8014cec:	6839      	ldr	r1, [r7, #0]
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fa ff11 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	461c      	mov	r4, r3
 8014cf8:	f107 030c 	add.w	r3, r7, #12
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fa fefe 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8014d02:	2c00      	cmp	r4, #0
 8014d04:	d001      	beq.n	8014d0a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	e008      	b.n	8014d1c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	330c      	adds	r3, #12
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	6978      	ldr	r0, [r7, #20]
 8014d14:	4798      	blx	r3
 8014d16:	6178      	str	r0, [r7, #20]
    while (current) {
 8014d18:	e7dd      	b.n	8014cd6 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	371c      	adds	r7, #28
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd90      	pop	{r4, r7, pc}

08014d24 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8014d24:	b590      	push	{r4, r7, lr}
 8014d26:	b087      	sub	sp, #28
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	617b      	str	r3, [r7, #20]
    while (current) {
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d01e      	beq.n	8014d78 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8014d3a:	f107 030c 	add.w	r3, r7, #12
 8014d3e:	6979      	ldr	r1, [r7, #20]
 8014d40:	4618      	mov	r0, r3
 8014d42:	f000 fd2e 	bl	80157a2 <_ZNK10UtestShell8getGroupEv>
 8014d46:	f107 030c 	add.w	r3, r7, #12
 8014d4a:	6839      	ldr	r1, [r7, #0]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7fa fee2 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8014d52:	4603      	mov	r3, r0
 8014d54:	461c      	mov	r4, r3
 8014d56:	f107 030c 	add.w	r3, r7, #12
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fa fecf 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8014d60:	2c00      	cmp	r4, #0
 8014d62:	d001      	beq.n	8014d68 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	e008      	b.n	8014d7a <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	330c      	adds	r3, #12
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	6978      	ldr	r0, [r7, #20]
 8014d72:	4798      	blx	r3
 8014d74:	6178      	str	r0, [r7, #20]
    while (current) {
 8014d76:	e7dd      	b.n	8014d34 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8014d78:	2300      	movs	r3, #0
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	371c      	adds	r7, #28
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd90      	pop	{r4, r7, pc}
	...

08014d84 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 8014d84:	b480      	push	{r7}
 8014d86:	b083      	sub	sp, #12
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8014d8e:	4a18      	ldr	r2, [pc, #96]	; (8014df0 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	601a      	str	r2, [r3, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	683a      	ldr	r2, [r7, #0]
 8014d98:	605a      	str	r2, [r3, #4]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	609a      	str	r2, [r3, #8]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2200      	movs	r2, #0
 8014da4:	60da      	str	r2, [r3, #12]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2200      	movs	r2, #0
 8014daa:	611a      	str	r2, [r3, #16]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	615a      	str	r2, [r3, #20]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2200      	movs	r2, #0
 8014db6:	619a      	str	r2, [r3, #24]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	61da      	str	r2, [r3, #28]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	621a      	str	r2, [r3, #32]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	629a      	str	r2, [r3, #40]	; 0x28
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	631a      	str	r2, [r3, #48]	; 0x30
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	4618      	mov	r0, r3
 8014de6:	370c      	adds	r7, #12
 8014de8:	46bd      	mov	sp, r7
 8014dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dee:	4770      	bx	lr
 8014df0:	0802be84 	.word	0x0802be84

08014df4 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8014df4:	b480      	push	{r7}
 8014df6:	b083      	sub	sp, #12
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	4a04      	ldr	r2, [pc, #16]	; (8014e10 <_ZN10TestResultD1Ev+0x1c>)
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	601a      	str	r2, [r3, #0]
{
}
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	4618      	mov	r0, r3
 8014e06:	370c      	adds	r7, #12
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr
 8014e10:	0802be84 	.word	0x0802be84

08014e14 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
}
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7ff ffe9 	bl	8014df4 <_ZN10TestResultD1Ev>
 8014e22:	2138      	movs	r1, #56	; 0x38
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f7f7 ff03 	bl	800cc30 <_ZdlPvj>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	685a      	ldr	r2, [r3, #4]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	3318      	adds	r3, #24
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	6839      	ldr	r1, [r7, #0]
 8014e4e:	4610      	mov	r0, r2
 8014e50:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8014e52:	4b05      	ldr	r3, [pc, #20]	; (8014e68 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	4798      	blx	r3
 8014e58:	4603      	mov	r3, r0
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014e60:	bf00      	nop
 8014e62:	3708      	adds	r7, #8
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	200000a8 	.word	0x200000a8

08014e6c <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8014e76:	4b0c      	ldr	r3, [pc, #48]	; (8014ea8 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4798      	blx	r3
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	461a      	mov	r2, r3
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e84:	1ad2      	subs	r2, r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	685a      	ldr	r2, [r3, #4]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	331c      	adds	r3, #28
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	6879      	ldr	r1, [r7, #4]
 8014e9a:	4610      	mov	r0, r2
 8014e9c:	4798      	blx	r3
}
 8014e9e:	bf00      	nop
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	200000a8 	.word	0x200000a8

08014eac <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	685a      	ldr	r2, [r3, #4]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	685b      	ldr	r3, [r3, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	3310      	adds	r3, #16
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6839      	ldr	r1, [r7, #0]
 8014ec6:	4610      	mov	r0, r2
 8014ec8:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8014eca:	4b05      	ldr	r3, [pc, #20]	; (8014ee0 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	4798      	blx	r3
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014ed8:	bf00      	nop
 8014eda:	3708      	adds	r7, #8
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	200000a8 	.word	0x200000a8

08014ee4 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	685a      	ldr	r2, [r3, #4]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	332c      	adds	r3, #44	; 0x2c
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	4610      	mov	r0, r2
 8014f00:	4798      	blx	r3
}
 8014f02:	bf00      	nop
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b082      	sub	sp, #8
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
 8014f12:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	685a      	ldr	r2, [r3, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3348      	adds	r3, #72	; 0x48
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	6839      	ldr	r1, [r7, #0]
 8014f24:	4610      	mov	r0, r2
 8014f26:	4798      	blx	r3
}
 8014f28:	bf00      	nop
 8014f2a:	3708      	adds	r7, #8
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8014f3a:	4b0c      	ldr	r3, [pc, #48]	; (8014f6c <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	4798      	blx	r3
 8014f40:	4603      	mov	r3, r0
 8014f42:	461a      	mov	r2, r3
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f48:	1ad2      	subs	r2, r2, r3
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	685a      	ldr	r2, [r3, #4]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	3314      	adds	r3, #20
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	4610      	mov	r0, r2
 8014f60:	4798      	blx	r3

}
 8014f62:	bf00      	nop
 8014f64:	3708      	adds	r7, #8
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	200000a8 	.word	0x200000a8

08014f70 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	333c      	adds	r3, #60	; 0x3c
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	6839      	ldr	r1, [r7, #0]
 8014f8a:	4610      	mov	r0, r2
 8014f8c:	4798      	blx	r3
    failureCount_++;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	695b      	ldr	r3, [r3, #20]
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	615a      	str	r2, [r3, #20]
}
 8014f98:	bf00      	nop
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8014fa0:	b480      	push	{r7}
 8014fa2:	b083      	sub	sp, #12
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
    testCount_++;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	689b      	ldr	r3, [r3, #8]
 8014fac:	1c5a      	adds	r2, r3, #1
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	609a      	str	r2, [r3, #8]
}
 8014fb2:	bf00      	nop
 8014fb4:	370c      	adds	r7, #12
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbc:	4770      	bx	lr

08014fbe <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8014fbe:	b480      	push	{r7}
 8014fc0:	b083      	sub	sp, #12
 8014fc2:	af00      	add	r7, sp, #0
 8014fc4:	6078      	str	r0, [r7, #4]
    runCount_++;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	60da      	str	r2, [r3, #12]
}
 8014fd0:	bf00      	nop
 8014fd2:	370c      	adds	r7, #12
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b083      	sub	sp, #12
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	691b      	ldr	r3, [r3, #16]
 8014fe8:	1c5a      	adds	r2, r3, #1
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	611a      	str	r2, [r3, #16]
}
 8014fee:	bf00      	nop
 8014ff0:	370c      	adds	r7, #12
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr

08014ffa <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b083      	sub	sp, #12
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	699b      	ldr	r3, [r3, #24]
 8015006:	1c5a      	adds	r2, r3, #1
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	619a      	str	r2, [r3, #24]
}
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	69db      	ldr	r3, [r3, #28]
 8015024:	1c5a      	adds	r2, r3, #1
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	61da      	str	r2, [r3, #28]
}
 801502a:	bf00      	nop
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr
	...

08015038 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b082      	sub	sp, #8
 801503c:	af00      	add	r7, sp, #0
 801503e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8015040:	4b09      	ldr	r3, [pc, #36]	; (8015068 <_ZN10TestResult12testsStartedEv+0x30>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	4798      	blx	r3
 8015046:	4603      	mov	r3, r0
 8015048:	461a      	mov	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	685a      	ldr	r2, [r3, #4]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	3308      	adds	r3, #8
 801505a:	681b      	ldr	r3, [r3, #0]
 801505c:	4610      	mov	r0, r2
 801505e:	4798      	blx	r3
}
 8015060:	bf00      	nop
 8015062:	3708      	adds	r7, #8
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	200000a8 	.word	0x200000a8

0801506c <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b084      	sub	sp, #16
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8015074:	4b0c      	ldr	r3, [pc, #48]	; (80150a8 <_ZN10TestResult10testsEndedEv+0x3c>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4798      	blx	r3
 801507a:	4603      	mov	r3, r0
 801507c:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	1ad2      	subs	r2, r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	685a      	ldr	r2, [r3, #4]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	685b      	ldr	r3, [r3, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	330c      	adds	r3, #12
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	6879      	ldr	r1, [r7, #4]
 801509a:	4610      	mov	r0, r2
 801509c:	4798      	blx	r3
}
 801509e:	bf00      	nop
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	200000a8 	.word	0x200000a8

080150ac <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80150ac:	b480      	push	{r7}
 80150ae:	b083      	sub	sp, #12
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a1b      	ldr	r3, [r3, #32]
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	370c      	adds	r7, #12
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr

080150dc <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 80150dc:	b480      	push	{r7}
 80150de:	b083      	sub	sp, #12
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr

080150f4 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 80150f4:	b590      	push	{r4, r7, lr}
 80150f6:	b087      	sub	sp, #28
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80150fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8015102:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8015106:	4b2c      	ldr	r3, [pc, #176]	; (80151b8 <_Z13doubles_equalddd+0xc4>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	ed97 0b04 	vldr	d0, [r7, #16]
 801510e:	4798      	blx	r3
 8015110:	4603      	mov	r3, r0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10f      	bne.n	8015136 <_Z13doubles_equalddd+0x42>
 8015116:	4b28      	ldr	r3, [pc, #160]	; (80151b8 <_Z13doubles_equalddd+0xc4>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	ed97 0b02 	vldr	d0, [r7, #8]
 801511e:	4798      	blx	r3
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	d107      	bne.n	8015136 <_Z13doubles_equalddd+0x42>
 8015126:	4b24      	ldr	r3, [pc, #144]	; (80151b8 <_Z13doubles_equalddd+0xc4>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	ed97 0b00 	vldr	d0, [r7]
 801512e:	4798      	blx	r3
 8015130:	4603      	mov	r3, r0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d001      	beq.n	801513a <_Z13doubles_equalddd+0x46>
 8015136:	2301      	movs	r3, #1
 8015138:	e000      	b.n	801513c <_Z13doubles_equalddd+0x48>
 801513a:	2300      	movs	r3, #0
 801513c:	2b00      	cmp	r3, #0
 801513e:	d001      	beq.n	8015144 <_Z13doubles_equalddd+0x50>
        return false;
 8015140:	2300      	movs	r3, #0
 8015142:	e035      	b.n	80151b0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8015144:	4b1d      	ldr	r3, [pc, #116]	; (80151bc <_Z13doubles_equalddd+0xc8>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	ed97 0b04 	vldr	d0, [r7, #16]
 801514c:	4798      	blx	r3
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d009      	beq.n	8015168 <_Z13doubles_equalddd+0x74>
 8015154:	4b19      	ldr	r3, [pc, #100]	; (80151bc <_Z13doubles_equalddd+0xc8>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	ed97 0b02 	vldr	d0, [r7, #8]
 801515c:	4798      	blx	r3
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <_Z13doubles_equalddd+0x74>
 8015164:	2301      	movs	r3, #1
 8015166:	e000      	b.n	801516a <_Z13doubles_equalddd+0x76>
 8015168:	2300      	movs	r3, #0
 801516a:	2b00      	cmp	r3, #0
 801516c:	d001      	beq.n	8015172 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 801516e:	2301      	movs	r3, #1
 8015170:	e01e      	b.n	80151b0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8015172:	4b13      	ldr	r3, [pc, #76]	; (80151c0 <_Z13doubles_equalddd+0xcc>)
 8015174:	681c      	ldr	r4, [r3, #0]
 8015176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801517a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801517e:	f7eb f8c3 	bl	8000308 <__aeabi_dsub>
 8015182:	4602      	mov	r2, r0
 8015184:	460b      	mov	r3, r1
 8015186:	ec43 2b17 	vmov	d7, r2, r3
 801518a:	eeb0 0a47 	vmov.f32	s0, s14
 801518e:	eef0 0a67 	vmov.f32	s1, s15
 8015192:	47a0      	blx	r4
 8015194:	ec53 2b10 	vmov	r2, r3, d0
 8015198:	2101      	movs	r1, #1
 801519a:	460c      	mov	r4, r1
 801519c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80151a0:	f7eb fade 	bl	8000760 <__aeabi_dcmpge>
 80151a4:	4603      	mov	r3, r0
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d101      	bne.n	80151ae <_Z13doubles_equalddd+0xba>
 80151aa:	2300      	movs	r3, #0
 80151ac:	461c      	mov	r4, r3
 80151ae:	b2e3      	uxtb	r3, r4
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	371c      	adds	r7, #28
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd90      	pop	{r4, r7, pc}
 80151b8:	200000e8 	.word	0x200000e8
 80151bc:	200000ec 	.word	0x200000ec
 80151c0:	200000dc 	.word	0x200000dc

080151c4 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	332c      	adds	r3, #44	; 0x2c
    }
 80151d0:	4618      	mov	r0, r3
 80151d2:	370c      	adds	r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr

080151dc <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
    {
 80151e4:	4a0a      	ldr	r2, [pc, #40]	; (8015210 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	601a      	str	r2, [r3, #0]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	332c      	adds	r3, #44	; 0x2c
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7ff fe00 	bl	8014df4 <_ZN10TestResultD1Ev>
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	331c      	adds	r3, #28
 80151f8:	4618      	mov	r0, r3
 80151fa:	f7f6 f815 	bl	800b228 <_ZN17ConsoleTestOutputD1Ev>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4618      	mov	r0, r3
 8015202:	f000 f943 	bl	801548c <_ZN10UtestShellD1Ev>
    }
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4618      	mov	r0, r3
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}
 8015210:	0802becc 	.word	0x0802becc

08015214 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
    }
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7ff ffdd 	bl	80151dc <_ZN22OutsideTestRunnerUTestD1Ev>
 8015222:	2164      	movs	r1, #100	; 0x64
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7f7 fd03 	bl	800cc30 <_ZdlPvj>
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	4618      	mov	r0, r3
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8015234:	b580      	push	{r7, lr}
 8015236:	b084      	sub	sp, #16
 8015238:	af02      	add	r7, sp, #8
 801523a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	2300      	movs	r3, #0
 8015240:	9300      	str	r3, [sp, #0]
 8015242:	4b0d      	ldr	r3, [pc, #52]	; (8015278 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8015244:	4a0d      	ldr	r2, [pc, #52]	; (801527c <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8015246:	490e      	ldr	r1, [pc, #56]	; (8015280 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8015248:	f000 f8f8 	bl	801543c <_ZN10UtestShellC1EPKcS1_S1_j>
 801524c:	4a0d      	ldr	r2, [pc, #52]	; (8015284 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	601a      	str	r2, [r3, #0]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	331c      	adds	r3, #28
 8015256:	4618      	mov	r0, r3
 8015258:	f7f5 ffd4 	bl	800b204 <_ZN17ConsoleTestOutputC1Ev>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	331c      	adds	r3, #28
 8015266:	4619      	mov	r1, r3
 8015268:	4610      	mov	r0, r2
 801526a:	f7ff fd8b 	bl	8014d84 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	4618      	mov	r0, r3
 8015272:	3708      	adds	r7, #8
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	08027fb8 	.word	0x08027fb8
 801527c:	08027fc8 	.word	0x08027fc8
 8015280:	08028008 	.word	0x08028008
 8015284:	0802becc 	.word	0x0802becc

08015288 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
 801528c:	4801      	ldr	r0, [pc, #4]	; (8015294 <__tcf_0+0xc>)
 801528e:	f7ff ffa5 	bl	80151dc <_ZN22OutsideTestRunnerUTestD1Ev>
 8015292:	bd80      	pop	{r7, pc}
 8015294:	20000bec 	.word	0x20000bec

08015298 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8015298:	b580      	push	{r7, lr}
 801529a:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 801529c:	4b12      	ldr	r3, [pc, #72]	; (80152e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	f3bf 8f5b 	dmb	ish
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	f003 0301 	and.w	r3, r3, #1
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	bf0c      	ite	eq
 80152ae:	2301      	moveq	r3, #1
 80152b0:	2300      	movne	r3, #0
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d013      	beq.n	80152e0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80152b8:	480b      	ldr	r0, [pc, #44]	; (80152e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80152ba:	f00c ff29 	bl	8022110 <__cxa_guard_acquire>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	bf14      	ite	ne
 80152c4:	2301      	movne	r3, #1
 80152c6:	2300      	moveq	r3, #0
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d008      	beq.n	80152e0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80152ce:	4807      	ldr	r0, [pc, #28]	; (80152ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80152d0:	f7ff ffb0 	bl	8015234 <_ZN22OutsideTestRunnerUTestC1Ev>
 80152d4:	4804      	ldr	r0, [pc, #16]	; (80152e8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80152d6:	f00c ff27 	bl	8022128 <__cxa_guard_release>
 80152da:	4805      	ldr	r0, [pc, #20]	; (80152f0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 80152dc:	f00c ff4b 	bl	8022176 <atexit>
    return instance_;
 80152e0:	4b02      	ldr	r3, [pc, #8]	; (80152ec <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	bf00      	nop
 80152e8:	20000c50 	.word	0x20000c50
 80152ec:	20000bec 	.word	0x20000bec
 80152f0:	08015289 	.word	0x08015289

080152f4 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	330c      	adds	r3, #12
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	4798      	blx	r3
    }
 8015308:	bf00      	nop
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}

08015310 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	3314      	adds	r3, #20
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	4798      	blx	r3
    }
 8015324:	bf00      	nop
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	3310      	adds	r3, #16
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	4798      	blx	r3
    }
 8015340:	bf00      	nop
 8015342:	3708      	adds	r7, #8
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8015348:	b480      	push	{r7}
 801534a:	b085      	sub	sp, #20
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	607a      	str	r2, [r7, #4]
 8015354:	603b      	str	r3, [r7, #0]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	601a      	str	r2, [r3, #0]
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	605a      	str	r2, [r3, #4]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	609a      	str	r2, [r3, #8]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	4618      	mov	r0, r3
 801536c:	3714      	adds	r7, #20
 801536e:	46bd      	mov	sp, r7
 8015370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015374:	4770      	bx	lr

08015376 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8015376:	b580      	push	{r7, lr}
 8015378:	b086      	sub	sp, #24
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	685b      	ldr	r3, [r3, #4]
 801538c:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	689b      	ldr	r3, [r3, #8]
 8015392:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	3394      	adds	r3, #148	; 0x94
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	68f9      	ldr	r1, [r7, #12]
 80153a0:	6938      	ldr	r0, [r7, #16]
 80153a2:	4798      	blx	r3
    }
 80153a4:	bf00      	nop
 80153a6:	3718      	adds	r7, #24
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b086      	sub	sp, #24
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	689b      	ldr	r3, [r3, #8]
 80153c8:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80153ca:	4b05      	ldr	r3, [pc, #20]	; (80153e0 <helperDoRunOneTestSeperateProcess+0x34>)
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	68ba      	ldr	r2, [r7, #8]
 80153d0:	68f9      	ldr	r1, [r7, #12]
 80153d2:	6938      	ldr	r0, [r7, #16]
 80153d4:	4798      	blx	r3
    }
 80153d6:	bf00      	nop
 80153d8:	3718      	adds	r7, #24
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	bf00      	nop
 80153e0:	2000009c 	.word	0x2000009c

080153e4 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 80153e4:	b480      	push	{r7}
 80153e6:	b083      	sub	sp, #12
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 80153ec:	4a0f      	ldr	r2, [pc, #60]	; (801542c <_ZN10UtestShellC1Ev+0x48>)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	601a      	str	r2, [r3, #0]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4a0e      	ldr	r2, [pc, #56]	; (8015430 <_ZN10UtestShellC1Ev+0x4c>)
 80153f6:	605a      	str	r2, [r3, #4]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	4a0e      	ldr	r2, [pc, #56]	; (8015434 <_ZN10UtestShellC1Ev+0x50>)
 80153fc:	609a      	str	r2, [r3, #8]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4a0d      	ldr	r2, [pc, #52]	; (8015438 <_ZN10UtestShellC1Ev+0x54>)
 8015402:	60da      	str	r2, [r3, #12]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	611a      	str	r2, [r3, #16]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2200      	movs	r2, #0
 801540e:	615a      	str	r2, [r3, #20]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2200      	movs	r2, #0
 8015414:	761a      	strb	r2, [r3, #24]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	765a      	strb	r2, [r3, #25]
{
}
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	4618      	mov	r0, r3
 8015420:	370c      	adds	r7, #12
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	0802bf8c 	.word	0x0802bf8c
 8015430:	08028054 	.word	0x08028054
 8015434:	08028068 	.word	0x08028068
 8015438:	08028078 	.word	0x08028078

0801543c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 801543c:	b480      	push	{r7}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
 8015448:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801544a:	4a0f      	ldr	r2, [pc, #60]	; (8015488 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	601a      	str	r2, [r3, #0]
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	605a      	str	r2, [r3, #4]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	609a      	str	r2, [r3, #8]
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	683a      	ldr	r2, [r7, #0]
 8015460:	60da      	str	r2, [r3, #12]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	69ba      	ldr	r2, [r7, #24]
 8015466:	611a      	str	r2, [r3, #16]
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2200      	movs	r2, #0
 801546c:	615a      	str	r2, [r3, #20]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2200      	movs	r2, #0
 8015472:	761a      	strb	r2, [r3, #24]
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2200      	movs	r2, #0
 8015478:	765a      	strb	r2, [r3, #25]
{
}
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	4618      	mov	r0, r3
 801547e:	3714      	adds	r7, #20
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr
 8015488:	0802bf8c 	.word	0x0802bf8c

0801548c <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 801548c:	b480      	push	{r7}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	4a04      	ldr	r2, [pc, #16]	; (80154a8 <_ZN10UtestShellD1Ev+0x1c>)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	601a      	str	r2, [r3, #0]
{
}
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	4618      	mov	r0, r3
 801549e:	370c      	adds	r7, #12
 80154a0:	46bd      	mov	sp, r7
 80154a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a6:	4770      	bx	lr
 80154a8:	0802bf8c 	.word	0x0802bf8c

080154ac <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
}
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff ffe9 	bl	801548c <_ZN10UtestShellD1Ev>
 80154ba:	211c      	movs	r1, #28
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7f7 fbb7 	bl	800cc30 <_ZdlPvj>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	4618      	mov	r0, r3
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80154d2:	2300      	movs	r3, #0
 80154d4:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	3310      	adds	r3, #16
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	4798      	blx	r3
}
 80154e2:	bf00      	nop
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
	...

080154ec <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80154f0:	4b02      	ldr	r3, [pc, #8]	; (80154fc <_ZN10UtestShell5crashEv+0x10>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4798      	blx	r3
}
 80154f6:	bf00      	nop
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	20000098 	.word	0x20000098

08015500 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b088      	sub	sp, #32
 8015504:	af00      	add	r7, sp, #0
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2200      	movs	r2, #0
 8015510:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	3324      	adds	r3, #36	; 0x24
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801551e:	f107 0014 	add.w	r0, r7, #20
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	68ba      	ldr	r2, [r7, #8]
 8015526:	68f9      	ldr	r1, [r7, #12]
 8015528:	f7ff ff0e 	bl	8015348 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	337c      	adds	r3, #124	; 0x7c
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	4798      	blx	r3
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	d007      	beq.n	801554e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801553e:	4b09      	ldr	r3, [pc, #36]	; (8015564 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	f107 0214 	add.w	r2, r7, #20
 8015546:	4611      	mov	r1, r2
 8015548:	4807      	ldr	r0, [pc, #28]	; (8015568 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801554a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 801554c:	e006      	b.n	801555c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801554e:	4b05      	ldr	r3, [pc, #20]	; (8015564 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	f107 0214 	add.w	r2, r7, #20
 8015556:	4611      	mov	r1, r2
 8015558:	4804      	ldr	r0, [pc, #16]	; (801556c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801555a:	4798      	blx	r3
}
 801555c:	bf00      	nop
 801555e:	3720      	adds	r7, #32
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	200000a4 	.word	0x200000a4
 8015568:	080153ad 	.word	0x080153ad
 801556c:	08015377 	.word	0x08015377

08015570 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8015570:	b590      	push	{r4, r7, lr}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
    return new Utest();
 8015578:	22d3      	movs	r2, #211	; 0xd3
 801557a:	4906      	ldr	r1, [pc, #24]	; (8015594 <_ZN10UtestShell10createTestEv+0x24>)
 801557c:	2004      	movs	r0, #4
 801557e:	f7f7 fb43 	bl	800cc08 <_ZnwjPKci>
 8015582:	4604      	mov	r4, r0
 8015584:	4620      	mov	r0, r4
 8015586:	f001 fb0f 	bl	8016ba8 <_ZN5UtestC1Ev>
 801558a:	4623      	mov	r3, r4
}
 801558c:	4618      	mov	r0, r3
 801558e:	370c      	adds	r7, #12
 8015590:	46bd      	mov	sp, r7
 8015592:	bd90      	pop	{r4, r7, pc}
 8015594:	08028088 	.word	0x08028088

08015598 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b082      	sub	sp, #8
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
    delete test;
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d004      	beq.n	80155b2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	3204      	adds	r2, #4
 80155ac:	6812      	ldr	r2, [r2, #0]
 80155ae:	4618      	mov	r0, r3
 80155b0:	4790      	blx	r2
}
 80155b2:	bf00      	nop
 80155b4:	3708      	adds	r7, #8
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
	...

080155bc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b088      	sub	sp, #32
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	333c      	adds	r3, #60	; 0x3c
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	4940      	ldr	r1, [pc, #256]	; (80156d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	3314      	adds	r3, #20
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	68f9      	ldr	r1, [r7, #12]
 80155e2:	68b8      	ldr	r0, [r7, #8]
 80155e4:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	333c      	adds	r3, #60	; 0x3c
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	493a      	ldr	r1, [pc, #232]	; (80156d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80155f4:	f001 faae 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80155f8:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f001 fa90 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015600:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8015602:	6879      	ldr	r1, [r7, #4]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f001 fa6b 	bl	8016ae0 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 801560a:	68f9      	ldr	r1, [r7, #12]
 801560c:	68f8      	ldr	r0, [r7, #12]
 801560e:	f001 fa77 	bl	8016b00 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	333c      	adds	r3, #60	; 0x3c
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4930      	ldr	r1, [pc, #192]	; (80156dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	3388      	adds	r3, #136	; 0x88
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	4798      	blx	r3
 801562c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	333c      	adds	r3, #60	; 0x3c
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	492a      	ldr	r1, [pc, #168]	; (80156e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	333c      	adds	r3, #60	; 0x3c
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	4927      	ldr	r1, [pc, #156]	; (80156e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	4798      	blx	r3
    testToRun->run();
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	3308      	adds	r3, #8
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	6978      	ldr	r0, [r7, #20]
 8015654:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	333c      	adds	r3, #60	; 0x3c
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	4922      	ldr	r1, [pc, #136]	; (80156e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8015664:	69f9      	ldr	r1, [r7, #28]
 8015666:	68f8      	ldr	r0, [r7, #12]
 8015668:	f001 fa4a 	bl	8016b00 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 801566c:	69b9      	ldr	r1, [r7, #24]
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f001 fa36 	bl	8016ae0 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	333c      	adds	r3, #60	; 0x3c
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	491b      	ldr	r1, [pc, #108]	; (80156ec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801567e:	6878      	ldr	r0, [r7, #4]
 8015680:	4798      	blx	r3
    destroyTest(testToRun);
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	338c      	adds	r3, #140	; 0x8c
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	6979      	ldr	r1, [r7, #20]
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	333c      	adds	r3, #60	; 0x3c
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4915      	ldr	r1, [pc, #84]	; (80156f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	333c      	adds	r3, #60	; 0x3c
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4913      	ldr	r1, [pc, #76]	; (80156f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	3318      	adds	r3, #24
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	68f9      	ldr	r1, [r7, #12]
 80156b8:	68b8      	ldr	r0, [r7, #8]
 80156ba:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	333c      	adds	r3, #60	; 0x3c
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	490c      	ldr	r1, [pc, #48]	; (80156f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	4798      	blx	r3
}
 80156ca:	bf00      	nop
 80156cc:	3720      	adds	r7, #32
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	0802809c 	.word	0x0802809c
 80156d8:	080280c0 	.word	0x080280c0
 80156dc:	080280e0 	.word	0x080280e0
 80156e0:	080280fc 	.word	0x080280fc
 80156e4:	08028118 	.word	0x08028118
 80156e8:	08028134 	.word	0x08028134
 80156ec:	0802814c 	.word	0x0802814c
 80156f0:	08028168 	.word	0x08028168
 80156f4:	08028184 	.word	0x08028184
 80156f8:	080281a8 	.word	0x080281a8

080156fc <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
    return next_;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	695b      	ldr	r3, [r3, #20]
}
 8015708:	4618      	mov	r0, r3
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
    next_ = test;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	683a      	ldr	r2, [r7, #0]
 8015722:	615a      	str	r2, [r3, #20]
    return this;
 8015724:	687b      	ldr	r3, [r7, #4]
}
 8015726:	4618      	mov	r0, r3
 8015728:	370c      	adds	r7, #12
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b082      	sub	sp, #8
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	695b      	ldr	r3, [r3, #20]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d00b      	beq.n	801575a <_ZN10UtestShell10countTestsEv+0x28>
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	695a      	ldr	r2, [r3, #20]
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	695b      	ldr	r3, [r3, #20]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	3310      	adds	r3, #16
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4610      	mov	r0, r2
 8015752:	4798      	blx	r3
 8015754:	4603      	mov	r3, r0
 8015756:	3301      	adds	r3, #1
 8015758:	e000      	b.n	801575c <_ZN10UtestShell10countTestsEv+0x2a>
 801575a:	2301      	movs	r3, #1
}
 801575c:	4618      	mov	r0, r3
 801575e:	3708      	adds	r7, #8
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
    return "TEST";
 801576e:	4904      	ldr	r1, [pc, #16]	; (8015780 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f7f9 fe0c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	080281cc 	.word	0x080281cc

08015784 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	689b      	ldr	r3, [r3, #8]
 8015792:	4619      	mov	r1, r3
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f7f9 fdfa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	3708      	adds	r7, #8
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}

080157a2 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80157a2:	b580      	push	{r7, lr}
 80157a4:	b082      	sub	sp, #8
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	6078      	str	r0, [r7, #4]
 80157aa:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	4619      	mov	r1, r3
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7f9 fdeb 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	33a0      	adds	r3, #160	; 0xa0
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	687a      	ldr	r2, [r7, #4]
 80157d4:	6839      	ldr	r1, [r7, #0]
 80157d6:	4610      	mov	r0, r2
 80157d8:	4798      	blx	r3
    formattedName += "(";
 80157da:	490e      	ldr	r1, [pc, #56]	; (8015814 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f7fa fa1d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	4619      	mov	r1, r3
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7fa fa17 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80157ee:	490a      	ldr	r1, [pc, #40]	; (8015818 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7fa fa13 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7fa fa0d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8015802:	4906      	ldr	r1, [pc, #24]	; (801581c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f7fa fa09 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 801580a:	bf00      	nop
}
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	080281d4 	.word	0x080281d4
 8015818:	080281d8 	.word	0x080281d8
 801581c:	080281dc 	.word	0x080281dc

08015820 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8015820:	b480      	push	{r7}
 8015822:	b083      	sub	sp, #12
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	7e5b      	ldrb	r3, [r3, #25]
}
 801582c:	4618      	mov	r0, r3
 801582e:	370c      	adds	r7, #12
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr

08015838 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f001 f96d 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015846:	4603      	mov	r3, r0
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	3228      	adds	r2, #40	; 0x28
 801584c:	6812      	ldr	r2, [r2, #0]
 801584e:	4618      	mov	r0, r3
 8015850:	4790      	blx	r2
}
 8015852:	bf00      	nop
 8015854:	3708      	adds	r7, #8
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801585a:	b480      	push	{r7}
 801585c:	b083      	sub	sp, #12
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
    return true;
 8015862:	2301      	movs	r3, #1
}
 8015864:	4618      	mov	r0, r3
 8015866:	370c      	adds	r7, #12
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8015870:	b480      	push	{r7}
 8015872:	b083      	sub	sp, #12
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	7e1b      	ldrb	r3, [r3, #24]
}
 801587c:	4618      	mov	r0, r3
 801587e:	370c      	adds	r7, #12
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr

08015888 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8015888:	b480      	push	{r7}
 801588a:	b083      	sub	sp, #12
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2201      	movs	r2, #1
 8015894:	761a      	strb	r2, [r3, #24]
}
 8015896:	bf00      	nop
 8015898:	370c      	adds	r7, #12
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr

080158a2 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80158a2:	b480      	push	{r7}
 80158a4:	b083      	sub	sp, #12
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]

}
 80158aa:	bf00      	nop
 80158ac:	370c      	adds	r7, #12
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr

080158b6 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80158b6:	b480      	push	{r7}
 80158b8:	b083      	sub	sp, #12
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
 80158be:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	683a      	ldr	r2, [r7, #0]
 80158c4:	60da      	str	r2, [r3, #12]
}
 80158c6:	bf00      	nop
 80158c8:	370c      	adds	r7, #12
 80158ca:	46bd      	mov	sp, r7
 80158cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d0:	4770      	bx	lr

080158d2 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80158d2:	b480      	push	{r7}
 80158d4:	b083      	sub	sp, #12
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
 80158da:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	611a      	str	r2, [r3, #16]
}
 80158e2:	bf00      	nop
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr

080158ee <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80158ee:	b480      	push	{r7}
 80158f0:	b083      	sub	sp, #12
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	683a      	ldr	r2, [r7, #0]
 80158fc:	605a      	str	r2, [r3, #4]
}
 80158fe:	bf00      	nop
 8015900:	370c      	adds	r7, #12
 8015902:	46bd      	mov	sp, r7
 8015904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015908:	4770      	bx	lr

0801590a <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 801590a:	b480      	push	{r7}
 801590c:	b083      	sub	sp, #12
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
 8015912:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	683a      	ldr	r2, [r7, #0]
 8015918:	609a      	str	r2, [r3, #8]
}
 801591a:	bf00      	nop
 801591c:	370c      	adds	r7, #12
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr

08015926 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8015926:	b580      	push	{r7, lr}
 8015928:	b082      	sub	sp, #8
 801592a:	af00      	add	r7, sp, #0
 801592c:	6078      	str	r0, [r7, #4]
 801592e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	4619      	mov	r1, r3
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7f9 fd29 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 801593c:	6878      	ldr	r0, [r7, #4]
 801593e:	3708      	adds	r7, #8
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}

08015944 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	691b      	ldr	r3, [r3, #16]
}
 8015950:	4618      	mov	r0, r3
 8015952:	370c      	adds	r7, #12
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr

0801595c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 801595c:	b590      	push	{r4, r7, lr}
 801595e:	b087      	sub	sp, #28
 8015960:	af00      	add	r7, sp, #0
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d101      	bne.n	8015972 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801596e:	2301      	movs	r3, #1
 8015970:	e01f      	b.n	80159b2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d01b      	beq.n	80159b0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8015978:	f107 0310 	add.w	r3, r7, #16
 801597c:	68b9      	ldr	r1, [r7, #8]
 801597e:	4618      	mov	r0, r3
 8015980:	f7f9 fd05 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015984:	f107 0310 	add.w	r3, r7, #16
 8015988:	4619      	mov	r1, r3
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f00c fb93 	bl	80220b6 <_ZNK10TestFilter5matchERK12SimpleString>
 8015990:	4603      	mov	r3, r0
 8015992:	461c      	mov	r4, r3
 8015994:	f107 0310 	add.w	r3, r7, #16
 8015998:	4618      	mov	r0, r3
 801599a:	f7fa f8b0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801599e:	2c00      	cmp	r4, #0
 80159a0:	d001      	beq.n	80159a6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 80159a2:	2301      	movs	r3, #1
 80159a4:	e005      	b.n	80159b2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f00c fb5f 	bl	802206a <_ZNK10TestFilter7getNextEv>
 80159ac:	6078      	str	r0, [r7, #4]
 80159ae:	e7e0      	b.n	8015972 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80159b0:	2300      	movs	r3, #0
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	371c      	adds	r7, #28
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd90      	pop	{r4, r7, pc}

080159ba <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b084      	sub	sp, #16
 80159be:	af00      	add	r7, sp, #0
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	4619      	mov	r1, r3
 80159ce:	68f8      	ldr	r0, [r7, #12]
 80159d0:	f7ff ffc4 	bl	801595c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d00b      	beq.n	80159f2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	4619      	mov	r1, r3
 80159e2:	68f8      	ldr	r0, [r7, #12]
 80159e4:	f7ff ffba 	bl	801595c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d001      	beq.n	80159f2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80159ee:	2301      	movs	r3, #1
 80159f0:	e000      	b.n	80159f4 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80159f2:	2300      	movs	r3, #0
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3710      	adds	r7, #16
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80159fc:	b590      	push	{r4, r7, lr}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	339c      	adds	r3, #156	; 0x9c
 8015a0c:	681c      	ldr	r4, [r3, #0]
 8015a0e:	f001 f8b1 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015a12:	4603      	mov	r3, r0
 8015a14:	461a      	mov	r2, r3
 8015a16:	6839      	ldr	r1, [r7, #0]
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8015a1c:	bf00      	nop
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd90      	pop	{r4, r7, pc}

08015a24 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2201      	movs	r2, #1
 8015a34:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f001 f872 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	3234      	adds	r2, #52	; 0x34
 8015a42:	6812      	ldr	r2, [r2, #0]
 8015a44:	68b9      	ldr	r1, [r7, #8]
 8015a46:	4618      	mov	r0, r3
 8015a48:	4790      	blx	r2
    terminator.exitCurrentTest();
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8015a54:	bf00      	nop
 8015a56:	3710      	adds	r7, #16
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	6838      	ldr	r0, [r7, #0]
 8015a6e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8015a70:	bf00      	nop
 8015a72:	3708      	adds	r7, #8
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015a78:	b590      	push	{r4, r7, lr}
 8015a7a:	b09d      	sub	sp, #116	; 0x74
 8015a7c:	af04      	add	r7, sp, #16
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	607a      	str	r2, [r7, #4]
 8015a82:	603b      	str	r3, [r7, #0]
 8015a84:	460b      	mov	r3, r1
 8015a86:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8015a88:	68f8      	ldr	r0, [r7, #12]
 8015a8a:	f001 f849 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	3228      	adds	r2, #40	; 0x28
 8015a94:	6812      	ldr	r2, [r2, #0]
 8015a96:	4618      	mov	r0, r3
 8015a98:	4790      	blx	r2
    if (!condition)
 8015a9a:	7afb      	ldrb	r3, [r7, #11]
 8015a9c:	f083 0301 	eor.w	r3, r3, #1
 8015aa0:	b2db      	uxtb	r3, r3
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d03f      	beq.n	8015b26 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	339c      	adds	r3, #156	; 0x9c
 8015aac:	681c      	ldr	r4, [r3, #0]
 8015aae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015ab2:	6879      	ldr	r1, [r7, #4]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f9 fc6a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015aba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f9 fc64 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015aca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f9 fc5e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015ad2:	f107 0014 	add.w	r0, r7, #20
 8015ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015ada:	9302      	str	r3, [sp, #8]
 8015adc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015ae0:	9301      	str	r3, [sp, #4]
 8015ae2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015ae6:	9300      	str	r3, [sp, #0]
 8015ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015aea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015aec:	68f9      	ldr	r1, [r7, #12]
 8015aee:	f7fb ff6b 	bl	80119c8 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015af2:	f107 0314 	add.w	r3, r7, #20
 8015af6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015af8:	4619      	mov	r1, r3
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	47a0      	blx	r4
 8015afe:	f107 0314 	add.w	r3, r7, #20
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fc fdce 	bl	80126a4 <_ZN12CheckFailureD1Ev>
 8015b08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7f9 fff6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015b12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f9 fff1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f9 ffec 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8015b26:	bf00      	nop
 8015b28:	3764      	adds	r7, #100	; 0x64
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd90      	pop	{r4, r7, pc}

08015b2e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015b2e:	b590      	push	{r4, r7, lr}
 8015b30:	b097      	sub	sp, #92	; 0x5c
 8015b32:	af02      	add	r7, sp, #8
 8015b34:	60f8      	str	r0, [r7, #12]
 8015b36:	60b9      	str	r1, [r7, #8]
 8015b38:	607a      	str	r2, [r7, #4]
 8015b3a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f000 ffef 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015b42:	4603      	mov	r3, r0
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	3228      	adds	r2, #40	; 0x28
 8015b48:	6812      	ldr	r2, [r2, #0]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	339c      	adds	r3, #156	; 0x9c
 8015b54:	681c      	ldr	r4, [r3, #0]
 8015b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b5a:	68b9      	ldr	r1, [r7, #8]
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7f9 fc16 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015b62:	f107 0014 	add.w	r0, r7, #20
 8015b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b6a:	9300      	str	r3, [sp, #0]
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	68f9      	ldr	r1, [r7, #12]
 8015b72:	f7fb ff71 	bl	8011a58 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8015b76:	f107 0314 	add.w	r3, r7, #20
 8015b7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	47a0      	blx	r4
 8015b82:	f107 0314 	add.w	r3, r7, #20
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7f7 fc16 	bl	800d3b8 <_ZN11FailFailureD1Ev>
 8015b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7f9 ffb4 	bl	800fafe <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8015b96:	bf00      	nop
 8015b98:	3754      	adds	r7, #84	; 0x54
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd90      	pop	{r4, r7, pc}

08015b9e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015b9e:	b590      	push	{r4, r7, lr}
 8015ba0:	b0a7      	sub	sp, #156	; 0x9c
 8015ba2:	af04      	add	r7, sp, #16
 8015ba4:	60f8      	str	r0, [r7, #12]
 8015ba6:	60b9      	str	r1, [r7, #8]
 8015ba8:	607a      	str	r2, [r7, #4]
 8015baa:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015bac:	68f8      	ldr	r0, [r7, #12]
 8015bae:	f000 ffb7 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	3228      	adds	r2, #40	; 0x28
 8015bb8:	6812      	ldr	r2, [r2, #0]
 8015bba:	4618      	mov	r0, r3
 8015bbc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d102      	bne.n	8015bca <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8015bc4:	68bb      	ldr	r3, [r7, #8]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d068      	beq.n	8015c9c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d002      	beq.n	8015bd6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d12a      	bne.n	8015c2c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	339c      	adds	r3, #156	; 0x9c
 8015bdc:	681c      	ldr	r4, [r3, #0]
 8015bde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015be2:	6839      	ldr	r1, [r7, #0]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7f9 fbd2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015bea:	f107 0010 	add.w	r0, r7, #16
 8015bee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015bf2:	9302      	str	r3, [sp, #8]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	9301      	str	r3, [sp, #4]
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	9300      	str	r3, [sp, #0]
 8015bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015c04:	68f9      	ldr	r1, [r7, #12]
 8015c06:	f7fc f9ad 	bl	8011f64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015c0a:	f107 0310 	add.w	r3, r7, #16
 8015c0e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8015c12:	4619      	mov	r1, r3
 8015c14:	68f8      	ldr	r0, [r7, #12]
 8015c16:	47a0      	blx	r4
 8015c18:	f107 0310 	add.w	r3, r7, #16
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7fc fcb9 	bl	8012594 <_ZN18StringEqualFailureD1Ev>
 8015c22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7f9 ff69 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8015c2c:	6879      	ldr	r1, [r7, #4]
 8015c2e:	68b8      	ldr	r0, [r7, #8]
 8015c30:	f7f9 f9ea 	bl	800f008 <_ZN12SimpleString6StrCmpEPKcS1_>
 8015c34:	4603      	mov	r3, r0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	bf14      	ite	ne
 8015c3a:	2301      	movne	r3, #1
 8015c3c:	2300      	moveq	r3, #0
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d02c      	beq.n	8015c9e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	339c      	adds	r3, #156	; 0x9c
 8015c4a:	681c      	ldr	r4, [r3, #0]
 8015c4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015c50:	6839      	ldr	r1, [r7, #0]
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7f9 fb9b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015c58:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015c5c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015c60:	9302      	str	r3, [sp, #8]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	9301      	str	r3, [sp, #4]
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	9300      	str	r3, [sp, #0]
 8015c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015c72:	68f9      	ldr	r1, [r7, #12]
 8015c74:	f7fc f976 	bl	8011f64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015c78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c7c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8015c80:	4619      	mov	r1, r3
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	47a0      	blx	r4
 8015c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7fc fc82 	bl	8012594 <_ZN18StringEqualFailureD1Ev>
 8015c90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7f9 ff32 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015c9a:	e000      	b.n	8015c9e <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015c9c:	bf00      	nop
}
 8015c9e:	378c      	adds	r7, #140	; 0x8c
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd90      	pop	{r4, r7, pc}

08015ca4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015ca4:	b590      	push	{r4, r7, lr}
 8015ca6:	b0a7      	sub	sp, #156	; 0x9c
 8015ca8:	af04      	add	r7, sp, #16
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015cb2:	68f8      	ldr	r0, [r7, #12]
 8015cb4:	f000 ff34 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	3228      	adds	r2, #40	; 0x28
 8015cbe:	6812      	ldr	r2, [r2, #0]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d102      	bne.n	8015cd0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d06b      	beq.n	8015da8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d002      	beq.n	8015cdc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d12b      	bne.n	8015d34 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	339c      	adds	r3, #156	; 0x9c
 8015ce2:	681c      	ldr	r4, [r3, #0]
 8015ce4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015ce8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7f9 fb4e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015cf2:	f107 0010 	add.w	r0, r7, #16
 8015cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015cfa:	9302      	str	r3, [sp, #8]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	9301      	str	r3, [sp, #4]
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015d08:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015d0c:	68f9      	ldr	r1, [r7, #12]
 8015d0e:	f7fc f929 	bl	8011f64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015d12:	f107 0310 	add.w	r3, r7, #16
 8015d16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	68f8      	ldr	r0, [r7, #12]
 8015d1e:	47a0      	blx	r4
 8015d20:	f107 0310 	add.w	r3, r7, #16
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7fc fc35 	bl	8012594 <_ZN18StringEqualFailureD1Ev>
 8015d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7f9 fee5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8015d34:	683a      	ldr	r2, [r7, #0]
 8015d36:	6879      	ldr	r1, [r7, #4]
 8015d38:	68b8      	ldr	r0, [r7, #8]
 8015d3a:	f7f9 f9a4 	bl	800f086 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	bf14      	ite	ne
 8015d44:	2301      	movne	r3, #1
 8015d46:	2300      	moveq	r3, #0
 8015d48:	b2db      	uxtb	r3, r3
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d02d      	beq.n	8015daa <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	339c      	adds	r3, #156	; 0x9c
 8015d54:	681c      	ldr	r4, [r3, #0]
 8015d56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015d5a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7f9 fb15 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015d64:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015d68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015d6c:	9302      	str	r3, [sp, #8]
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	9301      	str	r3, [sp, #4]
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	9300      	str	r3, [sp, #0]
 8015d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015d7a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015d7e:	68f9      	ldr	r1, [r7, #12]
 8015d80:	f7fc f8f0 	bl	8011f64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015d88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015d8c:	4619      	mov	r1, r3
 8015d8e:	68f8      	ldr	r0, [r7, #12]
 8015d90:	47a0      	blx	r4
 8015d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fc fbfc 	bl	8012594 <_ZN18StringEqualFailureD1Ev>
 8015d9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f9 feac 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015da6:	e000      	b.n	8015daa <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015da8:	bf00      	nop
}
 8015daa:	378c      	adds	r7, #140	; 0x8c
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd90      	pop	{r4, r7, pc}

08015db0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8015db0:	b590      	push	{r4, r7, lr}
 8015db2:	b0ab      	sub	sp, #172	; 0xac
 8015db4:	af04      	add	r7, sp, #16
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
 8015dbc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015dbe:	68f8      	ldr	r0, [r7, #12]
 8015dc0:	f000 feae 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	681a      	ldr	r2, [r3, #0]
 8015dc8:	3228      	adds	r2, #40	; 0x28
 8015dca:	6812      	ldr	r2, [r2, #0]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d102      	bne.n	8015ddc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d07c      	beq.n	8015ed6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d002      	beq.n	8015de8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d128      	bne.n	8015e3a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	3398      	adds	r3, #152	; 0x98
 8015dee:	681c      	ldr	r4, [r3, #0]
 8015df0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7f9 fac9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015dfc:	f107 0010 	add.w	r0, r7, #16
 8015e00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015e04:	9302      	str	r3, [sp, #8]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	9301      	str	r3, [sp, #4]
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	9300      	str	r3, [sp, #0]
 8015e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015e16:	68f9      	ldr	r1, [r7, #12]
 8015e18:	f7fc f948 	bl	80120ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015e1c:	f107 0310 	add.w	r3, r7, #16
 8015e20:	4619      	mov	r1, r3
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	47a0      	blx	r4
 8015e26:	f107 0310 	add.w	r3, r7, #16
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fc fb90 	bl	8012550 <_ZN24StringEqualNoCaseFailureD1Ev>
 8015e30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7f9 fe62 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8015e3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015e3e:	68b9      	ldr	r1, [r7, #8]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7f9 faa4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7f9 fa9e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015e52:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015e5a:	4611      	mov	r1, r2
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7f9 fe75 	bl	800fb4c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8015e62:	4603      	mov	r3, r0
 8015e64:	f083 0301 	eor.w	r3, r3, #1
 8015e68:	b2dc      	uxtb	r4, r3
 8015e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7f9 fe45 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015e74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7f9 fe40 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015e7e:	2c00      	cmp	r4, #0
 8015e80:	d02a      	beq.n	8015ed8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	3398      	adds	r3, #152	; 0x98
 8015e88:	681c      	ldr	r4, [r3, #0]
 8015e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015e8e:	6839      	ldr	r1, [r7, #0]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7f9 fa7c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015e96:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8015e9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015e9e:	9302      	str	r3, [sp, #8]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	9301      	str	r3, [sp, #4]
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015eac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015eb0:	68f9      	ldr	r1, [r7, #12]
 8015eb2:	f7fc f8fb 	bl	80120ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015eba:	4619      	mov	r1, r3
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	47a0      	blx	r4
 8015ec0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7fc fb43 	bl	8012550 <_ZN24StringEqualNoCaseFailureD1Ev>
 8015eca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7f9 fe15 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015ed4:	e000      	b.n	8015ed8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015ed6:	bf00      	nop
}
 8015ed8:	379c      	adds	r7, #156	; 0x9c
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd90      	pop	{r4, r7, pc}

08015ede <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8015ede:	b590      	push	{r4, r7, lr}
 8015ee0:	b0b3      	sub	sp, #204	; 0xcc
 8015ee2:	af04      	add	r7, sp, #16
 8015ee4:	60f8      	str	r0, [r7, #12]
 8015ee6:	60b9      	str	r1, [r7, #8]
 8015ee8:	607a      	str	r2, [r7, #4]
 8015eea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015eec:	68f8      	ldr	r0, [r7, #12]
 8015eee:	f000 fe17 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	3228      	adds	r2, #40	; 0x28
 8015ef8:	6812      	ldr	r2, [r2, #0]
 8015efa:	4618      	mov	r0, r3
 8015efc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d103      	bne.n	8015f0c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	f000 80ad 	beq.w	8016066 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d002      	beq.n	8015f18 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8015f12:	68bb      	ldr	r3, [r7, #8]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d140      	bne.n	8015f9a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	3398      	adds	r3, #152	; 0x98
 8015f1e:	681c      	ldr	r4, [r3, #0]
 8015f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015f24:	68b9      	ldr	r1, [r7, #8]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7f9 fa31 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015f2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015f30:	6879      	ldr	r1, [r7, #4]
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7f9 fa2b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015f3c:	6839      	ldr	r1, [r7, #0]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7f9 fa25 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015f44:	f107 0010 	add.w	r0, r7, #16
 8015f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015f4c:	9302      	str	r3, [sp, #8]
 8015f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015f52:	9301      	str	r3, [sp, #4]
 8015f54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015f62:	68f9      	ldr	r1, [r7, #12]
 8015f64:	f7fb fce6 	bl	8011934 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015f68:	f107 0310 	add.w	r3, r7, #16
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	68f8      	ldr	r0, [r7, #12]
 8015f70:	47a0      	blx	r4
 8015f72:	f107 0310 	add.w	r3, r7, #16
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7fc fbb6 	bl	80126e8 <_ZN15ContainsFailureD1Ev>
 8015f7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7f9 fdbc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015f86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f9 fdb7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7f9 fdb2 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8015f9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015f9e:	6879      	ldr	r1, [r7, #4]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7f9 f9f4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015faa:	68b9      	ldr	r1, [r7, #8]
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7f9 f9ee 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015fb2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015fb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015fba:	4611      	mov	r1, r2
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7f9 fa64 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	f083 0301 	eor.w	r3, r3, #1
 8015fc8:	b2dc      	uxtb	r4, r3
 8015fca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f7f9 fd95 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015fd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7f9 fd90 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8015fde:	2c00      	cmp	r4, #0
 8015fe0:	d042      	beq.n	8016068 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	3398      	adds	r3, #152	; 0x98
 8015fe8:	681c      	ldr	r4, [r3, #0]
 8015fea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015fee:	68b9      	ldr	r1, [r7, #8]
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7f9 f9cc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8015ff6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f9 f9c6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016002:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016006:	6839      	ldr	r1, [r7, #0]
 8016008:	4618      	mov	r0, r3
 801600a:	f7f9 f9c0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801600e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8016012:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016016:	9302      	str	r3, [sp, #8]
 8016018:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801601c:	9301      	str	r3, [sp, #4]
 801601e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016022:	9300      	str	r3, [sp, #0]
 8016024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016028:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801602c:	68f9      	ldr	r1, [r7, #12]
 801602e:	f7fb fc81 	bl	8011934 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8016032:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016036:	4619      	mov	r1, r3
 8016038:	68f8      	ldr	r0, [r7, #12]
 801603a:	47a0      	blx	r4
 801603c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016040:	4618      	mov	r0, r3
 8016042:	f7fc fb51 	bl	80126e8 <_ZN15ContainsFailureD1Ev>
 8016046:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801604a:	4618      	mov	r0, r3
 801604c:	f7f9 fd57 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016050:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8016054:	4618      	mov	r0, r3
 8016056:	f7f9 fd52 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801605a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801605e:	4618      	mov	r0, r3
 8016060:	f7f9 fd4d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016064:	e000      	b.n	8016068 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8016066:	bf00      	nop
}
 8016068:	37bc      	adds	r7, #188	; 0xbc
 801606a:	46bd      	mov	sp, r7
 801606c:	bd90      	pop	{r4, r7, pc}

0801606e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 801606e:	b590      	push	{r4, r7, lr}
 8016070:	b0b3      	sub	sp, #204	; 0xcc
 8016072:	af04      	add	r7, sp, #16
 8016074:	60f8      	str	r0, [r7, #12]
 8016076:	60b9      	str	r1, [r7, #8]
 8016078:	607a      	str	r2, [r7, #4]
 801607a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801607c:	68f8      	ldr	r0, [r7, #12]
 801607e:	f000 fd4f 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016082:	4603      	mov	r3, r0
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	3228      	adds	r2, #40	; 0x28
 8016088:	6812      	ldr	r2, [r2, #0]
 801608a:	4618      	mov	r0, r3
 801608c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d103      	bne.n	801609c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	2b00      	cmp	r3, #0
 8016098:	f000 80ad 	beq.w	80161f6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d002      	beq.n	80160a8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d140      	bne.n	801612a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	3398      	adds	r3, #152	; 0x98
 80160ae:	681c      	ldr	r4, [r3, #0]
 80160b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80160b4:	68b9      	ldr	r1, [r7, #8]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7f9 f969 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80160bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80160c0:	6879      	ldr	r1, [r7, #4]
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7f9 f963 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80160c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80160cc:	6839      	ldr	r1, [r7, #0]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7f9 f95d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80160d4:	f107 0010 	add.w	r0, r7, #16
 80160d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80160dc:	9302      	str	r3, [sp, #8]
 80160de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80160e2:	9301      	str	r3, [sp, #4]
 80160e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80160e8:	9300      	str	r3, [sp, #0]
 80160ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80160ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80160f2:	68f9      	ldr	r1, [r7, #12]
 80160f4:	f7fb fc1e 	bl	8011934 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80160f8:	f107 0310 	add.w	r3, r7, #16
 80160fc:	4619      	mov	r1, r3
 80160fe:	68f8      	ldr	r0, [r7, #12]
 8016100:	47a0      	blx	r4
 8016102:	f107 0310 	add.w	r3, r7, #16
 8016106:	4618      	mov	r0, r3
 8016108:	f7fc faee 	bl	80126e8 <_ZN15ContainsFailureD1Ev>
 801610c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016110:	4618      	mov	r0, r3
 8016112:	f7f9 fcf4 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801611a:	4618      	mov	r0, r3
 801611c:	f7f9 fcef 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016120:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016124:	4618      	mov	r0, r3
 8016126:	f7f9 fcea 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801612a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801612e:	6879      	ldr	r1, [r7, #4]
 8016130:	4618      	mov	r0, r3
 8016132:	f7f9 f92c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016136:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801613a:	68b9      	ldr	r1, [r7, #8]
 801613c:	4618      	mov	r0, r3
 801613e:	f7f9 f926 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016142:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801614a:	4611      	mov	r1, r2
 801614c:	4618      	mov	r0, r3
 801614e:	f7f9 f9b7 	bl	800f4c0 <_ZNK12SimpleString14containsNoCaseERKS_>
 8016152:	4603      	mov	r3, r0
 8016154:	f083 0301 	eor.w	r3, r3, #1
 8016158:	b2dc      	uxtb	r4, r3
 801615a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801615e:	4618      	mov	r0, r3
 8016160:	f7f9 fccd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016164:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016168:	4618      	mov	r0, r3
 801616a:	f7f9 fcc8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801616e:	2c00      	cmp	r4, #0
 8016170:	d042      	beq.n	80161f8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	3398      	adds	r3, #152	; 0x98
 8016178:	681c      	ldr	r4, [r3, #0]
 801617a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801617e:	68b9      	ldr	r1, [r7, #8]
 8016180:	4618      	mov	r0, r3
 8016182:	f7f9 f904 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016186:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801618a:	6879      	ldr	r1, [r7, #4]
 801618c:	4618      	mov	r0, r3
 801618e:	f7f9 f8fe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016192:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016196:	6839      	ldr	r1, [r7, #0]
 8016198:	4618      	mov	r0, r3
 801619a:	f7f9 f8f8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801619e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80161a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80161a6:	9302      	str	r3, [sp, #8]
 80161a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80161ac:	9301      	str	r3, [sp, #4]
 80161ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80161b8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80161bc:	68f9      	ldr	r1, [r7, #12]
 80161be:	f7fb fbb9 	bl	8011934 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80161c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80161c6:	4619      	mov	r1, r3
 80161c8:	68f8      	ldr	r0, [r7, #12]
 80161ca:	47a0      	blx	r4
 80161cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7fc fa89 	bl	80126e8 <_ZN15ContainsFailureD1Ev>
 80161d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f9 fc8f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80161e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f9 fc8a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80161ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7f9 fc85 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80161f4:	e000      	b.n	80161f8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80161f6:	bf00      	nop
}
 80161f8:	37bc      	adds	r7, #188	; 0xbc
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd90      	pop	{r4, r7, pc}

080161fe <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80161fe:	b590      	push	{r4, r7, lr}
 8016200:	b099      	sub	sp, #100	; 0x64
 8016202:	af04      	add	r7, sp, #16
 8016204:	60f8      	str	r0, [r7, #12]
 8016206:	60b9      	str	r1, [r7, #8]
 8016208:	607a      	str	r2, [r7, #4]
 801620a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801620c:	68f8      	ldr	r0, [r7, #12]
 801620e:	f000 fc87 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016212:	4603      	mov	r3, r0
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	3228      	adds	r2, #40	; 0x28
 8016218:	6812      	ldr	r2, [r2, #0]
 801621a:	4618      	mov	r0, r3
 801621c:	4790      	blx	r2
    if (expected != actual)
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	429a      	cmp	r2, r3
 8016224:	d027      	beq.n	8016276 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	339c      	adds	r3, #156	; 0x9c
 801622c:	681c      	ldr	r4, [r3, #0]
 801622e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016232:	6839      	ldr	r1, [r7, #0]
 8016234:	4618      	mov	r0, r3
 8016236:	f7f9 f8aa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801623a:	f107 0014 	add.w	r0, r7, #20
 801623e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016242:	9302      	str	r3, [sp, #8]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	9301      	str	r3, [sp, #4]
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	9300      	str	r3, [sp, #0]
 801624c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801624e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016250:	68f9      	ldr	r1, [r7, #12]
 8016252:	f7fb fc1f 	bl	8011a94 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8016256:	f107 0314 	add.w	r3, r7, #20
 801625a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801625c:	4619      	mov	r1, r3
 801625e:	68f8      	ldr	r0, [r7, #12]
 8016260:	47a0      	blx	r4
 8016262:	f107 0314 	add.w	r3, r7, #20
 8016266:	4618      	mov	r0, r3
 8016268:	f7fc f9fa 	bl	8012660 <_ZN17LongsEqualFailureD1Ev>
 801626c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016270:	4618      	mov	r0, r3
 8016272:	f7f9 fc44 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8016276:	bf00      	nop
 8016278:	3754      	adds	r7, #84	; 0x54
 801627a:	46bd      	mov	sp, r7
 801627c:	bd90      	pop	{r4, r7, pc}

0801627e <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801627e:	b590      	push	{r4, r7, lr}
 8016280:	b099      	sub	sp, #100	; 0x64
 8016282:	af04      	add	r7, sp, #16
 8016284:	60f8      	str	r0, [r7, #12]
 8016286:	60b9      	str	r1, [r7, #8]
 8016288:	607a      	str	r2, [r7, #4]
 801628a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f000 fc47 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016292:	4603      	mov	r3, r0
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	3228      	adds	r2, #40	; 0x28
 8016298:	6812      	ldr	r2, [r2, #0]
 801629a:	4618      	mov	r0, r3
 801629c:	4790      	blx	r2
    if (expected != actual)
 801629e:	68ba      	ldr	r2, [r7, #8]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d027      	beq.n	80162f6 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	339c      	adds	r3, #156	; 0x9c
 80162ac:	681c      	ldr	r4, [r3, #0]
 80162ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162b2:	6839      	ldr	r1, [r7, #0]
 80162b4:	4618      	mov	r0, r3
 80162b6:	f7f9 f86a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80162ba:	f107 0014 	add.w	r0, r7, #20
 80162be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162c2:	9302      	str	r3, [sp, #8]
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	9301      	str	r3, [sp, #4]
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	9300      	str	r3, [sp, #0]
 80162cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80162ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80162d0:	68f9      	ldr	r1, [r7, #12]
 80162d2:	f7fb fcab 	bl	8011c2c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80162d6:	f107 0314 	add.w	r3, r7, #20
 80162da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80162dc:	4619      	mov	r1, r3
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	47a0      	blx	r4
 80162e2:	f107 0314 	add.w	r3, r7, #20
 80162e6:	4618      	mov	r0, r3
 80162e8:	f7fc f998 	bl	801261c <_ZN25UnsignedLongsEqualFailureD1Ev>
 80162ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7f9 fc04 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80162f6:	bf00      	nop
 80162f8:	3754      	adds	r7, #84	; 0x54
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd90      	pop	{r4, r7, pc}
	...

08016300 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016300:	b082      	sub	sp, #8
 8016302:	b590      	push	{r4, r7, lr}
 8016304:	b099      	sub	sp, #100	; 0x64
 8016306:	af02      	add	r7, sp, #8
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	1d38      	adds	r0, r7, #4
 801630c:	e880 0006 	stmia.w	r0, {r1, r2}
 8016310:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f000 fc04 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016318:	4603      	mov	r3, r0
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	3228      	adds	r2, #40	; 0x28
 801631e:	6812      	ldr	r2, [r2, #0]
 8016320:	4618      	mov	r0, r3
 8016322:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	339c      	adds	r3, #156	; 0x9c
 801632a:	681c      	ldr	r4, [r3, #0]
 801632c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016330:	4919      	ldr	r1, [pc, #100]	; (8016398 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8016332:	4618      	mov	r0, r3
 8016334:	f7f9 f82b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016338:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801633c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801633e:	4618      	mov	r0, r3
 8016340:	f7f9 f825 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016344:	f107 0014 	add.w	r0, r7, #20
 8016348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801634c:	9301      	str	r3, [sp, #4]
 801634e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016352:	9300      	str	r3, [sp, #0]
 8016354:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016356:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016358:	68f9      	ldr	r1, [r7, #12]
 801635a:	f7fc f84d 	bl	80123f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801635e:	f107 0314 	add.w	r3, r7, #20
 8016362:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016366:	4619      	mov	r1, r3
 8016368:	68f8      	ldr	r0, [r7, #12]
 801636a:	47a0      	blx	r4
 801636c:	f107 0314 	add.w	r3, r7, #20
 8016370:	4618      	mov	r0, r3
 8016372:	f7fc f887 	bl	8012484 <_ZN25FeatureUnsupportedFailureD1Ev>
 8016376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801637a:	4618      	mov	r0, r3
 801637c:	f7f9 fbbf 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016384:	4618      	mov	r0, r3
 8016386:	f7f9 fbba 	bl	800fafe <_ZN12SimpleStringD1Ev>
#endif
}
 801638a:	bf00      	nop
 801638c:	375c      	adds	r7, #92	; 0x5c
 801638e:	46bd      	mov	sp, r7
 8016390:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016394:	b002      	add	sp, #8
 8016396:	4770      	bx	lr
 8016398:	080281e0 	.word	0x080281e0

0801639c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801639c:	b082      	sub	sp, #8
 801639e:	b590      	push	{r4, r7, lr}
 80163a0:	b099      	sub	sp, #100	; 0x64
 80163a2:	af02      	add	r7, sp, #8
 80163a4:	60f8      	str	r0, [r7, #12]
 80163a6:	1d38      	adds	r0, r7, #4
 80163a8:	e880 0006 	stmia.w	r0, {r1, r2}
 80163ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80163ae:	68f8      	ldr	r0, [r7, #12]
 80163b0:	f000 fbb6 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 80163b4:	4603      	mov	r3, r0
 80163b6:	681a      	ldr	r2, [r3, #0]
 80163b8:	3228      	adds	r2, #40	; 0x28
 80163ba:	6812      	ldr	r2, [r2, #0]
 80163bc:	4618      	mov	r0, r3
 80163be:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	339c      	adds	r3, #156	; 0x9c
 80163c6:	681c      	ldr	r4, [r3, #0]
 80163c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163cc:	4919      	ldr	r1, [pc, #100]	; (8016434 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f8 ffdd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80163d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80163d8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80163da:	4618      	mov	r0, r3
 80163dc:	f7f8 ffd7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80163e0:	f107 0014 	add.w	r0, r7, #20
 80163e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80163e8:	9301      	str	r3, [sp, #4]
 80163ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80163f4:	68f9      	ldr	r1, [r7, #12]
 80163f6:	f7fb ffff 	bl	80123f8 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 80163fa:	f107 0314 	add.w	r3, r7, #20
 80163fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016402:	4619      	mov	r1, r3
 8016404:	68f8      	ldr	r0, [r7, #12]
 8016406:	47a0      	blx	r4
 8016408:	f107 0314 	add.w	r3, r7, #20
 801640c:	4618      	mov	r0, r3
 801640e:	f7fc f839 	bl	8012484 <_ZN25FeatureUnsupportedFailureD1Ev>
 8016412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016416:	4618      	mov	r0, r3
 8016418:	f7f9 fb71 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801641c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016420:	4618      	mov	r0, r3
 8016422:	f7f9 fb6c 	bl	800fafe <_ZN12SimpleStringD1Ev>
#endif
}
 8016426:	bf00      	nop
 8016428:	375c      	adds	r7, #92	; 0x5c
 801642a:	46bd      	mov	sp, r7
 801642c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016430:	b002      	add	sp, #8
 8016432:	4770      	bx	lr
 8016434:	080281e0 	.word	0x080281e0

08016438 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016438:	b590      	push	{r4, r7, lr}
 801643a:	b099      	sub	sp, #100	; 0x64
 801643c:	af04      	add	r7, sp, #16
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	607b      	str	r3, [r7, #4]
 8016442:	460b      	mov	r3, r1
 8016444:	72fb      	strb	r3, [r7, #11]
 8016446:	4613      	mov	r3, r2
 8016448:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f000 fb68 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016450:	4603      	mov	r3, r0
 8016452:	681a      	ldr	r2, [r3, #0]
 8016454:	3228      	adds	r2, #40	; 0x28
 8016456:	6812      	ldr	r2, [r2, #0]
 8016458:	4618      	mov	r0, r3
 801645a:	4790      	blx	r2
    if (expected != actual)
 801645c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8016460:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8016464:	429a      	cmp	r2, r3
 8016466:	d029      	beq.n	80164bc <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	339c      	adds	r3, #156	; 0x9c
 801646e:	681c      	ldr	r4, [r3, #0]
 8016470:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016474:	6879      	ldr	r1, [r7, #4]
 8016476:	4618      	mov	r0, r3
 8016478:	f7f8 ff89 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801647c:	f107 0014 	add.w	r0, r7, #20
 8016480:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016484:	9302      	str	r3, [sp, #8]
 8016486:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801648a:	9301      	str	r3, [sp, #4]
 801648c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016490:	9300      	str	r3, [sp, #0]
 8016492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016494:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016496:	68f9      	ldr	r1, [r7, #12]
 8016498:	f7fb fc94 	bl	8011dc4 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 801649c:	f107 0314 	add.w	r3, r7, #20
 80164a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80164a2:	4619      	mov	r1, r3
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	47a0      	blx	r4
 80164a8:	f107 0314 	add.w	r3, r7, #20
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7fc f893 	bl	80125d8 <_ZN23SignedBytesEqualFailureD1Ev>
 80164b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7f9 fb21 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80164bc:	bf00      	nop
 80164be:	3754      	adds	r7, #84	; 0x54
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd90      	pop	{r4, r7, pc}

080164c4 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80164c4:	b590      	push	{r4, r7, lr}
 80164c6:	b09d      	sub	sp, #116	; 0x74
 80164c8:	af04      	add	r7, sp, #16
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	60b9      	str	r1, [r7, #8]
 80164ce:	607a      	str	r2, [r7, #4]
 80164d0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f000 fb24 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 80164d8:	4603      	mov	r3, r0
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	3228      	adds	r2, #40	; 0x28
 80164de:	6812      	ldr	r2, [r2, #0]
 80164e0:	4618      	mov	r0, r3
 80164e2:	4790      	blx	r2
    if (expected != actual)
 80164e4:	68ba      	ldr	r2, [r7, #8]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d03f      	beq.n	801656c <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	339c      	adds	r3, #156	; 0x9c
 80164f2:	681c      	ldr	r4, [r3, #0]
 80164f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164f8:	68b9      	ldr	r1, [r7, #8]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7f9 fdea 	bl	80100d4 <_Z10StringFromPKv>
 8016500:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016504:	6879      	ldr	r1, [r7, #4]
 8016506:	4618      	mov	r0, r3
 8016508:	f7f9 fde4 	bl	80100d4 <_Z10StringFromPKv>
 801650c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016510:	6839      	ldr	r1, [r7, #0]
 8016512:	4618      	mov	r0, r3
 8016514:	f7f8 ff3b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016518:	f107 0014 	add.w	r0, r7, #20
 801651c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016520:	9302      	str	r3, [sp, #8]
 8016522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016526:	9301      	str	r3, [sp, #4]
 8016528:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801652c:	9300      	str	r3, [sp, #0]
 801652e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016530:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016532:	68f9      	ldr	r1, [r7, #12]
 8016534:	f7fb f814 	bl	8011560 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8016538:	f107 0314 	add.w	r3, r7, #20
 801653c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801653e:	4619      	mov	r1, r3
 8016540:	68f8      	ldr	r0, [r7, #12]
 8016542:	47a0      	blx	r4
 8016544:	f107 0314 	add.w	r3, r7, #20
 8016548:	4618      	mov	r0, r3
 801654a:	f7fc f955 	bl	80127f8 <_ZN13EqualsFailureD1Ev>
 801654e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016552:	4618      	mov	r0, r3
 8016554:	f7f9 fad3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016558:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801655c:	4618      	mov	r0, r3
 801655e:	f7f9 face 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016566:	4618      	mov	r0, r3
 8016568:	f7f9 fac9 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801656c:	bf00      	nop
 801656e:	3764      	adds	r7, #100	; 0x64
 8016570:	46bd      	mov	sp, r7
 8016572:	bd90      	pop	{r4, r7, pc}

08016574 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016574:	b590      	push	{r4, r7, lr}
 8016576:	b09d      	sub	sp, #116	; 0x74
 8016578:	af04      	add	r7, sp, #16
 801657a:	60f8      	str	r0, [r7, #12]
 801657c:	60b9      	str	r1, [r7, #8]
 801657e:	607a      	str	r2, [r7, #4]
 8016580:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f000 facc 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016588:	4603      	mov	r3, r0
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	3228      	adds	r2, #40	; 0x28
 801658e:	6812      	ldr	r2, [r2, #0]
 8016590:	4618      	mov	r0, r3
 8016592:	4790      	blx	r2
    if (expected != actual)
 8016594:	68ba      	ldr	r2, [r7, #8]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	429a      	cmp	r2, r3
 801659a:	d03f      	beq.n	801661c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	339c      	adds	r3, #156	; 0x9c
 80165a2:	681c      	ldr	r4, [r3, #0]
 80165a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80165a8:	68b9      	ldr	r1, [r7, #8]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f9 fdbc 	bl	8010128 <_Z10StringFromPFvvE>
 80165b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80165b4:	6879      	ldr	r1, [r7, #4]
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7f9 fdb6 	bl	8010128 <_Z10StringFromPFvvE>
 80165bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80165c0:	6839      	ldr	r1, [r7, #0]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7f8 fee3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80165c8:	f107 0014 	add.w	r0, r7, #20
 80165cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80165d0:	9302      	str	r3, [sp, #8]
 80165d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80165d6:	9301      	str	r3, [sp, #4]
 80165d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80165dc:	9300      	str	r3, [sp, #0]
 80165de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80165e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80165e2:	68f9      	ldr	r1, [r7, #12]
 80165e4:	f7fa ffbc 	bl	8011560 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80165e8:	f107 0314 	add.w	r3, r7, #20
 80165ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80165ee:	4619      	mov	r1, r3
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	47a0      	blx	r4
 80165f4:	f107 0314 	add.w	r3, r7, #20
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7fc f8fd 	bl	80127f8 <_ZN13EqualsFailureD1Ev>
 80165fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016602:	4618      	mov	r0, r3
 8016604:	f7f9 fa7b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016608:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801660c:	4618      	mov	r0, r3
 801660e:	f7f9 fa76 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016612:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016616:	4618      	mov	r0, r3
 8016618:	f7f9 fa71 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801661c:	bf00      	nop
 801661e:	3764      	adds	r7, #100	; 0x64
 8016620:	46bd      	mov	sp, r7
 8016622:	bd90      	pop	{r4, r7, pc}

08016624 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016624:	b590      	push	{r4, r7, lr}
 8016626:	b09d      	sub	sp, #116	; 0x74
 8016628:	af02      	add	r7, sp, #8
 801662a:	6278      	str	r0, [r7, #36]	; 0x24
 801662c:	ed87 0b06 	vstr	d0, [r7, #24]
 8016630:	ed87 1b04 	vstr	d1, [r7, #16]
 8016634:	ed87 2b02 	vstr	d2, [r7, #8]
 8016638:	6239      	str	r1, [r7, #32]
 801663a:	607a      	str	r2, [r7, #4]
 801663c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801663e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016640:	f000 fa6e 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016644:	4603      	mov	r3, r0
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	3228      	adds	r2, #40	; 0x28
 801664a:	6812      	ldr	r2, [r2, #0]
 801664c:	4618      	mov	r0, r3
 801664e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8016650:	ed97 2b02 	vldr	d2, [r7, #8]
 8016654:	ed97 1b04 	vldr	d1, [r7, #16]
 8016658:	ed97 0b06 	vldr	d0, [r7, #24]
 801665c:	f7fe fd4a 	bl	80150f4 <_Z13doubles_equalddd>
 8016660:	4603      	mov	r3, r0
 8016662:	f083 0301 	eor.w	r3, r3, #1
 8016666:	b2db      	uxtb	r3, r3
 8016668:	2b00      	cmp	r3, #0
 801666a:	d029      	beq.n	80166c0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 801666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	339c      	adds	r3, #156	; 0x9c
 8016672:	681c      	ldr	r4, [r3, #0]
 8016674:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016678:	6a39      	ldr	r1, [r7, #32]
 801667a:	4618      	mov	r0, r3
 801667c:	f7f8 fe87 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016680:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016684:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016688:	9300      	str	r3, [sp, #0]
 801668a:	ed97 2b02 	vldr	d2, [r7, #8]
 801668e:	ed97 1b04 	vldr	d1, [r7, #16]
 8016692:	ed97 0b06 	vldr	d0, [r7, #24]
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	687a      	ldr	r2, [r7, #4]
 801669a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801669c:	f7fa ffa2 	bl	80115e4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80166a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80166a6:	4619      	mov	r1, r3
 80166a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166aa:	47a0      	blx	r4
 80166ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7fc f87f 	bl	80127b4 <_ZN19DoublesEqualFailureD1Ev>
 80166b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7f9 fa1f 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80166c0:	bf00      	nop
 80166c2:	376c      	adds	r7, #108	; 0x6c
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd90      	pop	{r4, r7, pc}

080166c8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80166c8:	b590      	push	{r4, r7, lr}
 80166ca:	b0a7      	sub	sp, #156	; 0x9c
 80166cc:	af04      	add	r7, sp, #16
 80166ce:	60f8      	str	r0, [r7, #12]
 80166d0:	60b9      	str	r1, [r7, #8]
 80166d2:	607a      	str	r2, [r7, #4]
 80166d4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80166d6:	68f8      	ldr	r0, [r7, #12]
 80166d8:	f000 fa22 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 80166dc:	4603      	mov	r3, r0
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	3228      	adds	r2, #40	; 0x28
 80166e2:	6812      	ldr	r2, [r2, #0]
 80166e4:	4618      	mov	r0, r3
 80166e6:	4790      	blx	r2
	if (length == 0) return;
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d075      	beq.n	80167da <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80166f4:	68bb      	ldr	r3, [r7, #8]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d071      	beq.n	80167de <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d002      	beq.n	8016706 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d12d      	bne.n	8016762 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	339c      	adds	r3, #156	; 0x9c
 801670c:	681c      	ldr	r4, [r3, #0]
 801670e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016712:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8016716:	4618      	mov	r0, r3
 8016718:	f7f8 fe39 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801671c:	f107 0010 	add.w	r0, r7, #16
 8016720:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016724:	9303      	str	r3, [sp, #12]
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	9302      	str	r3, [sp, #8]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	9301      	str	r3, [sp, #4]
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	9300      	str	r3, [sp, #0]
 8016732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016736:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801673a:	68f9      	ldr	r1, [r7, #12]
 801673c:	f7fb fd70 	bl	8012220 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8016740:	f107 0310 	add.w	r3, r7, #16
 8016744:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016748:	4619      	mov	r1, r3
 801674a:	68f8      	ldr	r0, [r7, #12]
 801674c:	47a0      	blx	r4
 801674e:	f107 0310 	add.w	r3, r7, #16
 8016752:	4618      	mov	r0, r3
 8016754:	f7fb feda 	bl	801250c <_ZN18BinaryEqualFailureD1Ev>
 8016758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801675c:	4618      	mov	r0, r3
 801675e:	f7f9 f9ce 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8016762:	683a      	ldr	r2, [r7, #0]
 8016764:	6879      	ldr	r1, [r7, #4]
 8016766:	68b8      	ldr	r0, [r7, #8]
 8016768:	f7f8 fd30 	bl	800f1cc <_ZN12SimpleString6MemCmpEPKvS1_j>
 801676c:	4603      	mov	r3, r0
 801676e:	2b00      	cmp	r3, #0
 8016770:	bf14      	ite	ne
 8016772:	2301      	movne	r3, #1
 8016774:	2300      	moveq	r3, #0
 8016776:	b2db      	uxtb	r3, r3
 8016778:	2b00      	cmp	r3, #0
 801677a:	d031      	beq.n	80167e0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	339c      	adds	r3, #156	; 0x9c
 8016782:	681c      	ldr	r4, [r3, #0]
 8016784:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016788:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801678c:	4618      	mov	r0, r3
 801678e:	f7f8 fdfe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016792:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8016796:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801679a:	9303      	str	r3, [sp, #12]
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	9302      	str	r3, [sp, #8]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	9301      	str	r3, [sp, #4]
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	9300      	str	r3, [sp, #0]
 80167a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80167ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80167b0:	68f9      	ldr	r1, [r7, #12]
 80167b2:	f7fb fd35 	bl	8012220 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80167b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80167ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80167be:	4619      	mov	r1, r3
 80167c0:	68f8      	ldr	r0, [r7, #12]
 80167c2:	47a0      	blx	r4
 80167c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7fb fe9f 	bl	801250c <_ZN18BinaryEqualFailureD1Ev>
 80167ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7f9 f993 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80167d8:	e002      	b.n	80167e0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80167da:	bf00      	nop
 80167dc:	e000      	b.n	80167e0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80167de:	bf00      	nop
}
 80167e0:	378c      	adds	r7, #140	; 0x8c
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd90      	pop	{r4, r7, pc}

080167e6 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80167e6:	b590      	push	{r4, r7, lr}
 80167e8:	b09b      	sub	sp, #108	; 0x6c
 80167ea:	af06      	add	r7, sp, #24
 80167ec:	60f8      	str	r0, [r7, #12]
 80167ee:	60b9      	str	r1, [r7, #8]
 80167f0:	607a      	str	r2, [r7, #4]
 80167f2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80167f4:	68f8      	ldr	r0, [r7, #12]
 80167f6:	f000 f993 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 80167fa:	4603      	mov	r3, r0
 80167fc:	681a      	ldr	r2, [r3, #0]
 80167fe:	3228      	adds	r2, #40	; 0x28
 8016800:	6812      	ldr	r2, [r2, #0]
 8016802:	4618      	mov	r0, r3
 8016804:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8016806:	68ba      	ldr	r2, [r7, #8]
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	405a      	eors	r2, r3
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	4013      	ands	r3, r2
 8016810:	2b00      	cmp	r3, #0
 8016812:	d02b      	beq.n	801686c <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	339c      	adds	r3, #156	; 0x9c
 801681a:	681c      	ldr	r4, [r3, #0]
 801681c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016820:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016822:	4618      	mov	r0, r3
 8016824:	f7f8 fdb3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016828:	f107 0014 	add.w	r0, r7, #20
 801682c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016830:	9304      	str	r3, [sp, #16]
 8016832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016834:	9303      	str	r3, [sp, #12]
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	9302      	str	r3, [sp, #8]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	9301      	str	r3, [sp, #4]
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	9300      	str	r3, [sp, #0]
 8016842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016844:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016846:	68f9      	ldr	r1, [r7, #12]
 8016848:	f7fb fd7a 	bl	8012340 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 801684c:	f107 0314 	add.w	r3, r7, #20
 8016850:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016852:	4619      	mov	r1, r3
 8016854:	68f8      	ldr	r0, [r7, #12]
 8016856:	47a0      	blx	r4
 8016858:	f107 0314 	add.w	r3, r7, #20
 801685c:	4618      	mov	r0, r3
 801685e:	f7fb fe33 	bl	80124c8 <_ZN16BitsEqualFailureD1Ev>
 8016862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016866:	4618      	mov	r0, r3
 8016868:	f7f9 f949 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801686c:	bf00      	nop
 801686e:	3754      	adds	r7, #84	; 0x54
 8016870:	46bd      	mov	sp, r7
 8016872:	bd90      	pop	{r4, r7, pc}

08016874 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8016874:	b590      	push	{r4, r7, lr}
 8016876:	b09d      	sub	sp, #116	; 0x74
 8016878:	af04      	add	r7, sp, #16
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	607a      	str	r2, [r7, #4]
 801687e:	603b      	str	r3, [r7, #0]
 8016880:	460b      	mov	r3, r1
 8016882:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8016884:	68f8      	ldr	r0, [r7, #12]
 8016886:	f000 f94b 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 801688a:	4603      	mov	r3, r0
 801688c:	681a      	ldr	r2, [r3, #0]
 801688e:	3228      	adds	r2, #40	; 0x28
 8016890:	6812      	ldr	r2, [r2, #0]
 8016892:	4618      	mov	r0, r3
 8016894:	4790      	blx	r2
    if (failed)
 8016896:	7afb      	ldrb	r3, [r7, #11]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d03f      	beq.n	801691c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	339c      	adds	r3, #156	; 0x9c
 80168a2:	681c      	ldr	r4, [r3, #0]
 80168a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168a8:	6879      	ldr	r1, [r7, #4]
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7f8 fd6f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80168b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80168b4:	6839      	ldr	r1, [r7, #0]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7f8 fd69 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80168bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80168c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7f8 fd63 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80168c8:	f107 0014 	add.w	r0, r7, #20
 80168cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80168d0:	9302      	str	r3, [sp, #8]
 80168d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80168d6:	9301      	str	r3, [sp, #4]
 80168d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80168dc:	9300      	str	r3, [sp, #0]
 80168de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80168e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80168e2:	68f9      	ldr	r1, [r7, #12]
 80168e4:	f7fa ff30 	bl	8011748 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80168e8:	f107 0314 	add.w	r3, r7, #20
 80168ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80168ee:	4619      	mov	r1, r3
 80168f0:	68f8      	ldr	r0, [r7, #12]
 80168f2:	47a0      	blx	r4
 80168f4:	f107 0314 	add.w	r3, r7, #20
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7fb ff39 	bl	8012770 <_ZN17CheckEqualFailureD1Ev>
 80168fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016902:	4618      	mov	r0, r3
 8016904:	f7f9 f8fb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016908:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801690c:	4618      	mov	r0, r3
 801690e:	f7f9 f8f6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8016912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016916:	4618      	mov	r0, r3
 8016918:	f7f9 f8f1 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801691c:	bf00      	nop
 801691e:	3764      	adds	r7, #100	; 0x64
 8016920:	46bd      	mov	sp, r7
 8016922:	bd90      	pop	{r4, r7, pc}

08016924 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8016924:	b590      	push	{r4, r7, lr}
 8016926:	b09d      	sub	sp, #116	; 0x74
 8016928:	af04      	add	r7, sp, #16
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	607a      	str	r2, [r7, #4]
 801692e:	603b      	str	r3, [r7, #0]
 8016930:	460b      	mov	r3, r1
 8016932:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f000 f8f3 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 801693a:	4603      	mov	r3, r0
 801693c:	681a      	ldr	r2, [r3, #0]
 801693e:	3228      	adds	r2, #40	; 0x28
 8016940:	6812      	ldr	r2, [r2, #0]
 8016942:	4618      	mov	r0, r3
 8016944:	4790      	blx	r2
    if (!comparison)
 8016946:	7afb      	ldrb	r3, [r7, #11]
 8016948:	f083 0301 	eor.w	r3, r3, #1
 801694c:	b2db      	uxtb	r3, r3
 801694e:	2b00      	cmp	r3, #0
 8016950:	d03f      	beq.n	80169d2 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	339c      	adds	r3, #156	; 0x9c
 8016958:	681c      	ldr	r4, [r3, #0]
 801695a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801695e:	6879      	ldr	r1, [r7, #4]
 8016960:	4618      	mov	r0, r3
 8016962:	f7f8 fd14 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016966:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801696a:	6839      	ldr	r1, [r7, #0]
 801696c:	4618      	mov	r0, r3
 801696e:	f7f8 fd0e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8016972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016976:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016978:	4618      	mov	r0, r3
 801697a:	f7f8 fd08 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801697e:	f107 0014 	add.w	r0, r7, #20
 8016982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016986:	9302      	str	r3, [sp, #8]
 8016988:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801698c:	9301      	str	r3, [sp, #4]
 801698e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016992:	9300      	str	r3, [sp, #0]
 8016994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016996:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016998:	68f9      	ldr	r1, [r7, #12]
 801699a:	f7fa ff83 	bl	80118a4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801699e:	f107 0314 	add.w	r3, r7, #20
 80169a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80169a4:	4619      	mov	r1, r3
 80169a6:	68f8      	ldr	r0, [r7, #12]
 80169a8:	47a0      	blx	r4
 80169aa:	f107 0314 	add.w	r3, r7, #20
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7fb febc 	bl	801272c <_ZN17ComparisonFailureD1Ev>
 80169b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80169b8:	4618      	mov	r0, r3
 80169ba:	f7f9 f8a0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80169be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7f9 f89b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80169c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7f9 f896 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 80169d2:	bf00      	nop
 80169d4:	3764      	adds	r7, #100	; 0x64
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd90      	pop	{r4, r7, pc}
	...

080169dc <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80169dc:	b5b0      	push	{r4, r5, r7, lr}
 80169de:	b088      	sub	sp, #32
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
 80169e8:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80169ea:	f107 0310 	add.w	r3, r7, #16
 80169ee:	4924      	ldr	r1, [pc, #144]	; (8016a80 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7f8 fccc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80169f6:	f107 0310 	add.w	r3, r7, #16
 80169fa:	6879      	ldr	r1, [r7, #4]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7f9 f90d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8016a02:	f107 0310 	add.w	r3, r7, #16
 8016a06:	491f      	ldr	r1, [pc, #124]	; (8016a84 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7f9 f907 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8016a0e:	f107 0318 	add.w	r3, r7, #24
 8016a12:	6839      	ldr	r1, [r7, #0]
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7f9 fda1 	bl	801055c <_Z10StringFromj>
 8016a1a:	f107 0218 	add.w	r2, r7, #24
 8016a1e:	f107 0310 	add.w	r3, r7, #16
 8016a22:	4611      	mov	r1, r2
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f9 f8e7 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 8016a2a:	f107 0318 	add.w	r3, r7, #24
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7f9 f865 	bl	800fafe <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8016a34:	f107 0310 	add.w	r3, r7, #16
 8016a38:	4913      	ldr	r1, [pc, #76]	; (8016a88 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7f9 f8ee 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8016a40:	f107 0310 	add.w	r3, r7, #16
 8016a44:	68b9      	ldr	r1, [r7, #8]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f7f9 f8e8 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8016a4c:	68f8      	ldr	r0, [r7, #12]
 8016a4e:	f000 f867 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016a52:	4604      	mov	r4, r0
 8016a54:	6823      	ldr	r3, [r4, #0]
 8016a56:	3338      	adds	r3, #56	; 0x38
 8016a58:	681d      	ldr	r5, [r3, #0]
 8016a5a:	f107 0310 	add.w	r3, r7, #16
 8016a5e:	4618      	mov	r0, r3
 8016a60:	f7f9 f820 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8016a64:	4603      	mov	r3, r0
 8016a66:	4619      	mov	r1, r3
 8016a68:	4620      	mov	r0, r4
 8016a6a:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8016a6c:	f107 0310 	add.w	r3, r7, #16
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7f9 f844 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8016a76:	bf00      	nop
 8016a78:	3720      	adds	r7, #32
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	080281f8 	.word	0x080281f8
 8016a84:	080281fc 	.word	0x080281fc
 8016a88:	08028200 	.word	0x08028200

08016a8c <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8016a8c:	b590      	push	{r4, r7, lr}
 8016a8e:	b085      	sub	sp, #20
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	60b9      	str	r1, [r7, #8]
 8016a96:	607a      	str	r2, [r7, #4]
 8016a98:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	3370      	adds	r3, #112	; 0x70
 8016aa0:	681c      	ldr	r4, [r3, #0]
 8016aa2:	68b8      	ldr	r0, [r7, #8]
 8016aa4:	f7f8 fffe 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8016aa8:	4601      	mov	r1, r0
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	68f8      	ldr	r0, [r7, #12]
 8016ab0:	47a0      	blx	r4
}
 8016ab2:	bf00      	nop
 8016ab4:	3714      	adds	r7, #20
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd90      	pop	{r4, r7, pc}

08016aba <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b082      	sub	sp, #8
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
 8016ac2:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f000 f82b 	bl	8016b20 <_ZN10UtestShell13getTestResultEv>
 8016aca:	4603      	mov	r3, r0
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	323c      	adds	r2, #60	; 0x3c
 8016ad0:	6812      	ldr	r2, [r2, #0]
 8016ad2:	6839      	ldr	r1, [r7, #0]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	4790      	blx	r2
}
 8016ad8:	bf00      	nop
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
 8016ae8:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8016aea:	4a04      	ldr	r2, [pc, #16]	; (8016afc <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	6013      	str	r3, [r2, #0]
}
 8016af0:	bf00      	nop
 8016af2:	370c      	adds	r7, #12
 8016af4:	46bd      	mov	sp, r7
 8016af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afa:	4770      	bx	lr
 8016afc:	20000c54 	.word	0x20000c54

08016b00 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8016b00:	b480      	push	{r7}
 8016b02:	b083      	sub	sp, #12
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8016b0a:	4a04      	ldr	r2, [pc, #16]	; (8016b1c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	6013      	str	r3, [r2, #0]
}
 8016b10:	bf00      	nop
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr
 8016b1c:	20000c58 	.word	0x20000c58

08016b20 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8016b28:	4b09      	ldr	r3, [pc, #36]	; (8016b50 <_ZN10UtestShell13getTestResultEv+0x30>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d109      	bne.n	8016b44 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8016b30:	f7fe fbb2 	bl	8015298 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8016b34:	4603      	mov	r3, r0
 8016b36:	681a      	ldr	r2, [r3, #0]
 8016b38:	32a4      	adds	r2, #164	; 0xa4
 8016b3a:	6812      	ldr	r2, [r2, #0]
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	4790      	blx	r2
 8016b40:	4603      	mov	r3, r0
 8016b42:	e001      	b.n	8016b48 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8016b44:	4b02      	ldr	r3, [pc, #8]	; (8016b50 <_ZN10UtestShell13getTestResultEv+0x30>)
 8016b46:	681b      	ldr	r3, [r3, #0]
}
 8016b48:	4618      	mov	r0, r3
 8016b4a:	3708      	adds	r7, #8
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	20000c54 	.word	0x20000c54

08016b54 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8016b58:	4b05      	ldr	r3, [pc, #20]	; (8016b70 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d103      	bne.n	8016b68 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8016b60:	f7fe fb9a 	bl	8015298 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8016b64:	4603      	mov	r3, r0
 8016b66:	e001      	b.n	8016b6c <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8016b68:	4b01      	ldr	r3, [pc, #4]	; (8016b70 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	bd80      	pop	{r7, pc}
 8016b70:	20000c58 	.word	0x20000c58

08016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8016b74:	b480      	push	{r7}
 8016b76:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8016b78:	4b03      	ldr	r3, [pc, #12]	; (8016b88 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b84:	4770      	bx	lr
 8016b86:	bf00      	nop
 8016b88:	20000094 	.word	0x20000094

08016b8c <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8016b8c:	b480      	push	{r7}
 8016b8e:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8016b90:	4b03      	ldr	r3, [pc, #12]	; (8016ba0 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8016b92:	4a04      	ldr	r2, [pc, #16]	; (8016ba4 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8016b94:	601a      	str	r2, [r3, #0]
}
 8016b96:	bf00      	nop
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr
 8016ba0:	20000094 	.word	0x20000094
 8016ba4:	20000090 	.word	0x20000090

08016ba8 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8016ba8:	b480      	push	{r7}
 8016baa:	b083      	sub	sp, #12
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	4a04      	ldr	r2, [pc, #16]	; (8016bc4 <_ZN5UtestC1Ev+0x1c>)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	601a      	str	r2, [r3, #0]
{
}
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	370c      	adds	r7, #12
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr
 8016bc4:	0802c088 	.word	0x0802c088

08016bc8 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8016bc8:	b480      	push	{r7}
 8016bca:	b083      	sub	sp, #12
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
 8016bd0:	4a04      	ldr	r2, [pc, #16]	; (8016be4 <_ZN5UtestD1Ev+0x1c>)
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	601a      	str	r2, [r3, #0]
{
}
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	4618      	mov	r0, r3
 8016bda:	370c      	adds	r7, #12
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr
 8016be4:	0802c088 	.word	0x0802c088

08016be8 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
}
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f7ff ffe9 	bl	8016bc8 <_ZN5UtestD1Ev>
 8016bf6:	2104      	movs	r1, #4
 8016bf8:	6878      	ldr	r0, [r7, #4]
 8016bfa:	f7f6 f819 	bl	800cc30 <_ZdlPvj>
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	4618      	mov	r0, r3
 8016c02:	3708      	adds	r7, #8
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b082      	sub	sp, #8
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8016c10:	4b0d      	ldr	r3, [pc, #52]	; (8016c48 <_ZN5Utest3runEv+0x40>)
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	6879      	ldr	r1, [r7, #4]
 8016c16:	480d      	ldr	r0, [pc, #52]	; (8016c4c <_ZN5Utest3runEv+0x44>)
 8016c18:	4798      	blx	r3
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	bf14      	ite	ne
 8016c20:	2301      	movne	r3, #1
 8016c22:	2300      	moveq	r3, #0
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d004      	beq.n	8016c34 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8016c2a:	4b07      	ldr	r3, [pc, #28]	; (8016c48 <_ZN5Utest3runEv+0x40>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	6879      	ldr	r1, [r7, #4]
 8016c30:	4807      	ldr	r0, [pc, #28]	; (8016c50 <_ZN5Utest3runEv+0x48>)
 8016c32:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8016c34:	4b04      	ldr	r3, [pc, #16]	; (8016c48 <_ZN5Utest3runEv+0x40>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	6879      	ldr	r1, [r7, #4]
 8016c3a:	4806      	ldr	r0, [pc, #24]	; (8016c54 <_ZN5Utest3runEv+0x4c>)
 8016c3c:	4798      	blx	r3
}
 8016c3e:	bf00      	nop
 8016c40:	3708      	adds	r7, #8
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	200000a4 	.word	0x200000a4
 8016c4c:	080152f5 	.word	0x080152f5
 8016c50:	08015311 	.word	0x08015311
 8016c54:	0801532d 	.word	0x0801532d

08016c58 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
}
 8016c60:	bf00      	nop
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
}
 8016c74:	bf00      	nop
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr

08016c80 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8016c80:	b480      	push	{r7}
 8016c82:	b083      	sub	sp, #12
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
}
 8016c88:	bf00      	nop
 8016c8a:	370c      	adds	r7, #12
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c92:	4770      	bx	lr

08016c94 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8016c94:	b480      	push	{r7}
 8016c96:	b083      	sub	sp, #12
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	4a04      	ldr	r2, [pc, #16]	; (8016cb0 <_ZN14TestTerminatorD1Ev+0x1c>)
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	601a      	str	r2, [r3, #0]
{
}
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	370c      	adds	r7, #12
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cae:	4770      	bx	lr
 8016cb0:	0802c074 	.word	0x0802c074

08016cb4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
 8016cc0:	f107 030c 	add.w	r3, r7, #12
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7f6 f975 	bl	800cfb4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8016cca:	f107 030c 	add.w	r3, r7, #12
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f000 f82c 	bl	8016d2c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8016cd4:	f107 030c 	add.w	r3, r7, #12
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f000 f835 	bl	8016d48 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8016cde:	bf00      	nop
 8016ce0:	3710      	adds	r7, #16
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
	...

08016ce8 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	4a05      	ldr	r2, [pc, #20]	; (8016d08 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	601a      	str	r2, [r3, #0]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f7ff ffcb 	bl	8016c94 <_ZN14TestTerminatorD1Ev>
{
}
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	4618      	mov	r0, r3
 8016d02:	3708      	adds	r7, #8
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	0802c060 	.word	0x0802c060

08016d0c <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
}
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f7ff ffe7 	bl	8016ce8 <_ZN20NormalTestTerminatorD1Ev>
 8016d1a:	2104      	movs	r1, #4
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f7f5 ff87 	bl	800cc30 <_ZdlPvj>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	4618      	mov	r0, r3
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8016d34:	4b03      	ldr	r3, [pc, #12]	; (8016d44 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8016d3a:	bf00      	nop
 8016d3c:	3708      	adds	r7, #8
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bd80      	pop	{r7, pc}
 8016d42:	bf00      	nop
 8016d44:	200000a0 	.word	0x200000a0

08016d48 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b082      	sub	sp, #8
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
 8016d50:	4a05      	ldr	r2, [pc, #20]	; (8016d68 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7ff ff9b 	bl	8016c94 <_ZN14TestTerminatorD1Ev>
{
}
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	4618      	mov	r0, r3
 8016d62:	3708      	adds	r7, #8
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}
 8016d68:	0802c04c 	.word	0x0802c04c

08016d6c <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
}
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f7ff ffe7 	bl	8016d48 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8016d7a:	2104      	movs	r1, #4
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7f5 ff57 	bl	800cc30 <_ZdlPvj>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	4618      	mov	r0, r3
 8016d86:	3708      	adds	r7, #8
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8016d94:	f7fe fbaa 	bl	80154ec <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7ff ff8a 	bl	8016cb4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8016da0:	bf00      	nop
 8016da2:	3708      	adds	r7, #8
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
 8016db0:	4a05      	ldr	r2, [pc, #20]	; (8016dc8 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	601a      	str	r2, [r3, #0]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7ff ff95 	bl	8016ce8 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	3708      	adds	r7, #8
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	0802c038 	.word	0x0802c038

08016dcc <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
}
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	f7ff ffe7 	bl	8016da8 <_ZN22CrashingTestTerminatorD1Ev>
 8016dda:	2104      	movs	r1, #4
 8016ddc:	6878      	ldr	r0, [r7, #4]
 8016dde:	f7f5 ff27 	bl	800cc30 <_ZdlPvj>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	4618      	mov	r0, r3
 8016de6:	3708      	adds	r7, #8
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2200      	movs	r2, #0
 8016dfa:	601a      	str	r2, [r3, #0]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8016e02:	683b      	ldr	r3, [r7, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d007      	beq.n	8016e18 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	3310      	adds	r3, #16
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	6838      	ldr	r0, [r7, #0]
 8016e12:	4798      	blx	r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	e000      	b.n	8016e1a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8016e18:	2300      	movs	r3, #0
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d02d      	beq.n	8016e82 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d201      	bcs.n	8016e36 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	e001      	b.n	8016e3a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8016e36:	f04f 33ff 	mov.w	r3, #4294967295
 8016e3a:	f240 3237 	movw	r2, #823	; 0x337
 8016e3e:	4914      	ldr	r1, [pc, #80]	; (8016e90 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7f5 ff05 	bl	800cc50 <_ZnajPKci>
 8016e46:	4602      	mov	r2, r0
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016e50:	2300      	movs	r3, #0
 8016e52:	60bb      	str	r3, [r7, #8]
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	68ba      	ldr	r2, [r7, #8]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d212      	bcs.n	8016e84 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	009b      	lsls	r3, r3, #2
 8016e66:	4413      	add	r3, r2
 8016e68:	68fa      	ldr	r2, [r7, #12]
 8016e6a:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	330c      	adds	r3, #12
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	4798      	blx	r3
 8016e78:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	60bb      	str	r3, [r7, #8]
 8016e80:	e7e8      	b.n	8016e54 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8016e82:	bf00      	nop
    }
}
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	4618      	mov	r0, r3
 8016e88:	3710      	adds	r7, #16
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	08028088 	.word	0x08028088

08016e94 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d004      	beq.n	8016eae <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f5 fee5 	bl	800cc78 <_ZdaPv>
}
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3708      	adds	r7, #8
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8016eb8:	b480      	push	{r7}
 8016eba:	b087      	sub	sp, #28
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	009b      	lsls	r3, r3, #2
 8016ecc:	4413      	add	r3, r2
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	681a      	ldr	r2, [r3, #0]
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	009b      	lsls	r3, r3, #2
 8016eda:	4413      	add	r3, r2
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	681a      	ldr	r2, [r3, #0]
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	4413      	add	r3, r2
 8016eea:	697a      	ldr	r2, [r7, #20]
 8016eec:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	681a      	ldr	r2, [r3, #0]
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	009b      	lsls	r3, r3, #2
 8016ef6:	4413      	add	r3, r2
 8016ef8:	693a      	ldr	r2, [r7, #16]
 8016efa:	601a      	str	r2, [r3, #0]
}
 8016efc:	bf00      	nop
 8016efe:	371c      	adds	r7, #28
 8016f00:	46bd      	mov	sp, r7
 8016f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f06:	4770      	bx	lr

08016f08 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b084      	sub	sp, #16
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
 8016f10:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d028      	beq.n	8016f6c <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8016f1a:	4b17      	ldr	r3, [pc, #92]	; (8016f78 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	6838      	ldr	r0, [r7, #0]
 8016f20:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	3b01      	subs	r3, #1
 8016f28:	60fb      	str	r3, [r7, #12]
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d019      	beq.n	8016f64 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d01b      	beq.n	8016f70 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8016f38:	4b10      	ldr	r3, [pc, #64]	; (8016f7c <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	4798      	blx	r3
 8016f3e:	4603      	mov	r3, r0
 8016f40:	461a      	mov	r2, r3
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	3301      	adds	r3, #1
 8016f46:	fbb2 f1f3 	udiv	r1, r2, r3
 8016f4a:	fb03 f301 	mul.w	r3, r3, r1
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8016f52:	68ba      	ldr	r2, [r7, #8]
 8016f54:	68f9      	ldr	r1, [r7, #12]
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f7ff ffae 	bl	8016eb8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	3b01      	subs	r3, #1
 8016f60:	60fb      	str	r3, [r7, #12]
 8016f62:	e7e2      	b.n	8016f2a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f000 f834 	bl	8016fd2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8016f6a:	e002      	b.n	8016f72 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8016f6c:	bf00      	nop
 8016f6e:	e000      	b.n	8016f72 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8016f70:	bf00      	nop
}
 8016f72:	3710      	adds	r7, #16
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	200000e0 	.word	0x200000e0
 8016f7c:	200000e4 	.word	0x200000e4

08016f80 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b086      	sub	sp, #24
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d01c      	beq.n	8016fca <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	085b      	lsrs	r3, r3, #1
 8016f96:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8016f98:	2300      	movs	r3, #0
 8016f9a:	617b      	str	r3, [r7, #20]
 8016f9c:	697a      	ldr	r2, [r7, #20]
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d20e      	bcs.n	8016fc2 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	685a      	ldr	r2, [r3, #4]
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	1ad3      	subs	r3, r2, r3
 8016fac:	3b01      	subs	r3, #1
 8016fae:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8016fb0:	68fa      	ldr	r2, [r7, #12]
 8016fb2:	6979      	ldr	r1, [r7, #20]
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7ff ff7f 	bl	8016eb8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	3301      	adds	r3, #1
 8016fbe:	617b      	str	r3, [r7, #20]
 8016fc0:	e7ec      	b.n	8016f9c <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 f805 	bl	8016fd2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8016fc8:	e000      	b.n	8016fcc <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8016fca:	bf00      	nop
}
 8016fcc:	3718      	adds	r7, #24
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}

08016fd2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8016fd2:	b580      	push	{r7, lr}
 8016fd4:	b084      	sub	sp, #16
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016fde:	2300      	movs	r3, #0
 8016fe0:	60bb      	str	r3, [r7, #8]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	68ba      	ldr	r2, [r7, #8]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d221      	bcs.n	8017030 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	6859      	ldr	r1, [r3, #4]
 8016ff4:	68bb      	ldr	r3, [r7, #8]
 8016ff6:	1acb      	subs	r3, r1, r3
 8016ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016ffc:	3b01      	subs	r3, #1
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	4413      	add	r3, r2
 8017002:	6818      	ldr	r0, [r3, #0]
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681a      	ldr	r2, [r3, #0]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6859      	ldr	r1, [r3, #4]
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	1acb      	subs	r3, r1, r3
 8017010:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8017014:	3b01      	subs	r3, #1
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	4413      	add	r3, r2
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	3308      	adds	r3, #8
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	68f9      	ldr	r1, [r7, #12]
 8017024:	4798      	blx	r3
 8017026:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	3301      	adds	r3, #1
 801702c:	60bb      	str	r3, [r7, #8]
 801702e:	e7d8      	b.n	8016fe2 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8017030:	bf00      	nop
 8017032:	3710      	adds	r7, #16
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	6078      	str	r0, [r7, #4]
    return get(0);
 8017040:	2100      	movs	r1, #0
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f000 f805 	bl	8017052 <_ZNK22UtestShellPointerArray3getEj>
 8017048:	4603      	mov	r3, r0
}
 801704a:	4618      	mov	r0, r3
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}

08017052 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8017052:	b480      	push	{r7}
 8017054:	b083      	sub	sp, #12
 8017056:	af00      	add	r7, sp, #0
 8017058:	6078      	str	r0, [r7, #4]
 801705a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	683a      	ldr	r2, [r7, #0]
 8017062:	429a      	cmp	r2, r3
 8017064:	d301      	bcc.n	801706a <_ZNK22UtestShellPointerArray3getEj+0x18>
 8017066:	2300      	movs	r3, #0
 8017068:	e005      	b.n	8017076 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681a      	ldr	r2, [r3, #0]
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	009b      	lsls	r3, r3, #2
 8017072:	4413      	add	r3, r2
 8017074:	681b      	ldr	r3, [r3, #0]
}
 8017076:	4618      	mov	r0, r3
 8017078:	370c      	adds	r7, #12
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr
	...

08017084 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8017084:	b580      	push	{r7, lr}
 8017086:	b084      	sub	sp, #16
 8017088:	af00      	add	r7, sp, #0
 801708a:	60f8      	str	r0, [r7, #12]
 801708c:	60b9      	str	r1, [r7, #8]
 801708e:	607a      	str	r2, [r7, #4]
 8017090:	603b      	str	r3, [r7, #0]
 8017092:	4a10      	ldr	r2, [pc, #64]	; (80170d4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8017098:	6879      	ldr	r1, [r7, #4]
 801709a:	68b8      	ldr	r0, [r7, #8]
 801709c:	f7fe fc27 	bl	80158ee <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80170a0:	6839      	ldr	r1, [r7, #0]
 80170a2:	68b8      	ldr	r0, [r7, #8]
 80170a4:	f7fe fc31 	bl	801590a <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80170a8:	69b9      	ldr	r1, [r7, #24]
 80170aa:	68b8      	ldr	r0, [r7, #8]
 80170ac:	f7fe fc03 	bl	80158b6 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80170b0:	69f9      	ldr	r1, [r7, #28]
 80170b2:	68b8      	ldr	r0, [r7, #8]
 80170b4:	f7fe fc0d 	bl	80158d2 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80170b8:	f7fd fc20 	bl	80148fc <_ZN12TestRegistry18getCurrentRegistryEv>
 80170bc:	4603      	mov	r3, r0
 80170be:	681a      	ldr	r2, [r3, #0]
 80170c0:	3208      	adds	r2, #8
 80170c2:	6812      	ldr	r2, [r2, #0]
 80170c4:	68b9      	ldr	r1, [r7, #8]
 80170c6:	4618      	mov	r0, r3
 80170c8:	4790      	blx	r2
}
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	4618      	mov	r0, r3
 80170ce:	3710      	adds	r7, #16
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}
 80170d4:	0802bf7c 	.word	0x0802bf7c

080170d8 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80170d8:	b480      	push	{r7}
 80170da:	b083      	sub	sp, #12
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	4a04      	ldr	r2, [pc, #16]	; (80170f4 <_ZN13TestInstallerD1Ev+0x1c>)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	601a      	str	r2, [r3, #0]
{
}
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	4618      	mov	r0, r3
 80170ea:	370c      	adds	r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr
 80170f4:	0802bf7c 	.word	0x0802bf7c

080170f8 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
}
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f7ff ffe9 	bl	80170d8 <_ZN13TestInstallerD1Ev>
 8017106:	2104      	movs	r1, #4
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f7f5 fd91 	bl	800cc30 <_ZdlPvj>
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	4618      	mov	r0, r3
 8017112:	3708      	adds	r7, #8
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}

08017118 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
 8017120:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d10a      	bne.n	801713e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8017128:	683b      	ldr	r3, [r7, #0]
 801712a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801712e:	4293      	cmp	r3, r2
 8017130:	d105      	bne.n	801713e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8017132:	4805      	ldr	r0, [pc, #20]	; (8017148 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8017134:	f7ff fe38 	bl	8016da8 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8017138:	4804      	ldr	r0, [pc, #16]	; (801714c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801713a:	f7ff fdd5 	bl	8016ce8 <_ZN20NormalTestTerminatorD1Ev>
}
 801713e:	bf00      	nop
 8017140:	3708      	adds	r7, #8
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	20000090 	.word	0x20000090
 801714c:	2000008c 	.word	0x2000008c

08017150 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8017150:	b580      	push	{r7, lr}
 8017152:	af00      	add	r7, sp, #0
 8017154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017158:	2001      	movs	r0, #1
 801715a:	f7ff ffdd 	bl	8017118 <_Z41__static_initialization_and_destruction_0ii>
 801715e:	bd80      	pop	{r7, pc}

08017160 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8017160:	b580      	push	{r7, lr}
 8017162:	af00      	add	r7, sp, #0
 8017164:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017168:	2000      	movs	r0, #0
 801716a:	f7ff ffd5 	bl	8017118 <_Z41__static_initialization_and_destruction_0ii>
 801716e:	bd80      	pop	{r7, pc}

08017170 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8017170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017172:	b083      	sub	sp, #12
 8017174:	af00      	add	r7, sp, #0
 8017176:	ed87 0b00 	vstr	d0, [r7]
 801717a:	683c      	ldr	r4, [r7, #0]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8017182:	2301      	movs	r3, #1
 8017184:	461e      	mov	r6, r3
 8017186:	f04f 32ff 	mov.w	r2, #4294967295
 801718a:	4b10      	ldr	r3, [pc, #64]	; (80171cc <_ZSt5isinfd+0x5c>)
 801718c:	4620      	mov	r0, r4
 801718e:	4629      	mov	r1, r5
 8017190:	f7e9 fafa 	bl	8000788 <__aeabi_dcmpun>
 8017194:	4603      	mov	r3, r0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d10b      	bne.n	80171b2 <_ZSt5isinfd+0x42>
 801719a:	f04f 32ff 	mov.w	r2, #4294967295
 801719e:	4b0b      	ldr	r3, [pc, #44]	; (80171cc <_ZSt5isinfd+0x5c>)
 80171a0:	4620      	mov	r0, r4
 80171a2:	4629      	mov	r1, r5
 80171a4:	f7e9 fad2 	bl	800074c <__aeabi_dcmple>
 80171a8:	4603      	mov	r3, r0
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d101      	bne.n	80171b2 <_ZSt5isinfd+0x42>
 80171ae:	2300      	movs	r3, #0
 80171b0:	461e      	mov	r6, r3
 80171b2:	b2f3      	uxtb	r3, r6
 80171b4:	f083 0301 	eor.w	r3, r3, #1
 80171b8:	b2db      	uxtb	r3, r3
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	bf14      	ite	ne
 80171be:	2301      	movne	r3, #1
 80171c0:	2300      	moveq	r3, #0
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	4618      	mov	r0, r3
 80171c6:	370c      	adds	r7, #12
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171cc:	7fefffff 	.word	0x7fefffff

080171d0 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80171d0:	b590      	push	{r4, r7, lr}
 80171d2:	b083      	sub	sp, #12
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	ed87 0b00 	vstr	d0, [r7]
 80171da:	2301      	movs	r3, #1
 80171dc:	461c      	mov	r4, r3
 80171de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80171e6:	f7e9 facf 	bl	8000788 <__aeabi_dcmpun>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d101      	bne.n	80171f4 <_ZSt5isnand+0x24>
 80171f0:	2300      	movs	r3, #0
 80171f2:	461c      	mov	r4, r3
 80171f4:	b2e3      	uxtb	r3, r4
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	bf14      	ite	ne
 80171fa:	2301      	movne	r3, #1
 80171fc:	2300      	moveq	r3, #0
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	4618      	mov	r0, r3
 8017202:	370c      	adds	r7, #12
 8017204:	46bd      	mov	sp, r7
 8017206:	bd90      	pop	{r4, r7, pc}

08017208 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8017208:	b590      	push	{r4, r7, lr}
 801720a:	b095      	sub	sp, #84	; 0x54
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	60b9      	str	r1, [r7, #8]
 8017212:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	3334      	adds	r3, #52	; 0x34
 801721a:	681c      	ldr	r4, [r3, #0]
 801721c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017220:	490f      	ldr	r1, [pc, #60]	; (8017260 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8017222:	4618      	mov	r0, r3
 8017224:	f7f8 f8b3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017228:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801722c:	f107 0314 	add.w	r3, r7, #20
 8017230:	68f9      	ldr	r1, [r7, #12]
 8017232:	4618      	mov	r0, r3
 8017234:	f7f9 ff0a 	bl	801104c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8017238:	f107 0314 	add.w	r3, r7, #20
 801723c:	4619      	mov	r1, r3
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	47a0      	blx	r4
 8017242:	f107 0314 	add.w	r3, r7, #20
 8017246:	4618      	mov	r0, r3
 8017248:	f7f9 ffc0 	bl	80111cc <_ZN11TestFailureD1Ev>
 801724c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017250:	4618      	mov	r0, r3
 8017252:	f7f8 fc54 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8017256:	bf00      	nop
 8017258:	3754      	adds	r7, #84	; 0x54
 801725a:	46bd      	mov	sp, r7
 801725c:	bd90      	pop	{r4, r7, pc}
 801725e:	bf00      	nop
 8017260:	08028210 	.word	0x08028210

08017264 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8017264:	b480      	push	{r7}
 8017266:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8017268:	2301      	movs	r3, #1
}
 801726a:	4618      	mov	r0, r3
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr

08017274 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b082      	sub	sp, #8
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
 801727c:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 801727e:	4b13      	ldr	r3, [pc, #76]	; (80172cc <PlatformSpecificSetJmpImplementation+0x58>)
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	225c      	movs	r2, #92	; 0x5c
 8017284:	fb02 f303 	mul.w	r3, r2, r3
 8017288:	4a11      	ldr	r2, [pc, #68]	; (80172d0 <PlatformSpecificSetJmpImplementation+0x5c>)
 801728a:	4413      	add	r3, r2
 801728c:	4618      	mov	r0, r3
 801728e:	f7e8 ffc7 	bl	8000220 <setjmp>
 8017292:	4603      	mov	r3, r0
 8017294:	2b00      	cmp	r3, #0
 8017296:	bf0c      	ite	eq
 8017298:	2301      	moveq	r3, #1
 801729a:	2300      	movne	r3, #0
 801729c:	b2db      	uxtb	r3, r3
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00e      	beq.n	80172c0 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80172a2:	4b0a      	ldr	r3, [pc, #40]	; (80172cc <PlatformSpecificSetJmpImplementation+0x58>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	3301      	adds	r3, #1
 80172a8:	4a08      	ldr	r2, [pc, #32]	; (80172cc <PlatformSpecificSetJmpImplementation+0x58>)
 80172aa:	6013      	str	r3, [r2, #0]
        function(data);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6838      	ldr	r0, [r7, #0]
 80172b0:	4798      	blx	r3
        jmp_buf_index--;
 80172b2:	4b06      	ldr	r3, [pc, #24]	; (80172cc <PlatformSpecificSetJmpImplementation+0x58>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	3b01      	subs	r3, #1
 80172b8:	4a04      	ldr	r2, [pc, #16]	; (80172cc <PlatformSpecificSetJmpImplementation+0x58>)
 80172ba:	6013      	str	r3, [r2, #0]
        return 1;
 80172bc:	2301      	movs	r3, #1
 80172be:	e000      	b.n	80172c2 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80172c0:	2300      	movs	r3, #0
}
 80172c2:	4618      	mov	r0, r3
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	bf00      	nop
 80172cc:	20000ff4 	.word	0x20000ff4
 80172d0:	20000c5c 	.word	0x20000c5c

080172d4 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80172d8:	4b07      	ldr	r3, [pc, #28]	; (80172f8 <PlatformSpecificLongJmpImplementation+0x24>)
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	3b01      	subs	r3, #1
 80172de:	4a06      	ldr	r2, [pc, #24]	; (80172f8 <PlatformSpecificLongJmpImplementation+0x24>)
 80172e0:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 80172e2:	4b05      	ldr	r3, [pc, #20]	; (80172f8 <PlatformSpecificLongJmpImplementation+0x24>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	225c      	movs	r2, #92	; 0x5c
 80172e8:	fb02 f303 	mul.w	r3, r2, r3
 80172ec:	4a03      	ldr	r2, [pc, #12]	; (80172fc <PlatformSpecificLongJmpImplementation+0x28>)
 80172ee:	4413      	add	r3, r2
 80172f0:	2101      	movs	r1, #1
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7e8 ff9a 	bl	800022c <longjmp>
 80172f8:	20000ff4 	.word	0x20000ff4
 80172fc:	20000c5c 	.word	0x20000c5c

08017300 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8017300:	b480      	push	{r7}
 8017302:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8017304:	2300      	movs	r3, #0
#endif
}
 8017306:	4618      	mov	r0, r3
 8017308:	46bd      	mov	sp, r7
 801730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730e:	4770      	bx	lr

08017310 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8017316:	2000      	movs	r0, #0
 8017318:	f00e ec4e 	blx	8025bb8 <__time_veneer>
 801731c:	4602      	mov	r2, r0
 801731e:	460b      	mov	r3, r1
 8017320:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8017324:	463b      	mov	r3, r7
 8017326:	4618      	mov	r0, r3
 8017328:	f00b fb7a 	bl	8022a20 <localtime>
 801732c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	4a04      	ldr	r2, [pc, #16]	; (8017344 <TimeStringImplementation+0x34>)
 8017332:	2150      	movs	r1, #80	; 0x50
 8017334:	4804      	ldr	r0, [pc, #16]	; (8017348 <TimeStringImplementation+0x38>)
 8017336:	f00c fc83 	bl	8023c40 <strftime>
    return dateTime;
 801733a:	4b03      	ldr	r3, [pc, #12]	; (8017348 <TimeStringImplementation+0x38>)
}
 801733c:	4618      	mov	r0, r3
 801733e:	3710      	adds	r7, #16
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}
 8017344:	0802824c 	.word	0x0802824c
 8017348:	20000ff8 	.word	0x20000ff8

0801734c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8017356:	6839      	ldr	r1, [r7, #0]
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f00b f997 	bl	802268c <fopen>
 801735e:	4603      	mov	r3, r0
#endif
}
 8017360:	4618      	mov	r0, r3
 8017362:	3708      	adds	r7, #8
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8017372:	6839      	ldr	r1, [r7, #0]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f00b f9f7 	bl	8022768 <fputs>
}
 801737a:	bf00      	nop
 801737c:	3708      	adds	r7, #8
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}

08017382 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8017382:	b580      	push	{r7, lr}
 8017384:	b082      	sub	sp, #8
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f00a ff78 	bl	8022280 <fclose>
}
 8017390:	bf00      	nop
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8017398:	b580      	push	{r7, lr}
 801739a:	af00      	add	r7, sp, #0
  fflush(stdout);
 801739c:	4b03      	ldr	r3, [pc, #12]	; (80173ac <PlatformSpecificFlushImplementation+0x14>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	689b      	ldr	r3, [r3, #8]
 80173a2:	4618      	mov	r0, r3
 80173a4:	f00b f836 	bl	8022414 <fflush>
}
 80173a8:	bf00      	nop
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	20000108 	.word	0x20000108

080173b0 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80173ba:	ed97 0b00 	vldr	d0, [r7]
 80173be:	f7ff ff07 	bl	80171d0 <_ZSt5isnand>
 80173c2:	4603      	mov	r3, r0
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80173d6:	ed97 0b00 	vldr	d0, [r7]
 80173da:	f7ff fec9 	bl	8017170 <_ZSt5isinfd>
 80173de:	4603      	mov	r3, r0
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3708      	adds	r7, #8
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}

080173e8 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 80173e8:	b480      	push	{r7}
 80173ea:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 80173ec:	2300      	movs	r3, #0
#endif

}
 80173ee:	4618      	mov	r0, r3
 80173f0:	46bd      	mov	sp, r7
 80173f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f6:	4770      	bx	lr

080173f8 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
}
 8017400:	bf00      	nop
 8017402:	370c      	adds	r7, #12
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr

0801740c <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 801740c:	b480      	push	{r7}
 801740e:	b083      	sub	sp, #12
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
}
 8017414:	bf00      	nop
 8017416:	370c      	adds	r7, #12
 8017418:	46bd      	mov	sp, r7
 801741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741e:	4770      	bx	lr

08017420 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8017420:	b480      	push	{r7}
 8017422:	b083      	sub	sp, #12
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
}
 8017428:	bf00      	nop
 801742a:	370c      	adds	r7, #12
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8017434:	b580      	push	{r7, lr}
 8017436:	b084      	sub	sp, #16
 8017438:	af00      	add	r7, sp, #0
 801743a:	60f8      	str	r0, [r7, #12]
 801743c:	60b9      	str	r1, [r7, #8]
 801743e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8017440:	4a25      	ldr	r2, [pc, #148]	; (80174d8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	601a      	str	r2, [r3, #0]
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	68ba      	ldr	r2, [r7, #8]
 801744a:	605a      	str	r2, [r3, #4]
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	687a      	ldr	r2, [r7, #4]
 8017450:	609a      	str	r2, [r3, #8]
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	2200      	movs	r2, #0
 8017456:	731a      	strb	r2, [r3, #12]
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	2200      	movs	r2, #0
 801745c:	735a      	strb	r2, [r3, #13]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	2200      	movs	r2, #0
 8017462:	739a      	strb	r2, [r3, #14]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	2200      	movs	r2, #0
 8017468:	73da      	strb	r2, [r3, #15]
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	2200      	movs	r2, #0
 801746e:	741a      	strb	r2, [r3, #16]
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	2200      	movs	r2, #0
 8017474:	745a      	strb	r2, [r3, #17]
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2200      	movs	r2, #0
 801747a:	749a      	strb	r2, [r3, #18]
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	2200      	movs	r2, #0
 8017480:	74da      	strb	r2, [r3, #19]
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2200      	movs	r2, #0
 8017486:	751a      	strb	r2, [r3, #20]
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	2200      	movs	r2, #0
 801748c:	755a      	strb	r2, [r3, #21]
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	2200      	movs	r2, #0
 8017492:	759a      	strb	r2, [r3, #22]
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	2200      	movs	r2, #0
 8017498:	75da      	strb	r2, [r3, #23]
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	2200      	movs	r2, #0
 801749e:	761a      	strb	r2, [r3, #24]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	2201      	movs	r2, #1
 80174a4:	61da      	str	r2, [r3, #28]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2200      	movs	r2, #0
 80174aa:	621a      	str	r2, [r3, #32]
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2200      	movs	r2, #0
 80174b0:	625a      	str	r2, [r3, #36]	; 0x24
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	2200      	movs	r2, #0
 80174b6:	629a      	str	r2, [r3, #40]	; 0x28
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2200      	movs	r2, #0
 80174bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	3330      	adds	r3, #48	; 0x30
 80174c4:	4905      	ldr	r1, [pc, #20]	; (80174dc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80174c6:	4618      	mov	r0, r3
 80174c8:	f7f7 ff61 	bl	800f38e <_ZN12SimpleStringC1EPKc>
{
}
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	4618      	mov	r0, r3
 80174d0:	3710      	adds	r7, #16
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	0802c0a8 	.word	0x0802c0a8
 80174dc:	08028260 	.word	0x08028260

080174e0 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b082      	sub	sp, #8
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7f8 fb07 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	4618      	mov	r0, r3
 80174f4:	3708      	adds	r7, #8
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
	...

080174fc <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80174fc:	b590      	push	{r4, r7, lr}
 80174fe:	b085      	sub	sp, #20
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	4a20      	ldr	r2, [pc, #128]	; (8017588 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801750e:	2b00      	cmp	r3, #0
 8017510:	d015      	beq.n	801753e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017516:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801751c:	4618      	mov	r0, r3
 801751e:	f00a fda4 	bl	802206a <_ZNK10TestFilter7getNextEv>
 8017522:	4602      	mov	r2, r0
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8017528:	68fc      	ldr	r4, [r7, #12]
 801752a:	2c00      	cmp	r4, #0
 801752c:	d0ed      	beq.n	801750a <_ZN20CommandLineArgumentsD1Ev+0xe>
 801752e:	4620      	mov	r0, r4
 8017530:	f7ff ffd6 	bl	80174e0 <_ZN10TestFilterD1Ev>
 8017534:	2110      	movs	r1, #16
 8017536:	4620      	mov	r0, r4
 8017538:	f7f5 fb7a 	bl	800cc30 <_ZdlPvj>
    while(groupFilters_) {
 801753c:	e7e5      	b.n	801750a <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017542:	2b00      	cmp	r3, #0
 8017544:	d015      	beq.n	8017572 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801754a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017550:	4618      	mov	r0, r3
 8017552:	f00a fd8a 	bl	802206a <_ZNK10TestFilter7getNextEv>
 8017556:	4602      	mov	r2, r0
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 801755c:	68bc      	ldr	r4, [r7, #8]
 801755e:	2c00      	cmp	r4, #0
 8017560:	d0ed      	beq.n	801753e <_ZN20CommandLineArgumentsD1Ev+0x42>
 8017562:	4620      	mov	r0, r4
 8017564:	f7ff ffbc 	bl	80174e0 <_ZN10TestFilterD1Ev>
 8017568:	2110      	movs	r1, #16
 801756a:	4620      	mov	r0, r4
 801756c:	f7f5 fb60 	bl	800cc30 <_ZdlPvj>
    while(nameFilters_) {
 8017570:	e7e5      	b.n	801753e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	3330      	adds	r3, #48	; 0x30
 8017576:	4618      	mov	r0, r3
 8017578:	f7f8 fac1 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
}
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	4618      	mov	r0, r3
 8017580:	3714      	adds	r7, #20
 8017582:	46bd      	mov	sp, r7
 8017584:	bd90      	pop	{r4, r7, pc}
 8017586:	bf00      	nop
 8017588:	0802c0a8 	.word	0x0802c0a8

0801758c <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
}
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff ffb1 	bl	80174fc <_ZN20CommandLineArgumentsD1Ev>
 801759a:	2138      	movs	r1, #56	; 0x38
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f7f5 fb47 	bl	800cc30 <_ZdlPvj>
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	4618      	mov	r0, r3
 80175a6:	3708      	adds	r7, #8
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80175ac:	b5b0      	push	{r4, r5, r7, lr}
 80175ae:	b0be      	sub	sp, #248	; 0xf8
 80175b0:	af02      	add	r7, sp, #8
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
 80175b6:	2400      	movs	r4, #0
    bool correctParameters = true;
 80175b8:	2301      	movs	r3, #1
 80175ba:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80175be:	2301      	movs	r3, #1
 80175c0:	613b      	str	r3, [r7, #16]
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	685a      	ldr	r2, [r3, #4]
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	429a      	cmp	r2, r3
 80175ca:	f340 83a4 	ble.w	8017d16 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	689a      	ldr	r2, [r3, #8]
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	009b      	lsls	r3, r3, #2
 80175d6:	4413      	add	r3, r2
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	f107 0308 	add.w	r3, r7, #8
 80175de:	4611      	mov	r1, r2
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7f7 fed4 	bl	800f38e <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80175e6:	f107 0314 	add.w	r3, r7, #20
 80175ea:	49c8      	ldr	r1, [pc, #800]	; (801790c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7f7 fece 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80175f2:	f107 0214 	add.w	r2, r7, #20
 80175f6:	f107 0308 	add.w	r3, r7, #8
 80175fa:	4611      	mov	r1, r2
 80175fc:	4618      	mov	r0, r3
 80175fe:	f7f8 fa8a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8017602:	4603      	mov	r3, r0
 8017604:	461d      	mov	r5, r3
 8017606:	f107 0314 	add.w	r3, r7, #20
 801760a:	4618      	mov	r0, r3
 801760c:	f7f8 fa77 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017610:	2d00      	cmp	r5, #0
 8017612:	d006      	beq.n	8017622 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2201      	movs	r2, #1
 8017618:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 801761a:	2300      	movs	r3, #0
 801761c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017620:	e366      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8017622:	f107 031c 	add.w	r3, r7, #28
 8017626:	49ba      	ldr	r1, [pc, #744]	; (8017910 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8017628:	4618      	mov	r0, r3
 801762a:	f7f7 feb0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801762e:	f107 021c 	add.w	r2, r7, #28
 8017632:	f107 0308 	add.w	r3, r7, #8
 8017636:	4611      	mov	r1, r2
 8017638:	4618      	mov	r0, r3
 801763a:	f7f8 fa6c 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801763e:	4603      	mov	r3, r0
 8017640:	461d      	mov	r5, r3
 8017642:	f107 031c 	add.w	r3, r7, #28
 8017646:	4618      	mov	r0, r3
 8017648:	f7f8 fa59 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801764c:	2d00      	cmp	r5, #0
 801764e:	d003      	beq.n	8017658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2201      	movs	r2, #1
 8017654:	735a      	strb	r2, [r3, #13]
 8017656:	e34b      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8017658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801765c:	49ad      	ldr	r1, [pc, #692]	; (8017914 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801765e:	4618      	mov	r0, r3
 8017660:	f7f7 fe95 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017664:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017668:	f107 0308 	add.w	r3, r7, #8
 801766c:	4611      	mov	r1, r2
 801766e:	4618      	mov	r0, r3
 8017670:	f7f8 fa51 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8017674:	4603      	mov	r3, r0
 8017676:	461d      	mov	r5, r3
 8017678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801767c:	4618      	mov	r0, r3
 801767e:	f7f8 fa3e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017682:	2d00      	cmp	r5, #0
 8017684:	d003      	beq.n	801768e <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2201      	movs	r2, #1
 801768a:	739a      	strb	r2, [r3, #14]
 801768c:	e330      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 801768e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017692:	49a1      	ldr	r1, [pc, #644]	; (8017918 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8017694:	4618      	mov	r0, r3
 8017696:	f7f7 fe7a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801769a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801769e:	f107 0308 	add.w	r3, r7, #8
 80176a2:	4611      	mov	r1, r2
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7f8 fa36 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80176aa:	4603      	mov	r3, r0
 80176ac:	461d      	mov	r5, r3
 80176ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7f8 fa23 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80176b8:	2d00      	cmp	r5, #0
 80176ba:	d003      	beq.n	80176c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	2201      	movs	r2, #1
 80176c0:	73da      	strb	r2, [r3, #15]
 80176c2:	e315      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80176c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80176c8:	4994      	ldr	r1, [pc, #592]	; (801791c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80176ca:	4618      	mov	r0, r3
 80176cc:	f7f7 fe5f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80176d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80176d4:	f107 0308 	add.w	r3, r7, #8
 80176d8:	4611      	mov	r1, r2
 80176da:	4618      	mov	r0, r3
 80176dc:	f7f8 fa1b 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80176e0:	4603      	mov	r3, r0
 80176e2:	461d      	mov	r5, r3
 80176e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80176e8:	4618      	mov	r0, r3
 80176ea:	f7f8 fa08 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80176ee:	2d00      	cmp	r5, #0
 80176f0:	d003      	beq.n	80176fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2201      	movs	r2, #1
 80176f6:	741a      	strb	r2, [r3, #16]
 80176f8:	e2fa      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80176fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80176fe:	4988      	ldr	r1, [pc, #544]	; (8017920 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8017700:	4618      	mov	r0, r3
 8017702:	f7f7 fe44 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017706:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801770a:	f107 0308 	add.w	r3, r7, #8
 801770e:	4611      	mov	r1, r2
 8017710:	4618      	mov	r0, r3
 8017712:	f7f8 fa00 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8017716:	4603      	mov	r3, r0
 8017718:	461d      	mov	r5, r3
 801771a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801771e:	4618      	mov	r0, r3
 8017720:	f7f8 f9ed 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017724:	2d00      	cmp	r5, #0
 8017726:	d003      	beq.n	8017730 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2201      	movs	r2, #1
 801772c:	755a      	strb	r2, [r3, #21]
 801772e:	e2df      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8017730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017734:	497b      	ldr	r1, [pc, #492]	; (8017924 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8017736:	4618      	mov	r0, r3
 8017738:	f7f7 fe29 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801773c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8017740:	f107 0308 	add.w	r3, r7, #8
 8017744:	4611      	mov	r1, r2
 8017746:	4618      	mov	r0, r3
 8017748:	f7f8 f9e5 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801774c:	4603      	mov	r3, r0
 801774e:	461d      	mov	r5, r3
 8017750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017754:	4618      	mov	r0, r3
 8017756:	f7f8 f9d2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801775a:	2d00      	cmp	r5, #0
 801775c:	d003      	beq.n	8017766 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2201      	movs	r2, #1
 8017762:	745a      	strb	r2, [r3, #17]
 8017764:	e2c4      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8017766:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801776a:	496f      	ldr	r1, [pc, #444]	; (8017928 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 801776c:	4618      	mov	r0, r3
 801776e:	f7f7 fe0e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017772:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017776:	f107 0308 	add.w	r3, r7, #8
 801777a:	4611      	mov	r1, r2
 801777c:	4618      	mov	r0, r3
 801777e:	f7f8 f9ca 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8017782:	4603      	mov	r3, r0
 8017784:	461d      	mov	r5, r3
 8017786:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801778a:	4618      	mov	r0, r3
 801778c:	f7f8 f9b7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017790:	2d00      	cmp	r5, #0
 8017792:	d003      	beq.n	801779c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2201      	movs	r2, #1
 8017798:	749a      	strb	r2, [r3, #18]
 801779a:	e2a9      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 801779c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80177a0:	4962      	ldr	r1, [pc, #392]	; (801792c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7f7 fdf3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80177a8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80177ac:	f107 0308 	add.w	r3, r7, #8
 80177b0:	4611      	mov	r1, r2
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7f8 f9af 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80177b8:	4603      	mov	r3, r0
 80177ba:	461d      	mov	r5, r3
 80177bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7f8 f99c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80177c6:	2d00      	cmp	r5, #0
 80177c8:	d003      	beq.n	80177d2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	2201      	movs	r2, #1
 80177ce:	74da      	strb	r2, [r3, #19]
 80177d0:	e28e      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80177d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80177d6:	4956      	ldr	r1, [pc, #344]	; (8017930 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80177d8:	4618      	mov	r0, r3
 80177da:	f7f7 fdd8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80177de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80177e2:	f107 0308 	add.w	r3, r7, #8
 80177e6:	4611      	mov	r1, r2
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f8 f994 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80177ee:	4603      	mov	r3, r0
 80177f0:	461d      	mov	r5, r3
 80177f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7f8 f981 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80177fc:	2d00      	cmp	r5, #0
 80177fe:	d003      	beq.n	8017808 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	2201      	movs	r2, #1
 8017804:	751a      	strb	r2, [r3, #20]
 8017806:	e273      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8017808:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801780c:	4949      	ldr	r1, [pc, #292]	; (8017934 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801780e:	4618      	mov	r0, r3
 8017810:	f7f7 fdbd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017814:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8017818:	f107 0308 	add.w	r3, r7, #8
 801781c:	4611      	mov	r1, r2
 801781e:	4618      	mov	r0, r3
 8017820:	f7f8 f979 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8017824:	4603      	mov	r3, r0
 8017826:	461d      	mov	r5, r3
 8017828:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801782c:	4618      	mov	r0, r3
 801782e:	f7f8 f966 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017832:	2d00      	cmp	r5, #0
 8017834:	d003      	beq.n	801783e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2201      	movs	r2, #1
 801783a:	759a      	strb	r2, [r3, #22]
 801783c:	e258      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801783e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017842:	493d      	ldr	r1, [pc, #244]	; (8017938 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8017844:	4618      	mov	r0, r3
 8017846:	f7f7 fda2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801784a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801784e:	f107 0308 	add.w	r3, r7, #8
 8017852:	4611      	mov	r1, r2
 8017854:	4618      	mov	r0, r3
 8017856:	f7f7 fe5e 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 801785a:	4603      	mov	r3, r0
 801785c:	461d      	mov	r5, r3
 801785e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8017862:	4618      	mov	r0, r3
 8017864:	f7f8 f94b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017868:	2d00      	cmp	r5, #0
 801786a:	d009      	beq.n	8017880 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6859      	ldr	r1, [r3, #4]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	689a      	ldr	r2, [r3, #8]
 8017874:	f107 0310 	add.w	r3, r7, #16
 8017878:	6878      	ldr	r0, [r7, #4]
 801787a:	f000 fb33 	bl	8017ee4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801787e:	e237      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8017880:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8017884:	492d      	ldr	r1, [pc, #180]	; (801793c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8017886:	4618      	mov	r0, r3
 8017888:	f7f7 fd81 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801788c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8017890:	f107 0308 	add.w	r3, r7, #8
 8017894:	4611      	mov	r1, r2
 8017896:	4618      	mov	r0, r3
 8017898:	f7f7 fe3d 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 801789c:	4603      	mov	r3, r0
 801789e:	461d      	mov	r5, r3
 80178a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7f8 f92a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80178aa:	2d00      	cmp	r5, #0
 80178ac:	d009      	beq.n	80178c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6859      	ldr	r1, [r3, #4]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	689a      	ldr	r2, [r3, #8]
 80178b6:	f107 0310 	add.w	r3, r7, #16
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f000 fc40 	bl	8018140 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80178c0:	e216      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80178c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80178c6:	491e      	ldr	r1, [pc, #120]	; (8017940 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7f7 fd60 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80178ce:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80178d2:	f107 0308 	add.w	r3, r7, #8
 80178d6:	4611      	mov	r1, r2
 80178d8:	4618      	mov	r0, r3
 80178da:	f7f7 fe1c 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 80178de:	4603      	mov	r3, r0
 80178e0:	461d      	mov	r5, r3
 80178e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7f8 f909 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	d029      	beq.n	8017944 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	6859      	ldr	r1, [r3, #4]
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	689a      	ldr	r2, [r3, #8]
 80178f8:	f107 0310 	add.w	r3, r7, #16
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f000 fc61 	bl	80181c4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8017902:	4603      	mov	r3, r0
 8017904:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017908:	e1f2      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801790a:	bf00      	nop
 801790c:	08028264 	.word	0x08028264
 8017910:	08028268 	.word	0x08028268
 8017914:	0802826c 	.word	0x0802826c
 8017918:	08028270 	.word	0x08028270
 801791c:	08028274 	.word	0x08028274
 8017920:	08028278 	.word	0x08028278
 8017924:	0802827c 	.word	0x0802827c
 8017928:	08028280 	.word	0x08028280
 801792c:	08028284 	.word	0x08028284
 8017930:	08028288 	.word	0x08028288
 8017934:	0802828c 	.word	0x0802828c
 8017938:	08028290 	.word	0x08028290
 801793c:	08028294 	.word	0x08028294
 8017940:	08028298 	.word	0x08028298
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8017944:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8017948:	49b9      	ldr	r1, [pc, #740]	; (8017c30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 801794a:	4618      	mov	r0, r3
 801794c:	f7f7 fd1f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017950:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8017954:	f107 0308 	add.w	r3, r7, #8
 8017958:	4611      	mov	r1, r2
 801795a:	4618      	mov	r0, r3
 801795c:	f7f7 fddb 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017960:	4603      	mov	r3, r0
 8017962:	461d      	mov	r5, r3
 8017964:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8017968:	4618      	mov	r0, r3
 801796a:	f7f8 f8c8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801796e:	2d00      	cmp	r5, #0
 8017970:	d009      	beq.n	8017986 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6859      	ldr	r1, [r3, #4]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	689a      	ldr	r2, [r3, #8]
 801797a:	f107 0310 	add.w	r3, r7, #16
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f000 fccc 	bl	801831c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8017984:	e1b4      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8017986:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801798a:	49aa      	ldr	r1, [pc, #680]	; (8017c34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 801798c:	4618      	mov	r0, r3
 801798e:	f7f7 fcfe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017992:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8017996:	f107 0308 	add.w	r3, r7, #8
 801799a:	4611      	mov	r1, r2
 801799c:	4618      	mov	r0, r3
 801799e:	f7f7 fdba 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 80179a2:	4603      	mov	r3, r0
 80179a4:	461d      	mov	r5, r3
 80179a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7f8 f8a7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80179b0:	2d00      	cmp	r5, #0
 80179b2:	d009      	beq.n	80179c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6859      	ldr	r1, [r3, #4]
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	689a      	ldr	r2, [r3, #8]
 80179bc:	f107 0310 	add.w	r3, r7, #16
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f000 fcf1 	bl	80183a8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80179c6:	e193      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80179c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80179cc:	499a      	ldr	r1, [pc, #616]	; (8017c38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7f7 fcdd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80179d4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80179d8:	f107 0308 	add.w	r3, r7, #8
 80179dc:	4611      	mov	r1, r2
 80179de:	4618      	mov	r0, r3
 80179e0:	f7f7 fd99 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 80179e4:	4603      	mov	r3, r0
 80179e6:	461d      	mov	r5, r3
 80179e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80179ec:	4618      	mov	r0, r3
 80179ee:	f7f8 f886 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80179f2:	2d00      	cmp	r5, #0
 80179f4:	d009      	beq.n	8017a0a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6859      	ldr	r1, [r3, #4]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	689a      	ldr	r2, [r3, #8]
 80179fe:	f107 0310 	add.w	r3, r7, #16
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f000 fd16 	bl	8018434 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8017a08:	e172      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8017a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8017a0e:	498b      	ldr	r1, [pc, #556]	; (8017c3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7f7 fcbc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017a16:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8017a1a:	f107 0308 	add.w	r3, r7, #8
 8017a1e:	4611      	mov	r1, r2
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7f7 fd78 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017a26:	4603      	mov	r3, r0
 8017a28:	461d      	mov	r5, r3
 8017a2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7f8 f865 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017a34:	2d00      	cmp	r5, #0
 8017a36:	d009      	beq.n	8017a4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6859      	ldr	r1, [r3, #4]
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	689a      	ldr	r2, [r3, #8]
 8017a40:	f107 0310 	add.w	r3, r7, #16
 8017a44:	6878      	ldr	r0, [r7, #4]
 8017a46:	f000 fd3d 	bl	80184c4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8017a4a:	e151      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8017a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017a50:	497b      	ldr	r1, [pc, #492]	; (8017c40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f7 fc9b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017a58:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8017a5c:	f107 0308 	add.w	r3, r7, #8
 8017a60:	4611      	mov	r1, r2
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7f7 fd57 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	461d      	mov	r5, r3
 8017a6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7f8 f844 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017a76:	2d00      	cmp	r5, #0
 8017a78:	d009      	beq.n	8017a8e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	6859      	ldr	r1, [r3, #4]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	689a      	ldr	r2, [r3, #8]
 8017a82:	f107 0310 	add.w	r3, r7, #16
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f000 fd5e 	bl	8018548 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8017a8c:	e130      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8017a8e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8017a92:	496c      	ldr	r1, [pc, #432]	; (8017c44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7f7 fc7a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017a9a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8017a9e:	f107 0308 	add.w	r3, r7, #8
 8017aa2:	4611      	mov	r1, r2
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7f7 fd36 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	461d      	mov	r5, r3
 8017aae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7f8 f823 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017ab8:	2d00      	cmp	r5, #0
 8017aba:	d009      	beq.n	8017ad0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	6859      	ldr	r1, [r3, #4]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	689a      	ldr	r2, [r3, #8]
 8017ac4:	f107 0310 	add.w	r3, r7, #16
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f000 fd83 	bl	80185d4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8017ace:	e10f      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8017ad0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8017ad4:	495c      	ldr	r1, [pc, #368]	; (8017c48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f7 fc59 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017adc:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8017ae0:	f107 0308 	add.w	r3, r7, #8
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7f7 fd15 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017aec:	4603      	mov	r3, r0
 8017aee:	461d      	mov	r5, r3
 8017af0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7f8 f802 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017afa:	2d00      	cmp	r5, #0
 8017afc:	d009      	beq.n	8017b12 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6859      	ldr	r1, [r3, #4]
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	689a      	ldr	r2, [r3, #8]
 8017b06:	f107 0310 	add.w	r3, r7, #16
 8017b0a:	6878      	ldr	r0, [r7, #4]
 8017b0c:	f000 fda8 	bl	8018660 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8017b10:	e0ee      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8017b12:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017b16:	494d      	ldr	r1, [pc, #308]	; (8017c4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8017b18:	4618      	mov	r0, r3
 8017b1a:	f7f7 fc38 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017b1e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8017b22:	f107 0308 	add.w	r3, r7, #8
 8017b26:	4611      	mov	r1, r2
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f7 fcf4 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	461d      	mov	r5, r3
 8017b32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7f7 ffe1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017b3c:	2d00      	cmp	r5, #0
 8017b3e:	d00c      	beq.n	8017b5a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6859      	ldr	r1, [r3, #4]
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	689a      	ldr	r2, [r3, #8]
 8017b48:	f107 0310 	add.w	r3, r7, #16
 8017b4c:	6878      	ldr	r0, [r7, #4]
 8017b4e:	f000 fa29 	bl	8017fa4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8017b52:	4603      	mov	r3, r0
 8017b54:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017b58:	e0ca      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8017b5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8017b5e:	493c      	ldr	r1, [pc, #240]	; (8017c50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7f7 fc14 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017b66:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8017b6a:	f107 0308 	add.w	r3, r7, #8
 8017b6e:	4611      	mov	r1, r2
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f7 fcd0 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017b76:	4603      	mov	r3, r0
 8017b78:	461d      	mov	r5, r3
 8017b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7f7 ffbd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017b84:	2d00      	cmp	r5, #0
 8017b86:	d00b      	beq.n	8017ba0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6859      	ldr	r1, [r3, #4]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	689a      	ldr	r2, [r3, #8]
 8017b90:	f107 0310 	add.w	r3, r7, #16
 8017b94:	482e      	ldr	r0, [pc, #184]	; (8017c50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8017b96:	9000      	str	r0, [sp, #0]
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f000 fda9 	bl	80186f0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8017b9e:	e0a7      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8017ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8017ba4:	492b      	ldr	r1, [pc, #172]	; (8017c54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	f7f7 fbf1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017bac:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8017bb0:	f107 0308 	add.w	r3, r7, #8
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7f7 fcad 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	461d      	mov	r5, r3
 8017bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	f7f7 ff9a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017bca:	2d00      	cmp	r5, #0
 8017bcc:	d00b      	beq.n	8017be6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	6859      	ldr	r1, [r3, #4]
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	689a      	ldr	r2, [r3, #8]
 8017bd6:	f107 0310 	add.w	r3, r7, #16
 8017bda:	481e      	ldr	r0, [pc, #120]	; (8017c54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8017bdc:	9000      	str	r0, [sp, #0]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f000 fd86 	bl	80186f0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8017be4:	e084      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8017be6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017bea:	491b      	ldr	r1, [pc, #108]	; (8017c58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8017bec:	4618      	mov	r0, r3
 8017bee:	f7f7 fbce 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017bf2:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8017bf6:	f107 0308 	add.w	r3, r7, #8
 8017bfa:	4611      	mov	r1, r2
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7f7 fc8a 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017c02:	4603      	mov	r3, r0
 8017c04:	461d      	mov	r5, r3
 8017c06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7f7 ff77 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017c10:	2d00      	cmp	r5, #0
 8017c12:	d023      	beq.n	8017c5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6859      	ldr	r1, [r3, #4]
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	689a      	ldr	r2, [r3, #8]
 8017c1c:	f107 0310 	add.w	r3, r7, #16
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f000 fe3b 	bl	801889c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8017c26:	4603      	mov	r3, r0
 8017c28:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017c2c:	e060      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8017c2e:	bf00      	nop
 8017c30:	0802829c 	.word	0x0802829c
 8017c34:	080282a0 	.word	0x080282a0
 8017c38:	080282a4 	.word	0x080282a4
 8017c3c:	080282ac 	.word	0x080282ac
 8017c40:	080282b0 	.word	0x080282b0
 8017c44:	080282b4 	.word	0x080282b4
 8017c48:	080282b8 	.word	0x080282b8
 8017c4c:	080282c0 	.word	0x080282c0
 8017c50:	080282c4 	.word	0x080282c4
 8017c54:	080282cc 	.word	0x080282cc
 8017c58:	080282dc 	.word	0x080282dc
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8017c5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8017c60:	4930      	ldr	r1, [pc, #192]	; (8017d24 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8017c62:	4618      	mov	r0, r3
 8017c64:	f7f7 fb93 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017c68:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8017c6c:	f107 0308 	add.w	r3, r7, #8
 8017c70:	4611      	mov	r1, r2
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7f7 fc4f 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	461d      	mov	r5, r3
 8017c7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7f7 ff3c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017c86:	2d00      	cmp	r5, #0
 8017c88:	d00e      	beq.n	8017ca8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	331c      	adds	r3, #28
 8017c90:	681d      	ldr	r5, [r3, #0]
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	6859      	ldr	r1, [r3, #4]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	689a      	ldr	r2, [r3, #8]
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	6838      	ldr	r0, [r7, #0]
 8017c9e:	47a8      	blx	r5
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017ca6:	e023      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8017ca8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8017cac:	491e      	ldr	r1, [pc, #120]	; (8017d28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7f7 fb6d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8017cb4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8017cb8:	f107 0308 	add.w	r3, r7, #8
 8017cbc:	4611      	mov	r1, r2
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7f7 fc29 	bl	800f516 <_ZNK12SimpleString10startsWithERKS_>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	461d      	mov	r5, r3
 8017cc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7f7 ff16 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017cd2:	2d00      	cmp	r5, #0
 8017cd4:	d009      	beq.n	8017cea <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	6859      	ldr	r1, [r3, #4]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	689a      	ldr	r2, [r3, #8]
 8017cde:	f107 0310 	add.w	r3, r7, #16
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	f000 fd98 	bl	8018818 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8017ce8:	e002      	b.n	8017cf0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8017cea:	2300      	movs	r3, #0
 8017cec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8017cf0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d102      	bne.n	8017cfe <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8017cf8:	2400      	movs	r4, #0
 8017cfa:	2500      	movs	r5, #0
 8017cfc:	e000      	b.n	8017d00 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8017cfe:	2501      	movs	r5, #1
 8017d00:	f107 0308 	add.w	r3, r7, #8
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7f7 fefa 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8017d0a:	2d01      	cmp	r5, #1
 8017d0c:	d104      	bne.n	8017d18 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	3301      	adds	r3, #1
 8017d12:	613b      	str	r3, [r7, #16]
 8017d14:	e455      	b.n	80175c2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8017d16:	2401      	movs	r4, #1
 8017d18:	4623      	mov	r3, r4
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	37f0      	adds	r7, #240	; 0xf0
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bdb0      	pop	{r4, r5, r7, pc}
 8017d22:	bf00      	nop
 8017d24:	08028274 	.word	0x08028274
 8017d28:	080282e0 	.word	0x080282e0

08017d2c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8017d2c:	b480      	push	{r7}
 8017d2e:	b083      	sub	sp, #12
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8017d34:	4b03      	ldr	r3, [pc, #12]	; (8017d44 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	370c      	adds	r7, #12
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d40:	4770      	bx	lr
 8017d42:	bf00      	nop
 8017d44:	080282e4 	.word	0x080282e4

08017d48 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8017d48:	b480      	push	{r7}
 8017d4a:	b083      	sub	sp, #12
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8017d50:	4b03      	ldr	r3, [pc, #12]	; (8017d60 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	370c      	adds	r7, #12
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	08028414 	.word	0x08028414

08017d64 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8017d64:	b480      	push	{r7}
 8017d66:	b083      	sub	sp, #12
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	7b1b      	ldrb	r3, [r3, #12]
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	b083      	sub	sp, #12
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
    return verbose_;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	7b5b      	ldrb	r3, [r3, #13]
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	370c      	adds	r7, #12
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d92:	4770      	bx	lr

08017d94 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8017d94:	b480      	push	{r7}
 8017d96:	b083      	sub	sp, #12
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	7b9b      	ldrb	r3, [r3, #14]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	370c      	adds	r7, #12
 8017da4:	46bd      	mov	sp, r7
 8017da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017daa:	4770      	bx	lr

08017dac <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8017dac:	b480      	push	{r7}
 8017dae:	b083      	sub	sp, #12
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
    return color_;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	7bdb      	ldrb	r3, [r3, #15]
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	370c      	adds	r7, #12
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc2:	4770      	bx	lr

08017dc4 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b083      	sub	sp, #12
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	7c5b      	ldrb	r3, [r3, #17]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	370c      	adds	r7, #12
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dda:	4770      	bx	lr

08017ddc <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8017ddc:	b480      	push	{r7}
 8017dde:	b083      	sub	sp, #12
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	7c9b      	ldrb	r3, [r3, #18]
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	7cdb      	ldrb	r3, [r3, #19]
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	370c      	adds	r7, #12
 8017e04:	46bd      	mov	sp, r7
 8017e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0a:	4770      	bx	lr

08017e0c <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	7d1b      	ldrb	r3, [r3, #20]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8017e24:	b480      	push	{r7}
 8017e26:	b083      	sub	sp, #12
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	7c1b      	ldrb	r3, [r3, #16]
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	370c      	adds	r7, #12
 8017e34:	46bd      	mov	sp, r7
 8017e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3a:	4770      	bx	lr

08017e3c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8017e3c:	b480      	push	{r7}
 8017e3e:	b083      	sub	sp, #12
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
    return repeat_;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	69db      	ldr	r3, [r3, #28]
}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	370c      	adds	r7, #12
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e52:	4770      	bx	lr

08017e54 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8017e54:	b480      	push	{r7}
 8017e56:	b083      	sub	sp, #12
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
    return reversing_;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	7d5b      	ldrb	r3, [r3, #21]
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	370c      	adds	r7, #12
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b083      	sub	sp, #12
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	7d9b      	ldrb	r3, [r3, #22]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr

08017e84 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8017e84:	b480      	push	{r7}
 8017e86:	b083      	sub	sp, #12
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	7ddb      	ldrb	r3, [r3, #23]
}
 8017e90:	4618      	mov	r0, r3
 8017e92:	370c      	adds	r7, #12
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8017e9c:	b480      	push	{r7}
 8017e9e:	b083      	sub	sp, #12
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6a1b      	ldr	r3, [r3, #32]
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	370c      	adds	r7, #12
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b083      	sub	sp, #12
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	370c      	adds	r7, #12
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eca:	4770      	bx	lr

08017ecc <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	370c      	adds	r7, #12
 8017edc:	46bd      	mov	sp, r7
 8017ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee2:	4770      	bx	lr

08017ee4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b086      	sub	sp, #24
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	60f8      	str	r0, [r7, #12]
 8017eec:	60b9      	str	r1, [r7, #8]
 8017eee:	607a      	str	r2, [r7, #4]
 8017ef0:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	4413      	add	r3, r2
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	f107 0310 	add.w	r3, r7, #16
 8017f08:	4611      	mov	r1, r2
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7f7 fa3f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8017f10:	f107 0310 	add.w	r3, r7, #16
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7f7 fdd1 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b02      	cmp	r3, #2
 8017f1e:	bf8c      	ite	hi
 8017f20:	2301      	movhi	r3, #1
 8017f22:	2300      	movls	r3, #0
 8017f24:	b2db      	uxtb	r3, r3
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d00e      	beq.n	8017f48 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	687a      	ldr	r2, [r7, #4]
 8017f32:	4413      	add	r3, r2
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	3302      	adds	r3, #2
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7f7 f824 	bl	800ef86 <_ZN12SimpleString4AtoIEPKc>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	461a      	mov	r2, r3
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	61da      	str	r2, [r3, #28]
 8017f46:	e01c      	b.n	8017f82 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	3301      	adds	r3, #1
 8017f4e:	68ba      	ldr	r2, [r7, #8]
 8017f50:	429a      	cmp	r2, r3
 8017f52:	dd16      	ble.n	8017f82 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	3301      	adds	r3, #1
 8017f5a:	009b      	lsls	r3, r3, #2
 8017f5c:	687a      	ldr	r2, [r7, #4]
 8017f5e:	4413      	add	r3, r2
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f7 f80f 	bl	800ef86 <_ZN12SimpleString4AtoIEPKc>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	69db      	ldr	r3, [r3, #28]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d004      	beq.n	8017f82 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	1c5a      	adds	r2, r3, #1
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	69db      	ldr	r3, [r3, #28]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d102      	bne.n	8017f90 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	2202      	movs	r2, #2
 8017f8e:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8017f90:	f107 0310 	add.w	r3, r7, #16
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7f7 fdb2 	bl	800fafe <_ZN12SimpleStringD1Ev>

}
 8017f9a:	bf00      	nop
 8017f9c:	3718      	adds	r7, #24
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}
	...

08017fa4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8017fa4:	b590      	push	{r4, r7, lr}
 8017fa6:	b089      	sub	sp, #36	; 0x24
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
 8017fb0:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	2201      	movs	r2, #1
 8017fb6:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8017fb8:	4b34      	ldr	r3, [pc, #208]	; (801808c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	4798      	blx	r3
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	461a      	mov	r2, r3
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	6a1b      	ldr	r3, [r3, #32]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d104      	bne.n	8017fd8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	6a1b      	ldr	r3, [r3, #32]
 8017fd2:	1c5a      	adds	r2, r3, #1
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8017fd8:	683b      	ldr	r3, [r7, #0]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	687a      	ldr	r2, [r7, #4]
 8017fe0:	4413      	add	r3, r2
 8017fe2:	681a      	ldr	r2, [r3, #0]
 8017fe4:	f107 0314 	add.w	r3, r7, #20
 8017fe8:	4611      	mov	r1, r2
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7f7 f9cf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8017ff0:	f107 0314 	add.w	r3, r7, #20
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f7 fd61 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b02      	cmp	r3, #2
 8017ffe:	bf8c      	ite	hi
 8018000:	2301      	movhi	r3, #1
 8018002:	2300      	movls	r3, #0
 8018004:	b2db      	uxtb	r3, r3
 8018006:	2b00      	cmp	r3, #0
 8018008:	d010      	beq.n	801802c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	2201      	movs	r2, #1
 801800e:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	009b      	lsls	r3, r3, #2
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	4413      	add	r3, r2
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	3302      	adds	r3, #2
 801801e:	4618      	mov	r0, r3
 8018020:	f7f6 ff78 	bl	800ef14 <_ZN12SimpleString4AtoUEPKc>
 8018024:	4602      	mov	r2, r0
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	621a      	str	r2, [r3, #32]
 801802a:	e01e      	b.n	801806a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 801802c:	683b      	ldr	r3, [r7, #0]
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	3301      	adds	r3, #1
 8018032:	68ba      	ldr	r2, [r7, #8]
 8018034:	429a      	cmp	r2, r3
 8018036:	dd18      	ble.n	801806a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	3301      	adds	r3, #1
 801803e:	009b      	lsls	r3, r3, #2
 8018040:	687a      	ldr	r2, [r7, #4]
 8018042:	4413      	add	r3, r2
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4618      	mov	r0, r3
 8018048:	f7f6 ff64 	bl	800ef14 <_ZN12SimpleString4AtoUEPKc>
 801804c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d00a      	beq.n	801806a <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	2201      	movs	r2, #1
 8018058:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	69fa      	ldr	r2, [r7, #28]
 801805e:	621a      	str	r2, [r3, #32]
            i++;
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	1c5a      	adds	r2, r3, #1
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	6a1b      	ldr	r3, [r3, #32]
 801806e:	2b00      	cmp	r3, #0
 8018070:	bf14      	ite	ne
 8018072:	2301      	movne	r3, #1
 8018074:	2300      	moveq	r3, #0
 8018076:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8018078:	f107 0314 	add.w	r3, r7, #20
 801807c:	4618      	mov	r0, r3
 801807e:	f7f7 fd3e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8018082:	4623      	mov	r3, r4
}
 8018084:	4618      	mov	r0, r3
 8018086:	3724      	adds	r7, #36	; 0x24
 8018088:	46bd      	mov	sp, r7
 801808a:	bd90      	pop	{r4, r7, pc}
 801808c:	200000a8 	.word	0x200000a8

08018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b088      	sub	sp, #32
 8018094:	af00      	add	r7, sp, #0
 8018096:	60f8      	str	r0, [r7, #12]
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	607a      	str	r2, [r7, #4]
 801809c:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 801809e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80180a0:	f7f7 fd0c 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80180a4:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80180a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	683a      	ldr	r2, [r7, #0]
 80180ae:	4413      	add	r3, r2
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	f107 0314 	add.w	r3, r7, #20
 80180b6:	4611      	mov	r1, r2
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7f7 f968 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80180be:	f107 0314 	add.w	r3, r7, #20
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7f7 fcfa 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80180c8:	4602      	mov	r2, r0
 80180ca:	69fb      	ldr	r3, [r7, #28]
 80180cc:	4293      	cmp	r3, r2
 80180ce:	bf34      	ite	cc
 80180d0:	2301      	movcc	r3, #1
 80180d2:	2300      	movcs	r3, #0
 80180d4:	b2db      	uxtb	r3, r3
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d00c      	beq.n	80180f4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80180da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	009b      	lsls	r3, r3, #2
 80180e0:	683a      	ldr	r2, [r7, #0]
 80180e2:	4413      	add	r3, r2
 80180e4:	681a      	ldr	r2, [r3, #0]
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	4413      	add	r3, r2
 80180ea:	4619      	mov	r1, r3
 80180ec:	68f8      	ldr	r0, [r7, #12]
 80180ee:	f7f7 f94e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80180f2:	e019      	b.n	8018128 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 80180f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	3301      	adds	r3, #1
 80180fa:	687a      	ldr	r2, [r7, #4]
 80180fc:	429a      	cmp	r2, r3
 80180fe:	dd0f      	ble.n	8018120 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8018100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	1c5a      	adds	r2, r3, #1
 8018106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018108:	601a      	str	r2, [r3, #0]
 801810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	009b      	lsls	r3, r3, #2
 8018110:	683a      	ldr	r2, [r7, #0]
 8018112:	4413      	add	r3, r2
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	4619      	mov	r1, r3
 8018118:	68f8      	ldr	r0, [r7, #12]
 801811a:	f7f7 f938 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801811e:	e003      	b.n	8018128 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8018120:	4906      	ldr	r1, [pc, #24]	; (801813c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8018122:	68f8      	ldr	r0, [r7, #12]
 8018124:	f7f7 f933 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8018128:	f107 0314 	add.w	r3, r7, #20
 801812c:	4618      	mov	r0, r3
 801812e:	f7f7 fce6 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8018132:	68f8      	ldr	r0, [r7, #12]
 8018134:	3720      	adds	r7, #32
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	08028260 	.word	0x08028260

08018140 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8018140:	b5b0      	push	{r4, r5, r7, lr}
 8018142:	b08c      	sub	sp, #48	; 0x30
 8018144:	af02      	add	r7, sp, #8
 8018146:	60f8      	str	r0, [r7, #12]
 8018148:	60b9      	str	r1, [r7, #8]
 801814a:	607a      	str	r2, [r7, #4]
 801814c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 801814e:	f107 031c 	add.w	r3, r7, #28
 8018152:	491a      	ldr	r1, [pc, #104]	; (80181bc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8018154:	4618      	mov	r0, r3
 8018156:	f7f7 f91a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801815a:	f107 0014 	add.w	r0, r7, #20
 801815e:	f107 031c 	add.w	r3, r7, #28
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	9300      	str	r3, [sp, #0]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	68ba      	ldr	r2, [r7, #8]
 801816c:	68f9      	ldr	r1, [r7, #12]
 801816e:	f7ff ff8f 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018172:	f107 0514 	add.w	r5, r7, #20
 8018176:	f44f 7289 	mov.w	r2, #274	; 0x112
 801817a:	4911      	ldr	r1, [pc, #68]	; (80181c0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 801817c:	2010      	movs	r0, #16
 801817e:	f7f4 fd43 	bl	800cc08 <_ZnwjPKci>
 8018182:	4604      	mov	r4, r0
 8018184:	4629      	mov	r1, r5
 8018186:	4620      	mov	r0, r4
 8018188:	f009 ff40 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 801818c:	627c      	str	r4, [r7, #36]	; 0x24
 801818e:	f107 0314 	add.w	r3, r7, #20
 8018192:	4618      	mov	r0, r3
 8018194:	f7f7 fcb3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018198:	f107 031c 	add.w	r3, r7, #28
 801819c:	4618      	mov	r0, r3
 801819e:	f7f7 fcae 	bl	800fafe <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181a6:	4619      	mov	r1, r3
 80181a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181aa:	f009 ff4f 	bl	802204c <_ZN10TestFilter3addEPS_>
 80181ae:	4602      	mov	r2, r0
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80181b4:	bf00      	nop
 80181b6:	3728      	adds	r7, #40	; 0x28
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bdb0      	pop	{r4, r5, r7, pc}
 80181bc:	08028294 	.word	0x08028294
 80181c0:	08028c28 	.word	0x08028c28

080181c4 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80181c4:	b5b0      	push	{r4, r5, r7, lr}
 80181c6:	b092      	sub	sp, #72	; 0x48
 80181c8:	af02      	add	r7, sp, #8
 80181ca:	60f8      	str	r0, [r7, #12]
 80181cc:	60b9      	str	r1, [r7, #8]
 80181ce:	607a      	str	r2, [r7, #4]
 80181d0:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80181d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80181d6:	494e      	ldr	r1, [pc, #312]	; (8018310 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80181d8:	4618      	mov	r0, r3
 80181da:	f7f7 f8d8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80181de:	f107 0020 	add.w	r0, r7, #32
 80181e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80181e6:	9301      	str	r3, [sp, #4]
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	9300      	str	r3, [sp, #0]
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	68ba      	ldr	r2, [r7, #8]
 80181f0:	68f9      	ldr	r1, [r7, #12]
 80181f2:	f7ff ff4d 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80181f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f7 fc7f 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8018200:	f107 0310 	add.w	r3, r7, #16
 8018204:	4618      	mov	r0, r3
 8018206:	f7f8 fb8f 	bl	8010928 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 801820a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801820e:	4941      	ldr	r1, [pc, #260]	; (8018314 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8018210:	4618      	mov	r0, r3
 8018212:	f7f7 f8bc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018216:	f107 0210 	add.w	r2, r7, #16
 801821a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801821e:	f107 0320 	add.w	r3, r7, #32
 8018222:	4618      	mov	r0, r3
 8018224:	f7f7 fa1f 	bl	800f666 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8018228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801822c:	4618      	mov	r0, r3
 801822e:	f7f7 fc66 	bl	800fafe <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8018232:	f107 0310 	add.w	r3, r7, #16
 8018236:	4618      	mov	r0, r3
 8018238:	f7f8 fc1b 	bl	8010a72 <_ZNK22SimpleStringCollection4sizeEv>
 801823c:	4603      	mov	r3, r0
 801823e:	2b02      	cmp	r3, #2
 8018240:	bf14      	ite	ne
 8018242:	2301      	movne	r3, #1
 8018244:	2300      	moveq	r3, #0
 8018246:	b2db      	uxtb	r3, r3
 8018248:	2b00      	cmp	r3, #0
 801824a:	d001      	beq.n	8018250 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 801824c:	2400      	movs	r4, #0
 801824e:	e04f      	b.n	80182f0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8018250:	f107 0310 	add.w	r3, r7, #16
 8018254:	2100      	movs	r1, #0
 8018256:	4618      	mov	r0, r3
 8018258:	f7f8 fc18 	bl	8010a8c <_ZN22SimpleStringCollectionixEj>
 801825c:	4604      	mov	r4, r0
 801825e:	f107 0310 	add.w	r3, r7, #16
 8018262:	2100      	movs	r1, #0
 8018264:	4618      	mov	r0, r3
 8018266:	f7f8 fc11 	bl	8010a8c <_ZN22SimpleStringCollectionixEj>
 801826a:	4603      	mov	r3, r0
 801826c:	4618      	mov	r0, r3
 801826e:	f7f7 fc25 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 8018272:	4603      	mov	r3, r0
 8018274:	3b01      	subs	r3, #1
 8018276:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801827a:	2200      	movs	r2, #0
 801827c:	4621      	mov	r1, r4
 801827e:	f7f7 fd47 	bl	800fd10 <_ZNK12SimpleString9subStringEjj>
 8018282:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8018286:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801828a:	4923      	ldr	r1, [pc, #140]	; (8018318 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 801828c:	2010      	movs	r0, #16
 801828e:	f7f4 fcbb 	bl	800cc08 <_ZnwjPKci>
 8018292:	4604      	mov	r4, r0
 8018294:	4629      	mov	r1, r5
 8018296:	4620      	mov	r0, r4
 8018298:	f009 feb8 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182a0:	4619      	mov	r1, r3
 80182a2:	4620      	mov	r0, r4
 80182a4:	f009 fed2 	bl	802204c <_ZN10TestFilter3addEPS_>
 80182a8:	4602      	mov	r2, r0
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	625a      	str	r2, [r3, #36]	; 0x24
 80182ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7f7 fc23 	bl	800fafe <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80182b8:	f107 0310 	add.w	r3, r7, #16
 80182bc:	2101      	movs	r1, #1
 80182be:	4618      	mov	r0, r3
 80182c0:	f7f8 fbe4 	bl	8010a8c <_ZN22SimpleStringCollectionixEj>
 80182c4:	4605      	mov	r5, r0
 80182c6:	f240 121f 	movw	r2, #287	; 0x11f
 80182ca:	4913      	ldr	r1, [pc, #76]	; (8018318 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80182cc:	2010      	movs	r0, #16
 80182ce:	f7f4 fc9b 	bl	800cc08 <_ZnwjPKci>
 80182d2:	4604      	mov	r4, r0
 80182d4:	4629      	mov	r1, r5
 80182d6:	4620      	mov	r0, r4
 80182d8:	f009 fe98 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182e0:	4619      	mov	r1, r3
 80182e2:	4620      	mov	r0, r4
 80182e4:	f009 feb2 	bl	802204c <_ZN10TestFilter3addEPS_>
 80182e8:	4602      	mov	r2, r0
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80182ee:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 80182f0:	f107 0310 	add.w	r3, r7, #16
 80182f4:	4618      	mov	r0, r3
 80182f6:	f7f8 fb8b 	bl	8010a10 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80182fa:	f107 0320 	add.w	r3, r7, #32
 80182fe:	4618      	mov	r0, r3
 8018300:	f7f7 fbfd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018304:	4623      	mov	r3, r4
}
 8018306:	4618      	mov	r0, r3
 8018308:	3740      	adds	r7, #64	; 0x40
 801830a:	46bd      	mov	sp, r7
 801830c:	bdb0      	pop	{r4, r5, r7, pc}
 801830e:	bf00      	nop
 8018310:	08028298 	.word	0x08028298
 8018314:	08028c48 	.word	0x08028c48
 8018318:	08028c28 	.word	0x08028c28

0801831c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801831c:	b5b0      	push	{r4, r5, r7, lr}
 801831e:	b08c      	sub	sp, #48	; 0x30
 8018320:	af02      	add	r7, sp, #8
 8018322:	60f8      	str	r0, [r7, #12]
 8018324:	60b9      	str	r1, [r7, #8]
 8018326:	607a      	str	r2, [r7, #4]
 8018328:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801832a:	f107 031c 	add.w	r3, r7, #28
 801832e:	491c      	ldr	r1, [pc, #112]	; (80183a0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8018330:	4618      	mov	r0, r3
 8018332:	f7f7 f82c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018336:	f107 0014 	add.w	r0, r7, #20
 801833a:	f107 031c 	add.w	r3, r7, #28
 801833e:	9301      	str	r3, [sp, #4]
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	9300      	str	r3, [sp, #0]
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	68ba      	ldr	r2, [r7, #8]
 8018348:	68f9      	ldr	r1, [r7, #12]
 801834a:	f7ff fea1 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801834e:	f107 0514 	add.w	r5, r7, #20
 8018352:	f240 1225 	movw	r2, #293	; 0x125
 8018356:	4913      	ldr	r1, [pc, #76]	; (80183a4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8018358:	2010      	movs	r0, #16
 801835a:	f7f4 fc55 	bl	800cc08 <_ZnwjPKci>
 801835e:	4604      	mov	r4, r0
 8018360:	4629      	mov	r1, r5
 8018362:	4620      	mov	r0, r4
 8018364:	f009 fe52 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018368:	627c      	str	r4, [r7, #36]	; 0x24
 801836a:	f107 0314 	add.w	r3, r7, #20
 801836e:	4618      	mov	r0, r3
 8018370:	f7f7 fbc5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018374:	f107 031c 	add.w	r3, r7, #28
 8018378:	4618      	mov	r0, r3
 801837a:	f7f7 fbc0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801837e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018380:	f009 fe7f 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018388:	4619      	mov	r1, r3
 801838a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801838c:	f009 fe5e 	bl	802204c <_ZN10TestFilter3addEPS_>
 8018390:	4602      	mov	r2, r0
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018396:	bf00      	nop
 8018398:	3728      	adds	r7, #40	; 0x28
 801839a:	46bd      	mov	sp, r7
 801839c:	bdb0      	pop	{r4, r5, r7, pc}
 801839e:	bf00      	nop
 80183a0:	0802829c 	.word	0x0802829c
 80183a4:	08028c28 	.word	0x08028c28

080183a8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80183a8:	b5b0      	push	{r4, r5, r7, lr}
 80183aa:	b08c      	sub	sp, #48	; 0x30
 80183ac:	af02      	add	r7, sp, #8
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	607a      	str	r2, [r7, #4]
 80183b4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80183b6:	f107 031c 	add.w	r3, r7, #28
 80183ba:	491c      	ldr	r1, [pc, #112]	; (801842c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80183bc:	4618      	mov	r0, r3
 80183be:	f7f6 ffe6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80183c2:	f107 0014 	add.w	r0, r7, #20
 80183c6:	f107 031c 	add.w	r3, r7, #28
 80183ca:	9301      	str	r3, [sp, #4]
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	68ba      	ldr	r2, [r7, #8]
 80183d4:	68f9      	ldr	r1, [r7, #12]
 80183d6:	f7ff fe5b 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80183da:	f107 0514 	add.w	r5, r7, #20
 80183de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80183e2:	4913      	ldr	r1, [pc, #76]	; (8018430 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 80183e4:	2010      	movs	r0, #16
 80183e6:	f7f4 fc0f 	bl	800cc08 <_ZnwjPKci>
 80183ea:	4604      	mov	r4, r0
 80183ec:	4629      	mov	r1, r5
 80183ee:	4620      	mov	r0, r4
 80183f0:	f009 fe0c 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 80183f4:	627c      	str	r4, [r7, #36]	; 0x24
 80183f6:	f107 0314 	add.w	r3, r7, #20
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7f7 fb7f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018400:	f107 031c 	add.w	r3, r7, #28
 8018404:	4618      	mov	r0, r3
 8018406:	f7f7 fb7a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 801840a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801840c:	f009 fe46 	bl	802209c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018414:	4619      	mov	r1, r3
 8018416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018418:	f009 fe18 	bl	802204c <_ZN10TestFilter3addEPS_>
 801841c:	4602      	mov	r2, r0
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018422:	bf00      	nop
 8018424:	3728      	adds	r7, #40	; 0x28
 8018426:	46bd      	mov	sp, r7
 8018428:	bdb0      	pop	{r4, r5, r7, pc}
 801842a:	bf00      	nop
 801842c:	080282a0 	.word	0x080282a0
 8018430:	08028c28 	.word	0x08028c28

08018434 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8018434:	b5b0      	push	{r4, r5, r7, lr}
 8018436:	b08c      	sub	sp, #48	; 0x30
 8018438:	af02      	add	r7, sp, #8
 801843a:	60f8      	str	r0, [r7, #12]
 801843c:	60b9      	str	r1, [r7, #8]
 801843e:	607a      	str	r2, [r7, #4]
 8018440:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8018442:	f107 031c 	add.w	r3, r7, #28
 8018446:	491d      	ldr	r1, [pc, #116]	; (80184bc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8018448:	4618      	mov	r0, r3
 801844a:	f7f6 ffa0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801844e:	f107 0014 	add.w	r0, r7, #20
 8018452:	f107 031c 	add.w	r3, r7, #28
 8018456:	9301      	str	r3, [sp, #4]
 8018458:	683b      	ldr	r3, [r7, #0]
 801845a:	9300      	str	r3, [sp, #0]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	68ba      	ldr	r2, [r7, #8]
 8018460:	68f9      	ldr	r1, [r7, #12]
 8018462:	f7ff fe15 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018466:	f107 0514 	add.w	r5, r7, #20
 801846a:	f240 1233 	movw	r2, #307	; 0x133
 801846e:	4914      	ldr	r1, [pc, #80]	; (80184c0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8018470:	2010      	movs	r0, #16
 8018472:	f7f4 fbc9 	bl	800cc08 <_ZnwjPKci>
 8018476:	4604      	mov	r4, r0
 8018478:	4629      	mov	r1, r5
 801847a:	4620      	mov	r0, r4
 801847c:	f009 fdc6 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018480:	627c      	str	r4, [r7, #36]	; 0x24
 8018482:	f107 0314 	add.w	r3, r7, #20
 8018486:	4618      	mov	r0, r3
 8018488:	f7f7 fb39 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801848c:	f107 031c 	add.w	r3, r7, #28
 8018490:	4618      	mov	r0, r3
 8018492:	f7f7 fb34 	bl	800fafe <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8018496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018498:	f009 fdf3 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 801849c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801849e:	f009 fdfd 	bl	802209c <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a6:	4619      	mov	r1, r3
 80184a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184aa:	f009 fdcf 	bl	802204c <_ZN10TestFilter3addEPS_>
 80184ae:	4602      	mov	r2, r0
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80184b4:	bf00      	nop
 80184b6:	3728      	adds	r7, #40	; 0x28
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bdb0      	pop	{r4, r5, r7, pc}
 80184bc:	080282a4 	.word	0x080282a4
 80184c0:	08028c28 	.word	0x08028c28

080184c4 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80184c4:	b5b0      	push	{r4, r5, r7, lr}
 80184c6:	b08c      	sub	sp, #48	; 0x30
 80184c8:	af02      	add	r7, sp, #8
 80184ca:	60f8      	str	r0, [r7, #12]
 80184cc:	60b9      	str	r1, [r7, #8]
 80184ce:	607a      	str	r2, [r7, #4]
 80184d0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80184d2:	f107 031c 	add.w	r3, r7, #28
 80184d6:	491a      	ldr	r1, [pc, #104]	; (8018540 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80184d8:	4618      	mov	r0, r3
 80184da:	f7f6 ff58 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80184de:	f107 0014 	add.w	r0, r7, #20
 80184e2:	f107 031c 	add.w	r3, r7, #28
 80184e6:	9301      	str	r3, [sp, #4]
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	9300      	str	r3, [sp, #0]
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	68ba      	ldr	r2, [r7, #8]
 80184f0:	68f9      	ldr	r1, [r7, #12]
 80184f2:	f7ff fdcd 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80184f6:	f107 0514 	add.w	r5, r7, #20
 80184fa:	f240 123b 	movw	r2, #315	; 0x13b
 80184fe:	4911      	ldr	r1, [pc, #68]	; (8018544 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8018500:	2010      	movs	r0, #16
 8018502:	f7f4 fb81 	bl	800cc08 <_ZnwjPKci>
 8018506:	4604      	mov	r4, r0
 8018508:	4629      	mov	r1, r5
 801850a:	4620      	mov	r0, r4
 801850c:	f009 fd7e 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018510:	627c      	str	r4, [r7, #36]	; 0x24
 8018512:	f107 0314 	add.w	r3, r7, #20
 8018516:	4618      	mov	r0, r3
 8018518:	f7f7 faf1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801851c:	f107 031c 	add.w	r3, r7, #28
 8018520:	4618      	mov	r0, r3
 8018522:	f7f7 faec 	bl	800fafe <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801852a:	4619      	mov	r1, r3
 801852c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801852e:	f009 fd8d 	bl	802204c <_ZN10TestFilter3addEPS_>
 8018532:	4602      	mov	r2, r0
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018538:	bf00      	nop
 801853a:	3728      	adds	r7, #40	; 0x28
 801853c:	46bd      	mov	sp, r7
 801853e:	bdb0      	pop	{r4, r5, r7, pc}
 8018540:	080282ac 	.word	0x080282ac
 8018544:	08028c28 	.word	0x08028c28

08018548 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8018548:	b5b0      	push	{r4, r5, r7, lr}
 801854a:	b08c      	sub	sp, #48	; 0x30
 801854c:	af02      	add	r7, sp, #8
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
 8018554:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8018556:	f107 031c 	add.w	r3, r7, #28
 801855a:	491c      	ldr	r1, [pc, #112]	; (80185cc <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 801855c:	4618      	mov	r0, r3
 801855e:	f7f6 ff16 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018562:	f107 0014 	add.w	r0, r7, #20
 8018566:	f107 031c 	add.w	r3, r7, #28
 801856a:	9301      	str	r3, [sp, #4]
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	9300      	str	r3, [sp, #0]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	68ba      	ldr	r2, [r7, #8]
 8018574:	68f9      	ldr	r1, [r7, #12]
 8018576:	f7ff fd8b 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801857a:	f107 0514 	add.w	r5, r7, #20
 801857e:	f240 1241 	movw	r2, #321	; 0x141
 8018582:	4913      	ldr	r1, [pc, #76]	; (80185d0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 8018584:	2010      	movs	r0, #16
 8018586:	f7f4 fb3f 	bl	800cc08 <_ZnwjPKci>
 801858a:	4604      	mov	r4, r0
 801858c:	4629      	mov	r1, r5
 801858e:	4620      	mov	r0, r4
 8018590:	f009 fd3c 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018594:	627c      	str	r4, [r7, #36]	; 0x24
 8018596:	f107 0314 	add.w	r3, r7, #20
 801859a:	4618      	mov	r0, r3
 801859c:	f7f7 faaf 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80185a0:	f107 031c 	add.w	r3, r7, #28
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7f7 faaa 	bl	800fafe <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80185aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185ac:	f009 fd69 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185b4:	4619      	mov	r1, r3
 80185b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185b8:	f009 fd48 	bl	802204c <_ZN10TestFilter3addEPS_>
 80185bc:	4602      	mov	r2, r0
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80185c2:	bf00      	nop
 80185c4:	3728      	adds	r7, #40	; 0x28
 80185c6:	46bd      	mov	sp, r7
 80185c8:	bdb0      	pop	{r4, r5, r7, pc}
 80185ca:	bf00      	nop
 80185cc:	080282b0 	.word	0x080282b0
 80185d0:	08028c28 	.word	0x08028c28

080185d4 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80185d4:	b5b0      	push	{r4, r5, r7, lr}
 80185d6:	b08c      	sub	sp, #48	; 0x30
 80185d8:	af02      	add	r7, sp, #8
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
 80185e0:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80185e2:	f107 031c 	add.w	r3, r7, #28
 80185e6:	491c      	ldr	r1, [pc, #112]	; (8018658 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7f6 fed0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80185ee:	f107 0014 	add.w	r0, r7, #20
 80185f2:	f107 031c 	add.w	r3, r7, #28
 80185f6:	9301      	str	r3, [sp, #4]
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	68ba      	ldr	r2, [r7, #8]
 8018600:	68f9      	ldr	r1, [r7, #12]
 8018602:	f7ff fd45 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018606:	f107 0514 	add.w	r5, r7, #20
 801860a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801860e:	4913      	ldr	r1, [pc, #76]	; (801865c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8018610:	2010      	movs	r0, #16
 8018612:	f7f4 faf9 	bl	800cc08 <_ZnwjPKci>
 8018616:	4604      	mov	r4, r0
 8018618:	4629      	mov	r1, r5
 801861a:	4620      	mov	r0, r4
 801861c:	f009 fcf6 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018620:	627c      	str	r4, [r7, #36]	; 0x24
 8018622:	f107 0314 	add.w	r3, r7, #20
 8018626:	4618      	mov	r0, r3
 8018628:	f7f7 fa69 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801862c:	f107 031c 	add.w	r3, r7, #28
 8018630:	4618      	mov	r0, r3
 8018632:	f7f7 fa64 	bl	800fafe <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8018636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018638:	f009 fd30 	bl	802209c <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018640:	4619      	mov	r1, r3
 8018642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018644:	f009 fd02 	bl	802204c <_ZN10TestFilter3addEPS_>
 8018648:	4602      	mov	r2, r0
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801864e:	bf00      	nop
 8018650:	3728      	adds	r7, #40	; 0x28
 8018652:	46bd      	mov	sp, r7
 8018654:	bdb0      	pop	{r4, r5, r7, pc}
 8018656:	bf00      	nop
 8018658:	080282b4 	.word	0x080282b4
 801865c:	08028c28 	.word	0x08028c28

08018660 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8018660:	b5b0      	push	{r4, r5, r7, lr}
 8018662:	b08c      	sub	sp, #48	; 0x30
 8018664:	af02      	add	r7, sp, #8
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
 801866c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801866e:	f107 031c 	add.w	r3, r7, #28
 8018672:	491d      	ldr	r1, [pc, #116]	; (80186e8 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8018674:	4618      	mov	r0, r3
 8018676:	f7f6 fe8a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801867a:	f107 0014 	add.w	r0, r7, #20
 801867e:	f107 031c 	add.w	r3, r7, #28
 8018682:	9301      	str	r3, [sp, #4]
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	9300      	str	r3, [sp, #0]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	68ba      	ldr	r2, [r7, #8]
 801868c:	68f9      	ldr	r1, [r7, #12]
 801868e:	f7ff fcff 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018692:	f107 0514 	add.w	r5, r7, #20
 8018696:	f240 124f 	movw	r2, #335	; 0x14f
 801869a:	4914      	ldr	r1, [pc, #80]	; (80186ec <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 801869c:	2010      	movs	r0, #16
 801869e:	f7f4 fab3 	bl	800cc08 <_ZnwjPKci>
 80186a2:	4604      	mov	r4, r0
 80186a4:	4629      	mov	r1, r5
 80186a6:	4620      	mov	r0, r4
 80186a8:	f009 fcb0 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 80186ac:	627c      	str	r4, [r7, #36]	; 0x24
 80186ae:	f107 0314 	add.w	r3, r7, #20
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7f7 fa23 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80186b8:	f107 031c 	add.w	r3, r7, #28
 80186bc:	4618      	mov	r0, r3
 80186be:	f7f7 fa1e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80186c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186c4:	f009 fcea 	bl	802209c <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80186c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186ca:	f009 fcda 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186d2:	4619      	mov	r1, r3
 80186d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186d6:	f009 fcb9 	bl	802204c <_ZN10TestFilter3addEPS_>
 80186da:	4602      	mov	r2, r0
 80186dc:	68fb      	ldr	r3, [r7, #12]
 80186de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80186e0:	bf00      	nop
 80186e2:	3728      	adds	r7, #40	; 0x28
 80186e4:	46bd      	mov	sp, r7
 80186e6:	bdb0      	pop	{r4, r5, r7, pc}
 80186e8:	080282b8 	.word	0x080282b8
 80186ec:	08028c28 	.word	0x08028c28

080186f0 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80186f0:	b5b0      	push	{r4, r5, r7, lr}
 80186f2:	b092      	sub	sp, #72	; 0x48
 80186f4:	af02      	add	r7, sp, #8
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	60b9      	str	r1, [r7, #8]
 80186fa:	607a      	str	r2, [r7, #4]
 80186fc:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80186fe:	f107 0320 	add.w	r3, r7, #32
 8018702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018704:	4618      	mov	r0, r3
 8018706:	f7f6 fe42 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801870a:	f107 0018 	add.w	r0, r7, #24
 801870e:	f107 0320 	add.w	r3, r7, #32
 8018712:	9301      	str	r3, [sp, #4]
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	9300      	str	r3, [sp, #0]
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	68ba      	ldr	r2, [r7, #8]
 801871c:	68f9      	ldr	r1, [r7, #12]
 801871e:	f7ff fcb7 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018722:	f107 0320 	add.w	r3, r7, #32
 8018726:	4618      	mov	r0, r3
 8018728:	f7f7 f9e9 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801872c:	f107 0010 	add.w	r0, r7, #16
 8018730:	f107 0118 	add.w	r1, r7, #24
 8018734:	2329      	movs	r3, #41	; 0x29
 8018736:	222c      	movs	r2, #44	; 0x2c
 8018738:	f7f7 fb92 	bl	800fe60 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 801873c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018740:	f107 0110 	add.w	r1, r7, #16
 8018744:	2202      	movs	r2, #2
 8018746:	4618      	mov	r0, r3
 8018748:	f7f7 fb2c 	bl	800fda4 <_ZNK12SimpleString9subStringEj>
 801874c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018750:	f107 0310 	add.w	r3, r7, #16
 8018754:	4611      	mov	r1, r2
 8018756:	4618      	mov	r0, r3
 8018758:	f7f6 fe85 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801875c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018760:	4618      	mov	r0, r3
 8018762:	f7f7 f9cc 	bl	800fafe <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8018766:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801876a:	492a      	ldr	r1, [pc, #168]	; (8018814 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 801876c:	2010      	movs	r0, #16
 801876e:	f7f4 fa4b 	bl	800cc08 <_ZnwjPKci>
 8018772:	4604      	mov	r4, r0
 8018774:	f107 0310 	add.w	r3, r7, #16
 8018778:	4619      	mov	r1, r3
 801877a:	4620      	mov	r0, r4
 801877c:	f009 fc46 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 8018780:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8018782:	f107 0318 	add.w	r3, r7, #24
 8018786:	2100      	movs	r1, #0
 8018788:	4618      	mov	r0, r3
 801878a:	f7f7 fb1c 	bl	800fdc6 <_ZNK12SimpleString2atEj>
 801878e:	4603      	mov	r3, r0
 8018790:	461a      	mov	r2, r3
 8018792:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018796:	f107 0118 	add.w	r1, r7, #24
 801879a:	232c      	movs	r3, #44	; 0x2c
 801879c:	f7f7 fb60 	bl	800fe60 <_ZNK12SimpleString17subStringFromTillEcc>
 80187a0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80187a4:	f240 125b 	movw	r2, #347	; 0x15b
 80187a8:	491a      	ldr	r1, [pc, #104]	; (8018814 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80187aa:	2010      	movs	r0, #16
 80187ac:	f7f4 fa2c 	bl	800cc08 <_ZnwjPKci>
 80187b0:	4604      	mov	r4, r0
 80187b2:	4629      	mov	r1, r5
 80187b4:	4620      	mov	r0, r4
 80187b6:	f009 fc29 	bl	802200c <_ZN10TestFilterC1ERK12SimpleString>
 80187ba:	63bc      	str	r4, [r7, #56]	; 0x38
 80187bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7f7 f99c 	bl	800fafe <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80187c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80187c8:	f009 fc5b 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80187cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187ce:	f009 fc58 	bl	8022082 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187d6:	4619      	mov	r1, r3
 80187d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187da:	f009 fc37 	bl	802204c <_ZN10TestFilter3addEPS_>
 80187de:	4602      	mov	r2, r0
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187e8:	4619      	mov	r1, r3
 80187ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80187ec:	f009 fc2e 	bl	802204c <_ZN10TestFilter3addEPS_>
 80187f0:	4602      	mov	r2, r0
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80187f6:	f107 0310 	add.w	r3, r7, #16
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7f7 f97f 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8018800:	f107 0318 	add.w	r3, r7, #24
 8018804:	4618      	mov	r0, r3
 8018806:	f7f7 f97a 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801880a:	bf00      	nop
 801880c:	3740      	adds	r7, #64	; 0x40
 801880e:	46bd      	mov	sp, r7
 8018810:	bdb0      	pop	{r4, r5, r7, pc}
 8018812:	bf00      	nop
 8018814:	08028c28 	.word	0x08028c28

08018818 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8018818:	b590      	push	{r4, r7, lr}
 801881a:	b08b      	sub	sp, #44	; 0x2c
 801881c:	af02      	add	r7, sp, #8
 801881e:	60f8      	str	r0, [r7, #12]
 8018820:	60b9      	str	r1, [r7, #8]
 8018822:	607a      	str	r2, [r7, #4]
 8018824:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8018826:	f107 0318 	add.w	r3, r7, #24
 801882a:	491b      	ldr	r1, [pc, #108]	; (8018898 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801882c:	4618      	mov	r0, r3
 801882e:	f7f6 fdae 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018832:	f107 0010 	add.w	r0, r7, #16
 8018836:	f107 0318 	add.w	r3, r7, #24
 801883a:	9301      	str	r3, [sp, #4]
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	9300      	str	r3, [sp, #0]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	68ba      	ldr	r2, [r7, #8]
 8018844:	68f9      	ldr	r1, [r7, #12]
 8018846:	f7ff fc23 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801884a:	f107 0318 	add.w	r3, r7, #24
 801884e:	4618      	mov	r0, r3
 8018850:	f7f7 f955 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8018854:	f107 0310 	add.w	r3, r7, #16
 8018858:	4618      	mov	r0, r3
 801885a:	f7f7 f92f 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 801885e:	4603      	mov	r3, r0
 8018860:	2b00      	cmp	r3, #0
 8018862:	bf0c      	ite	eq
 8018864:	2301      	moveq	r3, #1
 8018866:	2300      	movne	r3, #0
 8018868:	b2db      	uxtb	r3, r3
 801886a:	2b00      	cmp	r3, #0
 801886c:	d001      	beq.n	8018872 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801886e:	2400      	movs	r4, #0
 8018870:	e008      	b.n	8018884 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	3330      	adds	r3, #48	; 0x30
 8018876:	f107 0210 	add.w	r2, r7, #16
 801887a:	4611      	mov	r1, r2
 801887c:	4618      	mov	r0, r3
 801887e:	f7f6 fdf2 	bl	800f466 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8018882:	2401      	movs	r4, #1
 8018884:	f107 0310 	add.w	r3, r7, #16
 8018888:	4618      	mov	r0, r3
 801888a:	f7f7 f938 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801888e:	2c01      	cmp	r4, #1
}
 8018890:	3724      	adds	r7, #36	; 0x24
 8018892:	46bd      	mov	sp, r7
 8018894:	bd90      	pop	{r4, r7, pc}
 8018896:	bf00      	nop
 8018898:	080282e0 	.word	0x080282e0

0801889c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 801889c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801889e:	b093      	sub	sp, #76	; 0x4c
 80188a0:	af02      	add	r7, sp, #8
 80188a2:	60f8      	str	r0, [r7, #12]
 80188a4:	60b9      	str	r1, [r7, #8]
 80188a6:	607a      	str	r2, [r7, #4]
 80188a8:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80188aa:	f107 0318 	add.w	r3, r7, #24
 80188ae:	4953      	ldr	r1, [pc, #332]	; (80189fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7f6 fd6c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80188b6:	f107 0010 	add.w	r0, r7, #16
 80188ba:	f107 0318 	add.w	r3, r7, #24
 80188be:	9301      	str	r3, [sp, #4]
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	9300      	str	r3, [sp, #0]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	68ba      	ldr	r2, [r7, #8]
 80188c8:	68f9      	ldr	r1, [r7, #12]
 80188ca:	f7ff fbe1 	bl	8018090 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80188ce:	f107 0318 	add.w	r3, r7, #24
 80188d2:	4618      	mov	r0, r3
 80188d4:	f7f7 f913 	bl	800fafe <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80188d8:	f107 0310 	add.w	r3, r7, #16
 80188dc:	4618      	mov	r0, r3
 80188de:	f7f7 f8ed 	bl	800fabc <_ZNK12SimpleString4sizeEv>
 80188e2:	4603      	mov	r3, r0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	bf0c      	ite	eq
 80188e8:	2301      	moveq	r3, #1
 80188ea:	2300      	movne	r3, #0
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d001      	beq.n	80188f6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80188f2:	2400      	movs	r4, #0
 80188f4:	e078      	b.n	80189e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80188f6:	2500      	movs	r5, #0
 80188f8:	f107 0320 	add.w	r3, r7, #32
 80188fc:	4940      	ldr	r1, [pc, #256]	; (8018a00 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80188fe:	4618      	mov	r0, r3
 8018900:	f7f6 fd45 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018904:	2601      	movs	r6, #1
 8018906:	f107 0220 	add.w	r2, r7, #32
 801890a:	f107 0310 	add.w	r3, r7, #16
 801890e:	4611      	mov	r1, r2
 8018910:	4618      	mov	r0, r3
 8018912:	f7f7 f900 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8018916:	4603      	mov	r3, r0
 8018918:	2b00      	cmp	r3, #0
 801891a:	d111      	bne.n	8018940 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 801891c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018920:	4938      	ldr	r1, [pc, #224]	; (8018a04 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8018922:	4618      	mov	r0, r3
 8018924:	f7f6 fd33 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8018928:	2501      	movs	r5, #1
 801892a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801892e:	f107 0310 	add.w	r3, r7, #16
 8018932:	4611      	mov	r1, r2
 8018934:	4618      	mov	r0, r3
 8018936:	f7f7 f8ee 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801893a:	4603      	mov	r3, r0
 801893c:	2b00      	cmp	r3, #0
 801893e:	d001      	beq.n	8018944 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8018940:	2401      	movs	r4, #1
 8018942:	e000      	b.n	8018946 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8018944:	2400      	movs	r4, #0
 8018946:	2d00      	cmp	r5, #0
 8018948:	d004      	beq.n	8018954 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 801894a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801894e:	4618      	mov	r0, r3
 8018950:	f7f7 f8d5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018954:	2e00      	cmp	r6, #0
 8018956:	d004      	beq.n	8018962 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8018958:	f107 0320 	add.w	r3, r7, #32
 801895c:	4618      	mov	r0, r3
 801895e:	f7f7 f8ce 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8018962:	2c00      	cmp	r4, #0
 8018964:	d005      	beq.n	8018972 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	2200      	movs	r2, #0
 801896a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801896e:	2401      	movs	r4, #1
 8018970:	e03a      	b.n	80189e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8018972:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018976:	4924      	ldr	r1, [pc, #144]	; (8018a08 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8018978:	4618      	mov	r0, r3
 801897a:	f7f6 fd08 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801897e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018982:	f107 0310 	add.w	r3, r7, #16
 8018986:	4611      	mov	r1, r2
 8018988:	4618      	mov	r0, r3
 801898a:	f7f7 f8c4 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801898e:	4603      	mov	r3, r0
 8018990:	461c      	mov	r4, r3
 8018992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018996:	4618      	mov	r0, r3
 8018998:	f7f7 f8b1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801899c:	2c00      	cmp	r4, #0
 801899e:	d005      	beq.n	80189ac <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2201      	movs	r2, #1
 80189a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80189a8:	2401      	movs	r4, #1
 80189aa:	e01d      	b.n	80189e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80189ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189b0:	4916      	ldr	r1, [pc, #88]	; (8018a0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7f6 fceb 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80189b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80189bc:	f107 0310 	add.w	r3, r7, #16
 80189c0:	4611      	mov	r1, r2
 80189c2:	4618      	mov	r0, r3
 80189c4:	f7f7 f8a7 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80189c8:	4603      	mov	r3, r0
 80189ca:	461c      	mov	r4, r3
 80189cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7f7 f894 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80189d6:	2c00      	cmp	r4, #0
 80189d8:	d005      	beq.n	80189e6 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	2202      	movs	r2, #2
 80189de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80189e2:	2401      	movs	r4, #1
 80189e4:	e000      	b.n	80189e8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80189e6:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80189e8:	f107 0310 	add.w	r3, r7, #16
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7f7 f886 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80189f2:	4623      	mov	r3, r4
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3744      	adds	r7, #68	; 0x44
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189fc:	080282dc 	.word	0x080282dc
 8018a00:	08028c4c 	.word	0x08028c4c
 8018a04:	08028c54 	.word	0x08028c54
 8018a08:	08028c5c 	.word	0x08028c5c
 8018a0c:	08028c64 	.word	0x08028c64

08018a10 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8018a10:	b480      	push	{r7}
 8018a12:	b083      	sub	sp, #12
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	bf0c      	ite	eq
 8018a22:	2301      	moveq	r3, #1
 8018a24:	2300      	movne	r3, #0
 8018a26:	b2db      	uxtb	r3, r3
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	370c      	adds	r7, #12
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a32:	4770      	bx	lr

08018a34 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8018a34:	b480      	push	{r7}
 8018a36:	b083      	sub	sp, #12
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a42:	2b02      	cmp	r3, #2
 8018a44:	bf0c      	ite	eq
 8018a46:	2301      	moveq	r3, #1
 8018a48:	2300      	movne	r3, #0
 8018a4a:	b2db      	uxtb	r3, r3
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	370c      	adds	r7, #12
 8018a50:	46bd      	mov	sp, r7
 8018a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a56:	4770      	bx	lr

08018a58 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
    return packageName_;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	3330      	adds	r3, #48	; 0x30
}
 8018a64:	4618      	mov	r0, r3
 8018a66:	370c      	adds	r7, #12
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6e:	4770      	bx	lr

08018a70 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8018a70:	b480      	push	{r7}
 8018a72:	b083      	sub	sp, #12
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	2200      	movs	r2, #0
 8018a7c:	601a      	str	r2, [r3, #0]
    {}
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	4618      	mov	r0, r3
 8018a82:	370c      	adds	r7, #12
 8018a84:	46bd      	mov	sp, r7
 8018a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8a:	4770      	bx	lr

08018a8c <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8018a8c:	b480      	push	{r7}
 8018a8e:	b083      	sub	sp, #12
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	601a      	str	r2, [r3, #0]
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018aa4:	3304      	adds	r3, #4
 8018aa6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018aaa:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	2200      	movs	r2, #0
 8018ab0:	701a      	strb	r2, [r3, #0]
}
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	370c      	adds	r7, #12
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abe:	4770      	bx	lr

08018ac0 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018ace:	2200      	movs	r2, #0
 8018ad0:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	701a      	strb	r2, [r3, #0]
}
 8018ad8:	bf00      	nop
 8018ada:	370c      	adds	r7, #12
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr

08018ae4 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8018ae4:	b40e      	push	{r1, r2, r3}
 8018ae6:	b590      	push	{r4, r7, lr}
 8018ae8:	b086      	sub	sp, #24
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018af4:	3304      	adds	r3, #4
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	1ad3      	subs	r3, r2, r3
 8018b02:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d032      	beq.n	8018b70 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8018b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018b0e:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8018b10:	4b1b      	ldr	r3, [pc, #108]	; (8018b80 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8018b12:	681c      	ldr	r4, [r3, #0]
 8018b14:	687a      	ldr	r2, [r7, #4]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	18d0      	adds	r0, r2, r3
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	1c59      	adds	r1, r3, #1
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b28:	47a0      	blx	r4
 8018b2a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8018b2c:	693b      	ldr	r3, [r7, #16]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	dd09      	ble.n	8018b46 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b38:	681a      	ldr	r2, [r3, #0]
 8018b3a:	693b      	ldr	r3, [r7, #16]
 8018b3c:	441a      	add	r2, r3
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b44:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b54:	3304      	adds	r3, #4
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d90a      	bls.n	8018b72 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b62:	3304      	adds	r3, #4
 8018b64:	681a      	ldr	r2, [r3, #0]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018b6c:	601a      	str	r2, [r3, #0]
 8018b6e:	e000      	b.n	8018b72 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8018b70:	bf00      	nop
    va_end(arguments);
}
 8018b72:	3718      	adds	r7, #24
 8018b74:	46bd      	mov	sp, r7
 8018b76:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018b7a:	b003      	add	sp, #12
 8018b7c:	4770      	bx	lr
 8018b7e:	bf00      	nop
 8018b80:	200000b0 	.word	0x200000b0

08018b84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b08c      	sub	sp, #48	; 0x30
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	60f8      	str	r0, [r7, #12]
 8018b8c:	60b9      	str	r1, [r7, #8]
 8018b8e:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8018b94:	2310      	movs	r3, #16
 8018b96:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8018b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d273      	bcs.n	8018c8c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8018ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ba6:	493b      	ldr	r1, [pc, #236]	; (8018c94 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8018ba8:	68f8      	ldr	r0, [r7, #12]
 8018baa:	f7ff ff9b 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb2:	1ad3      	subs	r3, r2, r3
 8018bb4:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8018bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb8:	2b10      	cmp	r3, #16
 8018bba:	d901      	bls.n	8018bc0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8018bbc:	2310      	movs	r3, #16
 8018bbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8018bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bc2:	f1c3 0310 	rsb	r3, r3, #16
 8018bc6:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8018bc8:	2300      	movs	r3, #0
 8018bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	d215      	bcs.n	8018c00 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8018bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd8:	4413      	add	r3, r2
 8018bda:	69fa      	ldr	r2, [r7, #28]
 8018bdc:	4413      	add	r3, r2
 8018bde:	781b      	ldrb	r3, [r3, #0]
 8018be0:	461a      	mov	r2, r3
 8018be2:	492d      	ldr	r1, [pc, #180]	; (8018c98 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8018be4:	68f8      	ldr	r0, [r7, #12]
 8018be6:	f7ff ff7d 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8018bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bec:	2b07      	cmp	r3, #7
 8018bee:	d103      	bne.n	8018bf8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8018bf0:	492a      	ldr	r1, [pc, #168]	; (8018c9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8018bf2:	68f8      	ldr	r0, [r7, #12]
 8018bf4:	f7ff ff76 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8018bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bfe:	e7e5      	b.n	8018bcc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8018c00:	2300      	movs	r3, #0
 8018c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	429a      	cmp	r2, r3
 8018c0a:	d207      	bcs.n	8018c1c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8018c0c:	4924      	ldr	r1, [pc, #144]	; (8018ca0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8018c0e:	68f8      	ldr	r0, [r7, #12]
 8018c10:	f7ff ff68 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8018c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c16:	3301      	adds	r3, #1
 8018c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c1a:	e7f3      	b.n	8018c04 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8018c1c:	697b      	ldr	r3, [r7, #20]
 8018c1e:	2b08      	cmp	r3, #8
 8018c20:	d903      	bls.n	8018c2a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8018c22:	491e      	ldr	r1, [pc, #120]	; (8018c9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8018c24:	68f8      	ldr	r0, [r7, #12]
 8018c26:	f7ff ff5d 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8018c2a:	491e      	ldr	r1, [pc, #120]	; (8018ca4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8018c2c:	68f8      	ldr	r0, [r7, #12]
 8018c2e:	f7ff ff59 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8018c32:	2300      	movs	r3, #0
 8018c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c3a:	429a      	cmp	r2, r3
 8018c3c:	d21d      	bcs.n	8018c7a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8018c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c42:	4413      	add	r3, r2
 8018c44:	69fa      	ldr	r2, [r7, #28]
 8018c46:	4413      	add	r3, r2
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8018c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c52:	2b1f      	cmp	r3, #31
 8018c54:	d903      	bls.n	8018c5e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8018c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c5a:	2b7e      	cmp	r3, #126	; 0x7e
 8018c5c:	d902      	bls.n	8018c64 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8018c5e:	232e      	movs	r3, #46	; 0x2e
 8018c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8018c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c68:	461a      	mov	r2, r3
 8018c6a:	490f      	ldr	r1, [pc, #60]	; (8018ca8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8018c6c:	68f8      	ldr	r0, [r7, #12]
 8018c6e:	f7ff ff39 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8018c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c74:	3301      	adds	r3, #1
 8018c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c78:	e7dd      	b.n	8018c36 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8018c7a:	490c      	ldr	r1, [pc, #48]	; (8018cac <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8018c7c:	68f8      	ldr	r0, [r7, #12]
 8018c7e:	f7ff ff31 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8018c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c86:	4413      	add	r3, r2
 8018c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8018c8a:	e787      	b.n	8018b9c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8018c8c:	bf00      	nop
 8018c8e:	3730      	adds	r7, #48	; 0x30
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}
 8018c94:	08028c7c 	.word	0x08028c7c
 8018c98:	08028c88 	.word	0x08028c88
 8018c9c:	08028c90 	.word	0x08028c90
 8018ca0:	08028c94 	.word	0x08028c94
 8018ca4:	08028c98 	.word	0x08028c98
 8018ca8:	08028c9c 	.word	0x08028c9c
 8018cac:	08028ca0 	.word	0x08028ca0

08018cb0 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8018cb0:	b480      	push	{r7}
 8018cb2:	b083      	sub	sp, #12
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
    return buffer_;
 8018cb8:	687b      	ldr	r3, [r7, #4]
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	370c      	adds	r7, #12
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc4:	4770      	bx	lr

08018cc6 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8018cc6:	b480      	push	{r7}
 8018cc8:	b083      	sub	sp, #12
 8018cca:	af00      	add	r7, sp, #0
 8018ccc:	6078      	str	r0, [r7, #4]
 8018cce:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018cd6:	3304      	adds	r3, #4
 8018cd8:	683a      	ldr	r2, [r7, #0]
 8018cda:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018ce2:	3304      	adds	r3, #4
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018cea:	d306      	bcc.n	8018cfa <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018cf2:	3304      	adds	r3, #4
 8018cf4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018cf8:	601a      	str	r2, [r3, #0]
}
 8018cfa:	bf00      	nop
 8018cfc:	370c      	adds	r7, #12
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d04:	4770      	bx	lr

08018d06 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8018d06:	b480      	push	{r7}
 8018d08:	b083      	sub	sp, #12
 8018d0a:	af00      	add	r7, sp, #0
 8018d0c:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d14:	3304      	adds	r3, #4
 8018d16:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018d1a:	601a      	str	r2, [r3, #0]
}
 8018d1c:	bf00      	nop
 8018d1e:	370c      	adds	r7, #12
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr

08018d28 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b083      	sub	sp, #12
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d36:	681a      	ldr	r2, [r3, #0]
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018d3e:	3304      	adds	r3, #4
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	429a      	cmp	r2, r3
 8018d44:	bf2c      	ite	cs
 8018d46:	2301      	movcs	r3, #1
 8018d48:	2300      	movcc	r3, #0
 8018d4a:	b2db      	uxtb	r3, r3
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2200      	movs	r2, #0
 8018d64:	601a      	str	r2, [r3, #0]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2200      	movs	r2, #0
 8018d6a:	711a      	strb	r2, [r3, #4]
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	3308      	adds	r3, #8
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7ff fe8b 	bl	8018a8c <_ZN18SimpleStringBufferC1Ev>
{
}
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	4618      	mov	r0, r3
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8018d80:	b5b0      	push	{r4, r5, r7, lr}
 8018d82:	b086      	sub	sp, #24
 8018d84:	af02      	add	r7, sp, #8
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
 8018d8c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	f103 0408 	add.w	r4, r3, #8
 8018d94:	687d      	ldr	r5, [r7, #4]
 8018d96:	6a3b      	ldr	r3, [r7, #32]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	3314      	adds	r3, #20
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	6a38      	ldr	r0, [r7, #32]
 8018da0:	4798      	blx	r3
 8018da2:	4603      	mov	r3, r0
 8018da4:	9301      	str	r3, [sp, #4]
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	9300      	str	r3, [sp, #0]
 8018daa:	462b      	mov	r3, r5
 8018dac:	68ba      	ldr	r2, [r7, #8]
 8018dae:	4904      	ldr	r1, [pc, #16]	; (8018dc0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8018db0:	4620      	mov	r0, r4
 8018db2:	f7ff fe97 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018db6:	bf00      	nop
 8018db8:	3710      	adds	r7, #16
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	08028ca4 	.word	0x08028ca4

08018dc4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8018dc4:	b5b0      	push	{r4, r5, r7, lr}
 8018dc6:	b086      	sub	sp, #24
 8018dc8:	af02      	add	r7, sp, #8
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	f103 0408 	add.w	r4, r3, #8
 8018dd8:	687d      	ldr	r5, [r7, #4]
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	3318      	adds	r3, #24
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	6838      	ldr	r0, [r7, #0]
 8018de4:	4798      	blx	r3
 8018de6:	4603      	mov	r3, r0
 8018de8:	9300      	str	r3, [sp, #0]
 8018dea:	462b      	mov	r3, r5
 8018dec:	68ba      	ldr	r2, [r7, #8]
 8018dee:	4904      	ldr	r1, [pc, #16]	; (8018e00 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8018df0:	4620      	mov	r0, r4
 8018df2:	f7ff fe77 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018df6:	bf00      	nop
 8018df8:	3710      	adds	r7, #16
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	08028cdc 	.word	0x08028cdc

08018e04 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	3308      	adds	r3, #8
 8018e10:	4903      	ldr	r1, [pc, #12]	; (8018e20 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7ff fe66 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	08028d0c 	.word	0x08028d0c

08018e24 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2200      	movs	r2, #0
 8018e36:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8018e38:	2367      	movs	r3, #103	; 0x67
 8018e3a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8018e42:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f103 0208 	add.w	r2, r3, #8
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8018e50:	4619      	mov	r1, r3
 8018e52:	4610      	mov	r0, r2
 8018e54:	f7ff ff37 	bl	8018cc6 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8018e58:	bf00      	nop
 8018e5a:	3710      	adds	r7, #16
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8018e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e62:	b089      	sub	sp, #36	; 0x24
 8018e64:	af04      	add	r7, sp, #16
 8018e66:	60f8      	str	r0, [r7, #12]
 8018e68:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d102      	bne.n	8018e78 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8018e72:	68f8      	ldr	r0, [r7, #12]
 8018e74:	f000 f882 	bl	8018f7c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	1c5a      	adds	r2, r3, #1
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	f103 0508 	add.w	r5, r3, #8
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8018e8c:	68bb      	ldr	r3, [r7, #8]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018e92:	68bb      	ldr	r3, [r7, #8]
 8018e94:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018e9a:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8018e9c:	68bb      	ldr	r3, [r7, #8]
 8018e9e:	695a      	ldr	r2, [r3, #20]
 8018ea0:	68bb      	ldr	r3, [r7, #8]
 8018ea2:	695b      	ldr	r3, [r3, #20]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	3314      	adds	r3, #20
 8018ea8:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018eaa:	4610      	mov	r0, r2
 8018eac:	4798      	blx	r3
 8018eae:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8018eb4:	9303      	str	r3, [sp, #12]
 8018eb6:	9202      	str	r2, [sp, #8]
 8018eb8:	683a      	ldr	r2, [r7, #0]
 8018eba:	9201      	str	r2, [sp, #4]
 8018ebc:	9400      	str	r4, [sp, #0]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	4632      	mov	r2, r6
 8018ec2:	4915      	ldr	r1, [pc, #84]	; (8018f18 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	f7ff fe0d 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	f103 0008 	add.w	r0, r3, #8
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	6899      	ldr	r1, [r3, #8]
 8018ed4:	68bb      	ldr	r3, [r7, #8]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	461a      	mov	r2, r3
 8018eda:	f7ff fe53 	bl	8018b84 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8018ede:	68bb      	ldr	r3, [r7, #8]
 8018ee0:	695a      	ldr	r2, [r3, #20]
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	695b      	ldr	r3, [r3, #20]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	3314      	adds	r3, #20
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	4610      	mov	r0, r2
 8018eee:	4798      	blx	r3
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	490a      	ldr	r1, [pc, #40]	; (8018f1c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7f6 f887 	bl	800f008 <_ZN12SimpleString6StrCmpEPKcS1_>
 8018efa:	4603      	mov	r3, r0
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	bf0c      	ite	eq
 8018f00:	2301      	moveq	r3, #1
 8018f02:	2300      	movne	r3, #0
 8018f04:	b2db      	uxtb	r3, r3
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d002      	beq.n	8018f10 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	2201      	movs	r2, #1
 8018f0e:	711a      	strb	r2, [r3, #4]
}
 8018f10:	bf00      	nop
 8018f12:	3714      	adds	r7, #20
 8018f14:	46bd      	mov	sp, r7
 8018f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f18:	08028d2c 	.word	0x08028d2c
 8018f1c:	08028d8c 	.word	0x08028d8c

08018f20 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b084      	sub	sp, #16
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d103      	bne.n	8018f38 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8018f30:	6878      	ldr	r0, [r7, #4]
 8018f32:	f7ff ff67 	bl	8018e04 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8018f36:	e01e      	b.n	8018f76 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	3308      	adds	r3, #8
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7ff fef3 	bl	8018d28 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8018f42:	4603      	mov	r3, r0
 8018f44:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	3308      	adds	r3, #8
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f7ff fedb 	bl	8018d06 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8018f50:	7bfb      	ldrb	r3, [r7, #15]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d002      	beq.n	8018f5c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8018f56:	6878      	ldr	r0, [r7, #4]
 8018f58:	f000 f820 	bl	8018f9c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	4619      	mov	r1, r3
 8018f62:	6878      	ldr	r0, [r7, #4]
 8018f64:	f000 f82a 	bl	8018fbc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	791b      	ldrb	r3, [r3, #4]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d002      	beq.n	8018f76 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8018f70:	6878      	ldr	r0, [r7, #4]
 8018f72:	f000 f839 	bl	8018fe8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8018f76:	3710      	adds	r7, #16
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}

08018f7c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	3308      	adds	r3, #8
 8018f88:	4903      	ldr	r1, [pc, #12]	; (8018f98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7ff fdaa 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018f90:	bf00      	nop
 8018f92:	3708      	adds	r7, #8
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	08028d94 	.word	0x08028d94

08018f9c <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b082      	sub	sp, #8
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	3308      	adds	r3, #8
 8018fa8:	4903      	ldr	r1, [pc, #12]	; (8018fb8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7ff fd9a 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018fb0:	bf00      	nop
 8018fb2:	3708      	adds	r7, #8
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	bd80      	pop	{r7, pc}
 8018fb8:	08028dac 	.word	0x08028dac

08018fbc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f103 0008 	add.w	r0, r3, #8
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	4a04      	ldr	r2, [pc, #16]	; (8018fe0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8018fd0:	4904      	ldr	r1, [pc, #16]	; (8018fe4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8018fd2:	f7ff fd87 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018fd6:	bf00      	nop
 8018fd8:	3708      	adds	r7, #8
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	08028df4 	.word	0x08028df4
 8018fe4:	08028e0c 	.word	0x08028e0c

08018fe8 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	3308      	adds	r3, #8
 8018ff4:	4903      	ldr	r1, [pc, #12]	; (8019004 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7ff fd74 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018ffc:	bf00      	nop
 8018ffe:	3708      	adds	r7, #8
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}
 8019004:	08028e14 	.word	0x08028e14

08019008 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b08a      	sub	sp, #40	; 0x28
 801900c:	af06      	add	r7, sp, #24
 801900e:	60f8      	str	r0, [r7, #12]
 8019010:	60b9      	str	r1, [r7, #8]
 8019012:	607a      	str	r2, [r7, #4]
 8019014:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8019016:	f7f9 fe8d 	bl	8012d34 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801901a:	4602      	mov	r2, r0
 801901c:	69bb      	ldr	r3, [r7, #24]
 801901e:	9305      	str	r3, [sp, #20]
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	9304      	str	r3, [sp, #16]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	9303      	str	r3, [sp, #12]
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	9302      	str	r3, [sp, #8]
 801902c:	9201      	str	r2, [sp, #4]
 801902e:	2300      	movs	r3, #0
 8019030:	9300      	str	r3, [sp, #0]
 8019032:	2300      	movs	r3, #0
 8019034:	4a04      	ldr	r2, [pc, #16]	; (8019048 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8019036:	4905      	ldr	r1, [pc, #20]	; (801904c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8019038:	68f8      	ldr	r0, [r7, #12]
 801903a:	f000 f855 	bl	80190e8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801903e:	bf00      	nop
 8019040:	3710      	adds	r7, #16
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
 8019046:	bf00      	nop
 8019048:	08028c70 	.word	0x08028c70
 801904c:	08028f28 	.word	0x08028f28

08019050 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8019050:	b590      	push	{r4, r7, lr}
 8019052:	b08b      	sub	sp, #44	; 0x2c
 8019054:	af06      	add	r7, sp, #24
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
 801905c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	68d8      	ldr	r0, [r3, #12]
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	691c      	ldr	r4, [r3, #16]
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	68ba      	ldr	r2, [r7, #8]
 801906c:	6952      	ldr	r2, [r2, #20]
 801906e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019070:	9105      	str	r1, [sp, #20]
 8019072:	6a39      	ldr	r1, [r7, #32]
 8019074:	9104      	str	r1, [sp, #16]
 8019076:	6839      	ldr	r1, [r7, #0]
 8019078:	9103      	str	r1, [sp, #12]
 801907a:	6879      	ldr	r1, [r7, #4]
 801907c:	9102      	str	r1, [sp, #8]
 801907e:	9201      	str	r2, [sp, #4]
 8019080:	9300      	str	r3, [sp, #0]
 8019082:	4623      	mov	r3, r4
 8019084:	4602      	mov	r2, r0
 8019086:	4904      	ldr	r1, [pc, #16]	; (8019098 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8019088:	68f8      	ldr	r0, [r7, #12]
 801908a:	f000 f82d 	bl	80190e8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 801908e:	bf00      	nop
 8019090:	3714      	adds	r7, #20
 8019092:	46bd      	mov	sp, r7
 8019094:	bd90      	pop	{r4, r7, pc}
 8019096:	bf00      	nop
 8019098:	08028f4c 	.word	0x08028f4c

0801909c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801909c:	b590      	push	{r4, r7, lr}
 801909e:	b08b      	sub	sp, #44	; 0x2c
 80190a0:	af06      	add	r7, sp, #24
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]
 80190a8:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	68d8      	ldr	r0, [r3, #12]
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	691c      	ldr	r4, [r3, #16]
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	68ba      	ldr	r2, [r7, #8]
 80190b8:	6952      	ldr	r2, [r2, #20]
 80190ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190bc:	9105      	str	r1, [sp, #20]
 80190be:	6a39      	ldr	r1, [r7, #32]
 80190c0:	9104      	str	r1, [sp, #16]
 80190c2:	6839      	ldr	r1, [r7, #0]
 80190c4:	9103      	str	r1, [sp, #12]
 80190c6:	6879      	ldr	r1, [r7, #4]
 80190c8:	9102      	str	r1, [sp, #8]
 80190ca:	9201      	str	r2, [sp, #4]
 80190cc:	9300      	str	r3, [sp, #0]
 80190ce:	4623      	mov	r3, r4
 80190d0:	4602      	mov	r2, r0
 80190d2:	4904      	ldr	r1, [pc, #16]	; (80190e4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80190d4:	68f8      	ldr	r0, [r7, #12]
 80190d6:	f000 f807 	bl	80190e8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80190da:	bf00      	nop
 80190dc:	3714      	adds	r7, #20
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd90      	pop	{r4, r7, pc}
 80190e2:	bf00      	nop
 80190e4:	08028f74 	.word	0x08028f74

080190e8 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80190e8:	b590      	push	{r4, r7, lr}
 80190ea:	b087      	sub	sp, #28
 80190ec:	af02      	add	r7, sp, #8
 80190ee:	60f8      	str	r0, [r7, #12]
 80190f0:	60b9      	str	r1, [r7, #8]
 80190f2:	607a      	str	r2, [r7, #4]
 80190f4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	3308      	adds	r3, #8
 80190fa:	68ba      	ldr	r2, [r7, #8]
 80190fc:	4910      	ldr	r1, [pc, #64]	; (8019140 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 80190fe:	4618      	mov	r0, r3
 8019100:	f7ff fcf0 	bl	8018ae4 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8019104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	6a3b      	ldr	r3, [r7, #32]
 801910a:	683a      	ldr	r2, [r7, #0]
 801910c:	6879      	ldr	r1, [r7, #4]
 801910e:	68f8      	ldr	r0, [r7, #12]
 8019110:	f7ff fe36 	bl	8018d80 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8019114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801911a:	68f8      	ldr	r0, [r7, #12]
 801911c:	f7ff fe52 	bl	8018dc4 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8019120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	3308      	adds	r3, #8
 8019126:	681c      	ldr	r4, [r3, #0]
 8019128:	68f8      	ldr	r0, [r7, #12]
 801912a:	f000 f80b 	bl	8019144 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801912e:	4603      	mov	r3, r0
 8019130:	4619      	mov	r1, r3
 8019132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019134:	47a0      	blx	r4
}
 8019136:	bf00      	nop
 8019138:	3714      	adds	r7, #20
 801913a:	46bd      	mov	sp, r7
 801913c:	bd90      	pop	{r4, r7, pc}
 801913e:	bf00      	nop
 8019140:	08028fa0 	.word	0x08028fa0

08019144 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b082      	sub	sp, #8
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	3308      	adds	r3, #8
 8019150:	4618      	mov	r0, r3
 8019152:	f7ff fdad 	bl	8018cb0 <_ZN18SimpleStringBuffer8toStringEv>
 8019156:	4603      	mov	r3, r0
}
 8019158:	4618      	mov	r0, r3
 801915a:	3708      	adds	r7, #8
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}

08019160 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	3308      	adds	r3, #8
 801916c:	4618      	mov	r0, r3
 801916e:	f7ff fca7 	bl	8018ac0 <_ZN18SimpleStringBuffer5clearEv>
}
 8019172:	bf00      	nop
 8019174:	3708      	adds	r7, #8
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}

0801917a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801917a:	b480      	push	{r7}
 801917c:	b085      	sub	sp, #20
 801917e:	af00      	add	r7, sp, #0
 8019180:	60f8      	str	r0, [r7, #12]
 8019182:	60b9      	str	r1, [r7, #8]
 8019184:	607a      	str	r2, [r7, #4]
 8019186:	603b      	str	r3, [r7, #0]
    number_ = number;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	68ba      	ldr	r2, [r7, #8]
 8019192:	609a      	str	r2, [r3, #8]
    size_ = size;
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	683a      	ldr	r2, [r7, #0]
 8019198:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	69ba      	ldr	r2, [r7, #24]
 801919e:	615a      	str	r2, [r3, #20]
    period_ = period;
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	7f3a      	ldrb	r2, [r7, #28]
 80191a4:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80191ac:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191b2:	60da      	str	r2, [r3, #12]
    line_ = line;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80191b8:	611a      	str	r2, [r3, #16]
}
 80191ba:	bf00      	nop
 80191bc:	3714      	adds	r7, #20
 80191be:	46bd      	mov	sp, r7
 80191c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c4:	4770      	bx	lr

080191c6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80191c6:	b480      	push	{r7}
 80191c8:	b085      	sub	sp, #20
 80191ca:	af00      	add	r7, sp, #0
 80191cc:	60f8      	str	r0, [r7, #12]
 80191ce:	60b9      	str	r1, [r7, #8]
 80191d0:	4613      	mov	r3, r2
 80191d2:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80191d4:	79fb      	ldrb	r3, [r7, #7]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d00b      	beq.n	80191f2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	7e1b      	ldrb	r3, [r3, #24]
 80191de:	79fa      	ldrb	r2, [r7, #7]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d006      	beq.n	80191f2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	7e1b      	ldrb	r3, [r3, #24]
 80191e8:	2b01      	cmp	r3, #1
 80191ea:	d004      	beq.n	80191f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80191ec:	79fb      	ldrb	r3, [r7, #7]
 80191ee:	2b02      	cmp	r3, #2
 80191f0:	d101      	bne.n	80191f6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 80191f2:	2301      	movs	r3, #1
 80191f4:	e000      	b.n	80191f8 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 80191f6:	2300      	movs	r3, #0
}
 80191f8:	4618      	mov	r0, r3
 80191fa:	3714      	adds	r7, #20
 80191fc:	46bd      	mov	sp, r7
 80191fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019202:	4770      	bx	lr

08019204 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8019204:	b480      	push	{r7}
 8019206:	b083      	sub	sp, #12
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	681a      	ldr	r2, [r3, #0]
 8019212:	683b      	ldr	r3, [r7, #0]
 8019214:	61da      	str	r2, [r3, #28]
    head_ = node;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	683a      	ldr	r2, [r7, #0]
 801921a:	601a      	str	r2, [r3, #0]
}
 801921c:	bf00      	nop
 801921e:	370c      	adds	r7, #12
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr

08019228 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8019228:	b480      	push	{r7}
 801922a:	b085      	sub	sp, #20
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8019238:	2300      	movs	r3, #0
 801923a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d019      	beq.n	8019276 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	689b      	ldr	r3, [r3, #8]
 8019246:	683a      	ldr	r2, [r7, #0]
 8019248:	429a      	cmp	r2, r3
 801924a:	d10e      	bne.n	801926a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d005      	beq.n	801925e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	69da      	ldr	r2, [r3, #28]
 8019256:	68bb      	ldr	r3, [r7, #8]
 8019258:	61da      	str	r2, [r3, #28]
                return cur;
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	e00c      	b.n	8019278 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	69da      	ldr	r2, [r3, #28]
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	601a      	str	r2, [r3, #0]
                return cur;
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	e006      	b.n	8019278 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	69db      	ldr	r3, [r3, #28]
 8019272:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8019274:	e7e2      	b.n	801923c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8019276:	2300      	movs	r3, #0
}
 8019278:	4618      	mov	r0, r3
 801927a:	3714      	adds	r7, #20
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8019284:	b480      	push	{r7}
 8019286:	b085      	sub	sp, #20
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d00a      	beq.n	80192b0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	689b      	ldr	r3, [r3, #8]
 801929e:	683a      	ldr	r2, [r7, #0]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d101      	bne.n	80192a8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	e004      	b.n	80192b2 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	69db      	ldr	r3, [r3, #28]
 80192ac:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80192ae:	e7f1      	b.n	8019294 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80192b0:	2300      	movs	r3, #0
}
 80192b2:	4618      	mov	r0, r3
 80192b4:	3714      	adds	r7, #20
 80192b6:	46bd      	mov	sp, r7
 80192b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192bc:	4770      	bx	lr

080192be <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80192be:	b580      	push	{r7, lr}
 80192c0:	b086      	sub	sp, #24
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	60f8      	str	r0, [r7, #12]
 80192c6:	60b9      	str	r1, [r7, #8]
 80192c8:	4613      	mov	r3, r2
 80192ca:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80192cc:	68bb      	ldr	r3, [r7, #8]
 80192ce:	617b      	str	r3, [r7, #20]
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d00e      	beq.n	80192f4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80192d6:	79fb      	ldrb	r3, [r7, #7]
 80192d8:	461a      	mov	r2, r3
 80192da:	6979      	ldr	r1, [r7, #20]
 80192dc:	68f8      	ldr	r0, [r7, #12]
 80192de:	f7ff ff72 	bl	80191c6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d001      	beq.n	80192ec <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	e004      	b.n	80192f6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80192ec:	697b      	ldr	r3, [r7, #20]
 80192ee:	69db      	ldr	r3, [r3, #28]
 80192f0:	617b      	str	r3, [r7, #20]
 80192f2:	e7ed      	b.n	80192d0 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 80192f4:	2300      	movs	r3, #0
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3718      	adds	r7, #24
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}

080192fe <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 80192fe:	b580      	push	{r7, lr}
 8019300:	b082      	sub	sp, #8
 8019302:	af00      	add	r7, sp, #0
 8019304:	6078      	str	r0, [r7, #4]
 8019306:	460b      	mov	r3, r1
 8019308:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	78fa      	ldrb	r2, [r7, #3]
 8019310:	4619      	mov	r1, r3
 8019312:	6878      	ldr	r0, [r7, #4]
 8019314:	f7ff ffd3 	bl	80192be <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019318:	4603      	mov	r3, r0
}
 801931a:	4618      	mov	r0, r3
 801931c:	3708      	adds	r7, #8
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}

08019322 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8019322:	b580      	push	{r7, lr}
 8019324:	b084      	sub	sp, #16
 8019326:	af00      	add	r7, sp, #0
 8019328:	60f8      	str	r0, [r7, #12]
 801932a:	60b9      	str	r1, [r7, #8]
 801932c:	4613      	mov	r3, r2
 801932e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	69db      	ldr	r3, [r3, #28]
 8019334:	79fa      	ldrb	r2, [r7, #7]
 8019336:	4619      	mov	r1, r3
 8019338:	68f8      	ldr	r0, [r7, #12]
 801933a:	f7ff ffc0 	bl	80192be <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801933e:	4603      	mov	r3, r0
}
 8019340:	4618      	mov	r0, r3
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b084      	sub	sp, #16
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
 8019350:	460b      	mov	r3, r1
 8019352:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8019354:	2300      	movs	r3, #0
 8019356:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	60bb      	str	r3, [r7, #8]
 801935e:	68bb      	ldr	r3, [r7, #8]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d00f      	beq.n	8019384 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8019364:	78fb      	ldrb	r3, [r7, #3]
 8019366:	461a      	mov	r2, r3
 8019368:	68b9      	ldr	r1, [r7, #8]
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f7ff ff2b 	bl	80191c6 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019370:	4603      	mov	r3, r0
 8019372:	2b00      	cmp	r3, #0
 8019374:	d002      	beq.n	801937c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	3301      	adds	r3, #1
 801937a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	69db      	ldr	r3, [r3, #28]
 8019380:	60bb      	str	r3, [r7, #8]
 8019382:	e7ec      	b.n	801935e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8019384:	68fb      	ldr	r3, [r7, #12]
}
 8019386:	4618      	mov	r0, r3
 8019388:	3710      	adds	r7, #16
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}
	...

08019390 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
 8019398:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 801939a:	6839      	ldr	r1, [r7, #0]
 801939c:	4b09      	ldr	r3, [pc, #36]	; (80193c4 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 801939e:	fba3 2301 	umull	r2, r3, r3, r1
 80193a2:	1aca      	subs	r2, r1, r3
 80193a4:	0852      	lsrs	r2, r2, #1
 80193a6:	4413      	add	r3, r2
 80193a8:	099a      	lsrs	r2, r3, #6
 80193aa:	4613      	mov	r3, r2
 80193ac:	00db      	lsls	r3, r3, #3
 80193ae:	4413      	add	r3, r2
 80193b0:	00db      	lsls	r3, r3, #3
 80193b2:	4413      	add	r3, r2
 80193b4:	1aca      	subs	r2, r1, r3
 80193b6:	4613      	mov	r3, r2
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	370c      	adds	r7, #12
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr
 80193c4:	c0e07039 	.word	0xc0e07039

080193c8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b082      	sub	sp, #8
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	6078      	str	r0, [r7, #4]
 80193d0:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	689b      	ldr	r3, [r3, #8]
 80193d6:	4619      	mov	r1, r3
 80193d8:	6878      	ldr	r0, [r7, #4]
 80193da:	f7ff ffd9 	bl	8019390 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80193de:	4603      	mov	r3, r0
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	687a      	ldr	r2, [r7, #4]
 80193e4:	4413      	add	r3, r2
 80193e6:	6839      	ldr	r1, [r7, #0]
 80193e8:	4618      	mov	r0, r3
 80193ea:	f7ff ff0b 	bl	8019204 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 80193ee:	bf00      	nop
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}

080193f6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 80193f6:	b580      	push	{r7, lr}
 80193f8:	b082      	sub	sp, #8
 80193fa:	af00      	add	r7, sp, #0
 80193fc:	6078      	str	r0, [r7, #4]
 80193fe:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8019400:	6839      	ldr	r1, [r7, #0]
 8019402:	6878      	ldr	r0, [r7, #4]
 8019404:	f7ff ffc4 	bl	8019390 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8019408:	4603      	mov	r3, r0
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	687a      	ldr	r2, [r7, #4]
 801940e:	4413      	add	r3, r2
 8019410:	6839      	ldr	r1, [r7, #0]
 8019412:	4618      	mov	r0, r3
 8019414:	f7ff ff08 	bl	8019228 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8019418:	4603      	mov	r3, r0
}
 801941a:	4618      	mov	r0, r3
 801941c:	3708      	adds	r7, #8
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}

08019422 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8019422:	b580      	push	{r7, lr}
 8019424:	b082      	sub	sp, #8
 8019426:	af00      	add	r7, sp, #0
 8019428:	6078      	str	r0, [r7, #4]
 801942a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 801942c:	6839      	ldr	r1, [r7, #0]
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	f7ff ffae 	bl	8019390 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8019434:	4603      	mov	r3, r0
 8019436:	009b      	lsls	r3, r3, #2
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	4413      	add	r3, r2
 801943c:	6839      	ldr	r1, [r7, #0]
 801943e:	4618      	mov	r0, r3
 8019440:	f7ff ff20 	bl	8019284 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8019444:	4603      	mov	r3, r0
}
 8019446:	4618      	mov	r0, r3
 8019448:	3708      	adds	r7, #8
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}

0801944e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801944e:	b580      	push	{r7, lr}
 8019450:	b084      	sub	sp, #16
 8019452:	af00      	add	r7, sp, #0
 8019454:	6078      	str	r0, [r7, #4]
 8019456:	460b      	mov	r3, r1
 8019458:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801945a:	2300      	movs	r3, #0
 801945c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801945e:	2300      	movs	r3, #0
 8019460:	60bb      	str	r3, [r7, #8]
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	2b48      	cmp	r3, #72	; 0x48
 8019466:	dc10      	bgt.n	801948a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	009b      	lsls	r3, r3, #2
 801946c:	687a      	ldr	r2, [r7, #4]
 801946e:	4413      	add	r3, r2
 8019470:	78fa      	ldrb	r2, [r7, #3]
 8019472:	4611      	mov	r1, r2
 8019474:	4618      	mov	r0, r3
 8019476:	f7ff ff67 	bl	8019348 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801947a:	4602      	mov	r2, r0
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	4413      	add	r3, r2
 8019480:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	3301      	adds	r3, #1
 8019486:	60bb      	str	r3, [r7, #8]
 8019488:	e7eb      	b.n	8019462 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 801948a:	68fb      	ldr	r3, [r7, #12]
}
 801948c:	4618      	mov	r0, r3
 801948e:	3710      	adds	r7, #16
 8019490:	46bd      	mov	sp, r7
 8019492:	bd80      	pop	{r7, pc}

08019494 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	460b      	mov	r3, r1
 801949e:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80194a0:	2300      	movs	r3, #0
 80194a2:	60fb      	str	r3, [r7, #12]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	2b48      	cmp	r3, #72	; 0x48
 80194a8:	dc12      	bgt.n	80194d0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	009b      	lsls	r3, r3, #2
 80194ae:	687a      	ldr	r2, [r7, #4]
 80194b0:	4413      	add	r3, r2
 80194b2:	78fa      	ldrb	r2, [r7, #3]
 80194b4:	4611      	mov	r1, r2
 80194b6:	4618      	mov	r0, r3
 80194b8:	f7ff ff21 	bl	80192fe <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80194bc:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d001      	beq.n	80194c8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	e004      	b.n	80194d2 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	3301      	adds	r3, #1
 80194cc:	60fb      	str	r3, [r7, #12]
 80194ce:	e7e9      	b.n	80194a4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80194d0:	2300      	movs	r3, #0
}
 80194d2:	4618      	mov	r0, r3
 80194d4:	3710      	adds	r7, #16
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}

080194da <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80194da:	b580      	push	{r7, lr}
 80194dc:	b086      	sub	sp, #24
 80194de:	af00      	add	r7, sp, #0
 80194e0:	60f8      	str	r0, [r7, #12]
 80194e2:	60b9      	str	r1, [r7, #8]
 80194e4:	4613      	mov	r3, r2
 80194e6:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	689b      	ldr	r3, [r3, #8]
 80194ec:	4619      	mov	r1, r3
 80194ee:	68f8      	ldr	r0, [r7, #12]
 80194f0:	f7ff ff4e 	bl	8019390 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80194f4:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	68fa      	ldr	r2, [r7, #12]
 80194fc:	4413      	add	r3, r2
 80194fe:	79fa      	ldrb	r2, [r7, #7]
 8019500:	68b9      	ldr	r1, [r7, #8]
 8019502:	4618      	mov	r0, r3
 8019504:	f7ff ff0d 	bl	8019322 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019508:	6138      	str	r0, [r7, #16]
    if (node) return node;
 801950a:	693b      	ldr	r3, [r7, #16]
 801950c:	2b00      	cmp	r3, #0
 801950e:	d001      	beq.n	8019514 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	e019      	b.n	8019548 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	3301      	adds	r3, #1
 8019518:	617b      	str	r3, [r7, #20]
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	2b48      	cmp	r3, #72	; 0x48
 801951e:	d812      	bhi.n	8019546 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	009b      	lsls	r3, r3, #2
 8019524:	68fa      	ldr	r2, [r7, #12]
 8019526:	4413      	add	r3, r2
 8019528:	79fa      	ldrb	r2, [r7, #7]
 801952a:	4611      	mov	r1, r2
 801952c:	4618      	mov	r0, r3
 801952e:	f7ff fee6 	bl	80192fe <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8019532:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d001      	beq.n	801953e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801953a:	693b      	ldr	r3, [r7, #16]
 801953c:	e004      	b.n	8019548 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	3301      	adds	r3, #1
 8019542:	617b      	str	r3, [r7, #20]
 8019544:	e7e9      	b.n	801951a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8019546:	2300      	movs	r3, #0
}
 8019548:	4618      	mov	r0, r3
 801954a:	3718      	adds	r7, #24
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}

08019550 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8019550:	b5b0      	push	{r4, r5, r7, lr}
 8019552:	b082      	sub	sp, #8
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	2448      	movs	r4, #72	; 0x48
 801955c:	461d      	mov	r5, r3
 801955e:	2c00      	cmp	r4, #0
 8019560:	db05      	blt.n	801956e <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8019562:	4628      	mov	r0, r5
 8019564:	f7ff fa84 	bl	8018a70 <_ZN22MemoryLeakDetectorListC1Ev>
 8019568:	3504      	adds	r5, #4
 801956a:	3c01      	subs	r4, #1
 801956c:	e7f7      	b.n	801955e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	4618      	mov	r0, r3
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bdb0      	pop	{r4, r5, r7, pc}

08019578 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8019578:	b590      	push	{r4, r7, lr}
 801957a:	b083      	sub	sp, #12
 801957c:	af00      	add	r7, sp, #0
 801957e:	6078      	str	r0, [r7, #4]
 8019580:	6039      	str	r1, [r7, #0]
 8019582:	4a1d      	ldr	r2, [pc, #116]	; (80195f8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	601a      	str	r2, [r3, #0]
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	330c      	adds	r3, #12
 801958c:	4618      	mov	r0, r3
 801958e:	f7ff fbe3 	bl	8018d58 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019598:	331c      	adds	r3, #28
 801959a:	4618      	mov	r0, r3
 801959c:	f7ff ffd8 	bl	8019550 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80195a6:	2201      	movs	r2, #1
 80195a8:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80195b0:	3304      	adds	r3, #4
 80195b2:	2201      	movs	r2, #1
 80195b4:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	2201      	movs	r2, #1
 80195ba:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80195c2:	3308      	adds	r3, #8
 80195c4:	2200      	movs	r2, #0
 80195c6:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	683a      	ldr	r2, [r7, #0]
 80195cc:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80195ce:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80195d2:	490a      	ldr	r1, [pc, #40]	; (80195fc <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80195d4:	2004      	movs	r0, #4
 80195d6:	f7f3 fb17 	bl	800cc08 <_ZnwjPKci>
 80195da:	4604      	mov	r4, r0
 80195dc:	4620      	mov	r0, r4
 80195de:	f7f5 fbe7 	bl	800edb0 <_ZN11SimpleMutexC1Ev>
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80195e8:	330c      	adds	r3, #12
 80195ea:	601c      	str	r4, [r3, #0]
}
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	4618      	mov	r0, r3
 80195f0:	370c      	adds	r7, #12
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd90      	pop	{r4, r7, pc}
 80195f6:	bf00      	nop
 80195f8:	0802c0bc 	.word	0x0802c0bc
 80195fc:	08028fa4 	.word	0x08028fa4

08019600 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8019600:	b590      	push	{r4, r7, lr}
 8019602:	b083      	sub	sp, #12
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	4a0e      	ldr	r2, [pc, #56]	; (8019644 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019614:	330c      	adds	r3, #12
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d00d      	beq.n	8019638 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019622:	330c      	adds	r3, #12
 8019624:	681c      	ldr	r4, [r3, #0]
 8019626:	2c00      	cmp	r4, #0
 8019628:	d006      	beq.n	8019638 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801962a:	4620      	mov	r0, r4
 801962c:	f7f5 fbd2 	bl	800edd4 <_ZN11SimpleMutexD1Ev>
 8019630:	2104      	movs	r1, #4
 8019632:	4620      	mov	r0, r4
 8019634:	f7f3 fafc 	bl	800cc30 <_ZdlPvj>
    }
}
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	4618      	mov	r0, r3
 801963c:	370c      	adds	r7, #12
 801963e:	46bd      	mov	sp, r7
 8019640:	bd90      	pop	{r4, r7, pc}
 8019642:	bf00      	nop
 8019644:	0802c0bc 	.word	0x0802c0bc

08019648 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
}
 8019650:	6878      	ldr	r0, [r7, #4]
 8019652:	f7ff ffd5 	bl	8019600 <_ZN18MemoryLeakDetectorD1Ev>
 8019656:	f241 1150 	movw	r1, #4432	; 0x1150
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7f3 fae8 	bl	800cc30 <_ZdlPvj>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	4618      	mov	r0, r3
 8019664:	3708      	adds	r7, #8
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}

0801966a <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 801966a:	b580      	push	{r7, lr}
 801966c:	b082      	sub	sp, #8
 801966e:	af00      	add	r7, sp, #0
 8019670:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	330c      	adds	r3, #12
 8019676:	4618      	mov	r0, r3
 8019678:	f7ff fd72 	bl	8019160 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2203      	movs	r2, #3
 8019680:	721a      	strb	r2, [r3, #8]
}
 8019682:	bf00      	nop
 8019684:	3708      	adds	r7, #8
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}

0801968a <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 801968a:	b480      	push	{r7}
 801968c:	b083      	sub	sp, #12
 801968e:	af00      	add	r7, sp, #0
 8019690:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2202      	movs	r2, #2
 8019696:	721a      	strb	r2, [r3, #8]
}
 8019698:	bf00      	nop
 801969a:	370c      	adds	r7, #12
 801969c:	46bd      	mov	sp, r7
 801969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a2:	4770      	bx	lr

080196a4 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80196a4:	b480      	push	{r7}
 80196a6:	b083      	sub	sp, #12
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2202      	movs	r2, #2
 80196b0:	721a      	strb	r2, [r3, #8]
}
 80196b2:	bf00      	nop
 80196b4:	370c      	adds	r7, #12
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr

080196be <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80196be:	b480      	push	{r7}
 80196c0:	b083      	sub	sp, #12
 80196c2:	af00      	add	r7, sp, #0
 80196c4:	6078      	str	r0, [r7, #4]
    return mutex_;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80196cc:	330c      	adds	r3, #12
 80196ce:	681b      	ldr	r3, [r3, #0]
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	370c      	adds	r7, #12
 80196d4:	46bd      	mov	sp, r7
 80196d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196da:	4770      	bx	lr

080196dc <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80196dc:	b480      	push	{r7}
 80196de:	b083      	sub	sp, #12
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	f023 0303 	bic.w	r3, r3, #3
 80196ea:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	370c      	adds	r7, #12
 80196f0:	46bd      	mov	sp, r7
 80196f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f6:	4770      	bx	lr

080196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b082      	sub	sp, #8
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
 8019700:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	3303      	adds	r3, #3
 8019706:	4618      	mov	r0, r3
 8019708:	f7ff ffe8 	bl	80196dc <_ZL31calculateVoidPointerAlignedSizej>
 801970c:	4603      	mov	r3, r0
}
 801970e:	4618      	mov	r0, r3
 8019710:	3708      	adds	r7, #8
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}

08019716 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8019716:	b580      	push	{r7, lr}
 8019718:	b084      	sub	sp, #16
 801971a:	af00      	add	r7, sp, #0
 801971c:	60f8      	str	r0, [r7, #12]
 801971e:	60b9      	str	r1, [r7, #8]
 8019720:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8019722:	6879      	ldr	r1, [r7, #4]
 8019724:	68f8      	ldr	r0, [r7, #12]
 8019726:	f7ff ffe7 	bl	80196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801972a:	4602      	mov	r2, r0
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	4413      	add	r3, r2
}
 8019730:	4618      	mov	r0, r3
 8019732:	3710      	adds	r7, #16
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b08a      	sub	sp, #40	; 0x28
 801973c:	af06      	add	r7, sp, #24
 801973e:	60f8      	str	r0, [r7, #12]
 8019740:	60b9      	str	r1, [r7, #8]
 8019742:	607a      	str	r2, [r7, #4]
 8019744:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801974c:	3304      	adds	r3, #4
 801974e:	681a      	ldr	r2, [r3, #0]
 8019750:	1c51      	adds	r1, r2, #1
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019758:	3304      	adds	r3, #4
 801975a:	6019      	str	r1, [r3, #0]
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	7a19      	ldrb	r1, [r3, #8]
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019766:	3308      	adds	r3, #8
 8019768:	781b      	ldrb	r3, [r3, #0]
 801976a:	6a38      	ldr	r0, [r7, #32]
 801976c:	9004      	str	r0, [sp, #16]
 801976e:	69f8      	ldr	r0, [r7, #28]
 8019770:	9003      	str	r0, [sp, #12]
 8019772:	9302      	str	r3, [sp, #8]
 8019774:	9101      	str	r1, [sp, #4]
 8019776:	69bb      	ldr	r3, [r7, #24]
 8019778:	9300      	str	r3, [sp, #0]
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	6879      	ldr	r1, [r7, #4]
 801977e:	68b8      	ldr	r0, [r7, #8]
 8019780:	f7ff fcfb 	bl	801917a <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	689a      	ldr	r2, [r3, #8]
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4413      	add	r3, r2
 801978e:	4619      	mov	r1, r3
 8019790:	68f8      	ldr	r0, [r7, #12]
 8019792:	f000 f861 	bl	8019858 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801979c:	331c      	adds	r3, #28
 801979e:	68b9      	ldr	r1, [r7, #8]
 80197a0:	4618      	mov	r0, r3
 80197a2:	f7ff fe11 	bl	80193c8 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80197a6:	bf00      	nop
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}

080197ae <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80197ae:	b580      	push	{r7, lr}
 80197b0:	b08a      	sub	sp, #40	; 0x28
 80197b2:	af04      	add	r7, sp, #16
 80197b4:	60f8      	str	r0, [r7, #12]
 80197b6:	60b9      	str	r1, [r7, #8]
 80197b8:	607a      	str	r2, [r7, #4]
 80197ba:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80197bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80197c0:	9302      	str	r3, [sp, #8]
 80197c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197c4:	9301      	str	r3, [sp, #4]
 80197c6:	6a3b      	ldr	r3, [r7, #32]
 80197c8:	9300      	str	r3, [sp, #0]
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	687a      	ldr	r2, [r7, #4]
 80197ce:	68b9      	ldr	r1, [r7, #8]
 80197d0:	68f8      	ldr	r0, [r7, #12]
 80197d2:	f000 f96f 	bl	8019ab4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80197d6:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80197d8:	697b      	ldr	r3, [r7, #20]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d101      	bne.n	80197e2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80197de:	2300      	movs	r3, #0
 80197e0:	e017      	b.n	8019812 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80197e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80197e6:	9300      	str	r3, [sp, #0]
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	683a      	ldr	r2, [r7, #0]
 80197ec:	68b9      	ldr	r1, [r7, #8]
 80197ee:	68f8      	ldr	r0, [r7, #12]
 80197f0:	f000 f98a 	bl	8019b08 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80197f4:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80197f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f8:	9302      	str	r3, [sp, #8]
 80197fa:	6a3b      	ldr	r3, [r7, #32]
 80197fc:	9301      	str	r3, [sp, #4]
 80197fe:	68bb      	ldr	r3, [r7, #8]
 8019800:	9300      	str	r3, [sp, #0]
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	697a      	ldr	r2, [r7, #20]
 8019806:	6939      	ldr	r1, [r7, #16]
 8019808:	68f8      	ldr	r0, [r7, #12]
 801980a:	f7ff ff95 	bl	8019738 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801980e:	693b      	ldr	r3, [r7, #16]
 8019810:	689b      	ldr	r3, [r3, #8]
}
 8019812:	4618      	mov	r0, r3
 8019814:	3718      	adds	r7, #24
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}
	...

0801981c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b084      	sub	sp, #16
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801982c:	331c      	adds	r3, #28
 801982e:	6839      	ldr	r1, [r7, #0]
 8019830:	4618      	mov	r0, r3
 8019832:	f7ff fdf6 	bl	8019422 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8019836:	60f8      	str	r0, [r7, #12]
  if (node)
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d006      	beq.n	801984c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801983e:	4b05      	ldr	r3, [pc, #20]	; (8019854 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	68fa      	ldr	r2, [r7, #12]
 8019844:	6812      	ldr	r2, [r2, #0]
 8019846:	21cd      	movs	r1, #205	; 0xcd
 8019848:	6838      	ldr	r0, [r7, #0]
 801984a:	4798      	blx	r3
#endif
}
 801984c:	bf00      	nop
 801984e:	3710      	adds	r7, #16
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}
 8019854:	200000d8 	.word	0x200000d8

08019858 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8019858:	b480      	push	{r7}
 801985a:	b085      	sub	sp, #20
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8019862:	2300      	movs	r3, #0
 8019864:	60fb      	str	r3, [r7, #12]
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2b02      	cmp	r3, #2
 801986a:	d812      	bhi.n	8019892 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 801986c:	68f9      	ldr	r1, [r7, #12]
 801986e:	4b0c      	ldr	r3, [pc, #48]	; (80198a0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8019870:	fba3 2301 	umull	r2, r3, r3, r1
 8019874:	085a      	lsrs	r2, r3, #1
 8019876:	4613      	mov	r3, r2
 8019878:	005b      	lsls	r3, r3, #1
 801987a:	4413      	add	r3, r2
 801987c:	1aca      	subs	r2, r1, r3
 801987e:	6839      	ldr	r1, [r7, #0]
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	440b      	add	r3, r1
 8019884:	4907      	ldr	r1, [pc, #28]	; (80198a4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8019886:	5c8a      	ldrb	r2, [r1, r2]
 8019888:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	3301      	adds	r3, #1
 801988e:	60fb      	str	r3, [r7, #12]
 8019890:	e7e9      	b.n	8019866 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8019892:	bf00      	nop
 8019894:	3714      	adds	r7, #20
 8019896:	46bd      	mov	sp, r7
 8019898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop
 80198a0:	aaaaaaab 	.word	0xaaaaaaab
 80198a4:	0802c0b0 	.word	0x0802c0b0

080198a8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80198a8:	b480      	push	{r7}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80198b2:	2300      	movs	r3, #0
 80198b4:	60fb      	str	r3, [r7, #12]
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	2b02      	cmp	r3, #2
 80198ba:	d816      	bhi.n	80198ea <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80198bc:	683a      	ldr	r2, [r7, #0]
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	4413      	add	r3, r2
 80198c2:	7818      	ldrb	r0, [r3, #0]
 80198c4:	68f9      	ldr	r1, [r7, #12]
 80198c6:	4b0c      	ldr	r3, [pc, #48]	; (80198f8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80198c8:	fba3 2301 	umull	r2, r3, r3, r1
 80198cc:	085a      	lsrs	r2, r3, #1
 80198ce:	4613      	mov	r3, r2
 80198d0:	005b      	lsls	r3, r3, #1
 80198d2:	4413      	add	r3, r2
 80198d4:	1aca      	subs	r2, r1, r3
 80198d6:	4b09      	ldr	r3, [pc, #36]	; (80198fc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80198d8:	5c9b      	ldrb	r3, [r3, r2]
 80198da:	4298      	cmp	r0, r3
 80198dc:	d001      	beq.n	80198e2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80198de:	2300      	movs	r3, #0
 80198e0:	e004      	b.n	80198ec <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	3301      	adds	r3, #1
 80198e6:	60fb      	str	r3, [r7, #12]
 80198e8:	e7e5      	b.n	80198b6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80198ea:	2301      	movs	r3, #1
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3714      	adds	r7, #20
 80198f0:	46bd      	mov	sp, r7
 80198f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f6:	4770      	bx	lr
 80198f8:	aaaaaaab 	.word	0xaaaaaaab
 80198fc:	0802c0b0 	.word	0x0802c0b0

08019900 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b084      	sub	sp, #16
 8019904:	af00      	add	r7, sp, #0
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 801990c:	68ba      	ldr	r2, [r7, #8]
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	429a      	cmp	r2, r3
 8019912:	d101      	bne.n	8019918 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8019914:	2301      	movs	r3, #1
 8019916:	e013      	b.n	8019940 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	f083 0301 	eor.w	r3, r3, #1
 8019924:	b2db      	uxtb	r3, r3
 8019926:	2b00      	cmp	r3, #0
 8019928:	d001      	beq.n	801992e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801992a:	2301      	movs	r3, #1
 801992c:	e008      	b.n	8019940 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	331c      	adds	r3, #28
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	68b9      	ldr	r1, [r7, #8]
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	4798      	blx	r3
 801993c:	4603      	mov	r3, r0
 801993e:	bf00      	nop
}
 8019940:	4618      	mov	r0, r3
 8019942:	3710      	adds	r7, #16
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8019948:	b590      	push	{r4, r7, lr}
 801994a:	b087      	sub	sp, #28
 801994c:	af02      	add	r7, sp, #8
 801994e:	60f8      	str	r0, [r7, #12]
 8019950:	60b9      	str	r1, [r7, #8]
 8019952:	607a      	str	r2, [r7, #4]
 8019954:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	695a      	ldr	r2, [r3, #20]
 801995a:	68bb      	ldr	r3, [r7, #8]
 801995c:	695b      	ldr	r3, [r3, #20]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	3328      	adds	r3, #40	; 0x28
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	4610      	mov	r0, r2
 8019966:	4798      	blx	r3
 8019968:	4604      	mov	r4, r0
 801996a:	6a3b      	ldr	r3, [r7, #32]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	3328      	adds	r3, #40	; 0x28
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	6a38      	ldr	r0, [r7, #32]
 8019974:	4798      	blx	r3
 8019976:	4603      	mov	r3, r0
 8019978:	461a      	mov	r2, r3
 801997a:	4621      	mov	r1, r4
 801997c:	68f8      	ldr	r0, [r7, #12]
 801997e:	f7ff ffbf 	bl	8019900 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8019982:	4603      	mov	r3, r0
 8019984:	f083 0301 	eor.w	r3, r3, #1
 8019988:	b2db      	uxtb	r3, r3
 801998a:	2b00      	cmp	r3, #0
 801998c:	d014      	beq.n	80199b8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	f103 040c 	add.w	r4, r3, #12
 8019994:	6a3b      	ldr	r3, [r7, #32]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	3328      	adds	r3, #40	; 0x28
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	6a38      	ldr	r0, [r7, #32]
 801999e:	4798      	blx	r3
 80199a0:	4602      	mov	r2, r0
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	9301      	str	r3, [sp, #4]
 80199a8:	9200      	str	r2, [sp, #0]
 80199aa:	683b      	ldr	r3, [r7, #0]
 80199ac:	687a      	ldr	r2, [r7, #4]
 80199ae:	68b9      	ldr	r1, [r7, #8]
 80199b0:	4620      	mov	r0, r4
 80199b2:	f7ff fb4d 	bl	8019050 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80199b6:	e02e      	b.n	8019a16 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	689a      	ldr	r2, [r3, #8]
 80199bc:	68bb      	ldr	r3, [r7, #8]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	4413      	add	r3, r2
 80199c2:	4619      	mov	r1, r3
 80199c4:	68f8      	ldr	r0, [r7, #12]
 80199c6:	f7ff ff6f 	bl	80198a8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80199ca:	4603      	mov	r3, r0
 80199cc:	f083 0301 	eor.w	r3, r3, #1
 80199d0:	b2db      	uxtb	r3, r3
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d014      	beq.n	8019a00 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	f103 040c 	add.w	r4, r3, #12
 80199dc:	6a3b      	ldr	r3, [r7, #32]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	3328      	adds	r3, #40	; 0x28
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	6a38      	ldr	r0, [r7, #32]
 80199e6:	4798      	blx	r3
 80199e8:	4602      	mov	r2, r0
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	9301      	str	r3, [sp, #4]
 80199f0:	9200      	str	r2, [sp, #0]
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	687a      	ldr	r2, [r7, #4]
 80199f6:	68b9      	ldr	r1, [r7, #8]
 80199f8:	4620      	mov	r0, r4
 80199fa:	f7ff fb4f 	bl	801909c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80199fe:	e00a      	b.n	8019a16 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8019a00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d006      	beq.n	8019a16 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8019a08:	6a3b      	ldr	r3, [r7, #32]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	3324      	adds	r3, #36	; 0x24
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	68b9      	ldr	r1, [r7, #8]
 8019a12:	6a38      	ldr	r0, [r7, #32]
 8019a14:	4798      	blx	r3
}
 8019a16:	bf00      	nop
 8019a18:	3714      	adds	r7, #20
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd90      	pop	{r4, r7, pc}
	...

08019a20 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b086      	sub	sp, #24
 8019a24:	af02      	add	r7, sp, #8
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	607a      	str	r2, [r7, #4]
 8019a2c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8019a2e:	4b08      	ldr	r3, [pc, #32]	; (8019a50 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8019a30:	681a      	ldr	r2, [r3, #0]
 8019a32:	78fb      	ldrb	r3, [r7, #3]
 8019a34:	9301      	str	r3, [sp, #4]
 8019a36:	2300      	movs	r3, #0
 8019a38:	9300      	str	r3, [sp, #0]
 8019a3a:	4613      	mov	r3, r2
 8019a3c:	687a      	ldr	r2, [r7, #4]
 8019a3e:	68b9      	ldr	r1, [r7, #8]
 8019a40:	68f8      	ldr	r0, [r7, #12]
 8019a42:	f000 f87f 	bl	8019b44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8019a46:	4603      	mov	r3, r0
}
 8019a48:	4618      	mov	r0, r3
 8019a4a:	3710      	adds	r7, #16
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	20000100 	.word	0x20000100

08019a54 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019a54:	b590      	push	{r4, r7, lr}
 8019a56:	b085      	sub	sp, #20
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	60f8      	str	r0, [r7, #12]
 8019a5c:	60b9      	str	r1, [r7, #8]
 8019a5e:	607a      	str	r2, [r7, #4]
 8019a60:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8019a62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d00e      	beq.n	8019a88 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	3308      	adds	r3, #8
 8019a70:	681c      	ldr	r4, [r3, #0]
 8019a72:	6879      	ldr	r1, [r7, #4]
 8019a74:	68f8      	ldr	r0, [r7, #12]
 8019a76:	f7ff fe3f 	bl	80196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019a7a:	4601      	mov	r1, r0
 8019a7c:	6a3b      	ldr	r3, [r7, #32]
 8019a7e:	683a      	ldr	r2, [r7, #0]
 8019a80:	68b8      	ldr	r0, [r7, #8]
 8019a82:	47a0      	blx	r4
 8019a84:	4603      	mov	r3, r0
 8019a86:	e010      	b.n	8019aaa <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	3308      	adds	r3, #8
 8019a8e:	681c      	ldr	r4, [r3, #0]
 8019a90:	6879      	ldr	r1, [r7, #4]
 8019a92:	68f8      	ldr	r0, [r7, #12]
 8019a94:	f7ff fe30 	bl	80196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	f103 0120 	add.w	r1, r3, #32
 8019a9e:	6a3b      	ldr	r3, [r7, #32]
 8019aa0:	683a      	ldr	r2, [r7, #0]
 8019aa2:	68b8      	ldr	r0, [r7, #8]
 8019aa4:	47a0      	blx	r4
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	bf00      	nop
}
 8019aaa:	4618      	mov	r0, r3
 8019aac:	3714      	adds	r7, #20
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	bd90      	pop	{r4, r7, pc}
	...

08019ab4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8019ab4:	b590      	push	{r4, r7, lr}
 8019ab6:	b085      	sub	sp, #20
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	60f8      	str	r0, [r7, #12]
 8019abc:	60b9      	str	r1, [r7, #8]
 8019abe:	607a      	str	r2, [r7, #4]
 8019ac0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8019ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d00b      	beq.n	8019ae2 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8019aca:	4b0e      	ldr	r3, [pc, #56]	; (8019b04 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8019acc:	681c      	ldr	r4, [r3, #0]
 8019ace:	6839      	ldr	r1, [r7, #0]
 8019ad0:	68f8      	ldr	r0, [r7, #12]
 8019ad2:	f7ff fe11 	bl	80196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	4619      	mov	r1, r3
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	47a0      	blx	r4
 8019ade:	4603      	mov	r3, r0
 8019ae0:	e00c      	b.n	8019afc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8019ae2:	4b08      	ldr	r3, [pc, #32]	; (8019b04 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8019ae4:	681c      	ldr	r4, [r3, #0]
 8019ae6:	6839      	ldr	r1, [r7, #0]
 8019ae8:	68f8      	ldr	r0, [r7, #12]
 8019aea:	f7ff fe05 	bl	80196f8 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019aee:	4603      	mov	r3, r0
 8019af0:	3320      	adds	r3, #32
 8019af2:	4619      	mov	r1, r3
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	47a0      	blx	r4
 8019af8:	4603      	mov	r3, r0
 8019afa:	bf00      	nop
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	3714      	adds	r7, #20
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd90      	pop	{r4, r7, pc}
 8019b04:	200000cc 	.word	0x200000cc

08019b08 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	60f8      	str	r0, [r7, #12]
 8019b10:	60b9      	str	r1, [r7, #8]
 8019b12:	607a      	str	r2, [r7, #4]
 8019b14:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8019b16:	7e3b      	ldrb	r3, [r7, #24]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d008      	beq.n	8019b2e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8019b1c:	68bb      	ldr	r3, [r7, #8]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	3320      	adds	r3, #32
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2120      	movs	r1, #32
 8019b26:	68b8      	ldr	r0, [r7, #8]
 8019b28:	4798      	blx	r3
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	e006      	b.n	8019b3c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8019b2e:	687a      	ldr	r2, [r7, #4]
 8019b30:	6839      	ldr	r1, [r7, #0]
 8019b32:	68f8      	ldr	r0, [r7, #12]
 8019b34:	f7ff fdef 	bl	8019716 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	bf00      	nop
}
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	3710      	adds	r7, #16
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bd80      	pop	{r7, pc}

08019b44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019b44:	b580      	push	{r7, lr}
 8019b46:	b08a      	sub	sp, #40	; 0x28
 8019b48:	af04      	add	r7, sp, #16
 8019b4a:	60f8      	str	r0, [r7, #12]
 8019b4c:	60b9      	str	r1, [r7, #8]
 8019b4e:	607a      	str	r2, [r7, #4]
 8019b50:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8019b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b56:	9301      	str	r3, [sp, #4]
 8019b58:	6a3b      	ldr	r3, [r7, #32]
 8019b5a:	9300      	str	r3, [sp, #0]
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	687a      	ldr	r2, [r7, #4]
 8019b60:	68b9      	ldr	r1, [r7, #8]
 8019b62:	68f8      	ldr	r0, [r7, #12]
 8019b64:	f7ff ff76 	bl	8019a54 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8019b68:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8019b6a:	697b      	ldr	r3, [r7, #20]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d101      	bne.n	8019b74 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8019b70:	2300      	movs	r3, #0
 8019b72:	e017      	b.n	8019ba4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8019b74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b78:	9300      	str	r3, [sp, #0]
 8019b7a:	697b      	ldr	r3, [r7, #20]
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	68b9      	ldr	r1, [r7, #8]
 8019b80:	68f8      	ldr	r0, [r7, #12]
 8019b82:	f7ff ffc1 	bl	8019b08 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8019b86:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8019b88:	6a3b      	ldr	r3, [r7, #32]
 8019b8a:	9302      	str	r3, [sp, #8]
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	9301      	str	r3, [sp, #4]
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	697a      	ldr	r2, [r7, #20]
 8019b98:	6939      	ldr	r1, [r7, #16]
 8019b9a:	68f8      	ldr	r0, [r7, #12]
 8019b9c:	f7ff fdcc 	bl	8019738 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8019ba0:	693b      	ldr	r3, [r7, #16]
 8019ba2:	689b      	ldr	r3, [r3, #8]
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	3718      	adds	r7, #24
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bd80      	pop	{r7, pc}

08019bac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019bac:	b590      	push	{r4, r7, lr}
 8019bae:	b089      	sub	sp, #36	; 0x24
 8019bb0:	af02      	add	r7, sp, #8
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	607a      	str	r2, [r7, #4]
 8019bb8:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d03a      	beq.n	8019c36 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019bc6:	331c      	adds	r3, #28
 8019bc8:	6879      	ldr	r1, [r7, #4]
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7ff fc13 	bl	80193f6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8019bd0:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d10b      	bne.n	8019bf0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	f103 000c 	add.w	r0, r3, #12
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	685b      	ldr	r3, [r3, #4]
 8019be2:	9300      	str	r3, [sp, #0]
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019be8:	6839      	ldr	r1, [r7, #0]
 8019bea:	f7ff fa0d 	bl	8019008 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8019bee:	e023      	b.n	8019c38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8019bf0:	68b8      	ldr	r0, [r7, #8]
 8019bf2:	f7f8 ff95 	bl	8012b20 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	f083 0301 	eor.w	r3, r3, #1
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d01a      	beq.n	8019c38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8019c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c0c:	9301      	str	r3, [sp, #4]
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	9300      	str	r3, [sp, #0]
 8019c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c14:	683a      	ldr	r2, [r7, #0]
 8019c16:	6979      	ldr	r1, [r7, #20]
 8019c18:	68f8      	ldr	r0, [r7, #12]
 8019c1a:	f7ff fe95 	bl	8019948 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8019c1e:	68bb      	ldr	r3, [r7, #8]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	330c      	adds	r3, #12
 8019c24:	681c      	ldr	r4, [r3, #0]
 8019c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c28:	9300      	str	r3, [sp, #0]
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	693a      	ldr	r2, [r7, #16]
 8019c2e:	6879      	ldr	r1, [r7, #4]
 8019c30:	68b8      	ldr	r0, [r7, #8]
 8019c32:	47a0      	blx	r4
 8019c34:	e000      	b.n	8019c38 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8019c36:	bf00      	nop
    }
}
 8019c38:	371c      	adds	r7, #28
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd90      	pop	{r4, r7, pc}
	...

08019c40 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b086      	sub	sp, #24
 8019c44:	af02      	add	r7, sp, #8
 8019c46:	60f8      	str	r0, [r7, #12]
 8019c48:	60b9      	str	r1, [r7, #8]
 8019c4a:	607a      	str	r2, [r7, #4]
 8019c4c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8019c4e:	4b08      	ldr	r3, [pc, #32]	; (8019c70 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8019c50:	681a      	ldr	r2, [r3, #0]
 8019c52:	78fb      	ldrb	r3, [r7, #3]
 8019c54:	9301      	str	r3, [sp, #4]
 8019c56:	2300      	movs	r3, #0
 8019c58:	9300      	str	r3, [sp, #0]
 8019c5a:	4613      	mov	r3, r2
 8019c5c:	687a      	ldr	r2, [r7, #4]
 8019c5e:	68b9      	ldr	r1, [r7, #8]
 8019c60:	68f8      	ldr	r0, [r7, #12]
 8019c62:	f7ff ffa3 	bl	8019bac <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8019c66:	bf00      	nop
 8019c68:	3710      	adds	r7, #16
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}
 8019c6e:	bf00      	nop
 8019c70:	20000100 	.word	0x20000100

08019c74 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b08a      	sub	sp, #40	; 0x28
 8019c78:	af04      	add	r7, sp, #16
 8019c7a:	60f8      	str	r0, [r7, #12]
 8019c7c:	60b9      	str	r1, [r7, #8]
 8019c7e:	607a      	str	r2, [r7, #4]
 8019c80:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d023      	beq.n	8019cd0 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c8e:	331c      	adds	r3, #28
 8019c90:	6879      	ldr	r1, [r7, #4]
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7ff fbaf 	bl	80193f6 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8019c98:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d10c      	bne.n	8019cba <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	f103 000c 	add.w	r0, r3, #12
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	685b      	ldr	r3, [r3, #4]
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cb0:	6a39      	ldr	r1, [r7, #32]
 8019cb2:	f7ff f9a9 	bl	8019008 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	e019      	b.n	8019cee <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8019cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019cbe:	9301      	str	r3, [sp, #4]
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	9300      	str	r3, [sp, #0]
 8019cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc6:	6a3a      	ldr	r2, [r7, #32]
 8019cc8:	6979      	ldr	r1, [r7, #20]
 8019cca:	68f8      	ldr	r0, [r7, #12]
 8019ccc:	f7ff fe3c 	bl	8019948 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8019cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019cd4:	9302      	str	r3, [sp, #8]
 8019cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd8:	9301      	str	r3, [sp, #4]
 8019cda:	6a3b      	ldr	r3, [r7, #32]
 8019cdc:	9300      	str	r3, [sp, #0]
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	68b9      	ldr	r1, [r7, #8]
 8019ce4:	68f8      	ldr	r0, [r7, #12]
 8019ce6:	f7ff fd62 	bl	80197ae <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8019cea:	4603      	mov	r3, r0
 8019cec:	bf00      	nop
}
 8019cee:	4618      	mov	r0, r3
 8019cf0:	3718      	adds	r7, #24
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}

08019cf6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8019cf6:	b580      	push	{r7, lr}
 8019cf8:	b084      	sub	sp, #16
 8019cfa:	af00      	add	r7, sp, #0
 8019cfc:	6078      	str	r0, [r7, #4]
 8019cfe:	460b      	mov	r3, r1
 8019d00:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d08:	331c      	adds	r3, #28
 8019d0a:	78fa      	ldrb	r2, [r7, #3]
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f7ff fbc0 	bl	8019494 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8019d14:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	330c      	adds	r3, #12
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7ff f882 	bl	8018e24 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d010      	beq.n	8019d48 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	330c      	adds	r3, #12
 8019d2a:	68f9      	ldr	r1, [r7, #12]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f7ff f897 	bl	8018e60 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d38:	331c      	adds	r3, #28
 8019d3a:	78fa      	ldrb	r2, [r7, #3]
 8019d3c:	68f9      	ldr	r1, [r7, #12]
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7ff fbcb 	bl	80194da <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019d44:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8019d46:	e7eb      	b.n	8019d20 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	330c      	adds	r3, #12
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	f7ff f8e7 	bl	8018f20 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8019d52:	bf00      	nop
 8019d54:	3710      	adds	r7, #16
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bd80      	pop	{r7, pc}

08019d5a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8019d5a:	b580      	push	{r7, lr}
 8019d5c:	b082      	sub	sp, #8
 8019d5e:	af00      	add	r7, sp, #0
 8019d60:	6078      	str	r0, [r7, #4]
 8019d62:	460b      	mov	r3, r1
 8019d64:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8019d66:	78fb      	ldrb	r3, [r7, #3]
 8019d68:	4619      	mov	r1, r3
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f7ff ffc3 	bl	8019cf6 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	330c      	adds	r3, #12
 8019d74:	4618      	mov	r0, r3
 8019d76:	f7ff f9e5 	bl	8019144 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8019d7a:	4603      	mov	r3, r0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3708      	adds	r7, #8
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}

08019d84 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b084      	sub	sp, #16
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d92:	331c      	adds	r3, #28
 8019d94:	2103      	movs	r1, #3
 8019d96:	4618      	mov	r0, r3
 8019d98:	f7ff fb7c 	bl	8019494 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8019d9c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d011      	beq.n	8019dc8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	7e1b      	ldrb	r3, [r3, #24]
 8019da8:	2b03      	cmp	r3, #3
 8019daa:	d102      	bne.n	8019db2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	2202      	movs	r2, #2
 8019db0:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019db8:	331c      	adds	r3, #28
 8019dba:	2203      	movs	r2, #3
 8019dbc:	68f9      	ldr	r1, [r7, #12]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7ff fb8b 	bl	80194da <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019dc4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8019dc6:	e7ea      	b.n	8019d9e <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8019dc8:	bf00      	nop
 8019dca:	3710      	adds	r7, #16
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	bd80      	pop	{r7, pc}

08019dd0 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b082      	sub	sp, #8
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
 8019dd8:	460b      	mov	r3, r1
 8019dda:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019de2:	331c      	adds	r3, #28
 8019de4:	78fa      	ldrb	r2, [r7, #3]
 8019de6:	4611      	mov	r1, r2
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7ff fb30 	bl	801944e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8019dee:	4603      	mov	r3, r0
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3708      	adds	r7, #8
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}

08019df8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b084      	sub	sp, #16
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	60f8      	str	r0, [r7, #12]
 8019e00:	60b9      	str	r1, [r7, #8]
 8019e02:	607a      	str	r2, [r7, #4]
 8019e04:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	68b9      	ldr	r1, [r7, #8]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7f5 fb13 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	3308      	adds	r3, #8
 8019e14:	6879      	ldr	r1, [r7, #4]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7f5 fb0d 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	683a      	ldr	r2, [r7, #0]
 8019e20:	611a      	str	r2, [r3, #16]
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	2200      	movs	r2, #0
 8019e26:	615a      	str	r2, [r3, #20]
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	3710      	adds	r7, #16
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bd80      	pop	{r7, pc}

08019e32 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8019e32:	b480      	push	{r7}
 8019e34:	b083      	sub	sp, #12
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	6078      	str	r0, [r7, #4]
 8019e3a:	6039      	str	r1, [r7, #0]
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	370c      	adds	r7, #12
 8019e42:	46bd      	mov	sp, r7
 8019e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e48:	4770      	bx	lr

08019e4a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8019e4a:	b480      	push	{r7}
 8019e4c:	b083      	sub	sp, #12
 8019e4e:	af00      	add	r7, sp, #0
 8019e50:	6078      	str	r0, [r7, #4]
 8019e52:	6039      	str	r1, [r7, #0]
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	4618      	mov	r0, r3
 8019e58:	370c      	adds	r7, #12
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e60:	4770      	bx	lr

08019e62 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8019e62:	b480      	push	{r7}
 8019e64:	b085      	sub	sp, #20
 8019e66:	af00      	add	r7, sp, #0
 8019e68:	60f8      	str	r0, [r7, #12]
 8019e6a:	60b9      	str	r1, [r7, #8]
 8019e6c:	4613      	mov	r3, r2
 8019e6e:	71fb      	strb	r3, [r7, #7]
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	4618      	mov	r0, r3
 8019e74:	3714      	adds	r7, #20
 8019e76:	46bd      	mov	sp, r7
 8019e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7c:	4770      	bx	lr

08019e7e <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8019e7e:	b480      	push	{r7}
 8019e80:	b085      	sub	sp, #20
 8019e82:	af00      	add	r7, sp, #0
 8019e84:	60f8      	str	r0, [r7, #12]
 8019e86:	60b9      	str	r1, [r7, #8]
 8019e88:	607a      	str	r2, [r7, #4]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3714      	adds	r7, #20
 8019e90:	46bd      	mov	sp, r7
 8019e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e96:	4770      	bx	lr

08019e98 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8019e98:	b480      	push	{r7}
 8019e9a:	b085      	sub	sp, #20
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	60f8      	str	r0, [r7, #12]
 8019ea0:	60b9      	str	r1, [r7, #8]
 8019ea2:	607a      	str	r2, [r7, #4]
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3714      	adds	r7, #20
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb0:	4770      	bx	lr

08019eb2 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8019eb2:	b480      	push	{r7}
 8019eb4:	b085      	sub	sp, #20
 8019eb6:	af00      	add	r7, sp, #0
 8019eb8:	60f8      	str	r0, [r7, #12]
 8019eba:	60b9      	str	r1, [r7, #8]
 8019ebc:	607a      	str	r2, [r7, #4]
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	3714      	adds	r7, #20
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eca:	4770      	bx	lr

08019ecc <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8019ecc:	b480      	push	{r7}
 8019ece:	b085      	sub	sp, #20
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	60f8      	str	r0, [r7, #12]
 8019ed4:	60b9      	str	r1, [r7, #8]
 8019ed6:	607a      	str	r2, [r7, #4]
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	4618      	mov	r0, r3
 8019edc:	3714      	adds	r7, #20
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee4:	4770      	bx	lr

08019ee6 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019ee6:	b480      	push	{r7}
 8019ee8:	b085      	sub	sp, #20
 8019eea:	af00      	add	r7, sp, #0
 8019eec:	60f8      	str	r0, [r7, #12]
 8019eee:	60b9      	str	r1, [r7, #8]
 8019ef0:	4639      	mov	r1, r7
 8019ef2:	e881 000c 	stmia.w	r1, {r2, r3}
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	3714      	adds	r7, #20
 8019efc:	46bd      	mov	sp, r7
 8019efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f02:	4770      	bx	lr

08019f04 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019f04:	b480      	push	{r7}
 8019f06:	b085      	sub	sp, #20
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	60f8      	str	r0, [r7, #12]
 8019f0c:	60b9      	str	r1, [r7, #8]
 8019f0e:	4639      	mov	r1, r7
 8019f10:	e881 000c 	stmia.w	r1, {r2, r3}
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	4618      	mov	r0, r3
 8019f18:	3714      	adds	r7, #20
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f20:	4770      	bx	lr

08019f22 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019f22:	b480      	push	{r7}
 8019f24:	b085      	sub	sp, #20
 8019f26:	af00      	add	r7, sp, #0
 8019f28:	60f8      	str	r0, [r7, #12]
 8019f2a:	60b9      	str	r1, [r7, #8]
 8019f2c:	ed87 0b00 	vstr	d0, [r7]
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	4618      	mov	r0, r3
 8019f34:	3714      	adds	r7, #20
 8019f36:	46bd      	mov	sp, r7
 8019f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3c:	4770      	bx	lr

08019f3e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019f3e:	b480      	push	{r7}
 8019f40:	b085      	sub	sp, #20
 8019f42:	af00      	add	r7, sp, #0
 8019f44:	60f8      	str	r0, [r7, #12]
 8019f46:	60b9      	str	r1, [r7, #8]
 8019f48:	607a      	str	r2, [r7, #4]
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3714      	adds	r7, #20
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr

08019f58 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019f58:	b480      	push	{r7}
 8019f5a:	b085      	sub	sp, #20
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	60f8      	str	r0, [r7, #12]
 8019f60:	60b9      	str	r1, [r7, #8]
 8019f62:	607a      	str	r2, [r7, #4]
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	4618      	mov	r0, r3
 8019f68:	3714      	adds	r7, #20
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f70:	4770      	bx	lr

08019f72 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019f72:	b480      	push	{r7}
 8019f74:	b085      	sub	sp, #20
 8019f76:	af00      	add	r7, sp, #0
 8019f78:	60f8      	str	r0, [r7, #12]
 8019f7a:	60b9      	str	r1, [r7, #8]
 8019f7c:	607a      	str	r2, [r7, #4]
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	4618      	mov	r0, r3
 8019f82:	3714      	adds	r7, #20
 8019f84:	46bd      	mov	sp, r7
 8019f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8a:	4770      	bx	lr

08019f8c <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8019f8c:	b480      	push	{r7}
 8019f8e:	b085      	sub	sp, #20
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	3714      	adds	r7, #20
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa4:	4770      	bx	lr

08019fa6 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8019fa6:	b480      	push	{r7}
 8019fa8:	b085      	sub	sp, #20
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	60f8      	str	r0, [r7, #12]
 8019fae:	60b9      	str	r1, [r7, #8]
 8019fb0:	607a      	str	r2, [r7, #4]
 8019fb2:	603b      	str	r3, [r7, #0]
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	3714      	adds	r7, #20
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr

08019fc2 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019fc2:	b480      	push	{r7}
 8019fc4:	b085      	sub	sp, #20
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	60f8      	str	r0, [r7, #12]
 8019fca:	60b9      	str	r1, [r7, #8]
 8019fcc:	607a      	str	r2, [r7, #4]
 8019fce:	603b      	str	r3, [r7, #0]
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	3714      	adds	r7, #20
 8019fd6:	46bd      	mov	sp, r7
 8019fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fdc:	4770      	bx	lr

08019fde <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8019fde:	b480      	push	{r7}
 8019fe0:	b085      	sub	sp, #20
 8019fe2:	af00      	add	r7, sp, #0
 8019fe4:	60f8      	str	r0, [r7, #12]
 8019fe6:	60b9      	str	r1, [r7, #8]
 8019fe8:	607a      	str	r2, [r7, #4]
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	4618      	mov	r0, r3
 8019fee:	3714      	adds	r7, #20
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff6:	4770      	bx	lr

08019ff8 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8019ff8:	b480      	push	{r7}
 8019ffa:	b085      	sub	sp, #20
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	60f8      	str	r0, [r7, #12]
 801a000:	60b9      	str	r1, [r7, #8]
 801a002:	607a      	str	r2, [r7, #4]
 801a004:	603b      	str	r3, [r7, #0]
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	4618      	mov	r0, r3
 801a00a:	3714      	adds	r7, #20
 801a00c:	46bd      	mov	sp, r7
 801a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a012:	4770      	bx	lr

0801a014 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 801a014:	b480      	push	{r7}
 801a016:	b083      	sub	sp, #12
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
 801a01c:	2300      	movs	r3, #0
 801a01e:	4618      	mov	r0, r3
 801a020:	370c      	adds	r7, #12
 801a022:	46bd      	mov	sp, r7
 801a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a028:	4770      	bx	lr
	...

0801a02c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b084      	sub	sp, #16
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	6039      	str	r1, [r7, #0]
 801a036:	f107 0308 	add.w	r3, r7, #8
 801a03a:	4909      	ldr	r1, [pc, #36]	; (801a060 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 801a03c:	4618      	mov	r0, r3
 801a03e:	f7f5 f9a6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801a042:	f107 0308 	add.w	r3, r7, #8
 801a046:	4619      	mov	r1, r3
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f005 fec5 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801a04e:	f107 0308 	add.w	r3, r7, #8
 801a052:	4618      	mov	r0, r3
 801a054:	f7f5 fd53 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	3710      	adds	r7, #16
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}
 801a060:	08028fc4 	.word	0x08028fc4

0801a064 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
 801a06c:	460b      	mov	r3, r1
 801a06e:	70fb      	strb	r3, [r7, #3]
 801a070:	78fb      	ldrb	r3, [r7, #3]
 801a072:	4618      	mov	r0, r3
 801a074:	370c      	adds	r7, #12
 801a076:	46bd      	mov	sp, r7
 801a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07c:	4770      	bx	lr

0801a07e <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 801a07e:	b480      	push	{r7}
 801a080:	b083      	sub	sp, #12
 801a082:	af00      	add	r7, sp, #0
 801a084:	6078      	str	r0, [r7, #4]
 801a086:	2300      	movs	r3, #0
 801a088:	4618      	mov	r0, r3
 801a08a:	370c      	adds	r7, #12
 801a08c:	46bd      	mov	sp, r7
 801a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a092:	4770      	bx	lr

0801a094 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 801a094:	b480      	push	{r7}
 801a096:	b083      	sub	sp, #12
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
 801a09c:	2300      	movs	r3, #0
 801a09e:	4618      	mov	r0, r3
 801a0a0:	370c      	adds	r7, #12
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a8:	4770      	bx	lr

0801a0aa <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 801a0aa:	b480      	push	{r7}
 801a0ac:	b083      	sub	sp, #12
 801a0ae:	af00      	add	r7, sp, #0
 801a0b0:	6078      	str	r0, [r7, #4]
 801a0b2:	6039      	str	r1, [r7, #0]
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	4618      	mov	r0, r3
 801a0b8:	370c      	adds	r7, #12
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c0:	4770      	bx	lr

0801a0c2 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 801a0c2:	b480      	push	{r7}
 801a0c4:	b083      	sub	sp, #12
 801a0c6:	af00      	add	r7, sp, #0
 801a0c8:	6078      	str	r0, [r7, #4]
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	370c      	adds	r7, #12
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d6:	4770      	bx	lr

0801a0d8 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 801a0d8:	b480      	push	{r7}
 801a0da:	b083      	sub	sp, #12
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
 801a0e0:	6039      	str	r1, [r7, #0]
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	370c      	adds	r7, #12
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ee:	4770      	bx	lr

0801a0f0 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 801a0f0:	b480      	push	{r7}
 801a0f2:	b083      	sub	sp, #12
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	370c      	adds	r7, #12
 801a0fe:	46bd      	mov	sp, r7
 801a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a104:	4770      	bx	lr

0801a106 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801a106:	b480      	push	{r7}
 801a108:	b083      	sub	sp, #12
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	6078      	str	r0, [r7, #4]
 801a10e:	6039      	str	r1, [r7, #0]
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	4618      	mov	r0, r3
 801a114:	370c      	adds	r7, #12
 801a116:	46bd      	mov	sp, r7
 801a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11c:	4770      	bx	lr

0801a11e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 801a11e:	b580      	push	{r7, lr}
 801a120:	b082      	sub	sp, #8
 801a122:	af00      	add	r7, sp, #0
 801a124:	6078      	str	r0, [r7, #4]
 801a126:	6039      	str	r1, [r7, #0]
 801a128:	2100      	movs	r1, #0
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	f7f3 f972 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	3708      	adds	r7, #8
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}

0801a138 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 801a138:	b480      	push	{r7}
 801a13a:	b085      	sub	sp, #20
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	60f8      	str	r0, [r7, #12]
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	4639      	mov	r1, r7
 801a144:	e881 000c 	stmia.w	r1, {r2, r3}
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	461a      	mov	r2, r3
 801a14c:	463b      	mov	r3, r7
 801a14e:	cb03      	ldmia	r3!, {r0, r1}
 801a150:	6010      	str	r0, [r2, #0]
 801a152:	6051      	str	r1, [r2, #4]
 801a154:	68f8      	ldr	r0, [r7, #12]
 801a156:	3714      	adds	r7, #20
 801a158:	46bd      	mov	sp, r7
 801a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a15e:	4770      	bx	lr

0801a160 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 801a160:	b580      	push	{r7, lr}
 801a162:	b082      	sub	sp, #8
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
 801a168:	6039      	str	r1, [r7, #0]
 801a16a:	2100      	movs	r1, #0
 801a16c:	6878      	ldr	r0, [r7, #4]
 801a16e:	f7f3 f945 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
 801a172:	6878      	ldr	r0, [r7, #4]
 801a174:	3708      	adds	r7, #8
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}

0801a17a <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801a17a:	b480      	push	{r7}
 801a17c:	b085      	sub	sp, #20
 801a17e:	af00      	add	r7, sp, #0
 801a180:	60f8      	str	r0, [r7, #12]
 801a182:	60b9      	str	r1, [r7, #8]
 801a184:	4639      	mov	r1, r7
 801a186:	e881 000c 	stmia.w	r1, {r2, r3}
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	461a      	mov	r2, r3
 801a18e:	463b      	mov	r3, r7
 801a190:	cb03      	ldmia	r3!, {r0, r1}
 801a192:	6010      	str	r0, [r2, #0]
 801a194:	6051      	str	r1, [r2, #4]
 801a196:	68f8      	ldr	r0, [r7, #12]
 801a198:	3714      	adds	r7, #20
 801a19a:	46bd      	mov	sp, r7
 801a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a0:	4770      	bx	lr

0801a1a2 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 801a1a2:	b480      	push	{r7}
 801a1a4:	b083      	sub	sp, #12
 801a1a6:	af00      	add	r7, sp, #0
 801a1a8:	6078      	str	r0, [r7, #4]
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	370c      	adds	r7, #12
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b6:	4770      	bx	lr

0801a1b8 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 801a1b8:	b480      	push	{r7}
 801a1ba:	b083      	sub	sp, #12
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
 801a1c0:	6039      	str	r1, [r7, #0]
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	370c      	adds	r7, #12
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ce:	4770      	bx	lr

0801a1d0 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 801a1d0:	b480      	push	{r7}
 801a1d2:	b083      	sub	sp, #12
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
 801a1d8:	f04f 0200 	mov.w	r2, #0
 801a1dc:	f04f 0300 	mov.w	r3, #0
 801a1e0:	ec43 2b17 	vmov	d7, r2, r3
 801a1e4:	eeb0 0a47 	vmov.f32	s0, s14
 801a1e8:	eef0 0a67 	vmov.f32	s1, s15
 801a1ec:	370c      	adds	r7, #12
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f4:	4770      	bx	lr

0801a1f6 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 801a1f6:	b480      	push	{r7}
 801a1f8:	b085      	sub	sp, #20
 801a1fa:	af00      	add	r7, sp, #0
 801a1fc:	60f8      	str	r0, [r7, #12]
 801a1fe:	ed87 0b00 	vstr	d0, [r7]
 801a202:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a206:	ec43 2b17 	vmov	d7, r2, r3
 801a20a:	eeb0 0a47 	vmov.f32	s0, s14
 801a20e:	eef0 0a67 	vmov.f32	s1, s15
 801a212:	3714      	adds	r7, #20
 801a214:	46bd      	mov	sp, r7
 801a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a21a:	4770      	bx	lr

0801a21c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 801a21c:	b480      	push	{r7}
 801a21e:	b083      	sub	sp, #12
 801a220:	af00      	add	r7, sp, #0
 801a222:	6078      	str	r0, [r7, #4]
 801a224:	4b03      	ldr	r3, [pc, #12]	; (801a234 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801a226:	4618      	mov	r0, r3
 801a228:	370c      	adds	r7, #12
 801a22a:	46bd      	mov	sp, r7
 801a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a230:	4770      	bx	lr
 801a232:	bf00      	nop
 801a234:	08028fc4 	.word	0x08028fc4

0801a238 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 801a238:	b480      	push	{r7}
 801a23a:	b083      	sub	sp, #12
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
 801a240:	6039      	str	r1, [r7, #0]
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	4618      	mov	r0, r3
 801a246:	370c      	adds	r7, #12
 801a248:	46bd      	mov	sp, r7
 801a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24e:	4770      	bx	lr

0801a250 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 801a250:	b480      	push	{r7}
 801a252:	b083      	sub	sp, #12
 801a254:	af00      	add	r7, sp, #0
 801a256:	6078      	str	r0, [r7, #4]
 801a258:	2300      	movs	r3, #0
 801a25a:	4618      	mov	r0, r3
 801a25c:	370c      	adds	r7, #12
 801a25e:	46bd      	mov	sp, r7
 801a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a264:	4770      	bx	lr

0801a266 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801a266:	b480      	push	{r7}
 801a268:	b083      	sub	sp, #12
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	6078      	str	r0, [r7, #4]
 801a26e:	6039      	str	r1, [r7, #0]
 801a270:	683b      	ldr	r3, [r7, #0]
 801a272:	4618      	mov	r0, r3
 801a274:	370c      	adds	r7, #12
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr

0801a27e <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 801a27e:	b480      	push	{r7}
 801a280:	b083      	sub	sp, #12
 801a282:	af00      	add	r7, sp, #0
 801a284:	6078      	str	r0, [r7, #4]
 801a286:	2300      	movs	r3, #0
 801a288:	4618      	mov	r0, r3
 801a28a:	370c      	adds	r7, #12
 801a28c:	46bd      	mov	sp, r7
 801a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a292:	4770      	bx	lr

0801a294 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 801a294:	b480      	push	{r7}
 801a296:	b083      	sub	sp, #12
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	370c      	adds	r7, #12
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2aa:	4770      	bx	lr

0801a2ac <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 801a2ac:	b480      	push	{r7}
 801a2ae:	b083      	sub	sp, #12
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	370c      	adds	r7, #12
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c0:	4770      	bx	lr

0801a2c2 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 801a2c2:	b480      	push	{r7}
 801a2c4:	b083      	sub	sp, #12
 801a2c6:	af00      	add	r7, sp, #0
 801a2c8:	6078      	str	r0, [r7, #4]
 801a2ca:	6039      	str	r1, [r7, #0]
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	370c      	adds	r7, #12
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d8:	4770      	bx	lr

0801a2da <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 801a2da:	b480      	push	{r7}
 801a2dc:	b083      	sub	sp, #12
 801a2de:	af00      	add	r7, sp, #0
 801a2e0:	6078      	str	r0, [r7, #4]
 801a2e2:	6039      	str	r1, [r7, #0]
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	370c      	adds	r7, #12
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f0:	4770      	bx	lr
	...

0801a2f4 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	4a04      	ldr	r2, [pc, #16]	; (801a310 <_ZN14MockActualCallC1Ev+0x1c>)
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	601a      	str	r2, [r3, #0]
{
}
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	4618      	mov	r0, r3
 801a306:	370c      	adds	r7, #12
 801a308:	46bd      	mov	sp, r7
 801a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30e:	4770      	bx	lr
 801a310:	0802c4b4 	.word	0x0802c4b4

0801a314 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 801a314:	b480      	push	{r7}
 801a316:	b083      	sub	sp, #12
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
 801a31c:	4a04      	ldr	r2, [pc, #16]	; (801a330 <_ZN14MockActualCallD1Ev+0x1c>)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	601a      	str	r2, [r3, #0]
{
}
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	4618      	mov	r0, r3
 801a326:	370c      	adds	r7, #12
 801a328:	46bd      	mov	sp, r7
 801a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32e:	4770      	bx	lr
 801a330:	0802c4b4 	.word	0x0802c4b4

0801a334 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b082      	sub	sp, #8
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
 801a33c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	3304      	adds	r3, #4
 801a342:	6839      	ldr	r1, [r7, #0]
 801a344:	4618      	mov	r0, r3
 801a346:	f7f5 f88e 	bl	800f466 <_ZN12SimpleStringaSERKS_>
}
 801a34a:	bf00      	nop
 801a34c:	3708      	adds	r7, #8
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}

0801a352 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 801a352:	b580      	push	{r7, lr}
 801a354:	b082      	sub	sp, #8
 801a356:	af00      	add	r7, sp, #0
 801a358:	6078      	str	r0, [r7, #4]
 801a35a:	6039      	str	r1, [r7, #0]
    return functionName_;
 801a35c:	683b      	ldr	r3, [r7, #0]
 801a35e:	3304      	adds	r3, #4
 801a360:	4619      	mov	r1, r3
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f7f5 f867 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 801a368:	6878      	ldr	r0, [r7, #4]
 801a36a:	3708      	adds	r7, #8
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 801a370:	b580      	push	{r7, lr}
 801a372:	b084      	sub	sp, #16
 801a374:	af00      	add	r7, sp, #0
 801a376:	60f8      	str	r0, [r7, #12]
 801a378:	60b9      	str	r1, [r7, #8]
 801a37a:	607a      	str	r2, [r7, #4]
 801a37c:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	4618      	mov	r0, r3
 801a382:	f7ff ffb7 	bl	801a2f4 <_ZN14MockActualCallC1Ev>
 801a386:	4a17      	ldr	r2, [pc, #92]	; (801a3e4 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	601a      	str	r2, [r3, #0]
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	3304      	adds	r3, #4
 801a390:	4915      	ldr	r1, [pc, #84]	; (801a3e8 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 801a392:	4618      	mov	r0, r3
 801a394:	f7f4 fffb 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	68ba      	ldr	r2, [r7, #8]
 801a39c:	60da      	str	r2, [r3, #12]
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	687a      	ldr	r2, [r7, #4]
 801a3a2:	611a      	str	r2, [r3, #16]
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	2202      	movs	r2, #2
 801a3a8:	751a      	strb	r2, [r3, #20]
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	755a      	strb	r2, [r3, #21]
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	619a      	str	r2, [r3, #24]
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	331c      	adds	r3, #28
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f004 f814 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	683a      	ldr	r2, [r7, #0]
 801a3c4:	625a      	str	r2, [r3, #36]	; 0x24
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	331c      	adds	r3, #28
 801a3d0:	6839      	ldr	r1, [r7, #0]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f004 f986 	bl	801e6e4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3710      	adds	r7, #16
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
 801a3e2:	bf00      	nop
 801a3e4:	0802c3b4 	.word	0x0802c3b4
 801a3e8:	08028fc4 	.word	0x08028fc4

0801a3ec <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b082      	sub	sp, #8
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	4a0c      	ldr	r2, [pc, #48]	; (801a428 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 801a3fa:	6878      	ldr	r0, [r7, #4]
 801a3fc:	f001 fae4 	bl	801b9c8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	331c      	adds	r3, #28
 801a404:	4618      	mov	r0, r3
 801a406:	f004 f803 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	3304      	adds	r3, #4
 801a40e:	4618      	mov	r0, r3
 801a410:	f7f5 fb75 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	4618      	mov	r0, r3
 801a418:	f7ff ff7c 	bl	801a314 <_ZN14MockActualCallD1Ev>
}
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	4618      	mov	r0, r3
 801a420:	3708      	adds	r7, #8
 801a422:	46bd      	mov	sp, r7
 801a424:	bd80      	pop	{r7, pc}
 801a426:	bf00      	nop
 801a428:	0802c3b4 	.word	0x0802c3b4

0801a42c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b082      	sub	sp, #8
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
}
 801a434:	6878      	ldr	r0, [r7, #4]
 801a436:	f7ff ffd9 	bl	801a3ec <_ZN21MockCheckedActualCallD1Ev>
 801a43a:	212c      	movs	r1, #44	; 0x2c
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	f7f2 fbf7 	bl	800cc30 <_ZdlPvj>
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	4618      	mov	r0, r3
 801a446:	3708      	adds	r7, #8
 801a448:	46bd      	mov	sp, r7
 801a44a:	bd80      	pop	{r7, pc}

0801a44c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 801a44c:	b480      	push	{r7}
 801a44e:	b083      	sub	sp, #12
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	683a      	ldr	r2, [r7, #0]
 801a45a:	611a      	str	r2, [r3, #16]
}
 801a45c:	bf00      	nop
 801a45e:	370c      	adds	r7, #12
 801a460:	46bd      	mov	sp, r7
 801a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a466:	4770      	bx	lr

0801a468 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	691a      	ldr	r2, [r3, #16]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	691b      	ldr	r3, [r3, #16]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	330c      	adds	r3, #12
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4610      	mov	r0, r2
 801a480:	4798      	blx	r3
 801a482:	4603      	mov	r3, r0
}
 801a484:	4618      	mov	r0, r3
 801a486:	3708      	adds	r7, #8
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}

0801a48c <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
 801a494:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	33c0      	adds	r3, #192	; 0xc0
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	6878      	ldr	r0, [r7, #4]
 801a4a0:	4798      	blx	r3
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	f083 0301 	eor.w	r3, r3, #1
 801a4a8:	b2db      	uxtb	r3, r3
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d010      	beq.n	801a4d0 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	33ec      	adds	r3, #236	; 0xec
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	2101      	movs	r1, #1
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	4798      	blx	r3
        reporter_->failTest(failure);
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	691a      	ldr	r2, [r3, #16]
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	691b      	ldr	r3, [r3, #16]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	3308      	adds	r3, #8
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	6839      	ldr	r1, [r7, #0]
 801a4cc:	4610      	mov	r0, r2
 801a4ce:	4798      	blx	r3
    }
}
 801a4d0:	bf00      	nop
 801a4d2:	3708      	adds	r7, #8
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}

0801a4d8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 801a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4dc:	b0bc      	sub	sp, #240	; 0xf0
 801a4de:	af00      	add	r7, sp, #0
 801a4e0:	6078      	str	r0, [r7, #4]
 801a4e2:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a4ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f000 80f5 	beq.w	801a6e0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	339c      	adds	r3, #156	; 0x9c
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a502:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801a506:	6839      	ldr	r1, [r7, #0]
 801a508:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 801a50a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a50e:	4618      	mov	r0, r3
 801a510:	f006 fa6e 	bl	80209f0 <_ZNK14MockNamedValue9getCopierEv>
 801a514:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 801a518:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d013      	beq.n	801a548 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 801a520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	3308      	adds	r3, #8
 801a528:	681c      	ldr	r4, [r3, #0]
 801a52a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a52e:	691d      	ldr	r5, [r3, #16]
 801a530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a534:	4618      	mov	r0, r3
 801a536:	f006 fa2b 	bl	8020990 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801a53a:	4603      	mov	r3, r0
 801a53c:	461a      	mov	r2, r3
 801a53e:	4629      	mov	r1, r5
 801a540:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801a544:	47a0      	blx	r4
 801a546:	e0c0      	b.n	801a6ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 801a548:	2500      	movs	r5, #0
 801a54a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a54e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a552:	4611      	mov	r1, r2
 801a554:	4618      	mov	r0, r3
 801a556:	f005 ff0e 	bl	8020376 <_ZNK14MockNamedValue7getTypeEv>
 801a55a:	2601      	movs	r6, #1
 801a55c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a560:	4962      	ldr	r1, [pc, #392]	; (801a6ec <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801a562:	4618      	mov	r0, r3
 801a564:	f7f4 ff13 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801a568:	f04f 0801 	mov.w	r8, #1
 801a56c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a570:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a574:	4611      	mov	r1, r2
 801a576:	4618      	mov	r0, r3
 801a578:	f7f5 facd 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801a57c:	4603      	mov	r3, r0
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d015      	beq.n	801a5ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801a582:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a586:	f103 0408 	add.w	r4, r3, #8
 801a58a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a58e:	4958      	ldr	r1, [pc, #352]	; (801a6f0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 801a590:	4618      	mov	r0, r3
 801a592:	f7f4 fefc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801a596:	2501      	movs	r5, #1
 801a598:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a59c:	4619      	mov	r1, r3
 801a59e:	4620      	mov	r0, r4
 801a5a0:	f7f5 fab9 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d001      	beq.n	801a5ae <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801a5aa:	2401      	movs	r4, #1
 801a5ac:	e000      	b.n	801a5b0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801a5ae:	2400      	movs	r4, #0
 801a5b0:	2d00      	cmp	r5, #0
 801a5b2:	d004      	beq.n	801a5be <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 801a5b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7f5 faa0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a5be:	f1b8 0f00 	cmp.w	r8, #0
 801a5c2:	d004      	beq.n	801a5ce <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 801a5c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7f5 fa98 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a5ce:	2e00      	cmp	r6, #0
 801a5d0:	d004      	beq.n	801a5dc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 801a5d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f7f5 fa91 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a5dc:	2c00      	cmp	r4, #0
 801a5de:	d018      	beq.n	801a612 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 801a5e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f006 f95b 	bl	80208a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801a5ea:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801a5ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f006 f9e4 	bl	80209c0 <_ZNK14MockNamedValue7getSizeEv>
 801a5f8:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 801a5fc:	4b3d      	ldr	r3, [pc, #244]	; (801a6f4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a604:	6910      	ldr	r0, [r2, #16]
 801a606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801a60a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801a60e:	4798      	blx	r3
 801a610:	e05b      	b.n	801a6ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801a612:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a616:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a61a:	4611      	mov	r1, r2
 801a61c:	4618      	mov	r0, r3
 801a61e:	f005 fe9b 	bl	8020358 <_ZNK14MockNamedValue7getNameEv>
 801a622:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a626:	4934      	ldr	r1, [pc, #208]	; (801a6f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f4 feb0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801a62e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801a632:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a636:	4611      	mov	r1, r2
 801a638:	4618      	mov	r0, r3
 801a63a:	f7f5 fab1 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 801a63e:	4603      	mov	r3, r0
 801a640:	461c      	mov	r4, r3
 801a642:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a646:	4618      	mov	r0, r3
 801a648:	f7f5 fa59 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a64c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a650:	4618      	mov	r0, r3
 801a652:	f7f5 fa54 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801a656:	2c00      	cmp	r4, #0
 801a658:	d037      	beq.n	801a6ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801a65a:	683b      	ldr	r3, [r7, #0]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	339c      	adds	r3, #156	; 0x9c
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a666:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801a66a:	6839      	ldr	r1, [r7, #0]
 801a66c:	4798      	blx	r3
 801a66e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801a672:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801a676:	4611      	mov	r1, r2
 801a678:	4618      	mov	r0, r3
 801a67a:	f005 fe7c 	bl	8020376 <_ZNK14MockNamedValue7getTypeEv>
 801a67e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801a682:	4618      	mov	r0, r3
 801a684:	f005 fbd2 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	33cc      	adds	r3, #204	; 0xcc
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	6878      	ldr	r0, [r7, #4]
 801a692:	4798      	blx	r3
 801a694:	4601      	mov	r1, r0
 801a696:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801a69a:	f107 030c 	add.w	r3, r7, #12
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f005 faee 	bl	801fc80 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	33dc      	adds	r3, #220	; 0xdc
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	f107 020c 	add.w	r2, r7, #12
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	6878      	ldr	r0, [r7, #4]
 801a6b4:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801a6b6:	f107 030c 	add.w	r3, r7, #12
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f001 ffe2 	bl	801c684 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801a6c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	f7f5 fa1a 	bl	800fafe <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801a6ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f005 fbac 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801a6d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a6d8:	695b      	ldr	r3, [r3, #20]
 801a6da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a6de:	e705      	b.n	801a4ec <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 801a6e0:	bf00      	nop
 801a6e2:	37f0      	adds	r7, #240	; 0xf0
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6ea:	bf00      	nop
 801a6ec:	08028fc8 	.word	0x08028fc8
 801a6f0:	08028fd4 	.word	0x08028fd4
 801a6f4:	200000d4 	.word	0x200000d4
 801a6f8:	08028fc4 	.word	0x08028fc4

0801a6fc <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	331c      	adds	r3, #28
 801a708:	4618      	mov	r0, r3
 801a70a:	f004 f9bb 	bl	801ea84 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801a70e:	4602      	mov	r2, r0
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	699b      	ldr	r3, [r3, #24]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d00f      	beq.n	801a73c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	33d4      	adds	r3, #212	; 0xd4
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	6992      	ldr	r2, [r2, #24]
 801a728:	4611      	mov	r1, r2
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	4798      	blx	r3
        callHasSucceeded();
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	33d0      	adds	r3, #208	; 0xd0
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	6878      	ldr	r0, [r7, #4]
 801a738:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801a73a:	e00f      	b.n	801a75c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	331c      	adds	r3, #28
 801a740:	4618      	mov	r0, r3
 801a742:	f004 f9cc 	bl	801eade <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 801a746:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d006      	beq.n	801a75c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	33d4      	adds	r3, #212	; 0xd4
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	68f9      	ldr	r1, [r7, #12]
 801a758:	6878      	ldr	r0, [r7, #4]
 801a75a:	4798      	blx	r3
}
 801a75c:	bf00      	nop
 801a75e:	3710      	adds	r7, #16
 801a760:	46bd      	mov	sp, r7
 801a762:	bd80      	pop	{r7, pc}

0801a764 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b082      	sub	sp, #8
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	33ec      	adds	r3, #236	; 0xec
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	2102      	movs	r1, #2
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	4798      	blx	r3
}
 801a77a:	bf00      	nop
 801a77c:	3708      	adds	r7, #8
 801a77e:	46bd      	mov	sp, r7
 801a780:	bd80      	pop	{r7, pc}

0801a782 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801a782:	b580      	push	{r7, lr}
 801a784:	b082      	sub	sp, #8
 801a786:	af00      	add	r7, sp, #0
 801a788:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	699b      	ldr	r3, [r3, #24]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d00b      	beq.n	801a7aa <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	699a      	ldr	r2, [r3, #24]
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	699b      	ldr	r3, [r3, #24]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	33ec      	adds	r3, #236	; 0xec
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	4610      	mov	r0, r2
 801a7a2:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	331c      	adds	r3, #28
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f004 f85c 	bl	801e86c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 801a7b4:	bf00      	nop
 801a7b6:	3708      	adds	r7, #8
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}

0801a7bc <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 801a7bc:	b590      	push	{r4, r7, lr}
 801a7be:	b091      	sub	sp, #68	; 0x44
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
 801a7c4:	6039      	str	r1, [r7, #0]
    setName(name);
 801a7c6:	6839      	ldr	r1, [r7, #0]
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f7ff fdb3 	bl	801a334 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	33ec      	adds	r3, #236	; 0xec
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	6878      	ldr	r0, [r7, #4]
 801a7da:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	331c      	adds	r3, #28
 801a7e0:	6839      	ldr	r1, [r7, #0]
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f003 ffec 	bl	801e7c0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	331c      	adds	r3, #28
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f003 fe7c 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d01d      	beq.n	801a834 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	33cc      	adds	r3, #204	; 0xcc
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	4798      	blx	r3
 801a804:	4601      	mov	r1, r0
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a80a:	f107 000c 	add.w	r0, r7, #12
 801a80e:	683a      	ldr	r2, [r7, #0]
 801a810:	f004 fe24 	bl	801f45c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	33dc      	adds	r3, #220	; 0xdc
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	f107 020c 	add.w	r2, r7, #12
 801a820:	4611      	mov	r1, r2
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	4798      	blx	r3
        return *this;
 801a826:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801a828:	f107 030c 	add.w	r3, r7, #12
 801a82c:	4618      	mov	r0, r3
 801a82e:	f001 ff4b 	bl	801c6c8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a832:	e006      	b.n	801a842 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	33d8      	adds	r3, #216	; 0xd8
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	6878      	ldr	r0, [r7, #4]
 801a83e:	4798      	blx	r3

    return *this;
 801a840:	687c      	ldr	r4, [r7, #4]
 801a842:	4623      	mov	r3, r4
}
 801a844:	4618      	mov	r0, r3
 801a846:	3744      	adds	r7, #68	; 0x44
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd90      	pop	{r4, r7, pc}

0801a84c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801a84c:	b480      	push	{r7}
 801a84e:	b083      	sub	sp, #12
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
 801a854:	6039      	str	r1, [r7, #0]
    return *this;
 801a856:	687b      	ldr	r3, [r7, #4]
}
 801a858:	4618      	mov	r0, r3
 801a85a:	370c      	adds	r7, #12
 801a85c:	46bd      	mov	sp, r7
 801a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a862:	4770      	bx	lr

0801a864 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 801a864:	b590      	push	{r4, r7, lr}
 801a866:	b097      	sub	sp, #92	; 0x5c
 801a868:	af02      	add	r7, sp, #8
 801a86a:	6078      	str	r0, [r7, #4]
 801a86c:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	33c0      	adds	r3, #192	; 0xc0
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	4798      	blx	r3
 801a87a:	4603      	mov	r3, r0
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d164      	bne.n	801a94a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	33ec      	adds	r3, #236	; 0xec
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2100      	movs	r1, #0
 801a88a:	6878      	ldr	r0, [r7, #4]
 801a88c:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	33e8      	adds	r3, #232	; 0xe8
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	331c      	adds	r3, #28
 801a89e:	6839      	ldr	r1, [r7, #0]
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	f004 f86b 	bl	801e97c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	331c      	adds	r3, #28
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	f003 fe1d 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d02b      	beq.n	801a90e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	33cc      	adds	r3, #204	; 0xcc
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	6878      	ldr	r0, [r7, #4]
 801a8c0:	4798      	blx	r3
 801a8c2:	4604      	mov	r4, r0
 801a8c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a8c8:	6879      	ldr	r1, [r7, #4]
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7ff fd41 	bl	801a352 <_ZNK21MockCheckedActualCall7getNameEv>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a8d8:	f107 000c 	add.w	r0, r7, #12
 801a8dc:	9300      	str	r3, [sp, #0]
 801a8de:	683b      	ldr	r3, [r7, #0]
 801a8e0:	4621      	mov	r1, r4
 801a8e2:	f004 fe7f 	bl	801f5e4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801a8e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f7f5 f907 	bl	800fafe <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	33dc      	adds	r3, #220	; 0xdc
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	f107 020c 	add.w	r2, r7, #12
 801a8fc:	4611      	mov	r1, r2
 801a8fe:	6878      	ldr	r0, [r7, #4]
 801a900:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801a902:	f107 030c 	add.w	r3, r7, #12
 801a906:	4618      	mov	r0, r3
 801a908:	f001 ff00 	bl	801c70c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a90c:	e01e      	b.n	801a94c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	f103 041c 	add.w	r4, r3, #28
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	335c      	adds	r3, #92	; 0x5c
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a920:	6839      	ldr	r1, [r7, #0]
 801a922:	4610      	mov	r0, r2
 801a924:	4798      	blx	r3
 801a926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a92a:	4619      	mov	r1, r3
 801a92c:	4620      	mov	r0, r4
 801a92e:	f004 f9b8 	bl	801eca2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801a932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a936:	4618      	mov	r0, r3
 801a938:	f7f5 f8e1 	bl	800fafe <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	33d8      	adds	r3, #216	; 0xd8
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	4798      	blx	r3
 801a948:	e000      	b.n	801a94c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801a94a:	bf00      	nop
}
 801a94c:	3754      	adds	r7, #84	; 0x54
 801a94e:	46bd      	mov	sp, r7
 801a950:	bd90      	pop	{r4, r7, pc}

0801a952 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801a952:	b590      	push	{r4, r7, lr}
 801a954:	b097      	sub	sp, #92	; 0x5c
 801a956:	af02      	add	r7, sp, #8
 801a958:	6078      	str	r0, [r7, #4]
 801a95a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	33c0      	adds	r3, #192	; 0xc0
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	6878      	ldr	r0, [r7, #4]
 801a966:	4798      	blx	r3
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d164      	bne.n	801aa38 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	33ec      	adds	r3, #236	; 0xec
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	2100      	movs	r1, #0
 801a978:	6878      	ldr	r0, [r7, #4]
 801a97a:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	33e8      	adds	r3, #232	; 0xe8
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	331c      	adds	r3, #28
 801a98c:	6839      	ldr	r1, [r7, #0]
 801a98e:	4618      	mov	r0, r3
 801a990:	f004 f820 	bl	801e9d4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	331c      	adds	r3, #28
 801a998:	4618      	mov	r0, r3
 801a99a:	f003 fda6 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d02b      	beq.n	801a9fc <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	33cc      	adds	r3, #204	; 0xcc
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	6878      	ldr	r0, [r7, #4]
 801a9ae:	4798      	blx	r3
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a9b6:	6879      	ldr	r1, [r7, #4]
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7ff fcca 	bl	801a352 <_ZNK21MockCheckedActualCall7getNameEv>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a9c6:	f107 000c 	add.w	r0, r7, #12
 801a9ca:	9300      	str	r3, [sp, #0]
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	4621      	mov	r1, r4
 801a9d0:	f004 ff6a 	bl	801f8a8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801a9d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f7f5 f890 	bl	800fafe <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	33dc      	adds	r3, #220	; 0xdc
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	f107 020c 	add.w	r2, r7, #12
 801a9ea:	4611      	mov	r1, r2
 801a9ec:	6878      	ldr	r0, [r7, #4]
 801a9ee:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801a9f0:	f107 030c 	add.w	r3, r7, #12
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	f001 feab 	bl	801c750 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a9fa:	e01e      	b.n	801aa3a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f103 041c 	add.w	r4, r3, #28
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	335c      	adds	r3, #92	; 0x5c
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801aa0e:	6839      	ldr	r1, [r7, #0]
 801aa10:	4610      	mov	r0, r2
 801aa12:	4798      	blx	r3
 801aa14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aa18:	4619      	mov	r1, r3
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	f004 f95e 	bl	801ecdc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 801aa20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aa24:	4618      	mov	r0, r3
 801aa26:	f7f5 f86a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	33d8      	adds	r3, #216	; 0xd8
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	6878      	ldr	r0, [r7, #4]
 801aa34:	4798      	blx	r3
 801aa36:	e000      	b.n	801aa3a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 801aa38:	bf00      	nop
}
 801aa3a:	3754      	adds	r7, #84	; 0x54
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	bd90      	pop	{r4, r7, pc}

0801aa40 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 801aa40:	b590      	push	{r4, r7, lr}
 801aa42:	b093      	sub	sp, #76	; 0x4c
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	60f8      	str	r0, [r7, #12]
 801aa48:	60b9      	str	r1, [r7, #8]
 801aa4a:	4613      	mov	r3, r2
 801aa4c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801aa4e:	f107 0310 	add.w	r3, r7, #16
 801aa52:	68b9      	ldr	r1, [r7, #8]
 801aa54:	4618      	mov	r0, r3
 801aa56:	f005 f9bf 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801aa5a:	79fa      	ldrb	r2, [r7, #7]
 801aa5c:	f107 0310 	add.w	r3, r7, #16
 801aa60:	4611      	mov	r1, r2
 801aa62:	4618      	mov	r0, r3
 801aa64:	f005 fa0a 	bl	801fe7c <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	33e0      	adds	r3, #224	; 0xe0
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	f107 0210 	add.w	r2, r7, #16
 801aa74:	4611      	mov	r1, r2
 801aa76:	68f8      	ldr	r0, [r7, #12]
 801aa78:	4798      	blx	r3
    return *this;
 801aa7a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801aa7c:	f107 0310 	add.w	r3, r7, #16
 801aa80:	4618      	mov	r0, r3
 801aa82:	f005 f9d3 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801aa86:	4623      	mov	r3, r4
}
 801aa88:	4618      	mov	r0, r3
 801aa8a:	374c      	adds	r7, #76	; 0x4c
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	bd90      	pop	{r4, r7, pc}

0801aa90 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801aa90:	b590      	push	{r4, r7, lr}
 801aa92:	b093      	sub	sp, #76	; 0x4c
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	60f8      	str	r0, [r7, #12]
 801aa98:	60b9      	str	r1, [r7, #8]
 801aa9a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801aa9c:	f107 0310 	add.w	r3, r7, #16
 801aaa0:	68b9      	ldr	r1, [r7, #8]
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f005 f998 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801aaa8:	f107 0310 	add.w	r3, r7, #16
 801aaac:	6879      	ldr	r1, [r7, #4]
 801aaae:	4618      	mov	r0, r3
 801aab0:	f005 fa08 	bl	801fec4 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	33e0      	adds	r3, #224	; 0xe0
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	f107 0210 	add.w	r2, r7, #16
 801aac0:	4611      	mov	r1, r2
 801aac2:	68f8      	ldr	r0, [r7, #12]
 801aac4:	4798      	blx	r3
    return *this;
 801aac6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801aac8:	f107 0310 	add.w	r3, r7, #16
 801aacc:	4618      	mov	r0, r3
 801aace:	f005 f9ad 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801aad2:	4623      	mov	r3, r4
}
 801aad4:	4618      	mov	r0, r3
 801aad6:	374c      	adds	r7, #76	; 0x4c
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd90      	pop	{r4, r7, pc}

0801aadc <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 801aadc:	b590      	push	{r4, r7, lr}
 801aade:	b093      	sub	sp, #76	; 0x4c
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	60f8      	str	r0, [r7, #12]
 801aae4:	60b9      	str	r1, [r7, #8]
 801aae6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801aae8:	f107 0310 	add.w	r3, r7, #16
 801aaec:	68b9      	ldr	r1, [r7, #8]
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f005 f972 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801aaf4:	f107 0310 	add.w	r3, r7, #16
 801aaf8:	6879      	ldr	r1, [r7, #4]
 801aafa:	4618      	mov	r0, r3
 801aafc:	f005 fa04 	bl	801ff08 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	33e0      	adds	r3, #224	; 0xe0
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	f107 0210 	add.w	r2, r7, #16
 801ab0c:	4611      	mov	r1, r2
 801ab0e:	68f8      	ldr	r0, [r7, #12]
 801ab10:	4798      	blx	r3
    return *this;
 801ab12:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ab14:	f107 0310 	add.w	r3, r7, #16
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f005 f987 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ab1e:	4623      	mov	r3, r4
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	374c      	adds	r7, #76	; 0x4c
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd90      	pop	{r4, r7, pc}

0801ab28 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801ab28:	b590      	push	{r4, r7, lr}
 801ab2a:	b093      	sub	sp, #76	; 0x4c
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	60f8      	str	r0, [r7, #12]
 801ab30:	60b9      	str	r1, [r7, #8]
 801ab32:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801ab34:	f107 0310 	add.w	r3, r7, #16
 801ab38:	68b9      	ldr	r1, [r7, #8]
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f005 f94c 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801ab40:	f107 0310 	add.w	r3, r7, #16
 801ab44:	6879      	ldr	r1, [r7, #4]
 801ab46:	4618      	mov	r0, r3
 801ab48:	f005 fa22 	bl	801ff90 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	33e0      	adds	r3, #224	; 0xe0
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	f107 0210 	add.w	r2, r7, #16
 801ab58:	4611      	mov	r1, r2
 801ab5a:	68f8      	ldr	r0, [r7, #12]
 801ab5c:	4798      	blx	r3
    return *this;
 801ab5e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ab60:	f107 0310 	add.w	r3, r7, #16
 801ab64:	4618      	mov	r0, r3
 801ab66:	f005 f961 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ab6a:	4623      	mov	r3, r4
}
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	374c      	adds	r7, #76	; 0x4c
 801ab70:	46bd      	mov	sp, r7
 801ab72:	bd90      	pop	{r4, r7, pc}

0801ab74 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801ab74:	b590      	push	{r4, r7, lr}
 801ab76:	b093      	sub	sp, #76	; 0x4c
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	60f8      	str	r0, [r7, #12]
 801ab7c:	60b9      	str	r1, [r7, #8]
 801ab7e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801ab80:	f107 0310 	add.w	r3, r7, #16
 801ab84:	68b9      	ldr	r1, [r7, #8]
 801ab86:	4618      	mov	r0, r3
 801ab88:	f005 f926 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801ab8c:	f107 0310 	add.w	r3, r7, #16
 801ab90:	6879      	ldr	r1, [r7, #4]
 801ab92:	4618      	mov	r0, r3
 801ab94:	f005 f9da 	bl	801ff4c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	33e0      	adds	r3, #224	; 0xe0
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f107 0210 	add.w	r2, r7, #16
 801aba4:	4611      	mov	r1, r2
 801aba6:	68f8      	ldr	r0, [r7, #12]
 801aba8:	4798      	blx	r3
    return *this;
 801abaa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801abac:	f107 0310 	add.w	r3, r7, #16
 801abb0:	4618      	mov	r0, r3
 801abb2:	f005 f93b 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801abb6:	4623      	mov	r3, r4
}
 801abb8:	4618      	mov	r0, r3
 801abba:	374c      	adds	r7, #76	; 0x4c
 801abbc:	46bd      	mov	sp, r7
 801abbe:	bd90      	pop	{r4, r7, pc}

0801abc0 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801abc0:	b5b0      	push	{r4, r5, r7, lr}
 801abc2:	b086      	sub	sp, #24
 801abc4:	af02      	add	r7, sp, #8
 801abc6:	60f8      	str	r0, [r7, #12]
 801abc8:	60b9      	str	r1, [r7, #8]
 801abca:	4639      	mov	r1, r7
 801abcc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801abd0:	f7fb ffc0 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801abd4:	4604      	mov	r4, r0
 801abd6:	6823      	ldr	r3, [r4, #0]
 801abd8:	3368      	adds	r3, #104	; 0x68
 801abda:	681d      	ldr	r5, [r3, #0]
 801abdc:	f7fb ffca 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801abe0:	4603      	mov	r3, r0
 801abe2:	9300      	str	r3, [sp, #0]
 801abe4:	f44f 7385 	mov.w	r3, #266	; 0x10a
 801abe8:	4a04      	ldr	r2, [pc, #16]	; (801abfc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801abea:	4905      	ldr	r1, [pc, #20]	; (801ac00 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801abec:	4620      	mov	r0, r4
 801abee:	47a8      	blx	r5
    return *this;
 801abf0:	68fb      	ldr	r3, [r7, #12]
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	3710      	adds	r7, #16
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bdb0      	pop	{r4, r5, r7, pc}
 801abfa:	bf00      	nop
 801abfc:	08028fdc 	.word	0x08028fdc
 801ac00:	08028ff8 	.word	0x08028ff8

0801ac04 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801ac04:	b5b0      	push	{r4, r5, r7, lr}
 801ac06:	b086      	sub	sp, #24
 801ac08:	af02      	add	r7, sp, #8
 801ac0a:	60f8      	str	r0, [r7, #12]
 801ac0c:	60b9      	str	r1, [r7, #8]
 801ac0e:	4639      	mov	r1, r7
 801ac10:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801ac14:	f7fb ff9e 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801ac18:	4604      	mov	r4, r0
 801ac1a:	6823      	ldr	r3, [r4, #0]
 801ac1c:	3368      	adds	r3, #104	; 0x68
 801ac1e:	681d      	ldr	r5, [r3, #0]
 801ac20:	f7fb ffa8 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ac24:	4603      	mov	r3, r0
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	f44f 7388 	mov.w	r3, #272	; 0x110
 801ac2c:	4a04      	ldr	r2, [pc, #16]	; (801ac40 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801ac2e:	4905      	ldr	r1, [pc, #20]	; (801ac44 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801ac30:	4620      	mov	r0, r4
 801ac32:	47a8      	blx	r5
    return *this;
 801ac34:	68fb      	ldr	r3, [r7, #12]
}
 801ac36:	4618      	mov	r0, r3
 801ac38:	3710      	adds	r7, #16
 801ac3a:	46bd      	mov	sp, r7
 801ac3c:	bdb0      	pop	{r4, r5, r7, pc}
 801ac3e:	bf00      	nop
 801ac40:	08028fdc 	.word	0x08028fdc
 801ac44:	08029024 	.word	0x08029024

0801ac48 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 801ac48:	b590      	push	{r4, r7, lr}
 801ac4a:	b093      	sub	sp, #76	; 0x4c
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	60f8      	str	r0, [r7, #12]
 801ac50:	60b9      	str	r1, [r7, #8]
 801ac52:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801ac56:	f107 0310 	add.w	r3, r7, #16
 801ac5a:	68b9      	ldr	r1, [r7, #8]
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	f005 f8bb 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801ac62:	f107 0310 	add.w	r3, r7, #16
 801ac66:	ed97 0b00 	vldr	d0, [r7]
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f005 f9f0 	bl	8020050 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	33e0      	adds	r3, #224	; 0xe0
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	f107 0210 	add.w	r2, r7, #16
 801ac7c:	4611      	mov	r1, r2
 801ac7e:	68f8      	ldr	r0, [r7, #12]
 801ac80:	4798      	blx	r3
    return *this;
 801ac82:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ac84:	f107 0310 	add.w	r3, r7, #16
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f005 f8cf 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ac8e:	4623      	mov	r3, r4
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	374c      	adds	r7, #76	; 0x4c
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd90      	pop	{r4, r7, pc}

0801ac98 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 801ac98:	b590      	push	{r4, r7, lr}
 801ac9a:	b093      	sub	sp, #76	; 0x4c
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	60f8      	str	r0, [r7, #12]
 801aca0:	60b9      	str	r1, [r7, #8]
 801aca2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801aca4:	f107 0310 	add.w	r3, r7, #16
 801aca8:	68b9      	ldr	r1, [r7, #8]
 801acaa:	4618      	mov	r0, r3
 801acac:	f005 f894 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801acb0:	f107 0310 	add.w	r3, r7, #16
 801acb4:	6879      	ldr	r1, [r7, #4]
 801acb6:	4618      	mov	r0, r3
 801acb8:	f005 fa74 	bl	80201a4 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	33e0      	adds	r3, #224	; 0xe0
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	f107 0210 	add.w	r2, r7, #16
 801acc8:	4611      	mov	r1, r2
 801acca:	68f8      	ldr	r0, [r7, #12]
 801accc:	4798      	blx	r3
    return *this;
 801acce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801acd0:	f107 0310 	add.w	r3, r7, #16
 801acd4:	4618      	mov	r0, r3
 801acd6:	f005 f8a9 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801acda:	4623      	mov	r3, r4
}
 801acdc:	4618      	mov	r0, r3
 801acde:	374c      	adds	r7, #76	; 0x4c
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd90      	pop	{r4, r7, pc}

0801ace4 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 801ace4:	b590      	push	{r4, r7, lr}
 801ace6:	b093      	sub	sp, #76	; 0x4c
 801ace8:	af00      	add	r7, sp, #0
 801acea:	60f8      	str	r0, [r7, #12]
 801acec:	60b9      	str	r1, [r7, #8]
 801acee:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801acf0:	f107 0310 	add.w	r3, r7, #16
 801acf4:	68b9      	ldr	r1, [r7, #8]
 801acf6:	4618      	mov	r0, r3
 801acf8:	f005 f86e 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801acfc:	f107 0310 	add.w	r3, r7, #16
 801ad00:	6879      	ldr	r1, [r7, #4]
 801ad02:	4618      	mov	r0, r3
 801ad04:	f005 f9e8 	bl	80200d8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	33e0      	adds	r3, #224	; 0xe0
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	f107 0210 	add.w	r2, r7, #16
 801ad14:	4611      	mov	r1, r2
 801ad16:	68f8      	ldr	r0, [r7, #12]
 801ad18:	4798      	blx	r3
    return *this;
 801ad1a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ad1c:	f107 0310 	add.w	r3, r7, #16
 801ad20:	4618      	mov	r0, r3
 801ad22:	f005 f883 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ad26:	4623      	mov	r3, r4
}
 801ad28:	4618      	mov	r0, r3
 801ad2a:	374c      	adds	r7, #76	; 0x4c
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd90      	pop	{r4, r7, pc}

0801ad30 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801ad30:	b590      	push	{r4, r7, lr}
 801ad32:	b093      	sub	sp, #76	; 0x4c
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	60f8      	str	r0, [r7, #12]
 801ad38:	60b9      	str	r1, [r7, #8]
 801ad3a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801ad3c:	f107 0310 	add.w	r3, r7, #16
 801ad40:	68b9      	ldr	r1, [r7, #8]
 801ad42:	4618      	mov	r0, r3
 801ad44:	f005 f848 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801ad48:	f107 0310 	add.w	r3, r7, #16
 801ad4c:	6879      	ldr	r1, [r7, #4]
 801ad4e:	4618      	mov	r0, r3
 801ad50:	f005 f9e4 	bl	802011c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	33e0      	adds	r3, #224	; 0xe0
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	f107 0210 	add.w	r2, r7, #16
 801ad60:	4611      	mov	r1, r2
 801ad62:	68f8      	ldr	r0, [r7, #12]
 801ad64:	4798      	blx	r3
    return *this;
 801ad66:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ad68:	f107 0310 	add.w	r3, r7, #16
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	f005 f85d 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ad72:	4623      	mov	r3, r4
}
 801ad74:	4618      	mov	r0, r3
 801ad76:	374c      	adds	r7, #76	; 0x4c
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	bd90      	pop	{r4, r7, pc}

0801ad7c <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801ad7c:	b590      	push	{r4, r7, lr}
 801ad7e:	b093      	sub	sp, #76	; 0x4c
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	60f8      	str	r0, [r7, #12]
 801ad84:	60b9      	str	r1, [r7, #8]
 801ad86:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801ad88:	f107 0310 	add.w	r3, r7, #16
 801ad8c:	68b9      	ldr	r1, [r7, #8]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f005 f822 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801ad94:	f107 0310 	add.w	r3, r7, #16
 801ad98:	6879      	ldr	r1, [r7, #4]
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	f005 f9e0 	bl	8020160 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	33e0      	adds	r3, #224	; 0xe0
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	f107 0210 	add.w	r2, r7, #16
 801adac:	4611      	mov	r1, r2
 801adae:	68f8      	ldr	r0, [r7, #12]
 801adb0:	4798      	blx	r3
    return *this;
 801adb2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801adb4:	f107 0310 	add.w	r3, r7, #16
 801adb8:	4618      	mov	r0, r3
 801adba:	f005 f837 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801adbe:	4623      	mov	r3, r4
}
 801adc0:	4618      	mov	r0, r3
 801adc2:	374c      	adds	r7, #76	; 0x4c
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd90      	pop	{r4, r7, pc}

0801adc8 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801adc8:	b590      	push	{r4, r7, lr}
 801adca:	b093      	sub	sp, #76	; 0x4c
 801adcc:	af00      	add	r7, sp, #0
 801adce:	60f8      	str	r0, [r7, #12]
 801add0:	60b9      	str	r1, [r7, #8]
 801add2:	607a      	str	r2, [r7, #4]
 801add4:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801add6:	f107 0310 	add.w	r3, r7, #16
 801adda:	68b9      	ldr	r1, [r7, #8]
 801addc:	4618      	mov	r0, r3
 801adde:	f004 fffb 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801ade2:	f107 0310 	add.w	r3, r7, #16
 801ade6:	683a      	ldr	r2, [r7, #0]
 801ade8:	6879      	ldr	r1, [r7, #4]
 801adea:	4618      	mov	r0, r3
 801adec:	f005 f9fc 	bl	80201e8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	33e0      	adds	r3, #224	; 0xe0
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f107 0210 	add.w	r2, r7, #16
 801adfc:	4611      	mov	r1, r2
 801adfe:	68f8      	ldr	r0, [r7, #12]
 801ae00:	4798      	blx	r3
    return *this;
 801ae02:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801ae04:	f107 0310 	add.w	r3, r7, #16
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f005 f80f 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801ae0e:	4623      	mov	r3, r4
}
 801ae10:	4618      	mov	r0, r3
 801ae12:	374c      	adds	r7, #76	; 0x4c
 801ae14:	46bd      	mov	sp, r7
 801ae16:	bd90      	pop	{r4, r7, pc}

0801ae18 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801ae18:	b590      	push	{r4, r7, lr}
 801ae1a:	b0a1      	sub	sp, #132	; 0x84
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	607a      	str	r2, [r7, #4]
 801ae24:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801ae26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae2a:	6879      	ldr	r1, [r7, #4]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f004 ffd3 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801ae32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae36:	683a      	ldr	r2, [r7, #0]
 801ae38:	68b9      	ldr	r1, [r7, #8]
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f005 f9fa 	bl	8020234 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801ae40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ae44:	4618      	mov	r0, r3
 801ae46:	f005 fdc7 	bl	80209d8 <_ZNK14MockNamedValue13getComparatorEv>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	bf0c      	ite	eq
 801ae50:	2301      	moveq	r3, #1
 801ae52:	2300      	movne	r3, #0
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d01c      	beq.n	801ae94 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	33cc      	adds	r3, #204	; 0xcc
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	68f8      	ldr	r0, [r7, #12]
 801ae64:	4798      	blx	r3
 801ae66:	4601      	mov	r1, r0
 801ae68:	f107 0314 	add.w	r3, r7, #20
 801ae6c:	68ba      	ldr	r2, [r7, #8]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f004 fed6 	bl	801fc20 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	33dc      	adds	r3, #220	; 0xdc
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	f107 0214 	add.w	r2, r7, #20
 801ae80:	4611      	mov	r1, r2
 801ae82:	68f8      	ldr	r0, [r7, #12]
 801ae84:	4798      	blx	r3
        return *this;
 801ae86:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801ae88:	f107 0314 	add.w	r3, r7, #20
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f001 fc81 	bl	801c794 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801ae92:	e009      	b.n	801aea8 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	33e0      	adds	r3, #224	; 0xe0
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801aea0:	4611      	mov	r1, r2
 801aea2:	68f8      	ldr	r0, [r7, #12]
 801aea4:	4798      	blx	r3
    return *this;
 801aea6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801aea8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aeac:	4618      	mov	r0, r3
 801aeae:	f004 ffbd 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801aeb2:	4623      	mov	r3, r4
}
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	3784      	adds	r7, #132	; 0x84
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd90      	pop	{r4, r7, pc}

0801aebc <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 801aebc:	b590      	push	{r4, r7, lr}
 801aebe:	b095      	sub	sp, #84	; 0x54
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	60f8      	str	r0, [r7, #12]
 801aec4:	60b9      	str	r1, [r7, #8]
 801aec6:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	33f0      	adds	r3, #240	; 0xf0
 801aece:	681c      	ldr	r4, [r3, #0]
 801aed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aed4:	4917      	ldr	r1, [pc, #92]	; (801af34 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801aed6:	4618      	mov	r0, r3
 801aed8:	f7f4 fa59 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801aedc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	68b9      	ldr	r1, [r7, #8]
 801aee4:	68f8      	ldr	r0, [r7, #12]
 801aee6:	47a0      	blx	r4
 801aee8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aeec:	4618      	mov	r0, r3
 801aeee:	f7f4 fe06 	bl	800fafe <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801aef2:	f107 0310 	add.w	r3, r7, #16
 801aef6:	68b9      	ldr	r1, [r7, #8]
 801aef8:	4618      	mov	r0, r3
 801aefa:	f004 ff6d 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801aefe:	f107 0310 	add.w	r3, r7, #16
 801af02:	6879      	ldr	r1, [r7, #4]
 801af04:	4618      	mov	r0, r3
 801af06:	f005 f8e7 	bl	80200d8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	33e4      	adds	r3, #228	; 0xe4
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	f107 0210 	add.w	r2, r7, #16
 801af16:	4611      	mov	r1, r2
 801af18:	68f8      	ldr	r0, [r7, #12]
 801af1a:	4798      	blx	r3

    return *this;
 801af1c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801af1e:	f107 0310 	add.w	r3, r7, #16
 801af22:	4618      	mov	r0, r3
 801af24:	f004 ff82 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801af28:	4623      	mov	r3, r4
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3754      	adds	r7, #84	; 0x54
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd90      	pop	{r4, r7, pc}
 801af32:	bf00      	nop
 801af34:	08028fd4 	.word	0x08028fd4

0801af38 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801af38:	b590      	push	{r4, r7, lr}
 801af3a:	b093      	sub	sp, #76	; 0x4c
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	60f8      	str	r0, [r7, #12]
 801af40:	60b9      	str	r1, [r7, #8]
 801af42:	607a      	str	r2, [r7, #4]
 801af44:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	33f0      	adds	r3, #240	; 0xf0
 801af4c:	681c      	ldr	r4, [r3, #0]
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	68ba      	ldr	r2, [r7, #8]
 801af52:	6879      	ldr	r1, [r7, #4]
 801af54:	68f8      	ldr	r0, [r7, #12]
 801af56:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801af58:	f107 0310 	add.w	r3, r7, #16
 801af5c:	6879      	ldr	r1, [r7, #4]
 801af5e:	4618      	mov	r0, r3
 801af60:	f004 ff3a 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 801af64:	f107 0310 	add.w	r3, r7, #16
 801af68:	683a      	ldr	r2, [r7, #0]
 801af6a:	68b9      	ldr	r1, [r7, #8]
 801af6c:	4618      	mov	r0, r3
 801af6e:	f005 f961 	bl	8020234 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	33e4      	adds	r3, #228	; 0xe4
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f107 0210 	add.w	r2, r7, #16
 801af7e:	4611      	mov	r1, r2
 801af80:	68f8      	ldr	r0, [r7, #12]
 801af82:	4798      	blx	r3

    return *this;
 801af84:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801af86:	f107 0310 	add.w	r3, r7, #16
 801af8a:	4618      	mov	r0, r3
 801af8c:	f004 ff4e 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
    return *this;
 801af90:	4623      	mov	r3, r4
}
 801af92:	4618      	mov	r0, r3
 801af94:	374c      	adds	r7, #76	; 0x4c
 801af96:	46bd      	mov	sp, r7
 801af98:	bd90      	pop	{r4, r7, pc}

0801af9a <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801af9a:	b480      	push	{r7}
 801af9c:	b083      	sub	sp, #12
 801af9e:	af00      	add	r7, sp, #0
 801afa0:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	7d1b      	ldrb	r3, [r3, #20]
 801afa6:	2b02      	cmp	r3, #2
 801afa8:	bf0c      	ite	eq
 801afaa:	2301      	moveq	r3, #1
 801afac:	2300      	movne	r3, #0
 801afae:	b2db      	uxtb	r3, r3
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	370c      	adds	r7, #12
 801afb4:	46bd      	mov	sp, r7
 801afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afba:	4770      	bx	lr

0801afbc <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 801afbc:	b480      	push	{r7}
 801afbe:	b083      	sub	sp, #12
 801afc0:	af00      	add	r7, sp, #0
 801afc2:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	7d1b      	ldrb	r3, [r3, #20]
 801afc8:	2b01      	cmp	r3, #1
 801afca:	bf0c      	ite	eq
 801afcc:	2301      	moveq	r3, #1
 801afce:	2300      	movne	r3, #0
 801afd0:	b2db      	uxtb	r3, r3
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	370c      	adds	r7, #12
 801afd6:	46bd      	mov	sp, r7
 801afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afdc:	4770      	bx	lr
	...

0801afe0 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 801afe0:	b5b0      	push	{r4, r5, r7, lr}
 801afe2:	b096      	sub	sp, #88	; 0x58
 801afe4:	af02      	add	r7, sp, #8
 801afe6:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	7d5b      	ldrb	r3, [r3, #21]
 801afec:	2b00      	cmp	r3, #0
 801afee:	f040 80bc 	bne.w	801b16a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	2201      	movs	r2, #1
 801aff6:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	7d1b      	ldrb	r3, [r3, #20]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d014      	beq.n	801b02a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	7d1b      	ldrb	r3, [r3, #20]
 801b004:	2b02      	cmp	r3, #2
 801b006:	d10a      	bne.n	801b01e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	6998      	ldr	r0, [r3, #24]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	699b      	ldr	r3, [r3, #24]
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	33d8      	adds	r3, #216	; 0xd8
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	687a      	ldr	r2, [r7, #4]
 801b018:	68d2      	ldr	r2, [r2, #12]
 801b01a:	4611      	mov	r1, r2
 801b01c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	331c      	adds	r3, #28
 801b022:	4618      	mov	r0, r3
 801b024:	f003 fe07 	bl	801ec36 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801b028:	e0a0      	b.n	801b16c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	331c      	adds	r3, #28
 801b02e:	4618      	mov	r0, r3
 801b030:	f003 fac3 	bl	801e5ba <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801b034:	4603      	mov	r3, r0
 801b036:	2b00      	cmp	r3, #0
 801b038:	d00f      	beq.n	801b05a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801b03a:	f7fb fd8b 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801b03e:	4604      	mov	r4, r0
 801b040:	6823      	ldr	r3, [r4, #0]
 801b042:	3368      	adds	r3, #104	; 0x68
 801b044:	681d      	ldr	r5, [r3, #0]
 801b046:	f7fb fd95 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b04a:	4603      	mov	r3, r0
 801b04c:	9300      	str	r3, [sp, #0]
 801b04e:	f240 1385 	movw	r3, #389	; 0x185
 801b052:	4a48      	ldr	r2, [pc, #288]	; (801b174 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 801b054:	4948      	ldr	r1, [pc, #288]	; (801b178 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801b056:	4620      	mov	r0, r4
 801b058:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	331c      	adds	r3, #28
 801b05e:	4618      	mov	r0, r3
 801b060:	f003 fd5f 	bl	801eb22 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 801b064:	4602      	mov	r2, r0
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	699b      	ldr	r3, [r3, #24]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d01f      	beq.n	801b0b2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	699a      	ldr	r2, [r3, #24]
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	699b      	ldr	r3, [r3, #24]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	33e4      	adds	r3, #228	; 0xe4
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	4610      	mov	r0, r2
 801b082:	4798      	blx	r3
        callHasSucceeded();
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	33d0      	adds	r3, #208	; 0xd0
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	6878      	ldr	r0, [r7, #4]
 801b08e:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	6998      	ldr	r0, [r3, #24]
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	699b      	ldr	r3, [r3, #24]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	33d8      	adds	r3, #216	; 0xd8
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	68d2      	ldr	r2, [r2, #12]
 801b0a2:	4611      	mov	r1, r2
 801b0a4:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	331c      	adds	r3, #28
 801b0aa:	4618      	mov	r0, r3
 801b0ac:	f003 fdc3 	bl	801ec36 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801b0b0:	e05c      	b.n	801b16c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	331c      	adds	r3, #28
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f003 ffc4 	bl	801f044 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d029      	beq.n	801b116 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	33cc      	adds	r3, #204	; 0xcc
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	6878      	ldr	r0, [r7, #4]
 801b0cc:	4798      	blx	r3
 801b0ce:	4604      	mov	r4, r0
 801b0d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b0d4:	6879      	ldr	r1, [r7, #4]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f7ff f93b 	bl	801a352 <_ZNK21MockCheckedActualCall7getNameEv>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0e0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b0e4:	f107 000c 	add.w	r0, r7, #12
 801b0e8:	4621      	mov	r1, r4
 801b0ea:	f004 fd21 	bl	801fb30 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801b0ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f7f4 fd03 	bl	800fafe <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	33dc      	adds	r3, #220	; 0xdc
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	f107 020c 	add.w	r2, r7, #12
 801b104:	4611      	mov	r1, r2
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801b10a:	f107 030c 	add.w	r3, r7, #12
 801b10e:	4618      	mov	r0, r3
 801b110:	f001 fb62 	bl	801c7d8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801b114:	e02a      	b.n	801b16c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	33cc      	adds	r3, #204	; 0xcc
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	6878      	ldr	r0, [r7, #4]
 801b120:	4798      	blx	r3
 801b122:	4604      	mov	r4, r0
 801b124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b128:	6879      	ldr	r1, [r7, #4]
 801b12a:	4618      	mov	r0, r3
 801b12c:	f7ff f911 	bl	801a352 <_ZNK21MockCheckedActualCall7getNameEv>
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b134:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801b138:	f107 000c 	add.w	r0, r7, #12
 801b13c:	4621      	mov	r1, r4
 801b13e:	f004 fe05 	bl	801fd4c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801b142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801b146:	4618      	mov	r0, r3
 801b148:	f7f4 fcd9 	bl	800fafe <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	33dc      	adds	r3, #220	; 0xdc
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f107 020c 	add.w	r2, r7, #12
 801b158:	4611      	mov	r1, r2
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801b15e:	f107 030c 	add.w	r3, r7, #12
 801b162:	4618      	mov	r0, r3
 801b164:	f001 fb5a 	bl	801c81c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801b168:	e000      	b.n	801b16c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801b16a:	bf00      	nop
    }
}
 801b16c:	3750      	adds	r7, #80	; 0x50
 801b16e:	46bd      	mov	sp, r7
 801b170:	bdb0      	pop	{r4, r5, r7, pc}
 801b172:	bf00      	nop
 801b174:	08028fdc 	.word	0x08028fdc
 801b178:	08029044 	.word	0x08029044

0801b17c <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 801b17c:	b480      	push	{r7}
 801b17e:	b083      	sub	sp, #12
 801b180:	af00      	add	r7, sp, #0
 801b182:	6078      	str	r0, [r7, #4]
 801b184:	460b      	mov	r3, r1
 801b186:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	78fa      	ldrb	r2, [r7, #3]
 801b18c:	751a      	strb	r2, [r3, #20]
}
 801b18e:	bf00      	nop
 801b190:	370c      	adds	r7, #12
 801b192:	46bd      	mov	sp, r7
 801b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b198:	4770      	bx	lr
	...

0801b19c <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b084      	sub	sp, #16
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
 801b1a4:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	33c4      	adds	r3, #196	; 0xc4
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6838      	ldr	r0, [r7, #0]
 801b1b0:	4798      	blx	r3
    if (matchingExpectation_)
 801b1b2:	683b      	ldr	r3, [r7, #0]
 801b1b4:	699b      	ldr	r3, [r3, #24]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d00a      	beq.n	801b1d0 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	6999      	ldr	r1, [r3, #24]
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	699b      	ldr	r3, [r3, #24]
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	3394      	adds	r3, #148	; 0x94
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	687a      	ldr	r2, [r7, #4]
 801b1ca:	4610      	mov	r0, r2
 801b1cc:	4798      	blx	r3
 801b1ce:	e010      	b.n	801b1f2 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 801b1d0:	f107 0308 	add.w	r3, r7, #8
 801b1d4:	4909      	ldr	r1, [pc, #36]	; (801b1fc <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7f4 f8d9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801b1dc:	f107 0308 	add.w	r3, r7, #8
 801b1e0:	4619      	mov	r1, r3
 801b1e2:	6878      	ldr	r0, [r7, #4]
 801b1e4:	f004 fdf8 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b1e8:	f107 0308 	add.w	r3, r7, #8
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7f4 fc86 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	3710      	adds	r7, #16
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}
 801b1fa:	bf00      	nop
 801b1fc:	080290c0 	.word	0x080290c0

0801b200 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
 801b206:	6078      	str	r0, [r7, #4]
 801b208:	460b      	mov	r3, r1
 801b20a:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	3350      	adds	r3, #80	; 0x50
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	6878      	ldr	r0, [r7, #4]
 801b216:	4798      	blx	r3
 801b218:	4603      	mov	r3, r0
 801b21a:	f083 0301 	eor.w	r3, r3, #1
 801b21e:	b2db      	uxtb	r3, r3
 801b220:	2b00      	cmp	r3, #0
 801b222:	d001      	beq.n	801b228 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 801b224:	78fb      	ldrb	r3, [r7, #3]
 801b226:	e007      	b.n	801b238 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	335c      	adds	r3, #92	; 0x5c
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	4798      	blx	r3
 801b234:	4603      	mov	r3, r0
 801b236:	bf00      	nop
}
 801b238:	4618      	mov	r0, r3
 801b23a:	3708      	adds	r7, #8
 801b23c:	46bd      	mov	sp, r7
 801b23e:	bd80      	pop	{r7, pc}

0801b240 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 801b240:	b590      	push	{r4, r7, lr}
 801b242:	b091      	sub	sp, #68	; 0x44
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	3354      	adds	r3, #84	; 0x54
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f107 0208 	add.w	r2, r7, #8
 801b254:	6879      	ldr	r1, [r7, #4]
 801b256:	4610      	mov	r0, r2
 801b258:	4798      	blx	r3
 801b25a:	f107 0308 	add.w	r3, r7, #8
 801b25e:	4618      	mov	r0, r3
 801b260:	f005 f898 	bl	8020394 <_ZNK14MockNamedValue12getBoolValueEv>
 801b264:	4603      	mov	r3, r0
 801b266:	461c      	mov	r4, r3
 801b268:	bf00      	nop
 801b26a:	f107 0308 	add.w	r3, r7, #8
 801b26e:	4618      	mov	r0, r3
 801b270:	f004 fddc 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b274:	4623      	mov	r3, r4
}
 801b276:	4618      	mov	r0, r3
 801b278:	3744      	adds	r7, #68	; 0x44
 801b27a:	46bd      	mov	sp, r7
 801b27c:	bd90      	pop	{r4, r7, pc}

0801b27e <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801b27e:	b580      	push	{r7, lr}
 801b280:	b082      	sub	sp, #8
 801b282:	af00      	add	r7, sp, #0
 801b284:	6078      	str	r0, [r7, #4]
 801b286:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	3350      	adds	r3, #80	; 0x50
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	4798      	blx	r3
 801b294:	4603      	mov	r3, r0
 801b296:	f083 0301 	eor.w	r3, r3, #1
 801b29a:	b2db      	uxtb	r3, r3
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d001      	beq.n	801b2a4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 801b2a0:	683b      	ldr	r3, [r7, #0]
 801b2a2:	e007      	b.n	801b2b4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	3364      	adds	r3, #100	; 0x64
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	6878      	ldr	r0, [r7, #4]
 801b2ae:	4798      	blx	r3
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	bf00      	nop
}
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	3708      	adds	r7, #8
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}

0801b2bc <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 801b2bc:	b590      	push	{r4, r7, lr}
 801b2be:	b091      	sub	sp, #68	; 0x44
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	3354      	adds	r3, #84	; 0x54
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f107 0208 	add.w	r2, r7, #8
 801b2d0:	6879      	ldr	r1, [r7, #4]
 801b2d2:	4610      	mov	r0, r2
 801b2d4:	4798      	blx	r3
 801b2d6:	f107 0308 	add.w	r3, r7, #8
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f005 f8d2 	bl	8020484 <_ZNK14MockNamedValue11getIntValueEv>
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	bf00      	nop
 801b2e4:	f107 0308 	add.w	r3, r7, #8
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f004 fd9f 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b2ee:	4623      	mov	r3, r4
}
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	3744      	adds	r7, #68	; 0x44
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd90      	pop	{r4, r7, pc}

0801b2f8 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 801b2f8:	b590      	push	{r4, r7, lr}
 801b2fa:	b091      	sub	sp, #68	; 0x44
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	3354      	adds	r3, #84	; 0x54
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	f107 0208 	add.w	r2, r7, #8
 801b30c:	6879      	ldr	r1, [r7, #4]
 801b30e:	4610      	mov	r0, r2
 801b310:	4798      	blx	r3
 801b312:	f107 0308 	add.w	r3, r7, #8
 801b316:	4618      	mov	r0, r3
 801b318:	f005 f93e 	bl	8020598 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801b31c:	4604      	mov	r4, r0
 801b31e:	bf00      	nop
 801b320:	f107 0308 	add.w	r3, r7, #8
 801b324:	4618      	mov	r0, r3
 801b326:	f004 fd81 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b32a:	4623      	mov	r3, r4
}
 801b32c:	4618      	mov	r0, r3
 801b32e:	3744      	adds	r7, #68	; 0x44
 801b330:	46bd      	mov	sp, r7
 801b332:	bd90      	pop	{r4, r7, pc}

0801b334 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b082      	sub	sp, #8
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
 801b33c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	3350      	adds	r3, #80	; 0x50
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	4798      	blx	r3
 801b34a:	4603      	mov	r3, r0
 801b34c:	f083 0301 	eor.w	r3, r3, #1
 801b350:	b2db      	uxtb	r3, r3
 801b352:	2b00      	cmp	r3, #0
 801b354:	d001      	beq.n	801b35a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	e007      	b.n	801b36a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	3368      	adds	r3, #104	; 0x68
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	6878      	ldr	r0, [r7, #4]
 801b364:	4798      	blx	r3
 801b366:	4603      	mov	r3, r0
 801b368:	bf00      	nop
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	3708      	adds	r7, #8
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}

0801b372 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801b372:	b590      	push	{r4, r7, lr}
 801b374:	b091      	sub	sp, #68	; 0x44
 801b376:	af00      	add	r7, sp, #0
 801b378:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	3354      	adds	r3, #84	; 0x54
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	f107 0208 	add.w	r2, r7, #8
 801b386:	6879      	ldr	r1, [r7, #4]
 801b388:	4610      	mov	r0, r2
 801b38a:	4798      	blx	r3
 801b38c:	f107 0308 	add.w	r3, r7, #8
 801b390:	4618      	mov	r0, r3
 801b392:	f005 f89f 	bl	80204d4 <_ZNK14MockNamedValue15getLongIntValueEv>
 801b396:	4604      	mov	r4, r0
 801b398:	bf00      	nop
 801b39a:	f107 0308 	add.w	r3, r7, #8
 801b39e:	4618      	mov	r0, r3
 801b3a0:	f004 fd44 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b3a4:	4623      	mov	r3, r4
}
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	3744      	adds	r7, #68	; 0x44
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	bd90      	pop	{r4, r7, pc}

0801b3ae <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801b3ae:	b580      	push	{r7, lr}
 801b3b0:	b082      	sub	sp, #8
 801b3b2:	af00      	add	r7, sp, #0
 801b3b4:	6078      	str	r0, [r7, #4]
 801b3b6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	3350      	adds	r3, #80	; 0x50
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	4798      	blx	r3
 801b3c4:	4603      	mov	r3, r0
 801b3c6:	f083 0301 	eor.w	r3, r3, #1
 801b3ca:	b2db      	uxtb	r3, r3
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d001      	beq.n	801b3d4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 801b3d0:	683b      	ldr	r3, [r7, #0]
 801b3d2:	e007      	b.n	801b3e4 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	3370      	adds	r3, #112	; 0x70
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	6878      	ldr	r0, [r7, #4]
 801b3de:	4798      	blx	r3
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	bf00      	nop
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3708      	adds	r7, #8
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}

0801b3ec <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 801b3ec:	b5b0      	push	{r4, r5, r7, lr}
 801b3ee:	b084      	sub	sp, #16
 801b3f0:	af02      	add	r7, sp, #8
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801b3f6:	f7fb fbad 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801b3fa:	4604      	mov	r4, r0
 801b3fc:	6823      	ldr	r3, [r4, #0]
 801b3fe:	3368      	adds	r3, #104	; 0x68
 801b400:	681d      	ldr	r5, [r3, #0]
 801b402:	f7fb fbb7 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b406:	4603      	mov	r3, r0
 801b408:	9300      	str	r3, [sp, #0]
 801b40a:	f240 13fb 	movw	r3, #507	; 0x1fb
 801b40e:	4a06      	ldr	r2, [pc, #24]	; (801b428 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801b410:	4906      	ldr	r1, [pc, #24]	; (801b42c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801b412:	4620      	mov	r0, r4
 801b414:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b416:	2100      	movs	r1, #0
 801b418:	6878      	ldr	r0, [r7, #4]
 801b41a:	f7f1 fffb 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
}
 801b41e:	6878      	ldr	r0, [r7, #4]
 801b420:	3708      	adds	r7, #8
 801b422:	46bd      	mov	sp, r7
 801b424:	bdb0      	pop	{r4, r5, r7, pc}
 801b426:	bf00      	nop
 801b428:	08028fdc 	.word	0x08028fdc
 801b42c:	08028ff8 	.word	0x08028ff8

0801b430 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801b430:	b5b0      	push	{r4, r5, r7, lr}
 801b432:	b086      	sub	sp, #24
 801b434:	af02      	add	r7, sp, #8
 801b436:	60f8      	str	r0, [r7, #12]
 801b438:	60b9      	str	r1, [r7, #8]
 801b43a:	4639      	mov	r1, r7
 801b43c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801b440:	f7fb fb88 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801b444:	4604      	mov	r4, r0
 801b446:	6823      	ldr	r3, [r4, #0]
 801b448:	3368      	adds	r3, #104	; 0x68
 801b44a:	681d      	ldr	r5, [r3, #0]
 801b44c:	f7fb fb92 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b450:	4603      	mov	r3, r0
 801b452:	9300      	str	r3, [sp, #0]
 801b454:	f240 2301 	movw	r3, #513	; 0x201
 801b458:	4a06      	ldr	r2, [pc, #24]	; (801b474 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801b45a:	4907      	ldr	r1, [pc, #28]	; (801b478 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801b45c:	4620      	mov	r0, r4
 801b45e:	47a8      	blx	r5
    return default_value;
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	461a      	mov	r2, r3
 801b464:	463b      	mov	r3, r7
 801b466:	cb03      	ldmia	r3!, {r0, r1}
 801b468:	6010      	str	r0, [r2, #0]
 801b46a:	6051      	str	r1, [r2, #4]
}
 801b46c:	68f8      	ldr	r0, [r7, #12]
 801b46e:	3710      	adds	r7, #16
 801b470:	46bd      	mov	sp, r7
 801b472:	bdb0      	pop	{r4, r5, r7, pc}
 801b474:	08028fdc 	.word	0x08028fdc
 801b478:	08028ff8 	.word	0x08028ff8

0801b47c <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801b47c:	b5b0      	push	{r4, r5, r7, lr}
 801b47e:	b084      	sub	sp, #16
 801b480:	af02      	add	r7, sp, #8
 801b482:	6078      	str	r0, [r7, #4]
 801b484:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801b486:	f7fb fb65 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801b48a:	4604      	mov	r4, r0
 801b48c:	6823      	ldr	r3, [r4, #0]
 801b48e:	3368      	adds	r3, #104	; 0x68
 801b490:	681d      	ldr	r5, [r3, #0]
 801b492:	f7fb fb6f 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b496:	4603      	mov	r3, r0
 801b498:	9300      	str	r3, [sp, #0]
 801b49a:	f240 2307 	movw	r3, #519	; 0x207
 801b49e:	4a06      	ldr	r2, [pc, #24]	; (801b4b8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801b4a0:	4906      	ldr	r1, [pc, #24]	; (801b4bc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801b4a2:	4620      	mov	r0, r4
 801b4a4:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b4a6:	2100      	movs	r1, #0
 801b4a8:	6878      	ldr	r0, [r7, #4]
 801b4aa:	f7f1 ffa7 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
}
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	3708      	adds	r7, #8
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	bdb0      	pop	{r4, r5, r7, pc}
 801b4b6:	bf00      	nop
 801b4b8:	08028fdc 	.word	0x08028fdc
 801b4bc:	08029024 	.word	0x08029024

0801b4c0 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801b4c0:	b5b0      	push	{r4, r5, r7, lr}
 801b4c2:	b086      	sub	sp, #24
 801b4c4:	af02      	add	r7, sp, #8
 801b4c6:	60f8      	str	r0, [r7, #12]
 801b4c8:	60b9      	str	r1, [r7, #8]
 801b4ca:	4639      	mov	r1, r7
 801b4cc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801b4d0:	f7fb fb40 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801b4d4:	4604      	mov	r4, r0
 801b4d6:	6823      	ldr	r3, [r4, #0]
 801b4d8:	3368      	adds	r3, #104	; 0x68
 801b4da:	681d      	ldr	r5, [r3, #0]
 801b4dc:	f7fb fb4a 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	9300      	str	r3, [sp, #0]
 801b4e4:	f240 230d 	movw	r3, #525	; 0x20d
 801b4e8:	4a06      	ldr	r2, [pc, #24]	; (801b504 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801b4ea:	4907      	ldr	r1, [pc, #28]	; (801b508 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	47a8      	blx	r5
    return default_value;
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	463b      	mov	r3, r7
 801b4f6:	cb03      	ldmia	r3!, {r0, r1}
 801b4f8:	6010      	str	r0, [r2, #0]
 801b4fa:	6051      	str	r1, [r2, #4]
}
 801b4fc:	68f8      	ldr	r0, [r7, #12]
 801b4fe:	3710      	adds	r7, #16
 801b500:	46bd      	mov	sp, r7
 801b502:	bdb0      	pop	{r4, r5, r7, pc}
 801b504:	08028fdc 	.word	0x08028fdc
 801b508:	08029024 	.word	0x08029024

0801b50c <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	ed2d 8b02 	vpush	{d8}
 801b512:	b090      	sub	sp, #64	; 0x40
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	3354      	adds	r3, #84	; 0x54
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	f107 0208 	add.w	r2, r7, #8
 801b524:	6879      	ldr	r1, [r7, #4]
 801b526:	4610      	mov	r0, r2
 801b528:	4798      	blx	r3
 801b52a:	f107 0308 	add.w	r3, r7, #8
 801b52e:	4618      	mov	r0, r3
 801b530:	f005 f90a 	bl	8020748 <_ZNK14MockNamedValue14getDoubleValueEv>
 801b534:	eeb0 8a40 	vmov.f32	s16, s0
 801b538:	eef0 8a60 	vmov.f32	s17, s1
 801b53c:	bf00      	nop
 801b53e:	f107 0308 	add.w	r3, r7, #8
 801b542:	4618      	mov	r0, r3
 801b544:	f004 fc72 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b548:	eeb0 7a48 	vmov.f32	s14, s16
 801b54c:	eef0 7a68 	vmov.f32	s15, s17
}
 801b550:	eeb0 0a47 	vmov.f32	s0, s14
 801b554:	eef0 0a67 	vmov.f32	s1, s15
 801b558:	3740      	adds	r7, #64	; 0x40
 801b55a:	46bd      	mov	sp, r7
 801b55c:	ecbd 8b02 	vpop	{d8}
 801b560:	bd80      	pop	{r7, pc}

0801b562 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801b562:	b580      	push	{r7, lr}
 801b564:	b084      	sub	sp, #16
 801b566:	af00      	add	r7, sp, #0
 801b568:	60f8      	str	r0, [r7, #12]
 801b56a:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	3350      	adds	r3, #80	; 0x50
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	68f8      	ldr	r0, [r7, #12]
 801b578:	4798      	blx	r3
 801b57a:	4603      	mov	r3, r0
 801b57c:	f083 0301 	eor.w	r3, r3, #1
 801b580:	b2db      	uxtb	r3, r3
 801b582:	2b00      	cmp	r3, #0
 801b584:	d002      	beq.n	801b58c <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801b586:	ed97 7b00 	vldr	d7, [r7]
 801b58a:	e00a      	b.n	801b5a2 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	3398      	adds	r3, #152	; 0x98
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	68f8      	ldr	r0, [r7, #12]
 801b596:	4798      	blx	r3
 801b598:	eeb0 7a40 	vmov.f32	s14, s0
 801b59c:	eef0 7a60 	vmov.f32	s15, s1
 801b5a0:	bf00      	nop
}
 801b5a2:	eeb0 0a47 	vmov.f32	s0, s14
 801b5a6:	eef0 0a67 	vmov.f32	s1, s15
 801b5aa:	3710      	adds	r7, #16
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801b5b0:	b590      	push	{r4, r7, lr}
 801b5b2:	b091      	sub	sp, #68	; 0x44
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	3354      	adds	r3, #84	; 0x54
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	f107 0208 	add.w	r2, r7, #8
 801b5c4:	6879      	ldr	r1, [r7, #4]
 801b5c6:	4610      	mov	r0, r2
 801b5c8:	4798      	blx	r3
 801b5ca:	f107 0308 	add.w	r3, r7, #8
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f004 ff08 	bl	80203e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801b5d4:	4604      	mov	r4, r0
 801b5d6:	bf00      	nop
 801b5d8:	f107 0308 	add.w	r3, r7, #8
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f004 fc25 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b5e2:	4623      	mov	r3, r4
}
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	3744      	adds	r7, #68	; 0x44
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd90      	pop	{r4, r7, pc}

0801b5ec <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b082      	sub	sp, #8
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
 801b5f4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	3350      	adds	r3, #80	; 0x50
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	4798      	blx	r3
 801b602:	4603      	mov	r3, r0
 801b604:	f083 0301 	eor.w	r3, r3, #1
 801b608:	b2db      	uxtb	r3, r3
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d001      	beq.n	801b612 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801b60e:	683b      	ldr	r3, [r7, #0]
 801b610:	e007      	b.n	801b622 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	3388      	adds	r3, #136	; 0x88
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	6878      	ldr	r0, [r7, #4]
 801b61c:	4798      	blx	r3
 801b61e:	4603      	mov	r3, r0
 801b620:	bf00      	nop
}
 801b622:	4618      	mov	r0, r3
 801b624:	3708      	adds	r7, #8
 801b626:	46bd      	mov	sp, r7
 801b628:	bd80      	pop	{r7, pc}

0801b62a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801b62a:	b580      	push	{r7, lr}
 801b62c:	b082      	sub	sp, #8
 801b62e:	af00      	add	r7, sp, #0
 801b630:	6078      	str	r0, [r7, #4]
 801b632:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	3350      	adds	r3, #80	; 0x50
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	6878      	ldr	r0, [r7, #4]
 801b63e:	4798      	blx	r3
 801b640:	4603      	mov	r3, r0
 801b642:	f083 0301 	eor.w	r3, r3, #1
 801b646:	b2db      	uxtb	r3, r3
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d001      	beq.n	801b650 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	e007      	b.n	801b660 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	33a0      	adds	r3, #160	; 0xa0
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	6878      	ldr	r0, [r7, #4]
 801b65a:	4798      	blx	r3
 801b65c:	4603      	mov	r3, r0
 801b65e:	bf00      	nop
}
 801b660:	4618      	mov	r0, r3
 801b662:	3708      	adds	r7, #8
 801b664:	46bd      	mov	sp, r7
 801b666:	bd80      	pop	{r7, pc}

0801b668 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801b668:	b590      	push	{r4, r7, lr}
 801b66a:	b091      	sub	sp, #68	; 0x44
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	3354      	adds	r3, #84	; 0x54
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	f107 0208 	add.w	r2, r7, #8
 801b67c:	6879      	ldr	r1, [r7, #4]
 801b67e:	4610      	mov	r0, r2
 801b680:	4798      	blx	r3
 801b682:	f107 0308 	add.w	r3, r7, #8
 801b686:	4618      	mov	r0, r3
 801b688:	f005 f8e2 	bl	8020850 <_ZNK14MockNamedValue15getPointerValueEv>
 801b68c:	4604      	mov	r4, r0
 801b68e:	bf00      	nop
 801b690:	f107 0308 	add.w	r3, r7, #8
 801b694:	4618      	mov	r0, r3
 801b696:	f004 fbc9 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b69a:	4623      	mov	r3, r4
}
 801b69c:	4618      	mov	r0, r3
 801b69e:	3744      	adds	r7, #68	; 0x44
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd90      	pop	{r4, r7, pc}

0801b6a4 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801b6a4:	b590      	push	{r4, r7, lr}
 801b6a6:	b091      	sub	sp, #68	; 0x44
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	3354      	adds	r3, #84	; 0x54
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f107 0208 	add.w	r2, r7, #8
 801b6b8:	6879      	ldr	r1, [r7, #4]
 801b6ba:	4610      	mov	r0, r2
 801b6bc:	4798      	blx	r3
 801b6be:	f107 0308 	add.w	r3, r7, #8
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f005 f8ec 	bl	80208a0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801b6c8:	4604      	mov	r4, r0
 801b6ca:	bf00      	nop
 801b6cc:	f107 0308 	add.w	r3, r7, #8
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	f004 fbab 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b6d6:	4623      	mov	r3, r4
}
 801b6d8:	4618      	mov	r0, r3
 801b6da:	3744      	adds	r7, #68	; 0x44
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	bd90      	pop	{r4, r7, pc}

0801b6e0 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b082      	sub	sp, #8
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	6078      	str	r0, [r7, #4]
 801b6e8:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	3350      	adds	r3, #80	; 0x50
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	6878      	ldr	r0, [r7, #4]
 801b6f4:	4798      	blx	r3
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	f083 0301 	eor.w	r3, r3, #1
 801b6fc:	b2db      	uxtb	r3, r3
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d001      	beq.n	801b706 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801b702:	683b      	ldr	r3, [r7, #0]
 801b704:	e007      	b.n	801b716 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	33a8      	adds	r3, #168	; 0xa8
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	6878      	ldr	r0, [r7, #4]
 801b710:	4798      	blx	r3
 801b712:	4603      	mov	r3, r0
 801b714:	bf00      	nop
}
 801b716:	4618      	mov	r0, r3
 801b718:	3708      	adds	r7, #8
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bd80      	pop	{r7, pc}

0801b71e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801b71e:	b590      	push	{r4, r7, lr}
 801b720:	b091      	sub	sp, #68	; 0x44
 801b722:	af00      	add	r7, sp, #0
 801b724:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	3354      	adds	r3, #84	; 0x54
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	f107 0208 	add.w	r2, r7, #8
 801b732:	6879      	ldr	r1, [r7, #4]
 801b734:	4610      	mov	r0, r2
 801b736:	4798      	blx	r3
 801b738:	f107 0308 	add.w	r3, r7, #8
 801b73c:	4618      	mov	r0, r3
 801b73e:	f005 f8d7 	bl	80208f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801b742:	4604      	mov	r4, r0
 801b744:	bf00      	nop
 801b746:	f107 0308 	add.w	r3, r7, #8
 801b74a:	4618      	mov	r0, r3
 801b74c:	f004 fb6e 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b750:	4623      	mov	r3, r4
}
 801b752:	4618      	mov	r0, r3
 801b754:	3744      	adds	r7, #68	; 0x44
 801b756:	46bd      	mov	sp, r7
 801b758:	bd90      	pop	{r4, r7, pc}

0801b75a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801b75a:	b580      	push	{r7, lr}
 801b75c:	b082      	sub	sp, #8
 801b75e:	af00      	add	r7, sp, #0
 801b760:	6078      	str	r0, [r7, #4]
 801b762:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	3350      	adds	r3, #80	; 0x50
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	6878      	ldr	r0, [r7, #4]
 801b76e:	4798      	blx	r3
 801b770:	4603      	mov	r3, r0
 801b772:	f083 0301 	eor.w	r3, r3, #1
 801b776:	b2db      	uxtb	r3, r3
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d001      	beq.n	801b780 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	e007      	b.n	801b790 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	33b0      	adds	r3, #176	; 0xb0
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	6878      	ldr	r0, [r7, #4]
 801b78a:	4798      	blx	r3
 801b78c:	4603      	mov	r3, r0
 801b78e:	bf00      	nop
}
 801b790:	4618      	mov	r0, r3
 801b792:	3708      	adds	r7, #8
 801b794:	46bd      	mov	sp, r7
 801b796:	bd80      	pop	{r7, pc}

0801b798 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b082      	sub	sp, #8
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
 801b7a0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	3350      	adds	r3, #80	; 0x50
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	6878      	ldr	r0, [r7, #4]
 801b7ac:	4798      	blx	r3
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	f083 0301 	eor.w	r3, r3, #1
 801b7b4:	b2db      	uxtb	r3, r3
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d001      	beq.n	801b7be <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	e007      	b.n	801b7ce <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	3394      	adds	r3, #148	; 0x94
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	6878      	ldr	r0, [r7, #4]
 801b7c8:	4798      	blx	r3
 801b7ca:	4603      	mov	r3, r0
 801b7cc:	bf00      	nop
}
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3708      	adds	r7, #8
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801b7d6:	b590      	push	{r4, r7, lr}
 801b7d8:	b091      	sub	sp, #68	; 0x44
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	3354      	adds	r3, #84	; 0x54
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	f107 0208 	add.w	r2, r7, #8
 801b7ea:	6879      	ldr	r1, [r7, #4]
 801b7ec:	4610      	mov	r0, r2
 801b7ee:	4798      	blx	r3
 801b7f0:	f107 0308 	add.w	r3, r7, #8
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f005 f803 	bl	8020800 <_ZNK14MockNamedValue14getStringValueEv>
 801b7fa:	4604      	mov	r4, r0
 801b7fc:	bf00      	nop
 801b7fe:	f107 0308 	add.w	r3, r7, #8
 801b802:	4618      	mov	r0, r3
 801b804:	f004 fb12 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b808:	4623      	mov	r3, r4
}
 801b80a:	4618      	mov	r0, r3
 801b80c:	3744      	adds	r7, #68	; 0x44
 801b80e:	46bd      	mov	sp, r7
 801b810:	bd90      	pop	{r4, r7, pc}

0801b812 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801b812:	b590      	push	{r4, r7, lr}
 801b814:	b093      	sub	sp, #76	; 0x4c
 801b816:	af00      	add	r7, sp, #0
 801b818:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	3354      	adds	r3, #84	; 0x54
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	f107 0210 	add.w	r2, r7, #16
 801b826:	6879      	ldr	r1, [r7, #4]
 801b828:	4610      	mov	r0, r2
 801b82a:	4798      	blx	r3
 801b82c:	f107 0308 	add.w	r3, r7, #8
 801b830:	f107 0210 	add.w	r2, r7, #16
 801b834:	4611      	mov	r1, r2
 801b836:	4618      	mov	r0, r3
 801b838:	f004 fd8e 	bl	8020358 <_ZNK14MockNamedValue7getNameEv>
 801b83c:	f107 0308 	add.w	r3, r7, #8
 801b840:	4618      	mov	r0, r3
 801b842:	f7f4 f94b 	bl	800fadc <_ZNK12SimpleString7isEmptyEv>
 801b846:	4603      	mov	r3, r0
 801b848:	f083 0301 	eor.w	r3, r3, #1
 801b84c:	b2dc      	uxtb	r4, r3
 801b84e:	f107 0308 	add.w	r3, r7, #8
 801b852:	4618      	mov	r0, r3
 801b854:	f7f4 f953 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801b858:	f107 0310 	add.w	r3, r7, #16
 801b85c:	4618      	mov	r0, r3
 801b85e:	f004 fae5 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801b862:	4623      	mov	r3, r4
}
 801b864:	4618      	mov	r0, r3
 801b866:	374c      	adds	r7, #76	; 0x4c
 801b868:	46bd      	mov	sp, r7
 801b86a:	bd90      	pop	{r4, r7, pc}

0801b86c <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801b86c:	b590      	push	{r4, r7, lr}
 801b86e:	b095      	sub	sp, #84	; 0x54
 801b870:	af02      	add	r7, sp, #8
 801b872:	6078      	str	r0, [r7, #4]
 801b874:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	33c0      	adds	r3, #192	; 0xc0
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	6878      	ldr	r0, [r7, #4]
 801b880:	4798      	blx	r3
 801b882:	4603      	mov	r3, r0
 801b884:	2b00      	cmp	r3, #0
 801b886:	d001      	beq.n	801b88c <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801b888:	687c      	ldr	r4, [r7, #4]
 801b88a:	e053      	b.n	801b934 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	331c      	adds	r3, #28
 801b890:	6839      	ldr	r1, [r7, #0]
 801b892:	4618      	mov	r0, r3
 801b894:	f003 f8ca 	bl	801ea2c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	699b      	ldr	r3, [r3, #24]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d109      	bne.n	801b8b4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	331c      	adds	r3, #28
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f002 fe20 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d001      	beq.n	801b8b4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	e000      	b.n	801b8b6 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d02c      	beq.n	801b914 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	33cc      	adds	r3, #204	; 0xcc
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	6878      	ldr	r0, [r7, #4]
 801b8c4:	4798      	blx	r3
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8cc:	6879      	ldr	r1, [r7, #4]
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	f7fe fd3f 	bl	801a352 <_ZNK21MockCheckedActualCall7getNameEv>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b8dc:	f107 000c 	add.w	r0, r7, #12
 801b8e0:	9300      	str	r3, [sp, #0]
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	4621      	mov	r1, r4
 801b8e6:	f004 f9fb 	bl	801fce0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801b8ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7f4 f905 	bl	800fafe <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	33dc      	adds	r3, #220	; 0xdc
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	f107 020c 	add.w	r2, r7, #12
 801b900:	4611      	mov	r1, r2
 801b902:	6878      	ldr	r0, [r7, #4]
 801b904:	4798      	blx	r3
        return *this;
 801b906:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801b908:	f107 030c 	add.w	r3, r7, #12
 801b90c:	4618      	mov	r0, r3
 801b90e:	f000 ffa7 	bl	801c860 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801b912:	e00f      	b.n	801b934 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	331c      	adds	r3, #28
 801b918:	4618      	mov	r0, r3
 801b91a:	f003 f9a7 	bl	801ec6c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	699b      	ldr	r3, [r3, #24]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d105      	bne.n	801b932 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	33d8      	adds	r3, #216	; 0xd8
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	6878      	ldr	r0, [r7, #4]
 801b930:	4798      	blx	r3
    }

    return *this;
 801b932:	687c      	ldr	r4, [r7, #4]
 801b934:	4623      	mov	r3, r4
}
 801b936:	4618      	mov	r0, r3
 801b938:	374c      	adds	r7, #76	; 0x4c
 801b93a:	46bd      	mov	sp, r7
 801b93c:	bd90      	pop	{r4, r7, pc}
	...

0801b940 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801b940:	b590      	push	{r4, r7, lr}
 801b942:	b087      	sub	sp, #28
 801b944:	af00      	add	r7, sp, #0
 801b946:	60f8      	str	r0, [r7, #12]
 801b948:	60b9      	str	r1, [r7, #8]
 801b94a:	607a      	str	r2, [r7, #4]
 801b94c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801b94e:	f240 2282 	movw	r2, #642	; 0x282
 801b952:	4913      	ldr	r1, [pc, #76]	; (801b9a0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 801b954:	2018      	movs	r0, #24
 801b956:	f7f1 f957 	bl	800cc08 <_ZnwjPKci>
 801b95a:	4604      	mov	r4, r0
 801b95c:	683b      	ldr	r3, [r7, #0]
 801b95e:	687a      	ldr	r2, [r7, #4]
 801b960:	68b9      	ldr	r1, [r7, #8]
 801b962:	4620      	mov	r0, r4
 801b964:	f7fe fa48 	bl	8019df8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 801b968:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801b96a:	68fb      	ldr	r3, [r7, #12]
 801b96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d103      	bne.n	801b97a <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	693a      	ldr	r2, [r7, #16]
 801b976:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 801b978:	e00d      	b.n	801b996 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b97e:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	695b      	ldr	r3, [r3, #20]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d003      	beq.n	801b990 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 801b988:	697b      	ldr	r3, [r7, #20]
 801b98a:	695b      	ldr	r3, [r3, #20]
 801b98c:	617b      	str	r3, [r7, #20]
 801b98e:	e7f7      	b.n	801b980 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	693a      	ldr	r2, [r7, #16]
 801b994:	615a      	str	r2, [r3, #20]
}
 801b996:	bf00      	nop
 801b998:	371c      	adds	r7, #28
 801b99a:	46bd      	mov	sp, r7
 801b99c:	bd90      	pop	{r4, r7, pc}
 801b99e:	bf00      	nop
 801b9a0:	08028fdc 	.word	0x08028fdc

0801b9a4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b082      	sub	sp, #8
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	3308      	adds	r3, #8
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	f7f4 f8a4 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	f7f4 f8a0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	3708      	adds	r7, #8
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd80      	pop	{r7, pc}

0801b9c8 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801b9c8:	b590      	push	{r4, r7, lr}
 801b9ca:	b085      	sub	sp, #20
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9d4:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	60bb      	str	r3, [r7, #8]

    while (current) {
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d012      	beq.n	801ba06 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	695b      	ldr	r3, [r3, #20]
 801b9e8:	60fb      	str	r3, [r7, #12]
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	68fa      	ldr	r2, [r7, #12]
 801b9ee:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801b9f0:	68bc      	ldr	r4, [r7, #8]
 801b9f2:	2c00      	cmp	r4, #0
 801b9f4:	d0f1      	beq.n	801b9da <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	f7ff ffd4 	bl	801b9a4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801b9fc:	2118      	movs	r1, #24
 801b9fe:	4620      	mov	r0, r4
 801ba00:	f7f1 f916 	bl	800cc30 <_ZdlPvj>
    while (current) {
 801ba04:	e7e9      	b.n	801b9da <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801ba06:	bf00      	nop
 801ba08:	3714      	adds	r7, #20
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd90      	pop	{r4, r7, pc}
	...

0801ba10 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b082      	sub	sp, #8
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	f7fe fc6a 	bl	801a2f4 <_ZN14MockActualCallC1Ev>
 801ba20:	4a06      	ldr	r2, [pc, #24]	; (801ba3c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	601a      	str	r2, [r3, #0]
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	3304      	adds	r3, #4
 801ba2a:	4905      	ldr	r1, [pc, #20]	; (801ba40 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	f7f3 fcae 	bl	800f38e <_ZN12SimpleStringC1EPKc>
{
}
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	4618      	mov	r0, r3
 801ba36:	3708      	adds	r7, #8
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bd80      	pop	{r7, pc}
 801ba3c:	0802c2f0 	.word	0x0802c2f0
 801ba40:	08028fc4 	.word	0x08028fc4

0801ba44 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b082      	sub	sp, #8
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
 801ba4c:	4a08      	ldr	r2, [pc, #32]	; (801ba70 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	601a      	str	r2, [r3, #0]
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	3304      	adds	r3, #4
 801ba56:	4618      	mov	r0, r3
 801ba58:	f7f4 f851 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	4618      	mov	r0, r3
 801ba60:	f7fe fc58 	bl	801a314 <_ZN14MockActualCallD1Ev>
{
}
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	4618      	mov	r0, r3
 801ba68:	3708      	adds	r7, #8
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	bd80      	pop	{r7, pc}
 801ba6e:	bf00      	nop
 801ba70:	0802c2f0 	.word	0x0802c2f0

0801ba74 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b082      	sub	sp, #8
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
}
 801ba7c:	6878      	ldr	r0, [r7, #4]
 801ba7e:	f7ff ffe1 	bl	801ba44 <_ZN19MockActualCallTraceD1Ev>
 801ba82:	210c      	movs	r1, #12
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	f7f1 f8d3 	bl	800cc30 <_ZdlPvj>
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	3708      	adds	r7, #8
 801ba90:	46bd      	mov	sp, r7
 801ba92:	bd80      	pop	{r7, pc}

0801ba94 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
 801ba9c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	3304      	adds	r3, #4
 801baa2:	4907      	ldr	r1, [pc, #28]	; (801bac0 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7f4 f8b9 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	3304      	adds	r3, #4
 801baae:	6839      	ldr	r1, [r7, #0]
 801bab0:	4618      	mov	r0, r3
 801bab2:	f7f4 f8a1 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    return *this;
 801bab6:	687b      	ldr	r3, [r7, #4]
}
 801bab8:	4618      	mov	r0, r3
 801baba:	3708      	adds	r7, #8
 801babc:	46bd      	mov	sp, r7
 801babe:	bd80      	pop	{r7, pc}
 801bac0:	080290d0 	.word	0x080290d0

0801bac4 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801bac4:	b590      	push	{r4, r7, lr}
 801bac6:	b085      	sub	sp, #20
 801bac8:	af00      	add	r7, sp, #0
 801baca:	6078      	str	r0, [r7, #4]
 801bacc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	3304      	adds	r3, #4
 801bad2:	490e      	ldr	r1, [pc, #56]	; (801bb0c <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801bad4:	4618      	mov	r0, r3
 801bad6:	f7f4 f8a1 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	1d1c      	adds	r4, r3, #4
 801bade:	f107 0308 	add.w	r3, r7, #8
 801bae2:	6839      	ldr	r1, [r7, #0]
 801bae4:	4618      	mov	r0, r3
 801bae6:	f7f4 fd39 	bl	801055c <_Z10StringFromj>
 801baea:	f107 0308 	add.w	r3, r7, #8
 801baee:	4619      	mov	r1, r3
 801baf0:	4620      	mov	r0, r4
 801baf2:	f7f4 f881 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801baf6:	f107 0308 	add.w	r3, r7, #8
 801bafa:	4618      	mov	r0, r3
 801bafc:	f7f3 ffff 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bb00:	687b      	ldr	r3, [r7, #4]
}
 801bb02:	4618      	mov	r0, r3
 801bb04:	3714      	adds	r7, #20
 801bb06:	46bd      	mov	sp, r7
 801bb08:	bd90      	pop	{r4, r7, pc}
 801bb0a:	bf00      	nop
 801bb0c:	080290e0 	.word	0x080290e0

0801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801bb10:	b580      	push	{r7, lr}
 801bb12:	b082      	sub	sp, #8
 801bb14:	af00      	add	r7, sp, #0
 801bb16:	6078      	str	r0, [r7, #4]
 801bb18:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	3304      	adds	r3, #4
 801bb1e:	490a      	ldr	r1, [pc, #40]	; (801bb48 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801bb20:	4618      	mov	r0, r3
 801bb22:	f7f4 f87b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	3304      	adds	r3, #4
 801bb2a:	6839      	ldr	r1, [r7, #0]
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f7f4 f863 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	3304      	adds	r3, #4
 801bb36:	4905      	ldr	r1, [pc, #20]	; (801bb4c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 801bb38:	4618      	mov	r0, r3
 801bb3a:	f7f4 f86f 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
}
 801bb3e:	bf00      	nop
 801bb40:	3708      	adds	r7, #8
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	080290f0 	.word	0x080290f0
 801bb4c:	080290f4 	.word	0x080290f4

0801bb50 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801bb50:	b590      	push	{r4, r7, lr}
 801bb52:	b087      	sub	sp, #28
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	4613      	mov	r3, r2
 801bb5c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801bb5e:	68b9      	ldr	r1, [r7, #8]
 801bb60:	68f8      	ldr	r0, [r7, #12]
 801bb62:	f7ff ffd5 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	1d1c      	adds	r4, r3, #4
 801bb6a:	f107 0310 	add.w	r3, r7, #16
 801bb6e:	79fa      	ldrb	r2, [r7, #7]
 801bb70:	4611      	mov	r1, r2
 801bb72:	4618      	mov	r0, r3
 801bb74:	f7f4 fa34 	bl	800ffe0 <_Z10StringFromb>
 801bb78:	f107 0310 	add.w	r3, r7, #16
 801bb7c:	4619      	mov	r1, r3
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f7f4 f83a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bb84:	f107 0310 	add.w	r3, r7, #16
 801bb88:	4618      	mov	r0, r3
 801bb8a:	f7f3 ffb8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bb8e:	68fb      	ldr	r3, [r7, #12]
}
 801bb90:	4618      	mov	r0, r3
 801bb92:	371c      	adds	r7, #28
 801bb94:	46bd      	mov	sp, r7
 801bb96:	bd90      	pop	{r4, r7, pc}

0801bb98 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801bb98:	b590      	push	{r4, r7, lr}
 801bb9a:	b08f      	sub	sp, #60	; 0x3c
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	60f8      	str	r0, [r7, #12]
 801bba0:	60b9      	str	r1, [r7, #8]
 801bba2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bba4:	68b9      	ldr	r1, [r7, #8]
 801bba6:	68f8      	ldr	r0, [r7, #12]
 801bba8:	f7ff ffb2 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	1d1c      	adds	r4, r3, #4
 801bbb0:	f107 0320 	add.w	r3, r7, #32
 801bbb4:	6879      	ldr	r1, [r7, #4]
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f7f4 fcd0 	bl	801055c <_Z10StringFromj>
 801bbbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bbc0:	491f      	ldr	r1, [pc, #124]	; (801bc40 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	f7f3 fbe3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801bbc8:	f107 0318 	add.w	r3, r7, #24
 801bbcc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bbd0:	f107 0120 	add.w	r1, r7, #32
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f7f3 fff4 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bbda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bbde:	6879      	ldr	r1, [r7, #4]
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f7f4 fb5f 	bl	80102a4 <_Z30BracketsFormattedHexStringFromj>
 801bbe6:	f107 0310 	add.w	r3, r7, #16
 801bbea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bbee:	f107 0118 	add.w	r1, r7, #24
 801bbf2:	4618      	mov	r0, r3
 801bbf4:	f7f3 ffe5 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bbf8:	f107 0310 	add.w	r3, r7, #16
 801bbfc:	4619      	mov	r1, r3
 801bbfe:	4620      	mov	r0, r4
 801bc00:	f7f3 fffa 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bc04:	f107 0310 	add.w	r3, r7, #16
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f3 ff78 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bc0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc12:	4618      	mov	r0, r3
 801bc14:	f7f3 ff73 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bc18:	f107 0318 	add.w	r3, r7, #24
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7f3 ff6e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bc22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bc26:	4618      	mov	r0, r3
 801bc28:	f7f3 ff69 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bc2c:	f107 0320 	add.w	r3, r7, #32
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7f3 ff64 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bc36:	68fb      	ldr	r3, [r7, #12]
}
 801bc38:	4618      	mov	r0, r3
 801bc3a:	373c      	adds	r7, #60	; 0x3c
 801bc3c:	46bd      	mov	sp, r7
 801bc3e:	bd90      	pop	{r4, r7, pc}
 801bc40:	080290f0 	.word	0x080290f0

0801bc44 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801bc44:	b590      	push	{r4, r7, lr}
 801bc46:	b08f      	sub	sp, #60	; 0x3c
 801bc48:	af00      	add	r7, sp, #0
 801bc4a:	60f8      	str	r0, [r7, #12]
 801bc4c:	60b9      	str	r1, [r7, #8]
 801bc4e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bc50:	68b9      	ldr	r1, [r7, #8]
 801bc52:	68f8      	ldr	r0, [r7, #12]
 801bc54:	f7ff ff5c 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	1d1c      	adds	r4, r3, #4
 801bc5c:	f107 0320 	add.w	r3, r7, #32
 801bc60:	6879      	ldr	r1, [r7, #4]
 801bc62:	4618      	mov	r0, r3
 801bc64:	f7f4 fa12 	bl	801008c <_Z10StringFromi>
 801bc68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bc6c:	491f      	ldr	r1, [pc, #124]	; (801bcec <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f7f3 fb8d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801bc74:	f107 0318 	add.w	r3, r7, #24
 801bc78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bc7c:	f107 0120 	add.w	r1, r7, #32
 801bc80:	4618      	mov	r0, r3
 801bc82:	f7f3 ff9e 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bc86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bc8a:	6879      	ldr	r1, [r7, #4]
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f7f4 faed 	bl	801026c <_Z30BracketsFormattedHexStringFromi>
 801bc92:	f107 0310 	add.w	r3, r7, #16
 801bc96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bc9a:	f107 0118 	add.w	r1, r7, #24
 801bc9e:	4618      	mov	r0, r3
 801bca0:	f7f3 ff8f 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bca4:	f107 0310 	add.w	r3, r7, #16
 801bca8:	4619      	mov	r1, r3
 801bcaa:	4620      	mov	r0, r4
 801bcac:	f7f3 ffa4 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bcb0:	f107 0310 	add.w	r3, r7, #16
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	f7f3 ff22 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bcba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f7f3 ff1d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bcc4:	f107 0318 	add.w	r3, r7, #24
 801bcc8:	4618      	mov	r0, r3
 801bcca:	f7f3 ff18 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bcce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	f7f3 ff13 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bcd8:	f107 0320 	add.w	r3, r7, #32
 801bcdc:	4618      	mov	r0, r3
 801bcde:	f7f3 ff0e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bce2:	68fb      	ldr	r3, [r7, #12]
}
 801bce4:	4618      	mov	r0, r3
 801bce6:	373c      	adds	r7, #60	; 0x3c
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bd90      	pop	{r4, r7, pc}
 801bcec:	080290f0 	.word	0x080290f0

0801bcf0 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801bcf0:	b590      	push	{r4, r7, lr}
 801bcf2:	b08f      	sub	sp, #60	; 0x3c
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	60f8      	str	r0, [r7, #12]
 801bcf8:	60b9      	str	r1, [r7, #8]
 801bcfa:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bcfc:	68b9      	ldr	r1, [r7, #8]
 801bcfe:	68f8      	ldr	r0, [r7, #12]
 801bd00:	f7ff ff06 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	1d1c      	adds	r4, r3, #4
 801bd08:	f107 0320 	add.w	r3, r7, #32
 801bd0c:	6879      	ldr	r1, [r7, #4]
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f7f4 fc36 	bl	8010580 <_Z10StringFromm>
 801bd14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bd18:	491f      	ldr	r1, [pc, #124]	; (801bd98 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	f7f3 fb37 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801bd20:	f107 0318 	add.w	r3, r7, #24
 801bd24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bd28:	f107 0120 	add.w	r1, r7, #32
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	f7f3 ff48 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bd32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bd36:	6879      	ldr	r1, [r7, #4]
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7f4 faeb 	bl	8010314 <_Z30BracketsFormattedHexStringFromm>
 801bd3e:	f107 0310 	add.w	r3, r7, #16
 801bd42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bd46:	f107 0118 	add.w	r1, r7, #24
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7f3 ff39 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bd50:	f107 0310 	add.w	r3, r7, #16
 801bd54:	4619      	mov	r1, r3
 801bd56:	4620      	mov	r0, r4
 801bd58:	f7f3 ff4e 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bd5c:	f107 0310 	add.w	r3, r7, #16
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7f3 fecc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bd66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	f7f3 fec7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bd70:	f107 0318 	add.w	r3, r7, #24
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7f3 fec2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bd7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bd7e:	4618      	mov	r0, r3
 801bd80:	f7f3 febd 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801bd84:	f107 0320 	add.w	r3, r7, #32
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7f3 feb8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bd8e:	68fb      	ldr	r3, [r7, #12]
}
 801bd90:	4618      	mov	r0, r3
 801bd92:	373c      	adds	r7, #60	; 0x3c
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd90      	pop	{r4, r7, pc}
 801bd98:	080290f0 	.word	0x080290f0

0801bd9c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801bd9c:	b590      	push	{r4, r7, lr}
 801bd9e:	b08f      	sub	sp, #60	; 0x3c
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	60f8      	str	r0, [r7, #12]
 801bda4:	60b9      	str	r1, [r7, #8]
 801bda6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bda8:	68b9      	ldr	r1, [r7, #8]
 801bdaa:	68f8      	ldr	r0, [r7, #12]
 801bdac:	f7ff feb0 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	1d1c      	adds	r4, r3, #4
 801bdb4:	f107 0320 	add.w	r3, r7, #32
 801bdb8:	6879      	ldr	r1, [r7, #4]
 801bdba:	4618      	mov	r0, r3
 801bdbc:	f7f4 f978 	bl	80100b0 <_Z10StringFroml>
 801bdc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bdc4:	491f      	ldr	r1, [pc, #124]	; (801be44 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7f3 fae1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801bdcc:	f107 0318 	add.w	r3, r7, #24
 801bdd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bdd4:	f107 0120 	add.w	r1, r7, #32
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7f3 fef2 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bdde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bde2:	6879      	ldr	r1, [r7, #4]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f7f4 fa79 	bl	80102dc <_Z30BracketsFormattedHexStringFroml>
 801bdea:	f107 0310 	add.w	r3, r7, #16
 801bdee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801bdf2:	f107 0118 	add.w	r1, r7, #24
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f7f3 fee3 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 801bdfc:	f107 0310 	add.w	r3, r7, #16
 801be00:	4619      	mov	r1, r3
 801be02:	4620      	mov	r0, r4
 801be04:	f7f3 fef8 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801be08:	f107 0310 	add.w	r3, r7, #16
 801be0c:	4618      	mov	r0, r3
 801be0e:	f7f3 fe76 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801be12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801be16:	4618      	mov	r0, r3
 801be18:	f7f3 fe71 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801be1c:	f107 0318 	add.w	r3, r7, #24
 801be20:	4618      	mov	r0, r3
 801be22:	f7f3 fe6c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801be26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801be2a:	4618      	mov	r0, r3
 801be2c:	f7f3 fe67 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801be30:	f107 0320 	add.w	r3, r7, #32
 801be34:	4618      	mov	r0, r3
 801be36:	f7f3 fe62 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801be3a:	68fb      	ldr	r3, [r7, #12]
}
 801be3c:	4618      	mov	r0, r3
 801be3e:	373c      	adds	r7, #60	; 0x3c
 801be40:	46bd      	mov	sp, r7
 801be42:	bd90      	pop	{r4, r7, pc}
 801be44:	080290f0 	.word	0x080290f0

0801be48 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801be48:	b5b0      	push	{r4, r5, r7, lr}
 801be4a:	b086      	sub	sp, #24
 801be4c:	af02      	add	r7, sp, #8
 801be4e:	60f8      	str	r0, [r7, #12]
 801be50:	60b9      	str	r1, [r7, #8]
 801be52:	4639      	mov	r1, r7
 801be54:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801be58:	f7fa fe7c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801be5c:	4604      	mov	r4, r0
 801be5e:	6823      	ldr	r3, [r4, #0]
 801be60:	3368      	adds	r3, #104	; 0x68
 801be62:	681d      	ldr	r5, [r3, #0]
 801be64:	f7fa fe86 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be68:	4603      	mov	r3, r0
 801be6a:	9300      	str	r3, [sp, #0]
 801be6c:	f240 23ee 	movw	r3, #750	; 0x2ee
 801be70:	4a04      	ldr	r2, [pc, #16]	; (801be84 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801be72:	4905      	ldr	r1, [pc, #20]	; (801be88 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801be74:	4620      	mov	r0, r4
 801be76:	47a8      	blx	r5
    return *this;
 801be78:	68fb      	ldr	r3, [r7, #12]
}
 801be7a:	4618      	mov	r0, r3
 801be7c:	3710      	adds	r7, #16
 801be7e:	46bd      	mov	sp, r7
 801be80:	bdb0      	pop	{r4, r5, r7, pc}
 801be82:	bf00      	nop
 801be84:	08028fdc 	.word	0x08028fdc
 801be88:	08028ff8 	.word	0x08028ff8

0801be8c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801be8c:	b5b0      	push	{r4, r5, r7, lr}
 801be8e:	b086      	sub	sp, #24
 801be90:	af02      	add	r7, sp, #8
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	4639      	mov	r1, r7
 801be98:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801be9c:	f7fa fe5a 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801bea0:	4604      	mov	r4, r0
 801bea2:	6823      	ldr	r3, [r4, #0]
 801bea4:	3368      	adds	r3, #104	; 0x68
 801bea6:	681d      	ldr	r5, [r3, #0]
 801bea8:	f7fa fe64 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801beac:	4603      	mov	r3, r0
 801beae:	9300      	str	r3, [sp, #0]
 801beb0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801beb4:	4a04      	ldr	r2, [pc, #16]	; (801bec8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801beb6:	4905      	ldr	r1, [pc, #20]	; (801becc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801beb8:	4620      	mov	r0, r4
 801beba:	47a8      	blx	r5
    return *this;
 801bebc:	68fb      	ldr	r3, [r7, #12]
}
 801bebe:	4618      	mov	r0, r3
 801bec0:	3710      	adds	r7, #16
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bdb0      	pop	{r4, r5, r7, pc}
 801bec6:	bf00      	nop
 801bec8:	08028fdc 	.word	0x08028fdc
 801becc:	08029024 	.word	0x08029024

0801bed0 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801bed0:	b590      	push	{r4, r7, lr}
 801bed2:	b087      	sub	sp, #28
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	60b9      	str	r1, [r7, #8]
 801beda:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801bede:	68b9      	ldr	r1, [r7, #8]
 801bee0:	68f8      	ldr	r0, [r7, #12]
 801bee2:	f7ff fe15 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	1d1c      	adds	r4, r3, #4
 801beea:	f107 0310 	add.w	r3, r7, #16
 801beee:	2106      	movs	r1, #6
 801bef0:	ed97 0b00 	vldr	d0, [r7]
 801bef4:	4618      	mov	r0, r3
 801bef6:	f7f4 fac7 	bl	8010488 <_Z10StringFromdi>
 801befa:	f107 0310 	add.w	r3, r7, #16
 801befe:	4619      	mov	r1, r3
 801bf00:	4620      	mov	r0, r4
 801bf02:	f7f3 fe79 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bf06:	f107 0310 	add.w	r3, r7, #16
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7f3 fdf7 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bf10:	68fb      	ldr	r3, [r7, #12]
}
 801bf12:	4618      	mov	r0, r3
 801bf14:	371c      	adds	r7, #28
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd90      	pop	{r4, r7, pc}

0801bf1a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801bf1a:	b590      	push	{r4, r7, lr}
 801bf1c:	b087      	sub	sp, #28
 801bf1e:	af00      	add	r7, sp, #0
 801bf20:	60f8      	str	r0, [r7, #12]
 801bf22:	60b9      	str	r1, [r7, #8]
 801bf24:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bf26:	68b9      	ldr	r1, [r7, #8]
 801bf28:	68f8      	ldr	r0, [r7, #12]
 801bf2a:	f7ff fdf1 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	1d1c      	adds	r4, r3, #4
 801bf32:	f107 0310 	add.w	r3, r7, #16
 801bf36:	6879      	ldr	r1, [r7, #4]
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7f4 f86d 	bl	8010018 <_Z10StringFromPKc>
 801bf3e:	f107 0310 	add.w	r3, r7, #16
 801bf42:	4619      	mov	r1, r3
 801bf44:	4620      	mov	r0, r4
 801bf46:	f7f3 fe57 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bf4a:	f107 0310 	add.w	r3, r7, #16
 801bf4e:	4618      	mov	r0, r3
 801bf50:	f7f3 fdd5 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bf54:	68fb      	ldr	r3, [r7, #12]
}
 801bf56:	4618      	mov	r0, r3
 801bf58:	371c      	adds	r7, #28
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	bd90      	pop	{r4, r7, pc}

0801bf5e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801bf5e:	b590      	push	{r4, r7, lr}
 801bf60:	b087      	sub	sp, #28
 801bf62:	af00      	add	r7, sp, #0
 801bf64:	60f8      	str	r0, [r7, #12]
 801bf66:	60b9      	str	r1, [r7, #8]
 801bf68:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bf6a:	68b9      	ldr	r1, [r7, #8]
 801bf6c:	68f8      	ldr	r0, [r7, #12]
 801bf6e:	f7ff fdcf 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	1d1c      	adds	r4, r3, #4
 801bf76:	f107 0310 	add.w	r3, r7, #16
 801bf7a:	6879      	ldr	r1, [r7, #4]
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	f7f4 f8a9 	bl	80100d4 <_Z10StringFromPKv>
 801bf82:	f107 0310 	add.w	r3, r7, #16
 801bf86:	4619      	mov	r1, r3
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f7f3 fe35 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bf8e:	f107 0310 	add.w	r3, r7, #16
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7f3 fdb3 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bf98:	68fb      	ldr	r3, [r7, #12]
}
 801bf9a:	4618      	mov	r0, r3
 801bf9c:	371c      	adds	r7, #28
 801bf9e:	46bd      	mov	sp, r7
 801bfa0:	bd90      	pop	{r4, r7, pc}

0801bfa2 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801bfa2:	b590      	push	{r4, r7, lr}
 801bfa4:	b087      	sub	sp, #28
 801bfa6:	af00      	add	r7, sp, #0
 801bfa8:	60f8      	str	r0, [r7, #12]
 801bfaa:	60b9      	str	r1, [r7, #8]
 801bfac:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bfae:	68b9      	ldr	r1, [r7, #8]
 801bfb0:	68f8      	ldr	r0, [r7, #12]
 801bfb2:	f7ff fdad 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	1d1c      	adds	r4, r3, #4
 801bfba:	f107 0310 	add.w	r3, r7, #16
 801bfbe:	6879      	ldr	r1, [r7, #4]
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f7f4 f887 	bl	80100d4 <_Z10StringFromPKv>
 801bfc6:	f107 0310 	add.w	r3, r7, #16
 801bfca:	4619      	mov	r1, r3
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f7f3 fe13 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801bfd2:	f107 0310 	add.w	r3, r7, #16
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	f7f3 fd91 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801bfdc:	68fb      	ldr	r3, [r7, #12]
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	371c      	adds	r7, #28
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd90      	pop	{r4, r7, pc}

0801bfe6 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801bfe6:	b590      	push	{r4, r7, lr}
 801bfe8:	b087      	sub	sp, #28
 801bfea:	af00      	add	r7, sp, #0
 801bfec:	60f8      	str	r0, [r7, #12]
 801bfee:	60b9      	str	r1, [r7, #8]
 801bff0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bff2:	68b9      	ldr	r1, [r7, #8]
 801bff4:	68f8      	ldr	r0, [r7, #12]
 801bff6:	f7ff fd8b 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	1d1c      	adds	r4, r3, #4
 801bffe:	f107 0310 	add.w	r3, r7, #16
 801c002:	6879      	ldr	r1, [r7, #4]
 801c004:	4618      	mov	r0, r3
 801c006:	f7f4 f88f 	bl	8010128 <_Z10StringFromPFvvE>
 801c00a:	f107 0310 	add.w	r3, r7, #16
 801c00e:	4619      	mov	r1, r3
 801c010:	4620      	mov	r0, r4
 801c012:	f7f3 fdf1 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c016:	f107 0310 	add.w	r3, r7, #16
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7f3 fd6f 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c020:	68fb      	ldr	r3, [r7, #12]
}
 801c022:	4618      	mov	r0, r3
 801c024:	371c      	adds	r7, #28
 801c026:	46bd      	mov	sp, r7
 801c028:	bd90      	pop	{r4, r7, pc}

0801c02a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801c02a:	b590      	push	{r4, r7, lr}
 801c02c:	b087      	sub	sp, #28
 801c02e:	af00      	add	r7, sp, #0
 801c030:	60f8      	str	r0, [r7, #12]
 801c032:	60b9      	str	r1, [r7, #8]
 801c034:	607a      	str	r2, [r7, #4]
 801c036:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801c038:	68b9      	ldr	r1, [r7, #8]
 801c03a:	68f8      	ldr	r0, [r7, #12]
 801c03c:	f7ff fd68 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	1d1c      	adds	r4, r3, #4
 801c044:	f107 0310 	add.w	r3, r7, #16
 801c048:	683a      	ldr	r2, [r7, #0]
 801c04a:	6879      	ldr	r1, [r7, #4]
 801c04c:	4618      	mov	r0, r3
 801c04e:	f7f4 fbaf 	bl	80107b0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801c052:	f107 0310 	add.w	r3, r7, #16
 801c056:	4619      	mov	r1, r3
 801c058:	4620      	mov	r0, r4
 801c05a:	f7f3 fdcd 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c05e:	f107 0310 	add.w	r3, r7, #16
 801c062:	4618      	mov	r0, r3
 801c064:	f7f3 fd4b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c068:	68fb      	ldr	r3, [r7, #12]
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	371c      	adds	r7, #28
 801c06e:	46bd      	mov	sp, r7
 801c070:	bd90      	pop	{r4, r7, pc}
	...

0801c074 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801c074:	b590      	push	{r4, r7, lr}
 801c076:	b087      	sub	sp, #28
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
 801c080:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	3304      	adds	r3, #4
 801c086:	4913      	ldr	r1, [pc, #76]	; (801c0d4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801c088:	4618      	mov	r0, r3
 801c08a:	f7f3 fdc7 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	3304      	adds	r3, #4
 801c092:	68b9      	ldr	r1, [r7, #8]
 801c094:	4618      	mov	r0, r3
 801c096:	f7f3 fdaf 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801c09a:	6879      	ldr	r1, [r7, #4]
 801c09c:	68f8      	ldr	r0, [r7, #12]
 801c09e:	f7ff fd37 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	1d1c      	adds	r4, r3, #4
 801c0a6:	f107 0310 	add.w	r3, r7, #16
 801c0aa:	6839      	ldr	r1, [r7, #0]
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	f7f4 f811 	bl	80100d4 <_Z10StringFromPKv>
 801c0b2:	f107 0310 	add.w	r3, r7, #16
 801c0b6:	4619      	mov	r1, r3
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	f7f3 fd9d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c0be:	f107 0310 	add.w	r3, r7, #16
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	f7f3 fd1b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c0c8:	68fb      	ldr	r3, [r7, #12]
}
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	371c      	adds	r7, #28
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	bd90      	pop	{r4, r7, pc}
 801c0d2:	bf00      	nop
 801c0d4:	080290f0 	.word	0x080290f0

0801c0d8 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801c0d8:	b590      	push	{r4, r7, lr}
 801c0da:	b087      	sub	sp, #28
 801c0dc:	af00      	add	r7, sp, #0
 801c0de:	60f8      	str	r0, [r7, #12]
 801c0e0:	60b9      	str	r1, [r7, #8]
 801c0e2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801c0e4:	68b9      	ldr	r1, [r7, #8]
 801c0e6:	68f8      	ldr	r0, [r7, #12]
 801c0e8:	f7ff fd12 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801c0ec:	68fb      	ldr	r3, [r7, #12]
 801c0ee:	1d1c      	adds	r4, r3, #4
 801c0f0:	f107 0310 	add.w	r3, r7, #16
 801c0f4:	6879      	ldr	r1, [r7, #4]
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7f3 ffec 	bl	80100d4 <_Z10StringFromPKv>
 801c0fc:	f107 0310 	add.w	r3, r7, #16
 801c100:	4619      	mov	r1, r3
 801c102:	4620      	mov	r0, r4
 801c104:	f7f3 fd78 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c108:	f107 0310 	add.w	r3, r7, #16
 801c10c:	4618      	mov	r0, r3
 801c10e:	f7f3 fcf6 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c112:	68fb      	ldr	r3, [r7, #12]
}
 801c114:	4618      	mov	r0, r3
 801c116:	371c      	adds	r7, #28
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd90      	pop	{r4, r7, pc}

0801c11c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801c11c:	b590      	push	{r4, r7, lr}
 801c11e:	b087      	sub	sp, #28
 801c120:	af00      	add	r7, sp, #0
 801c122:	60f8      	str	r0, [r7, #12]
 801c124:	60b9      	str	r1, [r7, #8]
 801c126:	607a      	str	r2, [r7, #4]
 801c128:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	3304      	adds	r3, #4
 801c12e:	4913      	ldr	r1, [pc, #76]	; (801c17c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801c130:	4618      	mov	r0, r3
 801c132:	f7f3 fd73 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	3304      	adds	r3, #4
 801c13a:	68b9      	ldr	r1, [r7, #8]
 801c13c:	4618      	mov	r0, r3
 801c13e:	f7f3 fd5b 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801c142:	6879      	ldr	r1, [r7, #4]
 801c144:	68f8      	ldr	r0, [r7, #12]
 801c146:	f7ff fce3 	bl	801bb10 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	1d1c      	adds	r4, r3, #4
 801c14e:	f107 0310 	add.w	r3, r7, #16
 801c152:	6839      	ldr	r1, [r7, #0]
 801c154:	4618      	mov	r0, r3
 801c156:	f7f3 ffbd 	bl	80100d4 <_Z10StringFromPKv>
 801c15a:	f107 0310 	add.w	r3, r7, #16
 801c15e:	4619      	mov	r1, r3
 801c160:	4620      	mov	r0, r4
 801c162:	f7f3 fd49 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c166:	f107 0310 	add.w	r3, r7, #16
 801c16a:	4618      	mov	r0, r3
 801c16c:	f7f3 fcc7 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c170:	68fb      	ldr	r3, [r7, #12]
}
 801c172:	4618      	mov	r0, r3
 801c174:	371c      	adds	r7, #28
 801c176:	46bd      	mov	sp, r7
 801c178:	bd90      	pop	{r4, r7, pc}
 801c17a:	bf00      	nop
 801c17c:	080290f0 	.word	0x080290f0

0801c180 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801c180:	b480      	push	{r7}
 801c182:	b083      	sub	sp, #12
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
    return false;
 801c188:	2300      	movs	r3, #0
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	370c      	adds	r7, #12
 801c18e:	46bd      	mov	sp, r7
 801c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c194:	4770      	bx	lr
	...

0801c198 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b084      	sub	sp, #16
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
 801c1a0:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801c1a2:	f107 0308 	add.w	r3, r7, #8
 801c1a6:	4909      	ldr	r1, [pc, #36]	; (801c1cc <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f7f3 f8f0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801c1ae:	f107 0308 	add.w	r3, r7, #8
 801c1b2:	4619      	mov	r1, r3
 801c1b4:	6878      	ldr	r0, [r7, #4]
 801c1b6:	f003 fe0f 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c1ba:	f107 0308 	add.w	r3, r7, #8
 801c1be:	4618      	mov	r0, r3
 801c1c0:	f7f3 fc9d 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	3710      	adds	r7, #16
 801c1c8:	46bd      	mov	sp, r7
 801c1ca:	bd80      	pop	{r7, pc}
 801c1cc:	08028fc4 	.word	0x08028fc4

0801c1d0 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801c1d0:	b480      	push	{r7}
 801c1d2:	b083      	sub	sp, #12
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	6078      	str	r0, [r7, #4]
    return 0;
 801c1d8:	2300      	movs	r3, #0
}
 801c1da:	4618      	mov	r0, r3
 801c1dc:	370c      	adds	r7, #12
 801c1de:	46bd      	mov	sp, r7
 801c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1e4:	4770      	bx	lr

0801c1e6 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801c1e6:	b480      	push	{r7}
 801c1e8:	b083      	sub	sp, #12
 801c1ea:	af00      	add	r7, sp, #0
 801c1ec:	6078      	str	r0, [r7, #4]
    return 0;
 801c1ee:	2300      	movs	r3, #0
}
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	370c      	adds	r7, #12
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fa:	4770      	bx	lr

0801c1fc <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	b083      	sub	sp, #12
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
    return 0;
 801c206:	2300      	movs	r3, #0
}
 801c208:	4618      	mov	r0, r3
 801c20a:	370c      	adds	r7, #12
 801c20c:	46bd      	mov	sp, r7
 801c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c212:	4770      	bx	lr

0801c214 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801c214:	b480      	push	{r7}
 801c216:	b083      	sub	sp, #12
 801c218:	af00      	add	r7, sp, #0
 801c21a:	6078      	str	r0, [r7, #4]
 801c21c:	6039      	str	r1, [r7, #0]
    return 0;
 801c21e:	2300      	movs	r3, #0
}
 801c220:	4618      	mov	r0, r3
 801c222:	370c      	adds	r7, #12
 801c224:	46bd      	mov	sp, r7
 801c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c22a:	4770      	bx	lr

0801c22c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801c22c:	b5b0      	push	{r4, r5, r7, lr}
 801c22e:	b084      	sub	sp, #16
 801c230:	af02      	add	r7, sp, #8
 801c232:	6078      	str	r0, [r7, #4]
 801c234:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801c236:	f7fa fc8d 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801c23a:	4604      	mov	r4, r0
 801c23c:	6823      	ldr	r3, [r4, #0]
 801c23e:	3368      	adds	r3, #104	; 0x68
 801c240:	681d      	ldr	r5, [r3, #0]
 801c242:	f7fa fc97 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c246:	4603      	mov	r3, r0
 801c248:	9300      	str	r3, [sp, #0]
 801c24a:	f240 3375 	movw	r3, #885	; 0x375
 801c24e:	4a06      	ldr	r2, [pc, #24]	; (801c268 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801c250:	4906      	ldr	r1, [pc, #24]	; (801c26c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801c252:	4620      	mov	r0, r4
 801c254:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c256:	2100      	movs	r1, #0
 801c258:	6878      	ldr	r0, [r7, #4]
 801c25a:	f7f1 f8cf 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
}
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	3708      	adds	r7, #8
 801c262:	46bd      	mov	sp, r7
 801c264:	bdb0      	pop	{r4, r5, r7, pc}
 801c266:	bf00      	nop
 801c268:	08028fdc 	.word	0x08028fdc
 801c26c:	08029024 	.word	0x08029024

0801c270 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801c270:	b5b0      	push	{r4, r5, r7, lr}
 801c272:	b084      	sub	sp, #16
 801c274:	af02      	add	r7, sp, #8
 801c276:	6078      	str	r0, [r7, #4]
 801c278:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801c27a:	f7fa fc6b 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801c27e:	4604      	mov	r4, r0
 801c280:	6823      	ldr	r3, [r4, #0]
 801c282:	3368      	adds	r3, #104	; 0x68
 801c284:	681d      	ldr	r5, [r3, #0]
 801c286:	f7fa fc75 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c28a:	4603      	mov	r3, r0
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	f240 337b 	movw	r3, #891	; 0x37b
 801c292:	4a06      	ldr	r2, [pc, #24]	; (801c2ac <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801c294:	4906      	ldr	r1, [pc, #24]	; (801c2b0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801c296:	4620      	mov	r0, r4
 801c298:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c29a:	2100      	movs	r1, #0
 801c29c:	6878      	ldr	r0, [r7, #4]
 801c29e:	f7f1 f8b9 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
}
 801c2a2:	6878      	ldr	r0, [r7, #4]
 801c2a4:	3708      	adds	r7, #8
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	bdb0      	pop	{r4, r5, r7, pc}
 801c2aa:	bf00      	nop
 801c2ac:	08028fdc 	.word	0x08028fdc
 801c2b0:	08028ff8 	.word	0x08028ff8

0801c2b4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801c2b4:	b5b0      	push	{r4, r5, r7, lr}
 801c2b6:	b086      	sub	sp, #24
 801c2b8:	af02      	add	r7, sp, #8
 801c2ba:	60f8      	str	r0, [r7, #12]
 801c2bc:	60b9      	str	r1, [r7, #8]
 801c2be:	4639      	mov	r1, r7
 801c2c0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801c2c4:	f7fa fc46 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801c2c8:	4604      	mov	r4, r0
 801c2ca:	6823      	ldr	r3, [r4, #0]
 801c2cc:	3368      	adds	r3, #104	; 0x68
 801c2ce:	681d      	ldr	r5, [r3, #0]
 801c2d0:	f7fa fc50 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	9300      	str	r3, [sp, #0]
 801c2d8:	f240 3381 	movw	r3, #897	; 0x381
 801c2dc:	4a05      	ldr	r2, [pc, #20]	; (801c2f4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801c2de:	4906      	ldr	r1, [pc, #24]	; (801c2f8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801c2e4:	2100      	movs	r1, #0
 801c2e6:	68f8      	ldr	r0, [r7, #12]
 801c2e8:	f7f1 f894 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
}
 801c2ec:	68f8      	ldr	r0, [r7, #12]
 801c2ee:	3710      	adds	r7, #16
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	bdb0      	pop	{r4, r5, r7, pc}
 801c2f4:	08028fdc 	.word	0x08028fdc
 801c2f8:	08028ff8 	.word	0x08028ff8

0801c2fc <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801c2fc:	b5b0      	push	{r4, r5, r7, lr}
 801c2fe:	b086      	sub	sp, #24
 801c300:	af02      	add	r7, sp, #8
 801c302:	60f8      	str	r0, [r7, #12]
 801c304:	60b9      	str	r1, [r7, #8]
 801c306:	4639      	mov	r1, r7
 801c308:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801c30c:	f7fa fc22 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801c310:	4604      	mov	r4, r0
 801c312:	6823      	ldr	r3, [r4, #0]
 801c314:	3368      	adds	r3, #104	; 0x68
 801c316:	681d      	ldr	r5, [r3, #0]
 801c318:	f7fa fc2c 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c31c:	4603      	mov	r3, r0
 801c31e:	9300      	str	r3, [sp, #0]
 801c320:	f240 3387 	movw	r3, #903	; 0x387
 801c324:	4a05      	ldr	r2, [pc, #20]	; (801c33c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801c326:	4906      	ldr	r1, [pc, #24]	; (801c340 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801c328:	4620      	mov	r0, r4
 801c32a:	47a8      	blx	r5
    return cpputest_longlong(0);
 801c32c:	2100      	movs	r1, #0
 801c32e:	68f8      	ldr	r0, [r7, #12]
 801c330:	f7f1 f864 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
}
 801c334:	68f8      	ldr	r0, [r7, #12]
 801c336:	3710      	adds	r7, #16
 801c338:	46bd      	mov	sp, r7
 801c33a:	bdb0      	pop	{r4, r5, r7, pc}
 801c33c:	08028fdc 	.word	0x08028fdc
 801c340:	08029024 	.word	0x08029024

0801c344 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801c344:	b480      	push	{r7}
 801c346:	b083      	sub	sp, #12
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
    return false;
 801c34c:	2300      	movs	r3, #0
}
 801c34e:	4618      	mov	r0, r3
 801c350:	370c      	adds	r7, #12
 801c352:	46bd      	mov	sp, r7
 801c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c358:	4770      	bx	lr

0801c35a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801c35a:	b480      	push	{r7}
 801c35c:	b083      	sub	sp, #12
 801c35e:	af00      	add	r7, sp, #0
 801c360:	6078      	str	r0, [r7, #4]
 801c362:	460b      	mov	r3, r1
 801c364:	70fb      	strb	r3, [r7, #3]
    return false;
 801c366:	2300      	movs	r3, #0
}
 801c368:	4618      	mov	r0, r3
 801c36a:	370c      	adds	r7, #12
 801c36c:	46bd      	mov	sp, r7
 801c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c372:	4770      	bx	lr

0801c374 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801c374:	b480      	push	{r7}
 801c376:	b083      	sub	sp, #12
 801c378:	af00      	add	r7, sp, #0
 801c37a:	6078      	str	r0, [r7, #4]
    return 0;
 801c37c:	2300      	movs	r3, #0
}
 801c37e:	4618      	mov	r0, r3
 801c380:	370c      	adds	r7, #12
 801c382:	46bd      	mov	sp, r7
 801c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c388:	4770      	bx	lr

0801c38a <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801c38a:	b480      	push	{r7}
 801c38c:	b083      	sub	sp, #12
 801c38e:	af00      	add	r7, sp, #0
 801c390:	6078      	str	r0, [r7, #4]
    return 0.0;
 801c392:	f04f 0200 	mov.w	r2, #0
 801c396:	f04f 0300 	mov.w	r3, #0
 801c39a:	ec43 2b17 	vmov	d7, r2, r3
}
 801c39e:	eeb0 0a47 	vmov.f32	s0, s14
 801c3a2:	eef0 0a67 	vmov.f32	s1, s15
 801c3a6:	370c      	adds	r7, #12
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ae:	4770      	bx	lr

0801c3b0 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b084      	sub	sp, #16
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	60f8      	str	r0, [r7, #12]
 801c3b8:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	3398      	adds	r3, #152	; 0x98
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	68f8      	ldr	r0, [r7, #12]
 801c3c6:	4798      	blx	r3
 801c3c8:	eeb0 7a40 	vmov.f32	s14, s0
 801c3cc:	eef0 7a60 	vmov.f32	s15, s1
}
 801c3d0:	eeb0 0a47 	vmov.f32	s0, s14
 801c3d4:	eef0 0a67 	vmov.f32	s1, s15
 801c3d8:	3710      	adds	r7, #16
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	bd80      	pop	{r7, pc}

0801c3de <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801c3de:	b480      	push	{r7}
 801c3e0:	b083      	sub	sp, #12
 801c3e2:	af00      	add	r7, sp, #0
 801c3e4:	6078      	str	r0, [r7, #4]
    return 0;
 801c3e6:	2300      	movs	r3, #0
}
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	370c      	adds	r7, #12
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f2:	4770      	bx	lr

0801c3f4 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801c3f4:	b480      	push	{r7}
 801c3f6:	b083      	sub	sp, #12
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801c3fc:	2300      	movs	r3, #0
}
 801c3fe:	4618      	mov	r0, r3
 801c400:	370c      	adds	r7, #12
 801c402:	46bd      	mov	sp, r7
 801c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c408:	4770      	bx	lr

0801c40a <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801c40a:	b480      	push	{r7}
 801c40c:	b083      	sub	sp, #12
 801c40e:	af00      	add	r7, sp, #0
 801c410:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801c412:	2300      	movs	r3, #0
}
 801c414:	4618      	mov	r0, r3
 801c416:	370c      	adds	r7, #12
 801c418:	46bd      	mov	sp, r7
 801c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c41e:	4770      	bx	lr

0801c420 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801c420:	b480      	push	{r7}
 801c422:	b083      	sub	sp, #12
 801c424:	af00      	add	r7, sp, #0
 801c426:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801c428:	2300      	movs	r3, #0
}
 801c42a:	4618      	mov	r0, r3
 801c42c:	370c      	adds	r7, #12
 801c42e:	46bd      	mov	sp, r7
 801c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c434:	4770      	bx	lr

0801c436 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801c436:	b580      	push	{r7, lr}
 801c438:	b082      	sub	sp, #8
 801c43a:	af00      	add	r7, sp, #0
 801c43c:	6078      	str	r0, [r7, #4]
 801c43e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	33a8      	adds	r3, #168	; 0xa8
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	6878      	ldr	r0, [r7, #4]
 801c44a:	4798      	blx	r3
 801c44c:	4603      	mov	r3, r0
}
 801c44e:	4618      	mov	r0, r3
 801c450:	3708      	adds	r7, #8
 801c452:	46bd      	mov	sp, r7
 801c454:	bd80      	pop	{r7, pc}

0801c456 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801c456:	b580      	push	{r7, lr}
 801c458:	b082      	sub	sp, #8
 801c45a:	af00      	add	r7, sp, #0
 801c45c:	6078      	str	r0, [r7, #4]
 801c45e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	33a0      	adds	r3, #160	; 0xa0
 801c466:	681b      	ldr	r3, [r3, #0]
 801c468:	6878      	ldr	r0, [r7, #4]
 801c46a:	4798      	blx	r3
 801c46c:	4603      	mov	r3, r0
}
 801c46e:	4618      	mov	r0, r3
 801c470:	3708      	adds	r7, #8
 801c472:	46bd      	mov	sp, r7
 801c474:	bd80      	pop	{r7, pc}

0801c476 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801c476:	b580      	push	{r7, lr}
 801c478:	b082      	sub	sp, #8
 801c47a:	af00      	add	r7, sp, #0
 801c47c:	6078      	str	r0, [r7, #4]
 801c47e:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	33b0      	adds	r3, #176	; 0xb0
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	6878      	ldr	r0, [r7, #4]
 801c48a:	4798      	blx	r3
 801c48c:	4603      	mov	r3, r0
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3708      	adds	r7, #8
 801c492:	46bd      	mov	sp, r7
 801c494:	bd80      	pop	{r7, pc}
	...

0801c498 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801c498:	b480      	push	{r7}
 801c49a:	b083      	sub	sp, #12
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
    return "";
 801c4a0:	4b03      	ldr	r3, [pc, #12]	; (801c4b0 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801c4a2:	4618      	mov	r0, r3
 801c4a4:	370c      	adds	r7, #12
 801c4a6:	46bd      	mov	sp, r7
 801c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ac:	4770      	bx	lr
 801c4ae:	bf00      	nop
 801c4b0:	08028fc4 	.word	0x08028fc4

0801c4b4 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
 801c4bc:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	3394      	adds	r3, #148	; 0x94
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	4798      	blx	r3
 801c4ca:	4603      	mov	r3, r0
}
 801c4cc:	4618      	mov	r0, r3
 801c4ce:	3708      	adds	r7, #8
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bd80      	pop	{r7, pc}

0801c4d4 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801c4d4:	b480      	push	{r7}
 801c4d6:	b083      	sub	sp, #12
 801c4d8:	af00      	add	r7, sp, #0
 801c4da:	6078      	str	r0, [r7, #4]
 801c4dc:	6039      	str	r1, [r7, #0]
    return 0;
 801c4de:	2300      	movs	r3, #0
}
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	370c      	adds	r7, #12
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ea:	4770      	bx	lr

0801c4ec <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b082      	sub	sp, #8
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
 801c4f4:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	3388      	adds	r3, #136	; 0x88
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	6878      	ldr	r0, [r7, #4]
 801c500:	4798      	blx	r3
 801c502:	4603      	mov	r3, r0
}
 801c504:	4618      	mov	r0, r3
 801c506:	3708      	adds	r7, #8
 801c508:	46bd      	mov	sp, r7
 801c50a:	bd80      	pop	{r7, pc}

0801c50c <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801c50c:	b590      	push	{r4, r7, lr}
 801c50e:	b085      	sub	sp, #20
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
 801c514:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	3304      	adds	r3, #4
 801c51a:	490e      	ldr	r1, [pc, #56]	; (801c554 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801c51c:	4618      	mov	r0, r3
 801c51e:	f7f3 fb7d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	1d1c      	adds	r4, r3, #4
 801c526:	f107 0308 	add.w	r3, r7, #8
 801c52a:	6839      	ldr	r1, [r7, #0]
 801c52c:	4618      	mov	r0, r3
 801c52e:	f7f3 fdd1 	bl	80100d4 <_Z10StringFromPKv>
 801c532:	f107 0308 	add.w	r3, r7, #8
 801c536:	4619      	mov	r1, r3
 801c538:	4620      	mov	r0, r4
 801c53a:	f7f3 fb5d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801c53e:	f107 0308 	add.w	r3, r7, #8
 801c542:	4618      	mov	r0, r3
 801c544:	f7f3 fadb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return *this;
 801c548:	687b      	ldr	r3, [r7, #4]
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3714      	adds	r7, #20
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd90      	pop	{r4, r7, pc}
 801c552:	bf00      	nop
 801c554:	080290f8 	.word	0x080290f8

0801c558 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801c558:	b598      	push	{r3, r4, r7, lr}
 801c55a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801c55c:	4b09      	ldr	r3, [pc, #36]	; (801c584 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	2b00      	cmp	r3, #0
 801c562:	d10b      	bne.n	801c57c <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801c564:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801c568:	4907      	ldr	r1, [pc, #28]	; (801c588 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801c56a:	200c      	movs	r0, #12
 801c56c:	f7f0 fb4c 	bl	800cc08 <_ZnwjPKci>
 801c570:	4604      	mov	r4, r0
 801c572:	4620      	mov	r0, r4
 801c574:	f7ff fa4c 	bl	801ba10 <_ZN19MockActualCallTraceC1Ev>
 801c578:	4b02      	ldr	r3, [pc, #8]	; (801c584 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c57a:	601c      	str	r4, [r3, #0]
    return *instance_;
 801c57c:	4b01      	ldr	r3, [pc, #4]	; (801c584 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c57e:	681b      	ldr	r3, [r3, #0]
}
 801c580:	4618      	mov	r0, r3
 801c582:	bd98      	pop	{r3, r4, r7, pc}
 801c584:	20001048 	.word	0x20001048
 801c588:	08028fdc 	.word	0x08028fdc

0801c58c <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	af00      	add	r7, sp, #0
    delete instance_;
 801c590:	4b06      	ldr	r3, [pc, #24]	; (801c5ac <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	2b00      	cmp	r3, #0
 801c596:	d004      	beq.n	801c5a2 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801c598:	681a      	ldr	r2, [r3, #0]
 801c59a:	3204      	adds	r2, #4
 801c59c:	6812      	ldr	r2, [r2, #0]
 801c59e:	4618      	mov	r0, r3
 801c5a0:	4790      	blx	r2
    instance_ = NULLPTR;
 801c5a2:	4b02      	ldr	r3, [pc, #8]	; (801c5ac <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	601a      	str	r2, [r3, #0]
}
 801c5a8:	bf00      	nop
 801c5aa:	bd80      	pop	{r7, pc}
 801c5ac:	20001048 	.word	0x20001048

0801c5b0 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b082      	sub	sp, #8
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	6078      	str	r0, [r7, #4]
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7fd fe9a 	bl	801a2f4 <_ZN14MockActualCallC1Ev>
 801c5c0:	4a03      	ldr	r2, [pc, #12]	; (801c5d0 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	601a      	str	r2, [r3, #0]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	3708      	adds	r7, #8
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}
 801c5d0:	0802c22c 	.word	0x0802c22c

0801c5d4 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	af00      	add	r7, sp, #0
 801c5d8:	4801      	ldr	r0, [pc, #4]	; (801c5e0 <__tcf_0+0xc>)
 801c5da:	f000 f831 	bl	801c640 <_ZN21MockIgnoredActualCallD1Ev>
 801c5de:	bd80      	pop	{r7, pc}
 801c5e0:	2000104c 	.word	0x2000104c

0801c5e4 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801c5e8:	4b12      	ldr	r3, [pc, #72]	; (801c634 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c5ea:	781b      	ldrb	r3, [r3, #0]
 801c5ec:	f3bf 8f5b 	dmb	ish
 801c5f0:	b2db      	uxtb	r3, r3
 801c5f2:	f003 0301 	and.w	r3, r3, #1
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	bf0c      	ite	eq
 801c5fa:	2301      	moveq	r3, #1
 801c5fc:	2300      	movne	r3, #0
 801c5fe:	b2db      	uxtb	r3, r3
 801c600:	2b00      	cmp	r3, #0
 801c602:	d013      	beq.n	801c62c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801c604:	480b      	ldr	r0, [pc, #44]	; (801c634 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c606:	f005 fd83 	bl	8022110 <__cxa_guard_acquire>
 801c60a:	4603      	mov	r3, r0
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	bf14      	ite	ne
 801c610:	2301      	movne	r3, #1
 801c612:	2300      	moveq	r3, #0
 801c614:	b2db      	uxtb	r3, r3
 801c616:	2b00      	cmp	r3, #0
 801c618:	d008      	beq.n	801c62c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801c61a:	4807      	ldr	r0, [pc, #28]	; (801c638 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801c61c:	f7ff ffc8 	bl	801c5b0 <_ZN21MockIgnoredActualCallC1Ev>
 801c620:	4804      	ldr	r0, [pc, #16]	; (801c634 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c622:	f005 fd81 	bl	8022128 <__cxa_guard_release>
 801c626:	4805      	ldr	r0, [pc, #20]	; (801c63c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801c628:	f005 fda5 	bl	8022176 <atexit>
    return call;
 801c62c:	4b02      	ldr	r3, [pc, #8]	; (801c638 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801c62e:	4618      	mov	r0, r3
 801c630:	bd80      	pop	{r7, pc}
 801c632:	bf00      	nop
 801c634:	20001050 	.word	0x20001050
 801c638:	2000104c 	.word	0x2000104c
 801c63c:	0801c5d5 	.word	0x0801c5d5

0801c640 <_ZN21MockIgnoredActualCallD1Ev>:
 801c640:	b580      	push	{r7, lr}
 801c642:	b082      	sub	sp, #8
 801c644:	af00      	add	r7, sp, #0
 801c646:	6078      	str	r0, [r7, #4]
 801c648:	4a05      	ldr	r2, [pc, #20]	; (801c660 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	601a      	str	r2, [r3, #0]
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	4618      	mov	r0, r3
 801c652:	f7fd fe5f 	bl	801a314 <_ZN14MockActualCallD1Ev>
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	4618      	mov	r0, r3
 801c65a:	3708      	adds	r7, #8
 801c65c:	46bd      	mov	sp, r7
 801c65e:	bd80      	pop	{r7, pc}
 801c660:	0802c22c 	.word	0x0802c22c

0801c664 <_ZN21MockIgnoredActualCallD0Ev>:
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
 801c66c:	6878      	ldr	r0, [r7, #4]
 801c66e:	f7ff ffe7 	bl	801c640 <_ZN21MockIgnoredActualCallD1Ev>
 801c672:	2104      	movs	r1, #4
 801c674:	6878      	ldr	r0, [r7, #4]
 801c676:	f7f0 fadb 	bl	800cc30 <_ZdlPvj>
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	4618      	mov	r0, r3
 801c67e:	3708      	adds	r7, #8
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}

0801c684 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801c684:	b580      	push	{r7, lr}
 801c686:	b082      	sub	sp, #8
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
 801c68c:	4a05      	ldr	r2, [pc, #20]	; (801c6a4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	601a      	str	r2, [r3, #0]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	4618      	mov	r0, r3
 801c696:	f7f0 fefd 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	4618      	mov	r0, r3
 801c69e:	3708      	adds	r7, #8
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	bd80      	pop	{r7, pc}
 801c6a4:	0802c124 	.word	0x0802c124

0801c6a8 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	b082      	sub	sp, #8
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7ff ffe7 	bl	801c684 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801c6b6:	2134      	movs	r1, #52	; 0x34
 801c6b8:	6878      	ldr	r0, [r7, #4]
 801c6ba:	f7f0 fab9 	bl	800cc30 <_ZdlPvj>
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	4618      	mov	r0, r3
 801c6c2:	3708      	adds	r7, #8
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	bd80      	pop	{r7, pc}

0801c6c8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801c6c8:	b580      	push	{r7, lr}
 801c6ca:	b082      	sub	sp, #8
 801c6cc:	af00      	add	r7, sp, #0
 801c6ce:	6078      	str	r0, [r7, #4]
 801c6d0:	4a05      	ldr	r2, [pc, #20]	; (801c6e8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	601a      	str	r2, [r3, #0]
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	4618      	mov	r0, r3
 801c6da:	f7f0 fedb 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	3708      	adds	r7, #8
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}
 801c6e8:	0802c200 	.word	0x0802c200

0801c6ec <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	b082      	sub	sp, #8
 801c6f0:	af00      	add	r7, sp, #0
 801c6f2:	6078      	str	r0, [r7, #4]
 801c6f4:	6878      	ldr	r0, [r7, #4]
 801c6f6:	f7ff ffe7 	bl	801c6c8 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801c6fa:	2134      	movs	r1, #52	; 0x34
 801c6fc:	6878      	ldr	r0, [r7, #4]
 801c6fe:	f7f0 fa97 	bl	800cc30 <_ZdlPvj>
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	4618      	mov	r0, r3
 801c706:	3708      	adds	r7, #8
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}

0801c70c <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b082      	sub	sp, #8
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
 801c714:	4a05      	ldr	r2, [pc, #20]	; (801c72c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	601a      	str	r2, [r3, #0]
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f0 feb9 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	4618      	mov	r0, r3
 801c726:	3708      	adds	r7, #8
 801c728:	46bd      	mov	sp, r7
 801c72a:	bd80      	pop	{r7, pc}
 801c72c:	0802c1d4 	.word	0x0802c1d4

0801c730 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801c730:	b580      	push	{r7, lr}
 801c732:	b082      	sub	sp, #8
 801c734:	af00      	add	r7, sp, #0
 801c736:	6078      	str	r0, [r7, #4]
 801c738:	6878      	ldr	r0, [r7, #4]
 801c73a:	f7ff ffe7 	bl	801c70c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801c73e:	2134      	movs	r1, #52	; 0x34
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7f0 fa75 	bl	800cc30 <_ZdlPvj>
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	4618      	mov	r0, r3
 801c74a:	3708      	adds	r7, #8
 801c74c:	46bd      	mov	sp, r7
 801c74e:	bd80      	pop	{r7, pc}

0801c750 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801c750:	b580      	push	{r7, lr}
 801c752:	b082      	sub	sp, #8
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
 801c758:	4a05      	ldr	r2, [pc, #20]	; (801c770 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	601a      	str	r2, [r3, #0]
 801c75e:	687b      	ldr	r3, [r7, #4]
 801c760:	4618      	mov	r0, r3
 801c762:	f7f0 fe97 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	4618      	mov	r0, r3
 801c76a:	3708      	adds	r7, #8
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}
 801c770:	0802c1a8 	.word	0x0802c1a8

0801c774 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801c774:	b580      	push	{r7, lr}
 801c776:	b082      	sub	sp, #8
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
 801c77c:	6878      	ldr	r0, [r7, #4]
 801c77e:	f7ff ffe7 	bl	801c750 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801c782:	2134      	movs	r1, #52	; 0x34
 801c784:	6878      	ldr	r0, [r7, #4]
 801c786:	f7f0 fa53 	bl	800cc30 <_ZdlPvj>
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	4618      	mov	r0, r3
 801c78e:	3708      	adds	r7, #8
 801c790:	46bd      	mov	sp, r7
 801c792:	bd80      	pop	{r7, pc}

0801c794 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801c794:	b580      	push	{r7, lr}
 801c796:	b082      	sub	sp, #8
 801c798:	af00      	add	r7, sp, #0
 801c79a:	6078      	str	r0, [r7, #4]
 801c79c:	4a05      	ldr	r2, [pc, #20]	; (801c7b4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	601a      	str	r2, [r3, #0]
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7f0 fe75 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	4618      	mov	r0, r3
 801c7ae:	3708      	adds	r7, #8
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}
 801c7b4:	0802c150 	.word	0x0802c150

0801c7b8 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801c7b8:	b580      	push	{r7, lr}
 801c7ba:	b082      	sub	sp, #8
 801c7bc:	af00      	add	r7, sp, #0
 801c7be:	6078      	str	r0, [r7, #4]
 801c7c0:	6878      	ldr	r0, [r7, #4]
 801c7c2:	f7ff ffe7 	bl	801c794 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801c7c6:	2134      	movs	r1, #52	; 0x34
 801c7c8:	6878      	ldr	r0, [r7, #4]
 801c7ca:	f7f0 fa31 	bl	800cc30 <_ZdlPvj>
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	3708      	adds	r7, #8
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	bd80      	pop	{r7, pc}

0801c7d8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b082      	sub	sp, #8
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	6078      	str	r0, [r7, #4]
 801c7e0:	4a05      	ldr	r2, [pc, #20]	; (801c7f8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	601a      	str	r2, [r3, #0]
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	f7f0 fe53 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	4618      	mov	r0, r3
 801c7f2:	3708      	adds	r7, #8
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	bd80      	pop	{r7, pc}
 801c7f8:	0802c17c 	.word	0x0802c17c

0801c7fc <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b082      	sub	sp, #8
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
 801c804:	6878      	ldr	r0, [r7, #4]
 801c806:	f7ff ffe7 	bl	801c7d8 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801c80a:	2134      	movs	r1, #52	; 0x34
 801c80c:	6878      	ldr	r0, [r7, #4]
 801c80e:	f7f0 fa0f 	bl	800cc30 <_ZdlPvj>
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	4618      	mov	r0, r3
 801c816:	3708      	adds	r7, #8
 801c818:	46bd      	mov	sp, r7
 801c81a:	bd80      	pop	{r7, pc}

0801c81c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b082      	sub	sp, #8
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
 801c824:	4a05      	ldr	r2, [pc, #20]	; (801c83c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	601a      	str	r2, [r3, #0]
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	4618      	mov	r0, r3
 801c82e:	f7f0 fe31 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	4618      	mov	r0, r3
 801c836:	3708      	adds	r7, #8
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}
 801c83c:	0802c0cc 	.word	0x0802c0cc

0801c840 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
 801c848:	6878      	ldr	r0, [r7, #4]
 801c84a:	f7ff ffe7 	bl	801c81c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801c84e:	2134      	movs	r1, #52	; 0x34
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f7f0 f9ed 	bl	800cc30 <_ZdlPvj>
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	4618      	mov	r0, r3
 801c85a:	3708      	adds	r7, #8
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}

0801c860 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801c860:	b580      	push	{r7, lr}
 801c862:	b082      	sub	sp, #8
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
 801c868:	4a05      	ldr	r2, [pc, #20]	; (801c880 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	601a      	str	r2, [r3, #0]
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	4618      	mov	r0, r3
 801c872:	f7f0 fe0f 	bl	800d494 <_ZN11MockFailureD1Ev>
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	4618      	mov	r0, r3
 801c87a:	3708      	adds	r7, #8
 801c87c:	46bd      	mov	sp, r7
 801c87e:	bd80      	pop	{r7, pc}
 801c880:	0802c0f8 	.word	0x0802c0f8

0801c884 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801c884:	b580      	push	{r7, lr}
 801c886:	b082      	sub	sp, #8
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
 801c88c:	6878      	ldr	r0, [r7, #4]
 801c88e:	f7ff ffe7 	bl	801c860 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801c892:	2134      	movs	r1, #52	; 0x34
 801c894:	6878      	ldr	r0, [r7, #4]
 801c896:	f7f0 f9cb 	bl	800cc30 <_ZdlPvj>
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	4618      	mov	r0, r3
 801c89e:	3708      	adds	r7, #8
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	bd80      	pop	{r7, pc}

0801c8a4 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b082      	sub	sp, #8
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
 801c8ac:	6039      	str	r1, [r7, #0]
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	3310      	adds	r3, #16
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	683a      	ldr	r2, [r7, #0]
 801c8b8:	6839      	ldr	r1, [r7, #0]
 801c8ba:	6878      	ldr	r0, [r7, #4]
 801c8bc:	4798      	blx	r3
 801c8be:	4603      	mov	r3, r0
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	3708      	adds	r7, #8
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}

0801c8c8 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801c8c8:	b480      	push	{r7}
 801c8ca:	b083      	sub	sp, #12
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
 801c8d0:	6039      	str	r1, [r7, #0]
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	370c      	adds	r7, #12
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8de:	4770      	bx	lr

0801c8e0 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801c8e0:	b480      	push	{r7}
 801c8e2:	b083      	sub	sp, #12
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
 801c8e8:	6039      	str	r1, [r7, #0]
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	370c      	adds	r7, #12
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8f6:	4770      	bx	lr

0801c8f8 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801c8f8:	b480      	push	{r7}
 801c8fa:	b085      	sub	sp, #20
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	60f8      	str	r0, [r7, #12]
 801c900:	60b9      	str	r1, [r7, #8]
 801c902:	607a      	str	r2, [r7, #4]
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	4618      	mov	r0, r3
 801c908:	3714      	adds	r7, #20
 801c90a:	46bd      	mov	sp, r7
 801c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c910:	4770      	bx	lr

0801c912 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801c912:	b480      	push	{r7}
 801c914:	b085      	sub	sp, #20
 801c916:	af00      	add	r7, sp, #0
 801c918:	60f8      	str	r0, [r7, #12]
 801c91a:	60b9      	str	r1, [r7, #8]
 801c91c:	4613      	mov	r3, r2
 801c91e:	71fb      	strb	r3, [r7, #7]
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	4618      	mov	r0, r3
 801c924:	3714      	adds	r7, #20
 801c926:	46bd      	mov	sp, r7
 801c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c92c:	4770      	bx	lr

0801c92e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801c92e:	b480      	push	{r7}
 801c930:	b085      	sub	sp, #20
 801c932:	af00      	add	r7, sp, #0
 801c934:	60f8      	str	r0, [r7, #12]
 801c936:	60b9      	str	r1, [r7, #8]
 801c938:	607a      	str	r2, [r7, #4]
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	4618      	mov	r0, r3
 801c93e:	3714      	adds	r7, #20
 801c940:	46bd      	mov	sp, r7
 801c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c946:	4770      	bx	lr

0801c948 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801c948:	b480      	push	{r7}
 801c94a:	b085      	sub	sp, #20
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	60f8      	str	r0, [r7, #12]
 801c950:	60b9      	str	r1, [r7, #8]
 801c952:	607a      	str	r2, [r7, #4]
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	4618      	mov	r0, r3
 801c958:	3714      	adds	r7, #20
 801c95a:	46bd      	mov	sp, r7
 801c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c960:	4770      	bx	lr

0801c962 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801c962:	b480      	push	{r7}
 801c964:	b085      	sub	sp, #20
 801c966:	af00      	add	r7, sp, #0
 801c968:	60f8      	str	r0, [r7, #12]
 801c96a:	60b9      	str	r1, [r7, #8]
 801c96c:	607a      	str	r2, [r7, #4]
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	4618      	mov	r0, r3
 801c972:	3714      	adds	r7, #20
 801c974:	46bd      	mov	sp, r7
 801c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c97a:	4770      	bx	lr

0801c97c <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801c97c:	b480      	push	{r7}
 801c97e:	b085      	sub	sp, #20
 801c980:	af00      	add	r7, sp, #0
 801c982:	60f8      	str	r0, [r7, #12]
 801c984:	60b9      	str	r1, [r7, #8]
 801c986:	607a      	str	r2, [r7, #4]
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	4618      	mov	r0, r3
 801c98c:	3714      	adds	r7, #20
 801c98e:	46bd      	mov	sp, r7
 801c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c994:	4770      	bx	lr

0801c996 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801c996:	b480      	push	{r7}
 801c998:	b085      	sub	sp, #20
 801c99a:	af00      	add	r7, sp, #0
 801c99c:	60f8      	str	r0, [r7, #12]
 801c99e:	60b9      	str	r1, [r7, #8]
 801c9a0:	4639      	mov	r1, r7
 801c9a2:	e881 000c 	stmia.w	r1, {r2, r3}
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	3714      	adds	r7, #20
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9b2:	4770      	bx	lr

0801c9b4 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801c9b4:	b480      	push	{r7}
 801c9b6:	b085      	sub	sp, #20
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	60f8      	str	r0, [r7, #12]
 801c9bc:	60b9      	str	r1, [r7, #8]
 801c9be:	4639      	mov	r1, r7
 801c9c0:	e881 000c 	stmia.w	r1, {r2, r3}
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	3714      	adds	r7, #20
 801c9ca:	46bd      	mov	sp, r7
 801c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9d0:	4770      	bx	lr

0801c9d2 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801c9d2:	b480      	push	{r7}
 801c9d4:	b085      	sub	sp, #20
 801c9d6:	af00      	add	r7, sp, #0
 801c9d8:	60f8      	str	r0, [r7, #12]
 801c9da:	60b9      	str	r1, [r7, #8]
 801c9dc:	ed87 0b00 	vstr	d0, [r7]
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	4618      	mov	r0, r3
 801c9e4:	3714      	adds	r7, #20
 801c9e6:	46bd      	mov	sp, r7
 801c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ec:	4770      	bx	lr

0801c9ee <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801c9ee:	b480      	push	{r7}
 801c9f0:	b087      	sub	sp, #28
 801c9f2:	af00      	add	r7, sp, #0
 801c9f4:	6178      	str	r0, [r7, #20]
 801c9f6:	6139      	str	r1, [r7, #16]
 801c9f8:	ed87 0b02 	vstr	d0, [r7, #8]
 801c9fc:	ed87 1b00 	vstr	d1, [r7]
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	4618      	mov	r0, r3
 801ca04:	371c      	adds	r7, #28
 801ca06:	46bd      	mov	sp, r7
 801ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca0c:	4770      	bx	lr

0801ca0e <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801ca0e:	b480      	push	{r7}
 801ca10:	b085      	sub	sp, #20
 801ca12:	af00      	add	r7, sp, #0
 801ca14:	60f8      	str	r0, [r7, #12]
 801ca16:	60b9      	str	r1, [r7, #8]
 801ca18:	607a      	str	r2, [r7, #4]
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	3714      	adds	r7, #20
 801ca20:	46bd      	mov	sp, r7
 801ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca26:	4770      	bx	lr

0801ca28 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801ca28:	b480      	push	{r7}
 801ca2a:	b085      	sub	sp, #20
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	60f8      	str	r0, [r7, #12]
 801ca30:	60b9      	str	r1, [r7, #8]
 801ca32:	607a      	str	r2, [r7, #4]
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	4618      	mov	r0, r3
 801ca38:	3714      	adds	r7, #20
 801ca3a:	46bd      	mov	sp, r7
 801ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca40:	4770      	bx	lr

0801ca42 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801ca42:	b480      	push	{r7}
 801ca44:	b085      	sub	sp, #20
 801ca46:	af00      	add	r7, sp, #0
 801ca48:	60f8      	str	r0, [r7, #12]
 801ca4a:	60b9      	str	r1, [r7, #8]
 801ca4c:	607a      	str	r2, [r7, #4]
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	4618      	mov	r0, r3
 801ca52:	3714      	adds	r7, #20
 801ca54:	46bd      	mov	sp, r7
 801ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca5a:	4770      	bx	lr

0801ca5c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801ca5c:	b480      	push	{r7}
 801ca5e:	b085      	sub	sp, #20
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	60f8      	str	r0, [r7, #12]
 801ca64:	60b9      	str	r1, [r7, #8]
 801ca66:	607a      	str	r2, [r7, #4]
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	3714      	adds	r7, #20
 801ca6e:	46bd      	mov	sp, r7
 801ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca74:	4770      	bx	lr

0801ca76 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801ca76:	b480      	push	{r7}
 801ca78:	b085      	sub	sp, #20
 801ca7a:	af00      	add	r7, sp, #0
 801ca7c:	60f8      	str	r0, [r7, #12]
 801ca7e:	60b9      	str	r1, [r7, #8]
 801ca80:	607a      	str	r2, [r7, #4]
 801ca82:	603b      	str	r3, [r7, #0]
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	4618      	mov	r0, r3
 801ca88:	3714      	adds	r7, #20
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca90:	4770      	bx	lr

0801ca92 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801ca92:	b480      	push	{r7}
 801ca94:	b085      	sub	sp, #20
 801ca96:	af00      	add	r7, sp, #0
 801ca98:	60f8      	str	r0, [r7, #12]
 801ca9a:	60b9      	str	r1, [r7, #8]
 801ca9c:	607a      	str	r2, [r7, #4]
 801ca9e:	603b      	str	r3, [r7, #0]
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	4618      	mov	r0, r3
 801caa4:	3714      	adds	r7, #20
 801caa6:	46bd      	mov	sp, r7
 801caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caac:	4770      	bx	lr

0801caae <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801caae:	b480      	push	{r7}
 801cab0:	b085      	sub	sp, #20
 801cab2:	af00      	add	r7, sp, #0
 801cab4:	60f8      	str	r0, [r7, #12]
 801cab6:	60b9      	str	r1, [r7, #8]
 801cab8:	607a      	str	r2, [r7, #4]
 801caba:	603b      	str	r3, [r7, #0]
 801cabc:	68fb      	ldr	r3, [r7, #12]
 801cabe:	4618      	mov	r0, r3
 801cac0:	3714      	adds	r7, #20
 801cac2:	46bd      	mov	sp, r7
 801cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cac8:	4770      	bx	lr

0801caca <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801caca:	b480      	push	{r7}
 801cacc:	b085      	sub	sp, #20
 801cace:	af00      	add	r7, sp, #0
 801cad0:	60f8      	str	r0, [r7, #12]
 801cad2:	60b9      	str	r1, [r7, #8]
 801cad4:	607a      	str	r2, [r7, #4]
 801cad6:	603b      	str	r3, [r7, #0]
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	4618      	mov	r0, r3
 801cadc:	3714      	adds	r7, #20
 801cade:	46bd      	mov	sp, r7
 801cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cae4:	4770      	bx	lr

0801cae6 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801cae6:	b480      	push	{r7}
 801cae8:	b083      	sub	sp, #12
 801caea:	af00      	add	r7, sp, #0
 801caec:	6078      	str	r0, [r7, #4]
 801caee:	6039      	str	r1, [r7, #0]
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	4618      	mov	r0, r3
 801caf4:	370c      	adds	r7, #12
 801caf6:	46bd      	mov	sp, r7
 801caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cafc:	4770      	bx	lr

0801cafe <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801cafe:	b480      	push	{r7}
 801cb00:	b083      	sub	sp, #12
 801cb02:	af00      	add	r7, sp, #0
 801cb04:	6078      	str	r0, [r7, #4]
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	4618      	mov	r0, r3
 801cb0a:	370c      	adds	r7, #12
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb12:	4770      	bx	lr

0801cb14 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801cb14:	b480      	push	{r7}
 801cb16:	b083      	sub	sp, #12
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	6078      	str	r0, [r7, #4]
 801cb1c:	460b      	mov	r3, r1
 801cb1e:	70fb      	strb	r3, [r7, #3]
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	4618      	mov	r0, r3
 801cb24:	370c      	adds	r7, #12
 801cb26:	46bd      	mov	sp, r7
 801cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2c:	4770      	bx	lr

0801cb2e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801cb2e:	b480      	push	{r7}
 801cb30:	b083      	sub	sp, #12
 801cb32:	af00      	add	r7, sp, #0
 801cb34:	6078      	str	r0, [r7, #4]
 801cb36:	6039      	str	r1, [r7, #0]
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	370c      	adds	r7, #12
 801cb3e:	46bd      	mov	sp, r7
 801cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb44:	4770      	bx	lr

0801cb46 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801cb46:	b480      	push	{r7}
 801cb48:	b083      	sub	sp, #12
 801cb4a:	af00      	add	r7, sp, #0
 801cb4c:	6078      	str	r0, [r7, #4]
 801cb4e:	6039      	str	r1, [r7, #0]
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	4618      	mov	r0, r3
 801cb54:	370c      	adds	r7, #12
 801cb56:	46bd      	mov	sp, r7
 801cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb5c:	4770      	bx	lr

0801cb5e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801cb5e:	b480      	push	{r7}
 801cb60:	b083      	sub	sp, #12
 801cb62:	af00      	add	r7, sp, #0
 801cb64:	6078      	str	r0, [r7, #4]
 801cb66:	6039      	str	r1, [r7, #0]
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	370c      	adds	r7, #12
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb74:	4770      	bx	lr

0801cb76 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801cb76:	b480      	push	{r7}
 801cb78:	b083      	sub	sp, #12
 801cb7a:	af00      	add	r7, sp, #0
 801cb7c:	6078      	str	r0, [r7, #4]
 801cb7e:	6039      	str	r1, [r7, #0]
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	4618      	mov	r0, r3
 801cb84:	370c      	adds	r7, #12
 801cb86:	46bd      	mov	sp, r7
 801cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8c:	4770      	bx	lr

0801cb8e <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801cb8e:	b480      	push	{r7}
 801cb90:	b085      	sub	sp, #20
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	60f8      	str	r0, [r7, #12]
 801cb96:	1d3b      	adds	r3, r7, #4
 801cb98:	e883 0006 	stmia.w	r3, {r1, r2}
 801cb9c:	68fb      	ldr	r3, [r7, #12]
 801cb9e:	4618      	mov	r0, r3
 801cba0:	3714      	adds	r7, #20
 801cba2:	46bd      	mov	sp, r7
 801cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba8:	4770      	bx	lr

0801cbaa <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801cbaa:	b480      	push	{r7}
 801cbac:	b085      	sub	sp, #20
 801cbae:	af00      	add	r7, sp, #0
 801cbb0:	60f8      	str	r0, [r7, #12]
 801cbb2:	1d3b      	adds	r3, r7, #4
 801cbb4:	e883 0006 	stmia.w	r3, {r1, r2}
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	4618      	mov	r0, r3
 801cbbc:	3714      	adds	r7, #20
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc4:	4770      	bx	lr

0801cbc6 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801cbc6:	b480      	push	{r7}
 801cbc8:	b085      	sub	sp, #20
 801cbca:	af00      	add	r7, sp, #0
 801cbcc:	60f8      	str	r0, [r7, #12]
 801cbce:	ed87 0b00 	vstr	d0, [r7]
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	3714      	adds	r7, #20
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbde:	4770      	bx	lr

0801cbe0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801cbe0:	b480      	push	{r7}
 801cbe2:	b083      	sub	sp, #12
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]
 801cbe8:	6039      	str	r1, [r7, #0]
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	4618      	mov	r0, r3
 801cbee:	370c      	adds	r7, #12
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbf6:	4770      	bx	lr

0801cbf8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801cbf8:	b480      	push	{r7}
 801cbfa:	b083      	sub	sp, #12
 801cbfc:	af00      	add	r7, sp, #0
 801cbfe:	6078      	str	r0, [r7, #4]
 801cc00:	6039      	str	r1, [r7, #0]
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	4618      	mov	r0, r3
 801cc06:	370c      	adds	r7, #12
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc0e:	4770      	bx	lr

0801cc10 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801cc10:	b480      	push	{r7}
 801cc12:	b083      	sub	sp, #12
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
 801cc18:	6039      	str	r1, [r7, #0]
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	370c      	adds	r7, #12
 801cc20:	46bd      	mov	sp, r7
 801cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc26:	4770      	bx	lr

0801cc28 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801cc28:	b480      	push	{r7}
 801cc2a:	b083      	sub	sp, #12
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
 801cc30:	6039      	str	r1, [r7, #0]
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	4618      	mov	r0, r3
 801cc36:	370c      	adds	r7, #12
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3e:	4770      	bx	lr

0801cc40 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801cc40:	b480      	push	{r7}
 801cc42:	b083      	sub	sp, #12
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	6078      	str	r0, [r7, #4]
 801cc48:	6039      	str	r1, [r7, #0]
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	370c      	adds	r7, #12
 801cc50:	46bd      	mov	sp, r7
 801cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc56:	4770      	bx	lr

0801cc58 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801cc58:	b480      	push	{r7}
 801cc5a:	b083      	sub	sp, #12
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	4a04      	ldr	r2, [pc, #16]	; (801cc74 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	601a      	str	r2, [r3, #0]
{
}
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	4618      	mov	r0, r3
 801cc6a:	370c      	adds	r7, #12
 801cc6c:	46bd      	mov	sp, r7
 801cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc72:	4770      	bx	lr
 801cc74:	0802c7d0 	.word	0x0802c7d0

0801cc78 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801cc78:	b480      	push	{r7}
 801cc7a:	b083      	sub	sp, #12
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
 801cc80:	4a04      	ldr	r2, [pc, #16]	; (801cc94 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	601a      	str	r2, [r3, #0]
{
}
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	4618      	mov	r0, r3
 801cc8a:	370c      	adds	r7, #12
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc92:	4770      	bx	lr
 801cc94:	0802c7d0 	.word	0x0802c7d0

0801cc98 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b082      	sub	sp, #8
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]
 801cca0:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	3358      	adds	r3, #88	; 0x58
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	687a      	ldr	r2, [r7, #4]
 801ccac:	6839      	ldr	r1, [r7, #0]
 801ccae:	4610      	mov	r0, r2
 801ccb0:	4798      	blx	r3
}
 801ccb2:	6878      	ldr	r0, [r7, #4]
 801ccb4:	3708      	adds	r7, #8
 801ccb6:	46bd      	mov	sp, r7
 801ccb8:	bd80      	pop	{r7, pc}

0801ccba <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801ccba:	b580      	push	{r7, lr}
 801ccbc:	b082      	sub	sp, #8
 801ccbe:	af00      	add	r7, sp, #0
 801ccc0:	6078      	str	r0, [r7, #4]
 801ccc2:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	3304      	adds	r3, #4
 801ccc8:	6839      	ldr	r1, [r7, #0]
 801ccca:	4618      	mov	r0, r3
 801cccc:	f7f2 fbcb 	bl	800f466 <_ZN12SimpleStringaSERKS_>
}
 801ccd0:	bf00      	nop
 801ccd2:	3708      	adds	r7, #8
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}

0801ccd8 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801ccd8:	b580      	push	{r7, lr}
 801ccda:	b082      	sub	sp, #8
 801ccdc:	af00      	add	r7, sp, #0
 801ccde:	6078      	str	r0, [r7, #4]
 801cce0:	6039      	str	r1, [r7, #0]
    return functionName_;
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	3304      	adds	r3, #4
 801cce6:	4619      	mov	r1, r3
 801cce8:	6878      	ldr	r0, [r7, #4]
 801ccea:	f7f2 fba4 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 801ccee:	6878      	ldr	r0, [r7, #4]
 801ccf0:	3708      	adds	r7, #8
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	bd80      	pop	{r7, pc}
	...

0801ccf8 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801ccf8:	b590      	push	{r4, r7, lr}
 801ccfa:	b085      	sub	sp, #20
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
 801cd00:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	4618      	mov	r0, r3
 801cd06:	f7ff ffa7 	bl	801cc58 <_ZN16MockExpectedCallC1Ev>
 801cd0a:	4a2c      	ldr	r2, [pc, #176]	; (801cdbc <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	601a      	str	r2, [r3, #0]
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	3304      	adds	r3, #4
 801cd14:	492a      	ldr	r1, [pc, #168]	; (801cdc0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801cd16:	4618      	mov	r0, r3
 801cd18:	f7f2 fb39 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	2200      	movs	r2, #0
 801cd20:	731a      	strb	r2, [r3, #12]
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2200      	movs	r2, #0
 801cd26:	735a      	strb	r2, [r3, #13]
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	611a      	str	r2, [r3, #16]
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	2200      	movs	r2, #0
 801cd32:	615a      	str	r2, [r3, #20]
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2200      	movs	r2, #0
 801cd38:	761a      	strb	r2, [r3, #24]
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801cd40:	f107 0308 	add.w	r3, r7, #8
 801cd44:	491e      	ldr	r1, [pc, #120]	; (801cdc0 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801cd46:	4618      	mov	r0, r3
 801cd48:	f7f2 fb21 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801cd4c:	f107 0308 	add.w	r3, r7, #8
 801cd50:	4619      	mov	r1, r3
 801cd52:	4620      	mov	r0, r4
 801cd54:	f003 f840 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801cd58:	f107 0308 	add.w	r3, r7, #8
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7f2 fece 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	2200      	movs	r2, #0
 801cd66:	661a      	str	r2, [r3, #96]	; 0x60
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2201      	movs	r2, #1
 801cd74:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	669a      	str	r2, [r3, #104]	; 0x68
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	683a      	ldr	r2, [r7, #0]
 801cd82:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801cd84:	2246      	movs	r2, #70	; 0x46
 801cd86:	490f      	ldr	r1, [pc, #60]	; (801cdc4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801cd88:	2004      	movs	r0, #4
 801cd8a:	f7ef ff3d 	bl	800cc08 <_ZnwjPKci>
 801cd8e:	4604      	mov	r4, r0
 801cd90:	4620      	mov	r0, r4
 801cd92:	f004 ff36 	bl	8021c02 <_ZN18MockNamedValueListC1Ev>
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801cd9a:	2247      	movs	r2, #71	; 0x47
 801cd9c:	4909      	ldr	r1, [pc, #36]	; (801cdc4 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801cd9e:	2004      	movs	r0, #4
 801cda0:	f7ef ff32 	bl	800cc08 <_ZnwjPKci>
 801cda4:	4604      	mov	r4, r0
 801cda6:	4620      	mov	r0, r4
 801cda8:	f004 ff2b 	bl	8021c02 <_ZN18MockNamedValueListC1Ev>
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	621c      	str	r4, [r3, #32]
}
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	3714      	adds	r7, #20
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	bd90      	pop	{r4, r7, pc}
 801cdba:	bf00      	nop
 801cdbc:	0802c614 	.word	0x0802c614
 801cdc0:	08029104 	.word	0x08029104
 801cdc4:	08029108 	.word	0x08029108

0801cdc8 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801cdc8:	b580      	push	{r7, lr}
 801cdca:	b082      	sub	sp, #8
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	6078      	str	r0, [r7, #4]
 801cdd0:	4a17      	ldr	r2, [pc, #92]	; (801ce30 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	69db      	ldr	r3, [r3, #28]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f004 ff1f 	bl	8021c1e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	69db      	ldr	r3, [r3, #28]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d003      	beq.n	801cdf0 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801cde8:	2104      	movs	r1, #4
 801cdea:	4618      	mov	r0, r3
 801cdec:	f7ef ff20 	bl	800cc30 <_ZdlPvj>
    outputParameters_->clear();
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	6a1b      	ldr	r3, [r3, #32]
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	f004 ff12 	bl	8021c1e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	6a1b      	ldr	r3, [r3, #32]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d003      	beq.n	801ce0a <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801ce02:	2104      	movs	r1, #4
 801ce04:	4618      	mov	r0, r3
 801ce06:	f7ef ff13 	bl	800cc30 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	3328      	adds	r3, #40	; 0x28
 801ce0e:	4618      	mov	r0, r3
 801ce10:	f003 f80c 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	3304      	adds	r3, #4
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7f2 fe70 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	4618      	mov	r0, r3
 801ce22:	f7ff ff29 	bl	801cc78 <_ZN16MockExpectedCallD1Ev>
}
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3708      	adds	r7, #8
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}
 801ce30:	0802c614 	.word	0x0802c614

0801ce34 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
}
 801ce3c:	6878      	ldr	r0, [r7, #4]
 801ce3e:	f7ff ffc3 	bl	801cdc8 <_ZN23MockCheckedExpectedCallD1Ev>
 801ce42:	2170      	movs	r1, #112	; 0x70
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	f7ef fef3 	bl	800cc30 <_ZdlPvj>
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	3708      	adds	r7, #8
 801ce50:	46bd      	mov	sp, r7
 801ce52:	bd80      	pop	{r7, pc}

0801ce54 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
    setName(name);
 801ce5e:	6839      	ldr	r1, [r7, #0]
 801ce60:	6878      	ldr	r0, [r7, #4]
 801ce62:	f7ff ff2a 	bl	801ccba <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801ce66:	687b      	ldr	r3, [r7, #4]
}
 801ce68:	4618      	mov	r0, r3
 801ce6a:	3708      	adds	r7, #8
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}

0801ce70 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801ce70:	b590      	push	{r4, r7, lr}
 801ce72:	b087      	sub	sp, #28
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	60f8      	str	r0, [r7, #12]
 801ce78:	60b9      	str	r1, [r7, #8]
 801ce7a:	4613      	mov	r3, r2
 801ce7c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ce7e:	225a      	movs	r2, #90	; 0x5a
 801ce80:	490e      	ldr	r1, [pc, #56]	; (801cebc <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801ce82:	2038      	movs	r0, #56	; 0x38
 801ce84:	f7ef fec0 	bl	800cc08 <_ZnwjPKci>
 801ce88:	4604      	mov	r4, r0
 801ce8a:	68b9      	ldr	r1, [r7, #8]
 801ce8c:	4620      	mov	r0, r4
 801ce8e:	f001 f851 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ce92:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ce94:	68fb      	ldr	r3, [r7, #12]
 801ce96:	69db      	ldr	r3, [r3, #28]
 801ce98:	6979      	ldr	r1, [r7, #20]
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	f004 fee2 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	3308      	adds	r3, #8
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	79fa      	ldrb	r2, [r7, #7]
 801ceaa:	4611      	mov	r1, r2
 801ceac:	6978      	ldr	r0, [r7, #20]
 801ceae:	4798      	blx	r3
    return *this;
 801ceb0:	68fb      	ldr	r3, [r7, #12]
}
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	371c      	adds	r7, #28
 801ceb6:	46bd      	mov	sp, r7
 801ceb8:	bd90      	pop	{r4, r7, pc}
 801ceba:	bf00      	nop
 801cebc:	08029108 	.word	0x08029108

0801cec0 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801cec0:	b590      	push	{r4, r7, lr}
 801cec2:	b087      	sub	sp, #28
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	60f8      	str	r0, [r7, #12]
 801cec8:	60b9      	str	r1, [r7, #8]
 801ceca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cecc:	2262      	movs	r2, #98	; 0x62
 801cece:	490e      	ldr	r1, [pc, #56]	; (801cf08 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801ced0:	2038      	movs	r0, #56	; 0x38
 801ced2:	f7ef fe99 	bl	800cc08 <_ZnwjPKci>
 801ced6:	4604      	mov	r4, r0
 801ced8:	68b9      	ldr	r1, [r7, #8]
 801ceda:	4620      	mov	r0, r4
 801cedc:	f001 f82a 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cee0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	69db      	ldr	r3, [r3, #28]
 801cee6:	6979      	ldr	r1, [r7, #20]
 801cee8:	4618      	mov	r0, r3
 801ceea:	f004 febb 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ceee:	697b      	ldr	r3, [r7, #20]
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	3310      	adds	r3, #16
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	6879      	ldr	r1, [r7, #4]
 801cef8:	6978      	ldr	r0, [r7, #20]
 801cefa:	4798      	blx	r3
    return *this;
 801cefc:	68fb      	ldr	r3, [r7, #12]
}
 801cefe:	4618      	mov	r0, r3
 801cf00:	371c      	adds	r7, #28
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd90      	pop	{r4, r7, pc}
 801cf06:	bf00      	nop
 801cf08:	08029108 	.word	0x08029108

0801cf0c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801cf0c:	b590      	push	{r4, r7, lr}
 801cf0e:	b087      	sub	sp, #28
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	60f8      	str	r0, [r7, #12]
 801cf14:	60b9      	str	r1, [r7, #8]
 801cf16:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cf18:	226a      	movs	r2, #106	; 0x6a
 801cf1a:	490e      	ldr	r1, [pc, #56]	; (801cf54 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801cf1c:	2038      	movs	r0, #56	; 0x38
 801cf1e:	f7ef fe73 	bl	800cc08 <_ZnwjPKci>
 801cf22:	4604      	mov	r4, r0
 801cf24:	68b9      	ldr	r1, [r7, #8]
 801cf26:	4620      	mov	r0, r4
 801cf28:	f001 f804 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cf2c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	69db      	ldr	r3, [r3, #28]
 801cf32:	6979      	ldr	r1, [r7, #20]
 801cf34:	4618      	mov	r0, r3
 801cf36:	f004 fe95 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cf3a:	697b      	ldr	r3, [r7, #20]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	330c      	adds	r3, #12
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	6879      	ldr	r1, [r7, #4]
 801cf44:	6978      	ldr	r0, [r7, #20]
 801cf46:	4798      	blx	r3
    return *this;
 801cf48:	68fb      	ldr	r3, [r7, #12]
}
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	371c      	adds	r7, #28
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd90      	pop	{r4, r7, pc}
 801cf52:	bf00      	nop
 801cf54:	08029108 	.word	0x08029108

0801cf58 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801cf58:	b590      	push	{r4, r7, lr}
 801cf5a:	b087      	sub	sp, #28
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	60f8      	str	r0, [r7, #12]
 801cf60:	60b9      	str	r1, [r7, #8]
 801cf62:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cf64:	2272      	movs	r2, #114	; 0x72
 801cf66:	490e      	ldr	r1, [pc, #56]	; (801cfa0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801cf68:	2038      	movs	r0, #56	; 0x38
 801cf6a:	f7ef fe4d 	bl	800cc08 <_ZnwjPKci>
 801cf6e:	4604      	mov	r4, r0
 801cf70:	68b9      	ldr	r1, [r7, #8]
 801cf72:	4620      	mov	r0, r4
 801cf74:	f000 ffde 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cf78:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	69db      	ldr	r3, [r3, #28]
 801cf7e:	6979      	ldr	r1, [r7, #20]
 801cf80:	4618      	mov	r0, r3
 801cf82:	f004 fe6f 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cf86:	697b      	ldr	r3, [r7, #20]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	3314      	adds	r3, #20
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	6879      	ldr	r1, [r7, #4]
 801cf90:	6978      	ldr	r0, [r7, #20]
 801cf92:	4798      	blx	r3
    return *this;
 801cf94:	68fb      	ldr	r3, [r7, #12]
}
 801cf96:	4618      	mov	r0, r3
 801cf98:	371c      	adds	r7, #28
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	bd90      	pop	{r4, r7, pc}
 801cf9e:	bf00      	nop
 801cfa0:	08029108 	.word	0x08029108

0801cfa4 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801cfa4:	b590      	push	{r4, r7, lr}
 801cfa6:	b087      	sub	sp, #28
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	60f8      	str	r0, [r7, #12]
 801cfac:	60b9      	str	r1, [r7, #8]
 801cfae:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cfb0:	227a      	movs	r2, #122	; 0x7a
 801cfb2:	490e      	ldr	r1, [pc, #56]	; (801cfec <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801cfb4:	2038      	movs	r0, #56	; 0x38
 801cfb6:	f7ef fe27 	bl	800cc08 <_ZnwjPKci>
 801cfba:	4604      	mov	r4, r0
 801cfbc:	68b9      	ldr	r1, [r7, #8]
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	f000 ffb8 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cfc4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	69db      	ldr	r3, [r3, #28]
 801cfca:	6979      	ldr	r1, [r7, #20]
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f004 fe49 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	3318      	adds	r3, #24
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	6879      	ldr	r1, [r7, #4]
 801cfdc:	6978      	ldr	r0, [r7, #20]
 801cfde:	4798      	blx	r3
    return *this;
 801cfe0:	68fb      	ldr	r3, [r7, #12]
}
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	371c      	adds	r7, #28
 801cfe6:	46bd      	mov	sp, r7
 801cfe8:	bd90      	pop	{r4, r7, pc}
 801cfea:	bf00      	nop
 801cfec:	08029108 	.word	0x08029108

0801cff0 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801cff0:	b5b0      	push	{r4, r5, r7, lr}
 801cff2:	b086      	sub	sp, #24
 801cff4:	af02      	add	r7, sp, #8
 801cff6:	60f8      	str	r0, [r7, #12]
 801cff8:	60b9      	str	r1, [r7, #8]
 801cffa:	4639      	mov	r1, r7
 801cffc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801d000:	f7f9 fda8 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801d004:	4604      	mov	r4, r0
 801d006:	6823      	ldr	r3, [r4, #0]
 801d008:	3368      	adds	r3, #104	; 0x68
 801d00a:	681d      	ldr	r5, [r3, #0]
 801d00c:	f7f9 fdb2 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d010:	4603      	mov	r3, r0
 801d012:	9300      	str	r3, [sp, #0]
 801d014:	2396      	movs	r3, #150	; 0x96
 801d016:	4a04      	ldr	r2, [pc, #16]	; (801d028 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801d018:	4904      	ldr	r1, [pc, #16]	; (801d02c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801d01a:	4620      	mov	r0, r4
 801d01c:	47a8      	blx	r5
    return *this;
 801d01e:	68fb      	ldr	r3, [r7, #12]
}
 801d020:	4618      	mov	r0, r3
 801d022:	3710      	adds	r7, #16
 801d024:	46bd      	mov	sp, r7
 801d026:	bdb0      	pop	{r4, r5, r7, pc}
 801d028:	08029108 	.word	0x08029108
 801d02c:	08029124 	.word	0x08029124

0801d030 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801d030:	b5b0      	push	{r4, r5, r7, lr}
 801d032:	b086      	sub	sp, #24
 801d034:	af02      	add	r7, sp, #8
 801d036:	60f8      	str	r0, [r7, #12]
 801d038:	60b9      	str	r1, [r7, #8]
 801d03a:	4639      	mov	r1, r7
 801d03c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801d040:	f7f9 fd88 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801d044:	4604      	mov	r4, r0
 801d046:	6823      	ldr	r3, [r4, #0]
 801d048:	3368      	adds	r3, #104	; 0x68
 801d04a:	681d      	ldr	r5, [r3, #0]
 801d04c:	f7f9 fd92 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801d050:	4603      	mov	r3, r0
 801d052:	9300      	str	r3, [sp, #0]
 801d054:	239c      	movs	r3, #156	; 0x9c
 801d056:	4a04      	ldr	r2, [pc, #16]	; (801d068 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801d058:	4904      	ldr	r1, [pc, #16]	; (801d06c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801d05a:	4620      	mov	r0, r4
 801d05c:	47a8      	blx	r5
    return *this;
 801d05e:	68fb      	ldr	r3, [r7, #12]
}
 801d060:	4618      	mov	r0, r3
 801d062:	3710      	adds	r7, #16
 801d064:	46bd      	mov	sp, r7
 801d066:	bdb0      	pop	{r4, r5, r7, pc}
 801d068:	08029108 	.word	0x08029108
 801d06c:	08029144 	.word	0x08029144

0801d070 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801d070:	b590      	push	{r4, r7, lr}
 801d072:	b087      	sub	sp, #28
 801d074:	af00      	add	r7, sp, #0
 801d076:	60f8      	str	r0, [r7, #12]
 801d078:	60b9      	str	r1, [r7, #8]
 801d07a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d07e:	22a4      	movs	r2, #164	; 0xa4
 801d080:	490e      	ldr	r1, [pc, #56]	; (801d0bc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801d082:	2038      	movs	r0, #56	; 0x38
 801d084:	f7ef fdc0 	bl	800cc08 <_ZnwjPKci>
 801d088:	4604      	mov	r4, r0
 801d08a:	68b9      	ldr	r1, [r7, #8]
 801d08c:	4620      	mov	r0, r4
 801d08e:	f000 ff51 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d092:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d094:	68fb      	ldr	r3, [r7, #12]
 801d096:	69db      	ldr	r3, [r3, #28]
 801d098:	6979      	ldr	r1, [r7, #20]
 801d09a:	4618      	mov	r0, r3
 801d09c:	f004 fde2 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d0a0:	697b      	ldr	r3, [r7, #20]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	3324      	adds	r3, #36	; 0x24
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	ed97 0b00 	vldr	d0, [r7]
 801d0ac:	6978      	ldr	r0, [r7, #20]
 801d0ae:	4798      	blx	r3
    return *this;
 801d0b0:	68fb      	ldr	r3, [r7, #12]
}
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	371c      	adds	r7, #28
 801d0b6:	46bd      	mov	sp, r7
 801d0b8:	bd90      	pop	{r4, r7, pc}
 801d0ba:	bf00      	nop
 801d0bc:	08029108 	.word	0x08029108

0801d0c0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801d0c0:	b590      	push	{r4, r7, lr}
 801d0c2:	b089      	sub	sp, #36	; 0x24
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6178      	str	r0, [r7, #20]
 801d0c8:	6139      	str	r1, [r7, #16]
 801d0ca:	ed87 0b02 	vstr	d0, [r7, #8]
 801d0ce:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d0d2:	22ac      	movs	r2, #172	; 0xac
 801d0d4:	490f      	ldr	r1, [pc, #60]	; (801d114 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801d0d6:	2038      	movs	r0, #56	; 0x38
 801d0d8:	f7ef fd96 	bl	800cc08 <_ZnwjPKci>
 801d0dc:	4604      	mov	r4, r0
 801d0de:	6939      	ldr	r1, [r7, #16]
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	f000 ff27 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d0e6:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	69db      	ldr	r3, [r3, #28]
 801d0ec:	69f9      	ldr	r1, [r7, #28]
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f004 fdb8 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801d0f4:	69fb      	ldr	r3, [r7, #28]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	3328      	adds	r3, #40	; 0x28
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	ed97 1b00 	vldr	d1, [r7]
 801d100:	ed97 0b02 	vldr	d0, [r7, #8]
 801d104:	69f8      	ldr	r0, [r7, #28]
 801d106:	4798      	blx	r3
    return *this;
 801d108:	697b      	ldr	r3, [r7, #20]
}
 801d10a:	4618      	mov	r0, r3
 801d10c:	3724      	adds	r7, #36	; 0x24
 801d10e:	46bd      	mov	sp, r7
 801d110:	bd90      	pop	{r4, r7, pc}
 801d112:	bf00      	nop
 801d114:	08029108 	.word	0x08029108

0801d118 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801d118:	b590      	push	{r4, r7, lr}
 801d11a:	b087      	sub	sp, #28
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	60f8      	str	r0, [r7, #12]
 801d120:	60b9      	str	r1, [r7, #8]
 801d122:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d124:	22b4      	movs	r2, #180	; 0xb4
 801d126:	490e      	ldr	r1, [pc, #56]	; (801d160 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801d128:	2038      	movs	r0, #56	; 0x38
 801d12a:	f7ef fd6d 	bl	800cc08 <_ZnwjPKci>
 801d12e:	4604      	mov	r4, r0
 801d130:	68b9      	ldr	r1, [r7, #8]
 801d132:	4620      	mov	r0, r4
 801d134:	f000 fefe 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d138:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	69db      	ldr	r3, [r3, #28]
 801d13e:	6979      	ldr	r1, [r7, #20]
 801d140:	4618      	mov	r0, r3
 801d142:	f004 fd8f 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	3338      	adds	r3, #56	; 0x38
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	6879      	ldr	r1, [r7, #4]
 801d150:	6978      	ldr	r0, [r7, #20]
 801d152:	4798      	blx	r3
    return *this;
 801d154:	68fb      	ldr	r3, [r7, #12]
}
 801d156:	4618      	mov	r0, r3
 801d158:	371c      	adds	r7, #28
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bd90      	pop	{r4, r7, pc}
 801d15e:	bf00      	nop
 801d160:	08029108 	.word	0x08029108

0801d164 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801d164:	b590      	push	{r4, r7, lr}
 801d166:	b087      	sub	sp, #28
 801d168:	af00      	add	r7, sp, #0
 801d16a:	60f8      	str	r0, [r7, #12]
 801d16c:	60b9      	str	r1, [r7, #8]
 801d16e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d170:	22bc      	movs	r2, #188	; 0xbc
 801d172:	490e      	ldr	r1, [pc, #56]	; (801d1ac <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801d174:	2038      	movs	r0, #56	; 0x38
 801d176:	f7ef fd47 	bl	800cc08 <_ZnwjPKci>
 801d17a:	4604      	mov	r4, r0
 801d17c:	68b9      	ldr	r1, [r7, #8]
 801d17e:	4620      	mov	r0, r4
 801d180:	f000 fed8 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d184:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	69db      	ldr	r3, [r3, #28]
 801d18a:	6979      	ldr	r1, [r7, #20]
 801d18c:	4618      	mov	r0, r3
 801d18e:	f004 fd69 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d192:	697b      	ldr	r3, [r7, #20]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	332c      	adds	r3, #44	; 0x2c
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	6879      	ldr	r1, [r7, #4]
 801d19c:	6978      	ldr	r0, [r7, #20]
 801d19e:	4798      	blx	r3
    return *this;
 801d1a0:	68fb      	ldr	r3, [r7, #12]
}
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	371c      	adds	r7, #28
 801d1a6:	46bd      	mov	sp, r7
 801d1a8:	bd90      	pop	{r4, r7, pc}
 801d1aa:	bf00      	nop
 801d1ac:	08029108 	.word	0x08029108

0801d1b0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801d1b0:	b590      	push	{r4, r7, lr}
 801d1b2:	b087      	sub	sp, #28
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	60f8      	str	r0, [r7, #12]
 801d1b8:	60b9      	str	r1, [r7, #8]
 801d1ba:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d1bc:	22c4      	movs	r2, #196	; 0xc4
 801d1be:	490e      	ldr	r1, [pc, #56]	; (801d1f8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801d1c0:	2038      	movs	r0, #56	; 0x38
 801d1c2:	f7ef fd21 	bl	800cc08 <_ZnwjPKci>
 801d1c6:	4604      	mov	r4, r0
 801d1c8:	68b9      	ldr	r1, [r7, #8]
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f000 feb2 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d1d0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	69db      	ldr	r3, [r3, #28]
 801d1d6:	6979      	ldr	r1, [r7, #20]
 801d1d8:	4618      	mov	r0, r3
 801d1da:	f004 fd43 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d1de:	697b      	ldr	r3, [r7, #20]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	3330      	adds	r3, #48	; 0x30
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	6879      	ldr	r1, [r7, #4]
 801d1e8:	6978      	ldr	r0, [r7, #20]
 801d1ea:	4798      	blx	r3
    return *this;
 801d1ec:	68fb      	ldr	r3, [r7, #12]
}
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	371c      	adds	r7, #28
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	bd90      	pop	{r4, r7, pc}
 801d1f6:	bf00      	nop
 801d1f8:	08029108 	.word	0x08029108

0801d1fc <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801d1fc:	b590      	push	{r4, r7, lr}
 801d1fe:	b087      	sub	sp, #28
 801d200:	af00      	add	r7, sp, #0
 801d202:	60f8      	str	r0, [r7, #12]
 801d204:	60b9      	str	r1, [r7, #8]
 801d206:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d208:	22cc      	movs	r2, #204	; 0xcc
 801d20a:	490e      	ldr	r1, [pc, #56]	; (801d244 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801d20c:	2038      	movs	r0, #56	; 0x38
 801d20e:	f7ef fcfb 	bl	800cc08 <_ZnwjPKci>
 801d212:	4604      	mov	r4, r0
 801d214:	68b9      	ldr	r1, [r7, #8]
 801d216:	4620      	mov	r0, r4
 801d218:	f000 fe8c 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d21c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	69db      	ldr	r3, [r3, #28]
 801d222:	6979      	ldr	r1, [r7, #20]
 801d224:	4618      	mov	r0, r3
 801d226:	f004 fd1d 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d22a:	697b      	ldr	r3, [r7, #20]
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	3334      	adds	r3, #52	; 0x34
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	6879      	ldr	r1, [r7, #4]
 801d234:	6978      	ldr	r0, [r7, #20]
 801d236:	4798      	blx	r3
    return *this;
 801d238:	68fb      	ldr	r3, [r7, #12]
}
 801d23a:	4618      	mov	r0, r3
 801d23c:	371c      	adds	r7, #28
 801d23e:	46bd      	mov	sp, r7
 801d240:	bd90      	pop	{r4, r7, pc}
 801d242:	bf00      	nop
 801d244:	08029108 	.word	0x08029108

0801d248 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801d248:	b590      	push	{r4, r7, lr}
 801d24a:	b087      	sub	sp, #28
 801d24c:	af00      	add	r7, sp, #0
 801d24e:	60f8      	str	r0, [r7, #12]
 801d250:	60b9      	str	r1, [r7, #8]
 801d252:	607a      	str	r2, [r7, #4]
 801d254:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d256:	22d4      	movs	r2, #212	; 0xd4
 801d258:	490e      	ldr	r1, [pc, #56]	; (801d294 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801d25a:	2038      	movs	r0, #56	; 0x38
 801d25c:	f7ef fcd4 	bl	800cc08 <_ZnwjPKci>
 801d260:	4604      	mov	r4, r0
 801d262:	68b9      	ldr	r1, [r7, #8]
 801d264:	4620      	mov	r0, r4
 801d266:	f000 fe65 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d26a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	69db      	ldr	r3, [r3, #28]
 801d270:	6979      	ldr	r1, [r7, #20]
 801d272:	4618      	mov	r0, r3
 801d274:	f004 fcf6 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801d278:	697b      	ldr	r3, [r7, #20]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	333c      	adds	r3, #60	; 0x3c
 801d27e:	681b      	ldr	r3, [r3, #0]
 801d280:	683a      	ldr	r2, [r7, #0]
 801d282:	6879      	ldr	r1, [r7, #4]
 801d284:	6978      	ldr	r0, [r7, #20]
 801d286:	4798      	blx	r3
    return *this;
 801d288:	68fb      	ldr	r3, [r7, #12]
}
 801d28a:	4618      	mov	r0, r3
 801d28c:	371c      	adds	r7, #28
 801d28e:	46bd      	mov	sp, r7
 801d290:	bd90      	pop	{r4, r7, pc}
 801d292:	bf00      	nop
 801d294:	08029108 	.word	0x08029108

0801d298 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801d298:	b590      	push	{r4, r7, lr}
 801d29a:	b087      	sub	sp, #28
 801d29c:	af00      	add	r7, sp, #0
 801d29e:	60f8      	str	r0, [r7, #12]
 801d2a0:	60b9      	str	r1, [r7, #8]
 801d2a2:	607a      	str	r2, [r7, #4]
 801d2a4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d2a6:	22dc      	movs	r2, #220	; 0xdc
 801d2a8:	490e      	ldr	r1, [pc, #56]	; (801d2e4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801d2aa:	2038      	movs	r0, #56	; 0x38
 801d2ac:	f7ef fcac 	bl	800cc08 <_ZnwjPKci>
 801d2b0:	4604      	mov	r4, r0
 801d2b2:	6879      	ldr	r1, [r7, #4]
 801d2b4:	4620      	mov	r0, r4
 801d2b6:	f000 fe3d 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d2ba:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	69db      	ldr	r3, [r3, #28]
 801d2c0:	6979      	ldr	r1, [r7, #20]
 801d2c2:	4618      	mov	r0, r3
 801d2c4:	f004 fcce 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801d2c8:	697b      	ldr	r3, [r7, #20]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	3340      	adds	r3, #64	; 0x40
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	683a      	ldr	r2, [r7, #0]
 801d2d2:	68b9      	ldr	r1, [r7, #8]
 801d2d4:	6978      	ldr	r0, [r7, #20]
 801d2d6:	4798      	blx	r3
    return *this;
 801d2d8:	68fb      	ldr	r3, [r7, #12]
}
 801d2da:	4618      	mov	r0, r3
 801d2dc:	371c      	adds	r7, #28
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	bd90      	pop	{r4, r7, pc}
 801d2e2:	bf00      	nop
 801d2e4:	08029108 	.word	0x08029108

0801d2e8 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801d2e8:	b590      	push	{r4, r7, lr}
 801d2ea:	b087      	sub	sp, #28
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	60f8      	str	r0, [r7, #12]
 801d2f0:	60b9      	str	r1, [r7, #8]
 801d2f2:	607a      	str	r2, [r7, #4]
 801d2f4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d2f6:	22e4      	movs	r2, #228	; 0xe4
 801d2f8:	4911      	ldr	r1, [pc, #68]	; (801d340 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801d2fa:	2038      	movs	r0, #56	; 0x38
 801d2fc:	f7ef fc84 	bl	800cc08 <_ZnwjPKci>
 801d300:	4604      	mov	r4, r0
 801d302:	68b9      	ldr	r1, [r7, #8]
 801d304:	4620      	mov	r0, r4
 801d306:	f000 fe15 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d30a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	6a1b      	ldr	r3, [r3, #32]
 801d310:	6979      	ldr	r1, [r7, #20]
 801d312:	4618      	mov	r0, r3
 801d314:	f004 fca6 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801d318:	697b      	ldr	r3, [r7, #20]
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	3330      	adds	r3, #48	; 0x30
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	6879      	ldr	r1, [r7, #4]
 801d322:	6978      	ldr	r0, [r7, #20]
 801d324:	4798      	blx	r3
    newParameter->setSize(size);
 801d326:	697b      	ldr	r3, [r7, #20]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	3348      	adds	r3, #72	; 0x48
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	6839      	ldr	r1, [r7, #0]
 801d330:	6978      	ldr	r0, [r7, #20]
 801d332:	4798      	blx	r3
    return *this;
 801d334:	68fb      	ldr	r3, [r7, #12]
}
 801d336:	4618      	mov	r0, r3
 801d338:	371c      	adds	r7, #28
 801d33a:	46bd      	mov	sp, r7
 801d33c:	bd90      	pop	{r4, r7, pc}
 801d33e:	bf00      	nop
 801d340:	08029108 	.word	0x08029108

0801d344 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801d344:	b590      	push	{r4, r7, lr}
 801d346:	b087      	sub	sp, #28
 801d348:	af00      	add	r7, sp, #0
 801d34a:	60f8      	str	r0, [r7, #12]
 801d34c:	60b9      	str	r1, [r7, #8]
 801d34e:	607a      	str	r2, [r7, #4]
 801d350:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801d352:	22ed      	movs	r2, #237	; 0xed
 801d354:	490e      	ldr	r1, [pc, #56]	; (801d390 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801d356:	2038      	movs	r0, #56	; 0x38
 801d358:	f7ef fc56 	bl	800cc08 <_ZnwjPKci>
 801d35c:	4604      	mov	r4, r0
 801d35e:	6879      	ldr	r1, [r7, #4]
 801d360:	4620      	mov	r0, r4
 801d362:	f000 fde7 	bl	801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801d366:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	6a1b      	ldr	r3, [r3, #32]
 801d36c:	6979      	ldr	r1, [r7, #20]
 801d36e:	4618      	mov	r0, r3
 801d370:	f004 fc78 	bl	8021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801d374:	697b      	ldr	r3, [r7, #20]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	3340      	adds	r3, #64	; 0x40
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	683a      	ldr	r2, [r7, #0]
 801d37e:	68b9      	ldr	r1, [r7, #8]
 801d380:	6978      	ldr	r0, [r7, #20]
 801d382:	4798      	blx	r3
    return *this;
 801d384:	68fb      	ldr	r3, [r7, #12]
}
 801d386:	4618      	mov	r0, r3
 801d388:	371c      	adds	r7, #28
 801d38a:	46bd      	mov	sp, r7
 801d38c:	bd90      	pop	{r4, r7, pc}
 801d38e:	bf00      	nop
 801d390:	08029108 	.word	0x08029108

0801d394 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801d394:	b590      	push	{r4, r7, lr}
 801d396:	b083      	sub	sp, #12
 801d398:	af00      	add	r7, sp, #0
 801d39a:	6078      	str	r0, [r7, #4]
 801d39c:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	3318      	adds	r3, #24
 801d3a4:	681c      	ldr	r4, [r3, #0]
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	6839      	ldr	r1, [r7, #0]
 801d3ac:	6878      	ldr	r0, [r7, #4]
 801d3ae:	47a0      	blx	r4
 801d3b0:	4603      	mov	r3, r0
}
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	370c      	adds	r7, #12
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd90      	pop	{r4, r7, pc}
	...

0801d3bc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801d3bc:	b580      	push	{r7, lr}
 801d3be:	b086      	sub	sp, #24
 801d3c0:	af00      	add	r7, sp, #0
 801d3c2:	60f8      	str	r0, [r7, #12]
 801d3c4:	60b9      	str	r1, [r7, #8]
 801d3c6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801d3c8:	68bb      	ldr	r3, [r7, #8]
 801d3ca:	69db      	ldr	r3, [r3, #28]
 801d3cc:	6879      	ldr	r1, [r7, #4]
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	f004 fc7e 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d3d4:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801d3d6:	697b      	ldr	r3, [r7, #20]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d008      	beq.n	801d3ee <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801d3dc:	697b      	ldr	r3, [r7, #20]
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	3360      	adds	r3, #96	; 0x60
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	68fa      	ldr	r2, [r7, #12]
 801d3e6:	6979      	ldr	r1, [r7, #20]
 801d3e8:	4610      	mov	r0, r2
 801d3ea:	4798      	blx	r3
 801d3ec:	e004      	b.n	801d3f8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	4903      	ldr	r1, [pc, #12]	; (801d400 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	f7f2 fe10 	bl	8010018 <_Z10StringFromPKc>
}
 801d3f8:	68f8      	ldr	r0, [r7, #12]
 801d3fa:	3718      	adds	r7, #24
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	bd80      	pop	{r7, pc}
 801d400:	08029104 	.word	0x08029104

0801d404 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b084      	sub	sp, #16
 801d408:	af00      	add	r7, sp, #0
 801d40a:	6078      	str	r0, [r7, #4]
 801d40c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	69db      	ldr	r3, [r3, #28]
 801d412:	6839      	ldr	r1, [r7, #0]
 801d414:	4618      	mov	r0, r3
 801d416:	f004 fc5b 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d41a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	bf14      	ite	ne
 801d422:	2301      	movne	r3, #1
 801d424:	2300      	moveq	r3, #0
 801d426:	b2db      	uxtb	r3, r3
}
 801d428:	4618      	mov	r0, r3
 801d42a:	3710      	adds	r7, #16
 801d42c:	46bd      	mov	sp, r7
 801d42e:	bd80      	pop	{r7, pc}

0801d430 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801d430:	b580      	push	{r7, lr}
 801d432:	b084      	sub	sp, #16
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]
 801d438:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	6a1b      	ldr	r3, [r3, #32]
 801d43e:	6839      	ldr	r1, [r7, #0]
 801d440:	4618      	mov	r0, r3
 801d442:	f004 fc45 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d446:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	bf14      	ite	ne
 801d44e:	2301      	movne	r3, #1
 801d450:	2300      	moveq	r3, #0
 801d452:	b2db      	uxtb	r3, r3
}
 801d454:	4618      	mov	r0, r3
 801d456:	3710      	adds	r7, #16
 801d458:	46bd      	mov	sp, r7
 801d45a:	bd80      	pop	{r7, pc}

0801d45c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801d45c:	b590      	push	{r4, r7, lr}
 801d45e:	b089      	sub	sp, #36	; 0x24
 801d460:	af00      	add	r7, sp, #0
 801d462:	60f8      	str	r0, [r7, #12]
 801d464:	60b9      	str	r1, [r7, #8]
 801d466:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	69db      	ldr	r3, [r3, #28]
 801d46c:	6879      	ldr	r1, [r7, #4]
 801d46e:	4618      	mov	r0, r3
 801d470:	f004 fc2e 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d474:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801d476:	2400      	movs	r4, #0
 801d478:	69fb      	ldr	r3, [r7, #28]
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d004      	beq.n	801d488 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801d47e:	69f9      	ldr	r1, [r7, #28]
 801d480:	68f8      	ldr	r0, [r7, #12]
 801d482:	f7f0 f829 	bl	800d4d8 <_ZN14MockNamedValueC1ERKS_>
 801d486:	e00c      	b.n	801d4a2 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801d488:	f107 0314 	add.w	r3, r7, #20
 801d48c:	490a      	ldr	r1, [pc, #40]	; (801d4b8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801d48e:	4618      	mov	r0, r3
 801d490:	f7f1 ff7d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801d494:	2401      	movs	r4, #1
 801d496:	f107 0314 	add.w	r3, r7, #20
 801d49a:	4619      	mov	r1, r3
 801d49c:	68f8      	ldr	r0, [r7, #12]
 801d49e:	f002 fc9b 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801d4a2:	2c00      	cmp	r4, #0
 801d4a4:	d004      	beq.n	801d4b0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801d4a6:	f107 0314 	add.w	r3, r7, #20
 801d4aa:	4618      	mov	r0, r3
 801d4ac:	f7f2 fb27 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801d4b0:	68f8      	ldr	r0, [r7, #12]
 801d4b2:	3724      	adds	r7, #36	; 0x24
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd90      	pop	{r4, r7, pc}
 801d4b8:	08029104 	.word	0x08029104

0801d4bc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801d4bc:	b590      	push	{r4, r7, lr}
 801d4be:	b089      	sub	sp, #36	; 0x24
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	60f8      	str	r0, [r7, #12]
 801d4c4:	60b9      	str	r1, [r7, #8]
 801d4c6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801d4c8:	68bb      	ldr	r3, [r7, #8]
 801d4ca:	6a1b      	ldr	r3, [r3, #32]
 801d4cc:	6879      	ldr	r1, [r7, #4]
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	f004 fbfe 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d4d4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801d4d6:	2400      	movs	r4, #0
 801d4d8:	69fb      	ldr	r3, [r7, #28]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d004      	beq.n	801d4e8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801d4de:	69f9      	ldr	r1, [r7, #28]
 801d4e0:	68f8      	ldr	r0, [r7, #12]
 801d4e2:	f7ef fff9 	bl	800d4d8 <_ZN14MockNamedValueC1ERKS_>
 801d4e6:	e00c      	b.n	801d502 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801d4e8:	f107 0314 	add.w	r3, r7, #20
 801d4ec:	490a      	ldr	r1, [pc, #40]	; (801d518 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7f1 ff4d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801d4f4:	2401      	movs	r4, #1
 801d4f6:	f107 0314 	add.w	r3, r7, #20
 801d4fa:	4619      	mov	r1, r3
 801d4fc:	68f8      	ldr	r0, [r7, #12]
 801d4fe:	f002 fc6b 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801d502:	2c00      	cmp	r4, #0
 801d504:	d004      	beq.n	801d510 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801d506:	f107 0314 	add.w	r3, r7, #20
 801d50a:	4618      	mov	r0, r3
 801d50c:	f7f2 faf7 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801d510:	68f8      	ldr	r0, [r7, #12]
 801d512:	3724      	adds	r7, #36	; 0x24
 801d514:	46bd      	mov	sp, r7
 801d516:	bd90      	pop	{r4, r7, pc}
 801d518:	08029104 	.word	0x08029104

0801d51c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b084      	sub	sp, #16
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	69db      	ldr	r3, [r3, #28]
 801d528:	4618      	mov	r0, r3
 801d52a:	f004 fc00 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d52e:	60f8      	str	r0, [r7, #12]
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	2b00      	cmp	r3, #0
 801d534:	d014      	beq.n	801d560 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801d536:	68f9      	ldr	r1, [r7, #12]
 801d538:	6878      	ldr	r0, [r7, #4]
 801d53a:	f000 fced 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d53e:	4603      	mov	r3, r0
 801d540:	4618      	mov	r0, r3
 801d542:	f000 fd1f 	bl	801df84 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d546:	4603      	mov	r3, r0
 801d548:	f083 0301 	eor.w	r3, r3, #1
 801d54c:	b2db      	uxtb	r3, r3
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d001      	beq.n	801d556 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801d552:	2300      	movs	r3, #0
 801d554:	e023      	b.n	801d59e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801d556:	68f8      	ldr	r0, [r7, #12]
 801d558:	f004 faf2 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d55c:	60f8      	str	r0, [r7, #12]
 801d55e:	e7e7      	b.n	801d530 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	6a1b      	ldr	r3, [r3, #32]
 801d564:	4618      	mov	r0, r3
 801d566:	f004 fbe2 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d014      	beq.n	801d59c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801d572:	68f9      	ldr	r1, [r7, #12]
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f000 fccf 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d57a:	4603      	mov	r3, r0
 801d57c:	4618      	mov	r0, r3
 801d57e:	f000 fd01 	bl	801df84 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d582:	4603      	mov	r3, r0
 801d584:	f083 0301 	eor.w	r3, r3, #1
 801d588:	b2db      	uxtb	r3, r3
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d001      	beq.n	801d592 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801d58e:	2300      	movs	r3, #0
 801d590:	e005      	b.n	801d59e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d592:	68f8      	ldr	r0, [r7, #12]
 801d594:	f004 fad4 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d598:	60f8      	str	r0, [r7, #12]
 801d59a:	e7e7      	b.n	801d56c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801d59c:	2301      	movs	r3, #1
}
 801d59e:	4618      	mov	r0, r3
 801d5a0:	3710      	adds	r7, #16
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	bd80      	pop	{r7, pc}

0801d5a6 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801d5a6:	b480      	push	{r7}
 801d5a8:	b083      	sub	sp, #12
 801d5aa:	af00      	add	r7, sp, #0
 801d5ac:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	2201      	movs	r2, #1
 801d5b2:	731a      	strb	r2, [r3, #12]
    return *this;
 801d5b4:	687b      	ldr	r3, [r7, #4]
}
 801d5b6:	4618      	mov	r0, r3
 801d5b8:	370c      	adds	r7, #12
 801d5ba:	46bd      	mov	sp, r7
 801d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5c0:	4770      	bx	lr

0801d5c2 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801d5c2:	b480      	push	{r7}
 801d5c4:	b083      	sub	sp, #12
 801d5c6:	af00      	add	r7, sp, #0
 801d5c8:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d5d2:	429a      	cmp	r2, r3
 801d5d4:	bf0c      	ite	eq
 801d5d6:	2301      	moveq	r3, #1
 801d5d8:	2300      	movne	r3, #0
 801d5da:	b2db      	uxtb	r3, r3
}
 801d5dc:	4618      	mov	r0, r3
 801d5de:	370c      	adds	r7, #12
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5e6:	4770      	bx	lr

0801d5e8 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801d5e8:	b480      	push	{r7}
 801d5ea:	b083      	sub	sp, #12
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d5f8:	429a      	cmp	r2, r3
 801d5fa:	bf34      	ite	cc
 801d5fc:	2301      	movcc	r3, #1
 801d5fe:	2300      	movcs	r3, #0
 801d600:	b2db      	uxtb	r3, r3
}
 801d602:	4618      	mov	r0, r3
 801d604:	370c      	adds	r7, #12
 801d606:	46bd      	mov	sp, r7
 801d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d60c:	4770      	bx	lr

0801d60e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801d60e:	b580      	push	{r7, lr}
 801d610:	b082      	sub	sp, #8
 801d612:	af00      	add	r7, sp, #0
 801d614:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	33cc      	adds	r3, #204	; 0xcc
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	6878      	ldr	r0, [r7, #4]
 801d620:	4798      	blx	r3
 801d622:	4603      	mov	r3, r0
 801d624:	2b00      	cmp	r3, #0
 801d626:	d00c      	beq.n	801d642 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	7b1b      	ldrb	r3, [r3, #12]
 801d62c:	f083 0301 	eor.w	r3, r3, #1
 801d630:	b2db      	uxtb	r3, r3
 801d632:	2b00      	cmp	r3, #0
 801d634:	d103      	bne.n	801d63e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	7b5b      	ldrb	r3, [r3, #13]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d001      	beq.n	801d642 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801d63e:	2301      	movs	r3, #1
 801d640:	e000      	b.n	801d644 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801d642:	2300      	movs	r3, #0
}
 801d644:	4618      	mov	r0, r3
 801d646:	3708      	adds	r7, #8
 801d648:	46bd      	mov	sp, r7
 801d64a:	bd80      	pop	{r7, pc}

0801d64c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801d64c:	b580      	push	{r7, lr}
 801d64e:	b082      	sub	sp, #8
 801d650:	af00      	add	r7, sp, #0
 801d652:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	33d0      	adds	r3, #208	; 0xd0
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	6878      	ldr	r0, [r7, #4]
 801d65e:	4798      	blx	r3
 801d660:	4603      	mov	r3, r0
 801d662:	2b00      	cmp	r3, #0
 801d664:	d006      	beq.n	801d674 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d001      	beq.n	801d674 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801d670:	2301      	movs	r3, #1
 801d672:	e000      	b.n	801d676 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801d674:	2300      	movs	r3, #0
}
 801d676:	4618      	mov	r0, r3
 801d678:	3708      	adds	r7, #8
 801d67a:	46bd      	mov	sp, r7
 801d67c:	bd80      	pop	{r7, pc}

0801d67e <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801d67e:	b580      	push	{r7, lr}
 801d680:	b082      	sub	sp, #8
 801d682:	af00      	add	r7, sp, #0
 801d684:	6078      	str	r0, [r7, #4]
 801d686:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d68c:	1c5a      	adds	r2, r3, #1
 801d68e:	687b      	ldr	r3, [r7, #4]
 801d690:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	691b      	ldr	r3, [r3, #16]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d00c      	beq.n	801d6b4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801d69e:	683a      	ldr	r2, [r7, #0]
 801d6a0:	429a      	cmp	r2, r3
 801d6a2:	d304      	bcc.n	801d6ae <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	695b      	ldr	r3, [r3, #20]
 801d6a8:	683a      	ldr	r2, [r7, #0]
 801d6aa:	429a      	cmp	r2, r3
 801d6ac:	d902      	bls.n	801d6b4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	2201      	movs	r2, #1
 801d6b2:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	33ec      	adds	r3, #236	; 0xec
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	6878      	ldr	r0, [r7, #4]
 801d6be:	4798      	blx	r3
}
 801d6c0:	bf00      	nop
 801d6c2:	3708      	adds	r7, #8
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	bd80      	pop	{r7, pc}

0801d6c8 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801d6c8:	b480      	push	{r7}
 801d6ca:	b083      	sub	sp, #12
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	2201      	movs	r2, #1
 801d6d4:	735a      	strb	r2, [r3, #13]
}
 801d6d6:	bf00      	nop
 801d6d8:	370c      	adds	r7, #12
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6e0:	4770      	bx	lr

0801d6e2 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801d6e2:	b480      	push	{r7}
 801d6e4:	b083      	sub	sp, #12
 801d6e6:	af00      	add	r7, sp, #0
 801d6e8:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	2201      	movs	r2, #1
 801d6ee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801d6f2:	bf00      	nop
 801d6f4:	370c      	adds	r7, #12
 801d6f6:	46bd      	mov	sp, r7
 801d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6fc:	4770      	bx	lr

0801d6fe <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801d6fe:	b580      	push	{r7, lr}
 801d700:	b084      	sub	sp, #16
 801d702:	af00      	add	r7, sp, #0
 801d704:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d70c:	f083 0301 	eor.w	r3, r3, #1
 801d710:	b2da      	uxtb	r2, r3
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	2200      	movs	r2, #0
 801d71c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	69db      	ldr	r3, [r3, #28]
 801d722:	4618      	mov	r0, r3
 801d724:	f004 fb03 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d728:	60f8      	str	r0, [r7, #12]
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d00d      	beq.n	801d74c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801d730:	68f9      	ldr	r1, [r7, #12]
 801d732:	6878      	ldr	r0, [r7, #4]
 801d734:	f000 fbf0 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d738:	4603      	mov	r3, r0
 801d73a:	2100      	movs	r1, #0
 801d73c:	4618      	mov	r0, r3
 801d73e:	f000 fc11 	bl	801df64 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801d742:	68f8      	ldr	r0, [r7, #12]
 801d744:	f004 f9fc 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d748:	60f8      	str	r0, [r7, #12]
 801d74a:	e7ee      	b.n	801d72a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	6a1b      	ldr	r3, [r3, #32]
 801d750:	4618      	mov	r0, r3
 801d752:	f004 faec 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d756:	60f8      	str	r0, [r7, #12]
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d00d      	beq.n	801d77a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801d75e:	68f9      	ldr	r1, [r7, #12]
 801d760:	6878      	ldr	r0, [r7, #4]
 801d762:	f000 fbd9 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d766:	4603      	mov	r3, r0
 801d768:	2100      	movs	r1, #0
 801d76a:	4618      	mov	r0, r3
 801d76c:	f000 fbfa 	bl	801df64 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d770:	68f8      	ldr	r0, [r7, #12]
 801d772:	f004 f9e5 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d776:	60f8      	str	r0, [r7, #12]
 801d778:	e7ee      	b.n	801d758 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801d77a:	bf00      	nop
 801d77c:	3710      	adds	r7, #16
 801d77e:	46bd      	mov	sp, r7
 801d780:	bd80      	pop	{r7, pc}

0801d782 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801d782:	b590      	push	{r4, r7, lr}
 801d784:	b087      	sub	sp, #28
 801d786:	af00      	add	r7, sp, #0
 801d788:	6078      	str	r0, [r7, #4]
 801d78a:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	69db      	ldr	r3, [r3, #28]
 801d790:	4618      	mov	r0, r3
 801d792:	f004 facc 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d796:	6178      	str	r0, [r7, #20]
 801d798:	697b      	ldr	r3, [r7, #20]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d022      	beq.n	801d7e4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801d79e:	f107 030c 	add.w	r3, r7, #12
 801d7a2:	6979      	ldr	r1, [r7, #20]
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	f004 fa06 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801d7aa:	f107 030c 	add.w	r3, r7, #12
 801d7ae:	6839      	ldr	r1, [r7, #0]
 801d7b0:	4618      	mov	r0, r3
 801d7b2:	f7f2 f9b0 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801d7b6:	4603      	mov	r3, r0
 801d7b8:	461c      	mov	r4, r3
 801d7ba:	f107 030c 	add.w	r3, r7, #12
 801d7be:	4618      	mov	r0, r3
 801d7c0:	f7f2 f99d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801d7c4:	2c00      	cmp	r4, #0
 801d7c6:	d008      	beq.n	801d7da <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801d7c8:	6979      	ldr	r1, [r7, #20]
 801d7ca:	6878      	ldr	r0, [r7, #4]
 801d7cc:	f000 fba4 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	2101      	movs	r1, #1
 801d7d4:	4618      	mov	r0, r3
 801d7d6:	f000 fbc5 	bl	801df64 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801d7da:	6978      	ldr	r0, [r7, #20]
 801d7dc:	f004 f9b0 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d7e0:	6178      	str	r0, [r7, #20]
 801d7e2:	e7d9      	b.n	801d798 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801d7e4:	bf00      	nop
 801d7e6:	371c      	adds	r7, #28
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	bd90      	pop	{r4, r7, pc}

0801d7ec <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801d7ec:	b590      	push	{r4, r7, lr}
 801d7ee:	b087      	sub	sp, #28
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
 801d7f4:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	6a1b      	ldr	r3, [r3, #32]
 801d7fa:	4618      	mov	r0, r3
 801d7fc:	f004 fa97 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801d800:	6178      	str	r0, [r7, #20]
 801d802:	697b      	ldr	r3, [r7, #20]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d022      	beq.n	801d84e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801d808:	f107 030c 	add.w	r3, r7, #12
 801d80c:	6979      	ldr	r1, [r7, #20]
 801d80e:	4618      	mov	r0, r3
 801d810:	f004 f9d1 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801d814:	f107 030c 	add.w	r3, r7, #12
 801d818:	6839      	ldr	r1, [r7, #0]
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7f2 f97b 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801d820:	4603      	mov	r3, r0
 801d822:	461c      	mov	r4, r3
 801d824:	f107 030c 	add.w	r3, r7, #12
 801d828:	4618      	mov	r0, r3
 801d82a:	f7f2 f968 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801d82e:	2c00      	cmp	r4, #0
 801d830:	d008      	beq.n	801d844 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801d832:	6979      	ldr	r1, [r7, #20]
 801d834:	6878      	ldr	r0, [r7, #4]
 801d836:	f000 fb6f 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d83a:	4603      	mov	r3, r0
 801d83c:	2101      	movs	r1, #1
 801d83e:	4618      	mov	r0, r3
 801d840:	f000 fb90 	bl	801df64 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801d844:	6978      	ldr	r0, [r7, #20]
 801d846:	f004 f97b 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801d84a:	6178      	str	r0, [r7, #20]
 801d84c:	e7d9      	b.n	801d802 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801d84e:	bf00      	nop
 801d850:	371c      	adds	r7, #28
 801d852:	46bd      	mov	sp, r7
 801d854:	bd90      	pop	{r4, r7, pc}
	...

0801d858 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801d858:	b580      	push	{r7, lr}
 801d85a:	b086      	sub	sp, #24
 801d85c:	af00      	add	r7, sp, #0
 801d85e:	60f8      	str	r0, [r7, #12]
 801d860:	60b9      	str	r1, [r7, #8]
 801d862:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801d864:	68bb      	ldr	r3, [r7, #8]
 801d866:	69db      	ldr	r3, [r3, #28]
 801d868:	6879      	ldr	r1, [r7, #4]
 801d86a:	4618      	mov	r0, r3
 801d86c:	f004 fa30 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d870:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801d872:	697b      	ldr	r3, [r7, #20]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d005      	beq.n	801d884 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	6979      	ldr	r1, [r7, #20]
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7ff fa0b 	bl	801cc98 <_Z10StringFromRK14MockNamedValue>
 801d882:	e003      	b.n	801d88c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801d884:	4903      	ldr	r1, [pc, #12]	; (801d894 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801d886:	68f8      	ldr	r0, [r7, #12]
 801d888:	f7f1 fd81 	bl	800f38e <_ZN12SimpleStringC1EPKc>
}
 801d88c:	68f8      	ldr	r0, [r7, #12]
 801d88e:	3718      	adds	r7, #24
 801d890:	46bd      	mov	sp, r7
 801d892:	bd80      	pop	{r7, pc}
 801d894:	08029170 	.word	0x08029170

0801d898 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801d898:	b590      	push	{r4, r7, lr}
 801d89a:	b087      	sub	sp, #28
 801d89c:	af00      	add	r7, sp, #0
 801d89e:	6078      	str	r0, [r7, #4]
 801d8a0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	69dc      	ldr	r4, [r3, #28]
 801d8a6:	683b      	ldr	r3, [r7, #0]
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	335c      	adds	r3, #92	; 0x5c
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	f107 020c 	add.w	r2, r7, #12
 801d8b2:	6839      	ldr	r1, [r7, #0]
 801d8b4:	4610      	mov	r0, r2
 801d8b6:	4798      	blx	r3
 801d8b8:	f107 030c 	add.w	r3, r7, #12
 801d8bc:	4619      	mov	r1, r3
 801d8be:	4620      	mov	r0, r4
 801d8c0:	f004 fa06 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d8c4:	6178      	str	r0, [r7, #20]
 801d8c6:	f107 030c 	add.w	r3, r7, #12
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	f7f2 f917 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801d8d0:	697b      	ldr	r3, [r7, #20]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d00d      	beq.n	801d8f2 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801d8d6:	697b      	ldr	r3, [r7, #20]
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	3350      	adds	r3, #80	; 0x50
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	6839      	ldr	r1, [r7, #0]
 801d8e0:	6978      	ldr	r0, [r7, #20]
 801d8e2:	4798      	blx	r3
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	bf14      	ite	ne
 801d8ea:	2301      	movne	r3, #1
 801d8ec:	2300      	moveq	r3, #0
 801d8ee:	b2db      	uxtb	r3, r3
 801d8f0:	e006      	b.n	801d900 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	7b1b      	ldrb	r3, [r3, #12]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	bf14      	ite	ne
 801d8fa:	2301      	movne	r3, #1
 801d8fc:	2300      	moveq	r3, #0
 801d8fe:	b2db      	uxtb	r3, r3
}
 801d900:	4618      	mov	r0, r3
 801d902:	371c      	adds	r7, #28
 801d904:	46bd      	mov	sp, r7
 801d906:	bd90      	pop	{r4, r7, pc}

0801d908 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801d908:	b590      	push	{r4, r7, lr}
 801d90a:	b087      	sub	sp, #28
 801d90c:	af00      	add	r7, sp, #0
 801d90e:	6078      	str	r0, [r7, #4]
 801d910:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	6a1c      	ldr	r4, [r3, #32]
 801d916:	683b      	ldr	r3, [r7, #0]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	335c      	adds	r3, #92	; 0x5c
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	f107 020c 	add.w	r2, r7, #12
 801d922:	6839      	ldr	r1, [r7, #0]
 801d924:	4610      	mov	r0, r2
 801d926:	4798      	blx	r3
 801d928:	f107 030c 	add.w	r3, r7, #12
 801d92c:	4619      	mov	r1, r3
 801d92e:	4620      	mov	r0, r4
 801d930:	f004 f9ce 	bl	8021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d934:	6178      	str	r0, [r7, #20]
 801d936:	f107 030c 	add.w	r3, r7, #12
 801d93a:	4618      	mov	r0, r3
 801d93c:	f7f2 f8df 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801d940:	697b      	ldr	r3, [r7, #20]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d00d      	beq.n	801d962 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801d946:	697b      	ldr	r3, [r7, #20]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	3354      	adds	r3, #84	; 0x54
 801d94c:	681b      	ldr	r3, [r3, #0]
 801d94e:	6839      	ldr	r1, [r7, #0]
 801d950:	6978      	ldr	r0, [r7, #20]
 801d952:	4798      	blx	r3
 801d954:	4603      	mov	r3, r0
 801d956:	2b00      	cmp	r3, #0
 801d958:	bf14      	ite	ne
 801d95a:	2301      	movne	r3, #1
 801d95c:	2300      	moveq	r3, #0
 801d95e:	b2db      	uxtb	r3, r3
 801d960:	e006      	b.n	801d970 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	7b1b      	ldrb	r3, [r3, #12]
 801d966:	2b00      	cmp	r3, #0
 801d968:	bf14      	ite	ne
 801d96a:	2301      	movne	r3, #1
 801d96c:	2300      	moveq	r3, #0
 801d96e:	b2db      	uxtb	r3, r3
}
 801d970:	4618      	mov	r0, r3
 801d972:	371c      	adds	r7, #28
 801d974:	46bd      	mov	sp, r7
 801d976:	bd90      	pop	{r4, r7, pc}

0801d978 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d97a:	b0a1      	sub	sp, #132	; 0x84
 801d97c:	af02      	add	r7, sp, #8
 801d97e:	6078      	str	r0, [r7, #4]
 801d980:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801d982:	49bc      	ldr	r1, [pc, #752]	; (801dc74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d984:	6878      	ldr	r0, [r7, #4]
 801d986:	f7f1 fd02 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801d98a:	683b      	ldr	r3, [r7, #0]
 801d98c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d990:	2b00      	cmp	r3, #0
 801d992:	d012      	beq.n	801d9ba <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801d994:	683b      	ldr	r3, [r7, #0]
 801d996:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801d998:	f107 030c 	add.w	r3, r7, #12
 801d99c:	49b6      	ldr	r1, [pc, #728]	; (801dc78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f7f2 fdb4 	bl	801050c <_Z16StringFromFormatPKcz>
 801d9a4:	f107 030c 	add.w	r3, r7, #12
 801d9a8:	4619      	mov	r1, r3
 801d9aa:	6878      	ldr	r0, [r7, #4]
 801d9ac:	f7f1 fd5b 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801d9b0:	f107 030c 	add.w	r3, r7, #12
 801d9b4:	4618      	mov	r0, r3
 801d9b6:	f7f2 f8a2 	bl	800fafe <_ZN12SimpleStringD1Ev>

    str += getName();
 801d9ba:	f107 0314 	add.w	r3, r7, #20
 801d9be:	6839      	ldr	r1, [r7, #0]
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f7ff f989 	bl	801ccd8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801d9c6:	f107 0314 	add.w	r3, r7, #20
 801d9ca:	4619      	mov	r1, r3
 801d9cc:	6878      	ldr	r0, [r7, #4]
 801d9ce:	f7f2 f913 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801d9d2:	f107 0314 	add.w	r3, r7, #20
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7f2 f891 	bl	800fafe <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801d9dc:	49a7      	ldr	r1, [pc, #668]	; (801dc7c <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801d9de:	6878      	ldr	r0, [r7, #4]
 801d9e0:	f7f2 f91c 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801d9e4:	683b      	ldr	r3, [r7, #0]
 801d9e6:	691b      	ldr	r3, [r3, #16]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d02d      	beq.n	801da48 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801d9ec:	683b      	ldr	r3, [r7, #0]
 801d9ee:	691a      	ldr	r2, [r3, #16]
 801d9f0:	683b      	ldr	r3, [r7, #0]
 801d9f2:	695b      	ldr	r3, [r3, #20]
 801d9f4:	429a      	cmp	r2, r3
 801d9f6:	d113      	bne.n	801da20 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	691a      	ldr	r2, [r3, #16]
 801d9fc:	f107 031c 	add.w	r3, r7, #28
 801da00:	499f      	ldr	r1, [pc, #636]	; (801dc80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801da02:	4618      	mov	r0, r3
 801da04:	f7f2 fd82 	bl	801050c <_Z16StringFromFormatPKcz>
 801da08:	f107 031c 	add.w	r3, r7, #28
 801da0c:	4619      	mov	r1, r3
 801da0e:	6878      	ldr	r0, [r7, #4]
 801da10:	f7f2 f8f2 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801da14:	f107 031c 	add.w	r3, r7, #28
 801da18:	4618      	mov	r0, r3
 801da1a:	f7f2 f870 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801da1e:	e013      	b.n	801da48 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	691a      	ldr	r2, [r3, #16]
 801da24:	683b      	ldr	r3, [r7, #0]
 801da26:	695b      	ldr	r3, [r3, #20]
 801da28:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801da2c:	4995      	ldr	r1, [pc, #596]	; (801dc84 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801da2e:	f7f2 fd6d 	bl	801050c <_Z16StringFromFormatPKcz>
 801da32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da36:	4619      	mov	r1, r3
 801da38:	6878      	ldr	r0, [r7, #4]
 801da3a:	f7f2 f8dd 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801da3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da42:	4618      	mov	r0, r3
 801da44:	f7f2 f85b 	bl	800fafe <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801da48:	683b      	ldr	r3, [r7, #0]
 801da4a:	69db      	ldr	r3, [r3, #28]
 801da4c:	4618      	mov	r0, r3
 801da4e:	f004 f96e 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801da52:	4603      	mov	r3, r0
 801da54:	2b00      	cmp	r3, #0
 801da56:	d109      	bne.n	801da6c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801da58:	683b      	ldr	r3, [r7, #0]
 801da5a:	6a1b      	ldr	r3, [r3, #32]
 801da5c:	4618      	mov	r0, r3
 801da5e:	f004 f966 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801da62:	4603      	mov	r3, r0
 801da64:	2b00      	cmp	r3, #0
 801da66:	d101      	bne.n	801da6c <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801da68:	2301      	movs	r3, #1
 801da6a:	e000      	b.n	801da6e <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801da6c:	2300      	movs	r3, #0
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d00b      	beq.n	801da8a <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801da72:	683b      	ldr	r3, [r7, #0]
 801da74:	7b1b      	ldrb	r3, [r3, #12]
 801da76:	2b00      	cmp	r3, #0
 801da78:	d001      	beq.n	801da7e <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801da7a:	4b83      	ldr	r3, [pc, #524]	; (801dc88 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801da7c:	e000      	b.n	801da80 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801da7e:	4b83      	ldr	r3, [pc, #524]	; (801dc8c <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801da80:	4619      	mov	r1, r3
 801da82:	6878      	ldr	r0, [r7, #4]
 801da84:	f7f2 f8ca 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
 801da88:	e0e3      	b.n	801dc52 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	69db      	ldr	r3, [r3, #28]
 801da8e:	4618      	mov	r0, r3
 801da90:	f004 f94d 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801da94:	6778      	str	r0, [r7, #116]	; 0x74
 801da96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d069      	beq.n	801db70 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801da9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801daa0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801daa2:	4618      	mov	r0, r3
 801daa4:	f004 f89a 	bl	8021bdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801daa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801daac:	4618      	mov	r0, r3
 801daae:	f7f1 fff9 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801dab2:	4605      	mov	r5, r0
 801dab4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801dab8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801daba:	4618      	mov	r0, r3
 801dabc:	f004 f87b 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801dac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801dac4:	4618      	mov	r0, r3
 801dac6:	f7f1 ffed 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801daca:	4606      	mov	r6, r0
 801dacc:	683b      	ldr	r3, [r7, #0]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	33a4      	adds	r3, #164	; 0xa4
 801dad2:	681c      	ldr	r4, [r3, #0]
 801dad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801dad8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801dada:	4618      	mov	r0, r3
 801dadc:	f004 f86b 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801dae0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801dae4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801dae8:	6839      	ldr	r1, [r7, #0]
 801daea:	4618      	mov	r0, r3
 801daec:	47a0      	blx	r4
 801daee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801daf2:	4618      	mov	r0, r3
 801daf4:	f7f1 ffd6 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801daf8:	4603      	mov	r3, r0
 801dafa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801dafe:	9300      	str	r3, [sp, #0]
 801db00:	4633      	mov	r3, r6
 801db02:	462a      	mov	r2, r5
 801db04:	4962      	ldr	r1, [pc, #392]	; (801dc90 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801db06:	f7f2 fd01 	bl	801050c <_Z16StringFromFormatPKcz>
 801db0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db0e:	4619      	mov	r1, r3
 801db10:	6878      	ldr	r0, [r7, #4]
 801db12:	f7f2 f871 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801db16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801db1a:	4618      	mov	r0, r3
 801db1c:	f7f1 ffef 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801db20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801db24:	4618      	mov	r0, r3
 801db26:	f7f1 ffea 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801db2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801db2e:	4618      	mov	r0, r3
 801db30:	f7f1 ffe5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801db34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801db38:	4618      	mov	r0, r3
 801db3a:	f7f1 ffe0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801db3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801db42:	4618      	mov	r0, r3
 801db44:	f7f1 ffdb 	bl	800fafe <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801db48:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801db4a:	f003 fff9 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801db4e:	4603      	mov	r3, r0
 801db50:	2b00      	cmp	r3, #0
 801db52:	bf14      	ite	ne
 801db54:	2301      	movne	r3, #1
 801db56:	2300      	moveq	r3, #0
 801db58:	b2db      	uxtb	r3, r3
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d003      	beq.n	801db66 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801db5e:	494d      	ldr	r1, [pc, #308]	; (801dc94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801db60:	6878      	ldr	r0, [r7, #4]
 801db62:	f7f2 f85b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801db66:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801db68:	f003 ffea 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801db6c:	6778      	str	r0, [r7, #116]	; 0x74
 801db6e:	e792      	b.n	801da96 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	69db      	ldr	r3, [r3, #28]
 801db74:	4618      	mov	r0, r3
 801db76:	f004 f8da 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801db7a:	4603      	mov	r3, r0
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d009      	beq.n	801db94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801db80:	683b      	ldr	r3, [r7, #0]
 801db82:	6a1b      	ldr	r3, [r3, #32]
 801db84:	4618      	mov	r0, r3
 801db86:	f004 f8d2 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801db8a:	4603      	mov	r3, r0
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d001      	beq.n	801db94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801db90:	2301      	movs	r3, #1
 801db92:	e000      	b.n	801db96 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801db94:	2300      	movs	r3, #0
 801db96:	2b00      	cmp	r3, #0
 801db98:	d003      	beq.n	801dba2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801db9a:	493e      	ldr	r1, [pc, #248]	; (801dc94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801db9c:	6878      	ldr	r0, [r7, #4]
 801db9e:	f7f2 f83d 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	6a1b      	ldr	r3, [r3, #32]
 801dba6:	4618      	mov	r0, r3
 801dba8:	f004 f8c1 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801dbac:	6778      	str	r0, [r7, #116]	; 0x74
 801dbae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d046      	beq.n	801dc42 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801dbb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801dbb8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801dbba:	4618      	mov	r0, r3
 801dbbc:	f004 f80e 	bl	8021bdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801dbc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f7f1 ff6d 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801dbca:	4604      	mov	r4, r0
 801dbcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801dbd0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f003 ffef 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801dbd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f7f1 ff61 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801dbe2:	4603      	mov	r3, r0
 801dbe4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801dbe8:	4622      	mov	r2, r4
 801dbea:	492b      	ldr	r1, [pc, #172]	; (801dc98 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801dbec:	f7f2 fc8e 	bl	801050c <_Z16StringFromFormatPKcz>
 801dbf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801dbf4:	4619      	mov	r1, r3
 801dbf6:	6878      	ldr	r0, [r7, #4]
 801dbf8:	f7f1 fffe 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801dbfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801dc00:	4618      	mov	r0, r3
 801dc02:	f7f1 ff7c 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801dc06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	f7f1 ff77 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801dc10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801dc14:	4618      	mov	r0, r3
 801dc16:	f7f1 ff72 	bl	800fafe <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801dc1a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801dc1c:	f003 ff90 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801dc20:	4603      	mov	r3, r0
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	bf14      	ite	ne
 801dc26:	2301      	movne	r3, #1
 801dc28:	2300      	moveq	r3, #0
 801dc2a:	b2db      	uxtb	r3, r3
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d003      	beq.n	801dc38 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801dc30:	4918      	ldr	r1, [pc, #96]	; (801dc94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801dc32:	6878      	ldr	r0, [r7, #4]
 801dc34:	f7f1 fff2 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801dc38:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801dc3a:	f003 ff81 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801dc3e:	6778      	str	r0, [r7, #116]	; 0x74
 801dc40:	e7b5      	b.n	801dbae <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801dc42:	683b      	ldr	r3, [r7, #0]
 801dc44:	7b1b      	ldrb	r3, [r3, #12]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d003      	beq.n	801dc52 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801dc4a:	4914      	ldr	r1, [pc, #80]	; (801dc9c <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801dc4c:	6878      	ldr	r0, [r7, #4]
 801dc4e:	f7f1 ffe5 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801dc52:	683b      	ldr	r3, [r7, #0]
 801dc54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801dc56:	683b      	ldr	r3, [r7, #0]
 801dc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801dc5a:	2b01      	cmp	r3, #1
 801dc5c:	d101      	bne.n	801dc62 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801dc5e:	4c05      	ldr	r4, [pc, #20]	; (801dc74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801dc60:	e000      	b.n	801dc64 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801dc62:	4c0f      	ldr	r4, [pc, #60]	; (801dca0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801dc64:	683b      	ldr	r3, [r7, #0]
 801dc66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801dc68:	683a      	ldr	r2, [r7, #0]
 801dc6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801dc6c:	2a01      	cmp	r2, #1
 801dc6e:	d119      	bne.n	801dca4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801dc70:	4a00      	ldr	r2, [pc, #0]	; (801dc74 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801dc72:	e018      	b.n	801dca6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801dc74:	08029104 	.word	0x08029104
 801dc78:	08029178 	.word	0x08029178
 801dc7c:	08029190 	.word	0x08029190
 801dc80:	08029198 	.word	0x08029198
 801dc84:	080291b8 	.word	0x080291b8
 801dc88:	080291dc 	.word	0x080291dc
 801dc8c:	080291f4 	.word	0x080291f4
 801dc90:	08029204 	.word	0x08029204
 801dc94:	08029210 	.word	0x08029210
 801dc98:	08029214 	.word	0x08029214
 801dc9c:	08029224 	.word	0x08029224
 801dca0:	08029244 	.word	0x08029244
 801dca4:	4a0c      	ldr	r2, [pc, #48]	; (801dcd8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801dca6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801dcaa:	9201      	str	r2, [sp, #4]
 801dcac:	9300      	str	r3, [sp, #0]
 801dcae:	4623      	mov	r3, r4
 801dcb0:	460a      	mov	r2, r1
 801dcb2:	490a      	ldr	r1, [pc, #40]	; (801dcdc <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801dcb4:	f7f2 fc2a 	bl	801050c <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801dcb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801dcbc:	4619      	mov	r1, r3
 801dcbe:	6878      	ldr	r0, [r7, #4]
 801dcc0:	f7f1 ff9a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801dcc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801dcc8:	4618      	mov	r0, r3
 801dcca:	f7f1 ff18 	bl	800fafe <_ZN12SimpleStringD1Ev>

    return str;
 801dcce:	bf00      	nop
}
 801dcd0:	6878      	ldr	r0, [r7, #4]
 801dcd2:	377c      	adds	r7, #124	; 0x7c
 801dcd4:	46bd      	mov	sp, r7
 801dcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcd8:	08029244 	.word	0x08029244
 801dcdc:	08029248 	.word	0x08029248

0801dce0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801dce0:	b590      	push	{r4, r7, lr}
 801dce2:	b095      	sub	sp, #84	; 0x54
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
 801dce8:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801dcea:	496c      	ldr	r1, [pc, #432]	; (801de9c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801dcec:	6878      	ldr	r0, [r7, #4]
 801dcee:	f7f1 fb4e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	69db      	ldr	r3, [r3, #28]
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	f004 f819 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801dcfc:	64f8      	str	r0, [r7, #76]	; 0x4c
 801dcfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d05e      	beq.n	801ddc2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801dd04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dd06:	6838      	ldr	r0, [r7, #0]
 801dd08:	f000 f906 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801dd0c:	4603      	mov	r3, r0
 801dd0e:	4618      	mov	r0, r3
 801dd10:	f000 f938 	bl	801df84 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801dd14:	4603      	mov	r3, r0
 801dd16:	f083 0301 	eor.w	r3, r3, #1
 801dd1a:	b2db      	uxtb	r3, r3
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d04b      	beq.n	801ddb8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801dd20:	f107 030c 	add.w	r3, r7, #12
 801dd24:	495d      	ldr	r1, [pc, #372]	; (801de9c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801dd26:	4618      	mov	r0, r3
 801dd28:	f7f1 fb31 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801dd2c:	f107 030c 	add.w	r3, r7, #12
 801dd30:	4619      	mov	r1, r3
 801dd32:	6878      	ldr	r0, [r7, #4]
 801dd34:	f7f1 ff34 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	461c      	mov	r4, r3
 801dd3c:	f107 030c 	add.w	r3, r7, #12
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7f1 fedc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801dd46:	2c00      	cmp	r4, #0
 801dd48:	d003      	beq.n	801dd52 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801dd4a:	4955      	ldr	r1, [pc, #340]	; (801dea0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801dd4c:	6878      	ldr	r0, [r7, #4]
 801dd4e:	f7f1 ff65 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801dd52:	f107 031c 	add.w	r3, r7, #28
 801dd56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f003 ff3f 	bl	8021bdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801dd5e:	f107 031c 	add.w	r3, r7, #28
 801dd62:	4618      	mov	r0, r3
 801dd64:	f7f1 fe9e 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801dd68:	4604      	mov	r4, r0
 801dd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dd6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dd70:	4618      	mov	r0, r3
 801dd72:	f003 ff20 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801dd76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f7f1 fe92 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801dd80:	4603      	mov	r3, r0
 801dd82:	f107 0014 	add.w	r0, r7, #20
 801dd86:	4622      	mov	r2, r4
 801dd88:	4946      	ldr	r1, [pc, #280]	; (801dea4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801dd8a:	f7f2 fbbf 	bl	801050c <_Z16StringFromFormatPKcz>
 801dd8e:	f107 0314 	add.w	r3, r7, #20
 801dd92:	4619      	mov	r1, r3
 801dd94:	6878      	ldr	r0, [r7, #4]
 801dd96:	f7f1 ff2f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801dd9a:	f107 0314 	add.w	r3, r7, #20
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f7f1 fead 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801dda4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dda8:	4618      	mov	r0, r3
 801ddaa:	f7f1 fea8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ddae:	f107 031c 	add.w	r3, r7, #28
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	f7f1 fea3 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801ddb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ddba:	f003 fec1 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801ddbe:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ddc0:	e79d      	b.n	801dcfe <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801ddc2:	683b      	ldr	r3, [r7, #0]
 801ddc4:	6a1b      	ldr	r3, [r3, #32]
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f003 ffb1 	bl	8021d2e <_ZN18MockNamedValueList5beginEv>
 801ddcc:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ddce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	d05e      	beq.n	801de92 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801ddd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ddd6:	6838      	ldr	r0, [r7, #0]
 801ddd8:	f000 f89e 	bl	801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801dddc:	4603      	mov	r3, r0
 801ddde:	4618      	mov	r0, r3
 801dde0:	f000 f8d0 	bl	801df84 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801dde4:	4603      	mov	r3, r0
 801dde6:	f083 0301 	eor.w	r3, r3, #1
 801ddea:	b2db      	uxtb	r3, r3
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d04b      	beq.n	801de88 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801ddf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ddf4:	4929      	ldr	r1, [pc, #164]	; (801de9c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f7f1 fac9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ddfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801de00:	4619      	mov	r1, r3
 801de02:	6878      	ldr	r0, [r7, #4]
 801de04:	f7f1 fecc 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 801de08:	4603      	mov	r3, r0
 801de0a:	461c      	mov	r4, r3
 801de0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801de10:	4618      	mov	r0, r3
 801de12:	f7f1 fe74 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801de16:	2c00      	cmp	r4, #0
 801de18:	d003      	beq.n	801de22 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801de1a:	4921      	ldr	r1, [pc, #132]	; (801dea0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801de1c:	6878      	ldr	r0, [r7, #4]
 801de1e:	f7f1 fefd 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801de22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801de26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801de28:	4618      	mov	r0, r3
 801de2a:	f003 fed7 	bl	8021bdc <_ZNK22MockNamedValueListNode7getTypeEv>
 801de2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801de32:	4618      	mov	r0, r3
 801de34:	f7f1 fe36 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801de38:	4604      	mov	r4, r0
 801de3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801de3e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801de40:	4618      	mov	r0, r3
 801de42:	f003 feb8 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 801de46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801de4a:	4618      	mov	r0, r3
 801de4c:	f7f1 fe2a 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801de50:	4603      	mov	r3, r0
 801de52:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801de56:	4622      	mov	r2, r4
 801de58:	4912      	ldr	r1, [pc, #72]	; (801dea4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801de5a:	f7f2 fb57 	bl	801050c <_Z16StringFromFormatPKcz>
 801de5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801de62:	4619      	mov	r1, r3
 801de64:	6878      	ldr	r0, [r7, #4]
 801de66:	f7f1 fec7 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801de6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801de6e:	4618      	mov	r0, r3
 801de70:	f7f1 fe45 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801de74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801de78:	4618      	mov	r0, r3
 801de7a:	f7f1 fe40 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801de7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801de82:	4618      	mov	r0, r3
 801de84:	f7f1 fe3b 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801de88:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801de8a:	f003 fe59 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 801de8e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801de90:	e79d      	b.n	801ddce <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801de92:	bf00      	nop
}
 801de94:	6878      	ldr	r0, [r7, #4]
 801de96:	3754      	adds	r7, #84	; 0x54
 801de98:	46bd      	mov	sp, r7
 801de9a:	bd90      	pop	{r4, r7, pc}
 801de9c:	08029104 	.word	0x08029104
 801dea0:	08029210 	.word	0x08029210
 801dea4:	08029270 	.word	0x08029270

0801dea8 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801dea8:	b590      	push	{r4, r7, lr}
 801deaa:	b085      	sub	sp, #20
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
 801deb0:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801deb2:	f107 0308 	add.w	r3, r7, #8
 801deb6:	6879      	ldr	r1, [r7, #4]
 801deb8:	4618      	mov	r0, r3
 801deba:	f7fe ff0d 	bl	801ccd8 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801debe:	f107 0308 	add.w	r3, r7, #8
 801dec2:	4619      	mov	r1, r3
 801dec4:	6838      	ldr	r0, [r7, #0]
 801dec6:	f7f1 fe26 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801deca:	4603      	mov	r3, r0
 801decc:	461c      	mov	r4, r3
 801dece:	f107 0308 	add.w	r3, r7, #8
 801ded2:	4618      	mov	r0, r3
 801ded4:	f7f1 fe13 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ded8:	4623      	mov	r3, r4
}
 801deda:	4618      	mov	r0, r3
 801dedc:	3714      	adds	r7, #20
 801dede:	46bd      	mov	sp, r7
 801dee0:	bd90      	pop	{r4, r7, pc}

0801dee2 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801dee2:	b480      	push	{r7}
 801dee4:	b083      	sub	sp, #12
 801dee6:	af00      	add	r7, sp, #0
 801dee8:	6078      	str	r0, [r7, #4]
 801deea:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801def2:	f083 0301 	eor.w	r3, r3, #1
 801def6:	b2db      	uxtb	r3, r3
 801def8:	2b00      	cmp	r3, #0
 801defa:	d104      	bne.n	801df06 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df00:	683a      	ldr	r2, [r7, #0]
 801df02:	429a      	cmp	r2, r3
 801df04:	d101      	bne.n	801df0a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801df06:	2301      	movs	r3, #1
 801df08:	e000      	b.n	801df0c <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801df0a:	2300      	movs	r3, #0
}
 801df0c:	4618      	mov	r0, r3
 801df0e:	370c      	adds	r7, #12
 801df10:	46bd      	mov	sp, r7
 801df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df16:	4770      	bx	lr

0801df18 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801df18:	b580      	push	{r7, lr}
 801df1a:	b082      	sub	sp, #8
 801df1c:	af00      	add	r7, sp, #0
 801df1e:	6078      	str	r0, [r7, #4]
 801df20:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801df22:	6838      	ldr	r0, [r7, #0]
 801df24:	f003 fe18 	bl	8021b58 <_ZN22MockNamedValueListNode4itemEv>
 801df28:	4603      	mov	r3, r0
}
 801df2a:	4618      	mov	r0, r3
 801df2c:	3708      	adds	r7, #8
 801df2e:	46bd      	mov	sp, r7
 801df30:	bd80      	pop	{r7, pc}
	...

0801df34 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801df34:	b580      	push	{r7, lr}
 801df36:	b082      	sub	sp, #8
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
 801df3c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801df3e:	687b      	ldr	r3, [r7, #4]
 801df40:	6839      	ldr	r1, [r7, #0]
 801df42:	4618      	mov	r0, r3
 801df44:	f001 ff48 	bl	801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>
 801df48:	4a05      	ldr	r2, [pc, #20]	; (801df60 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	601a      	str	r2, [r3, #0]
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	2200      	movs	r2, #0
 801df52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	4618      	mov	r0, r3
 801df5a:	3708      	adds	r7, #8
 801df5c:	46bd      	mov	sp, r7
 801df5e:	bd80      	pop	{r7, pc}
 801df60:	0802c718 	.word	0x0802c718

0801df64 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801df64:	b480      	push	{r7}
 801df66:	b083      	sub	sp, #12
 801df68:	af00      	add	r7, sp, #0
 801df6a:	6078      	str	r0, [r7, #4]
 801df6c:	460b      	mov	r3, r1
 801df6e:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	78fa      	ldrb	r2, [r7, #3]
 801df74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801df78:	bf00      	nop
 801df7a:	370c      	adds	r7, #12
 801df7c:	46bd      	mov	sp, r7
 801df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df82:	4770      	bx	lr

0801df84 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801df84:	b480      	push	{r7}
 801df86:	b083      	sub	sp, #12
 801df88:	af00      	add	r7, sp, #0
 801df8a:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801df92:	4618      	mov	r0, r3
 801df94:	370c      	adds	r7, #12
 801df96:	46bd      	mov	sp, r7
 801df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df9c:	4770      	bx	lr
	...

0801dfa0 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
 801dfa8:	460b      	mov	r3, r1
 801dfaa:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	3328      	adds	r3, #40	; 0x28
 801dfb0:	4907      	ldr	r1, [pc, #28]	; (801dfd0 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f002 f9b4 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	3328      	adds	r3, #40	; 0x28
 801dfbc:	78fa      	ldrb	r2, [r7, #3]
 801dfbe:	4611      	mov	r1, r2
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f001 ff5b 	bl	801fe7c <_ZN14MockNamedValue8setValueEb>
    return *this;
 801dfc6:	687b      	ldr	r3, [r7, #4]
}
 801dfc8:	4618      	mov	r0, r3
 801dfca:	3708      	adds	r7, #8
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	bd80      	pop	{r7, pc}
 801dfd0:	08029278 	.word	0x08029278

0801dfd4 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b082      	sub	sp, #8
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
 801dfdc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	3328      	adds	r3, #40	; 0x28
 801dfe2:	4907      	ldr	r1, [pc, #28]	; (801e000 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801dfe4:	4618      	mov	r0, r3
 801dfe6:	f002 f99b 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	3328      	adds	r3, #40	; 0x28
 801dfee:	6839      	ldr	r1, [r7, #0]
 801dff0:	4618      	mov	r0, r3
 801dff2:	f001 ff67 	bl	801fec4 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801dff6:	687b      	ldr	r3, [r7, #4]
}
 801dff8:	4618      	mov	r0, r3
 801dffa:	3708      	adds	r7, #8
 801dffc:	46bd      	mov	sp, r7
 801dffe:	bd80      	pop	{r7, pc}
 801e000:	08029278 	.word	0x08029278

0801e004 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801e004:	b580      	push	{r7, lr}
 801e006:	b082      	sub	sp, #8
 801e008:	af00      	add	r7, sp, #0
 801e00a:	6078      	str	r0, [r7, #4]
 801e00c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	3328      	adds	r3, #40	; 0x28
 801e012:	4907      	ldr	r1, [pc, #28]	; (801e030 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801e014:	4618      	mov	r0, r3
 801e016:	f002 f983 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	3328      	adds	r3, #40	; 0x28
 801e01e:	6839      	ldr	r1, [r7, #0]
 801e020:	4618      	mov	r0, r3
 801e022:	f001 ff71 	bl	801ff08 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801e026:	687b      	ldr	r3, [r7, #4]
}
 801e028:	4618      	mov	r0, r3
 801e02a:	3708      	adds	r7, #8
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}
 801e030:	08029278 	.word	0x08029278

0801e034 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801e034:	b580      	push	{r7, lr}
 801e036:	b082      	sub	sp, #8
 801e038:	af00      	add	r7, sp, #0
 801e03a:	6078      	str	r0, [r7, #4]
 801e03c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	3328      	adds	r3, #40	; 0x28
 801e042:	4907      	ldr	r1, [pc, #28]	; (801e060 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801e044:	4618      	mov	r0, r3
 801e046:	f002 f96b 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	3328      	adds	r3, #40	; 0x28
 801e04e:	6839      	ldr	r1, [r7, #0]
 801e050:	4618      	mov	r0, r3
 801e052:	f001 ff7b 	bl	801ff4c <_ZN14MockNamedValue8setValueEl>
    return *this;
 801e056:	687b      	ldr	r3, [r7, #4]
}
 801e058:	4618      	mov	r0, r3
 801e05a:	3708      	adds	r7, #8
 801e05c:	46bd      	mov	sp, r7
 801e05e:	bd80      	pop	{r7, pc}
 801e060:	08029278 	.word	0x08029278

0801e064 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b082      	sub	sp, #8
 801e068:	af00      	add	r7, sp, #0
 801e06a:	6078      	str	r0, [r7, #4]
 801e06c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	3328      	adds	r3, #40	; 0x28
 801e072:	4907      	ldr	r1, [pc, #28]	; (801e090 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801e074:	4618      	mov	r0, r3
 801e076:	f002 f953 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	3328      	adds	r3, #40	; 0x28
 801e07e:	6839      	ldr	r1, [r7, #0]
 801e080:	4618      	mov	r0, r3
 801e082:	f001 ff85 	bl	801ff90 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801e086:	687b      	ldr	r3, [r7, #4]
}
 801e088:	4618      	mov	r0, r3
 801e08a:	3708      	adds	r7, #8
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd80      	pop	{r7, pc}
 801e090:	08029278 	.word	0x08029278

0801e094 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801e094:	b5b0      	push	{r4, r5, r7, lr}
 801e096:	b086      	sub	sp, #24
 801e098:	af02      	add	r7, sp, #8
 801e09a:	60f8      	str	r0, [r7, #12]
 801e09c:	1d3b      	adds	r3, r7, #4
 801e09e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801e0a2:	f7f8 fd57 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	6823      	ldr	r3, [r4, #0]
 801e0aa:	3368      	adds	r3, #104	; 0x68
 801e0ac:	681d      	ldr	r5, [r3, #0]
 801e0ae:	f7f8 fd61 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e0b2:	4603      	mov	r3, r0
 801e0b4:	9300      	str	r3, [sp, #0]
 801e0b6:	f240 2319 	movw	r3, #537	; 0x219
 801e0ba:	4a04      	ldr	r2, [pc, #16]	; (801e0cc <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801e0bc:	4904      	ldr	r1, [pc, #16]	; (801e0d0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801e0be:	4620      	mov	r0, r4
 801e0c0:	47a8      	blx	r5
    return *this;
 801e0c2:	68fb      	ldr	r3, [r7, #12]
}
 801e0c4:	4618      	mov	r0, r3
 801e0c6:	3710      	adds	r7, #16
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bdb0      	pop	{r4, r5, r7, pc}
 801e0cc:	08029108 	.word	0x08029108
 801e0d0:	08029124 	.word	0x08029124

0801e0d4 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801e0d4:	b5b0      	push	{r4, r5, r7, lr}
 801e0d6:	b086      	sub	sp, #24
 801e0d8:	af02      	add	r7, sp, #8
 801e0da:	60f8      	str	r0, [r7, #12]
 801e0dc:	1d3b      	adds	r3, r7, #4
 801e0de:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801e0e2:	f7f8 fd37 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801e0e6:	4604      	mov	r4, r0
 801e0e8:	6823      	ldr	r3, [r4, #0]
 801e0ea:	3368      	adds	r3, #104	; 0x68
 801e0ec:	681d      	ldr	r5, [r3, #0]
 801e0ee:	f7f8 fd41 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	9300      	str	r3, [sp, #0]
 801e0f6:	f240 231f 	movw	r3, #543	; 0x21f
 801e0fa:	4a04      	ldr	r2, [pc, #16]	; (801e10c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801e0fc:	4904      	ldr	r1, [pc, #16]	; (801e110 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801e0fe:	4620      	mov	r0, r4
 801e100:	47a8      	blx	r5
    return *this;
 801e102:	68fb      	ldr	r3, [r7, #12]
}
 801e104:	4618      	mov	r0, r3
 801e106:	3710      	adds	r7, #16
 801e108:	46bd      	mov	sp, r7
 801e10a:	bdb0      	pop	{r4, r5, r7, pc}
 801e10c:	08029108 	.word	0x08029108
 801e110:	08029144 	.word	0x08029144

0801e114 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801e114:	b580      	push	{r7, lr}
 801e116:	b082      	sub	sp, #8
 801e118:	af00      	add	r7, sp, #0
 801e11a:	6078      	str	r0, [r7, #4]
 801e11c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	3328      	adds	r3, #40	; 0x28
 801e122:	4907      	ldr	r1, [pc, #28]	; (801e140 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801e124:	4618      	mov	r0, r3
 801e126:	f002 f8fb 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	3328      	adds	r3, #40	; 0x28
 801e12e:	6839      	ldr	r1, [r7, #0]
 801e130:	4618      	mov	r0, r3
 801e132:	f002 f837 	bl	80201a4 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801e136:	687b      	ldr	r3, [r7, #4]
}
 801e138:	4618      	mov	r0, r3
 801e13a:	3708      	adds	r7, #8
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}
 801e140:	08029278 	.word	0x08029278

0801e144 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801e144:	b580      	push	{r7, lr}
 801e146:	b084      	sub	sp, #16
 801e148:	af00      	add	r7, sp, #0
 801e14a:	60f8      	str	r0, [r7, #12]
 801e14c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	3328      	adds	r3, #40	; 0x28
 801e154:	4907      	ldr	r1, [pc, #28]	; (801e174 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801e156:	4618      	mov	r0, r3
 801e158:	f002 f8e2 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	3328      	adds	r3, #40	; 0x28
 801e160:	ed97 0b00 	vldr	d0, [r7]
 801e164:	4618      	mov	r0, r3
 801e166:	f001 ff73 	bl	8020050 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801e16a:	68fb      	ldr	r3, [r7, #12]
}
 801e16c:	4618      	mov	r0, r3
 801e16e:	3710      	adds	r7, #16
 801e170:	46bd      	mov	sp, r7
 801e172:	bd80      	pop	{r7, pc}
 801e174:	08029278 	.word	0x08029278

0801e178 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801e178:	b580      	push	{r7, lr}
 801e17a:	b082      	sub	sp, #8
 801e17c:	af00      	add	r7, sp, #0
 801e17e:	6078      	str	r0, [r7, #4]
 801e180:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	3328      	adds	r3, #40	; 0x28
 801e186:	4907      	ldr	r1, [pc, #28]	; (801e1a4 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801e188:	4618      	mov	r0, r3
 801e18a:	f002 f8c9 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	3328      	adds	r3, #40	; 0x28
 801e192:	6839      	ldr	r1, [r7, #0]
 801e194:	4618      	mov	r0, r3
 801e196:	f001 ff9f 	bl	80200d8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801e19a:	687b      	ldr	r3, [r7, #4]
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	3708      	adds	r7, #8
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}
 801e1a4:	08029278 	.word	0x08029278

0801e1a8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b082      	sub	sp, #8
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	3328      	adds	r3, #40	; 0x28
 801e1b6:	4907      	ldr	r1, [pc, #28]	; (801e1d4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	f002 f8b1 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	3328      	adds	r3, #40	; 0x28
 801e1c2:	6839      	ldr	r1, [r7, #0]
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	f001 ffa9 	bl	802011c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801e1ca:	687b      	ldr	r3, [r7, #4]
}
 801e1cc:	4618      	mov	r0, r3
 801e1ce:	3708      	adds	r7, #8
 801e1d0:	46bd      	mov	sp, r7
 801e1d2:	bd80      	pop	{r7, pc}
 801e1d4:	08029278 	.word	0x08029278

0801e1d8 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b082      	sub	sp, #8
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	6078      	str	r0, [r7, #4]
 801e1e0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	3328      	adds	r3, #40	; 0x28
 801e1e6:	4907      	ldr	r1, [pc, #28]	; (801e204 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	f002 f899 	bl	8020320 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	3328      	adds	r3, #40	; 0x28
 801e1f2:	6839      	ldr	r1, [r7, #0]
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f001 ffb3 	bl	8020160 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801e1fa:	687b      	ldr	r3, [r7, #4]
}
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	3708      	adds	r7, #8
 801e200:	46bd      	mov	sp, r7
 801e202:	bd80      	pop	{r7, pc}
 801e204:	08029278 	.word	0x08029278

0801e208 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801e208:	b480      	push	{r7}
 801e20a:	b083      	sub	sp, #12
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
 801e210:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	2201      	movs	r2, #1
 801e216:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	2200      	movs	r2, #0
 801e21e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	683a      	ldr	r2, [r7, #0]
 801e226:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801e228:	687b      	ldr	r3, [r7, #4]
}
 801e22a:	4618      	mov	r0, r3
 801e22c:	370c      	adds	r7, #12
 801e22e:	46bd      	mov	sp, r7
 801e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e234:	4770      	bx	lr

0801e236 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801e236:	b580      	push	{r7, lr}
 801e238:	b082      	sub	sp, #8
 801e23a:	af00      	add	r7, sp, #0
 801e23c:	6078      	str	r0, [r7, #4]
 801e23e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801e240:	683b      	ldr	r3, [r7, #0]
 801e242:	3328      	adds	r3, #40	; 0x28
 801e244:	4619      	mov	r1, r3
 801e246:	6878      	ldr	r0, [r7, #4]
 801e248:	f7ef f946 	bl	800d4d8 <_ZN14MockNamedValueC1ERKS_>
}
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	3708      	adds	r7, #8
 801e250:	46bd      	mov	sp, r7
 801e252:	bd80      	pop	{r7, pc}

0801e254 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801e254:	b480      	push	{r7}
 801e256:	b085      	sub	sp, #20
 801e258:	af00      	add	r7, sp, #0
 801e25a:	60f8      	str	r0, [r7, #12]
 801e25c:	60b9      	str	r1, [r7, #8]
 801e25e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	68ba      	ldr	r2, [r7, #8]
 801e264:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	687a      	ldr	r2, [r7, #4]
 801e26a:	615a      	str	r2, [r3, #20]
    return *this;
 801e26c:	68fb      	ldr	r3, [r7, #12]
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3714      	adds	r7, #20
 801e272:	46bd      	mov	sp, r7
 801e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e278:	4770      	bx	lr

0801e27a <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801e27a:	b480      	push	{r7}
 801e27c:	b083      	sub	sp, #12
 801e27e:	af00      	add	r7, sp, #0
 801e280:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	7e1b      	ldrb	r3, [r3, #24]
}
 801e286:	4618      	mov	r0, r3
 801e288:	370c      	adds	r7, #12
 801e28a:	46bd      	mov	sp, r7
 801e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e290:	4770      	bx	lr

0801e292 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801e292:	b480      	push	{r7}
 801e294:	b083      	sub	sp, #12
 801e296:	af00      	add	r7, sp, #0
 801e298:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801e29e:	4618      	mov	r0, r3
 801e2a0:	370c      	adds	r7, #12
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2a8:	4770      	bx	lr
	...

0801e2ac <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801e2ac:	b580      	push	{r7, lr}
 801e2ae:	b082      	sub	sp, #8
 801e2b0:	af00      	add	r7, sp, #0
 801e2b2:	6078      	str	r0, [r7, #4]
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7fe fcce 	bl	801cc58 <_ZN16MockExpectedCallC1Ev>
 801e2bc:	4a03      	ldr	r2, [pc, #12]	; (801e2cc <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	601a      	str	r2, [r3, #0]
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	3708      	adds	r7, #8
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}
 801e2cc:	0802c578 	.word	0x0802c578

0801e2d0 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	af00      	add	r7, sp, #0
 801e2d4:	4801      	ldr	r0, [pc, #4]	; (801e2dc <__tcf_0+0xc>)
 801e2d6:	f000 f831 	bl	801e33c <_ZN23MockIgnoredExpectedCallD1Ev>
 801e2da:	bd80      	pop	{r7, pc}
 801e2dc:	20001054 	.word	0x20001054

0801e2e0 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801e2e0:	b580      	push	{r7, lr}
 801e2e2:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801e2e4:	4b12      	ldr	r3, [pc, #72]	; (801e330 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801e2e6:	781b      	ldrb	r3, [r3, #0]
 801e2e8:	f3bf 8f5b 	dmb	ish
 801e2ec:	b2db      	uxtb	r3, r3
 801e2ee:	f003 0301 	and.w	r3, r3, #1
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	bf0c      	ite	eq
 801e2f6:	2301      	moveq	r3, #1
 801e2f8:	2300      	movne	r3, #0
 801e2fa:	b2db      	uxtb	r3, r3
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d013      	beq.n	801e328 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801e300:	480b      	ldr	r0, [pc, #44]	; (801e330 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801e302:	f003 ff05 	bl	8022110 <__cxa_guard_acquire>
 801e306:	4603      	mov	r3, r0
 801e308:	2b00      	cmp	r3, #0
 801e30a:	bf14      	ite	ne
 801e30c:	2301      	movne	r3, #1
 801e30e:	2300      	moveq	r3, #0
 801e310:	b2db      	uxtb	r3, r3
 801e312:	2b00      	cmp	r3, #0
 801e314:	d008      	beq.n	801e328 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801e316:	4807      	ldr	r0, [pc, #28]	; (801e334 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801e318:	f7ff ffc8 	bl	801e2ac <_ZN23MockIgnoredExpectedCallC1Ev>
 801e31c:	4804      	ldr	r0, [pc, #16]	; (801e330 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801e31e:	f003 ff03 	bl	8022128 <__cxa_guard_release>
 801e322:	4805      	ldr	r0, [pc, #20]	; (801e338 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801e324:	f003 ff27 	bl	8022176 <atexit>
    return call;
 801e328:	4b02      	ldr	r3, [pc, #8]	; (801e334 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801e32a:	4618      	mov	r0, r3
 801e32c:	bd80      	pop	{r7, pc}
 801e32e:	bf00      	nop
 801e330:	20001058 	.word	0x20001058
 801e334:	20001054 	.word	0x20001054
 801e338:	0801e2d1 	.word	0x0801e2d1

0801e33c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801e33c:	b580      	push	{r7, lr}
 801e33e:	b082      	sub	sp, #8
 801e340:	af00      	add	r7, sp, #0
 801e342:	6078      	str	r0, [r7, #4]
 801e344:	4a05      	ldr	r2, [pc, #20]	; (801e35c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	601a      	str	r2, [r3, #0]
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	4618      	mov	r0, r3
 801e34e:	f7fe fc93 	bl	801cc78 <_ZN16MockExpectedCallD1Ev>
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	4618      	mov	r0, r3
 801e356:	3708      	adds	r7, #8
 801e358:	46bd      	mov	sp, r7
 801e35a:	bd80      	pop	{r7, pc}
 801e35c:	0802c578 	.word	0x0802c578

0801e360 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801e360:	b580      	push	{r7, lr}
 801e362:	b082      	sub	sp, #8
 801e364:	af00      	add	r7, sp, #0
 801e366:	6078      	str	r0, [r7, #4]
 801e368:	6878      	ldr	r0, [r7, #4]
 801e36a:	f7ff ffe7 	bl	801e33c <_ZN23MockIgnoredExpectedCallD1Ev>
 801e36e:	2104      	movs	r1, #4
 801e370:	6878      	ldr	r0, [r7, #4]
 801e372:	f7ee fc5d 	bl	800cc30 <_ZdlPvj>
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	4618      	mov	r0, r3
 801e37a:	3708      	adds	r7, #8
 801e37c:	46bd      	mov	sp, r7
 801e37e:	bd80      	pop	{r7, pc}

0801e380 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801e380:	b580      	push	{r7, lr}
 801e382:	b082      	sub	sp, #8
 801e384:	af00      	add	r7, sp, #0
 801e386:	6078      	str	r0, [r7, #4]
 801e388:	4a05      	ldr	r2, [pc, #20]	; (801e3a0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801e38a:	687b      	ldr	r3, [r7, #4]
 801e38c:	601a      	str	r2, [r3, #0]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	4618      	mov	r0, r3
 801e392:	f001 fd4b 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	4618      	mov	r0, r3
 801e39a:	3708      	adds	r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}
 801e3a0:	0802c718 	.word	0x0802c718

0801e3a4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801e3a4:	b580      	push	{r7, lr}
 801e3a6:	b082      	sub	sp, #8
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	6078      	str	r0, [r7, #4]
 801e3ac:	6878      	ldr	r0, [r7, #4]
 801e3ae:	f7ff ffe7 	bl	801e380 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801e3b2:	2138      	movs	r1, #56	; 0x38
 801e3b4:	6878      	ldr	r0, [r7, #4]
 801e3b6:	f7ee fc3b 	bl	800cc30 <_ZdlPvj>
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	4618      	mov	r0, r3
 801e3be:	3708      	adds	r7, #8
 801e3c0:	46bd      	mov	sp, r7
 801e3c2:	bd80      	pop	{r7, pc}

0801e3c4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801e3c4:	b480      	push	{r7}
 801e3c6:	b083      	sub	sp, #12
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
 801e3cc:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	683a      	ldr	r2, [r7, #0]
 801e3d2:	601a      	str	r2, [r3, #0]
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	605a      	str	r2, [r3, #4]
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	4618      	mov	r0, r3
 801e3de:	370c      	adds	r7, #12
 801e3e0:	46bd      	mov	sp, r7
 801e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3e6:	4770      	bx	lr

0801e3e8 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801e3e8:	b480      	push	{r7}
 801e3ea:	b083      	sub	sp, #12
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
 801e3f0:	4a06      	ldr	r2, [pc, #24]	; (801e40c <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	601a      	str	r2, [r3, #0]
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	2200      	movs	r2, #0
 801e3fa:	605a      	str	r2, [r3, #4]
{
}
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	4618      	mov	r0, r3
 801e400:	370c      	adds	r7, #12
 801e402:	46bd      	mov	sp, r7
 801e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e408:	4770      	bx	lr
 801e40a:	bf00      	nop
 801e40c:	0802c86c 	.word	0x0802c86c

0801e410 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801e410:	b580      	push	{r7, lr}
 801e412:	b084      	sub	sp, #16
 801e414:	af00      	add	r7, sp, #0
 801e416:	6078      	str	r0, [r7, #4]
 801e418:	4a0d      	ldr	r2, [pc, #52]	; (801e450 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	685b      	ldr	r3, [r3, #4]
 801e422:	2b00      	cmp	r3, #0
 801e424:	d00f      	beq.n	801e446 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	685b      	ldr	r3, [r3, #4]
 801e42a:	685b      	ldr	r3, [r3, #4]
 801e42c:	60fb      	str	r3, [r7, #12]
        delete head_;
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	685b      	ldr	r3, [r3, #4]
 801e432:	2b00      	cmp	r3, #0
 801e434:	d003      	beq.n	801e43e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801e436:	2108      	movs	r1, #8
 801e438:	4618      	mov	r0, r3
 801e43a:	f7ee fbf9 	bl	800cc30 <_ZdlPvj>
        head_ = next;
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	68fa      	ldr	r2, [r7, #12]
 801e442:	605a      	str	r2, [r3, #4]
    while (head_) {
 801e444:	e7eb      	b.n	801e41e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	4618      	mov	r0, r3
 801e44a:	3710      	adds	r7, #16
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bd80      	pop	{r7, pc}
 801e450:	0802c86c 	.word	0x0802c86c

0801e454 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801e454:	b580      	push	{r7, lr}
 801e456:	b082      	sub	sp, #8
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
}
 801e45c:	6878      	ldr	r0, [r7, #4]
 801e45e:	f7ff ffd7 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
 801e462:	2108      	movs	r1, #8
 801e464:	6878      	ldr	r0, [r7, #4]
 801e466:	f7ee fbe3 	bl	800cc30 <_ZdlPvj>
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	4618      	mov	r0, r3
 801e46e:	3708      	adds	r7, #8
 801e470:	46bd      	mov	sp, r7
 801e472:	bd80      	pop	{r7, pc}

0801e474 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801e474:	b580      	push	{r7, lr}
 801e476:	b084      	sub	sp, #16
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	60fb      	str	r3, [r7, #12]
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	2b00      	cmp	r3, #0
 801e486:	d011      	beq.n	801e4ac <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	681a      	ldr	r2, [r3, #0]
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	33d4      	adds	r3, #212	; 0xd4
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	4610      	mov	r0, r2
 801e498:	4798      	blx	r3
 801e49a:	4603      	mov	r3, r0
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d001      	beq.n	801e4a4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801e4a0:	2301      	movs	r3, #1
 801e4a2:	e004      	b.n	801e4ae <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	685b      	ldr	r3, [r3, #4]
 801e4a8:	60fb      	str	r3, [r7, #12]
 801e4aa:	e7ea      	b.n	801e482 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801e4ac:	2300      	movs	r3, #0
}
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	3710      	adds	r7, #16
 801e4b2:	46bd      	mov	sp, r7
 801e4b4:	bd80      	pop	{r7, pc}

0801e4b6 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801e4b6:	b480      	push	{r7}
 801e4b8:	b085      	sub	sp, #20
 801e4ba:	af00      	add	r7, sp, #0
 801e4bc:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801e4be:	2300      	movs	r3, #0
 801e4c0:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	685b      	ldr	r3, [r3, #4]
 801e4c6:	60bb      	str	r3, [r7, #8]
 801e4c8:	68bb      	ldr	r3, [r7, #8]
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d006      	beq.n	801e4dc <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4d4:	68bb      	ldr	r3, [r7, #8]
 801e4d6:	685b      	ldr	r3, [r3, #4]
 801e4d8:	60bb      	str	r3, [r7, #8]
 801e4da:	e7f5      	b.n	801e4c8 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
}
 801e4de:	4618      	mov	r0, r3
 801e4e0:	3714      	adds	r7, #20
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4e8:	4770      	bx	lr

0801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801e4ea:	b480      	push	{r7}
 801e4ec:	b083      	sub	sp, #12
 801e4ee:	af00      	add	r7, sp, #0
 801e4f0:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	685b      	ldr	r3, [r3, #4]
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	bf0c      	ite	eq
 801e4fa:	2301      	moveq	r3, #1
 801e4fc:	2300      	movne	r3, #0
 801e4fe:	b2db      	uxtb	r3, r3
}
 801e500:	4618      	mov	r0, r3
 801e502:	370c      	adds	r7, #12
 801e504:	46bd      	mov	sp, r7
 801e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e50a:	4770      	bx	lr

0801e50c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801e50c:	b580      	push	{r7, lr}
 801e50e:	b084      	sub	sp, #16
 801e510:	af00      	add	r7, sp, #0
 801e512:	6078      	str	r0, [r7, #4]
 801e514:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801e516:	2300      	movs	r3, #0
 801e518:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	685b      	ldr	r3, [r3, #4]
 801e51e:	60bb      	str	r3, [r7, #8]
 801e520:	68bb      	ldr	r3, [r7, #8]
 801e522:	2b00      	cmp	r3, #0
 801e524:	d01d      	beq.n	801e562 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801e526:	68bb      	ldr	r3, [r7, #8]
 801e528:	681a      	ldr	r2, [r3, #0]
 801e52a:	68bb      	ldr	r3, [r7, #8]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	33b8      	adds	r3, #184	; 0xb8
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	6839      	ldr	r1, [r7, #0]
 801e536:	4610      	mov	r0, r2
 801e538:	4798      	blx	r3
 801e53a:	4603      	mov	r3, r0
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d00c      	beq.n	801e55a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801e540:	68bb      	ldr	r3, [r7, #8]
 801e542:	681a      	ldr	r2, [r3, #0]
 801e544:	68bb      	ldr	r3, [r7, #8]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	33f8      	adds	r3, #248	; 0xf8
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	4610      	mov	r0, r2
 801e550:	4798      	blx	r3
 801e552:	4602      	mov	r2, r0
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	4413      	add	r3, r2
 801e558:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e55a:	68bb      	ldr	r3, [r7, #8]
 801e55c:	685b      	ldr	r3, [r3, #4]
 801e55e:	60bb      	str	r3, [r7, #8]
 801e560:	e7de      	b.n	801e520 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801e562:	68fb      	ldr	r3, [r7, #12]
}
 801e564:	4618      	mov	r0, r3
 801e566:	3710      	adds	r7, #16
 801e568:	46bd      	mov	sp, r7
 801e56a:	bd80      	pop	{r7, pc}

0801e56c <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801e56c:	b580      	push	{r7, lr}
 801e56e:	b084      	sub	sp, #16
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801e574:	2300      	movs	r3, #0
 801e576:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	685b      	ldr	r3, [r3, #4]
 801e57c:	60bb      	str	r3, [r7, #8]
 801e57e:	68bb      	ldr	r3, [r7, #8]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d015      	beq.n	801e5b0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801e584:	68bb      	ldr	r3, [r7, #8]
 801e586:	681a      	ldr	r2, [r3, #0]
 801e588:	68bb      	ldr	r3, [r7, #8]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	33c0      	adds	r3, #192	; 0xc0
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4610      	mov	r0, r2
 801e594:	4798      	blx	r3
 801e596:	4603      	mov	r3, r0
 801e598:	f083 0301 	eor.w	r3, r3, #1
 801e59c:	b2db      	uxtb	r3, r3
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d002      	beq.n	801e5a8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	3301      	adds	r3, #1
 801e5a6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e5a8:	68bb      	ldr	r3, [r7, #8]
 801e5aa:	685b      	ldr	r3, [r3, #4]
 801e5ac:	60bb      	str	r3, [r7, #8]
 801e5ae:	e7e6      	b.n	801e57e <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801e5b0:	68fb      	ldr	r3, [r7, #12]
}
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	3710      	adds	r7, #16
 801e5b6:	46bd      	mov	sp, r7
 801e5b8:	bd80      	pop	{r7, pc}

0801e5ba <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801e5ba:	b580      	push	{r7, lr}
 801e5bc:	b084      	sub	sp, #16
 801e5be:	af00      	add	r7, sp, #0
 801e5c0:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	685b      	ldr	r3, [r3, #4]
 801e5c6:	60fb      	str	r3, [r7, #12]
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d011      	beq.n	801e5f2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	681a      	ldr	r2, [r3, #0]
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	33c8      	adds	r3, #200	; 0xc8
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	4610      	mov	r0, r2
 801e5de:	4798      	blx	r3
 801e5e0:	4603      	mov	r3, r0
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d001      	beq.n	801e5ea <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801e5e6:	2301      	movs	r3, #1
 801e5e8:	e004      	b.n	801e5f4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e5ea:	68fb      	ldr	r3, [r7, #12]
 801e5ec:	685b      	ldr	r3, [r3, #4]
 801e5ee:	60fb      	str	r3, [r7, #12]
 801e5f0:	e7ea      	b.n	801e5c8 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801e5f2:	2300      	movs	r3, #0
}
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	3710      	adds	r7, #16
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	bd80      	pop	{r7, pc}

0801e5fc <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801e5fc:	b580      	push	{r7, lr}
 801e5fe:	b084      	sub	sp, #16
 801e600:	af00      	add	r7, sp, #0
 801e602:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	685b      	ldr	r3, [r3, #4]
 801e608:	60fb      	str	r3, [r7, #12]
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d014      	beq.n	801e63a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	681a      	ldr	r2, [r3, #0]
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	33c0      	adds	r3, #192	; 0xc0
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	4610      	mov	r0, r2
 801e620:	4798      	blx	r3
 801e622:	4603      	mov	r3, r0
 801e624:	f083 0301 	eor.w	r3, r3, #1
 801e628:	b2db      	uxtb	r3, r3
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	d001      	beq.n	801e632 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801e62e:	2301      	movs	r3, #1
 801e630:	e004      	b.n	801e63c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	685b      	ldr	r3, [r3, #4]
 801e636:	60fb      	str	r3, [r7, #12]
 801e638:	e7e7      	b.n	801e60a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801e63a:	2300      	movs	r3, #0
}
 801e63c:	4618      	mov	r0, r3
 801e63e:	3710      	adds	r7, #16
 801e640:	46bd      	mov	sp, r7
 801e642:	bd80      	pop	{r7, pc}

0801e644 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801e644:	b580      	push	{r7, lr}
 801e646:	b084      	sub	sp, #16
 801e648:	af00      	add	r7, sp, #0
 801e64a:	6078      	str	r0, [r7, #4]
 801e64c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	685b      	ldr	r3, [r3, #4]
 801e652:	60fb      	str	r3, [r7, #12]
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d012      	beq.n	801e680 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	681a      	ldr	r2, [r3, #0]
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	33b8      	adds	r3, #184	; 0xb8
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	6839      	ldr	r1, [r7, #0]
 801e66a:	4610      	mov	r0, r2
 801e66c:	4798      	blx	r3
 801e66e:	4603      	mov	r3, r0
 801e670:	2b00      	cmp	r3, #0
 801e672:	d001      	beq.n	801e678 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801e674:	2301      	movs	r3, #1
 801e676:	e004      	b.n	801e682 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	685b      	ldr	r3, [r3, #4]
 801e67c:	60fb      	str	r3, [r7, #12]
 801e67e:	e7e9      	b.n	801e654 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801e680:	2300      	movs	r3, #0
}
 801e682:	4618      	mov	r0, r3
 801e684:	3710      	adds	r7, #16
 801e686:	46bd      	mov	sp, r7
 801e688:	bd80      	pop	{r7, pc}
	...

0801e68c <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801e68c:	b590      	push	{r4, r7, lr}
 801e68e:	b085      	sub	sp, #20
 801e690:	af00      	add	r7, sp, #0
 801e692:	6078      	str	r0, [r7, #4]
 801e694:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801e696:	2273      	movs	r2, #115	; 0x73
 801e698:	4911      	ldr	r1, [pc, #68]	; (801e6e0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801e69a:	2008      	movs	r0, #8
 801e69c:	f7ee fab4 	bl	800cc08 <_ZnwjPKci>
 801e6a0:	4604      	mov	r4, r0
 801e6a2:	6839      	ldr	r1, [r7, #0]
 801e6a4:	4620      	mov	r0, r4
 801e6a6:	f7ff fe8d 	bl	801e3c4 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801e6aa:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	685b      	ldr	r3, [r3, #4]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d103      	bne.n	801e6bc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	68ba      	ldr	r2, [r7, #8]
 801e6b8:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801e6ba:	e00d      	b.n	801e6d8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801e6c2:	68fb      	ldr	r3, [r7, #12]
 801e6c4:	685b      	ldr	r3, [r3, #4]
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d003      	beq.n	801e6d2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	685b      	ldr	r3, [r3, #4]
 801e6ce:	60fb      	str	r3, [r7, #12]
 801e6d0:	e7f7      	b.n	801e6c2 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	68ba      	ldr	r2, [r7, #8]
 801e6d6:	605a      	str	r2, [r3, #4]
}
 801e6d8:	bf00      	nop
 801e6da:	3714      	adds	r7, #20
 801e6dc:	46bd      	mov	sp, r7
 801e6de:	bd90      	pop	{r4, r7, pc}
 801e6e0:	08029284 	.word	0x08029284

0801e6e4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801e6e4:	b580      	push	{r7, lr}
 801e6e6:	b084      	sub	sp, #16
 801e6e8:	af00      	add	r7, sp, #0
 801e6ea:	6078      	str	r0, [r7, #4]
 801e6ec:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e6ee:	683b      	ldr	r3, [r7, #0]
 801e6f0:	685b      	ldr	r3, [r3, #4]
 801e6f2:	60fb      	str	r3, [r7, #12]
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d018      	beq.n	801e72c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	681a      	ldr	r2, [r3, #0]
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	33c4      	adds	r3, #196	; 0xc4
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	4610      	mov	r0, r2
 801e70a:	4798      	blx	r3
 801e70c:	4603      	mov	r3, r0
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d008      	beq.n	801e724 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	3330      	adds	r3, #48	; 0x30
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	68fa      	ldr	r2, [r7, #12]
 801e71c:	6812      	ldr	r2, [r2, #0]
 801e71e:	4611      	mov	r1, r2
 801e720:	6878      	ldr	r0, [r7, #4]
 801e722:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	60fb      	str	r3, [r7, #12]
 801e72a:	e7e3      	b.n	801e6f4 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801e72c:	bf00      	nop
 801e72e:	3710      	adds	r7, #16
 801e730:	46bd      	mov	sp, r7
 801e732:	bd80      	pop	{r7, pc}

0801e734 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b086      	sub	sp, #24
 801e738:	af00      	add	r7, sp, #0
 801e73a:	60f8      	str	r0, [r7, #12]
 801e73c:	60b9      	str	r1, [r7, #8]
 801e73e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	685b      	ldr	r3, [r3, #4]
 801e744:	617b      	str	r3, [r7, #20]
 801e746:	697b      	ldr	r3, [r7, #20]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d019      	beq.n	801e780 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801e74c:	697b      	ldr	r3, [r7, #20]
 801e74e:	681a      	ldr	r2, [r3, #0]
 801e750:	697b      	ldr	r3, [r7, #20]
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	681b      	ldr	r3, [r3, #0]
 801e756:	33b8      	adds	r3, #184	; 0xb8
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	68b9      	ldr	r1, [r7, #8]
 801e75c:	4610      	mov	r0, r2
 801e75e:	4798      	blx	r3
 801e760:	4603      	mov	r3, r0
 801e762:	2b00      	cmp	r3, #0
 801e764:	d008      	beq.n	801e778 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	3330      	adds	r3, #48	; 0x30
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	697a      	ldr	r2, [r7, #20]
 801e770:	6812      	ldr	r2, [r2, #0]
 801e772:	4611      	mov	r1, r2
 801e774:	68f8      	ldr	r0, [r7, #12]
 801e776:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e778:	697b      	ldr	r3, [r7, #20]
 801e77a:	685b      	ldr	r3, [r3, #4]
 801e77c:	617b      	str	r3, [r7, #20]
 801e77e:	e7e2      	b.n	801e746 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801e780:	bf00      	nop
 801e782:	3718      	adds	r7, #24
 801e784:	46bd      	mov	sp, r7
 801e786:	bd80      	pop	{r7, pc}

0801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801e788:	b580      	push	{r7, lr}
 801e78a:	b084      	sub	sp, #16
 801e78c:	af00      	add	r7, sp, #0
 801e78e:	6078      	str	r0, [r7, #4]
 801e790:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e792:	683b      	ldr	r3, [r7, #0]
 801e794:	685b      	ldr	r3, [r3, #4]
 801e796:	60fb      	str	r3, [r7, #12]
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d00c      	beq.n	801e7b8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	681b      	ldr	r3, [r3, #0]
 801e7a2:	3330      	adds	r3, #48	; 0x30
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	68fa      	ldr	r2, [r7, #12]
 801e7a8:	6812      	ldr	r2, [r2, #0]
 801e7aa:	4611      	mov	r1, r2
 801e7ac:	6878      	ldr	r0, [r7, #4]
 801e7ae:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	685b      	ldr	r3, [r3, #4]
 801e7b4:	60fb      	str	r3, [r7, #12]
 801e7b6:	e7ef      	b.n	801e798 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801e7b8:	bf00      	nop
 801e7ba:	3710      	adds	r7, #16
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bd80      	pop	{r7, pc}

0801e7c0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801e7c0:	b580      	push	{r7, lr}
 801e7c2:	b084      	sub	sp, #16
 801e7c4:	af00      	add	r7, sp, #0
 801e7c6:	6078      	str	r0, [r7, #4]
 801e7c8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	685b      	ldr	r3, [r3, #4]
 801e7ce:	60fb      	str	r3, [r7, #12]
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	d016      	beq.n	801e804 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	681a      	ldr	r2, [r3, #0]
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	33b8      	adds	r3, #184	; 0xb8
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	6839      	ldr	r1, [r7, #0]
 801e7e6:	4610      	mov	r0, r2
 801e7e8:	4798      	blx	r3
 801e7ea:	4603      	mov	r3, r0
 801e7ec:	f083 0301 	eor.w	r3, r3, #1
 801e7f0:	b2db      	uxtb	r3, r3
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d002      	beq.n	801e7fc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e7fc:	68fb      	ldr	r3, [r7, #12]
 801e7fe:	685b      	ldr	r3, [r3, #4]
 801e800:	60fb      	str	r3, [r7, #12]
 801e802:	e7e5      	b.n	801e7d0 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	3388      	adds	r3, #136	; 0x88
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	6878      	ldr	r0, [r7, #4]
 801e80e:	4798      	blx	r3
}
 801e810:	bf00      	nop
 801e812:	3710      	adds	r7, #16
 801e814:	46bd      	mov	sp, r7
 801e816:	bd80      	pop	{r7, pc}

0801e818 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801e818:	b580      	push	{r7, lr}
 801e81a:	b084      	sub	sp, #16
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	685b      	ldr	r3, [r3, #4]
 801e824:	60fb      	str	r3, [r7, #12]
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d015      	beq.n	801e858 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801e82c:	68fb      	ldr	r3, [r7, #12]
 801e82e:	681a      	ldr	r2, [r3, #0]
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	33d4      	adds	r3, #212	; 0xd4
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	4610      	mov	r0, r2
 801e83c:	4798      	blx	r3
 801e83e:	4603      	mov	r3, r0
 801e840:	f083 0301 	eor.w	r3, r3, #1
 801e844:	b2db      	uxtb	r3, r3
 801e846:	2b00      	cmp	r3, #0
 801e848:	d002      	beq.n	801e850 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801e84a:	68fb      	ldr	r3, [r7, #12]
 801e84c:	2200      	movs	r2, #0
 801e84e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	685b      	ldr	r3, [r3, #4]
 801e854:	60fb      	str	r3, [r7, #12]
 801e856:	e7e6      	b.n	801e826 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	3388      	adds	r3, #136	; 0x88
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	6878      	ldr	r0, [r7, #4]
 801e862:	4798      	blx	r3
}
 801e864:	bf00      	nop
 801e866:	3710      	adds	r7, #16
 801e868:	46bd      	mov	sp, r7
 801e86a:	bd80      	pop	{r7, pc}

0801e86c <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801e86c:	b580      	push	{r7, lr}
 801e86e:	b084      	sub	sp, #16
 801e870:	af00      	add	r7, sp, #0
 801e872:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	685b      	ldr	r3, [r3, #4]
 801e878:	60fb      	str	r3, [r7, #12]
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d01b      	beq.n	801e8b8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	681a      	ldr	r2, [r3, #0]
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	33c8      	adds	r3, #200	; 0xc8
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	4610      	mov	r0, r2
 801e890:	4798      	blx	r3
 801e892:	4603      	mov	r3, r0
 801e894:	2b00      	cmp	r3, #0
 801e896:	d00b      	beq.n	801e8b0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	681a      	ldr	r2, [r3, #0]
 801e89c:	68fb      	ldr	r3, [r7, #12]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	33ec      	adds	r3, #236	; 0xec
 801e8a4:	681b      	ldr	r3, [r3, #0]
 801e8a6:	4610      	mov	r0, r2
 801e8a8:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	2200      	movs	r2, #0
 801e8ae:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	685b      	ldr	r3, [r3, #4]
 801e8b4:	60fb      	str	r3, [r7, #12]
 801e8b6:	e7e0      	b.n	801e87a <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	3388      	adds	r3, #136	; 0x88
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	6878      	ldr	r0, [r7, #4]
 801e8c2:	4798      	blx	r3
}
 801e8c4:	bf00      	nop
 801e8c6:	3710      	adds	r7, #16
 801e8c8:	46bd      	mov	sp, r7
 801e8ca:	bd80      	pop	{r7, pc}

0801e8cc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801e8cc:	b580      	push	{r7, lr}
 801e8ce:	b084      	sub	sp, #16
 801e8d0:	af00      	add	r7, sp, #0
 801e8d2:	6078      	str	r0, [r7, #4]
 801e8d4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	685b      	ldr	r3, [r3, #4]
 801e8da:	60fb      	str	r3, [r7, #12]
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d016      	beq.n	801e910 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801e8e2:	68fb      	ldr	r3, [r7, #12]
 801e8e4:	681a      	ldr	r2, [r3, #0]
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	681b      	ldr	r3, [r3, #0]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	33a8      	adds	r3, #168	; 0xa8
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	6839      	ldr	r1, [r7, #0]
 801e8f2:	4610      	mov	r0, r2
 801e8f4:	4798      	blx	r3
 801e8f6:	4603      	mov	r3, r0
 801e8f8:	f083 0301 	eor.w	r3, r3, #1
 801e8fc:	b2db      	uxtb	r3, r3
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d002      	beq.n	801e908 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	2200      	movs	r2, #0
 801e906:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	685b      	ldr	r3, [r3, #4]
 801e90c:	60fb      	str	r3, [r7, #12]
 801e90e:	e7e5      	b.n	801e8dc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	3388      	adds	r3, #136	; 0x88
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	6878      	ldr	r0, [r7, #4]
 801e91a:	4798      	blx	r3
}
 801e91c:	bf00      	nop
 801e91e:	3710      	adds	r7, #16
 801e920:	46bd      	mov	sp, r7
 801e922:	bd80      	pop	{r7, pc}

0801e924 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801e924:	b580      	push	{r7, lr}
 801e926:	b084      	sub	sp, #16
 801e928:	af00      	add	r7, sp, #0
 801e92a:	6078      	str	r0, [r7, #4]
 801e92c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	685b      	ldr	r3, [r3, #4]
 801e932:	60fb      	str	r3, [r7, #12]
 801e934:	68fb      	ldr	r3, [r7, #12]
 801e936:	2b00      	cmp	r3, #0
 801e938:	d016      	beq.n	801e968 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	681a      	ldr	r2, [r3, #0]
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	33b0      	adds	r3, #176	; 0xb0
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	6839      	ldr	r1, [r7, #0]
 801e94a:	4610      	mov	r0, r2
 801e94c:	4798      	blx	r3
 801e94e:	4603      	mov	r3, r0
 801e950:	f083 0301 	eor.w	r3, r3, #1
 801e954:	b2db      	uxtb	r3, r3
 801e956:	2b00      	cmp	r3, #0
 801e958:	d002      	beq.n	801e960 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	2200      	movs	r2, #0
 801e95e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	685b      	ldr	r3, [r3, #4]
 801e964:	60fb      	str	r3, [r7, #12]
 801e966:	e7e5      	b.n	801e934 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	3388      	adds	r3, #136	; 0x88
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	6878      	ldr	r0, [r7, #4]
 801e972:	4798      	blx	r3
}
 801e974:	bf00      	nop
 801e976:	3710      	adds	r7, #16
 801e978:	46bd      	mov	sp, r7
 801e97a:	bd80      	pop	{r7, pc}

0801e97c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801e97c:	b580      	push	{r7, lr}
 801e97e:	b084      	sub	sp, #16
 801e980:	af00      	add	r7, sp, #0
 801e982:	6078      	str	r0, [r7, #4]
 801e984:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	685b      	ldr	r3, [r3, #4]
 801e98a:	60fb      	str	r3, [r7, #12]
 801e98c:	68fb      	ldr	r3, [r7, #12]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d016      	beq.n	801e9c0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	681a      	ldr	r2, [r3, #0]
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	681b      	ldr	r3, [r3, #0]
 801e99c:	33ac      	adds	r3, #172	; 0xac
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	6839      	ldr	r1, [r7, #0]
 801e9a2:	4610      	mov	r0, r2
 801e9a4:	4798      	blx	r3
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	f083 0301 	eor.w	r3, r3, #1
 801e9ac:	b2db      	uxtb	r3, r3
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d002      	beq.n	801e9b8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e9b8:	68fb      	ldr	r3, [r7, #12]
 801e9ba:	685b      	ldr	r3, [r3, #4]
 801e9bc:	60fb      	str	r3, [r7, #12]
 801e9be:	e7e5      	b.n	801e98c <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	3388      	adds	r3, #136	; 0x88
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	6878      	ldr	r0, [r7, #4]
 801e9ca:	4798      	blx	r3
}
 801e9cc:	bf00      	nop
 801e9ce:	3710      	adds	r7, #16
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd80      	pop	{r7, pc}

0801e9d4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801e9d4:	b580      	push	{r7, lr}
 801e9d6:	b084      	sub	sp, #16
 801e9d8:	af00      	add	r7, sp, #0
 801e9da:	6078      	str	r0, [r7, #4]
 801e9dc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	685b      	ldr	r3, [r3, #4]
 801e9e2:	60fb      	str	r3, [r7, #12]
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d016      	beq.n	801ea18 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	681a      	ldr	r2, [r3, #0]
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	681b      	ldr	r3, [r3, #0]
 801e9f2:	681b      	ldr	r3, [r3, #0]
 801e9f4:	33b4      	adds	r3, #180	; 0xb4
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	6839      	ldr	r1, [r7, #0]
 801e9fa:	4610      	mov	r0, r2
 801e9fc:	4798      	blx	r3
 801e9fe:	4603      	mov	r3, r0
 801ea00:	f083 0301 	eor.w	r3, r3, #1
 801ea04:	b2db      	uxtb	r3, r3
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d002      	beq.n	801ea10 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	685b      	ldr	r3, [r3, #4]
 801ea14:	60fb      	str	r3, [r7, #12]
 801ea16:	e7e5      	b.n	801e9e4 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	3388      	adds	r3, #136	; 0x88
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	6878      	ldr	r0, [r7, #4]
 801ea22:	4798      	blx	r3
}
 801ea24:	bf00      	nop
 801ea26:	3710      	adds	r7, #16
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	bd80      	pop	{r7, pc}

0801ea2c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801ea2c:	b580      	push	{r7, lr}
 801ea2e:	b084      	sub	sp, #16
 801ea30:	af00      	add	r7, sp, #0
 801ea32:	6078      	str	r0, [r7, #4]
 801ea34:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	685b      	ldr	r3, [r3, #4]
 801ea3a:	60fb      	str	r3, [r7, #12]
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d016      	beq.n	801ea70 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	681a      	ldr	r2, [r3, #0]
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	681b      	ldr	r3, [r3, #0]
 801ea4c:	33bc      	adds	r3, #188	; 0xbc
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	6839      	ldr	r1, [r7, #0]
 801ea52:	4610      	mov	r0, r2
 801ea54:	4798      	blx	r3
 801ea56:	4603      	mov	r3, r0
 801ea58:	f083 0301 	eor.w	r3, r3, #1
 801ea5c:	b2db      	uxtb	r3, r3
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d002      	beq.n	801ea68 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	2200      	movs	r2, #0
 801ea66:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	685b      	ldr	r3, [r3, #4]
 801ea6c:	60fb      	str	r3, [r7, #12]
 801ea6e:	e7e5      	b.n	801ea3c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	3388      	adds	r3, #136	; 0x88
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	6878      	ldr	r0, [r7, #4]
 801ea7a:	4798      	blx	r3
}
 801ea7c:	bf00      	nop
 801ea7e:	3710      	adds	r7, #16
 801ea80:	46bd      	mov	sp, r7
 801ea82:	bd80      	pop	{r7, pc}

0801ea84 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801ea84:	b580      	push	{r7, lr}
 801ea86:	b084      	sub	sp, #16
 801ea88:	af00      	add	r7, sp, #0
 801ea8a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	685b      	ldr	r3, [r3, #4]
 801ea90:	60fb      	str	r3, [r7, #12]
 801ea92:	68fb      	ldr	r3, [r7, #12]
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d01d      	beq.n	801ead4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	681a      	ldr	r2, [r3, #0]
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	33c8      	adds	r3, #200	; 0xc8
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	4610      	mov	r0, r2
 801eaa8:	4798      	blx	r3
 801eaaa:	4603      	mov	r3, r0
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d00d      	beq.n	801eacc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	2200      	movs	r2, #0
 801eaba:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	3388      	adds	r3, #136	; 0x88
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	6878      	ldr	r0, [r7, #4]
 801eac6:	4798      	blx	r3
            return matchingCall;
 801eac8:	68bb      	ldr	r3, [r7, #8]
 801eaca:	e004      	b.n	801ead6 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	685b      	ldr	r3, [r3, #4]
 801ead0:	60fb      	str	r3, [r7, #12]
 801ead2:	e7de      	b.n	801ea92 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801ead4:	2300      	movs	r3, #0
}
 801ead6:	4618      	mov	r0, r3
 801ead8:	3710      	adds	r7, #16
 801eada:	46bd      	mov	sp, r7
 801eadc:	bd80      	pop	{r7, pc}

0801eade <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801eade:	b580      	push	{r7, lr}
 801eae0:	b084      	sub	sp, #16
 801eae2:	af00      	add	r7, sp, #0
 801eae4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	685b      	ldr	r3, [r3, #4]
 801eaea:	60fb      	str	r3, [r7, #12]
 801eaec:	68fb      	ldr	r3, [r7, #12]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d012      	beq.n	801eb18 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	681a      	ldr	r2, [r3, #0]
 801eaf6:	68fb      	ldr	r3, [r7, #12]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	33cc      	adds	r3, #204	; 0xcc
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	4610      	mov	r0, r2
 801eb02:	4798      	blx	r3
 801eb04:	4603      	mov	r3, r0
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d002      	beq.n	801eb10 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	e004      	b.n	801eb1a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	685b      	ldr	r3, [r3, #4]
 801eb14:	60fb      	str	r3, [r7, #12]
 801eb16:	e7e9      	b.n	801eaec <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801eb18:	2300      	movs	r3, #0
}
 801eb1a:	4618      	mov	r0, r3
 801eb1c:	3710      	adds	r7, #16
 801eb1e:	46bd      	mov	sp, r7
 801eb20:	bd80      	pop	{r7, pc}

0801eb22 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801eb22:	b580      	push	{r7, lr}
 801eb24:	b084      	sub	sp, #16
 801eb26:	af00      	add	r7, sp, #0
 801eb28:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	685b      	ldr	r3, [r3, #4]
 801eb2e:	60fb      	str	r3, [r7, #12]
 801eb30:	68fb      	ldr	r3, [r7, #12]
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d01d      	beq.n	801eb72 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801eb36:	68fb      	ldr	r3, [r7, #12]
 801eb38:	681a      	ldr	r2, [r3, #0]
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	33cc      	adds	r3, #204	; 0xcc
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	4610      	mov	r0, r2
 801eb46:	4798      	blx	r3
 801eb48:	4603      	mov	r3, r0
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d00d      	beq.n	801eb6a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	2200      	movs	r2, #0
 801eb58:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	3388      	adds	r3, #136	; 0x88
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	6878      	ldr	r0, [r7, #4]
 801eb64:	4798      	blx	r3
            return matchingCall;
 801eb66:	68bb      	ldr	r3, [r7, #8]
 801eb68:	e004      	b.n	801eb74 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	685b      	ldr	r3, [r3, #4]
 801eb6e:	60fb      	str	r3, [r7, #12]
 801eb70:	e7de      	b.n	801eb30 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801eb72:	2300      	movs	r3, #0
}
 801eb74:	4618      	mov	r0, r3
 801eb76:	3710      	adds	r7, #16
 801eb78:	46bd      	mov	sp, r7
 801eb7a:	bd80      	pop	{r7, pc}

0801eb7c <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801eb7c:	b580      	push	{r7, lr}
 801eb7e:	b086      	sub	sp, #24
 801eb80:	af00      	add	r7, sp, #0
 801eb82:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	685b      	ldr	r3, [r3, #4]
 801eb88:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801eb8e:	2300      	movs	r3, #0
 801eb90:	60fb      	str	r3, [r7, #12]

    while (current) {
 801eb92:	697b      	ldr	r3, [r7, #20]
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d024      	beq.n	801ebe2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801eb98:	697b      	ldr	r3, [r7, #20]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	d11a      	bne.n	801ebd6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801eba0:	697b      	ldr	r3, [r7, #20]
 801eba2:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801eba4:	693b      	ldr	r3, [r7, #16]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d106      	bne.n	801ebb8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801ebaa:	697b      	ldr	r3, [r7, #20]
 801ebac:	685b      	ldr	r3, [r3, #4]
 801ebae:	617b      	str	r3, [r7, #20]
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	697a      	ldr	r2, [r7, #20]
 801ebb4:	605a      	str	r2, [r3, #4]
 801ebb6:	e006      	b.n	801ebc6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801ebb8:	697b      	ldr	r3, [r7, #20]
 801ebba:	685a      	ldr	r2, [r3, #4]
 801ebbc:	693b      	ldr	r3, [r7, #16]
 801ebbe:	605a      	str	r2, [r3, #4]
 801ebc0:	693b      	ldr	r3, [r7, #16]
 801ebc2:	685b      	ldr	r3, [r3, #4]
 801ebc4:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801ebc6:	68fb      	ldr	r3, [r7, #12]
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d0e2      	beq.n	801eb92 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801ebcc:	2108      	movs	r1, #8
 801ebce:	4618      	mov	r0, r3
 801ebd0:	f7ee f82e 	bl	800cc30 <_ZdlPvj>
 801ebd4:	e7dd      	b.n	801eb92 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801ebd6:	697b      	ldr	r3, [r7, #20]
 801ebd8:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801ebda:	697b      	ldr	r3, [r7, #20]
 801ebdc:	685b      	ldr	r3, [r3, #4]
 801ebde:	617b      	str	r3, [r7, #20]
    while (current) {
 801ebe0:	e7d7      	b.n	801eb92 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801ebe2:	bf00      	nop
 801ebe4:	3718      	adds	r7, #24
 801ebe6:	46bd      	mov	sp, r7
 801ebe8:	bd80      	pop	{r7, pc}

0801ebea <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801ebea:	b580      	push	{r7, lr}
 801ebec:	b084      	sub	sp, #16
 801ebee:	af00      	add	r7, sp, #0
 801ebf0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	685b      	ldr	r3, [r3, #4]
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d019      	beq.n	801ec2e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	685b      	ldr	r3, [r3, #4]
 801ebfe:	685b      	ldr	r3, [r3, #4]
 801ec00:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	685b      	ldr	r3, [r3, #4]
 801ec06:	681b      	ldr	r3, [r3, #0]
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d004      	beq.n	801ec16 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801ec0c:	681a      	ldr	r2, [r3, #0]
 801ec0e:	3204      	adds	r2, #4
 801ec10:	6812      	ldr	r2, [r2, #0]
 801ec12:	4618      	mov	r0, r3
 801ec14:	4790      	blx	r2
        delete head_;
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	685b      	ldr	r3, [r3, #4]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d003      	beq.n	801ec26 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801ec1e:	2108      	movs	r1, #8
 801ec20:	4618      	mov	r0, r3
 801ec22:	f7ee f805 	bl	800cc30 <_ZdlPvj>
        head_ = next;
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	68fa      	ldr	r2, [r7, #12]
 801ec2a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801ec2c:	e7e1      	b.n	801ebf2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801ec2e:	bf00      	nop
 801ec30:	3710      	adds	r7, #16
 801ec32:	46bd      	mov	sp, r7
 801ec34:	bd80      	pop	{r7, pc}

0801ec36 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801ec36:	b580      	push	{r7, lr}
 801ec38:	b084      	sub	sp, #16
 801ec3a:	af00      	add	r7, sp, #0
 801ec3c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	685b      	ldr	r3, [r3, #4]
 801ec42:	60fb      	str	r3, [r7, #12]
 801ec44:	68fb      	ldr	r3, [r7, #12]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d00c      	beq.n	801ec64 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	681a      	ldr	r2, [r3, #0]
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	33ec      	adds	r3, #236	; 0xec
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	4610      	mov	r0, r2
 801ec5a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ec5c:	68fb      	ldr	r3, [r7, #12]
 801ec5e:	685b      	ldr	r3, [r3, #4]
 801ec60:	60fb      	str	r3, [r7, #12]
 801ec62:	e7ef      	b.n	801ec44 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801ec64:	bf00      	nop
 801ec66:	3710      	adds	r7, #16
 801ec68:	46bd      	mov	sp, r7
 801ec6a:	bd80      	pop	{r7, pc}

0801ec6c <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801ec6c:	b580      	push	{r7, lr}
 801ec6e:	b084      	sub	sp, #16
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	685b      	ldr	r3, [r3, #4]
 801ec78:	60fb      	str	r3, [r7, #12]
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d00c      	beq.n	801ec9a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	681a      	ldr	r2, [r3, #0]
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	681b      	ldr	r3, [r3, #0]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	33e8      	adds	r3, #232	; 0xe8
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	4610      	mov	r0, r2
 801ec90:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ec92:	68fb      	ldr	r3, [r7, #12]
 801ec94:	685b      	ldr	r3, [r3, #4]
 801ec96:	60fb      	str	r3, [r7, #12]
 801ec98:	e7ef      	b.n	801ec7a <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801ec9a:	bf00      	nop
 801ec9c:	3710      	adds	r7, #16
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bd80      	pop	{r7, pc}

0801eca2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801eca2:	b580      	push	{r7, lr}
 801eca4:	b084      	sub	sp, #16
 801eca6:	af00      	add	r7, sp, #0
 801eca8:	6078      	str	r0, [r7, #4]
 801ecaa:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	685b      	ldr	r3, [r3, #4]
 801ecb0:	60fb      	str	r3, [r7, #12]
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d00d      	beq.n	801ecd4 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	681a      	ldr	r2, [r3, #0]
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	33dc      	adds	r3, #220	; 0xdc
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	6839      	ldr	r1, [r7, #0]
 801ecc8:	4610      	mov	r0, r2
 801ecca:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801eccc:	68fb      	ldr	r3, [r7, #12]
 801ecce:	685b      	ldr	r3, [r3, #4]
 801ecd0:	60fb      	str	r3, [r7, #12]
 801ecd2:	e7ee      	b.n	801ecb2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801ecd4:	bf00      	nop
 801ecd6:	3710      	adds	r7, #16
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	bd80      	pop	{r7, pc}

0801ecdc <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b084      	sub	sp, #16
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
 801ece4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	685b      	ldr	r3, [r3, #4]
 801ecea:	60fb      	str	r3, [r7, #12]
 801ecec:	68fb      	ldr	r3, [r7, #12]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d00d      	beq.n	801ed0e <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	681a      	ldr	r2, [r3, #0]
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	33e0      	adds	r3, #224	; 0xe0
 801ecfe:	681b      	ldr	r3, [r3, #0]
 801ed00:	6839      	ldr	r1, [r7, #0]
 801ed02:	4610      	mov	r0, r2
 801ed04:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	685b      	ldr	r3, [r3, #4]
 801ed0a:	60fb      	str	r3, [r7, #12]
 801ed0c:	e7ee      	b.n	801ecec <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801ed0e:	bf00      	nop
 801ed10:	3710      	adds	r7, #16
 801ed12:	46bd      	mov	sp, r7
 801ed14:	bd80      	pop	{r7, pc}
	...

0801ed18 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801ed18:	b590      	push	{r4, r7, lr}
 801ed1a:	b087      	sub	sp, #28
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	60f8      	str	r0, [r7, #12]
 801ed20:	60b9      	str	r1, [r7, #8]
 801ed22:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801ed24:	68b9      	ldr	r1, [r7, #8]
 801ed26:	68f8      	ldr	r0, [r7, #12]
 801ed28:	f7f0 fb85 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801ed2c:	f107 0310 	add.w	r3, r7, #16
 801ed30:	490f      	ldr	r1, [pc, #60]	; (801ed70 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801ed32:	4618      	mov	r0, r3
 801ed34:	f7f0 fb2b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ed38:	f107 0310 	add.w	r3, r7, #16
 801ed3c:	4619      	mov	r1, r3
 801ed3e:	68f8      	ldr	r0, [r7, #12]
 801ed40:	f7f0 fee9 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 801ed44:	4603      	mov	r3, r0
 801ed46:	461c      	mov	r4, r3
 801ed48:	f107 0310 	add.w	r3, r7, #16
 801ed4c:	4618      	mov	r0, r3
 801ed4e:	f7f0 fed6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ed52:	2c00      	cmp	r4, #0
 801ed54:	d007      	beq.n	801ed66 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801ed56:	6879      	ldr	r1, [r7, #4]
 801ed58:	68f8      	ldr	r0, [r7, #12]
 801ed5a:	f7f0 ff4d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801ed5e:	4905      	ldr	r1, [pc, #20]	; (801ed74 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801ed60:	68f8      	ldr	r0, [r7, #12]
 801ed62:	f7f0 ff5b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801ed66:	bf00      	nop
}
 801ed68:	68f8      	ldr	r0, [r7, #12]
 801ed6a:	371c      	adds	r7, #28
 801ed6c:	46bd      	mov	sp, r7
 801ed6e:	bd90      	pop	{r4, r7, pc}
 801ed70:	080292a8 	.word	0x080292a8
 801ed74:	080292ac 	.word	0x080292ac

0801ed78 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801ed78:	b590      	push	{r4, r7, lr}
 801ed7a:	b087      	sub	sp, #28
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	607a      	str	r2, [r7, #4]
 801ed84:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801ed86:	68b9      	ldr	r1, [r7, #8]
 801ed88:	68f8      	ldr	r0, [r7, #12]
 801ed8a:	f7f0 fb54 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801ed8e:	f107 0310 	add.w	r3, r7, #16
 801ed92:	4912      	ldr	r1, [pc, #72]	; (801eddc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801ed94:	4618      	mov	r0, r3
 801ed96:	f7f0 fafa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ed9a:	f107 0310 	add.w	r3, r7, #16
 801ed9e:	4619      	mov	r1, r3
 801eda0:	68f8      	ldr	r0, [r7, #12]
 801eda2:	f7f0 fefd 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 801eda6:	4603      	mov	r3, r0
 801eda8:	461c      	mov	r4, r3
 801edaa:	f107 0310 	add.w	r3, r7, #16
 801edae:	4618      	mov	r0, r3
 801edb0:	f7f0 fea5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801edb4:	2c00      	cmp	r4, #0
 801edb6:	d003      	beq.n	801edc0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801edb8:	4909      	ldr	r1, [pc, #36]	; (801ede0 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801edba:	68f8      	ldr	r0, [r7, #12]
 801edbc:	f7f0 ff2e 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801edc0:	6879      	ldr	r1, [r7, #4]
 801edc2:	68f8      	ldr	r0, [r7, #12]
 801edc4:	f7f0 ff18 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801edc8:	6839      	ldr	r1, [r7, #0]
 801edca:	68f8      	ldr	r0, [r7, #12]
 801edcc:	f7f0 ff14 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    return str;
 801edd0:	bf00      	nop
}
 801edd2:	68f8      	ldr	r0, [r7, #12]
 801edd4:	371c      	adds	r7, #28
 801edd6:	46bd      	mov	sp, r7
 801edd8:	bd90      	pop	{r4, r7, pc}
 801edda:	bf00      	nop
 801eddc:	080292a8 	.word	0x080292a8
 801ede0:	080292b4 	.word	0x080292b4

0801ede4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b08c      	sub	sp, #48	; 0x30
 801ede8:	af00      	add	r7, sp, #0
 801edea:	60f8      	str	r0, [r7, #12]
 801edec:	60b9      	str	r1, [r7, #8]
 801edee:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801edf0:	f107 0314 	add.w	r3, r7, #20
 801edf4:	4929      	ldr	r1, [pc, #164]	; (801ee9c <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801edf6:	4618      	mov	r0, r3
 801edf8:	f7f0 fac9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801edfc:	68bb      	ldr	r3, [r7, #8]
 801edfe:	685b      	ldr	r3, [r3, #4]
 801ee00:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d038      	beq.n	801ee7a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee0a:	681a      	ldr	r2, [r3, #0]
 801ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	33c0      	adds	r3, #192	; 0xc0
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	4610      	mov	r0, r2
 801ee18:	4798      	blx	r3
 801ee1a:	4603      	mov	r3, r0
 801ee1c:	f083 0301 	eor.w	r3, r3, #1
 801ee20:	b2db      	uxtb	r3, r3
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d025      	beq.n	801ee72 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee28:	6819      	ldr	r1, [r3, #0]
 801ee2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	33f0      	adds	r3, #240	; 0xf0
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ee38:	4610      	mov	r0, r2
 801ee3a:	4798      	blx	r3
 801ee3c:	f107 001c 	add.w	r0, r7, #28
 801ee40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee44:	f107 0114 	add.w	r1, r7, #20
 801ee48:	687a      	ldr	r2, [r7, #4]
 801ee4a:	f7ff ff95 	bl	801ed78 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801ee4e:	f107 021c 	add.w	r2, r7, #28
 801ee52:	f107 0314 	add.w	r3, r7, #20
 801ee56:	4611      	mov	r1, r2
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7f0 fb04 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801ee5e:	f107 031c 	add.w	r3, r7, #28
 801ee62:	4618      	mov	r0, r3
 801ee64:	f7f0 fe4b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ee68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	f7f0 fe46 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ee72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee74:	685b      	ldr	r3, [r3, #4]
 801ee76:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ee78:	e7c3      	b.n	801ee02 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	f107 0114 	add.w	r1, r7, #20
 801ee80:	687a      	ldr	r2, [r7, #4]
 801ee82:	4618      	mov	r0, r3
 801ee84:	f7ff ff48 	bl	801ed18 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ee88:	f107 0314 	add.w	r3, r7, #20
 801ee8c:	4618      	mov	r0, r3
 801ee8e:	f7f0 fe36 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ee92:	bf00      	nop
}
 801ee94:	68f8      	ldr	r0, [r7, #12]
 801ee96:	3730      	adds	r7, #48	; 0x30
 801ee98:	46bd      	mov	sp, r7
 801ee9a:	bd80      	pop	{r7, pc}
 801ee9c:	080292a8 	.word	0x080292a8

0801eea0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801eea0:	b580      	push	{r7, lr}
 801eea2:	b08c      	sub	sp, #48	; 0x30
 801eea4:	af00      	add	r7, sp, #0
 801eea6:	60f8      	str	r0, [r7, #12]
 801eea8:	60b9      	str	r1, [r7, #8]
 801eeaa:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801eeac:	f107 0314 	add.w	r3, r7, #20
 801eeb0:	4928      	ldr	r1, [pc, #160]	; (801ef54 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801eeb2:	4618      	mov	r0, r3
 801eeb4:	f7f0 fa6b 	bl	800f38e <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801eeb8:	68bb      	ldr	r3, [r7, #8]
 801eeba:	685b      	ldr	r3, [r3, #4]
 801eebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d035      	beq.n	801ef30 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eec6:	681a      	ldr	r2, [r3, #0]
 801eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	33c0      	adds	r3, #192	; 0xc0
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	4610      	mov	r0, r2
 801eed4:	4798      	blx	r3
 801eed6:	4603      	mov	r3, r0
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d025      	beq.n	801ef28 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eede:	6819      	ldr	r1, [r3, #0]
 801eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eee2:	681b      	ldr	r3, [r3, #0]
 801eee4:	681b      	ldr	r3, [r3, #0]
 801eee6:	33f0      	adds	r3, #240	; 0xf0
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801eeee:	4610      	mov	r0, r2
 801eef0:	4798      	blx	r3
 801eef2:	f107 001c 	add.w	r0, r7, #28
 801eef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801eefa:	f107 0114 	add.w	r1, r7, #20
 801eefe:	687a      	ldr	r2, [r7, #4]
 801ef00:	f7ff ff3a 	bl	801ed78 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801ef04:	f107 021c 	add.w	r2, r7, #28
 801ef08:	f107 0314 	add.w	r3, r7, #20
 801ef0c:	4611      	mov	r1, r2
 801ef0e:	4618      	mov	r0, r3
 801ef10:	f7f0 faa9 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801ef14:	f107 031c 	add.w	r3, r7, #28
 801ef18:	4618      	mov	r0, r3
 801ef1a:	f7f0 fdf0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801ef1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ef22:	4618      	mov	r0, r3
 801ef24:	f7f0 fdeb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ef28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ef2e:	e7c6      	b.n	801eebe <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	f107 0114 	add.w	r1, r7, #20
 801ef36:	687a      	ldr	r2, [r7, #4]
 801ef38:	4618      	mov	r0, r3
 801ef3a:	f7ff feed 	bl	801ed18 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ef3e:	f107 0314 	add.w	r3, r7, #20
 801ef42:	4618      	mov	r0, r3
 801ef44:	f7f0 fddb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ef48:	bf00      	nop
}
 801ef4a:	68f8      	ldr	r0, [r7, #12]
 801ef4c:	3730      	adds	r7, #48	; 0x30
 801ef4e:	46bd      	mov	sp, r7
 801ef50:	bd80      	pop	{r7, pc}
 801ef52:	bf00      	nop
 801ef54:	080292a8 	.word	0x080292a8

0801ef58 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b08e      	sub	sp, #56	; 0x38
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
 801ef60:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ef62:	f107 030c 	add.w	r3, r7, #12
 801ef66:	4936      	ldr	r1, [pc, #216]	; (801f040 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f7f0 fa10 	bl	800f38e <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ef6e:	683b      	ldr	r3, [r7, #0]
 801ef70:	685b      	ldr	r3, [r3, #4]
 801ef72:	637b      	str	r3, [r7, #52]	; 0x34
 801ef74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d044      	beq.n	801f004 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef7c:	681a      	ldr	r2, [r3, #0]
 801ef7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	681b      	ldr	r3, [r3, #0]
 801ef84:	33cc      	adds	r3, #204	; 0xcc
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	4610      	mov	r0, r2
 801ef8a:	4798      	blx	r3
 801ef8c:	4603      	mov	r3, r0
 801ef8e:	f083 0301 	eor.w	r3, r3, #1
 801ef92:	b2db      	uxtb	r3, r3
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	d031      	beq.n	801effc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801ef98:	f107 031c 	add.w	r3, r7, #28
 801ef9c:	4928      	ldr	r1, [pc, #160]	; (801f040 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f7f0 f9f5 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801efa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801efa6:	6819      	ldr	r1, [r3, #0]
 801efa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	33f4      	adds	r3, #244	; 0xf4
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801efb6:	4610      	mov	r0, r2
 801efb8:	4798      	blx	r3
 801efba:	f107 0014 	add.w	r0, r7, #20
 801efbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801efc2:	f107 021c 	add.w	r2, r7, #28
 801efc6:	f107 010c 	add.w	r1, r7, #12
 801efca:	f7ff fed5 	bl	801ed78 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801efce:	f107 0214 	add.w	r2, r7, #20
 801efd2:	f107 030c 	add.w	r3, r7, #12
 801efd6:	4611      	mov	r1, r2
 801efd8:	4618      	mov	r0, r3
 801efda:	f7f0 fa44 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801efde:	f107 0314 	add.w	r3, r7, #20
 801efe2:	4618      	mov	r0, r3
 801efe4:	f7f0 fd8b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801efe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801efec:	4618      	mov	r0, r3
 801efee:	f7f0 fd86 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801eff2:	f107 031c 	add.w	r3, r7, #28
 801eff6:	4618      	mov	r0, r3
 801eff8:	f7f0 fd81 	bl	800fafe <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801effc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801effe:	685b      	ldr	r3, [r3, #4]
 801f000:	637b      	str	r3, [r7, #52]	; 0x34
 801f002:	e7b7      	b.n	801ef74 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801f004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801f008:	490d      	ldr	r1, [pc, #52]	; (801f040 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801f00a:	4618      	mov	r0, r3
 801f00c:	f7f0 f9bf 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801f016:	f107 010c 	add.w	r1, r7, #12
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7ff fe7c 	bl	801ed18 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801f020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801f024:	4618      	mov	r0, r3
 801f026:	f7f0 fd6a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801f02a:	f107 030c 	add.w	r3, r7, #12
 801f02e:	4618      	mov	r0, r3
 801f030:	f7f0 fd65 	bl	800fafe <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801f034:	bf00      	nop
}
 801f036:	6878      	ldr	r0, [r7, #4]
 801f038:	3738      	adds	r7, #56	; 0x38
 801f03a:	46bd      	mov	sp, r7
 801f03c:	bd80      	pop	{r7, pc}
 801f03e:	bf00      	nop
 801f040:	080292a8 	.word	0x080292a8

0801f044 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801f044:	b580      	push	{r7, lr}
 801f046:	b084      	sub	sp, #16
 801f048:	af00      	add	r7, sp, #0
 801f04a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	685b      	ldr	r3, [r3, #4]
 801f050:	60fb      	str	r3, [r7, #12]
 801f052:	68fb      	ldr	r3, [r7, #12]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d014      	beq.n	801f082 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	681a      	ldr	r2, [r3, #0]
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	33d0      	adds	r3, #208	; 0xd0
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	4610      	mov	r0, r2
 801f068:	4798      	blx	r3
 801f06a:	4603      	mov	r3, r0
 801f06c:	f083 0301 	eor.w	r3, r3, #1
 801f070:	b2db      	uxtb	r3, r3
 801f072:	2b00      	cmp	r3, #0
 801f074:	d001      	beq.n	801f07a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801f076:	2301      	movs	r3, #1
 801f078:	e004      	b.n	801f084 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	60fb      	str	r3, [r7, #12]
 801f080:	e7e7      	b.n	801f052 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801f082:	2300      	movs	r3, #0
}
 801f084:	4618      	mov	r0, r3
 801f086:	3710      	adds	r7, #16
 801f088:	46bd      	mov	sp, r7
 801f08a:	bd80      	pop	{r7, pc}

0801f08c <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801f08c:	b480      	push	{r7}
 801f08e:	b083      	sub	sp, #12
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
 801f094:	460b      	mov	r3, r1
 801f096:	70fb      	strb	r3, [r7, #3]
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	78fa      	ldrb	r2, [r7, #3]
 801f09c:	711a      	strb	r2, [r3, #4]
 801f09e:	bf00      	nop
 801f0a0:	370c      	adds	r7, #12
 801f0a2:	46bd      	mov	sp, r7
 801f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0a8:	4770      	bx	lr
	...

0801f0ac <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801f0ac:	b580      	push	{r7, lr}
 801f0ae:	b082      	sub	sp, #8
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	6078      	str	r0, [r7, #4]
 801f0b4:	460b      	mov	r3, r1
 801f0b6:	70fb      	strb	r3, [r7, #3]
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	f7ed ff6a 	bl	800cf94 <_ZN14TestTerminatorC1Ev>
 801f0c0:	4a05      	ldr	r2, [pc, #20]	; (801f0d8 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	601a      	str	r2, [r3, #0]
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	78fa      	ldrb	r2, [r7, #3]
 801f0ca:	711a      	strb	r2, [r3, #4]
    {
    }
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	3708      	adds	r7, #8
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	bd80      	pop	{r7, pc}
 801f0d6:	bf00      	nop
 801f0d8:	0802c900 	.word	0x0802c900

0801f0dc <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801f0dc:	b580      	push	{r7, lr}
 801f0de:	b082      	sub	sp, #8
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	791b      	ldrb	r3, [r3, #4]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d001      	beq.n	801f0f0 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801f0ec:	f7f6 f9fe 	bl	80154ec <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801f0f0:	f7f7 fd40 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f0f4:	4603      	mov	r3, r0
 801f0f6:	681a      	ldr	r2, [r3, #0]
 801f0f8:	6812      	ldr	r2, [r2, #0]
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801f0fe:	bf00      	nop
 801f100:	3708      	adds	r7, #8
 801f102:	46bd      	mov	sp, r7
 801f104:	bd80      	pop	{r7, pc}
	...

0801f108 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801f108:	b580      	push	{r7, lr}
 801f10a:	b082      	sub	sp, #8
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
    {
 801f110:	4a05      	ldr	r2, [pc, #20]	; (801f128 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	601a      	str	r2, [r3, #0]
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	4618      	mov	r0, r3
 801f11a:	f7f7 fdbb 	bl	8016c94 <_ZN14TestTerminatorD1Ev>
    }
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	4618      	mov	r0, r3
 801f122:	3708      	adds	r7, #8
 801f124:	46bd      	mov	sp, r7
 801f126:	bd80      	pop	{r7, pc}
 801f128:	0802c900 	.word	0x0802c900

0801f12c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801f12c:	b580      	push	{r7, lr}
 801f12e:	b082      	sub	sp, #8
 801f130:	af00      	add	r7, sp, #0
 801f132:	6078      	str	r0, [r7, #4]
    }
 801f134:	6878      	ldr	r0, [r7, #4]
 801f136:	f7ff ffe7 	bl	801f108 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801f13a:	2108      	movs	r1, #8
 801f13c:	6878      	ldr	r0, [r7, #4]
 801f13e:	f7ed fd77 	bl	800cc30 <_ZdlPvj>
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	4618      	mov	r0, r3
 801f146:	3708      	adds	r7, #8
 801f148:	46bd      	mov	sp, r7
 801f14a:	bd80      	pop	{r7, pc}

0801f14c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801f14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f14e:	b085      	sub	sp, #20
 801f150:	af00      	add	r7, sp, #0
 801f152:	6078      	str	r0, [r7, #4]
 801f154:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	330c      	adds	r3, #12
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	6878      	ldr	r0, [r7, #4]
 801f160:	4798      	blx	r3
 801f162:	4603      	mov	r3, r0
 801f164:	681a      	ldr	r2, [r3, #0]
 801f166:	321c      	adds	r2, #28
 801f168:	6812      	ldr	r2, [r2, #0]
 801f16a:	4618      	mov	r0, r3
 801f16c:	4790      	blx	r2
 801f16e:	4603      	mov	r3, r0
 801f170:	f083 0301 	eor.w	r3, r3, #1
 801f174:	b2db      	uxtb	r3, r3
 801f176:	2b00      	cmp	r3, #0
 801f178:	d01d      	beq.n	801f1b6 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	330c      	adds	r3, #12
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	6878      	ldr	r0, [r7, #4]
 801f184:	4798      	blx	r3
 801f186:	4604      	mov	r4, r0
 801f188:	6823      	ldr	r3, [r4, #0]
 801f18a:	339c      	adds	r3, #156	; 0x9c
 801f18c:	681d      	ldr	r5, [r3, #0]
 801f18e:	683e      	ldr	r6, [r7, #0]
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	791a      	ldrb	r2, [r3, #4]
 801f194:	f107 0308 	add.w	r3, r7, #8
 801f198:	4611      	mov	r1, r2
 801f19a:	4618      	mov	r0, r3
 801f19c:	f7ff ff86 	bl	801f0ac <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801f1a0:	f107 0308 	add.w	r3, r7, #8
 801f1a4:	461a      	mov	r2, r3
 801f1a6:	4631      	mov	r1, r6
 801f1a8:	4620      	mov	r0, r4
 801f1aa:	47a8      	blx	r5
 801f1ac:	f107 0308 	add.w	r3, r7, #8
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	f7ff ffa9 	bl	801f108 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801f1b6:	bf00      	nop
 801f1b8:	3714      	adds	r7, #20
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f1be <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801f1be:	b580      	push	{r7, lr}
 801f1c0:	b082      	sub	sp, #8
 801f1c2:	af00      	add	r7, sp, #0
 801f1c4:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801f1c6:	f7f7 fcc5 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801f1ca:	4603      	mov	r3, r0
}
 801f1cc:	4618      	mov	r0, r3
 801f1ce:	3708      	adds	r7, #8
 801f1d0:	46bd      	mov	sp, r7
 801f1d2:	bd80      	pop	{r7, pc}

0801f1d4 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801f1d4:	b590      	push	{r4, r7, lr}
 801f1d6:	b085      	sub	sp, #20
 801f1d8:	af00      	add	r7, sp, #0
 801f1da:	6078      	str	r0, [r7, #4]
 801f1dc:	6039      	str	r1, [r7, #0]
 801f1de:	687c      	ldr	r4, [r7, #4]
 801f1e0:	f107 0308 	add.w	r3, r7, #8
 801f1e4:	490b      	ldr	r1, [pc, #44]	; (801f214 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f7f0 f8d1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f1ec:	f107 0308 	add.w	r3, r7, #8
 801f1f0:	461a      	mov	r2, r3
 801f1f2:	6839      	ldr	r1, [r7, #0]
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f7f1 ff29 	bl	801104c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801f1fa:	f107 0308 	add.w	r3, r7, #8
 801f1fe:	4618      	mov	r0, r3
 801f200:	f7f0 fc7d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f204:	4a04      	ldr	r2, [pc, #16]	; (801f218 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	601a      	str	r2, [r3, #0]
{
}
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	4618      	mov	r0, r3
 801f20e:	3714      	adds	r7, #20
 801f210:	46bd      	mov	sp, r7
 801f212:	bd90      	pop	{r4, r7, pc}
 801f214:	080292b8 	.word	0x080292b8
 801f218:	0802b88c 	.word	0x0802b88c

0801f21c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801f21c:	b5b0      	push	{r4, r5, r7, lr}
 801f21e:	b08a      	sub	sp, #40	; 0x28
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
 801f224:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	332c      	adds	r3, #44	; 0x2c
 801f22a:	492b      	ldr	r1, [pc, #172]	; (801f2d8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801f22c:	4618      	mov	r0, r3
 801f22e:	f7f0 fcf5 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801f238:	683b      	ldr	r3, [r7, #0]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	337c      	adds	r3, #124	; 0x7c
 801f23e:	681c      	ldr	r4, [r3, #0]
 801f240:	f107 0310 	add.w	r3, r7, #16
 801f244:	4925      	ldr	r1, [pc, #148]	; (801f2dc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801f246:	4618      	mov	r0, r3
 801f248:	f7f0 f8a1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f24c:	f107 0308 	add.w	r3, r7, #8
 801f250:	f107 0210 	add.w	r2, r7, #16
 801f254:	6839      	ldr	r1, [r7, #0]
 801f256:	4618      	mov	r0, r3
 801f258:	47a0      	blx	r4
 801f25a:	f107 0308 	add.w	r3, r7, #8
 801f25e:	4619      	mov	r1, r3
 801f260:	4628      	mov	r0, r5
 801f262:	f7f0 fcc9 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f266:	f107 0308 	add.w	r3, r7, #8
 801f26a:	4618      	mov	r0, r3
 801f26c:	f7f0 fc47 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f270:	f107 0310 	add.w	r3, r7, #16
 801f274:	4618      	mov	r0, r3
 801f276:	f7f0 fc42 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	332c      	adds	r3, #44	; 0x2c
 801f27e:	4918      	ldr	r1, [pc, #96]	; (801f2e0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801f280:	4618      	mov	r0, r3
 801f282:	f7f0 fccb 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801f28c:	683b      	ldr	r3, [r7, #0]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	3380      	adds	r3, #128	; 0x80
 801f292:	681c      	ldr	r4, [r3, #0]
 801f294:	f107 0320 	add.w	r3, r7, #32
 801f298:	4910      	ldr	r1, [pc, #64]	; (801f2dc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801f29a:	4618      	mov	r0, r3
 801f29c:	f7f0 f877 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f2a0:	f107 0318 	add.w	r3, r7, #24
 801f2a4:	f107 0220 	add.w	r2, r7, #32
 801f2a8:	6839      	ldr	r1, [r7, #0]
 801f2aa:	4618      	mov	r0, r3
 801f2ac:	47a0      	blx	r4
 801f2ae:	f107 0318 	add.w	r3, r7, #24
 801f2b2:	4619      	mov	r1, r3
 801f2b4:	4628      	mov	r0, r5
 801f2b6:	f7f0 fc9f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f2ba:	f107 0318 	add.w	r3, r7, #24
 801f2be:	4618      	mov	r0, r3
 801f2c0:	f7f0 fc1d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f2c4:	f107 0320 	add.w	r3, r7, #32
 801f2c8:	4618      	mov	r0, r3
 801f2ca:	f7f0 fc18 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801f2ce:	bf00      	nop
 801f2d0:	3728      	adds	r7, #40	; 0x28
 801f2d2:	46bd      	mov	sp, r7
 801f2d4:	bdb0      	pop	{r4, r5, r7, pc}
 801f2d6:	bf00      	nop
 801f2d8:	08029308 	.word	0x08029308
 801f2dc:	08029334 	.word	0x08029334
 801f2e0:	08029338 	.word	0x08029338

0801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801f2e4:	b590      	push	{r4, r7, lr}
 801f2e6:	b08f      	sub	sp, #60	; 0x3c
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	60f8      	str	r0, [r7, #12]
 801f2ec:	60b9      	str	r1, [r7, #8]
 801f2ee:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801f2f0:	f107 0310 	add.w	r3, r7, #16
 801f2f4:	4618      	mov	r0, r3
 801f2f6:	f7ff f877 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801f2fa:	f107 0310 	add.w	r3, r7, #16
 801f2fe:	687a      	ldr	r2, [r7, #4]
 801f300:	68b9      	ldr	r1, [r7, #8]
 801f302:	4618      	mov	r0, r3
 801f304:	f7ff fa16 	bl	801e734 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	332c      	adds	r3, #44	; 0x2c
 801f30c:	4937      	ldr	r1, [pc, #220]	; (801f3ec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801f30e:	4618      	mov	r0, r3
 801f310:	f7f0 fc84 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	332c      	adds	r3, #44	; 0x2c
 801f318:	68b9      	ldr	r1, [r7, #8]
 801f31a:	4618      	mov	r0, r3
 801f31c:	f7f0 fc6c 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f320:	68fb      	ldr	r3, [r7, #12]
 801f322:	332c      	adds	r3, #44	; 0x2c
 801f324:	4932      	ldr	r1, [pc, #200]	; (801f3f0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801f326:	4618      	mov	r0, r3
 801f328:	f7f0 fc78 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f332:	f107 0320 	add.w	r3, r7, #32
 801f336:	492f      	ldr	r1, [pc, #188]	; (801f3f4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801f338:	4618      	mov	r0, r3
 801f33a:	f7f0 f828 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f33e:	f107 0318 	add.w	r3, r7, #24
 801f342:	f107 0220 	add.w	r2, r7, #32
 801f346:	f107 0110 	add.w	r1, r7, #16
 801f34a:	4618      	mov	r0, r3
 801f34c:	f7ff fd4a 	bl	801ede4 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801f350:	f107 0318 	add.w	r3, r7, #24
 801f354:	4619      	mov	r1, r3
 801f356:	4620      	mov	r0, r4
 801f358:	f7f0 fc4e 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f35c:	f107 0318 	add.w	r3, r7, #24
 801f360:	4618      	mov	r0, r3
 801f362:	f7f0 fbcc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f366:	f107 0320 	add.w	r3, r7, #32
 801f36a:	4618      	mov	r0, r3
 801f36c:	f7f0 fbc7 	bl	800fafe <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801f370:	68fb      	ldr	r3, [r7, #12]
 801f372:	332c      	adds	r3, #44	; 0x2c
 801f374:	4920      	ldr	r1, [pc, #128]	; (801f3f8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801f376:	4618      	mov	r0, r3
 801f378:	f7f0 fc50 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	332c      	adds	r3, #44	; 0x2c
 801f380:	68b9      	ldr	r1, [r7, #8]
 801f382:	4618      	mov	r0, r3
 801f384:	f7f0 fc38 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	332c      	adds	r3, #44	; 0x2c
 801f38c:	4918      	ldr	r1, [pc, #96]	; (801f3f0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801f38e:	4618      	mov	r0, r3
 801f390:	f7f0 fc44 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f39a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f39e:	4915      	ldr	r1, [pc, #84]	; (801f3f4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	f7ef fff4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f3a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f3aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801f3ae:	f107 0110 	add.w	r1, r7, #16
 801f3b2:	4618      	mov	r0, r3
 801f3b4:	f7ff fd74 	bl	801eea0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801f3b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f3bc:	4619      	mov	r1, r3
 801f3be:	4620      	mov	r0, r4
 801f3c0:	f7f0 fc1a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f3c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f3c8:	4618      	mov	r0, r3
 801f3ca:	f7f0 fb98 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f3ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	f7f0 fb93 	bl	800fafe <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801f3d8:	f107 0310 	add.w	r3, r7, #16
 801f3dc:	4618      	mov	r0, r3
 801f3de:	f7ff f817 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 801f3e2:	bf00      	nop
 801f3e4:	373c      	adds	r7, #60	; 0x3c
 801f3e6:	46bd      	mov	sp, r7
 801f3e8:	bd90      	pop	{r4, r7, pc}
 801f3ea:	bf00      	nop
 801f3ec:	08029360 	.word	0x08029360
 801f3f0:	080293a0 	.word	0x080293a0
 801f3f4:	08029334 	.word	0x08029334
 801f3f8:	080293a4 	.word	0x080293a4

0801f3fc <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f3fc:	b590      	push	{r4, r7, lr}
 801f3fe:	b087      	sub	sp, #28
 801f400:	af00      	add	r7, sp, #0
 801f402:	60f8      	str	r0, [r7, #12]
 801f404:	60b9      	str	r1, [r7, #8]
 801f406:	607a      	str	r2, [r7, #4]
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	68b9      	ldr	r1, [r7, #8]
 801f40c:	4618      	mov	r0, r3
 801f40e:	f7ff fee1 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801f412:	4a10      	ldr	r2, [pc, #64]	; (801f454 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f41e:	f107 0310 	add.w	r3, r7, #16
 801f422:	490d      	ldr	r1, [pc, #52]	; (801f458 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801f424:	4618      	mov	r0, r3
 801f426:	f7ef ffb2 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f42a:	f107 0310 	add.w	r3, r7, #16
 801f42e:	4619      	mov	r1, r3
 801f430:	4620      	mov	r0, r4
 801f432:	f7f0 f818 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f436:	f107 0310 	add.w	r3, r7, #16
 801f43a:	4618      	mov	r0, r3
 801f43c:	f7f0 fb5f 	bl	800fafe <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801f440:	68fb      	ldr	r3, [r7, #12]
 801f442:	6879      	ldr	r1, [r7, #4]
 801f444:	4618      	mov	r0, r3
 801f446:	f7ff fee9 	bl	801f21c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801f44a:	68fb      	ldr	r3, [r7, #12]
 801f44c:	4618      	mov	r0, r3
 801f44e:	371c      	adds	r7, #28
 801f450:	46bd      	mov	sp, r7
 801f452:	bd90      	pop	{r4, r7, pc}
 801f454:	0802b860 	.word	0x0802b860
 801f458:	080293e0 	.word	0x080293e0

0801f45c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f45c:	b590      	push	{r4, r7, lr}
 801f45e:	b08d      	sub	sp, #52	; 0x34
 801f460:	af00      	add	r7, sp, #0
 801f462:	60f8      	str	r0, [r7, #12]
 801f464:	60b9      	str	r1, [r7, #8]
 801f466:	607a      	str	r2, [r7, #4]
 801f468:	603b      	str	r3, [r7, #0]
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	68b9      	ldr	r1, [r7, #8]
 801f46e:	4618      	mov	r0, r3
 801f470:	f7ff feb0 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801f474:	4a2f      	ldr	r2, [pc, #188]	; (801f534 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801f47a:	683b      	ldr	r3, [r7, #0]
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	3310      	adds	r3, #16
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	6879      	ldr	r1, [r7, #4]
 801f484:	6838      	ldr	r0, [r7, #0]
 801f486:	4798      	blx	r3
 801f488:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801f48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d027      	beq.n	801f4e0 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f492:	1c5a      	adds	r2, r3, #1
 801f494:	f107 0314 	add.w	r3, r7, #20
 801f498:	4611      	mov	r1, r2
 801f49a:	4618      	mov	r0, r3
 801f49c:	f7f1 fa00 	bl	80108a0 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f4a6:	f107 0314 	add.w	r3, r7, #20
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	f7f0 fafa 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801f4b0:	4602      	mov	r2, r0
 801f4b2:	f107 031c 	add.w	r3, r7, #28
 801f4b6:	4920      	ldr	r1, [pc, #128]	; (801f538 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801f4b8:	4618      	mov	r0, r3
 801f4ba:	f7f1 f827 	bl	801050c <_Z16StringFromFormatPKcz>
 801f4be:	f107 031c 	add.w	r3, r7, #28
 801f4c2:	4619      	mov	r1, r3
 801f4c4:	4620      	mov	r0, r4
 801f4c6:	f7ef ffce 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f4ca:	f107 031c 	add.w	r3, r7, #28
 801f4ce:	4618      	mov	r0, r3
 801f4d0:	f7f0 fb15 	bl	800fafe <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801f4d4:	f107 0314 	add.w	r3, r7, #20
 801f4d8:	4618      	mov	r0, r3
 801f4da:	f7f0 fb10 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f4de:	e013      	b.n	801f508 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f4ea:	4914      	ldr	r1, [pc, #80]	; (801f53c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801f4ec:	4618      	mov	r0, r3
 801f4ee:	f7ef ff4e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f4f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f4f6:	4619      	mov	r1, r3
 801f4f8:	4620      	mov	r0, r4
 801f4fa:	f7ef ffb4 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f4fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f502:	4618      	mov	r0, r3
 801f504:	f7f0 fafb 	bl	800fafe <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	332c      	adds	r3, #44	; 0x2c
 801f50c:	6879      	ldr	r1, [r7, #4]
 801f50e:	4618      	mov	r0, r3
 801f510:	f7f0 fb72 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	332c      	adds	r3, #44	; 0x2c
 801f518:	4909      	ldr	r1, [pc, #36]	; (801f540 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801f51a:	4618      	mov	r0, r3
 801f51c:	f7f0 fb7e 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801f520:	68fb      	ldr	r3, [r7, #12]
 801f522:	6839      	ldr	r1, [r7, #0]
 801f524:	4618      	mov	r0, r3
 801f526:	f7ff fe79 	bl	801f21c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801f52a:	68fb      	ldr	r3, [r7, #12]
 801f52c:	4618      	mov	r0, r3
 801f52e:	3734      	adds	r7, #52	; 0x34
 801f530:	46bd      	mov	sp, r7
 801f532:	bd90      	pop	{r4, r7, pc}
 801f534:	0802c200 	.word	0x0802c200
 801f538:	08029410 	.word	0x08029410
 801f53c:	0802944c 	.word	0x0802944c
 801f540:	080293a0 	.word	0x080293a0

0801f544 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f544:	b590      	push	{r4, r7, lr}
 801f546:	b089      	sub	sp, #36	; 0x24
 801f548:	af00      	add	r7, sp, #0
 801f54a:	60f8      	str	r0, [r7, #12]
 801f54c:	60b9      	str	r1, [r7, #8]
 801f54e:	607a      	str	r2, [r7, #4]
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	68b9      	ldr	r1, [r7, #8]
 801f554:	4618      	mov	r0, r3
 801f556:	f7ff fe3d 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801f55a:	4a1f      	ldr	r2, [pc, #124]	; (801f5d8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801f560:	f107 0310 	add.w	r3, r7, #16
 801f564:	4618      	mov	r0, r3
 801f566:	f7fe ff3f 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801f56a:	f107 0310 	add.w	r3, r7, #16
 801f56e:	6879      	ldr	r1, [r7, #4]
 801f570:	4618      	mov	r0, r3
 801f572:	f7ff f909 	bl	801e788 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801f576:	f107 0310 	add.w	r3, r7, #16
 801f57a:	4618      	mov	r0, r3
 801f57c:	f7ff f94c 	bl	801e818 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f586:	f107 0318 	add.w	r3, r7, #24
 801f58a:	4914      	ldr	r1, [pc, #80]	; (801f5dc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801f58c:	4618      	mov	r0, r3
 801f58e:	f7ef fefe 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f592:	f107 0318 	add.w	r3, r7, #24
 801f596:	4619      	mov	r1, r3
 801f598:	4620      	mov	r0, r4
 801f59a:	f7ef ff64 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f59e:	f107 0318 	add.w	r3, r7, #24
 801f5a2:	4618      	mov	r0, r3
 801f5a4:	f7f0 faab 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801f5a8:	68fb      	ldr	r3, [r7, #12]
 801f5aa:	332c      	adds	r3, #44	; 0x2c
 801f5ac:	490c      	ldr	r1, [pc, #48]	; (801f5e0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f7f0 fb34 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	f107 0210 	add.w	r2, r7, #16
 801f5ba:	4611      	mov	r1, r2
 801f5bc:	4618      	mov	r0, r3
 801f5be:	f7ff fe2d 	bl	801f21c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801f5c2:	f107 0310 	add.w	r3, r7, #16
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	f7fe ff22 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	3724      	adds	r7, #36	; 0x24
 801f5d2:	46bd      	mov	sp, r7
 801f5d4:	bd90      	pop	{r4, r7, pc}
 801f5d6:	bf00      	nop
 801f5d8:	0802b834 	.word	0x0802b834
 801f5dc:	08029478 	.word	0x08029478
 801f5e0:	080293a0 	.word	0x080293a0

0801f5e4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801f5e4:	b590      	push	{r4, r7, lr}
 801f5e6:	b099      	sub	sp, #100	; 0x64
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	60f8      	str	r0, [r7, #12]
 801f5ec:	60b9      	str	r1, [r7, #8]
 801f5ee:	607a      	str	r2, [r7, #4]
 801f5f0:	603b      	str	r3, [r7, #0]
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	68b9      	ldr	r1, [r7, #8]
 801f5f6:	4618      	mov	r0, r3
 801f5f8:	f7ff fdec 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801f5fc:	4a9e      	ldr	r2, [pc, #632]	; (801f878 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f602:	f107 0310 	add.w	r3, r7, #16
 801f606:	4618      	mov	r0, r3
 801f608:	f7fe feee 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801f60c:	f107 0310 	add.w	r3, r7, #16
 801f610:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f612:	6879      	ldr	r1, [r7, #4]
 801f614:	4618      	mov	r0, r3
 801f616:	f7ff f88d 	bl	801e734 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801f61a:	683b      	ldr	r3, [r7, #0]
 801f61c:	681b      	ldr	r3, [r3, #0]
 801f61e:	335c      	adds	r3, #92	; 0x5c
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	f107 0218 	add.w	r2, r7, #24
 801f626:	6839      	ldr	r1, [r7, #0]
 801f628:	4610      	mov	r0, r2
 801f62a:	4798      	blx	r3
 801f62c:	f107 0218 	add.w	r2, r7, #24
 801f630:	f107 0310 	add.w	r3, r7, #16
 801f634:	4611      	mov	r1, r2
 801f636:	4618      	mov	r0, r3
 801f638:	f7ff f948 	bl	801e8cc <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801f63c:	f107 0318 	add.w	r3, r7, #24
 801f640:	4618      	mov	r0, r3
 801f642:	f7f0 fa5c 	bl	800fafe <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801f646:	f107 0310 	add.w	r3, r7, #16
 801f64a:	4618      	mov	r0, r3
 801f64c:	f7fe ff4d 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801f650:	4603      	mov	r3, r0
 801f652:	2b00      	cmp	r3, #0
 801f654:	d037      	beq.n	801f6c6 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801f656:	68fb      	ldr	r3, [r7, #12]
 801f658:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f65c:	f107 0320 	add.w	r3, r7, #32
 801f660:	4986      	ldr	r1, [pc, #536]	; (801f87c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801f662:	4618      	mov	r0, r3
 801f664:	f7ef fe93 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f668:	f107 0320 	add.w	r3, r7, #32
 801f66c:	4619      	mov	r1, r3
 801f66e:	4620      	mov	r0, r4
 801f670:	f7ef fef9 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f674:	f107 0320 	add.w	r3, r7, #32
 801f678:	4618      	mov	r0, r3
 801f67a:	f7f0 fa40 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801f67e:	68fb      	ldr	r3, [r7, #12]
 801f680:	332c      	adds	r3, #44	; 0x2c
 801f682:	6879      	ldr	r1, [r7, #4]
 801f684:	4618      	mov	r0, r3
 801f686:	f7f0 fab7 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801f68a:	68fb      	ldr	r3, [r7, #12]
 801f68c:	332c      	adds	r3, #44	; 0x2c
 801f68e:	497c      	ldr	r1, [pc, #496]	; (801f880 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801f690:	4618      	mov	r0, r3
 801f692:	f7f0 fac3 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f69c:	683b      	ldr	r3, [r7, #0]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	335c      	adds	r3, #92	; 0x5c
 801f6a2:	681b      	ldr	r3, [r3, #0]
 801f6a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f6a8:	6839      	ldr	r1, [r7, #0]
 801f6aa:	4610      	mov	r0, r2
 801f6ac:	4798      	blx	r3
 801f6ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f6b2:	4619      	mov	r1, r3
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f7f0 fa9f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f6ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7f0 fa1d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f6c4:	e056      	b.n	801f774 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801f6c6:	68fb      	ldr	r3, [r7, #12]
 801f6c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f6cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f6d0:	496c      	ldr	r1, [pc, #432]	; (801f884 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	f7ef fe5b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f6d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f6dc:	4619      	mov	r1, r3
 801f6de:	4620      	mov	r0, r4
 801f6e0:	f7ef fec1 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f6e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f6e8:	4618      	mov	r0, r3
 801f6ea:	f7f0 fa08 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801f6ee:	68fb      	ldr	r3, [r7, #12]
 801f6f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f6f4:	683b      	ldr	r3, [r7, #0]
 801f6f6:	681b      	ldr	r3, [r3, #0]
 801f6f8:	335c      	adds	r3, #92	; 0x5c
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801f700:	6839      	ldr	r1, [r7, #0]
 801f702:	4610      	mov	r0, r2
 801f704:	4798      	blx	r3
 801f706:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f70a:	4619      	mov	r1, r3
 801f70c:	4620      	mov	r0, r4
 801f70e:	f7f0 fa73 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f716:	4618      	mov	r0, r3
 801f718:	f7f0 f9f1 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	332c      	adds	r3, #44	; 0x2c
 801f720:	4959      	ldr	r1, [pc, #356]	; (801f888 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801f722:	4618      	mov	r0, r3
 801f724:	f7f0 fa7a 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	332c      	adds	r3, #44	; 0x2c
 801f72c:	6879      	ldr	r1, [r7, #4]
 801f72e:	4618      	mov	r0, r3
 801f730:	f7f0 fa62 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801f734:	68fb      	ldr	r3, [r7, #12]
 801f736:	332c      	adds	r3, #44	; 0x2c
 801f738:	4954      	ldr	r1, [pc, #336]	; (801f88c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801f73a:	4618      	mov	r0, r3
 801f73c:	f7f0 fa6e 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f74a:	6839      	ldr	r1, [r7, #0]
 801f74c:	4618      	mov	r0, r3
 801f74e:	f7fd faa3 	bl	801cc98 <_Z10StringFromRK14MockNamedValue>
 801f752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f756:	4619      	mov	r1, r3
 801f758:	4620      	mov	r0, r4
 801f75a:	f7f0 fa4d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f75e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f762:	4618      	mov	r0, r3
 801f764:	f7f0 f9cb 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	332c      	adds	r3, #44	; 0x2c
 801f76c:	4948      	ldr	r1, [pc, #288]	; (801f890 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801f76e:	4618      	mov	r0, r3
 801f770:	f7f0 fa54 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	332c      	adds	r3, #44	; 0x2c
 801f778:	4946      	ldr	r1, [pc, #280]	; (801f894 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801f77a:	4618      	mov	r0, r3
 801f77c:	f7f0 fa4e 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f780:	68fb      	ldr	r3, [r7, #12]
 801f782:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f784:	6879      	ldr	r1, [r7, #4]
 801f786:	4618      	mov	r0, r3
 801f788:	f7ff fdac 	bl	801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801f78c:	68fb      	ldr	r3, [r7, #12]
 801f78e:	332c      	adds	r3, #44	; 0x2c
 801f790:	4941      	ldr	r1, [pc, #260]	; (801f898 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801f792:	4618      	mov	r0, r3
 801f794:	f7f0 fa42 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	332c      	adds	r3, #44	; 0x2c
 801f79c:	6879      	ldr	r1, [r7, #4]
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f7f0 fa2a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f7a4:	68fb      	ldr	r3, [r7, #12]
 801f7a6:	332c      	adds	r3, #44	; 0x2c
 801f7a8:	493a      	ldr	r1, [pc, #232]	; (801f894 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801f7aa:	4618      	mov	r0, r3
 801f7ac:	f7f0 fa36 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	332c      	adds	r3, #44	; 0x2c
 801f7b4:	4939      	ldr	r1, [pc, #228]	; (801f89c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801f7b6:	4618      	mov	r0, r3
 801f7b8:	f7f0 fa30 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f7c2:	683b      	ldr	r3, [r7, #0]
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	3360      	adds	r3, #96	; 0x60
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801f7ce:	6839      	ldr	r1, [r7, #0]
 801f7d0:	4610      	mov	r0, r2
 801f7d2:	4798      	blx	r3
 801f7d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f7d8:	4619      	mov	r1, r3
 801f7da:	4620      	mov	r0, r4
 801f7dc:	f7f0 fa0c 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f7e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f7e4:	4618      	mov	r0, r3
 801f7e6:	f7f0 f98a 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	332c      	adds	r3, #44	; 0x2c
 801f7ee:	492c      	ldr	r1, [pc, #176]	; (801f8a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801f7f0:	4618      	mov	r0, r3
 801f7f2:	f7f0 fa13 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f7fc:	683b      	ldr	r3, [r7, #0]
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	335c      	adds	r3, #92	; 0x5c
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f808:	6839      	ldr	r1, [r7, #0]
 801f80a:	4610      	mov	r0, r2
 801f80c:	4798      	blx	r3
 801f80e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f812:	4619      	mov	r1, r3
 801f814:	4620      	mov	r0, r4
 801f816:	f7f0 f9ef 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f81a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f81e:	4618      	mov	r0, r3
 801f820:	f7f0 f96d 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	332c      	adds	r3, #44	; 0x2c
 801f828:	491e      	ldr	r1, [pc, #120]	; (801f8a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801f82a:	4618      	mov	r0, r3
 801f82c:	f7f0 f9f6 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801f830:	68fb      	ldr	r3, [r7, #12]
 801f832:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f83a:	6839      	ldr	r1, [r7, #0]
 801f83c:	4618      	mov	r0, r3
 801f83e:	f7fd fa2b 	bl	801cc98 <_Z10StringFromRK14MockNamedValue>
 801f842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f846:	4619      	mov	r1, r3
 801f848:	4620      	mov	r0, r4
 801f84a:	f7f0 f9d5 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f84e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f852:	4618      	mov	r0, r3
 801f854:	f7f0 f953 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801f858:	68fb      	ldr	r3, [r7, #12]
 801f85a:	332c      	adds	r3, #44	; 0x2c
 801f85c:	490c      	ldr	r1, [pc, #48]	; (801f890 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801f85e:	4618      	mov	r0, r3
 801f860:	f7f0 f9dc 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f864:	f107 0310 	add.w	r3, r7, #16
 801f868:	4618      	mov	r0, r3
 801f86a:	f7fe fdd1 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 801f86e:	68fb      	ldr	r3, [r7, #12]
 801f870:	4618      	mov	r0, r3
 801f872:	3764      	adds	r7, #100	; 0x64
 801f874:	46bd      	mov	sp, r7
 801f876:	bd90      	pop	{r4, r7, pc}
 801f878:	0802c1d4 	.word	0x0802c1d4
 801f87c:	0802949c 	.word	0x0802949c
 801f880:	080294d4 	.word	0x080294d4
 801f884:	080294d8 	.word	0x080294d8
 801f888:	08029510 	.word	0x08029510
 801f88c:	08029520 	.word	0x08029520
 801f890:	08029528 	.word	0x08029528
 801f894:	080293a0 	.word	0x080293a0
 801f898:	0802952c 	.word	0x0802952c
 801f89c:	08029334 	.word	0x08029334
 801f8a0:	08029560 	.word	0x08029560
 801f8a4:	08029564 	.word	0x08029564

0801f8a8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801f8a8:	b590      	push	{r4, r7, lr}
 801f8aa:	b097      	sub	sp, #92	; 0x5c
 801f8ac:	af00      	add	r7, sp, #0
 801f8ae:	60f8      	str	r0, [r7, #12]
 801f8b0:	60b9      	str	r1, [r7, #8]
 801f8b2:	607a      	str	r2, [r7, #4]
 801f8b4:	603b      	str	r3, [r7, #0]
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	68b9      	ldr	r1, [r7, #8]
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	f7ff fc8a 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801f8c0:	4a90      	ldr	r2, [pc, #576]	; (801fb04 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801f8c2:	68fb      	ldr	r3, [r7, #12]
 801f8c4:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f8c6:	f107 0310 	add.w	r3, r7, #16
 801f8ca:	4618      	mov	r0, r3
 801f8cc:	f7fe fd8c 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801f8d0:	f107 0310 	add.w	r3, r7, #16
 801f8d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f8d6:	6879      	ldr	r1, [r7, #4]
 801f8d8:	4618      	mov	r0, r3
 801f8da:	f7fe ff2b 	bl	801e734 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	335c      	adds	r3, #92	; 0x5c
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	f107 0218 	add.w	r2, r7, #24
 801f8ea:	6839      	ldr	r1, [r7, #0]
 801f8ec:	4610      	mov	r0, r2
 801f8ee:	4798      	blx	r3
 801f8f0:	f107 0218 	add.w	r2, r7, #24
 801f8f4:	f107 0310 	add.w	r3, r7, #16
 801f8f8:	4611      	mov	r1, r2
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	f7ff f812 	bl	801e924 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801f900:	f107 0318 	add.w	r3, r7, #24
 801f904:	4618      	mov	r0, r3
 801f906:	f7f0 f8fa 	bl	800fafe <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801f90a:	f107 0310 	add.w	r3, r7, #16
 801f90e:	4618      	mov	r0, r3
 801f910:	f7fe fdeb 	bl	801e4ea <_ZNK21MockExpectedCallsList7isEmptyEv>
 801f914:	4603      	mov	r3, r0
 801f916:	2b00      	cmp	r3, #0
 801f918:	d037      	beq.n	801f98a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f920:	f107 0320 	add.w	r3, r7, #32
 801f924:	4978      	ldr	r1, [pc, #480]	; (801fb08 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801f926:	4618      	mov	r0, r3
 801f928:	f7ef fd31 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f92c:	f107 0320 	add.w	r3, r7, #32
 801f930:	4619      	mov	r1, r3
 801f932:	4620      	mov	r0, r4
 801f934:	f7ef fd97 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f938:	f107 0320 	add.w	r3, r7, #32
 801f93c:	4618      	mov	r0, r3
 801f93e:	f7f0 f8de 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	332c      	adds	r3, #44	; 0x2c
 801f946:	6879      	ldr	r1, [r7, #4]
 801f948:	4618      	mov	r0, r3
 801f94a:	f7f0 f955 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	332c      	adds	r3, #44	; 0x2c
 801f952:	496e      	ldr	r1, [pc, #440]	; (801fb0c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801f954:	4618      	mov	r0, r3
 801f956:	f7f0 f961 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f960:	683b      	ldr	r3, [r7, #0]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	335c      	adds	r3, #92	; 0x5c
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f96c:	6839      	ldr	r1, [r7, #0]
 801f96e:	4610      	mov	r0, r2
 801f970:	4798      	blx	r3
 801f972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f976:	4619      	mov	r1, r3
 801f978:	4620      	mov	r0, r4
 801f97a:	f7f0 f93d 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f97e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f982:	4618      	mov	r0, r3
 801f984:	f7f0 f8bb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801f988:	e059      	b.n	801fa3e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f994:	495e      	ldr	r1, [pc, #376]	; (801fb10 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801f996:	4618      	mov	r0, r3
 801f998:	f7ef fcf9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801f99c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f9a0:	4619      	mov	r1, r3
 801f9a2:	4620      	mov	r0, r4
 801f9a4:	f7ef fd5f 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801f9a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7f0 f8a6 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801f9b2:	68fb      	ldr	r3, [r7, #12]
 801f9b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f9b8:	683b      	ldr	r3, [r7, #0]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	3360      	adds	r3, #96	; 0x60
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801f9c4:	6839      	ldr	r1, [r7, #0]
 801f9c6:	4610      	mov	r0, r2
 801f9c8:	4798      	blx	r3
 801f9ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f9ce:	4619      	mov	r1, r3
 801f9d0:	4620      	mov	r0, r4
 801f9d2:	f7f0 f911 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801f9d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f9da:	4618      	mov	r0, r3
 801f9dc:	f7f0 f88f 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801f9e0:	68fb      	ldr	r3, [r7, #12]
 801f9e2:	332c      	adds	r3, #44	; 0x2c
 801f9e4:	494b      	ldr	r1, [pc, #300]	; (801fb14 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801f9e6:	4618      	mov	r0, r3
 801f9e8:	f7f0 f918 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f9f2:	683b      	ldr	r3, [r7, #0]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	335c      	adds	r3, #92	; 0x5c
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801f9fe:	6839      	ldr	r1, [r7, #0]
 801fa00:	4610      	mov	r0, r2
 801fa02:	4798      	blx	r3
 801fa04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fa08:	4619      	mov	r1, r3
 801fa0a:	4620      	mov	r0, r4
 801fa0c:	f7f0 f8f4 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801fa10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fa14:	4618      	mov	r0, r3
 801fa16:	f7f0 f872 	bl	800fafe <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	332c      	adds	r3, #44	; 0x2c
 801fa1e:	493e      	ldr	r1, [pc, #248]	; (801fb18 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801fa20:	4618      	mov	r0, r3
 801fa22:	f7f0 f8fb 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	332c      	adds	r3, #44	; 0x2c
 801fa2a:	6879      	ldr	r1, [r7, #4]
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	f7f0 f8e3 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	332c      	adds	r3, #44	; 0x2c
 801fa36:	4939      	ldr	r1, [pc, #228]	; (801fb1c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801fa38:	4618      	mov	r0, r3
 801fa3a:	f7f0 f8ef 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801fa3e:	68fb      	ldr	r3, [r7, #12]
 801fa40:	332c      	adds	r3, #44	; 0x2c
 801fa42:	4937      	ldr	r1, [pc, #220]	; (801fb20 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801fa44:	4618      	mov	r0, r3
 801fa46:	f7f0 f8e9 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fa4e:	6879      	ldr	r1, [r7, #4]
 801fa50:	4618      	mov	r0, r3
 801fa52:	f7ff fc47 	bl	801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801fa56:	68fb      	ldr	r3, [r7, #12]
 801fa58:	332c      	adds	r3, #44	; 0x2c
 801fa5a:	4932      	ldr	r1, [pc, #200]	; (801fb24 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801fa5c:	4618      	mov	r0, r3
 801fa5e:	f7f0 f8dd 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	332c      	adds	r3, #44	; 0x2c
 801fa66:	6879      	ldr	r1, [r7, #4]
 801fa68:	4618      	mov	r0, r3
 801fa6a:	f7f0 f8c5 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801fa6e:	68fb      	ldr	r3, [r7, #12]
 801fa70:	332c      	adds	r3, #44	; 0x2c
 801fa72:	492b      	ldr	r1, [pc, #172]	; (801fb20 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801fa74:	4618      	mov	r0, r3
 801fa76:	f7f0 f8d1 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801fa7a:	68fb      	ldr	r3, [r7, #12]
 801fa7c:	332c      	adds	r3, #44	; 0x2c
 801fa7e:	492a      	ldr	r1, [pc, #168]	; (801fb28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801fa80:	4618      	mov	r0, r3
 801fa82:	f7f0 f8cb 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fa8c:	683b      	ldr	r3, [r7, #0]
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	3360      	adds	r3, #96	; 0x60
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801fa98:	6839      	ldr	r1, [r7, #0]
 801fa9a:	4610      	mov	r0, r2
 801fa9c:	4798      	blx	r3
 801fa9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801faa2:	4619      	mov	r1, r3
 801faa4:	4620      	mov	r0, r4
 801faa6:	f7f0 f8a7 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801faaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801faae:	4618      	mov	r0, r3
 801fab0:	f7f0 f825 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801fab4:	68fb      	ldr	r3, [r7, #12]
 801fab6:	332c      	adds	r3, #44	; 0x2c
 801fab8:	491c      	ldr	r1, [pc, #112]	; (801fb2c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801faba:	4618      	mov	r0, r3
 801fabc:	f7f0 f8ae 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fac6:	683b      	ldr	r3, [r7, #0]
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	335c      	adds	r3, #92	; 0x5c
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801fad2:	6839      	ldr	r1, [r7, #0]
 801fad4:	4610      	mov	r0, r2
 801fad6:	4798      	blx	r3
 801fad8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801fadc:	4619      	mov	r1, r3
 801fade:	4620      	mov	r0, r4
 801fae0:	f7f0 f88a 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801fae4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801fae8:	4618      	mov	r0, r3
 801faea:	f7f0 f808 	bl	800fafe <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801faee:	f107 0310 	add.w	r3, r7, #16
 801faf2:	4618      	mov	r0, r3
 801faf4:	f7fe fc8c 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 801faf8:	68fb      	ldr	r3, [r7, #12]
 801fafa:	4618      	mov	r0, r3
 801fafc:	375c      	adds	r7, #92	; 0x5c
 801fafe:	46bd      	mov	sp, r7
 801fb00:	bd90      	pop	{r4, r7, pc}
 801fb02:	bf00      	nop
 801fb04:	0802c1a8 	.word	0x0802c1a8
 801fb08:	08029568 	.word	0x08029568
 801fb0c:	080294d4 	.word	0x080294d4
 801fb10:	080295a8 	.word	0x080295a8
 801fb14:	080295d4 	.word	0x080295d4
 801fb18:	08029510 	.word	0x08029510
 801fb1c:	080295ec 	.word	0x080295ec
 801fb20:	080293a0 	.word	0x080293a0
 801fb24:	080295f0 	.word	0x080295f0
 801fb28:	08029334 	.word	0x08029334
 801fb2c:	08029560 	.word	0x08029560

0801fb30 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801fb30:	b590      	push	{r4, r7, lr}
 801fb32:	b08b      	sub	sp, #44	; 0x2c
 801fb34:	af00      	add	r7, sp, #0
 801fb36:	60f8      	str	r0, [r7, #12]
 801fb38:	60b9      	str	r1, [r7, #8]
 801fb3a:	607a      	str	r2, [r7, #4]
 801fb3c:	603b      	str	r3, [r7, #0]
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	68b9      	ldr	r1, [r7, #8]
 801fb42:	4618      	mov	r0, r3
 801fb44:	f7ff fb46 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801fb48:	4a30      	ldr	r2, [pc, #192]	; (801fc0c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801fb4e:	f107 0310 	add.w	r3, r7, #16
 801fb52:	4618      	mov	r0, r3
 801fb54:	f7fe fc48 	bl	801e3e8 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801fb58:	f107 0310 	add.w	r3, r7, #16
 801fb5c:	683a      	ldr	r2, [r7, #0]
 801fb5e:	6879      	ldr	r1, [r7, #4]
 801fb60:	4618      	mov	r0, r3
 801fb62:	f7fe fde7 	bl	801e734 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801fb66:	68fb      	ldr	r3, [r7, #12]
 801fb68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fb6c:	f107 0318 	add.w	r3, r7, #24
 801fb70:	4927      	ldr	r1, [pc, #156]	; (801fc10 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801fb72:	4618      	mov	r0, r3
 801fb74:	f7ef fc0b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801fb78:	f107 0318 	add.w	r3, r7, #24
 801fb7c:	4619      	mov	r1, r3
 801fb7e:	4620      	mov	r0, r4
 801fb80:	f7ef fc71 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fb84:	f107 0318 	add.w	r3, r7, #24
 801fb88:	4618      	mov	r0, r3
 801fb8a:	f7ef ffb8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801fb8e:	68fb      	ldr	r3, [r7, #12]
 801fb90:	332c      	adds	r3, #44	; 0x2c
 801fb92:	6879      	ldr	r1, [r7, #4]
 801fb94:	4618      	mov	r0, r3
 801fb96:	f7f0 f82f 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801fb9a:	68fb      	ldr	r3, [r7, #12]
 801fb9c:	332c      	adds	r3, #44	; 0x2c
 801fb9e:	491d      	ldr	r1, [pc, #116]	; (801fc14 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801fba0:	4618      	mov	r0, r3
 801fba2:	f7f0 f83b 	bl	800fc1c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	683a      	ldr	r2, [r7, #0]
 801fbaa:	6879      	ldr	r1, [r7, #4]
 801fbac:	4618      	mov	r0, r3
 801fbae:	f7ff fb99 	bl	801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801fbb2:	68fb      	ldr	r3, [r7, #12]
 801fbb4:	332c      	adds	r3, #44	; 0x2c
 801fbb6:	4918      	ldr	r1, [pc, #96]	; (801fc18 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801fbb8:	4618      	mov	r0, r3
 801fbba:	f7f0 f82f 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801fbbe:	68fb      	ldr	r3, [r7, #12]
 801fbc0:	332c      	adds	r3, #44	; 0x2c
 801fbc2:	4916      	ldr	r1, [pc, #88]	; (801fc1c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	f7f0 f829 	bl	800fc1c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fbd0:	f107 0320 	add.w	r3, r7, #32
 801fbd4:	f107 0210 	add.w	r2, r7, #16
 801fbd8:	4611      	mov	r1, r2
 801fbda:	4618      	mov	r0, r3
 801fbdc:	f7ff f9bc 	bl	801ef58 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801fbe0:	f107 0320 	add.w	r3, r7, #32
 801fbe4:	4619      	mov	r1, r3
 801fbe6:	4620      	mov	r0, r4
 801fbe8:	f7f0 f806 	bl	800fbf8 <_ZN12SimpleStringpLERKS_>
 801fbec:	f107 0320 	add.w	r3, r7, #32
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	f7ef ff84 	bl	800fafe <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801fbf6:	f107 0310 	add.w	r3, r7, #16
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	f7fe fc08 	bl	801e410 <_ZN21MockExpectedCallsListD1Ev>
}
 801fc00:	68fb      	ldr	r3, [r7, #12]
 801fc02:	4618      	mov	r0, r3
 801fc04:	372c      	adds	r7, #44	; 0x2c
 801fc06:	46bd      	mov	sp, r7
 801fc08:	bd90      	pop	{r4, r7, pc}
 801fc0a:	bf00      	nop
 801fc0c:	0802c17c 	.word	0x0802c17c
 801fc10:	0802962c 	.word	0x0802962c
 801fc14:	0802965c 	.word	0x0802965c
 801fc18:	08029670 	.word	0x08029670
 801fc1c:	08029334 	.word	0x08029334

0801fc20 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801fc20:	b590      	push	{r4, r7, lr}
 801fc22:	b087      	sub	sp, #28
 801fc24:	af00      	add	r7, sp, #0
 801fc26:	60f8      	str	r0, [r7, #12]
 801fc28:	60b9      	str	r1, [r7, #8]
 801fc2a:	607a      	str	r2, [r7, #4]
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	68b9      	ldr	r1, [r7, #8]
 801fc30:	4618      	mov	r0, r3
 801fc32:	f7ff facf 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801fc36:	4a10      	ldr	r2, [pc, #64]	; (801fc78 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801fc38:	68fb      	ldr	r3, [r7, #12]
 801fc3a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fc42:	6878      	ldr	r0, [r7, #4]
 801fc44:	f7ef ff2e 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801fc48:	4602      	mov	r2, r0
 801fc4a:	f107 0310 	add.w	r3, r7, #16
 801fc4e:	490b      	ldr	r1, [pc, #44]	; (801fc7c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801fc50:	4618      	mov	r0, r3
 801fc52:	f7f0 fc5b 	bl	801050c <_Z16StringFromFormatPKcz>
 801fc56:	f107 0310 	add.w	r3, r7, #16
 801fc5a:	4619      	mov	r1, r3
 801fc5c:	4620      	mov	r0, r4
 801fc5e:	f7ef fc02 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fc62:	f107 0310 	add.w	r3, r7, #16
 801fc66:	4618      	mov	r0, r3
 801fc68:	f7ef ff49 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	4618      	mov	r0, r3
 801fc70:	371c      	adds	r7, #28
 801fc72:	46bd      	mov	sp, r7
 801fc74:	bd90      	pop	{r4, r7, pc}
 801fc76:	bf00      	nop
 801fc78:	0802c150 	.word	0x0802c150
 801fc7c:	0802969c 	.word	0x0802969c

0801fc80 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801fc80:	b590      	push	{r4, r7, lr}
 801fc82:	b087      	sub	sp, #28
 801fc84:	af00      	add	r7, sp, #0
 801fc86:	60f8      	str	r0, [r7, #12]
 801fc88:	60b9      	str	r1, [r7, #8]
 801fc8a:	607a      	str	r2, [r7, #4]
 801fc8c:	68fb      	ldr	r3, [r7, #12]
 801fc8e:	68b9      	ldr	r1, [r7, #8]
 801fc90:	4618      	mov	r0, r3
 801fc92:	f7ff fa9f 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801fc96:	4a10      	ldr	r2, [pc, #64]	; (801fcd8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801fc9c:	68fb      	ldr	r3, [r7, #12]
 801fc9e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fca2:	6878      	ldr	r0, [r7, #4]
 801fca4:	f7ef fefe 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801fca8:	4602      	mov	r2, r0
 801fcaa:	f107 0310 	add.w	r3, r7, #16
 801fcae:	490b      	ldr	r1, [pc, #44]	; (801fcdc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	f7f0 fc2b 	bl	801050c <_Z16StringFromFormatPKcz>
 801fcb6:	f107 0310 	add.w	r3, r7, #16
 801fcba:	4619      	mov	r1, r3
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	f7ef fbd2 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fcc2:	f107 0310 	add.w	r3, r7, #16
 801fcc6:	4618      	mov	r0, r3
 801fcc8:	f7ef ff19 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 801fccc:	68fb      	ldr	r3, [r7, #12]
 801fcce:	4618      	mov	r0, r3
 801fcd0:	371c      	adds	r7, #28
 801fcd2:	46bd      	mov	sp, r7
 801fcd4:	bd90      	pop	{r4, r7, pc}
 801fcd6:	bf00      	nop
 801fcd8:	0802c124 	.word	0x0802c124
 801fcdc:	080296f4 	.word	0x080296f4

0801fce0 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801fce0:	b590      	push	{r4, r7, lr}
 801fce2:	b087      	sub	sp, #28
 801fce4:	af00      	add	r7, sp, #0
 801fce6:	60f8      	str	r0, [r7, #12]
 801fce8:	60b9      	str	r1, [r7, #8]
 801fcea:	607a      	str	r2, [r7, #4]
 801fcec:	603b      	str	r3, [r7, #0]
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	68b9      	ldr	r1, [r7, #8]
 801fcf2:	4618      	mov	r0, r3
 801fcf4:	f7ff fa6e 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801fcf8:	4a12      	ldr	r2, [pc, #72]	; (801fd44 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801fd04:	6878      	ldr	r0, [r7, #4]
 801fd06:	f7ef fecd 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801fd0a:	4602      	mov	r2, r0
 801fd0c:	f107 0010 	add.w	r0, r7, #16
 801fd10:	683b      	ldr	r3, [r7, #0]
 801fd12:	490d      	ldr	r1, [pc, #52]	; (801fd48 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801fd14:	f7f0 fbfa 	bl	801050c <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801fd18:	f107 0310 	add.w	r3, r7, #16
 801fd1c:	4619      	mov	r1, r3
 801fd1e:	4620      	mov	r0, r4
 801fd20:	f7ef fba1 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fd24:	f107 0310 	add.w	r3, r7, #16
 801fd28:	4618      	mov	r0, r3
 801fd2a:	f7ef fee8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801fd2e:	68fb      	ldr	r3, [r7, #12]
 801fd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fd32:	6879      	ldr	r1, [r7, #4]
 801fd34:	4618      	mov	r0, r3
 801fd36:	f7ff fad5 	bl	801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	371c      	adds	r7, #28
 801fd40:	46bd      	mov	sp, r7
 801fd42:	bd90      	pop	{r4, r7, pc}
 801fd44:	0802c0f8 	.word	0x0802c0f8
 801fd48:	08029744 	.word	0x08029744

0801fd4c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801fd4c:	b590      	push	{r4, r7, lr}
 801fd4e:	b087      	sub	sp, #28
 801fd50:	af00      	add	r7, sp, #0
 801fd52:	60f8      	str	r0, [r7, #12]
 801fd54:	60b9      	str	r1, [r7, #8]
 801fd56:	607a      	str	r2, [r7, #4]
 801fd58:	603b      	str	r3, [r7, #0]
 801fd5a:	68fb      	ldr	r3, [r7, #12]
 801fd5c:	68b9      	ldr	r1, [r7, #8]
 801fd5e:	4618      	mov	r0, r3
 801fd60:	f7ff fa38 	bl	801f1d4 <_ZN11MockFailureC1EP10UtestShell>
 801fd64:	4a12      	ldr	r2, [pc, #72]	; (801fdb0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801fd6a:	68fb      	ldr	r3, [r7, #12]
 801fd6c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801fd70:	6878      	ldr	r0, [r7, #4]
 801fd72:	f7ef fe97 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 801fd76:	4602      	mov	r2, r0
 801fd78:	f107 0310 	add.w	r3, r7, #16
 801fd7c:	490d      	ldr	r1, [pc, #52]	; (801fdb4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801fd7e:	4618      	mov	r0, r3
 801fd80:	f7f0 fbc4 	bl	801050c <_Z16StringFromFormatPKcz>
 801fd84:	f107 0310 	add.w	r3, r7, #16
 801fd88:	4619      	mov	r1, r3
 801fd8a:	4620      	mov	r0, r4
 801fd8c:	f7ef fb6b 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fd90:	f107 0310 	add.w	r3, r7, #16
 801fd94:	4618      	mov	r0, r3
 801fd96:	f7ef feb2 	bl	800fafe <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	683a      	ldr	r2, [r7, #0]
 801fd9e:	6879      	ldr	r1, [r7, #4]
 801fda0:	4618      	mov	r0, r3
 801fda2:	f7ff fa9f 	bl	801f2e4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	4618      	mov	r0, r3
 801fdaa:	371c      	adds	r7, #28
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd90      	pop	{r4, r7, pc}
 801fdb0:	0802c0cc 	.word	0x0802c0cc
 801fdb4:	080297a8 	.word	0x080297a8

0801fdb8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801fdb8:	b480      	push	{r7}
 801fdba:	b083      	sub	sp, #12
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801fdc0:	4a04      	ldr	r2, [pc, #16]	; (801fdd4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	6013      	str	r3, [r2, #0]
}
 801fdc6:	bf00      	nop
 801fdc8:	370c      	adds	r7, #12
 801fdca:	46bd      	mov	sp, r7
 801fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdd0:	4770      	bx	lr
 801fdd2:	bf00      	nop
 801fdd4:	2000105c 	.word	0x2000105c

0801fdd8 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801fdd8:	b580      	push	{r7, lr}
 801fdda:	b082      	sub	sp, #8
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	6078      	str	r0, [r7, #4]
 801fde0:	6039      	str	r1, [r7, #0]
 801fde2:	4a10      	ldr	r2, [pc, #64]	; (801fe24 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	601a      	str	r2, [r3, #0]
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	3304      	adds	r3, #4
 801fdec:	6839      	ldr	r1, [r7, #0]
 801fdee:	4618      	mov	r0, r3
 801fdf0:	f7ef fb21 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	330c      	adds	r3, #12
 801fdf8:	490b      	ldr	r1, [pc, #44]	; (801fe28 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	f7ef fac7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	2200      	movs	r2, #0
 801fe04:	629a      	str	r2, [r3, #40]	; 0x28
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	2200      	movs	r2, #0
 801fe0a:	62da      	str	r2, [r3, #44]	; 0x2c
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	2200      	movs	r2, #0
 801fe10:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801fe12:	687b      	ldr	r3, [r7, #4]
 801fe14:	2200      	movs	r2, #0
 801fe16:	619a      	str	r2, [r3, #24]
}
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	3708      	adds	r7, #8
 801fe1e:	46bd      	mov	sp, r7
 801fe20:	bd80      	pop	{r7, pc}
 801fe22:	bf00      	nop
 801fe24:	0802c954 	.word	0x0802c954
 801fe28:	080297f8 	.word	0x080297f8

0801fe2c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801fe2c:	b580      	push	{r7, lr}
 801fe2e:	b082      	sub	sp, #8
 801fe30:	af00      	add	r7, sp, #0
 801fe32:	6078      	str	r0, [r7, #4]
 801fe34:	4a08      	ldr	r2, [pc, #32]	; (801fe58 <_ZN14MockNamedValueD1Ev+0x2c>)
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	601a      	str	r2, [r3, #0]
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	330c      	adds	r3, #12
 801fe3e:	4618      	mov	r0, r3
 801fe40:	f7ef fe5d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	3304      	adds	r3, #4
 801fe48:	4618      	mov	r0, r3
 801fe4a:	f7ef fe58 	bl	800fafe <_ZN12SimpleStringD1Ev>
{
}
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	4618      	mov	r0, r3
 801fe52:	3708      	adds	r7, #8
 801fe54:	46bd      	mov	sp, r7
 801fe56:	bd80      	pop	{r7, pc}
 801fe58:	0802c954 	.word	0x0802c954

0801fe5c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801fe5c:	b580      	push	{r7, lr}
 801fe5e:	b082      	sub	sp, #8
 801fe60:	af00      	add	r7, sp, #0
 801fe62:	6078      	str	r0, [r7, #4]
}
 801fe64:	6878      	ldr	r0, [r7, #4]
 801fe66:	f7ff ffe1 	bl	801fe2c <_ZN14MockNamedValueD1Ev>
 801fe6a:	2138      	movs	r1, #56	; 0x38
 801fe6c:	6878      	ldr	r0, [r7, #4]
 801fe6e:	f7ec fedf 	bl	800cc30 <_ZdlPvj>
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	4618      	mov	r0, r3
 801fe76:	3708      	adds	r7, #8
 801fe78:	46bd      	mov	sp, r7
 801fe7a:	bd80      	pop	{r7, pc}

0801fe7c <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801fe7c:	b590      	push	{r4, r7, lr}
 801fe7e:	b085      	sub	sp, #20
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	6078      	str	r0, [r7, #4]
 801fe84:	460b      	mov	r3, r1
 801fe86:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	f103 040c 	add.w	r4, r3, #12
 801fe8e:	f107 0308 	add.w	r3, r7, #8
 801fe92:	490b      	ldr	r1, [pc, #44]	; (801fec0 <_ZN14MockNamedValue8setValueEb+0x44>)
 801fe94:	4618      	mov	r0, r3
 801fe96:	f7ef fa7a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801fe9a:	f107 0308 	add.w	r3, r7, #8
 801fe9e:	4619      	mov	r1, r3
 801fea0:	4620      	mov	r0, r4
 801fea2:	f7ef fae0 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801fea6:	f107 0308 	add.w	r3, r7, #8
 801feaa:	4618      	mov	r0, r3
 801feac:	f7ef fe27 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	78fa      	ldrb	r2, [r7, #3]
 801feb4:	761a      	strb	r2, [r3, #24]
}
 801feb6:	bf00      	nop
 801feb8:	3714      	adds	r7, #20
 801feba:	46bd      	mov	sp, r7
 801febc:	bd90      	pop	{r4, r7, pc}
 801febe:	bf00      	nop
 801fec0:	080297fc 	.word	0x080297fc

0801fec4 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801fec4:	b590      	push	{r4, r7, lr}
 801fec6:	b085      	sub	sp, #20
 801fec8:	af00      	add	r7, sp, #0
 801feca:	6078      	str	r0, [r7, #4]
 801fecc:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	f103 040c 	add.w	r4, r3, #12
 801fed4:	f107 0308 	add.w	r3, r7, #8
 801fed8:	490a      	ldr	r1, [pc, #40]	; (801ff04 <_ZN14MockNamedValue8setValueEj+0x40>)
 801feda:	4618      	mov	r0, r3
 801fedc:	f7ef fa57 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801fee0:	f107 0308 	add.w	r3, r7, #8
 801fee4:	4619      	mov	r1, r3
 801fee6:	4620      	mov	r0, r4
 801fee8:	f7ef fabd 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801feec:	f107 0308 	add.w	r3, r7, #8
 801fef0:	4618      	mov	r0, r3
 801fef2:	f7ef fe04 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	683a      	ldr	r2, [r7, #0]
 801fefa:	619a      	str	r2, [r3, #24]
}
 801fefc:	bf00      	nop
 801fefe:	3714      	adds	r7, #20
 801ff00:	46bd      	mov	sp, r7
 801ff02:	bd90      	pop	{r4, r7, pc}
 801ff04:	08029804 	.word	0x08029804

0801ff08 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801ff08:	b590      	push	{r4, r7, lr}
 801ff0a:	b085      	sub	sp, #20
 801ff0c:	af00      	add	r7, sp, #0
 801ff0e:	6078      	str	r0, [r7, #4]
 801ff10:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	f103 040c 	add.w	r4, r3, #12
 801ff18:	f107 0308 	add.w	r3, r7, #8
 801ff1c:	490a      	ldr	r1, [pc, #40]	; (801ff48 <_ZN14MockNamedValue8setValueEi+0x40>)
 801ff1e:	4618      	mov	r0, r3
 801ff20:	f7ef fa35 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ff24:	f107 0308 	add.w	r3, r7, #8
 801ff28:	4619      	mov	r1, r3
 801ff2a:	4620      	mov	r0, r4
 801ff2c:	f7ef fa9b 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801ff30:	f107 0308 	add.w	r3, r7, #8
 801ff34:	4618      	mov	r0, r3
 801ff36:	f7ef fde2 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	683a      	ldr	r2, [r7, #0]
 801ff3e:	619a      	str	r2, [r3, #24]
}
 801ff40:	bf00      	nop
 801ff42:	3714      	adds	r7, #20
 801ff44:	46bd      	mov	sp, r7
 801ff46:	bd90      	pop	{r4, r7, pc}
 801ff48:	080297f8 	.word	0x080297f8

0801ff4c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801ff4c:	b590      	push	{r4, r7, lr}
 801ff4e:	b085      	sub	sp, #20
 801ff50:	af00      	add	r7, sp, #0
 801ff52:	6078      	str	r0, [r7, #4]
 801ff54:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	f103 040c 	add.w	r4, r3, #12
 801ff5c:	f107 0308 	add.w	r3, r7, #8
 801ff60:	490a      	ldr	r1, [pc, #40]	; (801ff8c <_ZN14MockNamedValue8setValueEl+0x40>)
 801ff62:	4618      	mov	r0, r3
 801ff64:	f7ef fa13 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ff68:	f107 0308 	add.w	r3, r7, #8
 801ff6c:	4619      	mov	r1, r3
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f7ef fa79 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801ff74:	f107 0308 	add.w	r3, r7, #8
 801ff78:	4618      	mov	r0, r3
 801ff7a:	f7ef fdc0 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	683a      	ldr	r2, [r7, #0]
 801ff82:	619a      	str	r2, [r3, #24]
}
 801ff84:	bf00      	nop
 801ff86:	3714      	adds	r7, #20
 801ff88:	46bd      	mov	sp, r7
 801ff8a:	bd90      	pop	{r4, r7, pc}
 801ff8c:	08029814 	.word	0x08029814

0801ff90 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801ff90:	b590      	push	{r4, r7, lr}
 801ff92:	b085      	sub	sp, #20
 801ff94:	af00      	add	r7, sp, #0
 801ff96:	6078      	str	r0, [r7, #4]
 801ff98:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	f103 040c 	add.w	r4, r3, #12
 801ffa0:	f107 0308 	add.w	r3, r7, #8
 801ffa4:	490a      	ldr	r1, [pc, #40]	; (801ffd0 <_ZN14MockNamedValue8setValueEm+0x40>)
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7ef f9f1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 801ffac:	f107 0308 	add.w	r3, r7, #8
 801ffb0:	4619      	mov	r1, r3
 801ffb2:	4620      	mov	r0, r4
 801ffb4:	f7ef fa57 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 801ffb8:	f107 0308 	add.w	r3, r7, #8
 801ffbc:	4618      	mov	r0, r3
 801ffbe:	f7ef fd9e 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	683a      	ldr	r2, [r7, #0]
 801ffc6:	619a      	str	r2, [r3, #24]
}
 801ffc8:	bf00      	nop
 801ffca:	3714      	adds	r7, #20
 801ffcc:	46bd      	mov	sp, r7
 801ffce:	bd90      	pop	{r4, r7, pc}
 801ffd0:	08029820 	.word	0x08029820

0801ffd4 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801ffd4:	b5b0      	push	{r4, r5, r7, lr}
 801ffd6:	b086      	sub	sp, #24
 801ffd8:	af02      	add	r7, sp, #8
 801ffda:	60f8      	str	r0, [r7, #12]
 801ffdc:	1d3b      	adds	r3, r7, #4
 801ffde:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ffe2:	f7f6 fdb7 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 801ffe6:	4604      	mov	r4, r0
 801ffe8:	6823      	ldr	r3, [r4, #0]
 801ffea:	3368      	adds	r3, #104	; 0x68
 801ffec:	681d      	ldr	r5, [r3, #0]
 801ffee:	f7f6 fdc1 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fff2:	4603      	mov	r3, r0
 801fff4:	9300      	str	r3, [sp, #0]
 801fff6:	2367      	movs	r3, #103	; 0x67
 801fff8:	4a03      	ldr	r2, [pc, #12]	; (8020008 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801fffa:	4904      	ldr	r1, [pc, #16]	; (802000c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801fffc:	4620      	mov	r0, r4
 801fffe:	47a8      	blx	r5
}
 8020000:	bf00      	nop
 8020002:	3710      	adds	r7, #16
 8020004:	46bd      	mov	sp, r7
 8020006:	bdb0      	pop	{r4, r5, r7, pc}
 8020008:	08029834 	.word	0x08029834
 802000c:	08029850 	.word	0x08029850

08020010 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 8020010:	b5b0      	push	{r4, r5, r7, lr}
 8020012:	b086      	sub	sp, #24
 8020014:	af02      	add	r7, sp, #8
 8020016:	60f8      	str	r0, [r7, #12]
 8020018:	1d3b      	adds	r3, r7, #4
 802001a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 802001e:	f7f6 fd99 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8020022:	4604      	mov	r4, r0
 8020024:	6823      	ldr	r3, [r4, #0]
 8020026:	3368      	adds	r3, #104	; 0x68
 8020028:	681d      	ldr	r5, [r3, #0]
 802002a:	f7f6 fda3 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802002e:	4603      	mov	r3, r0
 8020030:	9300      	str	r3, [sp, #0]
 8020032:	236c      	movs	r3, #108	; 0x6c
 8020034:	4a03      	ldr	r2, [pc, #12]	; (8020044 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 8020036:	4904      	ldr	r1, [pc, #16]	; (8020048 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 8020038:	4620      	mov	r0, r4
 802003a:	47a8      	blx	r5
}
 802003c:	bf00      	nop
 802003e:	3710      	adds	r7, #16
 8020040:	46bd      	mov	sp, r7
 8020042:	bdb0      	pop	{r4, r5, r7, pc}
 8020044:	08029834 	.word	0x08029834
 8020048:	08029870 	.word	0x08029870
 802004c:	00000000 	.word	0x00000000

08020050 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 8020050:	b580      	push	{r7, lr}
 8020052:	b084      	sub	sp, #16
 8020054:	af00      	add	r7, sp, #0
 8020056:	60f8      	str	r0, [r7, #12]
 8020058:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 802005c:	68fb      	ldr	r3, [r7, #12]
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	3328      	adds	r3, #40	; 0x28
 8020062:	681b      	ldr	r3, [r3, #0]
 8020064:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8020078 <_ZN14MockNamedValue8setValueEd+0x28>
 8020068:	ed97 0b00 	vldr	d0, [r7]
 802006c:	68f8      	ldr	r0, [r7, #12]
 802006e:	4798      	blx	r3
}
 8020070:	bf00      	nop
 8020072:	3710      	adds	r7, #16
 8020074:	46bd      	mov	sp, r7
 8020076:	bd80      	pop	{r7, pc}
 8020078:	47ae147b 	.word	0x47ae147b
 802007c:	3f747ae1 	.word	0x3f747ae1

08020080 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 8020080:	b590      	push	{r4, r7, lr}
 8020082:	b089      	sub	sp, #36	; 0x24
 8020084:	af00      	add	r7, sp, #0
 8020086:	6178      	str	r0, [r7, #20]
 8020088:	ed87 0b02 	vstr	d0, [r7, #8]
 802008c:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 8020090:	697b      	ldr	r3, [r7, #20]
 8020092:	f103 040c 	add.w	r4, r3, #12
 8020096:	f107 0318 	add.w	r3, r7, #24
 802009a:	490e      	ldr	r1, [pc, #56]	; (80200d4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 802009c:	4618      	mov	r0, r3
 802009e:	f7ef f976 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80200a2:	f107 0318 	add.w	r3, r7, #24
 80200a6:	4619      	mov	r1, r3
 80200a8:	4620      	mov	r0, r4
 80200aa:	f7ef f9dc 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80200ae:	f107 0318 	add.w	r3, r7, #24
 80200b2:	4618      	mov	r0, r3
 80200b4:	f7ef fd23 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 80200b8:	6979      	ldr	r1, [r7, #20]
 80200ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80200be:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 80200c2:	6979      	ldr	r1, [r7, #20]
 80200c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80200c8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80200cc:	bf00      	nop
 80200ce:	3724      	adds	r7, #36	; 0x24
 80200d0:	46bd      	mov	sp, r7
 80200d2:	bd90      	pop	{r4, r7, pc}
 80200d4:	0802989c 	.word	0x0802989c

080200d8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 80200d8:	b590      	push	{r4, r7, lr}
 80200da:	b085      	sub	sp, #20
 80200dc:	af00      	add	r7, sp, #0
 80200de:	6078      	str	r0, [r7, #4]
 80200e0:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	f103 040c 	add.w	r4, r3, #12
 80200e8:	f107 0308 	add.w	r3, r7, #8
 80200ec:	490a      	ldr	r1, [pc, #40]	; (8020118 <_ZN14MockNamedValue8setValueEPv+0x40>)
 80200ee:	4618      	mov	r0, r3
 80200f0:	f7ef f94d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80200f4:	f107 0308 	add.w	r3, r7, #8
 80200f8:	4619      	mov	r1, r3
 80200fa:	4620      	mov	r0, r4
 80200fc:	f7ef f9b3 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8020100:	f107 0308 	add.w	r3, r7, #8
 8020104:	4618      	mov	r0, r3
 8020106:	f7ef fcfa 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	683a      	ldr	r2, [r7, #0]
 802010e:	619a      	str	r2, [r3, #24]
}
 8020110:	bf00      	nop
 8020112:	3714      	adds	r7, #20
 8020114:	46bd      	mov	sp, r7
 8020116:	bd90      	pop	{r4, r7, pc}
 8020118:	080298a4 	.word	0x080298a4

0802011c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 802011c:	b590      	push	{r4, r7, lr}
 802011e:	b085      	sub	sp, #20
 8020120:	af00      	add	r7, sp, #0
 8020122:	6078      	str	r0, [r7, #4]
 8020124:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 8020126:	687b      	ldr	r3, [r7, #4]
 8020128:	f103 040c 	add.w	r4, r3, #12
 802012c:	f107 0308 	add.w	r3, r7, #8
 8020130:	490a      	ldr	r1, [pc, #40]	; (802015c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 8020132:	4618      	mov	r0, r3
 8020134:	f7ef f92b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020138:	f107 0308 	add.w	r3, r7, #8
 802013c:	4619      	mov	r1, r3
 802013e:	4620      	mov	r0, r4
 8020140:	f7ef f991 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8020144:	f107 0308 	add.w	r3, r7, #8
 8020148:	4618      	mov	r0, r3
 802014a:	f7ef fcd8 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	683a      	ldr	r2, [r7, #0]
 8020152:	619a      	str	r2, [r3, #24]
}
 8020154:	bf00      	nop
 8020156:	3714      	adds	r7, #20
 8020158:	46bd      	mov	sp, r7
 802015a:	bd90      	pop	{r4, r7, pc}
 802015c:	080298ac 	.word	0x080298ac

08020160 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 8020160:	b590      	push	{r4, r7, lr}
 8020162:	b085      	sub	sp, #20
 8020164:	af00      	add	r7, sp, #0
 8020166:	6078      	str	r0, [r7, #4]
 8020168:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 802016a:	687b      	ldr	r3, [r7, #4]
 802016c:	f103 040c 	add.w	r4, r3, #12
 8020170:	f107 0308 	add.w	r3, r7, #8
 8020174:	490a      	ldr	r1, [pc, #40]	; (80201a0 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 8020176:	4618      	mov	r0, r3
 8020178:	f7ef f909 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802017c:	f107 0308 	add.w	r3, r7, #8
 8020180:	4619      	mov	r1, r3
 8020182:	4620      	mov	r0, r4
 8020184:	f7ef f96f 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8020188:	f107 0308 	add.w	r3, r7, #8
 802018c:	4618      	mov	r0, r3
 802018e:	f7ef fcb6 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	683a      	ldr	r2, [r7, #0]
 8020196:	619a      	str	r2, [r3, #24]
}
 8020198:	bf00      	nop
 802019a:	3714      	adds	r7, #20
 802019c:	46bd      	mov	sp, r7
 802019e:	bd90      	pop	{r4, r7, pc}
 80201a0:	080298b8 	.word	0x080298b8

080201a4 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 80201a4:	b590      	push	{r4, r7, lr}
 80201a6:	b085      	sub	sp, #20
 80201a8:	af00      	add	r7, sp, #0
 80201aa:	6078      	str	r0, [r7, #4]
 80201ac:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	f103 040c 	add.w	r4, r3, #12
 80201b4:	f107 0308 	add.w	r3, r7, #8
 80201b8:	490a      	ldr	r1, [pc, #40]	; (80201e4 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 80201ba:	4618      	mov	r0, r3
 80201bc:	f7ef f8e7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80201c0:	f107 0308 	add.w	r3, r7, #8
 80201c4:	4619      	mov	r1, r3
 80201c6:	4620      	mov	r0, r4
 80201c8:	f7ef f94d 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 80201cc:	f107 0308 	add.w	r3, r7, #8
 80201d0:	4618      	mov	r0, r3
 80201d2:	f7ef fc94 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	683a      	ldr	r2, [r7, #0]
 80201da:	619a      	str	r2, [r3, #24]
}
 80201dc:	bf00      	nop
 80201de:	3714      	adds	r7, #20
 80201e0:	46bd      	mov	sp, r7
 80201e2:	bd90      	pop	{r4, r7, pc}
 80201e4:	080298c4 	.word	0x080298c4

080201e8 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 80201e8:	b590      	push	{r4, r7, lr}
 80201ea:	b087      	sub	sp, #28
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	60f8      	str	r0, [r7, #12]
 80201f0:	60b9      	str	r1, [r7, #8]
 80201f2:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 80201f4:	68fb      	ldr	r3, [r7, #12]
 80201f6:	f103 040c 	add.w	r4, r3, #12
 80201fa:	f107 0310 	add.w	r3, r7, #16
 80201fe:	490c      	ldr	r1, [pc, #48]	; (8020230 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 8020200:	4618      	mov	r0, r3
 8020202:	f7ef f8c4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020206:	f107 0310 	add.w	r3, r7, #16
 802020a:	4619      	mov	r1, r3
 802020c:	4620      	mov	r0, r4
 802020e:	f7ef f92a 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8020212:	f107 0310 	add.w	r3, r7, #16
 8020216:	4618      	mov	r0, r3
 8020218:	f7ef fc71 	bl	800fafe <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 802021c:	68fb      	ldr	r3, [r7, #12]
 802021e:	68ba      	ldr	r2, [r7, #8]
 8020220:	619a      	str	r2, [r3, #24]
    size_ = size;
 8020222:	68fb      	ldr	r3, [r7, #12]
 8020224:	687a      	ldr	r2, [r7, #4]
 8020226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8020228:	bf00      	nop
 802022a:	371c      	adds	r7, #28
 802022c:	46bd      	mov	sp, r7
 802022e:	bd90      	pop	{r4, r7, pc}
 8020230:	080298d0 	.word	0x080298d0

08020234 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 8020234:	b580      	push	{r7, lr}
 8020236:	b084      	sub	sp, #16
 8020238:	af00      	add	r7, sp, #0
 802023a:	60f8      	str	r0, [r7, #12]
 802023c:	60b9      	str	r1, [r7, #8]
 802023e:	607a      	str	r2, [r7, #4]
    type_ = type;
 8020240:	68fb      	ldr	r3, [r7, #12]
 8020242:	330c      	adds	r3, #12
 8020244:	68b9      	ldr	r1, [r7, #8]
 8020246:	4618      	mov	r0, r3
 8020248:	f7ef f90d 	bl	800f466 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 802024c:	68fb      	ldr	r3, [r7, #12]
 802024e:	687a      	ldr	r2, [r7, #4]
 8020250:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 8020252:	4b11      	ldr	r3, [pc, #68]	; (8020298 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d019      	beq.n	802028e <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 802025a:	4b0f      	ldr	r3, [pc, #60]	; (8020298 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 802025c:	681a      	ldr	r2, [r3, #0]
 802025e:	4b0e      	ldr	r3, [pc, #56]	; (8020298 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	3314      	adds	r3, #20
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	68b9      	ldr	r1, [r7, #8]
 802026a:	4610      	mov	r0, r2
 802026c:	4798      	blx	r3
 802026e:	4602      	mov	r2, r0
 8020270:	68fb      	ldr	r3, [r7, #12]
 8020272:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 8020274:	4b08      	ldr	r3, [pc, #32]	; (8020298 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 8020276:	681a      	ldr	r2, [r3, #0]
 8020278:	4b07      	ldr	r3, [pc, #28]	; (8020298 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 802027a:	681b      	ldr	r3, [r3, #0]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	3318      	adds	r3, #24
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	68b9      	ldr	r1, [r7, #8]
 8020284:	4610      	mov	r0, r2
 8020286:	4798      	blx	r3
 8020288:	4602      	mov	r2, r0
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 802028e:	bf00      	nop
 8020290:	3710      	adds	r7, #16
 8020292:	46bd      	mov	sp, r7
 8020294:	bd80      	pop	{r7, pc}
 8020296:	bf00      	nop
 8020298:	2000105c 	.word	0x2000105c

0802029c <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 802029c:	b580      	push	{r7, lr}
 802029e:	b084      	sub	sp, #16
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	60f8      	str	r0, [r7, #12]
 80202a4:	60b9      	str	r1, [r7, #8]
 80202a6:	607a      	str	r2, [r7, #4]
    type_ = type;
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	330c      	adds	r3, #12
 80202ac:	68b9      	ldr	r1, [r7, #8]
 80202ae:	4618      	mov	r0, r3
 80202b0:	f7ef f8d9 	bl	800f466 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 80202b4:	68fb      	ldr	r3, [r7, #12]
 80202b6:	687a      	ldr	r2, [r7, #4]
 80202b8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 80202ba:	4b11      	ldr	r3, [pc, #68]	; (8020300 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d019      	beq.n	80202f6 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 80202c2:	4b0f      	ldr	r3, [pc, #60]	; (8020300 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 80202c4:	681a      	ldr	r2, [r3, #0]
 80202c6:	4b0e      	ldr	r3, [pc, #56]	; (8020300 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	3314      	adds	r3, #20
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	68b9      	ldr	r1, [r7, #8]
 80202d2:	4610      	mov	r0, r2
 80202d4:	4798      	blx	r3
 80202d6:	4602      	mov	r2, r0
 80202d8:	68fb      	ldr	r3, [r7, #12]
 80202da:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 80202dc:	4b08      	ldr	r3, [pc, #32]	; (8020300 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 80202de:	681a      	ldr	r2, [r3, #0]
 80202e0:	4b07      	ldr	r3, [pc, #28]	; (8020300 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 80202e2:	681b      	ldr	r3, [r3, #0]
 80202e4:	681b      	ldr	r3, [r3, #0]
 80202e6:	3318      	adds	r3, #24
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	68b9      	ldr	r1, [r7, #8]
 80202ec:	4610      	mov	r0, r2
 80202ee:	4798      	blx	r3
 80202f0:	4602      	mov	r2, r0
 80202f2:	68fb      	ldr	r3, [r7, #12]
 80202f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 80202f6:	bf00      	nop
 80202f8:	3710      	adds	r7, #16
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd80      	pop	{r7, pc}
 80202fe:	bf00      	nop
 8020300:	2000105c 	.word	0x2000105c

08020304 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 8020304:	b480      	push	{r7}
 8020306:	b083      	sub	sp, #12
 8020308:	af00      	add	r7, sp, #0
 802030a:	6078      	str	r0, [r7, #4]
 802030c:	6039      	str	r1, [r7, #0]
    size_ = size;
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	683a      	ldr	r2, [r7, #0]
 8020312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8020314:	bf00      	nop
 8020316:	370c      	adds	r7, #12
 8020318:	46bd      	mov	sp, r7
 802031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802031e:	4770      	bx	lr

08020320 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 8020320:	b590      	push	{r4, r7, lr}
 8020322:	b085      	sub	sp, #20
 8020324:	af00      	add	r7, sp, #0
 8020326:	6078      	str	r0, [r7, #4]
 8020328:	6039      	str	r1, [r7, #0]
    name_ = name;
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	1d1c      	adds	r4, r3, #4
 802032e:	f107 0308 	add.w	r3, r7, #8
 8020332:	6839      	ldr	r1, [r7, #0]
 8020334:	4618      	mov	r0, r3
 8020336:	f7ef f82a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802033a:	f107 0308 	add.w	r3, r7, #8
 802033e:	4619      	mov	r1, r3
 8020340:	4620      	mov	r0, r4
 8020342:	f7ef f890 	bl	800f466 <_ZN12SimpleStringaSERKS_>
 8020346:	f107 0308 	add.w	r3, r7, #8
 802034a:	4618      	mov	r0, r3
 802034c:	f7ef fbd7 	bl	800fafe <_ZN12SimpleStringD1Ev>
}
 8020350:	bf00      	nop
 8020352:	3714      	adds	r7, #20
 8020354:	46bd      	mov	sp, r7
 8020356:	bd90      	pop	{r4, r7, pc}

08020358 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 8020358:	b580      	push	{r7, lr}
 802035a:	b082      	sub	sp, #8
 802035c:	af00      	add	r7, sp, #0
 802035e:	6078      	str	r0, [r7, #4]
 8020360:	6039      	str	r1, [r7, #0]
    return name_;
 8020362:	683b      	ldr	r3, [r7, #0]
 8020364:	3304      	adds	r3, #4
 8020366:	4619      	mov	r1, r3
 8020368:	6878      	ldr	r0, [r7, #4]
 802036a:	f7ef f864 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 802036e:	6878      	ldr	r0, [r7, #4]
 8020370:	3708      	adds	r7, #8
 8020372:	46bd      	mov	sp, r7
 8020374:	bd80      	pop	{r7, pc}

08020376 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 8020376:	b580      	push	{r7, lr}
 8020378:	b082      	sub	sp, #8
 802037a:	af00      	add	r7, sp, #0
 802037c:	6078      	str	r0, [r7, #4]
 802037e:	6039      	str	r1, [r7, #0]
    return type_;
 8020380:	683b      	ldr	r3, [r7, #0]
 8020382:	330c      	adds	r3, #12
 8020384:	4619      	mov	r1, r3
 8020386:	6878      	ldr	r0, [r7, #4]
 8020388:	f7ef f855 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
}
 802038c:	6878      	ldr	r0, [r7, #4]
 802038e:	3708      	adds	r7, #8
 8020390:	46bd      	mov	sp, r7
 8020392:	bd80      	pop	{r7, pc}

08020394 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 8020394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020396:	b087      	sub	sp, #28
 8020398:	af04      	add	r7, sp, #16
 802039a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 802039c:	f7f6 fbda 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80203a0:	4604      	mov	r4, r0
 80203a2:	6823      	ldr	r3, [r4, #0]
 80203a4:	3324      	adds	r3, #36	; 0x24
 80203a6:	681d      	ldr	r5, [r3, #0]
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	330c      	adds	r3, #12
 80203ac:	4618      	mov	r0, r3
 80203ae:	f7ef fb79 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80203b2:	4606      	mov	r6, r0
 80203b4:	f7f6 fbde 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80203b8:	4603      	mov	r3, r0
 80203ba:	9302      	str	r3, [sp, #8]
 80203bc:	23c8      	movs	r3, #200	; 0xc8
 80203be:	9301      	str	r3, [sp, #4]
 80203c0:	4b06      	ldr	r3, [pc, #24]	; (80203dc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 80203c2:	9300      	str	r3, [sp, #0]
 80203c4:	2300      	movs	r3, #0
 80203c6:	4632      	mov	r2, r6
 80203c8:	4905      	ldr	r1, [pc, #20]	; (80203e0 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 80203ca:	4620      	mov	r0, r4
 80203cc:	47a8      	blx	r5
    return value_.boolValue_;
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	7e1b      	ldrb	r3, [r3, #24]
}
 80203d2:	4618      	mov	r0, r3
 80203d4:	370c      	adds	r7, #12
 80203d6:	46bd      	mov	sp, r7
 80203d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203da:	bf00      	nop
 80203dc:	08029834 	.word	0x08029834
 80203e0:	080297fc 	.word	0x080297fc

080203e4 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 80203e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203e6:	b089      	sub	sp, #36	; 0x24
 80203e8:	af04      	add	r7, sp, #16
 80203ea:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	f103 040c 	add.w	r4, r3, #12
 80203f2:	f107 0308 	add.w	r3, r7, #8
 80203f6:	4920      	ldr	r1, [pc, #128]	; (8020478 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 80203f8:	4618      	mov	r0, r3
 80203fa:	f7ee ffc8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80203fe:	2501      	movs	r5, #1
 8020400:	f107 0308 	add.w	r3, r7, #8
 8020404:	4619      	mov	r1, r3
 8020406:	4620      	mov	r0, r4
 8020408:	f7ef fb85 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802040c:	4603      	mov	r3, r0
 802040e:	2b00      	cmp	r3, #0
 8020410:	d005      	beq.n	802041e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	699b      	ldr	r3, [r3, #24]
 8020416:	2b00      	cmp	r3, #0
 8020418:	db01      	blt.n	802041e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 802041a:	2401      	movs	r4, #1
 802041c:	e000      	b.n	8020420 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 802041e:	2400      	movs	r4, #0
 8020420:	2d00      	cmp	r5, #0
 8020422:	d004      	beq.n	802042e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 8020424:	f107 0308 	add.w	r3, r7, #8
 8020428:	4618      	mov	r0, r3
 802042a:	f7ef fb68 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802042e:	2c00      	cmp	r4, #0
 8020430:	d002      	beq.n	8020438 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	699b      	ldr	r3, [r3, #24]
 8020436:	e01a      	b.n	802046e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 8020438:	f7f6 fb8c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 802043c:	4604      	mov	r4, r0
 802043e:	6823      	ldr	r3, [r4, #0]
 8020440:	3324      	adds	r3, #36	; 0x24
 8020442:	681d      	ldr	r5, [r3, #0]
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	330c      	adds	r3, #12
 8020448:	4618      	mov	r0, r3
 802044a:	f7ef fb2b 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802044e:	4606      	mov	r6, r0
 8020450:	f7f6 fb90 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020454:	4603      	mov	r3, r0
 8020456:	9302      	str	r3, [sp, #8]
 8020458:	23d2      	movs	r3, #210	; 0xd2
 802045a:	9301      	str	r3, [sp, #4]
 802045c:	4b07      	ldr	r3, [pc, #28]	; (802047c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 802045e:	9300      	str	r3, [sp, #0]
 8020460:	2300      	movs	r3, #0
 8020462:	4632      	mov	r2, r6
 8020464:	4906      	ldr	r1, [pc, #24]	; (8020480 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 8020466:	4620      	mov	r0, r4
 8020468:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	699b      	ldr	r3, [r3, #24]
    }
}
 802046e:	4618      	mov	r0, r3
 8020470:	3714      	adds	r7, #20
 8020472:	46bd      	mov	sp, r7
 8020474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020476:	bf00      	nop
 8020478:	080297f8 	.word	0x080297f8
 802047c:	08029834 	.word	0x08029834
 8020480:	08029804 	.word	0x08029804

08020484 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 8020484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020486:	b087      	sub	sp, #28
 8020488:	af04      	add	r7, sp, #16
 802048a:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 802048c:	f7f6 fb62 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8020490:	4604      	mov	r4, r0
 8020492:	6823      	ldr	r3, [r4, #0]
 8020494:	3324      	adds	r3, #36	; 0x24
 8020496:	681d      	ldr	r5, [r3, #0]
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	330c      	adds	r3, #12
 802049c:	4618      	mov	r0, r3
 802049e:	f7ef fb01 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80204a2:	4606      	mov	r6, r0
 80204a4:	f7f6 fb66 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80204a8:	4603      	mov	r3, r0
 80204aa:	9302      	str	r3, [sp, #8]
 80204ac:	23d9      	movs	r3, #217	; 0xd9
 80204ae:	9301      	str	r3, [sp, #4]
 80204b0:	4b06      	ldr	r3, [pc, #24]	; (80204cc <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 80204b2:	9300      	str	r3, [sp, #0]
 80204b4:	2300      	movs	r3, #0
 80204b6:	4632      	mov	r2, r6
 80204b8:	4905      	ldr	r1, [pc, #20]	; (80204d0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 80204ba:	4620      	mov	r0, r4
 80204bc:	47a8      	blx	r5
    return value_.intValue_;
 80204be:	687b      	ldr	r3, [r7, #4]
 80204c0:	699b      	ldr	r3, [r3, #24]
}
 80204c2:	4618      	mov	r0, r3
 80204c4:	370c      	adds	r7, #12
 80204c6:	46bd      	mov	sp, r7
 80204c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204ca:	bf00      	nop
 80204cc:	08029834 	.word	0x08029834
 80204d0:	080297f8 	.word	0x080297f8

080204d4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 80204d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204d6:	b08b      	sub	sp, #44	; 0x2c
 80204d8:	af04      	add	r7, sp, #16
 80204da:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	f103 040c 	add.w	r4, r3, #12
 80204e2:	f107 0308 	add.w	r3, r7, #8
 80204e6:	4928      	ldr	r1, [pc, #160]	; (8020588 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 80204e8:	4618      	mov	r0, r3
 80204ea:	f7ee ff50 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80204ee:	f107 0308 	add.w	r3, r7, #8
 80204f2:	4619      	mov	r1, r3
 80204f4:	4620      	mov	r0, r4
 80204f6:	f7ef fb0e 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80204fa:	4603      	mov	r3, r0
 80204fc:	461c      	mov	r4, r3
 80204fe:	f107 0308 	add.w	r3, r7, #8
 8020502:	4618      	mov	r0, r3
 8020504:	f7ef fafb 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020508:	2c00      	cmp	r4, #0
 802050a:	d002      	beq.n	8020512 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	699b      	ldr	r3, [r3, #24]
 8020510:	e035      	b.n	802057e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	f103 040c 	add.w	r4, r3, #12
 8020518:	f107 0310 	add.w	r3, r7, #16
 802051c:	491b      	ldr	r1, [pc, #108]	; (802058c <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 802051e:	4618      	mov	r0, r3
 8020520:	f7ee ff35 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020524:	f107 0310 	add.w	r3, r7, #16
 8020528:	4619      	mov	r1, r3
 802052a:	4620      	mov	r0, r4
 802052c:	f7ef faf3 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020530:	4603      	mov	r3, r0
 8020532:	461c      	mov	r4, r3
 8020534:	f107 0310 	add.w	r3, r7, #16
 8020538:	4618      	mov	r0, r3
 802053a:	f7ef fae0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802053e:	2c00      	cmp	r4, #0
 8020540:	d002      	beq.n	8020548 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	699b      	ldr	r3, [r3, #24]
 8020546:	e01a      	b.n	802057e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 8020548:	f7f6 fb04 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 802054c:	4604      	mov	r4, r0
 802054e:	6823      	ldr	r3, [r4, #0]
 8020550:	3324      	adds	r3, #36	; 0x24
 8020552:	681d      	ldr	r5, [r3, #0]
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	330c      	adds	r3, #12
 8020558:	4618      	mov	r0, r3
 802055a:	f7ef faa3 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802055e:	4606      	mov	r6, r0
 8020560:	f7f6 fb08 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020564:	4603      	mov	r3, r0
 8020566:	9302      	str	r3, [sp, #8]
 8020568:	23e5      	movs	r3, #229	; 0xe5
 802056a:	9301      	str	r3, [sp, #4]
 802056c:	4b08      	ldr	r3, [pc, #32]	; (8020590 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 802056e:	9300      	str	r3, [sp, #0]
 8020570:	2300      	movs	r3, #0
 8020572:	4632      	mov	r2, r6
 8020574:	4907      	ldr	r1, [pc, #28]	; (8020594 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 8020576:	4620      	mov	r0, r4
 8020578:	47a8      	blx	r5
        return value_.longIntValue_;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	699b      	ldr	r3, [r3, #24]
    }
}
 802057e:	4618      	mov	r0, r3
 8020580:	371c      	adds	r7, #28
 8020582:	46bd      	mov	sp, r7
 8020584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020586:	bf00      	nop
 8020588:	080297f8 	.word	0x080297f8
 802058c:	08029804 	.word	0x08029804
 8020590:	08029834 	.word	0x08029834
 8020594:	08029814 	.word	0x08029814

08020598 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 8020598:	b5f0      	push	{r4, r5, r6, r7, lr}
 802059a:	b08d      	sub	sp, #52	; 0x34
 802059c:	af04      	add	r7, sp, #16
 802059e:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	f103 040c 	add.w	r4, r3, #12
 80205a6:	f107 0308 	add.w	r3, r7, #8
 80205aa:	4940      	ldr	r1, [pc, #256]	; (80206ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 80205ac:	4618      	mov	r0, r3
 80205ae:	f7ee feee 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80205b2:	f107 0308 	add.w	r3, r7, #8
 80205b6:	4619      	mov	r1, r3
 80205b8:	4620      	mov	r0, r4
 80205ba:	f7ef faac 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80205be:	4603      	mov	r3, r0
 80205c0:	461c      	mov	r4, r3
 80205c2:	f107 0308 	add.w	r3, r7, #8
 80205c6:	4618      	mov	r0, r3
 80205c8:	f7ef fa99 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80205cc:	2c00      	cmp	r4, #0
 80205ce:	d002      	beq.n	80205d6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	699b      	ldr	r3, [r3, #24]
 80205d4:	e066      	b.n	80206a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	f103 040c 	add.w	r4, r3, #12
 80205dc:	f107 0310 	add.w	r3, r7, #16
 80205e0:	4933      	ldr	r1, [pc, #204]	; (80206b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 80205e2:	4618      	mov	r0, r3
 80205e4:	f7ee fed3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80205e8:	2501      	movs	r5, #1
 80205ea:	f107 0310 	add.w	r3, r7, #16
 80205ee:	4619      	mov	r1, r3
 80205f0:	4620      	mov	r0, r4
 80205f2:	f7ef fa90 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80205f6:	4603      	mov	r3, r0
 80205f8:	2b00      	cmp	r3, #0
 80205fa:	d005      	beq.n	8020608 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	699b      	ldr	r3, [r3, #24]
 8020600:	2b00      	cmp	r3, #0
 8020602:	db01      	blt.n	8020608 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 8020604:	2401      	movs	r4, #1
 8020606:	e000      	b.n	802060a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 8020608:	2400      	movs	r4, #0
 802060a:	2d00      	cmp	r5, #0
 802060c:	d004      	beq.n	8020618 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 802060e:	f107 0310 	add.w	r3, r7, #16
 8020612:	4618      	mov	r0, r3
 8020614:	f7ef fa73 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020618:	2c00      	cmp	r4, #0
 802061a:	d002      	beq.n	8020622 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	699b      	ldr	r3, [r3, #24]
 8020620:	e040      	b.n	80206a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	f103 040c 	add.w	r4, r3, #12
 8020628:	f107 0318 	add.w	r3, r7, #24
 802062c:	4921      	ldr	r1, [pc, #132]	; (80206b4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 802062e:	4618      	mov	r0, r3
 8020630:	f7ee fead 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020634:	2501      	movs	r5, #1
 8020636:	f107 0318 	add.w	r3, r7, #24
 802063a:	4619      	mov	r1, r3
 802063c:	4620      	mov	r0, r4
 802063e:	f7ef fa6a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020642:	4603      	mov	r3, r0
 8020644:	2b00      	cmp	r3, #0
 8020646:	d005      	beq.n	8020654 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	699b      	ldr	r3, [r3, #24]
 802064c:	2b00      	cmp	r3, #0
 802064e:	db01      	blt.n	8020654 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 8020650:	2401      	movs	r4, #1
 8020652:	e000      	b.n	8020656 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 8020654:	2400      	movs	r4, #0
 8020656:	2d00      	cmp	r5, #0
 8020658:	d004      	beq.n	8020664 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 802065a:	f107 0318 	add.w	r3, r7, #24
 802065e:	4618      	mov	r0, r3
 8020660:	f7ef fa4d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020664:	2c00      	cmp	r4, #0
 8020666:	d002      	beq.n	802066e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	699b      	ldr	r3, [r3, #24]
 802066c:	e01a      	b.n	80206a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 802066e:	f7f6 fa71 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8020672:	4604      	mov	r4, r0
 8020674:	6823      	ldr	r3, [r4, #0]
 8020676:	3324      	adds	r3, #36	; 0x24
 8020678:	681d      	ldr	r5, [r3, #0]
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	330c      	adds	r3, #12
 802067e:	4618      	mov	r0, r3
 8020680:	f7ef fa10 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8020684:	4606      	mov	r6, r0
 8020686:	f7f6 fa75 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802068a:	4603      	mov	r3, r0
 802068c:	9302      	str	r3, [sp, #8]
 802068e:	23f4      	movs	r3, #244	; 0xf4
 8020690:	9301      	str	r3, [sp, #4]
 8020692:	4b09      	ldr	r3, [pc, #36]	; (80206b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 8020694:	9300      	str	r3, [sp, #0]
 8020696:	2300      	movs	r3, #0
 8020698:	4632      	mov	r2, r6
 802069a:	4908      	ldr	r1, [pc, #32]	; (80206bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 802069c:	4620      	mov	r0, r4
 802069e:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	699b      	ldr	r3, [r3, #24]
    }
}
 80206a4:	4618      	mov	r0, r3
 80206a6:	3724      	adds	r7, #36	; 0x24
 80206a8:	46bd      	mov	sp, r7
 80206aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206ac:	08029804 	.word	0x08029804
 80206b0:	080297f8 	.word	0x080297f8
 80206b4:	08029814 	.word	0x08029814
 80206b8:	08029834 	.word	0x08029834
 80206bc:	08029820 	.word	0x08029820

080206c0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 80206c0:	b5b0      	push	{r4, r5, r7, lr}
 80206c2:	b084      	sub	sp, #16
 80206c4:	af02      	add	r7, sp, #8
 80206c6:	6078      	str	r0, [r7, #4]
 80206c8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80206ca:	f7f6 fa43 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80206ce:	4604      	mov	r4, r0
 80206d0:	6823      	ldr	r3, [r4, #0]
 80206d2:	3368      	adds	r3, #104	; 0x68
 80206d4:	681d      	ldr	r5, [r3, #0]
 80206d6:	f7f6 fa4d 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80206da:	4603      	mov	r3, r0
 80206dc:	9300      	str	r3, [sp, #0]
 80206de:	f240 1323 	movw	r3, #291	; 0x123
 80206e2:	4a06      	ldr	r2, [pc, #24]	; (80206fc <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 80206e4:	4906      	ldr	r1, [pc, #24]	; (8020700 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 80206e6:	4620      	mov	r0, r4
 80206e8:	47a8      	blx	r5
    return cpputest_longlong(0);
 80206ea:	2100      	movs	r1, #0
 80206ec:	6878      	ldr	r0, [r7, #4]
 80206ee:	f7ec fe85 	bl	800d3fc <_ZN17cpputest_longlongC1Ei>
}
 80206f2:	6878      	ldr	r0, [r7, #4]
 80206f4:	3708      	adds	r7, #8
 80206f6:	46bd      	mov	sp, r7
 80206f8:	bdb0      	pop	{r4, r5, r7, pc}
 80206fa:	bf00      	nop
 80206fc:	08029834 	.word	0x08029834
 8020700:	08029850 	.word	0x08029850

08020704 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 8020704:	b5b0      	push	{r4, r5, r7, lr}
 8020706:	b084      	sub	sp, #16
 8020708:	af02      	add	r7, sp, #8
 802070a:	6078      	str	r0, [r7, #4]
 802070c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 802070e:	f7f6 fa21 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8020712:	4604      	mov	r4, r0
 8020714:	6823      	ldr	r3, [r4, #0]
 8020716:	3368      	adds	r3, #104	; 0x68
 8020718:	681d      	ldr	r5, [r3, #0]
 802071a:	f7f6 fa2b 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802071e:	4603      	mov	r3, r0
 8020720:	9300      	str	r3, [sp, #0]
 8020722:	f240 1329 	movw	r3, #297	; 0x129
 8020726:	4a06      	ldr	r2, [pc, #24]	; (8020740 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 8020728:	4906      	ldr	r1, [pc, #24]	; (8020744 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 802072a:	4620      	mov	r0, r4
 802072c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 802072e:	2100      	movs	r1, #0
 8020730:	6878      	ldr	r0, [r7, #4]
 8020732:	f7ec fe6f 	bl	800d414 <_ZN18cpputest_ulonglongC1Ei>
}
 8020736:	6878      	ldr	r0, [r7, #4]
 8020738:	3708      	adds	r7, #8
 802073a:	46bd      	mov	sp, r7
 802073c:	bdb0      	pop	{r4, r5, r7, pc}
 802073e:	bf00      	nop
 8020740:	08029834 	.word	0x08029834
 8020744:	08029870 	.word	0x08029870

08020748 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 8020748:	b5f0      	push	{r4, r5, r6, r7, lr}
 802074a:	b087      	sub	sp, #28
 802074c:	af04      	add	r7, sp, #16
 802074e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 8020750:	f7f6 fa00 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 8020754:	4604      	mov	r4, r0
 8020756:	6823      	ldr	r3, [r4, #0]
 8020758:	3324      	adds	r3, #36	; 0x24
 802075a:	681d      	ldr	r5, [r3, #0]
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	330c      	adds	r3, #12
 8020760:	4618      	mov	r0, r3
 8020762:	f7ef f99f 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8020766:	4606      	mov	r6, r0
 8020768:	f7f6 fa04 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802076c:	4603      	mov	r3, r0
 802076e:	9302      	str	r3, [sp, #8]
 8020770:	f240 1331 	movw	r3, #305	; 0x131
 8020774:	9301      	str	r3, [sp, #4]
 8020776:	4b09      	ldr	r3, [pc, #36]	; (802079c <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 8020778:	9300      	str	r3, [sp, #0]
 802077a:	2300      	movs	r3, #0
 802077c:	4632      	mov	r2, r6
 802077e:	4908      	ldr	r1, [pc, #32]	; (80207a0 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 8020780:	4620      	mov	r0, r4
 8020782:	47a8      	blx	r5
    return value_.doubleValue_.value;
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 802078a:	ec43 2b17 	vmov	d7, r2, r3
}
 802078e:	eeb0 0a47 	vmov.f32	s0, s14
 8020792:	eef0 0a67 	vmov.f32	s1, s15
 8020796:	370c      	adds	r7, #12
 8020798:	46bd      	mov	sp, r7
 802079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802079c:	08029834 	.word	0x08029834
 80207a0:	0802989c 	.word	0x0802989c

080207a4 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 80207a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207a6:	b087      	sub	sp, #28
 80207a8:	af04      	add	r7, sp, #16
 80207aa:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 80207ac:	f7f6 f9d2 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80207b0:	4604      	mov	r4, r0
 80207b2:	6823      	ldr	r3, [r4, #0]
 80207b4:	3324      	adds	r3, #36	; 0x24
 80207b6:	681d      	ldr	r5, [r3, #0]
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	330c      	adds	r3, #12
 80207bc:	4618      	mov	r0, r3
 80207be:	f7ef f971 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80207c2:	4606      	mov	r6, r0
 80207c4:	f7f6 f9d6 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80207c8:	4603      	mov	r3, r0
 80207ca:	9302      	str	r3, [sp, #8]
 80207cc:	f240 1337 	movw	r3, #311	; 0x137
 80207d0:	9301      	str	r3, [sp, #4]
 80207d2:	4b09      	ldr	r3, [pc, #36]	; (80207f8 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 80207d4:	9300      	str	r3, [sp, #0]
 80207d6:	2300      	movs	r3, #0
 80207d8:	4632      	mov	r2, r6
 80207da:	4908      	ldr	r1, [pc, #32]	; (80207fc <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 80207dc:	4620      	mov	r0, r4
 80207de:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80207e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80207ea:	eeb0 0a47 	vmov.f32	s0, s14
 80207ee:	eef0 0a67 	vmov.f32	s1, s15
 80207f2:	370c      	adds	r7, #12
 80207f4:	46bd      	mov	sp, r7
 80207f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207f8:	08029834 	.word	0x08029834
 80207fc:	0802989c 	.word	0x0802989c

08020800 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 8020800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020802:	b087      	sub	sp, #28
 8020804:	af04      	add	r7, sp, #16
 8020806:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 8020808:	f7f6 f9a4 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 802080c:	4604      	mov	r4, r0
 802080e:	6823      	ldr	r3, [r4, #0]
 8020810:	3324      	adds	r3, #36	; 0x24
 8020812:	681d      	ldr	r5, [r3, #0]
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	330c      	adds	r3, #12
 8020818:	4618      	mov	r0, r3
 802081a:	f7ef f943 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802081e:	4606      	mov	r6, r0
 8020820:	f7f6 f9a8 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020824:	4603      	mov	r3, r0
 8020826:	9302      	str	r3, [sp, #8]
 8020828:	f240 133d 	movw	r3, #317	; 0x13d
 802082c:	9301      	str	r3, [sp, #4]
 802082e:	4b06      	ldr	r3, [pc, #24]	; (8020848 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 8020830:	9300      	str	r3, [sp, #0]
 8020832:	2300      	movs	r3, #0
 8020834:	4632      	mov	r2, r6
 8020836:	4905      	ldr	r1, [pc, #20]	; (802084c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 8020838:	4620      	mov	r0, r4
 802083a:	47a8      	blx	r5
    return value_.stringValue_;
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	699b      	ldr	r3, [r3, #24]
}
 8020840:	4618      	mov	r0, r3
 8020842:	370c      	adds	r7, #12
 8020844:	46bd      	mov	sp, r7
 8020846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020848:	08029834 	.word	0x08029834
 802084c:	080298c4 	.word	0x080298c4

08020850 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 8020850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020852:	b087      	sub	sp, #28
 8020854:	af04      	add	r7, sp, #16
 8020856:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 8020858:	f7f6 f97c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 802085c:	4604      	mov	r4, r0
 802085e:	6823      	ldr	r3, [r4, #0]
 8020860:	3324      	adds	r3, #36	; 0x24
 8020862:	681d      	ldr	r5, [r3, #0]
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	330c      	adds	r3, #12
 8020868:	4618      	mov	r0, r3
 802086a:	f7ef f91b 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802086e:	4606      	mov	r6, r0
 8020870:	f7f6 f980 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020874:	4603      	mov	r3, r0
 8020876:	9302      	str	r3, [sp, #8]
 8020878:	f240 1343 	movw	r3, #323	; 0x143
 802087c:	9301      	str	r3, [sp, #4]
 802087e:	4b06      	ldr	r3, [pc, #24]	; (8020898 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 8020880:	9300      	str	r3, [sp, #0]
 8020882:	2300      	movs	r3, #0
 8020884:	4632      	mov	r2, r6
 8020886:	4905      	ldr	r1, [pc, #20]	; (802089c <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 8020888:	4620      	mov	r0, r4
 802088a:	47a8      	blx	r5
    return value_.pointerValue_;
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	699b      	ldr	r3, [r3, #24]
}
 8020890:	4618      	mov	r0, r3
 8020892:	370c      	adds	r7, #12
 8020894:	46bd      	mov	sp, r7
 8020896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020898:	08029834 	.word	0x08029834
 802089c:	080298a4 	.word	0x080298a4

080208a0 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 80208a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208a2:	b087      	sub	sp, #28
 80208a4:	af04      	add	r7, sp, #16
 80208a6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 80208a8:	f7f6 f954 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80208ac:	4604      	mov	r4, r0
 80208ae:	6823      	ldr	r3, [r4, #0]
 80208b0:	3324      	adds	r3, #36	; 0x24
 80208b2:	681d      	ldr	r5, [r3, #0]
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	330c      	adds	r3, #12
 80208b8:	4618      	mov	r0, r3
 80208ba:	f7ef f8f3 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 80208be:	4606      	mov	r6, r0
 80208c0:	f7f6 f958 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80208c4:	4603      	mov	r3, r0
 80208c6:	9302      	str	r3, [sp, #8]
 80208c8:	f240 1349 	movw	r3, #329	; 0x149
 80208cc:	9301      	str	r3, [sp, #4]
 80208ce:	4b06      	ldr	r3, [pc, #24]	; (80208e8 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 80208d0:	9300      	str	r3, [sp, #0]
 80208d2:	2300      	movs	r3, #0
 80208d4:	4632      	mov	r2, r6
 80208d6:	4905      	ldr	r1, [pc, #20]	; (80208ec <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 80208d8:	4620      	mov	r0, r4
 80208da:	47a8      	blx	r5
    return value_.pointerValue_;
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	699b      	ldr	r3, [r3, #24]
}
 80208e0:	4618      	mov	r0, r3
 80208e2:	370c      	adds	r7, #12
 80208e4:	46bd      	mov	sp, r7
 80208e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208e8:	08029834 	.word	0x08029834
 80208ec:	080298ac 	.word	0x080298ac

080208f0 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 80208f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208f2:	b087      	sub	sp, #28
 80208f4:	af04      	add	r7, sp, #16
 80208f6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 80208f8:	f7f6 f92c 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 80208fc:	4604      	mov	r4, r0
 80208fe:	6823      	ldr	r3, [r4, #0]
 8020900:	3324      	adds	r3, #36	; 0x24
 8020902:	681d      	ldr	r5, [r3, #0]
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	330c      	adds	r3, #12
 8020908:	4618      	mov	r0, r3
 802090a:	f7ef f8cb 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802090e:	4606      	mov	r6, r0
 8020910:	f7f6 f930 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020914:	4603      	mov	r3, r0
 8020916:	9302      	str	r3, [sp, #8]
 8020918:	f240 134f 	movw	r3, #335	; 0x14f
 802091c:	9301      	str	r3, [sp, #4]
 802091e:	4b06      	ldr	r3, [pc, #24]	; (8020938 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 8020920:	9300      	str	r3, [sp, #0]
 8020922:	2300      	movs	r3, #0
 8020924:	4632      	mov	r2, r6
 8020926:	4905      	ldr	r1, [pc, #20]	; (802093c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 8020928:	4620      	mov	r0, r4
 802092a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	699b      	ldr	r3, [r3, #24]
}
 8020930:	4618      	mov	r0, r3
 8020932:	370c      	adds	r7, #12
 8020934:	46bd      	mov	sp, r7
 8020936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020938:	08029834 	.word	0x08029834
 802093c:	080298b8 	.word	0x080298b8

08020940 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 8020940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020942:	b087      	sub	sp, #28
 8020944:	af04      	add	r7, sp, #16
 8020946:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 8020948:	f7f6 f904 	bl	8016b54 <_ZN10UtestShell10getCurrentEv>
 802094c:	4604      	mov	r4, r0
 802094e:	6823      	ldr	r3, [r4, #0]
 8020950:	3324      	adds	r3, #36	; 0x24
 8020952:	681d      	ldr	r5, [r3, #0]
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	330c      	adds	r3, #12
 8020958:	4618      	mov	r0, r3
 802095a:	f7ef f8a3 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 802095e:	4606      	mov	r6, r0
 8020960:	f7f6 f908 	bl	8016b74 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020964:	4603      	mov	r3, r0
 8020966:	9302      	str	r3, [sp, #8]
 8020968:	f240 1355 	movw	r3, #341	; 0x155
 802096c:	9301      	str	r3, [sp, #4]
 802096e:	4b06      	ldr	r3, [pc, #24]	; (8020988 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 8020970:	9300      	str	r3, [sp, #0]
 8020972:	2300      	movs	r3, #0
 8020974:	4632      	mov	r2, r6
 8020976:	4905      	ldr	r1, [pc, #20]	; (802098c <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 8020978:	4620      	mov	r0, r4
 802097a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	699b      	ldr	r3, [r3, #24]
}
 8020980:	4618      	mov	r0, r3
 8020982:	370c      	adds	r7, #12
 8020984:	46bd      	mov	sp, r7
 8020986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020988:	08029834 	.word	0x08029834
 802098c:	080298d0 	.word	0x080298d0

08020990 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 8020990:	b480      	push	{r7}
 8020992:	b083      	sub	sp, #12
 8020994:	af00      	add	r7, sp, #0
 8020996:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	699b      	ldr	r3, [r3, #24]
}
 802099c:	4618      	mov	r0, r3
 802099e:	370c      	adds	r7, #12
 80209a0:	46bd      	mov	sp, r7
 80209a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209a6:	4770      	bx	lr

080209a8 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 80209a8:	b480      	push	{r7}
 80209aa:	b083      	sub	sp, #12
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	699b      	ldr	r3, [r3, #24]
}
 80209b4:	4618      	mov	r0, r3
 80209b6:	370c      	adds	r7, #12
 80209b8:	46bd      	mov	sp, r7
 80209ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209be:	4770      	bx	lr

080209c0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 80209c0:	b480      	push	{r7}
 80209c2:	b083      	sub	sp, #12
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	6078      	str	r0, [r7, #4]
    return size_;
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80209cc:	4618      	mov	r0, r3
 80209ce:	370c      	adds	r7, #12
 80209d0:	46bd      	mov	sp, r7
 80209d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d6:	4770      	bx	lr

080209d8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 80209d8:	b480      	push	{r7}
 80209da:	b083      	sub	sp, #12
 80209dc:	af00      	add	r7, sp, #0
 80209de:	6078      	str	r0, [r7, #4]
    return comparator_;
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80209e4:	4618      	mov	r0, r3
 80209e6:	370c      	adds	r7, #12
 80209e8:	46bd      	mov	sp, r7
 80209ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ee:	4770      	bx	lr

080209f0 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 80209f0:	b480      	push	{r7}
 80209f2:	b083      	sub	sp, #12
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
    return copier_;
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80209fc:	4618      	mov	r0, r3
 80209fe:	370c      	adds	r7, #12
 8020a00:	46bd      	mov	sp, r7
 8020a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a06:	4770      	bx	lr

08020a08 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 8020a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a0a:	b0cd      	sub	sp, #308	; 0x134
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	1d3b      	adds	r3, r7, #4
 8020a10:	6018      	str	r0, [r3, #0]
 8020a12:	463b      	mov	r3, r7
 8020a14:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 8020a16:	2500      	movs	r5, #0
 8020a18:	1d3b      	adds	r3, r7, #4
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	f103 040c 	add.w	r4, r3, #12
 8020a20:	f107 0308 	add.w	r3, r7, #8
 8020a24:	49bb      	ldr	r1, [pc, #748]	; (8020d14 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 8020a26:	4618      	mov	r0, r3
 8020a28:	f7ee fcb1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020a2c:	2601      	movs	r6, #1
 8020a2e:	f107 0308 	add.w	r3, r7, #8
 8020a32:	4619      	mov	r1, r3
 8020a34:	4620      	mov	r0, r4
 8020a36:	f7ef f86e 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020a3a:	4603      	mov	r3, r0
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d015      	beq.n	8020a6c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 8020a40:	463b      	mov	r3, r7
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	f103 040c 	add.w	r4, r3, #12
 8020a48:	f107 0310 	add.w	r3, r7, #16
 8020a4c:	49b2      	ldr	r1, [pc, #712]	; (8020d18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f7ee fc9d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020a54:	2501      	movs	r5, #1
 8020a56:	f107 0310 	add.w	r3, r7, #16
 8020a5a:	4619      	mov	r1, r3
 8020a5c:	4620      	mov	r0, r4
 8020a5e:	f7ef f85a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020a62:	4603      	mov	r3, r0
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d001      	beq.n	8020a6c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 8020a68:	2401      	movs	r4, #1
 8020a6a:	e000      	b.n	8020a6e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 8020a6c:	2400      	movs	r4, #0
 8020a6e:	2d00      	cmp	r5, #0
 8020a70:	d004      	beq.n	8020a7c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 8020a72:	f107 0310 	add.w	r3, r7, #16
 8020a76:	4618      	mov	r0, r3
 8020a78:	f7ef f841 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020a7c:	2e00      	cmp	r6, #0
 8020a7e:	d004      	beq.n	8020a8a <_ZNK14MockNamedValue6equalsERKS_+0x82>
 8020a80:	f107 0308 	add.w	r3, r7, #8
 8020a84:	4618      	mov	r0, r3
 8020a86:	f7ef f83a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020a8a:	2c00      	cmp	r4, #0
 8020a8c:	d00c      	beq.n	8020aa8 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 8020a8e:	1d3b      	adds	r3, r7, #4
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	699a      	ldr	r2, [r3, #24]
 8020a94:	463b      	mov	r3, r7
 8020a96:	681b      	ldr	r3, [r3, #0]
 8020a98:	699b      	ldr	r3, [r3, #24]
 8020a9a:	429a      	cmp	r2, r3
 8020a9c:	bf0c      	ite	eq
 8020a9e:	2301      	moveq	r3, #1
 8020aa0:	2300      	movne	r3, #0
 8020aa2:	b2dc      	uxtb	r4, r3
 8020aa4:	f000 bd60 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 8020aa8:	2500      	movs	r5, #0
 8020aaa:	1d3b      	adds	r3, r7, #4
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	f103 040c 	add.w	r4, r3, #12
 8020ab2:	f107 0318 	add.w	r3, r7, #24
 8020ab6:	4998      	ldr	r1, [pc, #608]	; (8020d18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020ab8:	4618      	mov	r0, r3
 8020aba:	f7ee fc68 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020abe:	2601      	movs	r6, #1
 8020ac0:	f107 0318 	add.w	r3, r7, #24
 8020ac4:	4619      	mov	r1, r3
 8020ac6:	4620      	mov	r0, r4
 8020ac8:	f7ef f825 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020acc:	4603      	mov	r3, r0
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d015      	beq.n	8020afe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 8020ad2:	463b      	mov	r3, r7
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	f103 040c 	add.w	r4, r3, #12
 8020ada:	f107 0320 	add.w	r3, r7, #32
 8020ade:	498d      	ldr	r1, [pc, #564]	; (8020d14 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 8020ae0:	4618      	mov	r0, r3
 8020ae2:	f7ee fc54 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020ae6:	2501      	movs	r5, #1
 8020ae8:	f107 0320 	add.w	r3, r7, #32
 8020aec:	4619      	mov	r1, r3
 8020aee:	4620      	mov	r0, r4
 8020af0:	f7ef f811 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020af4:	4603      	mov	r3, r0
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d001      	beq.n	8020afe <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 8020afa:	2401      	movs	r4, #1
 8020afc:	e000      	b.n	8020b00 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 8020afe:	2400      	movs	r4, #0
 8020b00:	2d00      	cmp	r5, #0
 8020b02:	d004      	beq.n	8020b0e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 8020b04:	f107 0320 	add.w	r3, r7, #32
 8020b08:	4618      	mov	r0, r3
 8020b0a:	f7ee fff8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020b0e:	2e00      	cmp	r6, #0
 8020b10:	d004      	beq.n	8020b1c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 8020b12:	f107 0318 	add.w	r3, r7, #24
 8020b16:	4618      	mov	r0, r3
 8020b18:	f7ee fff1 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020b1c:	2c00      	cmp	r4, #0
 8020b1e:	d00c      	beq.n	8020b3a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 8020b20:	1d3b      	adds	r3, r7, #4
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	699a      	ldr	r2, [r3, #24]
 8020b26:	463b      	mov	r3, r7
 8020b28:	681b      	ldr	r3, [r3, #0]
 8020b2a:	699b      	ldr	r3, [r3, #24]
 8020b2c:	429a      	cmp	r2, r3
 8020b2e:	bf0c      	ite	eq
 8020b30:	2301      	moveq	r3, #1
 8020b32:	2300      	movne	r3, #0
 8020b34:	b2dc      	uxtb	r4, r3
 8020b36:	f000 bd17 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 8020b3a:	2500      	movs	r5, #0
 8020b3c:	1d3b      	adds	r3, r7, #4
 8020b3e:	681b      	ldr	r3, [r3, #0]
 8020b40:	f103 040c 	add.w	r4, r3, #12
 8020b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020b48:	4974      	ldr	r1, [pc, #464]	; (8020d1c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	f7ee fc1f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020b50:	2601      	movs	r6, #1
 8020b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020b56:	4619      	mov	r1, r3
 8020b58:	4620      	mov	r0, r4
 8020b5a:	f7ee ffdc 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020b5e:	4603      	mov	r3, r0
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	d015      	beq.n	8020b90 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 8020b64:	463b      	mov	r3, r7
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	f103 040c 	add.w	r4, r3, #12
 8020b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020b70:	4969      	ldr	r1, [pc, #420]	; (8020d18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020b72:	4618      	mov	r0, r3
 8020b74:	f7ee fc0b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020b78:	2501      	movs	r5, #1
 8020b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020b7e:	4619      	mov	r1, r3
 8020b80:	4620      	mov	r0, r4
 8020b82:	f7ee ffc8 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020b86:	4603      	mov	r3, r0
 8020b88:	2b00      	cmp	r3, #0
 8020b8a:	d001      	beq.n	8020b90 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 8020b8c:	2401      	movs	r4, #1
 8020b8e:	e000      	b.n	8020b92 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 8020b90:	2400      	movs	r4, #0
 8020b92:	2d00      	cmp	r5, #0
 8020b94:	d004      	beq.n	8020ba0 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 8020b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	f7ee ffaf 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020ba0:	2e00      	cmp	r6, #0
 8020ba2:	d004      	beq.n	8020bae <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 8020ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020ba8:	4618      	mov	r0, r3
 8020baa:	f7ee ffa8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020bae:	2c00      	cmp	r4, #0
 8020bb0:	d012      	beq.n	8020bd8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 8020bb2:	463b      	mov	r3, r7
 8020bb4:	681b      	ldr	r3, [r3, #0]
 8020bb6:	699b      	ldr	r3, [r3, #24]
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	db0a      	blt.n	8020bd2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 8020bbc:	1d3b      	adds	r3, r7, #4
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	699b      	ldr	r3, [r3, #24]
 8020bc2:	463a      	mov	r2, r7
 8020bc4:	6812      	ldr	r2, [r2, #0]
 8020bc6:	6992      	ldr	r2, [r2, #24]
 8020bc8:	4293      	cmp	r3, r2
 8020bca:	d102      	bne.n	8020bd2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 8020bcc:	2401      	movs	r4, #1
 8020bce:	f000 bccb 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020bd2:	2400      	movs	r4, #0
 8020bd4:	f000 bcc8 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 8020bd8:	2500      	movs	r5, #0
 8020bda:	1d3b      	adds	r3, r7, #4
 8020bdc:	681b      	ldr	r3, [r3, #0]
 8020bde:	f103 040c 	add.w	r4, r3, #12
 8020be2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020be6:	494c      	ldr	r1, [pc, #304]	; (8020d18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020be8:	4618      	mov	r0, r3
 8020bea:	f7ee fbd0 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020bee:	2601      	movs	r6, #1
 8020bf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020bf4:	4619      	mov	r1, r3
 8020bf6:	4620      	mov	r0, r4
 8020bf8:	f7ee ff8d 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020bfc:	4603      	mov	r3, r0
 8020bfe:	2b00      	cmp	r3, #0
 8020c00:	d015      	beq.n	8020c2e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 8020c02:	463b      	mov	r3, r7
 8020c04:	681b      	ldr	r3, [r3, #0]
 8020c06:	f103 040c 	add.w	r4, r3, #12
 8020c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020c0e:	4943      	ldr	r1, [pc, #268]	; (8020d1c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 8020c10:	4618      	mov	r0, r3
 8020c12:	f7ee fbbc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020c16:	2501      	movs	r5, #1
 8020c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020c1c:	4619      	mov	r1, r3
 8020c1e:	4620      	mov	r0, r4
 8020c20:	f7ee ff79 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020c24:	4603      	mov	r3, r0
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	d001      	beq.n	8020c2e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 8020c2a:	2401      	movs	r4, #1
 8020c2c:	e000      	b.n	8020c30 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 8020c2e:	2400      	movs	r4, #0
 8020c30:	2d00      	cmp	r5, #0
 8020c32:	d004      	beq.n	8020c3e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 8020c34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020c38:	4618      	mov	r0, r3
 8020c3a:	f7ee ff60 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020c3e:	2e00      	cmp	r6, #0
 8020c40:	d004      	beq.n	8020c4c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 8020c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020c46:	4618      	mov	r0, r3
 8020c48:	f7ee ff59 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020c4c:	2c00      	cmp	r4, #0
 8020c4e:	d012      	beq.n	8020c76 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 8020c50:	1d3b      	adds	r3, r7, #4
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	699b      	ldr	r3, [r3, #24]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	db0a      	blt.n	8020c70 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 8020c5a:	1d3b      	adds	r3, r7, #4
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	699b      	ldr	r3, [r3, #24]
 8020c60:	463a      	mov	r2, r7
 8020c62:	6812      	ldr	r2, [r2, #0]
 8020c64:	6992      	ldr	r2, [r2, #24]
 8020c66:	4293      	cmp	r3, r2
 8020c68:	d102      	bne.n	8020c70 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 8020c6a:	2401      	movs	r4, #1
 8020c6c:	f000 bc7c 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020c70:	2400      	movs	r4, #0
 8020c72:	f000 bc79 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 8020c76:	2500      	movs	r5, #0
 8020c78:	1d3b      	adds	r3, r7, #4
 8020c7a:	681b      	ldr	r3, [r3, #0]
 8020c7c:	f103 040c 	add.w	r4, r3, #12
 8020c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020c84:	4926      	ldr	r1, [pc, #152]	; (8020d20 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 8020c86:	4618      	mov	r0, r3
 8020c88:	f7ee fb81 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020c8c:	2601      	movs	r6, #1
 8020c8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020c92:	4619      	mov	r1, r3
 8020c94:	4620      	mov	r0, r4
 8020c96:	f7ee ff3e 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020c9a:	4603      	mov	r3, r0
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	d015      	beq.n	8020ccc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 8020ca0:	463b      	mov	r3, r7
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	f103 040c 	add.w	r4, r3, #12
 8020ca8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020cac:	491a      	ldr	r1, [pc, #104]	; (8020d18 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020cae:	4618      	mov	r0, r3
 8020cb0:	f7ee fb6d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020cb4:	2501      	movs	r5, #1
 8020cb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020cba:	4619      	mov	r1, r3
 8020cbc:	4620      	mov	r0, r4
 8020cbe:	f7ee ff2a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020cc2:	4603      	mov	r3, r0
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d001      	beq.n	8020ccc <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 8020cc8:	2401      	movs	r4, #1
 8020cca:	e000      	b.n	8020cce <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 8020ccc:	2400      	movs	r4, #0
 8020cce:	2d00      	cmp	r5, #0
 8020cd0:	d004      	beq.n	8020cdc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 8020cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	f7ee ff11 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020cdc:	2e00      	cmp	r6, #0
 8020cde:	d004      	beq.n	8020cea <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 8020ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8020ce4:	4618      	mov	r0, r3
 8020ce6:	f7ee ff0a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020cea:	2c00      	cmp	r4, #0
 8020cec:	d01a      	beq.n	8020d24 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 8020cee:	463b      	mov	r3, r7
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	699b      	ldr	r3, [r3, #24]
 8020cf4:	2b00      	cmp	r3, #0
 8020cf6:	db0a      	blt.n	8020d0e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020cf8:	1d3b      	adds	r3, r7, #4
 8020cfa:	681b      	ldr	r3, [r3, #0]
 8020cfc:	699b      	ldr	r3, [r3, #24]
 8020cfe:	463a      	mov	r2, r7
 8020d00:	6812      	ldr	r2, [r2, #0]
 8020d02:	6992      	ldr	r2, [r2, #24]
 8020d04:	4293      	cmp	r3, r2
 8020d06:	d102      	bne.n	8020d0e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020d08:	2401      	movs	r4, #1
 8020d0a:	f000 bc2d 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020d0e:	2400      	movs	r4, #0
 8020d10:	f000 bc2a 	b.w	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020d14:	08029814 	.word	0x08029814
 8020d18:	080297f8 	.word	0x080297f8
 8020d1c:	08029804 	.word	0x08029804
 8020d20:	08029820 	.word	0x08029820
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 8020d24:	2500      	movs	r5, #0
 8020d26:	1d3b      	adds	r3, r7, #4
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	f103 040c 	add.w	r4, r3, #12
 8020d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d32:	49b8      	ldr	r1, [pc, #736]	; (8021014 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 8020d34:	4618      	mov	r0, r3
 8020d36:	f7ee fb2a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020d3a:	2601      	movs	r6, #1
 8020d3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d40:	4619      	mov	r1, r3
 8020d42:	4620      	mov	r0, r4
 8020d44:	f7ee fee7 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020d48:	4603      	mov	r3, r0
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d015      	beq.n	8020d7a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 8020d4e:	463b      	mov	r3, r7
 8020d50:	681b      	ldr	r3, [r3, #0]
 8020d52:	f103 040c 	add.w	r4, r3, #12
 8020d56:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020d5a:	49af      	ldr	r1, [pc, #700]	; (8021018 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	f7ee fb16 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020d62:	2501      	movs	r5, #1
 8020d64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020d68:	4619      	mov	r1, r3
 8020d6a:	4620      	mov	r0, r4
 8020d6c:	f7ee fed3 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d001      	beq.n	8020d7a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 8020d76:	2401      	movs	r4, #1
 8020d78:	e000      	b.n	8020d7c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 8020d7a:	2400      	movs	r4, #0
 8020d7c:	2d00      	cmp	r5, #0
 8020d7e:	d004      	beq.n	8020d8a <_ZNK14MockNamedValue6equalsERKS_+0x382>
 8020d80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020d84:	4618      	mov	r0, r3
 8020d86:	f7ee feba 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020d8a:	2e00      	cmp	r6, #0
 8020d8c:	d004      	beq.n	8020d98 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 8020d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020d92:	4618      	mov	r0, r3
 8020d94:	f7ee feb3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020d98:	2c00      	cmp	r4, #0
 8020d9a:	d010      	beq.n	8020dbe <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 8020d9c:	1d3b      	adds	r3, r7, #4
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	699b      	ldr	r3, [r3, #24]
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	db09      	blt.n	8020dba <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 8020da6:	1d3b      	adds	r3, r7, #4
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	699b      	ldr	r3, [r3, #24]
 8020dac:	463a      	mov	r2, r7
 8020dae:	6812      	ldr	r2, [r2, #0]
 8020db0:	6992      	ldr	r2, [r2, #24]
 8020db2:	4293      	cmp	r3, r2
 8020db4:	d101      	bne.n	8020dba <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 8020db6:	2401      	movs	r4, #1
 8020db8:	e3d6      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020dba:	2400      	movs	r4, #0
 8020dbc:	e3d4      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 8020dbe:	2500      	movs	r5, #0
 8020dc0:	1d3b      	adds	r3, r7, #4
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	f103 040c 	add.w	r4, r3, #12
 8020dc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020dcc:	4993      	ldr	r1, [pc, #588]	; (802101c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020dce:	4618      	mov	r0, r3
 8020dd0:	f7ee fadd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020dd4:	2601      	movs	r6, #1
 8020dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020dda:	4619      	mov	r1, r3
 8020ddc:	4620      	mov	r0, r4
 8020dde:	f7ee fe9a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020de2:	4603      	mov	r3, r0
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d015      	beq.n	8020e14 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020de8:	463b      	mov	r3, r7
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	f103 040c 	add.w	r4, r3, #12
 8020df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020df4:	498a      	ldr	r1, [pc, #552]	; (8021020 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 8020df6:	4618      	mov	r0, r3
 8020df8:	f7ee fac9 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020dfc:	2501      	movs	r5, #1
 8020dfe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020e02:	4619      	mov	r1, r3
 8020e04:	4620      	mov	r0, r4
 8020e06:	f7ee fe86 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d001      	beq.n	8020e14 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020e10:	2401      	movs	r4, #1
 8020e12:	e000      	b.n	8020e16 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 8020e14:	2400      	movs	r4, #0
 8020e16:	2d00      	cmp	r5, #0
 8020e18:	d004      	beq.n	8020e24 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 8020e1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020e1e:	4618      	mov	r0, r3
 8020e20:	f7ee fe6d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020e24:	2e00      	cmp	r6, #0
 8020e26:	d004      	beq.n	8020e32 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 8020e28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020e2c:	4618      	mov	r0, r3
 8020e2e:	f7ee fe66 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020e32:	2c00      	cmp	r4, #0
 8020e34:	d010      	beq.n	8020e58 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 8020e36:	463b      	mov	r3, r7
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	699b      	ldr	r3, [r3, #24]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	db09      	blt.n	8020e54 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 8020e40:	1d3b      	adds	r3, r7, #4
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	699b      	ldr	r3, [r3, #24]
 8020e46:	463a      	mov	r2, r7
 8020e48:	6812      	ldr	r2, [r2, #0]
 8020e4a:	6992      	ldr	r2, [r2, #24]
 8020e4c:	4293      	cmp	r3, r2
 8020e4e:	d101      	bne.n	8020e54 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 8020e50:	2401      	movs	r4, #1
 8020e52:	e389      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020e54:	2400      	movs	r4, #0
 8020e56:	e387      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 8020e58:	2500      	movs	r5, #0
 8020e5a:	1d3b      	adds	r3, r7, #4
 8020e5c:	681b      	ldr	r3, [r3, #0]
 8020e5e:	f103 040c 	add.w	r4, r3, #12
 8020e62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020e66:	496e      	ldr	r1, [pc, #440]	; (8021020 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7ee fa90 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020e6e:	2601      	movs	r6, #1
 8020e70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020e74:	4619      	mov	r1, r3
 8020e76:	4620      	mov	r0, r4
 8020e78:	f7ee fe4d 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020e7c:	4603      	mov	r3, r0
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d015      	beq.n	8020eae <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 8020e82:	463b      	mov	r3, r7
 8020e84:	681b      	ldr	r3, [r3, #0]
 8020e86:	f103 040c 	add.w	r4, r3, #12
 8020e8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020e8e:	4963      	ldr	r1, [pc, #396]	; (802101c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020e90:	4618      	mov	r0, r3
 8020e92:	f7ee fa7c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020e96:	2501      	movs	r5, #1
 8020e98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020e9c:	4619      	mov	r1, r3
 8020e9e:	4620      	mov	r0, r4
 8020ea0:	f7ee fe39 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020ea4:	4603      	mov	r3, r0
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d001      	beq.n	8020eae <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 8020eaa:	2401      	movs	r4, #1
 8020eac:	e000      	b.n	8020eb0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 8020eae:	2400      	movs	r4, #0
 8020eb0:	2d00      	cmp	r5, #0
 8020eb2:	d004      	beq.n	8020ebe <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 8020eb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020eb8:	4618      	mov	r0, r3
 8020eba:	f7ee fe20 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020ebe:	2e00      	cmp	r6, #0
 8020ec0:	d004      	beq.n	8020ecc <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 8020ec2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020ec6:	4618      	mov	r0, r3
 8020ec8:	f7ee fe19 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020ecc:	2c00      	cmp	r4, #0
 8020ece:	d010      	beq.n	8020ef2 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 8020ed0:	1d3b      	adds	r3, r7, #4
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	699b      	ldr	r3, [r3, #24]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	db09      	blt.n	8020eee <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 8020eda:	1d3b      	adds	r3, r7, #4
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	699b      	ldr	r3, [r3, #24]
 8020ee0:	463a      	mov	r2, r7
 8020ee2:	6812      	ldr	r2, [r2, #0]
 8020ee4:	6992      	ldr	r2, [r2, #24]
 8020ee6:	4293      	cmp	r3, r2
 8020ee8:	d101      	bne.n	8020eee <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 8020eea:	2401      	movs	r4, #1
 8020eec:	e33c      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020eee:	2400      	movs	r4, #0
 8020ef0:	e33a      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 8020ef2:	2500      	movs	r5, #0
 8020ef4:	1d3b      	adds	r3, r7, #4
 8020ef6:	681b      	ldr	r3, [r3, #0]
 8020ef8:	f103 040c 	add.w	r4, r3, #12
 8020efc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020f00:	4946      	ldr	r1, [pc, #280]	; (802101c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020f02:	4618      	mov	r0, r3
 8020f04:	f7ee fa43 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020f08:	2601      	movs	r6, #1
 8020f0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020f0e:	4619      	mov	r1, r3
 8020f10:	4620      	mov	r0, r4
 8020f12:	f7ee fe00 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020f16:	4603      	mov	r3, r0
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d015      	beq.n	8020f48 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 8020f1c:	463b      	mov	r3, r7
 8020f1e:	681b      	ldr	r3, [r3, #0]
 8020f20:	f103 040c 	add.w	r4, r3, #12
 8020f24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020f28:	493b      	ldr	r1, [pc, #236]	; (8021018 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020f2a:	4618      	mov	r0, r3
 8020f2c:	f7ee fa2f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020f30:	2501      	movs	r5, #1
 8020f32:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020f36:	4619      	mov	r1, r3
 8020f38:	4620      	mov	r0, r4
 8020f3a:	f7ee fdec 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020f3e:	4603      	mov	r3, r0
 8020f40:	2b00      	cmp	r3, #0
 8020f42:	d001      	beq.n	8020f48 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 8020f44:	2401      	movs	r4, #1
 8020f46:	e000      	b.n	8020f4a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 8020f48:	2400      	movs	r4, #0
 8020f4a:	2d00      	cmp	r5, #0
 8020f4c:	d004      	beq.n	8020f58 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 8020f4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020f52:	4618      	mov	r0, r3
 8020f54:	f7ee fdd3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020f58:	2e00      	cmp	r6, #0
 8020f5a:	d004      	beq.n	8020f66 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 8020f5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020f60:	4618      	mov	r0, r3
 8020f62:	f7ee fdcc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020f66:	2c00      	cmp	r4, #0
 8020f68:	d00b      	beq.n	8020f82 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 8020f6a:	1d3b      	adds	r3, r7, #4
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	699a      	ldr	r2, [r3, #24]
 8020f70:	463b      	mov	r3, r7
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	699b      	ldr	r3, [r3, #24]
 8020f76:	429a      	cmp	r2, r3
 8020f78:	bf0c      	ite	eq
 8020f7a:	2301      	moveq	r3, #1
 8020f7c:	2300      	movne	r3, #0
 8020f7e:	b2dc      	uxtb	r4, r3
 8020f80:	e2f2      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 8020f82:	2500      	movs	r5, #0
 8020f84:	1d3b      	adds	r3, r7, #4
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	f103 040c 	add.w	r4, r3, #12
 8020f8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020f90:	4921      	ldr	r1, [pc, #132]	; (8021018 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020f92:	4618      	mov	r0, r3
 8020f94:	f7ee f9fb 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020f98:	2601      	movs	r6, #1
 8020f9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020f9e:	4619      	mov	r1, r3
 8020fa0:	4620      	mov	r0, r4
 8020fa2:	f7ee fdb8 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020fa6:	4603      	mov	r3, r0
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	d015      	beq.n	8020fd8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 8020fac:	463b      	mov	r3, r7
 8020fae:	681b      	ldr	r3, [r3, #0]
 8020fb0:	f103 040c 	add.w	r4, r3, #12
 8020fb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020fb8:	4918      	ldr	r1, [pc, #96]	; (802101c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f7ee f9e7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8020fc0:	2501      	movs	r5, #1
 8020fc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020fc6:	4619      	mov	r1, r3
 8020fc8:	4620      	mov	r0, r4
 8020fca:	f7ee fda4 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8020fce:	4603      	mov	r3, r0
 8020fd0:	2b00      	cmp	r3, #0
 8020fd2:	d001      	beq.n	8020fd8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 8020fd4:	2401      	movs	r4, #1
 8020fd6:	e000      	b.n	8020fda <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 8020fd8:	2400      	movs	r4, #0
 8020fda:	2d00      	cmp	r5, #0
 8020fdc:	d004      	beq.n	8020fe8 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 8020fde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020fe2:	4618      	mov	r0, r3
 8020fe4:	f7ee fd8b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020fe8:	2e00      	cmp	r6, #0
 8020fea:	d004      	beq.n	8020ff6 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 8020fec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	f7ee fd84 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8020ff6:	2c00      	cmp	r4, #0
 8020ff8:	d014      	beq.n	8021024 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 8020ffa:	1d3b      	adds	r3, r7, #4
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	699a      	ldr	r2, [r3, #24]
 8021000:	463b      	mov	r3, r7
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	699b      	ldr	r3, [r3, #24]
 8021006:	429a      	cmp	r2, r3
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2dc      	uxtb	r4, r3
 8021010:	e2aa      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8021012:	bf00      	nop
 8021014:	080297f8 	.word	0x080297f8
 8021018:	08029820 	.word	0x08029820
 802101c:	08029804 	.word	0x08029804
 8021020:	08029814 	.word	0x08029814
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 8021024:	2500      	movs	r5, #0
 8021026:	1d3b      	adds	r3, r7, #4
 8021028:	681b      	ldr	r3, [r3, #0]
 802102a:	f103 040c 	add.w	r4, r3, #12
 802102e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8021032:	49ae      	ldr	r1, [pc, #696]	; (80212ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 8021034:	4618      	mov	r0, r3
 8021036:	f7ee f9aa 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802103a:	2601      	movs	r6, #1
 802103c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8021040:	4619      	mov	r1, r3
 8021042:	4620      	mov	r0, r4
 8021044:	f7ee fd67 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021048:	4603      	mov	r3, r0
 802104a:	2b00      	cmp	r3, #0
 802104c:	d015      	beq.n	802107a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 802104e:	463b      	mov	r3, r7
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	f103 040c 	add.w	r4, r3, #12
 8021056:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802105a:	49a5      	ldr	r1, [pc, #660]	; (80212f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 802105c:	4618      	mov	r0, r3
 802105e:	f7ee f996 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021062:	2501      	movs	r5, #1
 8021064:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021068:	4619      	mov	r1, r3
 802106a:	4620      	mov	r0, r4
 802106c:	f7ee fd53 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021070:	4603      	mov	r3, r0
 8021072:	2b00      	cmp	r3, #0
 8021074:	d001      	beq.n	802107a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 8021076:	2401      	movs	r4, #1
 8021078:	e000      	b.n	802107c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 802107a:	2400      	movs	r4, #0
 802107c:	2d00      	cmp	r5, #0
 802107e:	d004      	beq.n	802108a <_ZNK14MockNamedValue6equalsERKS_+0x682>
 8021080:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021084:	4618      	mov	r0, r3
 8021086:	f7ee fd3a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802108a:	2e00      	cmp	r6, #0
 802108c:	d004      	beq.n	8021098 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 802108e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8021092:	4618      	mov	r0, r3
 8021094:	f7ee fd33 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021098:	2c00      	cmp	r4, #0
 802109a:	d010      	beq.n	80210be <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 802109c:	1d3b      	adds	r3, r7, #4
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	699b      	ldr	r3, [r3, #24]
 80210a2:	2b00      	cmp	r3, #0
 80210a4:	db09      	blt.n	80210ba <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 80210a6:	1d3b      	adds	r3, r7, #4
 80210a8:	681b      	ldr	r3, [r3, #0]
 80210aa:	699b      	ldr	r3, [r3, #24]
 80210ac:	463a      	mov	r2, r7
 80210ae:	6812      	ldr	r2, [r2, #0]
 80210b0:	6992      	ldr	r2, [r2, #24]
 80210b2:	4293      	cmp	r3, r2
 80210b4:	d101      	bne.n	80210ba <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 80210b6:	2401      	movs	r4, #1
 80210b8:	e256      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80210ba:	2400      	movs	r4, #0
 80210bc:	e254      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 80210be:	2500      	movs	r5, #0
 80210c0:	1d3b      	adds	r3, r7, #4
 80210c2:	681b      	ldr	r3, [r3, #0]
 80210c4:	f103 040c 	add.w	r4, r3, #12
 80210c8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80210cc:	4988      	ldr	r1, [pc, #544]	; (80212f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 80210ce:	4618      	mov	r0, r3
 80210d0:	f7ee f95d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80210d4:	2601      	movs	r6, #1
 80210d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80210da:	4619      	mov	r1, r3
 80210dc:	4620      	mov	r0, r4
 80210de:	f7ee fd1a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80210e2:	4603      	mov	r3, r0
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d015      	beq.n	8021114 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 80210e8:	463b      	mov	r3, r7
 80210ea:	681b      	ldr	r3, [r3, #0]
 80210ec:	f103 040c 	add.w	r4, r3, #12
 80210f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80210f4:	497d      	ldr	r1, [pc, #500]	; (80212ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 80210f6:	4618      	mov	r0, r3
 80210f8:	f7ee f949 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80210fc:	2501      	movs	r5, #1
 80210fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8021102:	4619      	mov	r1, r3
 8021104:	4620      	mov	r0, r4
 8021106:	f7ee fd06 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802110a:	4603      	mov	r3, r0
 802110c:	2b00      	cmp	r3, #0
 802110e:	d001      	beq.n	8021114 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 8021110:	2401      	movs	r4, #1
 8021112:	e000      	b.n	8021116 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 8021114:	2400      	movs	r4, #0
 8021116:	2d00      	cmp	r5, #0
 8021118:	d004      	beq.n	8021124 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 802111a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802111e:	4618      	mov	r0, r3
 8021120:	f7ee fced 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021124:	2e00      	cmp	r6, #0
 8021126:	d004      	beq.n	8021132 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 8021128:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 802112c:	4618      	mov	r0, r3
 802112e:	f7ee fce6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021132:	2c00      	cmp	r4, #0
 8021134:	d010      	beq.n	8021158 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 8021136:	463b      	mov	r3, r7
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	699b      	ldr	r3, [r3, #24]
 802113c:	2b00      	cmp	r3, #0
 802113e:	db09      	blt.n	8021154 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 8021140:	1d3b      	adds	r3, r7, #4
 8021142:	681b      	ldr	r3, [r3, #0]
 8021144:	699b      	ldr	r3, [r3, #24]
 8021146:	463a      	mov	r2, r7
 8021148:	6812      	ldr	r2, [r2, #0]
 802114a:	6992      	ldr	r2, [r2, #24]
 802114c:	4293      	cmp	r3, r2
 802114e:	d101      	bne.n	8021154 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 8021150:	2401      	movs	r4, #1
 8021152:	e209      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8021154:	2400      	movs	r4, #0
 8021156:	e207      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 8021158:	1d3b      	adds	r3, r7, #4
 802115a:	681b      	ldr	r3, [r3, #0]
 802115c:	f103 020c 	add.w	r2, r3, #12
 8021160:	463b      	mov	r3, r7
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	330c      	adds	r3, #12
 8021166:	4619      	mov	r1, r3
 8021168:	4610      	mov	r0, r2
 802116a:	f7ee fd19 	bl	800fba0 <_ZneRK12SimpleStringS1_>
 802116e:	4603      	mov	r3, r0
 8021170:	2b00      	cmp	r3, #0
 8021172:	d001      	beq.n	8021178 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 8021174:	2400      	movs	r4, #0
 8021176:	e1f7      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 8021178:	1d3b      	adds	r3, r7, #4
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	f103 040c 	add.w	r4, r3, #12
 8021180:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021184:	495b      	ldr	r1, [pc, #364]	; (80212f4 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 8021186:	4618      	mov	r0, r3
 8021188:	f7ee f901 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802118c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021190:	4619      	mov	r1, r3
 8021192:	4620      	mov	r0, r4
 8021194:	f7ee fcbf 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021198:	4603      	mov	r3, r0
 802119a:	461c      	mov	r4, r3
 802119c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80211a0:	4618      	mov	r0, r3
 80211a2:	f7ee fcac 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80211a6:	2c00      	cmp	r4, #0
 80211a8:	d00b      	beq.n	80211c2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 80211aa:	1d3b      	adds	r3, r7, #4
 80211ac:	681b      	ldr	r3, [r3, #0]
 80211ae:	7e1a      	ldrb	r2, [r3, #24]
 80211b0:	463b      	mov	r3, r7
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	7e1b      	ldrb	r3, [r3, #24]
 80211b6:	429a      	cmp	r2, r3
 80211b8:	bf0c      	ite	eq
 80211ba:	2301      	moveq	r3, #1
 80211bc:	2300      	movne	r3, #0
 80211be:	b2dc      	uxtb	r4, r3
 80211c0:	e1d2      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 80211c2:	1d3b      	adds	r3, r7, #4
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	f103 040c 	add.w	r4, r3, #12
 80211ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80211ce:	494a      	ldr	r1, [pc, #296]	; (80212f8 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 80211d0:	4618      	mov	r0, r3
 80211d2:	f7ee f8dc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80211d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80211da:	4619      	mov	r1, r3
 80211dc:	4620      	mov	r0, r4
 80211de:	f7ee fc9a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80211e2:	4603      	mov	r3, r0
 80211e4:	461c      	mov	r4, r3
 80211e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80211ea:	4618      	mov	r0, r3
 80211ec:	f7ee fc87 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80211f0:	2c00      	cmp	r4, #0
 80211f2:	d00b      	beq.n	802120c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 80211f4:	1d3b      	adds	r3, r7, #4
 80211f6:	681b      	ldr	r3, [r3, #0]
 80211f8:	699a      	ldr	r2, [r3, #24]
 80211fa:	463b      	mov	r3, r7
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	699b      	ldr	r3, [r3, #24]
 8021200:	429a      	cmp	r2, r3
 8021202:	bf0c      	ite	eq
 8021204:	2301      	moveq	r3, #1
 8021206:	2300      	movne	r3, #0
 8021208:	b2dc      	uxtb	r4, r3
 802120a:	e1ad      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 802120c:	1d3b      	adds	r3, r7, #4
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	f103 040c 	add.w	r4, r3, #12
 8021214:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021218:	4938      	ldr	r1, [pc, #224]	; (80212fc <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 802121a:	4618      	mov	r0, r3
 802121c:	f7ee f8b7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021220:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021224:	4619      	mov	r1, r3
 8021226:	4620      	mov	r0, r4
 8021228:	f7ee fc75 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802122c:	4603      	mov	r3, r0
 802122e:	461c      	mov	r4, r3
 8021230:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021234:	4618      	mov	r0, r3
 8021236:	f7ee fc62 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802123a:	2c00      	cmp	r4, #0
 802123c:	d00b      	beq.n	8021256 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 802123e:	1d3b      	adds	r3, r7, #4
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	699a      	ldr	r2, [r3, #24]
 8021244:	463b      	mov	r3, r7
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	699b      	ldr	r3, [r3, #24]
 802124a:	429a      	cmp	r2, r3
 802124c:	bf0c      	ite	eq
 802124e:	2301      	moveq	r3, #1
 8021250:	2300      	movne	r3, #0
 8021252:	b2dc      	uxtb	r4, r3
 8021254:	e188      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 8021256:	1d3b      	adds	r3, r7, #4
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	f103 040c 	add.w	r4, r3, #12
 802125e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8021262:	4922      	ldr	r1, [pc, #136]	; (80212ec <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 8021264:	4618      	mov	r0, r3
 8021266:	f7ee f892 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802126a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 802126e:	4619      	mov	r1, r3
 8021270:	4620      	mov	r0, r4
 8021272:	f7ee fc50 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021276:	4603      	mov	r3, r0
 8021278:	461c      	mov	r4, r3
 802127a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 802127e:	4618      	mov	r0, r3
 8021280:	f7ee fc3d 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021284:	2c00      	cmp	r4, #0
 8021286:	d00b      	beq.n	80212a0 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 8021288:	1d3b      	adds	r3, r7, #4
 802128a:	681b      	ldr	r3, [r3, #0]
 802128c:	699a      	ldr	r2, [r3, #24]
 802128e:	463b      	mov	r3, r7
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	699b      	ldr	r3, [r3, #24]
 8021294:	429a      	cmp	r2, r3
 8021296:	bf0c      	ite	eq
 8021298:	2301      	moveq	r3, #1
 802129a:	2300      	movne	r3, #0
 802129c:	b2dc      	uxtb	r4, r3
 802129e:	e163      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 80212a0:	1d3b      	adds	r3, r7, #4
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	f103 040c 	add.w	r4, r3, #12
 80212a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80212ac:	4910      	ldr	r1, [pc, #64]	; (80212f0 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 80212ae:	4618      	mov	r0, r3
 80212b0:	f7ee f86d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80212b4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80212b8:	4619      	mov	r1, r3
 80212ba:	4620      	mov	r0, r4
 80212bc:	f7ee fc2b 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80212c0:	4603      	mov	r3, r0
 80212c2:	461c      	mov	r4, r3
 80212c4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80212c8:	4618      	mov	r0, r3
 80212ca:	f7ee fc18 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80212ce:	2c00      	cmp	r4, #0
 80212d0:	d016      	beq.n	8021300 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 80212d2:	1d3b      	adds	r3, r7, #4
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	699a      	ldr	r2, [r3, #24]
 80212d8:	463b      	mov	r3, r7
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	699b      	ldr	r3, [r3, #24]
 80212de:	429a      	cmp	r2, r3
 80212e0:	bf0c      	ite	eq
 80212e2:	2301      	moveq	r3, #1
 80212e4:	2300      	movne	r3, #0
 80212e6:	b2dc      	uxtb	r4, r3
 80212e8:	e13e      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80212ea:	bf00      	nop
 80212ec:	08029814 	.word	0x08029814
 80212f0:	08029820 	.word	0x08029820
 80212f4:	080297fc 	.word	0x080297fc
 80212f8:	080297f8 	.word	0x080297f8
 80212fc:	08029804 	.word	0x08029804
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 8021300:	1d3b      	adds	r3, r7, #4
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	f103 040c 	add.w	r4, r3, #12
 8021308:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 802130c:	4999      	ldr	r1, [pc, #612]	; (8021574 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 802130e:	4618      	mov	r0, r3
 8021310:	f7ee f83d 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021314:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8021318:	4619      	mov	r1, r3
 802131a:	4620      	mov	r0, r4
 802131c:	f7ee fbfb 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021320:	4603      	mov	r3, r0
 8021322:	461c      	mov	r4, r3
 8021324:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8021328:	4618      	mov	r0, r3
 802132a:	f7ee fbe8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802132e:	2c00      	cmp	r4, #0
 8021330:	d026      	beq.n	8021380 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 8021332:	1d3b      	adds	r3, r7, #4
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	699a      	ldr	r2, [r3, #24]
 8021338:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802133c:	4611      	mov	r1, r2
 802133e:	4618      	mov	r0, r3
 8021340:	f7ee f825 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021344:	463b      	mov	r3, r7
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	699a      	ldr	r2, [r3, #24]
 802134a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802134e:	4611      	mov	r1, r2
 8021350:	4618      	mov	r0, r3
 8021352:	f7ee f81c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021356:	f507 7280 	add.w	r2, r7, #256	; 0x100
 802135a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802135e:	4611      	mov	r1, r2
 8021360:	4618      	mov	r0, r3
 8021362:	f7ee fbd8 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021366:	4603      	mov	r3, r0
 8021368:	461c      	mov	r4, r3
 802136a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802136e:	4618      	mov	r0, r3
 8021370:	f7ee fbc5 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021374:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021378:	4618      	mov	r0, r3
 802137a:	f7ee fbc0 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802137e:	e0f3      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 8021380:	1d3b      	adds	r3, r7, #4
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	f103 040c 	add.w	r4, r3, #12
 8021388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802138c:	497a      	ldr	r1, [pc, #488]	; (8021578 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 802138e:	4618      	mov	r0, r3
 8021390:	f7ed fffd 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021398:	4619      	mov	r1, r3
 802139a:	4620      	mov	r0, r4
 802139c:	f7ee fbbb 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80213a0:	4603      	mov	r3, r0
 80213a2:	461c      	mov	r4, r3
 80213a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80213a8:	4618      	mov	r0, r3
 80213aa:	f7ee fba8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80213ae:	2c00      	cmp	r4, #0
 80213b0:	d00b      	beq.n	80213ca <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 80213b2:	1d3b      	adds	r3, r7, #4
 80213b4:	681b      	ldr	r3, [r3, #0]
 80213b6:	699a      	ldr	r2, [r3, #24]
 80213b8:	463b      	mov	r3, r7
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	699b      	ldr	r3, [r3, #24]
 80213be:	429a      	cmp	r2, r3
 80213c0:	bf0c      	ite	eq
 80213c2:	2301      	moveq	r3, #1
 80213c4:	2300      	movne	r3, #0
 80213c6:	b2dc      	uxtb	r4, r3
 80213c8:	e0ce      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 80213ca:	1d3b      	adds	r3, r7, #4
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	f103 040c 	add.w	r4, r3, #12
 80213d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80213d6:	4969      	ldr	r1, [pc, #420]	; (802157c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 80213d8:	4618      	mov	r0, r3
 80213da:	f7ed ffd8 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80213de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80213e2:	4619      	mov	r1, r3
 80213e4:	4620      	mov	r0, r4
 80213e6:	f7ee fb96 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80213ea:	4603      	mov	r3, r0
 80213ec:	461c      	mov	r4, r3
 80213ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80213f2:	4618      	mov	r0, r3
 80213f4:	f7ee fb83 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80213f8:	2c00      	cmp	r4, #0
 80213fa:	d00b      	beq.n	8021414 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 80213fc:	1d3b      	adds	r3, r7, #4
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	699a      	ldr	r2, [r3, #24]
 8021402:	463b      	mov	r3, r7
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	699b      	ldr	r3, [r3, #24]
 8021408:	429a      	cmp	r2, r3
 802140a:	bf0c      	ite	eq
 802140c:	2301      	moveq	r3, #1
 802140e:	2300      	movne	r3, #0
 8021410:	b2dc      	uxtb	r4, r3
 8021412:	e0a9      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 8021414:	1d3b      	adds	r3, r7, #4
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	f103 040c 	add.w	r4, r3, #12
 802141c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021420:	4957      	ldr	r1, [pc, #348]	; (8021580 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 8021422:	4618      	mov	r0, r3
 8021424:	f7ed ffb3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802142c:	4619      	mov	r1, r3
 802142e:	4620      	mov	r0, r4
 8021430:	f7ee fb71 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021434:	4603      	mov	r3, r0
 8021436:	461c      	mov	r4, r3
 8021438:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802143c:	4618      	mov	r0, r3
 802143e:	f7ee fb5e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021442:	2c00      	cmp	r4, #0
 8021444:	d00b      	beq.n	802145e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 8021446:	1d3b      	adds	r3, r7, #4
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	699a      	ldr	r2, [r3, #24]
 802144c:	463b      	mov	r3, r7
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	699b      	ldr	r3, [r3, #24]
 8021452:	429a      	cmp	r2, r3
 8021454:	bf0c      	ite	eq
 8021456:	2301      	moveq	r3, #1
 8021458:	2300      	movne	r3, #0
 802145a:	b2dc      	uxtb	r4, r3
 802145c:	e084      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 802145e:	1d3b      	adds	r3, r7, #4
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	f103 040c 	add.w	r4, r3, #12
 8021466:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802146a:	4946      	ldr	r1, [pc, #280]	; (8021584 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 802146c:	4618      	mov	r0, r3
 802146e:	f7ed ff8e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021472:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021476:	4619      	mov	r1, r3
 8021478:	4620      	mov	r0, r4
 802147a:	f7ee fb4c 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802147e:	4603      	mov	r3, r0
 8021480:	461c      	mov	r4, r3
 8021482:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8021486:	4618      	mov	r0, r3
 8021488:	f7ee fb39 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802148c:	2c00      	cmp	r4, #0
 802148e:	d01c      	beq.n	80214ca <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 8021490:	1d3b      	adds	r3, r7, #4
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	ed93 7b06 	vldr	d7, [r3, #24]
 8021498:	463b      	mov	r3, r7
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	ed93 6b06 	vldr	d6, [r3, #24]
 80214a0:	1d3b      	adds	r3, r7, #4
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	ed93 5b08 	vldr	d5, [r3, #32]
 80214a8:	eeb0 2a45 	vmov.f32	s4, s10
 80214ac:	eef0 2a65 	vmov.f32	s5, s11
 80214b0:	eeb0 1a46 	vmov.f32	s2, s12
 80214b4:	eef0 1a66 	vmov.f32	s3, s13
 80214b8:	eeb0 0a47 	vmov.f32	s0, s14
 80214bc:	eef0 0a67 	vmov.f32	s1, s15
 80214c0:	f7f3 fe18 	bl	80150f4 <_Z13doubles_equalddd>
 80214c4:	4603      	mov	r3, r0
 80214c6:	461c      	mov	r4, r3
 80214c8:	e04e      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 80214ca:	1d3b      	adds	r3, r7, #4
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	f103 040c 	add.w	r4, r3, #12
 80214d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214d6:	492c      	ldr	r1, [pc, #176]	; (8021588 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 80214d8:	4618      	mov	r0, r3
 80214da:	f7ed ff58 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80214de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214e2:	4619      	mov	r1, r3
 80214e4:	4620      	mov	r0, r4
 80214e6:	f7ee fb16 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80214ea:	4603      	mov	r3, r0
 80214ec:	461c      	mov	r4, r3
 80214ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214f2:	4618      	mov	r0, r3
 80214f4:	f7ee fb03 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80214f8:	2c00      	cmp	r4, #0
 80214fa:	d01c      	beq.n	8021536 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 80214fc:	1d3b      	adds	r3, r7, #4
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021502:	463b      	mov	r3, r7
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021508:	429a      	cmp	r2, r3
 802150a:	d001      	beq.n	8021510 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 802150c:	2400      	movs	r4, #0
 802150e:	e02b      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 8021510:	1d3b      	adds	r3, r7, #4
 8021512:	681b      	ldr	r3, [r3, #0]
 8021514:	6998      	ldr	r0, [r3, #24]
 8021516:	463b      	mov	r3, r7
 8021518:	681b      	ldr	r3, [r3, #0]
 802151a:	6999      	ldr	r1, [r3, #24]
 802151c:	1d3b      	adds	r3, r7, #4
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021522:	461a      	mov	r2, r3
 8021524:	f7ed fe52 	bl	800f1cc <_ZN12SimpleString6MemCmpEPKvS1_j>
 8021528:	4603      	mov	r3, r0
 802152a:	2b00      	cmp	r3, #0
 802152c:	bf0c      	ite	eq
 802152e:	2301      	moveq	r3, #1
 8021530:	2300      	movne	r3, #0
 8021532:	b2dc      	uxtb	r4, r3
 8021534:	e018      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 8021536:	1d3b      	adds	r3, r7, #4
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802153c:	2b00      	cmp	r3, #0
 802153e:	d012      	beq.n	8021566 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 8021540:	1d3b      	adds	r3, r7, #4
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8021546:	1d3b      	adds	r3, r7, #4
 8021548:	681b      	ldr	r3, [r3, #0]
 802154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802154c:	681b      	ldr	r3, [r3, #0]
 802154e:	3308      	adds	r3, #8
 8021550:	681b      	ldr	r3, [r3, #0]
 8021552:	1d3a      	adds	r2, r7, #4
 8021554:	6812      	ldr	r2, [r2, #0]
 8021556:	6991      	ldr	r1, [r2, #24]
 8021558:	463a      	mov	r2, r7
 802155a:	6812      	ldr	r2, [r2, #0]
 802155c:	6992      	ldr	r2, [r2, #24]
 802155e:	4798      	blx	r3
 8021560:	4603      	mov	r3, r0
 8021562:	461c      	mov	r4, r3
 8021564:	e000      	b.n	8021568 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 8021566:	2400      	movs	r4, #0
 8021568:	4623      	mov	r3, r4
}
 802156a:	4618      	mov	r0, r3
 802156c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8021570:	46bd      	mov	sp, r7
 8021572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021574:	080298c4 	.word	0x080298c4
 8021578:	080298a4 	.word	0x080298a4
 802157c:	080298ac 	.word	0x080298ac
 8021580:	080298b8 	.word	0x080298b8
 8021584:	0802989c 	.word	0x0802989c
 8021588:	080298d0 	.word	0x080298d0

0802158c <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 802158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802158e:	b087      	sub	sp, #28
 8021590:	af00      	add	r7, sp, #0
 8021592:	6078      	str	r0, [r7, #4]
 8021594:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	f103 020c 	add.w	r2, r3, #12
 802159c:	683b      	ldr	r3, [r7, #0]
 802159e:	330c      	adds	r3, #12
 80215a0:	4619      	mov	r1, r3
 80215a2:	4610      	mov	r0, r2
 80215a4:	f7ee fab7 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80215a8:	4603      	mov	r3, r0
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d001      	beq.n	80215b2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 80215ae:	2301      	movs	r3, #1
 80215b0:	e03c      	b.n	802162c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 80215b2:	2500      	movs	r5, #0
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	f103 040c 	add.w	r4, r3, #12
 80215ba:	f107 0308 	add.w	r3, r7, #8
 80215be:	491d      	ldr	r1, [pc, #116]	; (8021634 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 80215c0:	4618      	mov	r0, r3
 80215c2:	f7ed fee4 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80215c6:	2601      	movs	r6, #1
 80215c8:	f107 0308 	add.w	r3, r7, #8
 80215cc:	4619      	mov	r1, r3
 80215ce:	4620      	mov	r0, r4
 80215d0:	f7ee faa1 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80215d4:	4603      	mov	r3, r0
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d014      	beq.n	8021604 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 80215da:	683b      	ldr	r3, [r7, #0]
 80215dc:	f103 040c 	add.w	r4, r3, #12
 80215e0:	f107 0310 	add.w	r3, r7, #16
 80215e4:	4914      	ldr	r1, [pc, #80]	; (8021638 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 80215e6:	4618      	mov	r0, r3
 80215e8:	f7ed fed1 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80215ec:	2501      	movs	r5, #1
 80215ee:	f107 0310 	add.w	r3, r7, #16
 80215f2:	4619      	mov	r1, r3
 80215f4:	4620      	mov	r0, r4
 80215f6:	f7ee fa8e 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80215fa:	4603      	mov	r3, r0
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d001      	beq.n	8021604 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 8021600:	2401      	movs	r4, #1
 8021602:	e000      	b.n	8021606 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 8021604:	2400      	movs	r4, #0
 8021606:	2d00      	cmp	r5, #0
 8021608:	d004      	beq.n	8021614 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 802160a:	f107 0310 	add.w	r3, r7, #16
 802160e:	4618      	mov	r0, r3
 8021610:	f7ee fa75 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021614:	2e00      	cmp	r6, #0
 8021616:	d004      	beq.n	8021622 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 8021618:	f107 0308 	add.w	r3, r7, #8
 802161c:	4618      	mov	r0, r3
 802161e:	f7ee fa6e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021622:	2c00      	cmp	r4, #0
 8021624:	d001      	beq.n	802162a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 8021626:	2301      	movs	r3, #1
 8021628:	e000      	b.n	802162c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 802162a:	2300      	movs	r3, #0
}
 802162c:	4618      	mov	r0, r3
 802162e:	371c      	adds	r7, #28
 8021630:	46bd      	mov	sp, r7
 8021632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021634:	080298ac 	.word	0x080298ac
 8021638:	080298a4 	.word	0x080298a4

0802163c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 802163c:	b590      	push	{r4, r7, lr}
 802163e:	b0b9      	sub	sp, #228	; 0xe4
 8021640:	af00      	add	r7, sp, #0
 8021642:	6078      	str	r0, [r7, #4]
 8021644:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 8021646:	683b      	ldr	r3, [r7, #0]
 8021648:	f103 040c 	add.w	r4, r3, #12
 802164c:	f107 0308 	add.w	r3, r7, #8
 8021650:	49d4      	ldr	r1, [pc, #848]	; (80219a4 <_ZNK14MockNamedValue8toStringEv+0x368>)
 8021652:	4618      	mov	r0, r3
 8021654:	f7ed fe9b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021658:	f107 0308 	add.w	r3, r7, #8
 802165c:	4619      	mov	r1, r3
 802165e:	4620      	mov	r0, r4
 8021660:	f7ee fa59 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021664:	4603      	mov	r3, r0
 8021666:	461c      	mov	r4, r3
 8021668:	f107 0308 	add.w	r3, r7, #8
 802166c:	4618      	mov	r0, r3
 802166e:	f7ee fa46 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021672:	2c00      	cmp	r4, #0
 8021674:	d007      	beq.n	8021686 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 8021676:	683b      	ldr	r3, [r7, #0]
 8021678:	7e1a      	ldrb	r2, [r3, #24]
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	4611      	mov	r1, r2
 802167e:	4618      	mov	r0, r3
 8021680:	f7ee fcae 	bl	800ffe0 <_Z10StringFromb>
 8021684:	e23f      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 8021686:	683b      	ldr	r3, [r7, #0]
 8021688:	f103 040c 	add.w	r4, r3, #12
 802168c:	f107 0310 	add.w	r3, r7, #16
 8021690:	49c5      	ldr	r1, [pc, #788]	; (80219a8 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 8021692:	4618      	mov	r0, r3
 8021694:	f7ed fe7b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021698:	f107 0310 	add.w	r3, r7, #16
 802169c:	4619      	mov	r1, r3
 802169e:	4620      	mov	r0, r4
 80216a0:	f7ee fa39 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80216a4:	4603      	mov	r3, r0
 80216a6:	461c      	mov	r4, r3
 80216a8:	f107 0310 	add.w	r3, r7, #16
 80216ac:	4618      	mov	r0, r3
 80216ae:	f7ee fa26 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80216b2:	2c00      	cmp	r4, #0
 80216b4:	d03b      	beq.n	802172e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 80216b6:	683b      	ldr	r3, [r7, #0]
 80216b8:	699a      	ldr	r2, [r3, #24]
 80216ba:	f107 0320 	add.w	r3, r7, #32
 80216be:	4611      	mov	r1, r2
 80216c0:	4618      	mov	r0, r3
 80216c2:	f7ee fce3 	bl	801008c <_Z10StringFromi>
 80216c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80216ca:	49b8      	ldr	r1, [pc, #736]	; (80219ac <_ZNK14MockNamedValue8toStringEv+0x370>)
 80216cc:	4618      	mov	r0, r3
 80216ce:	f7ed fe5e 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80216d2:	f107 0318 	add.w	r3, r7, #24
 80216d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80216da:	f107 0120 	add.w	r1, r7, #32
 80216de:	4618      	mov	r0, r3
 80216e0:	f7ee fa6f 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80216e4:	683b      	ldr	r3, [r7, #0]
 80216e6:	699a      	ldr	r2, [r3, #24]
 80216e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80216ec:	4611      	mov	r1, r2
 80216ee:	4618      	mov	r0, r3
 80216f0:	f7ee fdbc 	bl	801026c <_Z30BracketsFormattedHexStringFromi>
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80216fa:	f107 0118 	add.w	r1, r7, #24
 80216fe:	4618      	mov	r0, r3
 8021700:	f7ee fa5f 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8021704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021708:	4618      	mov	r0, r3
 802170a:	f7ee f9f8 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802170e:	f107 0318 	add.w	r3, r7, #24
 8021712:	4618      	mov	r0, r3
 8021714:	f7ee f9f3 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802171c:	4618      	mov	r0, r3
 802171e:	f7ee f9ee 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021722:	f107 0320 	add.w	r3, r7, #32
 8021726:	4618      	mov	r0, r3
 8021728:	f7ee f9e9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802172c:	e1eb      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 802172e:	683b      	ldr	r3, [r7, #0]
 8021730:	f103 040c 	add.w	r4, r3, #12
 8021734:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021738:	499d      	ldr	r1, [pc, #628]	; (80219b0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 802173a:	4618      	mov	r0, r3
 802173c:	f7ed fe27 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021744:	4619      	mov	r1, r3
 8021746:	4620      	mov	r0, r4
 8021748:	f7ee f9e5 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802174c:	4603      	mov	r3, r0
 802174e:	461c      	mov	r4, r3
 8021750:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021754:	4618      	mov	r0, r3
 8021756:	f7ee f9d2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802175a:	2c00      	cmp	r4, #0
 802175c:	d03b      	beq.n	80217d6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 802175e:	683b      	ldr	r3, [r7, #0]
 8021760:	699a      	ldr	r2, [r3, #24]
 8021762:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021766:	4611      	mov	r1, r2
 8021768:	4618      	mov	r0, r3
 802176a:	f7ee fef7 	bl	801055c <_Z10StringFromj>
 802176e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8021772:	498e      	ldr	r1, [pc, #568]	; (80219ac <_ZNK14MockNamedValue8toStringEv+0x370>)
 8021774:	4618      	mov	r0, r3
 8021776:	f7ed fe0a 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 802177a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802177e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021782:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021786:	4618      	mov	r0, r3
 8021788:	f7ee fa1b 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 802178c:	683b      	ldr	r3, [r7, #0]
 802178e:	699a      	ldr	r2, [r3, #24]
 8021790:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021794:	4611      	mov	r1, r2
 8021796:	4618      	mov	r0, r3
 8021798:	f7ee fd84 	bl	80102a4 <_Z30BracketsFormattedHexStringFromj>
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80217a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80217a6:	4618      	mov	r0, r3
 80217a8:	f7ee fa0b 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80217ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80217b0:	4618      	mov	r0, r3
 80217b2:	f7ee f9a4 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80217b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80217ba:	4618      	mov	r0, r3
 80217bc:	f7ee f99f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80217c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80217c4:	4618      	mov	r0, r3
 80217c6:	f7ee f99a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80217ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80217ce:	4618      	mov	r0, r3
 80217d0:	f7ee f995 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80217d4:	e197      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	f103 040c 	add.w	r4, r3, #12
 80217dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80217e0:	4974      	ldr	r1, [pc, #464]	; (80219b4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 80217e2:	4618      	mov	r0, r3
 80217e4:	f7ed fdd3 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80217e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80217ec:	4619      	mov	r1, r3
 80217ee:	4620      	mov	r0, r4
 80217f0:	f7ee f991 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80217f4:	4603      	mov	r3, r0
 80217f6:	461c      	mov	r4, r3
 80217f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80217fc:	4618      	mov	r0, r3
 80217fe:	f7ee f97e 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021802:	2c00      	cmp	r4, #0
 8021804:	d03b      	beq.n	802187e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 8021806:	683b      	ldr	r3, [r7, #0]
 8021808:	699a      	ldr	r2, [r3, #24]
 802180a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802180e:	4611      	mov	r1, r2
 8021810:	4618      	mov	r0, r3
 8021812:	f7ee fc4d 	bl	80100b0 <_Z10StringFroml>
 8021816:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802181a:	4964      	ldr	r1, [pc, #400]	; (80219ac <_ZNK14MockNamedValue8toStringEv+0x370>)
 802181c:	4618      	mov	r0, r3
 802181e:	f7ed fdb6 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021822:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021826:	f107 0278 	add.w	r2, r7, #120	; 0x78
 802182a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 802182e:	4618      	mov	r0, r3
 8021830:	f7ee f9c7 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8021834:	683b      	ldr	r3, [r7, #0]
 8021836:	699a      	ldr	r2, [r3, #24]
 8021838:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802183c:	4611      	mov	r1, r2
 802183e:	4618      	mov	r0, r3
 8021840:	f7ee fd4c 	bl	80102dc <_Z30BracketsFormattedHexStringFroml>
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802184a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802184e:	4618      	mov	r0, r3
 8021850:	f7ee f9b7 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 8021854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021858:	4618      	mov	r0, r3
 802185a:	f7ee f950 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802185e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021862:	4618      	mov	r0, r3
 8021864:	f7ee f94b 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021868:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802186c:	4618      	mov	r0, r3
 802186e:	f7ee f946 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021872:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021876:	4618      	mov	r0, r3
 8021878:	f7ee f941 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802187c:	e143      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 802187e:	683b      	ldr	r3, [r7, #0]
 8021880:	f103 040c 	add.w	r4, r3, #12
 8021884:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8021888:	494b      	ldr	r1, [pc, #300]	; (80219b8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 802188a:	4618      	mov	r0, r3
 802188c:	f7ed fd7f 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021890:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8021894:	4619      	mov	r1, r3
 8021896:	4620      	mov	r0, r4
 8021898:	f7ee f93d 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 802189c:	4603      	mov	r3, r0
 802189e:	461c      	mov	r4, r3
 80218a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80218a4:	4618      	mov	r0, r3
 80218a6:	f7ee f92a 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80218aa:	2c00      	cmp	r4, #0
 80218ac:	d03b      	beq.n	8021926 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 80218ae:	683b      	ldr	r3, [r7, #0]
 80218b0:	699a      	ldr	r2, [r3, #24]
 80218b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80218b6:	4611      	mov	r1, r2
 80218b8:	4618      	mov	r0, r3
 80218ba:	f7ee fe61 	bl	8010580 <_Z10StringFromm>
 80218be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80218c2:	493a      	ldr	r1, [pc, #232]	; (80219ac <_ZNK14MockNamedValue8toStringEv+0x370>)
 80218c4:	4618      	mov	r0, r3
 80218c6:	f7ed fd62 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80218ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80218ce:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80218d2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80218d6:	4618      	mov	r0, r3
 80218d8:	f7ee f973 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80218dc:	683b      	ldr	r3, [r7, #0]
 80218de:	699a      	ldr	r2, [r3, #24]
 80218e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80218e4:	4611      	mov	r1, r2
 80218e6:	4618      	mov	r0, r3
 80218e8:	f7ee fd14 	bl	8010314 <_Z30BracketsFormattedHexStringFromm>
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80218f2:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80218f6:	4618      	mov	r0, r3
 80218f8:	f7ee f963 	bl	800fbc2 <_ZNK12SimpleStringplERKS_>
 80218fc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8021900:	4618      	mov	r0, r3
 8021902:	f7ee f8fc 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021906:	f107 0390 	add.w	r3, r7, #144	; 0x90
 802190a:	4618      	mov	r0, r3
 802190c:	f7ee f8f7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021910:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8021914:	4618      	mov	r0, r3
 8021916:	f7ee f8f2 	bl	800fafe <_ZN12SimpleStringD1Ev>
 802191a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802191e:	4618      	mov	r0, r3
 8021920:	f7ee f8ed 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021924:	e0ef      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 8021926:	683b      	ldr	r3, [r7, #0]
 8021928:	f103 040c 	add.w	r4, r3, #12
 802192c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021930:	4922      	ldr	r1, [pc, #136]	; (80219bc <_ZNK14MockNamedValue8toStringEv+0x380>)
 8021932:	4618      	mov	r0, r3
 8021934:	f7ed fd2b 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021938:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802193c:	4619      	mov	r1, r3
 802193e:	4620      	mov	r0, r4
 8021940:	f7ee f8e9 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021944:	4603      	mov	r3, r0
 8021946:	461c      	mov	r4, r3
 8021948:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802194c:	4618      	mov	r0, r3
 802194e:	f7ee f8d6 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021952:	2c00      	cmp	r4, #0
 8021954:	d006      	beq.n	8021964 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 8021956:	683b      	ldr	r3, [r7, #0]
 8021958:	699b      	ldr	r3, [r3, #24]
 802195a:	4619      	mov	r1, r3
 802195c:	6878      	ldr	r0, [r7, #4]
 802195e:	f7ed fd16 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021962:	e0d0      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 8021964:	683b      	ldr	r3, [r7, #0]
 8021966:	f103 040c 	add.w	r4, r3, #12
 802196a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 802196e:	4914      	ldr	r1, [pc, #80]	; (80219c0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 8021970:	4618      	mov	r0, r3
 8021972:	f7ed fd0c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021976:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 802197a:	4619      	mov	r1, r3
 802197c:	4620      	mov	r0, r4
 802197e:	f7ee f8ca 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021982:	4603      	mov	r3, r0
 8021984:	461c      	mov	r4, r3
 8021986:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 802198a:	4618      	mov	r0, r3
 802198c:	f7ee f8b7 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021990:	2c00      	cmp	r4, #0
 8021992:	d017      	beq.n	80219c4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 8021994:	683b      	ldr	r3, [r7, #0]
 8021996:	699a      	ldr	r2, [r3, #24]
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	4611      	mov	r1, r2
 802199c:	4618      	mov	r0, r3
 802199e:	f7ee fb99 	bl	80100d4 <_Z10StringFromPKv>
 80219a2:	e0b0      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 80219a4:	080297fc 	.word	0x080297fc
 80219a8:	080297f8 	.word	0x080297f8
 80219ac:	080298e8 	.word	0x080298e8
 80219b0:	08029804 	.word	0x08029804
 80219b4:	08029814 	.word	0x08029814
 80219b8:	08029820 	.word	0x08029820
 80219bc:	080298c4 	.word	0x080298c4
 80219c0:	080298a4 	.word	0x080298a4
    else if (type_ == "void (*)()")
 80219c4:	683b      	ldr	r3, [r7, #0]
 80219c6:	f103 040c 	add.w	r4, r3, #12
 80219ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80219ce:	4950      	ldr	r1, [pc, #320]	; (8021b10 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 80219d0:	4618      	mov	r0, r3
 80219d2:	f7ed fcdc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 80219d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80219da:	4619      	mov	r1, r3
 80219dc:	4620      	mov	r0, r4
 80219de:	f7ee f89a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80219e2:	4603      	mov	r3, r0
 80219e4:	461c      	mov	r4, r3
 80219e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80219ea:	4618      	mov	r0, r3
 80219ec:	f7ee f887 	bl	800fafe <_ZN12SimpleStringD1Ev>
 80219f0:	2c00      	cmp	r4, #0
 80219f2:	d007      	beq.n	8021a04 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 80219f4:	683b      	ldr	r3, [r7, #0]
 80219f6:	699a      	ldr	r2, [r3, #24]
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	4611      	mov	r1, r2
 80219fc:	4618      	mov	r0, r3
 80219fe:	f7ee fb93 	bl	8010128 <_Z10StringFromPFvvE>
 8021a02:	e080      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 8021a04:	683b      	ldr	r3, [r7, #0]
 8021a06:	f103 040c 	add.w	r4, r3, #12
 8021a0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021a0e:	4941      	ldr	r1, [pc, #260]	; (8021b14 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 8021a10:	4618      	mov	r0, r3
 8021a12:	f7ed fcbc 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021a16:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021a1a:	4619      	mov	r1, r3
 8021a1c:	4620      	mov	r0, r4
 8021a1e:	f7ee f87a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021a22:	4603      	mov	r3, r0
 8021a24:	461c      	mov	r4, r3
 8021a26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	f7ee f867 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021a30:	2c00      	cmp	r4, #0
 8021a32:	d007      	beq.n	8021a44 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 8021a34:	683b      	ldr	r3, [r7, #0]
 8021a36:	699a      	ldr	r2, [r3, #24]
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	4611      	mov	r1, r2
 8021a3c:	4618      	mov	r0, r3
 8021a3e:	f7ee fb49 	bl	80100d4 <_Z10StringFromPKv>
 8021a42:	e060      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 8021a44:	683b      	ldr	r3, [r7, #0]
 8021a46:	f103 040c 	add.w	r4, r3, #12
 8021a4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021a4e:	4932      	ldr	r1, [pc, #200]	; (8021b18 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 8021a50:	4618      	mov	r0, r3
 8021a52:	f7ed fc9c 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021a56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021a5a:	4619      	mov	r1, r3
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	f7ee f85a 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021a62:	4603      	mov	r3, r0
 8021a64:	461c      	mov	r4, r3
 8021a66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021a6a:	4618      	mov	r0, r3
 8021a6c:	f7ee f847 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021a70:	2c00      	cmp	r4, #0
 8021a72:	d00c      	beq.n	8021a8e <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 8021a74:	683b      	ldr	r3, [r7, #0]
 8021a76:	ed93 7b06 	vldr	d7, [r3, #24]
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	2106      	movs	r1, #6
 8021a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8021a82:	eef0 0a67 	vmov.f32	s1, s15
 8021a86:	4618      	mov	r0, r3
 8021a88:	f7ee fcfe 	bl	8010488 <_Z10StringFromdi>
 8021a8c:	e03b      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 8021a8e:	683b      	ldr	r3, [r7, #0]
 8021a90:	f103 040c 	add.w	r4, r3, #12
 8021a94:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021a98:	4920      	ldr	r1, [pc, #128]	; (8021b1c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 8021a9a:	4618      	mov	r0, r3
 8021a9c:	f7ed fc77 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8021aa0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021aa4:	4619      	mov	r1, r3
 8021aa6:	4620      	mov	r0, r4
 8021aa8:	f7ee f835 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021aac:	4603      	mov	r3, r0
 8021aae:	461c      	mov	r4, r3
 8021ab0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021ab4:	4618      	mov	r0, r3
 8021ab6:	f7ee f822 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021aba:	2c00      	cmp	r4, #0
 8021abc:	d008      	beq.n	8021ad0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 8021abe:	683b      	ldr	r3, [r7, #0]
 8021ac0:	6999      	ldr	r1, [r3, #24]
 8021ac2:	683b      	ldr	r3, [r7, #0]
 8021ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	4618      	mov	r0, r3
 8021aca:	f7ee fe71 	bl	80107b0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8021ace:	e01a      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 8021ad0:	683b      	ldr	r3, [r7, #0]
 8021ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d00b      	beq.n	8021af0 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 8021ad8:	683b      	ldr	r3, [r7, #0]
 8021ada:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8021adc:	683b      	ldr	r3, [r7, #0]
 8021ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ae0:	681b      	ldr	r3, [r3, #0]
 8021ae2:	330c      	adds	r3, #12
 8021ae4:	681b      	ldr	r3, [r3, #0]
 8021ae6:	683a      	ldr	r2, [r7, #0]
 8021ae8:	6992      	ldr	r2, [r2, #24]
 8021aea:	6878      	ldr	r0, [r7, #4]
 8021aec:	4798      	blx	r3
 8021aee:	e00a      	b.n	8021b06 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 8021af0:	683b      	ldr	r3, [r7, #0]
 8021af2:	330c      	adds	r3, #12
 8021af4:	4618      	mov	r0, r3
 8021af6:	f7ed ffd5 	bl	800faa4 <_ZNK12SimpleString12asCharStringEv>
 8021afa:	4602      	mov	r2, r0
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	4908      	ldr	r1, [pc, #32]	; (8021b20 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 8021b00:	4618      	mov	r0, r3
 8021b02:	f7ee fd03 	bl	801050c <_Z16StringFromFormatPKcz>

}
 8021b06:	6878      	ldr	r0, [r7, #4]
 8021b08:	37e4      	adds	r7, #228	; 0xe4
 8021b0a:	46bd      	mov	sp, r7
 8021b0c:	bd90      	pop	{r4, r7, pc}
 8021b0e:	bf00      	nop
 8021b10:	080298b8 	.word	0x080298b8
 8021b14:	080298ac 	.word	0x080298ac
 8021b18:	0802989c 	.word	0x0802989c
 8021b1c:	080298d0 	.word	0x080298d0
 8021b20:	080298ec 	.word	0x080298ec

08021b24 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 8021b24:	b480      	push	{r7}
 8021b26:	b083      	sub	sp, #12
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
 8021b2c:	6039      	str	r1, [r7, #0]
    next_ = node;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	683a      	ldr	r2, [r7, #0]
 8021b32:	605a      	str	r2, [r3, #4]
}
 8021b34:	bf00      	nop
 8021b36:	370c      	adds	r7, #12
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3e:	4770      	bx	lr

08021b40 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 8021b40:	b480      	push	{r7}
 8021b42:	b083      	sub	sp, #12
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
    return next_;
 8021b48:	687b      	ldr	r3, [r7, #4]
 8021b4a:	685b      	ldr	r3, [r3, #4]
}
 8021b4c:	4618      	mov	r0, r3
 8021b4e:	370c      	adds	r7, #12
 8021b50:	46bd      	mov	sp, r7
 8021b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b56:	4770      	bx	lr

08021b58 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 8021b58:	b480      	push	{r7}
 8021b5a:	b083      	sub	sp, #12
 8021b5c:	af00      	add	r7, sp, #0
 8021b5e:	6078      	str	r0, [r7, #4]
    return data_;
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	681b      	ldr	r3, [r3, #0]
}
 8021b64:	4618      	mov	r0, r3
 8021b66:	370c      	adds	r7, #12
 8021b68:	46bd      	mov	sp, r7
 8021b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b6e:	4770      	bx	lr

08021b70 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 8021b70:	b580      	push	{r7, lr}
 8021b72:	b082      	sub	sp, #8
 8021b74:	af00      	add	r7, sp, #0
 8021b76:	6078      	str	r0, [r7, #4]
    delete data_;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d004      	beq.n	8021b8a <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 8021b80:	681a      	ldr	r2, [r3, #0]
 8021b82:	3204      	adds	r2, #4
 8021b84:	6812      	ldr	r2, [r2, #0]
 8021b86:	4618      	mov	r0, r3
 8021b88:	4790      	blx	r2
}
 8021b8a:	bf00      	nop
 8021b8c:	3708      	adds	r7, #8
 8021b8e:	46bd      	mov	sp, r7
 8021b90:	bd80      	pop	{r7, pc}

08021b92 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 8021b92:	b480      	push	{r7}
 8021b94:	b083      	sub	sp, #12
 8021b96:	af00      	add	r7, sp, #0
 8021b98:	6078      	str	r0, [r7, #4]
 8021b9a:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	683a      	ldr	r2, [r7, #0]
 8021ba0:	601a      	str	r2, [r3, #0]
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	2200      	movs	r2, #0
 8021ba6:	605a      	str	r2, [r3, #4]
{
}
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	4618      	mov	r0, r3
 8021bac:	370c      	adds	r7, #12
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb4:	4770      	bx	lr

08021bb6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 8021bb6:	b580      	push	{r7, lr}
 8021bb8:	b082      	sub	sp, #8
 8021bba:	af00      	add	r7, sp, #0
 8021bbc:	6078      	str	r0, [r7, #4]
 8021bbe:	6039      	str	r1, [r7, #0]
    return data_->getName();
 8021bc0:	683b      	ldr	r3, [r7, #0]
 8021bc2:	6819      	ldr	r1, [r3, #0]
 8021bc4:	683b      	ldr	r3, [r7, #0]
 8021bc6:	681b      	ldr	r3, [r3, #0]
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	335c      	adds	r3, #92	; 0x5c
 8021bcc:	681b      	ldr	r3, [r3, #0]
 8021bce:	687a      	ldr	r2, [r7, #4]
 8021bd0:	4610      	mov	r0, r2
 8021bd2:	4798      	blx	r3
}
 8021bd4:	6878      	ldr	r0, [r7, #4]
 8021bd6:	3708      	adds	r7, #8
 8021bd8:	46bd      	mov	sp, r7
 8021bda:	bd80      	pop	{r7, pc}

08021bdc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	b082      	sub	sp, #8
 8021be0:	af00      	add	r7, sp, #0
 8021be2:	6078      	str	r0, [r7, #4]
 8021be4:	6039      	str	r1, [r7, #0]
    return data_->getType();
 8021be6:	683b      	ldr	r3, [r7, #0]
 8021be8:	6819      	ldr	r1, [r3, #0]
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	3360      	adds	r3, #96	; 0x60
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	687a      	ldr	r2, [r7, #4]
 8021bf6:	4610      	mov	r0, r2
 8021bf8:	4798      	blx	r3
}
 8021bfa:	6878      	ldr	r0, [r7, #4]
 8021bfc:	3708      	adds	r7, #8
 8021bfe:	46bd      	mov	sp, r7
 8021c00:	bd80      	pop	{r7, pc}

08021c02 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 8021c02:	b480      	push	{r7}
 8021c04:	b083      	sub	sp, #12
 8021c06:	af00      	add	r7, sp, #0
 8021c08:	6078      	str	r0, [r7, #4]
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	601a      	str	r2, [r3, #0]
{
}
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	4618      	mov	r0, r3
 8021c14:	370c      	adds	r7, #12
 8021c16:	46bd      	mov	sp, r7
 8021c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c1c:	4770      	bx	lr

08021c1e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 8021c1e:	b580      	push	{r7, lr}
 8021c20:	b084      	sub	sp, #16
 8021c22:	af00      	add	r7, sp, #0
 8021c24:	6078      	str	r0, [r7, #4]
    while (head_) {
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	681b      	ldr	r3, [r3, #0]
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d016      	beq.n	8021c5c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	681b      	ldr	r3, [r3, #0]
 8021c32:	4618      	mov	r0, r3
 8021c34:	f7ff ff84 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 8021c38:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	4618      	mov	r0, r3
 8021c40:	f7ff ff96 	bl	8021b70 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 8021c44:	687b      	ldr	r3, [r7, #4]
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	d003      	beq.n	8021c54 <_ZN18MockNamedValueList5clearEv+0x36>
 8021c4c:	2108      	movs	r1, #8
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f7ea ffee 	bl	800cc30 <_ZdlPvj>
        head_ = n;
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	68fa      	ldr	r2, [r7, #12]
 8021c58:	601a      	str	r2, [r3, #0]
    while (head_) {
 8021c5a:	e7e4      	b.n	8021c26 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 8021c5c:	bf00      	nop
 8021c5e:	3710      	adds	r7, #16
 8021c60:	46bd      	mov	sp, r7
 8021c62:	bd80      	pop	{r7, pc}

08021c64 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 8021c64:	b590      	push	{r4, r7, lr}
 8021c66:	b085      	sub	sp, #20
 8021c68:	af00      	add	r7, sp, #0
 8021c6a:	6078      	str	r0, [r7, #4]
 8021c6c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 8021c6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8021c72:	4916      	ldr	r1, [pc, #88]	; (8021ccc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 8021c74:	2008      	movs	r0, #8
 8021c76:	f7ea ffc7 	bl	800cc08 <_ZnwjPKci>
 8021c7a:	4604      	mov	r4, r0
 8021c7c:	6839      	ldr	r1, [r7, #0]
 8021c7e:	4620      	mov	r0, r4
 8021c80:	f7ff ff87 	bl	8021b92 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 8021c84:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	681b      	ldr	r3, [r3, #0]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d103      	bne.n	8021c96 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 8021c8e:	687b      	ldr	r3, [r7, #4]
 8021c90:	68ba      	ldr	r2, [r7, #8]
 8021c92:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 8021c94:	e016      	b.n	8021cc4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 8021c96:	687b      	ldr	r3, [r7, #4]
 8021c98:	681b      	ldr	r3, [r3, #0]
 8021c9a:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 8021c9c:	68f8      	ldr	r0, [r7, #12]
 8021c9e:	f7ff ff4f 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	bf14      	ite	ne
 8021ca8:	2301      	movne	r3, #1
 8021caa:	2300      	moveq	r3, #0
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d004      	beq.n	8021cbc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 8021cb2:	68f8      	ldr	r0, [r7, #12]
 8021cb4:	f7ff ff44 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 8021cb8:	60f8      	str	r0, [r7, #12]
 8021cba:	e7ef      	b.n	8021c9c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 8021cbc:	68b9      	ldr	r1, [r7, #8]
 8021cbe:	68f8      	ldr	r0, [r7, #12]
 8021cc0:	f7ff ff30 	bl	8021b24 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 8021cc4:	bf00      	nop
 8021cc6:	3714      	adds	r7, #20
 8021cc8:	46bd      	mov	sp, r7
 8021cca:	bd90      	pop	{r4, r7, pc}
 8021ccc:	08029834 	.word	0x08029834

08021cd0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 8021cd0:	b590      	push	{r4, r7, lr}
 8021cd2:	b087      	sub	sp, #28
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
 8021cd8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	617b      	str	r3, [r7, #20]
 8021ce0:	697b      	ldr	r3, [r7, #20]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d01e      	beq.n	8021d24 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 8021ce6:	f107 030c 	add.w	r3, r7, #12
 8021cea:	6979      	ldr	r1, [r7, #20]
 8021cec:	4618      	mov	r0, r3
 8021cee:	f7ff ff62 	bl	8021bb6 <_ZNK22MockNamedValueListNode7getNameEv>
 8021cf2:	f107 030c 	add.w	r3, r7, #12
 8021cf6:	6839      	ldr	r1, [r7, #0]
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f7ed ff0c 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021cfe:	4603      	mov	r3, r0
 8021d00:	461c      	mov	r4, r3
 8021d02:	f107 030c 	add.w	r3, r7, #12
 8021d06:	4618      	mov	r0, r3
 8021d08:	f7ed fef9 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021d0c:	2c00      	cmp	r4, #0
 8021d0e:	d004      	beq.n	8021d1a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 8021d10:	6978      	ldr	r0, [r7, #20]
 8021d12:	f7ff ff21 	bl	8021b58 <_ZN22MockNamedValueListNode4itemEv>
 8021d16:	4603      	mov	r3, r0
 8021d18:	e005      	b.n	8021d26 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8021d1a:	6978      	ldr	r0, [r7, #20]
 8021d1c:	f7ff ff10 	bl	8021b40 <_ZN22MockNamedValueListNode4nextEv>
 8021d20:	6178      	str	r0, [r7, #20]
 8021d22:	e7dd      	b.n	8021ce0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 8021d24:	2300      	movs	r3, #0
}
 8021d26:	4618      	mov	r0, r3
 8021d28:	371c      	adds	r7, #28
 8021d2a:	46bd      	mov	sp, r7
 8021d2c:	bd90      	pop	{r4, r7, pc}

08021d2e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 8021d2e:	b480      	push	{r7}
 8021d30:	b083      	sub	sp, #12
 8021d32:	af00      	add	r7, sp, #0
 8021d34:	6078      	str	r0, [r7, #4]
    return head_;
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	681b      	ldr	r3, [r3, #0]
}
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	370c      	adds	r7, #12
 8021d3e:	46bd      	mov	sp, r7
 8021d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d44:	4770      	bx	lr

08021d46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8021d46:	b580      	push	{r7, lr}
 8021d48:	b084      	sub	sp, #16
 8021d4a:	af00      	add	r7, sp, #0
 8021d4c:	60f8      	str	r0, [r7, #12]
 8021d4e:	60b9      	str	r1, [r7, #8]
 8021d50:	607a      	str	r2, [r7, #4]
 8021d52:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	68b9      	ldr	r1, [r7, #8]
 8021d58:	4618      	mov	r0, r3
 8021d5a:	f7ed fb6c 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8021d5e:	68fb      	ldr	r3, [r7, #12]
 8021d60:	687a      	ldr	r2, [r7, #4]
 8021d62:	609a      	str	r2, [r3, #8]
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	2200      	movs	r2, #0
 8021d68:	60da      	str	r2, [r3, #12]
 8021d6a:	68fb      	ldr	r3, [r7, #12]
 8021d6c:	683a      	ldr	r2, [r7, #0]
 8021d6e:	611a      	str	r2, [r3, #16]
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	4618      	mov	r0, r3
 8021d74:	3710      	adds	r7, #16
 8021d76:	46bd      	mov	sp, r7
 8021d78:	bd80      	pop	{r7, pc}

08021d7a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8021d7a:	b580      	push	{r7, lr}
 8021d7c:	b084      	sub	sp, #16
 8021d7e:	af00      	add	r7, sp, #0
 8021d80:	60f8      	str	r0, [r7, #12]
 8021d82:	60b9      	str	r1, [r7, #8]
 8021d84:	607a      	str	r2, [r7, #4]
 8021d86:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 8021d88:	68fb      	ldr	r3, [r7, #12]
 8021d8a:	68b9      	ldr	r1, [r7, #8]
 8021d8c:	4618      	mov	r0, r3
 8021d8e:	f7ed fb52 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	2200      	movs	r2, #0
 8021d96:	609a      	str	r2, [r3, #8]
 8021d98:	68fb      	ldr	r3, [r7, #12]
 8021d9a:	687a      	ldr	r2, [r7, #4]
 8021d9c:	60da      	str	r2, [r3, #12]
 8021d9e:	68fb      	ldr	r3, [r7, #12]
 8021da0:	683a      	ldr	r2, [r7, #0]
 8021da2:	611a      	str	r2, [r3, #16]
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	4618      	mov	r0, r3
 8021da8:	3710      	adds	r7, #16
 8021daa:	46bd      	mov	sp, r7
 8021dac:	bd80      	pop	{r7, pc}

08021dae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8021dae:	b580      	push	{r7, lr}
 8021db0:	b084      	sub	sp, #16
 8021db2:	af00      	add	r7, sp, #0
 8021db4:	60f8      	str	r0, [r7, #12]
 8021db6:	60b9      	str	r1, [r7, #8]
 8021db8:	607a      	str	r2, [r7, #4]
 8021dba:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 8021dbc:	68fb      	ldr	r3, [r7, #12]
 8021dbe:	68b9      	ldr	r1, [r7, #8]
 8021dc0:	4618      	mov	r0, r3
 8021dc2:	f7ed fb38 	bl	800f436 <_ZN12SimpleStringC1ERKS_>
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	687a      	ldr	r2, [r7, #4]
 8021dca:	609a      	str	r2, [r3, #8]
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	683a      	ldr	r2, [r7, #0]
 8021dd0:	60da      	str	r2, [r3, #12]
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	69ba      	ldr	r2, [r7, #24]
 8021dd6:	611a      	str	r2, [r3, #16]
 8021dd8:	68fb      	ldr	r3, [r7, #12]
 8021dda:	4618      	mov	r0, r3
 8021ddc:	3710      	adds	r7, #16
 8021dde:	46bd      	mov	sp, r7
 8021de0:	bd80      	pop	{r7, pc}
	...

08021de4 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 8021de4:	b480      	push	{r7}
 8021de6:	b083      	sub	sp, #12
 8021de8:	af00      	add	r7, sp, #0
 8021dea:	6078      	str	r0, [r7, #4]
 8021dec:	4a06      	ldr	r2, [pc, #24]	; (8021e08 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	601a      	str	r2, [r3, #0]
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	2200      	movs	r2, #0
 8021df6:	605a      	str	r2, [r3, #4]
{

}
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	4618      	mov	r0, r3
 8021dfc:	370c      	adds	r7, #12
 8021dfe:	46bd      	mov	sp, r7
 8021e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e04:	4770      	bx	lr
 8021e06:	bf00      	nop
 8021e08:	0802c930 	.word	0x0802c930

08021e0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021e0c:	b580      	push	{r7, lr}
 8021e0e:	b082      	sub	sp, #8
 8021e10:	af00      	add	r7, sp, #0
 8021e12:	6078      	str	r0, [r7, #4]
 8021e14:	4a05      	ldr	r2, [pc, #20]	; (8021e2c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	601a      	str	r2, [r3, #0]
{
    clear();
 8021e1a:	6878      	ldr	r0, [r7, #4]
 8021e1c:	f000 f825 	bl	8021e6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8021e20:	687b      	ldr	r3, [r7, #4]
 8021e22:	4618      	mov	r0, r3
 8021e24:	3708      	adds	r7, #8
 8021e26:	46bd      	mov	sp, r7
 8021e28:	bd80      	pop	{r7, pc}
 8021e2a:	bf00      	nop
 8021e2c:	0802c930 	.word	0x0802c930

08021e30 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021e30:	b580      	push	{r7, lr}
 8021e32:	b082      	sub	sp, #8
 8021e34:	af00      	add	r7, sp, #0
 8021e36:	6078      	str	r0, [r7, #4]
}
 8021e38:	6878      	ldr	r0, [r7, #4]
 8021e3a:	f7ff ffe7 	bl	8021e0c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8021e3e:	2108      	movs	r1, #8
 8021e40:	6878      	ldr	r0, [r7, #4]
 8021e42:	f7ea fef5 	bl	800cc30 <_ZdlPvj>
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	4618      	mov	r0, r3
 8021e4a:	3708      	adds	r7, #8
 8021e4c:	46bd      	mov	sp, r7
 8021e4e:	bd80      	pop	{r7, pc}

08021e50 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 8021e50:	b580      	push	{r7, lr}
 8021e52:	b082      	sub	sp, #8
 8021e54:	af00      	add	r7, sp, #0
 8021e56:	6078      	str	r0, [r7, #4]
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	4618      	mov	r0, r3
 8021e5c:	f7ed fe4f 	bl	800fafe <_ZN12SimpleStringD1Ev>
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	4618      	mov	r0, r3
 8021e64:	3708      	adds	r7, #8
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}

08021e6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 8021e6a:	b590      	push	{r4, r7, lr}
 8021e6c:	b085      	sub	sp, #20
 8021e6e:	af00      	add	r7, sp, #0
 8021e70:	6078      	str	r0, [r7, #4]
    while (head_) {
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	685b      	ldr	r3, [r3, #4]
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	d012      	beq.n	8021ea0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	691b      	ldr	r3, [r3, #16]
 8021e80:	60fb      	str	r3, [r7, #12]
        delete head_;
 8021e82:	687b      	ldr	r3, [r7, #4]
 8021e84:	685c      	ldr	r4, [r3, #4]
 8021e86:	2c00      	cmp	r4, #0
 8021e88:	d006      	beq.n	8021e98 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 8021e8a:	4620      	mov	r0, r4
 8021e8c:	f7ff ffe0 	bl	8021e50 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 8021e90:	2114      	movs	r1, #20
 8021e92:	4620      	mov	r0, r4
 8021e94:	f7ea fecc 	bl	800cc30 <_ZdlPvj>
        head_ = next;
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	68fa      	ldr	r2, [r7, #12]
 8021e9c:	605a      	str	r2, [r3, #4]
    while (head_) {
 8021e9e:	e7e8      	b.n	8021e72 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 8021ea0:	bf00      	nop
 8021ea2:	3714      	adds	r7, #20
 8021ea4:	46bd      	mov	sp, r7
 8021ea6:	bd90      	pop	{r4, r7, pc}

08021ea8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 8021ea8:	b590      	push	{r4, r7, lr}
 8021eaa:	b085      	sub	sp, #20
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	60f8      	str	r0, [r7, #12]
 8021eb0:	60b9      	str	r1, [r7, #8]
 8021eb2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 8021eb4:	f240 227a 	movw	r2, #634	; 0x27a
 8021eb8:	4908      	ldr	r1, [pc, #32]	; (8021edc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 8021eba:	2014      	movs	r0, #20
 8021ebc:	f7ea fea4 	bl	800cc08 <_ZnwjPKci>
 8021ec0:	4604      	mov	r4, r0
 8021ec2:	68fb      	ldr	r3, [r7, #12]
 8021ec4:	685b      	ldr	r3, [r3, #4]
 8021ec6:	687a      	ldr	r2, [r7, #4]
 8021ec8:	68b9      	ldr	r1, [r7, #8]
 8021eca:	4620      	mov	r0, r4
 8021ecc:	f7ff ff3b 	bl	8021d46 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	605c      	str	r4, [r3, #4]
}
 8021ed4:	bf00      	nop
 8021ed6:	3714      	adds	r7, #20
 8021ed8:	46bd      	mov	sp, r7
 8021eda:	bd90      	pop	{r4, r7, pc}
 8021edc:	08029834 	.word	0x08029834

08021ee0 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 8021ee0:	b590      	push	{r4, r7, lr}
 8021ee2:	b085      	sub	sp, #20
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	60f8      	str	r0, [r7, #12]
 8021ee8:	60b9      	str	r1, [r7, #8]
 8021eea:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 8021eec:	f240 227f 	movw	r2, #639	; 0x27f
 8021ef0:	4908      	ldr	r1, [pc, #32]	; (8021f14 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 8021ef2:	2014      	movs	r0, #20
 8021ef4:	f7ea fe88 	bl	800cc08 <_ZnwjPKci>
 8021ef8:	4604      	mov	r4, r0
 8021efa:	68fb      	ldr	r3, [r7, #12]
 8021efc:	685b      	ldr	r3, [r3, #4]
 8021efe:	687a      	ldr	r2, [r7, #4]
 8021f00:	68b9      	ldr	r1, [r7, #8]
 8021f02:	4620      	mov	r0, r4
 8021f04:	f7ff ff39 	bl	8021d7a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	605c      	str	r4, [r3, #4]
}
 8021f0c:	bf00      	nop
 8021f0e:	3714      	adds	r7, #20
 8021f10:	46bd      	mov	sp, r7
 8021f12:	bd90      	pop	{r4, r7, pc}
 8021f14:	08029834 	.word	0x08029834

08021f18 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 8021f18:	b580      	push	{r7, lr}
 8021f1a:	b084      	sub	sp, #16
 8021f1c:	af00      	add	r7, sp, #0
 8021f1e:	6078      	str	r0, [r7, #4]
 8021f20:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	685b      	ldr	r3, [r3, #4]
 8021f26:	60fb      	str	r3, [r7, #12]
 8021f28:	68fb      	ldr	r3, [r7, #12]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d017      	beq.n	8021f5e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 8021f2e:	68fb      	ldr	r3, [r7, #12]
 8021f30:	6839      	ldr	r1, [r7, #0]
 8021f32:	4618      	mov	r0, r3
 8021f34:	f7ed fdef 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021f38:	4603      	mov	r3, r0
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d005      	beq.n	8021f4a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8021f3e:	68fb      	ldr	r3, [r7, #12]
 8021f40:	689b      	ldr	r3, [r3, #8]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d001      	beq.n	8021f4a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8021f46:	2301      	movs	r3, #1
 8021f48:	e000      	b.n	8021f4c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 8021f4a:	2300      	movs	r3, #0
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d002      	beq.n	8021f56 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	689b      	ldr	r3, [r3, #8]
 8021f54:	e004      	b.n	8021f60 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	691b      	ldr	r3, [r3, #16]
 8021f5a:	60fb      	str	r3, [r7, #12]
 8021f5c:	e7e4      	b.n	8021f28 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8021f5e:	2300      	movs	r3, #0
}
 8021f60:	4618      	mov	r0, r3
 8021f62:	3710      	adds	r7, #16
 8021f64:	46bd      	mov	sp, r7
 8021f66:	bd80      	pop	{r7, pc}

08021f68 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 8021f68:	b580      	push	{r7, lr}
 8021f6a:	b084      	sub	sp, #16
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
 8021f70:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	685b      	ldr	r3, [r3, #4]
 8021f76:	60fb      	str	r3, [r7, #12]
 8021f78:	68fb      	ldr	r3, [r7, #12]
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d017      	beq.n	8021fae <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	6839      	ldr	r1, [r7, #0]
 8021f82:	4618      	mov	r0, r3
 8021f84:	f7ed fdc7 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 8021f88:	4603      	mov	r3, r0
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d005      	beq.n	8021f9a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8021f8e:	68fb      	ldr	r3, [r7, #12]
 8021f90:	68db      	ldr	r3, [r3, #12]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d001      	beq.n	8021f9a <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8021f96:	2301      	movs	r3, #1
 8021f98:	e000      	b.n	8021f9c <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d002      	beq.n	8021fa6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 8021fa0:	68fb      	ldr	r3, [r7, #12]
 8021fa2:	68db      	ldr	r3, [r3, #12]
 8021fa4:	e004      	b.n	8021fb0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021fa6:	68fb      	ldr	r3, [r7, #12]
 8021fa8:	691b      	ldr	r3, [r3, #16]
 8021faa:	60fb      	str	r3, [r7, #12]
 8021fac:	e7e4      	b.n	8021f78 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8021fae:	2300      	movs	r3, #0
}
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	3710      	adds	r7, #16
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}

08021fb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8021fb8:	b590      	push	{r4, r7, lr}
 8021fba:	b087      	sub	sp, #28
 8021fbc:	af02      	add	r7, sp, #8
 8021fbe:	6078      	str	r0, [r7, #4]
 8021fc0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8021fc2:	683b      	ldr	r3, [r7, #0]
 8021fc4:	685b      	ldr	r3, [r3, #4]
 8021fc6:	60fb      	str	r3, [r7, #12]
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d018      	beq.n	8022000 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 8021fce:	f240 2293 	movw	r2, #659	; 0x293
 8021fd2:	490d      	ldr	r1, [pc, #52]	; (8022008 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 8021fd4:	2014      	movs	r0, #20
 8021fd6:	f7ea fe17 	bl	800cc08 <_ZnwjPKci>
 8021fda:	4604      	mov	r4, r0
 8021fdc:	68f9      	ldr	r1, [r7, #12]
 8021fde:	68fb      	ldr	r3, [r7, #12]
 8021fe0:	689a      	ldr	r2, [r3, #8]
 8021fe2:	68fb      	ldr	r3, [r7, #12]
 8021fe4:	68d8      	ldr	r0, [r3, #12]
 8021fe6:	687b      	ldr	r3, [r7, #4]
 8021fe8:	685b      	ldr	r3, [r3, #4]
 8021fea:	9300      	str	r3, [sp, #0]
 8021fec:	4603      	mov	r3, r0
 8021fee:	4620      	mov	r0, r4
 8021ff0:	f7ff fedd 	bl	8021dae <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8021ff8:	68fb      	ldr	r3, [r7, #12]
 8021ffa:	691b      	ldr	r3, [r3, #16]
 8021ffc:	60fb      	str	r3, [r7, #12]
 8021ffe:	e7e3      	b.n	8021fc8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 8022000:	bf00      	nop
 8022002:	3714      	adds	r7, #20
 8022004:	46bd      	mov	sp, r7
 8022006:	bd90      	pop	{r4, r7, pc}
 8022008:	08029834 	.word	0x08029834

0802200c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 802200c:	b580      	push	{r7, lr}
 802200e:	b082      	sub	sp, #8
 8022010:	af00      	add	r7, sp, #0
 8022012:	6078      	str	r0, [r7, #4]
 8022014:	6039      	str	r1, [r7, #0]
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	490b      	ldr	r1, [pc, #44]	; (8022048 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 802201a:	4618      	mov	r0, r3
 802201c:	f7ed f9b7 	bl	800f38e <_ZN12SimpleStringC1EPKc>
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	2200      	movs	r2, #0
 8022024:	721a      	strb	r2, [r3, #8]
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	2200      	movs	r2, #0
 802202a:	725a      	strb	r2, [r3, #9]
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	2200      	movs	r2, #0
 8022030:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	6839      	ldr	r1, [r7, #0]
 8022036:	4618      	mov	r0, r3
 8022038:	f7ed fa15 	bl	800f466 <_ZN12SimpleStringaSERKS_>
}
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	4618      	mov	r0, r3
 8022040:	3708      	adds	r7, #8
 8022042:	46bd      	mov	sp, r7
 8022044:	bd80      	pop	{r7, pc}
 8022046:	bf00      	nop
 8022048:	08029910 	.word	0x08029910

0802204c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 802204c:	b480      	push	{r7}
 802204e:	b083      	sub	sp, #12
 8022050:	af00      	add	r7, sp, #0
 8022052:	6078      	str	r0, [r7, #4]
 8022054:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	683a      	ldr	r2, [r7, #0]
 802205a:	60da      	str	r2, [r3, #12]
    return this;
 802205c:	687b      	ldr	r3, [r7, #4]
}
 802205e:	4618      	mov	r0, r3
 8022060:	370c      	adds	r7, #12
 8022062:	46bd      	mov	sp, r7
 8022064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022068:	4770      	bx	lr

0802206a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 802206a:	b480      	push	{r7}
 802206c:	b083      	sub	sp, #12
 802206e:	af00      	add	r7, sp, #0
 8022070:	6078      	str	r0, [r7, #4]
    return next_;
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	68db      	ldr	r3, [r3, #12]
}
 8022076:	4618      	mov	r0, r3
 8022078:	370c      	adds	r7, #12
 802207a:	46bd      	mov	sp, r7
 802207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022080:	4770      	bx	lr

08022082 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8022082:	b480      	push	{r7}
 8022084:	b083      	sub	sp, #12
 8022086:	af00      	add	r7, sp, #0
 8022088:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	2201      	movs	r2, #1
 802208e:	721a      	strb	r2, [r3, #8]
}
 8022090:	bf00      	nop
 8022092:	370c      	adds	r7, #12
 8022094:	46bd      	mov	sp, r7
 8022096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802209a:	4770      	bx	lr

0802209c <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 802209c:	b480      	push	{r7}
 802209e:	b083      	sub	sp, #12
 80220a0:	af00      	add	r7, sp, #0
 80220a2:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	2201      	movs	r2, #1
 80220a8:	725a      	strb	r2, [r3, #9]
}
 80220aa:	bf00      	nop
 80220ac:	370c      	adds	r7, #12
 80220ae:	46bd      	mov	sp, r7
 80220b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b4:	4770      	bx	lr

080220b6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 80220b6:	b580      	push	{r7, lr}
 80220b8:	b084      	sub	sp, #16
 80220ba:	af00      	add	r7, sp, #0
 80220bc:	6078      	str	r0, [r7, #4]
 80220be:	6039      	str	r1, [r7, #0]
    bool matches = false;
 80220c0:	2300      	movs	r3, #0
 80220c2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	7a1b      	ldrb	r3, [r3, #8]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d007      	beq.n	80220dc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 80220cc:	687b      	ldr	r3, [r7, #4]
 80220ce:	4619      	mov	r1, r3
 80220d0:	6838      	ldr	r0, [r7, #0]
 80220d2:	f7ed fd20 	bl	800fb16 <_ZeqRK12SimpleStringS1_>
 80220d6:	4603      	mov	r3, r0
 80220d8:	73fb      	strb	r3, [r7, #15]
 80220da:	e006      	b.n	80220ea <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	4619      	mov	r1, r3
 80220e0:	6838      	ldr	r0, [r7, #0]
 80220e2:	f7ed f9d2 	bl	800f48a <_ZNK12SimpleString8containsERKS_>
 80220e6:	4603      	mov	r3, r0
 80220e8:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	7a5b      	ldrb	r3, [r3, #9]
 80220ee:	2b00      	cmp	r3, #0
 80220f0:	d004      	beq.n	80220fc <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 80220f2:	7bfb      	ldrb	r3, [r7, #15]
 80220f4:	f083 0301 	eor.w	r3, r3, #1
 80220f8:	b2db      	uxtb	r3, r3
 80220fa:	e005      	b.n	8022108 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 80220fc:	7bfb      	ldrb	r3, [r7, #15]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	bf14      	ite	ne
 8022102:	2301      	movne	r3, #1
 8022104:	2300      	moveq	r3, #0
 8022106:	b2db      	uxtb	r3, r3
}
 8022108:	4618      	mov	r0, r3
 802210a:	3710      	adds	r7, #16
 802210c:	46bd      	mov	sp, r7
 802210e:	bd80      	pop	{r7, pc}

08022110 <__cxa_guard_acquire>:
 8022110:	6803      	ldr	r3, [r0, #0]
 8022112:	07db      	lsls	r3, r3, #31
 8022114:	d406      	bmi.n	8022124 <__cxa_guard_acquire+0x14>
 8022116:	7843      	ldrb	r3, [r0, #1]
 8022118:	b103      	cbz	r3, 802211c <__cxa_guard_acquire+0xc>
 802211a:	deff      	udf	#255	; 0xff
 802211c:	2301      	movs	r3, #1
 802211e:	7043      	strb	r3, [r0, #1]
 8022120:	4618      	mov	r0, r3
 8022122:	4770      	bx	lr
 8022124:	2000      	movs	r0, #0
 8022126:	4770      	bx	lr

08022128 <__cxa_guard_release>:
 8022128:	2301      	movs	r3, #1
 802212a:	6003      	str	r3, [r0, #0]
 802212c:	4770      	bx	lr

0802212e <__cxa_pure_virtual>:
 802212e:	b508      	push	{r3, lr}
 8022130:	f000 f80c 	bl	802214c <_ZSt9terminatev>

08022134 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022134:	b508      	push	{r3, lr}
 8022136:	4780      	blx	r0
 8022138:	f000 f816 	bl	8022168 <abort>

0802213c <_ZSt13get_terminatev>:
 802213c:	4b02      	ldr	r3, [pc, #8]	; (8022148 <_ZSt13get_terminatev+0xc>)
 802213e:	6818      	ldr	r0, [r3, #0]
 8022140:	f3bf 8f5b 	dmb	ish
 8022144:	4770      	bx	lr
 8022146:	bf00      	nop
 8022148:	20000104 	.word	0x20000104

0802214c <_ZSt9terminatev>:
 802214c:	b508      	push	{r3, lr}
 802214e:	f7ff fff5 	bl	802213c <_ZSt13get_terminatev>
 8022152:	f7ff ffef 	bl	8022134 <_ZN10__cxxabiv111__terminateEPFvvE>

08022156 <fabs>:
 8022156:	ec51 0b10 	vmov	r0, r1, d0
 802215a:	ee10 2a10 	vmov	r2, s0
 802215e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022162:	ec43 2b10 	vmov	d0, r2, r3
 8022166:	4770      	bx	lr

08022168 <abort>:
 8022168:	b508      	push	{r3, lr}
 802216a:	2006      	movs	r0, #6
 802216c:	f000 ff8c 	bl	8023088 <raise>
 8022170:	2001      	movs	r0, #1
 8022172:	f7de fe3e 	bl	8000df2 <_exit>

08022176 <atexit>:
 8022176:	2300      	movs	r3, #0
 8022178:	4601      	mov	r1, r0
 802217a:	461a      	mov	r2, r3
 802217c:	4618      	mov	r0, r3
 802217e:	f002 b9db 	b.w	8024538 <__register_exitproc>

08022182 <atoi>:
 8022182:	220a      	movs	r2, #10
 8022184:	2100      	movs	r1, #0
 8022186:	f001 be03 	b.w	8023d90 <strtol>
	...

0802218c <calloc>:
 802218c:	4b02      	ldr	r3, [pc, #8]	; (8022198 <calloc+0xc>)
 802218e:	460a      	mov	r2, r1
 8022190:	4601      	mov	r1, r0
 8022192:	6818      	ldr	r0, [r3, #0]
 8022194:	f000 bde8 	b.w	8022d68 <_calloc_r>
 8022198:	20000108 	.word	0x20000108

0802219c <__errno>:
 802219c:	4b01      	ldr	r3, [pc, #4]	; (80221a4 <__errno+0x8>)
 802219e:	6818      	ldr	r0, [r3, #0]
 80221a0:	4770      	bx	lr
 80221a2:	bf00      	nop
 80221a4:	20000108 	.word	0x20000108

080221a8 <_fclose_r>:
 80221a8:	b570      	push	{r4, r5, r6, lr}
 80221aa:	4605      	mov	r5, r0
 80221ac:	460c      	mov	r4, r1
 80221ae:	b911      	cbnz	r1, 80221b6 <_fclose_r+0xe>
 80221b0:	2600      	movs	r6, #0
 80221b2:	4630      	mov	r0, r6
 80221b4:	bd70      	pop	{r4, r5, r6, pc}
 80221b6:	b118      	cbz	r0, 80221c0 <_fclose_r+0x18>
 80221b8:	6983      	ldr	r3, [r0, #24]
 80221ba:	b90b      	cbnz	r3, 80221c0 <_fclose_r+0x18>
 80221bc:	f000 f994 	bl	80224e8 <__sinit>
 80221c0:	4b2c      	ldr	r3, [pc, #176]	; (8022274 <_fclose_r+0xcc>)
 80221c2:	429c      	cmp	r4, r3
 80221c4:	d114      	bne.n	80221f0 <_fclose_r+0x48>
 80221c6:	686c      	ldr	r4, [r5, #4]
 80221c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80221ca:	07d8      	lsls	r0, r3, #31
 80221cc:	d405      	bmi.n	80221da <_fclose_r+0x32>
 80221ce:	89a3      	ldrh	r3, [r4, #12]
 80221d0:	0599      	lsls	r1, r3, #22
 80221d2:	d402      	bmi.n	80221da <_fclose_r+0x32>
 80221d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80221d6:	f000 fd3a 	bl	8022c4e <__retarget_lock_acquire_recursive>
 80221da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80221de:	b98b      	cbnz	r3, 8022204 <_fclose_r+0x5c>
 80221e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80221e2:	f016 0601 	ands.w	r6, r6, #1
 80221e6:	d1e3      	bne.n	80221b0 <_fclose_r+0x8>
 80221e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80221ea:	f000 fd32 	bl	8022c52 <__retarget_lock_release_recursive>
 80221ee:	e7e0      	b.n	80221b2 <_fclose_r+0xa>
 80221f0:	4b21      	ldr	r3, [pc, #132]	; (8022278 <_fclose_r+0xd0>)
 80221f2:	429c      	cmp	r4, r3
 80221f4:	d101      	bne.n	80221fa <_fclose_r+0x52>
 80221f6:	68ac      	ldr	r4, [r5, #8]
 80221f8:	e7e6      	b.n	80221c8 <_fclose_r+0x20>
 80221fa:	4b20      	ldr	r3, [pc, #128]	; (802227c <_fclose_r+0xd4>)
 80221fc:	429c      	cmp	r4, r3
 80221fe:	bf08      	it	eq
 8022200:	68ec      	ldreq	r4, [r5, #12]
 8022202:	e7e1      	b.n	80221c8 <_fclose_r+0x20>
 8022204:	4621      	mov	r1, r4
 8022206:	4628      	mov	r0, r5
 8022208:	f000 f842 	bl	8022290 <__sflush_r>
 802220c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802220e:	4606      	mov	r6, r0
 8022210:	b133      	cbz	r3, 8022220 <_fclose_r+0x78>
 8022212:	6a21      	ldr	r1, [r4, #32]
 8022214:	4628      	mov	r0, r5
 8022216:	4798      	blx	r3
 8022218:	2800      	cmp	r0, #0
 802221a:	bfb8      	it	lt
 802221c:	f04f 36ff 	movlt.w	r6, #4294967295
 8022220:	89a3      	ldrh	r3, [r4, #12]
 8022222:	061a      	lsls	r2, r3, #24
 8022224:	d503      	bpl.n	802222e <_fclose_r+0x86>
 8022226:	6921      	ldr	r1, [r4, #16]
 8022228:	4628      	mov	r0, r5
 802222a:	f000 fdad 	bl	8022d88 <_free_r>
 802222e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022230:	b141      	cbz	r1, 8022244 <_fclose_r+0x9c>
 8022232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022236:	4299      	cmp	r1, r3
 8022238:	d002      	beq.n	8022240 <_fclose_r+0x98>
 802223a:	4628      	mov	r0, r5
 802223c:	f000 fda4 	bl	8022d88 <_free_r>
 8022240:	2300      	movs	r3, #0
 8022242:	6363      	str	r3, [r4, #52]	; 0x34
 8022244:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022246:	b121      	cbz	r1, 8022252 <_fclose_r+0xaa>
 8022248:	4628      	mov	r0, r5
 802224a:	f000 fd9d 	bl	8022d88 <_free_r>
 802224e:	2300      	movs	r3, #0
 8022250:	64a3      	str	r3, [r4, #72]	; 0x48
 8022252:	f000 f931 	bl	80224b8 <__sfp_lock_acquire>
 8022256:	2300      	movs	r3, #0
 8022258:	81a3      	strh	r3, [r4, #12]
 802225a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802225c:	07db      	lsls	r3, r3, #31
 802225e:	d402      	bmi.n	8022266 <_fclose_r+0xbe>
 8022260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022262:	f000 fcf6 	bl	8022c52 <__retarget_lock_release_recursive>
 8022266:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022268:	f000 fcef 	bl	8022c4a <__retarget_lock_close_recursive>
 802226c:	f000 f92a 	bl	80224c4 <__sfp_lock_release>
 8022270:	e79f      	b.n	80221b2 <_fclose_r+0xa>
 8022272:	bf00      	nop
 8022274:	0802ca24 	.word	0x0802ca24
 8022278:	0802ca44 	.word	0x0802ca44
 802227c:	0802ca04 	.word	0x0802ca04

08022280 <fclose>:
 8022280:	4b02      	ldr	r3, [pc, #8]	; (802228c <fclose+0xc>)
 8022282:	4601      	mov	r1, r0
 8022284:	6818      	ldr	r0, [r3, #0]
 8022286:	f7ff bf8f 	b.w	80221a8 <_fclose_r>
 802228a:	bf00      	nop
 802228c:	20000108 	.word	0x20000108

08022290 <__sflush_r>:
 8022290:	898a      	ldrh	r2, [r1, #12]
 8022292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022296:	4605      	mov	r5, r0
 8022298:	0710      	lsls	r0, r2, #28
 802229a:	460c      	mov	r4, r1
 802229c:	d458      	bmi.n	8022350 <__sflush_r+0xc0>
 802229e:	684b      	ldr	r3, [r1, #4]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	dc05      	bgt.n	80222b0 <__sflush_r+0x20>
 80222a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	dc02      	bgt.n	80222b0 <__sflush_r+0x20>
 80222aa:	2000      	movs	r0, #0
 80222ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222b2:	2e00      	cmp	r6, #0
 80222b4:	d0f9      	beq.n	80222aa <__sflush_r+0x1a>
 80222b6:	2300      	movs	r3, #0
 80222b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80222bc:	682f      	ldr	r7, [r5, #0]
 80222be:	602b      	str	r3, [r5, #0]
 80222c0:	d032      	beq.n	8022328 <__sflush_r+0x98>
 80222c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80222c4:	89a3      	ldrh	r3, [r4, #12]
 80222c6:	075a      	lsls	r2, r3, #29
 80222c8:	d505      	bpl.n	80222d6 <__sflush_r+0x46>
 80222ca:	6863      	ldr	r3, [r4, #4]
 80222cc:	1ac0      	subs	r0, r0, r3
 80222ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80222d0:	b10b      	cbz	r3, 80222d6 <__sflush_r+0x46>
 80222d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80222d4:	1ac0      	subs	r0, r0, r3
 80222d6:	2300      	movs	r3, #0
 80222d8:	4602      	mov	r2, r0
 80222da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222dc:	6a21      	ldr	r1, [r4, #32]
 80222de:	4628      	mov	r0, r5
 80222e0:	47b0      	blx	r6
 80222e2:	1c43      	adds	r3, r0, #1
 80222e4:	89a3      	ldrh	r3, [r4, #12]
 80222e6:	d106      	bne.n	80222f6 <__sflush_r+0x66>
 80222e8:	6829      	ldr	r1, [r5, #0]
 80222ea:	291d      	cmp	r1, #29
 80222ec:	d82c      	bhi.n	8022348 <__sflush_r+0xb8>
 80222ee:	4a2a      	ldr	r2, [pc, #168]	; (8022398 <__sflush_r+0x108>)
 80222f0:	40ca      	lsrs	r2, r1
 80222f2:	07d6      	lsls	r6, r2, #31
 80222f4:	d528      	bpl.n	8022348 <__sflush_r+0xb8>
 80222f6:	2200      	movs	r2, #0
 80222f8:	6062      	str	r2, [r4, #4]
 80222fa:	04d9      	lsls	r1, r3, #19
 80222fc:	6922      	ldr	r2, [r4, #16]
 80222fe:	6022      	str	r2, [r4, #0]
 8022300:	d504      	bpl.n	802230c <__sflush_r+0x7c>
 8022302:	1c42      	adds	r2, r0, #1
 8022304:	d101      	bne.n	802230a <__sflush_r+0x7a>
 8022306:	682b      	ldr	r3, [r5, #0]
 8022308:	b903      	cbnz	r3, 802230c <__sflush_r+0x7c>
 802230a:	6560      	str	r0, [r4, #84]	; 0x54
 802230c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802230e:	602f      	str	r7, [r5, #0]
 8022310:	2900      	cmp	r1, #0
 8022312:	d0ca      	beq.n	80222aa <__sflush_r+0x1a>
 8022314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022318:	4299      	cmp	r1, r3
 802231a:	d002      	beq.n	8022322 <__sflush_r+0x92>
 802231c:	4628      	mov	r0, r5
 802231e:	f000 fd33 	bl	8022d88 <_free_r>
 8022322:	2000      	movs	r0, #0
 8022324:	6360      	str	r0, [r4, #52]	; 0x34
 8022326:	e7c1      	b.n	80222ac <__sflush_r+0x1c>
 8022328:	6a21      	ldr	r1, [r4, #32]
 802232a:	2301      	movs	r3, #1
 802232c:	4628      	mov	r0, r5
 802232e:	47b0      	blx	r6
 8022330:	1c41      	adds	r1, r0, #1
 8022332:	d1c7      	bne.n	80222c4 <__sflush_r+0x34>
 8022334:	682b      	ldr	r3, [r5, #0]
 8022336:	2b00      	cmp	r3, #0
 8022338:	d0c4      	beq.n	80222c4 <__sflush_r+0x34>
 802233a:	2b1d      	cmp	r3, #29
 802233c:	d001      	beq.n	8022342 <__sflush_r+0xb2>
 802233e:	2b16      	cmp	r3, #22
 8022340:	d101      	bne.n	8022346 <__sflush_r+0xb6>
 8022342:	602f      	str	r7, [r5, #0]
 8022344:	e7b1      	b.n	80222aa <__sflush_r+0x1a>
 8022346:	89a3      	ldrh	r3, [r4, #12]
 8022348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802234c:	81a3      	strh	r3, [r4, #12]
 802234e:	e7ad      	b.n	80222ac <__sflush_r+0x1c>
 8022350:	690f      	ldr	r7, [r1, #16]
 8022352:	2f00      	cmp	r7, #0
 8022354:	d0a9      	beq.n	80222aa <__sflush_r+0x1a>
 8022356:	0793      	lsls	r3, r2, #30
 8022358:	680e      	ldr	r6, [r1, #0]
 802235a:	bf08      	it	eq
 802235c:	694b      	ldreq	r3, [r1, #20]
 802235e:	600f      	str	r7, [r1, #0]
 8022360:	bf18      	it	ne
 8022362:	2300      	movne	r3, #0
 8022364:	eba6 0807 	sub.w	r8, r6, r7
 8022368:	608b      	str	r3, [r1, #8]
 802236a:	f1b8 0f00 	cmp.w	r8, #0
 802236e:	dd9c      	ble.n	80222aa <__sflush_r+0x1a>
 8022370:	6a21      	ldr	r1, [r4, #32]
 8022372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022374:	4643      	mov	r3, r8
 8022376:	463a      	mov	r2, r7
 8022378:	4628      	mov	r0, r5
 802237a:	47b0      	blx	r6
 802237c:	2800      	cmp	r0, #0
 802237e:	dc06      	bgt.n	802238e <__sflush_r+0xfe>
 8022380:	89a3      	ldrh	r3, [r4, #12]
 8022382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022386:	81a3      	strh	r3, [r4, #12]
 8022388:	f04f 30ff 	mov.w	r0, #4294967295
 802238c:	e78e      	b.n	80222ac <__sflush_r+0x1c>
 802238e:	4407      	add	r7, r0
 8022390:	eba8 0800 	sub.w	r8, r8, r0
 8022394:	e7e9      	b.n	802236a <__sflush_r+0xda>
 8022396:	bf00      	nop
 8022398:	20400001 	.word	0x20400001

0802239c <_fflush_r>:
 802239c:	b538      	push	{r3, r4, r5, lr}
 802239e:	690b      	ldr	r3, [r1, #16]
 80223a0:	4605      	mov	r5, r0
 80223a2:	460c      	mov	r4, r1
 80223a4:	b913      	cbnz	r3, 80223ac <_fflush_r+0x10>
 80223a6:	2500      	movs	r5, #0
 80223a8:	4628      	mov	r0, r5
 80223aa:	bd38      	pop	{r3, r4, r5, pc}
 80223ac:	b118      	cbz	r0, 80223b6 <_fflush_r+0x1a>
 80223ae:	6983      	ldr	r3, [r0, #24]
 80223b0:	b90b      	cbnz	r3, 80223b6 <_fflush_r+0x1a>
 80223b2:	f000 f899 	bl	80224e8 <__sinit>
 80223b6:	4b14      	ldr	r3, [pc, #80]	; (8022408 <_fflush_r+0x6c>)
 80223b8:	429c      	cmp	r4, r3
 80223ba:	d11b      	bne.n	80223f4 <_fflush_r+0x58>
 80223bc:	686c      	ldr	r4, [r5, #4]
 80223be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d0ef      	beq.n	80223a6 <_fflush_r+0xa>
 80223c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80223c8:	07d0      	lsls	r0, r2, #31
 80223ca:	d404      	bmi.n	80223d6 <_fflush_r+0x3a>
 80223cc:	0599      	lsls	r1, r3, #22
 80223ce:	d402      	bmi.n	80223d6 <_fflush_r+0x3a>
 80223d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223d2:	f000 fc3c 	bl	8022c4e <__retarget_lock_acquire_recursive>
 80223d6:	4628      	mov	r0, r5
 80223d8:	4621      	mov	r1, r4
 80223da:	f7ff ff59 	bl	8022290 <__sflush_r>
 80223de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223e0:	07da      	lsls	r2, r3, #31
 80223e2:	4605      	mov	r5, r0
 80223e4:	d4e0      	bmi.n	80223a8 <_fflush_r+0xc>
 80223e6:	89a3      	ldrh	r3, [r4, #12]
 80223e8:	059b      	lsls	r3, r3, #22
 80223ea:	d4dd      	bmi.n	80223a8 <_fflush_r+0xc>
 80223ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223ee:	f000 fc30 	bl	8022c52 <__retarget_lock_release_recursive>
 80223f2:	e7d9      	b.n	80223a8 <_fflush_r+0xc>
 80223f4:	4b05      	ldr	r3, [pc, #20]	; (802240c <_fflush_r+0x70>)
 80223f6:	429c      	cmp	r4, r3
 80223f8:	d101      	bne.n	80223fe <_fflush_r+0x62>
 80223fa:	68ac      	ldr	r4, [r5, #8]
 80223fc:	e7df      	b.n	80223be <_fflush_r+0x22>
 80223fe:	4b04      	ldr	r3, [pc, #16]	; (8022410 <_fflush_r+0x74>)
 8022400:	429c      	cmp	r4, r3
 8022402:	bf08      	it	eq
 8022404:	68ec      	ldreq	r4, [r5, #12]
 8022406:	e7da      	b.n	80223be <_fflush_r+0x22>
 8022408:	0802ca24 	.word	0x0802ca24
 802240c:	0802ca44 	.word	0x0802ca44
 8022410:	0802ca04 	.word	0x0802ca04

08022414 <fflush>:
 8022414:	4601      	mov	r1, r0
 8022416:	b920      	cbnz	r0, 8022422 <fflush+0xe>
 8022418:	4b04      	ldr	r3, [pc, #16]	; (802242c <fflush+0x18>)
 802241a:	4905      	ldr	r1, [pc, #20]	; (8022430 <fflush+0x1c>)
 802241c:	6818      	ldr	r0, [r3, #0]
 802241e:	f000 babb 	b.w	8022998 <_fwalk_reent>
 8022422:	4b04      	ldr	r3, [pc, #16]	; (8022434 <fflush+0x20>)
 8022424:	6818      	ldr	r0, [r3, #0]
 8022426:	f7ff bfb9 	b.w	802239c <_fflush_r>
 802242a:	bf00      	nop
 802242c:	0802ca64 	.word	0x0802ca64
 8022430:	0802239d 	.word	0x0802239d
 8022434:	20000108 	.word	0x20000108

08022438 <std>:
 8022438:	2300      	movs	r3, #0
 802243a:	b510      	push	{r4, lr}
 802243c:	4604      	mov	r4, r0
 802243e:	e9c0 3300 	strd	r3, r3, [r0]
 8022442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022446:	6083      	str	r3, [r0, #8]
 8022448:	8181      	strh	r1, [r0, #12]
 802244a:	6643      	str	r3, [r0, #100]	; 0x64
 802244c:	81c2      	strh	r2, [r0, #14]
 802244e:	6183      	str	r3, [r0, #24]
 8022450:	4619      	mov	r1, r3
 8022452:	2208      	movs	r2, #8
 8022454:	305c      	adds	r0, #92	; 0x5c
 8022456:	f000 fc7f 	bl	8022d58 <memset>
 802245a:	4b05      	ldr	r3, [pc, #20]	; (8022470 <std+0x38>)
 802245c:	6263      	str	r3, [r4, #36]	; 0x24
 802245e:	4b05      	ldr	r3, [pc, #20]	; (8022474 <std+0x3c>)
 8022460:	62a3      	str	r3, [r4, #40]	; 0x28
 8022462:	4b05      	ldr	r3, [pc, #20]	; (8022478 <std+0x40>)
 8022464:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022466:	4b05      	ldr	r3, [pc, #20]	; (802247c <std+0x44>)
 8022468:	6224      	str	r4, [r4, #32]
 802246a:	6323      	str	r3, [r4, #48]	; 0x30
 802246c:	bd10      	pop	{r4, pc}
 802246e:	bf00      	nop
 8022470:	08023101 	.word	0x08023101
 8022474:	08023127 	.word	0x08023127
 8022478:	0802315f 	.word	0x0802315f
 802247c:	08023183 	.word	0x08023183

08022480 <_cleanup_r>:
 8022480:	4901      	ldr	r1, [pc, #4]	; (8022488 <_cleanup_r+0x8>)
 8022482:	f000 ba89 	b.w	8022998 <_fwalk_reent>
 8022486:	bf00      	nop
 8022488:	0802239d 	.word	0x0802239d

0802248c <__sfmoreglue>:
 802248c:	b570      	push	{r4, r5, r6, lr}
 802248e:	1e4a      	subs	r2, r1, #1
 8022490:	2568      	movs	r5, #104	; 0x68
 8022492:	4355      	muls	r5, r2
 8022494:	460e      	mov	r6, r1
 8022496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802249a:	f000 fcc5 	bl	8022e28 <_malloc_r>
 802249e:	4604      	mov	r4, r0
 80224a0:	b140      	cbz	r0, 80224b4 <__sfmoreglue+0x28>
 80224a2:	2100      	movs	r1, #0
 80224a4:	e9c0 1600 	strd	r1, r6, [r0]
 80224a8:	300c      	adds	r0, #12
 80224aa:	60a0      	str	r0, [r4, #8]
 80224ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80224b0:	f000 fc52 	bl	8022d58 <memset>
 80224b4:	4620      	mov	r0, r4
 80224b6:	bd70      	pop	{r4, r5, r6, pc}

080224b8 <__sfp_lock_acquire>:
 80224b8:	4801      	ldr	r0, [pc, #4]	; (80224c0 <__sfp_lock_acquire+0x8>)
 80224ba:	f000 bbc8 	b.w	8022c4e <__retarget_lock_acquire_recursive>
 80224be:	bf00      	nop
 80224c0:	2000112c 	.word	0x2000112c

080224c4 <__sfp_lock_release>:
 80224c4:	4801      	ldr	r0, [pc, #4]	; (80224cc <__sfp_lock_release+0x8>)
 80224c6:	f000 bbc4 	b.w	8022c52 <__retarget_lock_release_recursive>
 80224ca:	bf00      	nop
 80224cc:	2000112c 	.word	0x2000112c

080224d0 <__sinit_lock_acquire>:
 80224d0:	4801      	ldr	r0, [pc, #4]	; (80224d8 <__sinit_lock_acquire+0x8>)
 80224d2:	f000 bbbc 	b.w	8022c4e <__retarget_lock_acquire_recursive>
 80224d6:	bf00      	nop
 80224d8:	20001127 	.word	0x20001127

080224dc <__sinit_lock_release>:
 80224dc:	4801      	ldr	r0, [pc, #4]	; (80224e4 <__sinit_lock_release+0x8>)
 80224de:	f000 bbb8 	b.w	8022c52 <__retarget_lock_release_recursive>
 80224e2:	bf00      	nop
 80224e4:	20001127 	.word	0x20001127

080224e8 <__sinit>:
 80224e8:	b510      	push	{r4, lr}
 80224ea:	4604      	mov	r4, r0
 80224ec:	f7ff fff0 	bl	80224d0 <__sinit_lock_acquire>
 80224f0:	69a3      	ldr	r3, [r4, #24]
 80224f2:	b11b      	cbz	r3, 80224fc <__sinit+0x14>
 80224f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224f8:	f7ff bff0 	b.w	80224dc <__sinit_lock_release>
 80224fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022500:	6523      	str	r3, [r4, #80]	; 0x50
 8022502:	4b13      	ldr	r3, [pc, #76]	; (8022550 <__sinit+0x68>)
 8022504:	4a13      	ldr	r2, [pc, #76]	; (8022554 <__sinit+0x6c>)
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	62a2      	str	r2, [r4, #40]	; 0x28
 802250a:	42a3      	cmp	r3, r4
 802250c:	bf04      	itt	eq
 802250e:	2301      	moveq	r3, #1
 8022510:	61a3      	streq	r3, [r4, #24]
 8022512:	4620      	mov	r0, r4
 8022514:	f000 f820 	bl	8022558 <__sfp>
 8022518:	6060      	str	r0, [r4, #4]
 802251a:	4620      	mov	r0, r4
 802251c:	f000 f81c 	bl	8022558 <__sfp>
 8022520:	60a0      	str	r0, [r4, #8]
 8022522:	4620      	mov	r0, r4
 8022524:	f000 f818 	bl	8022558 <__sfp>
 8022528:	2200      	movs	r2, #0
 802252a:	60e0      	str	r0, [r4, #12]
 802252c:	2104      	movs	r1, #4
 802252e:	6860      	ldr	r0, [r4, #4]
 8022530:	f7ff ff82 	bl	8022438 <std>
 8022534:	68a0      	ldr	r0, [r4, #8]
 8022536:	2201      	movs	r2, #1
 8022538:	2109      	movs	r1, #9
 802253a:	f7ff ff7d 	bl	8022438 <std>
 802253e:	68e0      	ldr	r0, [r4, #12]
 8022540:	2202      	movs	r2, #2
 8022542:	2112      	movs	r1, #18
 8022544:	f7ff ff78 	bl	8022438 <std>
 8022548:	2301      	movs	r3, #1
 802254a:	61a3      	str	r3, [r4, #24]
 802254c:	e7d2      	b.n	80224f4 <__sinit+0xc>
 802254e:	bf00      	nop
 8022550:	0802ca64 	.word	0x0802ca64
 8022554:	08022481 	.word	0x08022481

08022558 <__sfp>:
 8022558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802255a:	4607      	mov	r7, r0
 802255c:	f7ff ffac 	bl	80224b8 <__sfp_lock_acquire>
 8022560:	4b1e      	ldr	r3, [pc, #120]	; (80225dc <__sfp+0x84>)
 8022562:	681e      	ldr	r6, [r3, #0]
 8022564:	69b3      	ldr	r3, [r6, #24]
 8022566:	b913      	cbnz	r3, 802256e <__sfp+0x16>
 8022568:	4630      	mov	r0, r6
 802256a:	f7ff ffbd 	bl	80224e8 <__sinit>
 802256e:	3648      	adds	r6, #72	; 0x48
 8022570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022574:	3b01      	subs	r3, #1
 8022576:	d503      	bpl.n	8022580 <__sfp+0x28>
 8022578:	6833      	ldr	r3, [r6, #0]
 802257a:	b30b      	cbz	r3, 80225c0 <__sfp+0x68>
 802257c:	6836      	ldr	r6, [r6, #0]
 802257e:	e7f7      	b.n	8022570 <__sfp+0x18>
 8022580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022584:	b9d5      	cbnz	r5, 80225bc <__sfp+0x64>
 8022586:	4b16      	ldr	r3, [pc, #88]	; (80225e0 <__sfp+0x88>)
 8022588:	60e3      	str	r3, [r4, #12]
 802258a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802258e:	6665      	str	r5, [r4, #100]	; 0x64
 8022590:	f000 fb5a 	bl	8022c48 <__retarget_lock_init_recursive>
 8022594:	f7ff ff96 	bl	80224c4 <__sfp_lock_release>
 8022598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802259c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80225a0:	6025      	str	r5, [r4, #0]
 80225a2:	61a5      	str	r5, [r4, #24]
 80225a4:	2208      	movs	r2, #8
 80225a6:	4629      	mov	r1, r5
 80225a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80225ac:	f000 fbd4 	bl	8022d58 <memset>
 80225b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80225b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80225b8:	4620      	mov	r0, r4
 80225ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80225bc:	3468      	adds	r4, #104	; 0x68
 80225be:	e7d9      	b.n	8022574 <__sfp+0x1c>
 80225c0:	2104      	movs	r1, #4
 80225c2:	4638      	mov	r0, r7
 80225c4:	f7ff ff62 	bl	802248c <__sfmoreglue>
 80225c8:	4604      	mov	r4, r0
 80225ca:	6030      	str	r0, [r6, #0]
 80225cc:	2800      	cmp	r0, #0
 80225ce:	d1d5      	bne.n	802257c <__sfp+0x24>
 80225d0:	f7ff ff78 	bl	80224c4 <__sfp_lock_release>
 80225d4:	230c      	movs	r3, #12
 80225d6:	603b      	str	r3, [r7, #0]
 80225d8:	e7ee      	b.n	80225b8 <__sfp+0x60>
 80225da:	bf00      	nop
 80225dc:	0802ca64 	.word	0x0802ca64
 80225e0:	ffff0001 	.word	0xffff0001

080225e4 <_fopen_r>:
 80225e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80225e6:	460f      	mov	r7, r1
 80225e8:	4611      	mov	r1, r2
 80225ea:	aa01      	add	r2, sp, #4
 80225ec:	4605      	mov	r5, r0
 80225ee:	f002 f837 	bl	8024660 <__sflags>
 80225f2:	4606      	mov	r6, r0
 80225f4:	b918      	cbnz	r0, 80225fe <_fopen_r+0x1a>
 80225f6:	2400      	movs	r4, #0
 80225f8:	4620      	mov	r0, r4
 80225fa:	b003      	add	sp, #12
 80225fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225fe:	4628      	mov	r0, r5
 8022600:	f7ff ffaa 	bl	8022558 <__sfp>
 8022604:	4604      	mov	r4, r0
 8022606:	2800      	cmp	r0, #0
 8022608:	d0f5      	beq.n	80225f6 <_fopen_r+0x12>
 802260a:	4639      	mov	r1, r7
 802260c:	9a01      	ldr	r2, [sp, #4]
 802260e:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8022612:	4628      	mov	r0, r5
 8022614:	f000 fc62 	bl	8022edc <_open_r>
 8022618:	1e07      	subs	r7, r0, #0
 802261a:	da09      	bge.n	8022630 <_fopen_r+0x4c>
 802261c:	2500      	movs	r5, #0
 802261e:	f7ff ff4b 	bl	80224b8 <__sfp_lock_acquire>
 8022622:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022624:	81a5      	strh	r5, [r4, #12]
 8022626:	f000 fb10 	bl	8022c4a <__retarget_lock_close_recursive>
 802262a:	f7ff ff4b 	bl	80224c4 <__sfp_lock_release>
 802262e:	e7e2      	b.n	80225f6 <_fopen_r+0x12>
 8022630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022632:	07db      	lsls	r3, r3, #31
 8022634:	d405      	bmi.n	8022642 <_fopen_r+0x5e>
 8022636:	89a3      	ldrh	r3, [r4, #12]
 8022638:	0598      	lsls	r0, r3, #22
 802263a:	d402      	bmi.n	8022642 <_fopen_r+0x5e>
 802263c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802263e:	f000 fb06 	bl	8022c4e <__retarget_lock_acquire_recursive>
 8022642:	4b0e      	ldr	r3, [pc, #56]	; (802267c <_fopen_r+0x98>)
 8022644:	6263      	str	r3, [r4, #36]	; 0x24
 8022646:	4b0e      	ldr	r3, [pc, #56]	; (8022680 <_fopen_r+0x9c>)
 8022648:	62a3      	str	r3, [r4, #40]	; 0x28
 802264a:	4b0e      	ldr	r3, [pc, #56]	; (8022684 <_fopen_r+0xa0>)
 802264c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802264e:	05f1      	lsls	r1, r6, #23
 8022650:	4b0d      	ldr	r3, [pc, #52]	; (8022688 <_fopen_r+0xa4>)
 8022652:	81e7      	strh	r7, [r4, #14]
 8022654:	81a6      	strh	r6, [r4, #12]
 8022656:	6224      	str	r4, [r4, #32]
 8022658:	6323      	str	r3, [r4, #48]	; 0x30
 802265a:	d505      	bpl.n	8022668 <_fopen_r+0x84>
 802265c:	2302      	movs	r3, #2
 802265e:	2200      	movs	r2, #0
 8022660:	4621      	mov	r1, r4
 8022662:	4628      	mov	r0, r5
 8022664:	f000 f888 	bl	8022778 <_fseek_r>
 8022668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802266a:	07da      	lsls	r2, r3, #31
 802266c:	d4c4      	bmi.n	80225f8 <_fopen_r+0x14>
 802266e:	89a3      	ldrh	r3, [r4, #12]
 8022670:	059b      	lsls	r3, r3, #22
 8022672:	d4c1      	bmi.n	80225f8 <_fopen_r+0x14>
 8022674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022676:	f000 faec 	bl	8022c52 <__retarget_lock_release_recursive>
 802267a:	e7bd      	b.n	80225f8 <_fopen_r+0x14>
 802267c:	08023101 	.word	0x08023101
 8022680:	08023127 	.word	0x08023127
 8022684:	0802315f 	.word	0x0802315f
 8022688:	08023183 	.word	0x08023183

0802268c <fopen>:
 802268c:	4b02      	ldr	r3, [pc, #8]	; (8022698 <fopen+0xc>)
 802268e:	460a      	mov	r2, r1
 8022690:	4601      	mov	r1, r0
 8022692:	6818      	ldr	r0, [r3, #0]
 8022694:	f7ff bfa6 	b.w	80225e4 <_fopen_r>
 8022698:	20000108 	.word	0x20000108

0802269c <_fputs_r>:
 802269c:	b570      	push	{r4, r5, r6, lr}
 802269e:	460e      	mov	r6, r1
 80226a0:	4614      	mov	r4, r2
 80226a2:	4605      	mov	r5, r0
 80226a4:	b118      	cbz	r0, 80226ae <_fputs_r+0x12>
 80226a6:	6983      	ldr	r3, [r0, #24]
 80226a8:	b90b      	cbnz	r3, 80226ae <_fputs_r+0x12>
 80226aa:	f7ff ff1d 	bl	80224e8 <__sinit>
 80226ae:	4b2b      	ldr	r3, [pc, #172]	; (802275c <_fputs_r+0xc0>)
 80226b0:	429c      	cmp	r4, r3
 80226b2:	d11e      	bne.n	80226f2 <_fputs_r+0x56>
 80226b4:	686c      	ldr	r4, [r5, #4]
 80226b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226b8:	07da      	lsls	r2, r3, #31
 80226ba:	d405      	bmi.n	80226c8 <_fputs_r+0x2c>
 80226bc:	89a3      	ldrh	r3, [r4, #12]
 80226be:	059b      	lsls	r3, r3, #22
 80226c0:	d402      	bmi.n	80226c8 <_fputs_r+0x2c>
 80226c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226c4:	f000 fac3 	bl	8022c4e <__retarget_lock_acquire_recursive>
 80226c8:	89a3      	ldrh	r3, [r4, #12]
 80226ca:	0718      	lsls	r0, r3, #28
 80226cc:	d51b      	bpl.n	8022706 <_fputs_r+0x6a>
 80226ce:	6923      	ldr	r3, [r4, #16]
 80226d0:	b1cb      	cbz	r3, 8022706 <_fputs_r+0x6a>
 80226d2:	3e01      	subs	r6, #1
 80226d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80226d8:	bb39      	cbnz	r1, 802272a <_fputs_r+0x8e>
 80226da:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80226dc:	f015 0501 	ands.w	r5, r5, #1
 80226e0:	d139      	bne.n	8022756 <_fputs_r+0xba>
 80226e2:	89a3      	ldrh	r3, [r4, #12]
 80226e4:	0599      	lsls	r1, r3, #22
 80226e6:	d402      	bmi.n	80226ee <_fputs_r+0x52>
 80226e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226ea:	f000 fab2 	bl	8022c52 <__retarget_lock_release_recursive>
 80226ee:	4628      	mov	r0, r5
 80226f0:	bd70      	pop	{r4, r5, r6, pc}
 80226f2:	4b1b      	ldr	r3, [pc, #108]	; (8022760 <_fputs_r+0xc4>)
 80226f4:	429c      	cmp	r4, r3
 80226f6:	d101      	bne.n	80226fc <_fputs_r+0x60>
 80226f8:	68ac      	ldr	r4, [r5, #8]
 80226fa:	e7dc      	b.n	80226b6 <_fputs_r+0x1a>
 80226fc:	4b19      	ldr	r3, [pc, #100]	; (8022764 <_fputs_r+0xc8>)
 80226fe:	429c      	cmp	r4, r3
 8022700:	bf08      	it	eq
 8022702:	68ec      	ldreq	r4, [r5, #12]
 8022704:	e7d7      	b.n	80226b6 <_fputs_r+0x1a>
 8022706:	4621      	mov	r1, r4
 8022708:	4628      	mov	r0, r5
 802270a:	f001 fea7 	bl	802445c <__swsetup_r>
 802270e:	2800      	cmp	r0, #0
 8022710:	d0df      	beq.n	80226d2 <_fputs_r+0x36>
 8022712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022714:	07da      	lsls	r2, r3, #31
 8022716:	d405      	bmi.n	8022724 <_fputs_r+0x88>
 8022718:	89a3      	ldrh	r3, [r4, #12]
 802271a:	059b      	lsls	r3, r3, #22
 802271c:	d402      	bmi.n	8022724 <_fputs_r+0x88>
 802271e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022720:	f000 fa97 	bl	8022c52 <__retarget_lock_release_recursive>
 8022724:	f04f 35ff 	mov.w	r5, #4294967295
 8022728:	e7e1      	b.n	80226ee <_fputs_r+0x52>
 802272a:	68a3      	ldr	r3, [r4, #8]
 802272c:	3b01      	subs	r3, #1
 802272e:	2b00      	cmp	r3, #0
 8022730:	60a3      	str	r3, [r4, #8]
 8022732:	da04      	bge.n	802273e <_fputs_r+0xa2>
 8022734:	69a2      	ldr	r2, [r4, #24]
 8022736:	4293      	cmp	r3, r2
 8022738:	db06      	blt.n	8022748 <_fputs_r+0xac>
 802273a:	290a      	cmp	r1, #10
 802273c:	d004      	beq.n	8022748 <_fputs_r+0xac>
 802273e:	6823      	ldr	r3, [r4, #0]
 8022740:	1c5a      	adds	r2, r3, #1
 8022742:	6022      	str	r2, [r4, #0]
 8022744:	7019      	strb	r1, [r3, #0]
 8022746:	e7c5      	b.n	80226d4 <_fputs_r+0x38>
 8022748:	4622      	mov	r2, r4
 802274a:	4628      	mov	r0, r5
 802274c:	f001 fe22 	bl	8024394 <__swbuf_r>
 8022750:	3001      	adds	r0, #1
 8022752:	d1bf      	bne.n	80226d4 <_fputs_r+0x38>
 8022754:	e7dd      	b.n	8022712 <_fputs_r+0x76>
 8022756:	460d      	mov	r5, r1
 8022758:	e7c9      	b.n	80226ee <_fputs_r+0x52>
 802275a:	bf00      	nop
 802275c:	0802ca24 	.word	0x0802ca24
 8022760:	0802ca44 	.word	0x0802ca44
 8022764:	0802ca04 	.word	0x0802ca04

08022768 <fputs>:
 8022768:	4b02      	ldr	r3, [pc, #8]	; (8022774 <fputs+0xc>)
 802276a:	460a      	mov	r2, r1
 802276c:	4601      	mov	r1, r0
 802276e:	6818      	ldr	r0, [r3, #0]
 8022770:	f7ff bf94 	b.w	802269c <_fputs_r>
 8022774:	20000108 	.word	0x20000108

08022778 <_fseek_r>:
 8022778:	f000 b800 	b.w	802277c <_fseeko_r>

0802277c <_fseeko_r>:
 802277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022780:	460c      	mov	r4, r1
 8022782:	4617      	mov	r7, r2
 8022784:	461e      	mov	r6, r3
 8022786:	4605      	mov	r5, r0
 8022788:	b118      	cbz	r0, 8022792 <_fseeko_r+0x16>
 802278a:	6983      	ldr	r3, [r0, #24]
 802278c:	b90b      	cbnz	r3, 8022792 <_fseeko_r+0x16>
 802278e:	f7ff feab 	bl	80224e8 <__sinit>
 8022792:	4b44      	ldr	r3, [pc, #272]	; (80228a4 <_fseeko_r+0x128>)
 8022794:	429c      	cmp	r4, r3
 8022796:	d122      	bne.n	80227de <_fseeko_r+0x62>
 8022798:	686c      	ldr	r4, [r5, #4]
 802279a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802279c:	07d9      	lsls	r1, r3, #31
 802279e:	d405      	bmi.n	80227ac <_fseeko_r+0x30>
 80227a0:	89a3      	ldrh	r3, [r4, #12]
 80227a2:	059a      	lsls	r2, r3, #22
 80227a4:	d402      	bmi.n	80227ac <_fseeko_r+0x30>
 80227a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227a8:	f000 fa51 	bl	8022c4e <__retarget_lock_acquire_recursive>
 80227ac:	89a3      	ldrh	r3, [r4, #12]
 80227ae:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80227b2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80227b6:	d103      	bne.n	80227c0 <_fseeko_r+0x44>
 80227b8:	4621      	mov	r1, r4
 80227ba:	4628      	mov	r0, r5
 80227bc:	f7ff fdee 	bl	802239c <_fflush_r>
 80227c0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80227c4:	f1b8 0f00 	cmp.w	r8, #0
 80227c8:	d113      	bne.n	80227f2 <_fseeko_r+0x76>
 80227ca:	231d      	movs	r3, #29
 80227cc:	602b      	str	r3, [r5, #0]
 80227ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227d0:	07d9      	lsls	r1, r3, #31
 80227d2:	d55d      	bpl.n	8022890 <_fseeko_r+0x114>
 80227d4:	f04f 36ff 	mov.w	r6, #4294967295
 80227d8:	4630      	mov	r0, r6
 80227da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227de:	4b32      	ldr	r3, [pc, #200]	; (80228a8 <_fseeko_r+0x12c>)
 80227e0:	429c      	cmp	r4, r3
 80227e2:	d101      	bne.n	80227e8 <_fseeko_r+0x6c>
 80227e4:	68ac      	ldr	r4, [r5, #8]
 80227e6:	e7d8      	b.n	802279a <_fseeko_r+0x1e>
 80227e8:	4b30      	ldr	r3, [pc, #192]	; (80228ac <_fseeko_r+0x130>)
 80227ea:	429c      	cmp	r4, r3
 80227ec:	bf08      	it	eq
 80227ee:	68ec      	ldreq	r4, [r5, #12]
 80227f0:	e7d3      	b.n	802279a <_fseeko_r+0x1e>
 80227f2:	2e01      	cmp	r6, #1
 80227f4:	d036      	beq.n	8022864 <_fseeko_r+0xe8>
 80227f6:	f036 0302 	bics.w	r3, r6, #2
 80227fa:	d147      	bne.n	802288c <_fseeko_r+0x110>
 80227fc:	6923      	ldr	r3, [r4, #16]
 80227fe:	b91b      	cbnz	r3, 8022808 <_fseeko_r+0x8c>
 8022800:	4621      	mov	r1, r4
 8022802:	4628      	mov	r0, r5
 8022804:	f000 fa4a 	bl	8022c9c <__smakebuf_r>
 8022808:	4621      	mov	r1, r4
 802280a:	4628      	mov	r0, r5
 802280c:	f7ff fdc6 	bl	802239c <_fflush_r>
 8022810:	2800      	cmp	r0, #0
 8022812:	d1dc      	bne.n	80227ce <_fseeko_r+0x52>
 8022814:	6a21      	ldr	r1, [r4, #32]
 8022816:	4633      	mov	r3, r6
 8022818:	463a      	mov	r2, r7
 802281a:	4628      	mov	r0, r5
 802281c:	47c0      	blx	r8
 802281e:	3001      	adds	r0, #1
 8022820:	d0d5      	beq.n	80227ce <_fseeko_r+0x52>
 8022822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022824:	b141      	cbz	r1, 8022838 <_fseeko_r+0xbc>
 8022826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802282a:	4299      	cmp	r1, r3
 802282c:	d002      	beq.n	8022834 <_fseeko_r+0xb8>
 802282e:	4628      	mov	r0, r5
 8022830:	f000 faaa 	bl	8022d88 <_free_r>
 8022834:	2300      	movs	r3, #0
 8022836:	6363      	str	r3, [r4, #52]	; 0x34
 8022838:	6923      	ldr	r3, [r4, #16]
 802283a:	6023      	str	r3, [r4, #0]
 802283c:	89a3      	ldrh	r3, [r4, #12]
 802283e:	2500      	movs	r5, #0
 8022840:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8022844:	6065      	str	r5, [r4, #4]
 8022846:	81a3      	strh	r3, [r4, #12]
 8022848:	2208      	movs	r2, #8
 802284a:	4629      	mov	r1, r5
 802284c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022850:	f000 fa82 	bl	8022d58 <memset>
 8022854:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8022856:	f016 0601 	ands.w	r6, r6, #1
 802285a:	d120      	bne.n	802289e <_fseeko_r+0x122>
 802285c:	89a3      	ldrh	r3, [r4, #12]
 802285e:	059b      	lsls	r3, r3, #22
 8022860:	d4ba      	bmi.n	80227d8 <_fseeko_r+0x5c>
 8022862:	e00c      	b.n	802287e <_fseeko_r+0x102>
 8022864:	4621      	mov	r1, r4
 8022866:	4628      	mov	r0, r5
 8022868:	f000 f822 	bl	80228b0 <_ftello_r>
 802286c:	1c43      	adds	r3, r0, #1
 802286e:	4606      	mov	r6, r0
 8022870:	d109      	bne.n	8022886 <_fseeko_r+0x10a>
 8022872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022874:	07dd      	lsls	r5, r3, #31
 8022876:	d4ad      	bmi.n	80227d4 <_fseeko_r+0x58>
 8022878:	89a3      	ldrh	r3, [r4, #12]
 802287a:	0598      	lsls	r0, r3, #22
 802287c:	d4aa      	bmi.n	80227d4 <_fseeko_r+0x58>
 802287e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022880:	f000 f9e7 	bl	8022c52 <__retarget_lock_release_recursive>
 8022884:	e7a8      	b.n	80227d8 <_fseeko_r+0x5c>
 8022886:	4407      	add	r7, r0
 8022888:	2600      	movs	r6, #0
 802288a:	e7b7      	b.n	80227fc <_fseeko_r+0x80>
 802288c:	2316      	movs	r3, #22
 802288e:	e79d      	b.n	80227cc <_fseeko_r+0x50>
 8022890:	89a3      	ldrh	r3, [r4, #12]
 8022892:	059a      	lsls	r2, r3, #22
 8022894:	d49e      	bmi.n	80227d4 <_fseeko_r+0x58>
 8022896:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022898:	f000 f9db 	bl	8022c52 <__retarget_lock_release_recursive>
 802289c:	e79a      	b.n	80227d4 <_fseeko_r+0x58>
 802289e:	462e      	mov	r6, r5
 80228a0:	e79a      	b.n	80227d8 <_fseeko_r+0x5c>
 80228a2:	bf00      	nop
 80228a4:	0802ca24 	.word	0x0802ca24
 80228a8:	0802ca44 	.word	0x0802ca44
 80228ac:	0802ca04 	.word	0x0802ca04

080228b0 <_ftello_r>:
 80228b0:	b570      	push	{r4, r5, r6, lr}
 80228b2:	460c      	mov	r4, r1
 80228b4:	4605      	mov	r5, r0
 80228b6:	b118      	cbz	r0, 80228c0 <_ftello_r+0x10>
 80228b8:	6983      	ldr	r3, [r0, #24]
 80228ba:	b90b      	cbnz	r3, 80228c0 <_ftello_r+0x10>
 80228bc:	f7ff fe14 	bl	80224e8 <__sinit>
 80228c0:	4b32      	ldr	r3, [pc, #200]	; (802298c <_ftello_r+0xdc>)
 80228c2:	429c      	cmp	r4, r3
 80228c4:	d114      	bne.n	80228f0 <_ftello_r+0x40>
 80228c6:	686c      	ldr	r4, [r5, #4]
 80228c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80228ca:	07da      	lsls	r2, r3, #31
 80228cc:	d405      	bmi.n	80228da <_ftello_r+0x2a>
 80228ce:	89a3      	ldrh	r3, [r4, #12]
 80228d0:	059b      	lsls	r3, r3, #22
 80228d2:	d402      	bmi.n	80228da <_ftello_r+0x2a>
 80228d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80228d6:	f000 f9ba 	bl	8022c4e <__retarget_lock_acquire_recursive>
 80228da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80228dc:	b9ce      	cbnz	r6, 8022912 <_ftello_r+0x62>
 80228de:	231d      	movs	r3, #29
 80228e0:	602b      	str	r3, [r5, #0]
 80228e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80228e4:	07de      	lsls	r6, r3, #31
 80228e6:	d50d      	bpl.n	8022904 <_ftello_r+0x54>
 80228e8:	f04f 35ff 	mov.w	r5, #4294967295
 80228ec:	4628      	mov	r0, r5
 80228ee:	bd70      	pop	{r4, r5, r6, pc}
 80228f0:	4b27      	ldr	r3, [pc, #156]	; (8022990 <_ftello_r+0xe0>)
 80228f2:	429c      	cmp	r4, r3
 80228f4:	d101      	bne.n	80228fa <_ftello_r+0x4a>
 80228f6:	68ac      	ldr	r4, [r5, #8]
 80228f8:	e7e6      	b.n	80228c8 <_ftello_r+0x18>
 80228fa:	4b26      	ldr	r3, [pc, #152]	; (8022994 <_ftello_r+0xe4>)
 80228fc:	429c      	cmp	r4, r3
 80228fe:	bf08      	it	eq
 8022900:	68ec      	ldreq	r4, [r5, #12]
 8022902:	e7e1      	b.n	80228c8 <_ftello_r+0x18>
 8022904:	89a3      	ldrh	r3, [r4, #12]
 8022906:	059d      	lsls	r5, r3, #22
 8022908:	d4ee      	bmi.n	80228e8 <_ftello_r+0x38>
 802290a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802290c:	f000 f9a1 	bl	8022c52 <__retarget_lock_release_recursive>
 8022910:	e7ea      	b.n	80228e8 <_ftello_r+0x38>
 8022912:	89a2      	ldrh	r2, [r4, #12]
 8022914:	f002 030c 	and.w	r3, r2, #12
 8022918:	2b08      	cmp	r3, #8
 802291a:	d119      	bne.n	8022950 <_ftello_r+0xa0>
 802291c:	6823      	ldr	r3, [r4, #0]
 802291e:	b1bb      	cbz	r3, 8022950 <_ftello_r+0xa0>
 8022920:	6921      	ldr	r1, [r4, #16]
 8022922:	1a5b      	subs	r3, r3, r1
 8022924:	2b00      	cmp	r3, #0
 8022926:	dd13      	ble.n	8022950 <_ftello_r+0xa0>
 8022928:	05d0      	lsls	r0, r2, #23
 802292a:	d511      	bpl.n	8022950 <_ftello_r+0xa0>
 802292c:	2302      	movs	r3, #2
 802292e:	2200      	movs	r2, #0
 8022930:	6a21      	ldr	r1, [r4, #32]
 8022932:	4628      	mov	r0, r5
 8022934:	47b0      	blx	r6
 8022936:	1c41      	adds	r1, r0, #1
 8022938:	4605      	mov	r5, r0
 802293a:	d10d      	bne.n	8022958 <_ftello_r+0xa8>
 802293c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802293e:	07da      	lsls	r2, r3, #31
 8022940:	d4d2      	bmi.n	80228e8 <_ftello_r+0x38>
 8022942:	89a3      	ldrh	r3, [r4, #12]
 8022944:	059b      	lsls	r3, r3, #22
 8022946:	d4cf      	bmi.n	80228e8 <_ftello_r+0x38>
 8022948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802294a:	f000 f982 	bl	8022c52 <__retarget_lock_release_recursive>
 802294e:	e7cd      	b.n	80228ec <_ftello_r+0x3c>
 8022950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022954:	d00f      	beq.n	8022976 <_ftello_r+0xc6>
 8022956:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8022958:	89a2      	ldrh	r2, [r4, #12]
 802295a:	0756      	lsls	r6, r2, #29
 802295c:	d50d      	bpl.n	802297a <_ftello_r+0xca>
 802295e:	6863      	ldr	r3, [r4, #4]
 8022960:	1aed      	subs	r5, r5, r3
 8022962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022964:	b10b      	cbz	r3, 802296a <_ftello_r+0xba>
 8022966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022968:	1aed      	subs	r5, r5, r3
 802296a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802296c:	07d9      	lsls	r1, r3, #31
 802296e:	d4bd      	bmi.n	80228ec <_ftello_r+0x3c>
 8022970:	0593      	lsls	r3, r2, #22
 8022972:	d4bb      	bmi.n	80228ec <_ftello_r+0x3c>
 8022974:	e7e8      	b.n	8022948 <_ftello_r+0x98>
 8022976:	2301      	movs	r3, #1
 8022978:	e7da      	b.n	8022930 <_ftello_r+0x80>
 802297a:	0710      	lsls	r0, r2, #28
 802297c:	d5f5      	bpl.n	802296a <_ftello_r+0xba>
 802297e:	6823      	ldr	r3, [r4, #0]
 8022980:	2b00      	cmp	r3, #0
 8022982:	d0f2      	beq.n	802296a <_ftello_r+0xba>
 8022984:	6921      	ldr	r1, [r4, #16]
 8022986:	1a5b      	subs	r3, r3, r1
 8022988:	441d      	add	r5, r3
 802298a:	e7ee      	b.n	802296a <_ftello_r+0xba>
 802298c:	0802ca24 	.word	0x0802ca24
 8022990:	0802ca44 	.word	0x0802ca44
 8022994:	0802ca04 	.word	0x0802ca04

08022998 <_fwalk_reent>:
 8022998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802299c:	4606      	mov	r6, r0
 802299e:	4688      	mov	r8, r1
 80229a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80229a4:	2700      	movs	r7, #0
 80229a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80229aa:	f1b9 0901 	subs.w	r9, r9, #1
 80229ae:	d505      	bpl.n	80229bc <_fwalk_reent+0x24>
 80229b0:	6824      	ldr	r4, [r4, #0]
 80229b2:	2c00      	cmp	r4, #0
 80229b4:	d1f7      	bne.n	80229a6 <_fwalk_reent+0xe>
 80229b6:	4638      	mov	r0, r7
 80229b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80229bc:	89ab      	ldrh	r3, [r5, #12]
 80229be:	2b01      	cmp	r3, #1
 80229c0:	d907      	bls.n	80229d2 <_fwalk_reent+0x3a>
 80229c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80229c6:	3301      	adds	r3, #1
 80229c8:	d003      	beq.n	80229d2 <_fwalk_reent+0x3a>
 80229ca:	4629      	mov	r1, r5
 80229cc:	4630      	mov	r0, r6
 80229ce:	47c0      	blx	r8
 80229d0:	4307      	orrs	r7, r0
 80229d2:	3568      	adds	r5, #104	; 0x68
 80229d4:	e7e9      	b.n	80229aa <_fwalk_reent+0x12>
	...

080229d8 <__libc_init_array>:
 80229d8:	b570      	push	{r4, r5, r6, lr}
 80229da:	4d0d      	ldr	r5, [pc, #52]	; (8022a10 <__libc_init_array+0x38>)
 80229dc:	4c0d      	ldr	r4, [pc, #52]	; (8022a14 <__libc_init_array+0x3c>)
 80229de:	1b64      	subs	r4, r4, r5
 80229e0:	10a4      	asrs	r4, r4, #2
 80229e2:	2600      	movs	r6, #0
 80229e4:	42a6      	cmp	r6, r4
 80229e6:	d109      	bne.n	80229fc <__libc_init_array+0x24>
 80229e8:	4d0b      	ldr	r5, [pc, #44]	; (8022a18 <__libc_init_array+0x40>)
 80229ea:	4c0c      	ldr	r4, [pc, #48]	; (8022a1c <__libc_init_array+0x44>)
 80229ec:	f003 f8d6 	bl	8025b9c <_init>
 80229f0:	1b64      	subs	r4, r4, r5
 80229f2:	10a4      	asrs	r4, r4, #2
 80229f4:	2600      	movs	r6, #0
 80229f6:	42a6      	cmp	r6, r4
 80229f8:	d105      	bne.n	8022a06 <__libc_init_array+0x2e>
 80229fa:	bd70      	pop	{r4, r5, r6, pc}
 80229fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022a00:	4798      	blx	r3
 8022a02:	3601      	adds	r6, #1
 8022a04:	e7ee      	b.n	80229e4 <__libc_init_array+0xc>
 8022a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8022a0a:	4798      	blx	r3
 8022a0c:	3601      	adds	r6, #1
 8022a0e:	e7f2      	b.n	80229f6 <__libc_init_array+0x1e>
 8022a10:	0802cffc 	.word	0x0802cffc
 8022a14:	0802cffc 	.word	0x0802cffc
 8022a18:	0802cffc 	.word	0x0802cffc
 8022a1c:	0802d010 	.word	0x0802d010

08022a20 <localtime>:
 8022a20:	b538      	push	{r3, r4, r5, lr}
 8022a22:	4b0b      	ldr	r3, [pc, #44]	; (8022a50 <localtime+0x30>)
 8022a24:	681d      	ldr	r5, [r3, #0]
 8022a26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8022a28:	4604      	mov	r4, r0
 8022a2a:	b953      	cbnz	r3, 8022a42 <localtime+0x22>
 8022a2c:	2024      	movs	r0, #36	; 0x24
 8022a2e:	f000 f975 	bl	8022d1c <malloc>
 8022a32:	4602      	mov	r2, r0
 8022a34:	63e8      	str	r0, [r5, #60]	; 0x3c
 8022a36:	b920      	cbnz	r0, 8022a42 <localtime+0x22>
 8022a38:	4b06      	ldr	r3, [pc, #24]	; (8022a54 <localtime+0x34>)
 8022a3a:	4807      	ldr	r0, [pc, #28]	; (8022a58 <localtime+0x38>)
 8022a3c:	2132      	movs	r1, #50	; 0x32
 8022a3e:	f001 fde1 	bl	8024604 <__assert_func>
 8022a42:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8022a44:	4620      	mov	r0, r4
 8022a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022a4a:	f000 b807 	b.w	8022a5c <localtime_r>
 8022a4e:	bf00      	nop
 8022a50:	20000108 	.word	0x20000108
 8022a54:	0802ca68 	.word	0x0802ca68
 8022a58:	0802ca7f 	.word	0x0802ca7f

08022a5c <localtime_r>:
 8022a5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022a60:	4607      	mov	r7, r0
 8022a62:	9101      	str	r1, [sp, #4]
 8022a64:	f001 fe98 	bl	8024798 <__gettzinfo>
 8022a68:	9901      	ldr	r1, [sp, #4]
 8022a6a:	4680      	mov	r8, r0
 8022a6c:	4638      	mov	r0, r7
 8022a6e:	f001 fe97 	bl	80247a0 <gmtime_r>
 8022a72:	6943      	ldr	r3, [r0, #20]
 8022a74:	079a      	lsls	r2, r3, #30
 8022a76:	4604      	mov	r4, r0
 8022a78:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8022a7c:	d105      	bne.n	8022a8a <localtime_r+0x2e>
 8022a7e:	2264      	movs	r2, #100	; 0x64
 8022a80:	fb96 f3f2 	sdiv	r3, r6, r2
 8022a84:	fb02 6313 	mls	r3, r2, r3, r6
 8022a88:	bb7b      	cbnz	r3, 8022aea <localtime_r+0x8e>
 8022a8a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022a8e:	fb96 f5f3 	sdiv	r5, r6, r3
 8022a92:	fb03 6515 	mls	r5, r3, r5, r6
 8022a96:	fab5 f585 	clz	r5, r5
 8022a9a:	096d      	lsrs	r5, r5, #5
 8022a9c:	4b68      	ldr	r3, [pc, #416]	; (8022c40 <localtime_r+0x1e4>)
 8022a9e:	2230      	movs	r2, #48	; 0x30
 8022aa0:	fb02 3505 	mla	r5, r2, r5, r3
 8022aa4:	f001 faae 	bl	8024004 <__tz_lock>
 8022aa8:	f001 fab8 	bl	802401c <_tzset_unlocked>
 8022aac:	4b65      	ldr	r3, [pc, #404]	; (8022c44 <localtime_r+0x1e8>)
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	b353      	cbz	r3, 8022b08 <localtime_r+0xac>
 8022ab2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022ab6:	42b3      	cmp	r3, r6
 8022ab8:	d119      	bne.n	8022aee <localtime_r+0x92>
 8022aba:	f8d8 1000 	ldr.w	r1, [r8]
 8022abe:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022ac2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8022ac6:	b9d1      	cbnz	r1, 8022afe <localtime_r+0xa2>
 8022ac8:	4296      	cmp	r6, r2
 8022aca:	eb77 0303 	sbcs.w	r3, r7, r3
 8022ace:	da23      	bge.n	8022b18 <localtime_r+0xbc>
 8022ad0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8022ad4:	4296      	cmp	r6, r2
 8022ad6:	eb77 0303 	sbcs.w	r3, r7, r3
 8022ada:	bfb4      	ite	lt
 8022adc:	2301      	movlt	r3, #1
 8022ade:	2300      	movge	r3, #0
 8022ae0:	6223      	str	r3, [r4, #32]
 8022ae2:	db1b      	blt.n	8022b1c <localtime_r+0xc0>
 8022ae4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8022ae8:	e01a      	b.n	8022b20 <localtime_r+0xc4>
 8022aea:	2501      	movs	r5, #1
 8022aec:	e7d6      	b.n	8022a9c <localtime_r+0x40>
 8022aee:	4630      	mov	r0, r6
 8022af0:	f001 f9e0 	bl	8023eb4 <__tzcalc_limits>
 8022af4:	2800      	cmp	r0, #0
 8022af6:	d1e0      	bne.n	8022aba <localtime_r+0x5e>
 8022af8:	f04f 33ff 	mov.w	r3, #4294967295
 8022afc:	e004      	b.n	8022b08 <localtime_r+0xac>
 8022afe:	4296      	cmp	r6, r2
 8022b00:	eb77 0303 	sbcs.w	r3, r7, r3
 8022b04:	da02      	bge.n	8022b0c <localtime_r+0xb0>
 8022b06:	2300      	movs	r3, #0
 8022b08:	6223      	str	r3, [r4, #32]
 8022b0a:	e7eb      	b.n	8022ae4 <localtime_r+0x88>
 8022b0c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8022b10:	4296      	cmp	r6, r2
 8022b12:	eb77 0303 	sbcs.w	r3, r7, r3
 8022b16:	daf6      	bge.n	8022b06 <localtime_r+0xaa>
 8022b18:	2301      	movs	r3, #1
 8022b1a:	6223      	str	r3, [r4, #32]
 8022b1c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8022b20:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8022b24:	203c      	movs	r0, #60	; 0x3c
 8022b26:	fb91 f6f3 	sdiv	r6, r1, r3
 8022b2a:	fb03 1316 	mls	r3, r3, r6, r1
 8022b2e:	6861      	ldr	r1, [r4, #4]
 8022b30:	fb93 f2f0 	sdiv	r2, r3, r0
 8022b34:	fb00 3012 	mls	r0, r0, r2, r3
 8022b38:	6823      	ldr	r3, [r4, #0]
 8022b3a:	1a89      	subs	r1, r1, r2
 8022b3c:	68a2      	ldr	r2, [r4, #8]
 8022b3e:	6061      	str	r1, [r4, #4]
 8022b40:	1a1b      	subs	r3, r3, r0
 8022b42:	1b92      	subs	r2, r2, r6
 8022b44:	2b3b      	cmp	r3, #59	; 0x3b
 8022b46:	6023      	str	r3, [r4, #0]
 8022b48:	60a2      	str	r2, [r4, #8]
 8022b4a:	dd35      	ble.n	8022bb8 <localtime_r+0x15c>
 8022b4c:	3101      	adds	r1, #1
 8022b4e:	6061      	str	r1, [r4, #4]
 8022b50:	3b3c      	subs	r3, #60	; 0x3c
 8022b52:	6023      	str	r3, [r4, #0]
 8022b54:	6863      	ldr	r3, [r4, #4]
 8022b56:	2b3b      	cmp	r3, #59	; 0x3b
 8022b58:	dd34      	ble.n	8022bc4 <localtime_r+0x168>
 8022b5a:	3201      	adds	r2, #1
 8022b5c:	60a2      	str	r2, [r4, #8]
 8022b5e:	3b3c      	subs	r3, #60	; 0x3c
 8022b60:	6063      	str	r3, [r4, #4]
 8022b62:	68a3      	ldr	r3, [r4, #8]
 8022b64:	2b17      	cmp	r3, #23
 8022b66:	dd33      	ble.n	8022bd0 <localtime_r+0x174>
 8022b68:	69e2      	ldr	r2, [r4, #28]
 8022b6a:	3201      	adds	r2, #1
 8022b6c:	61e2      	str	r2, [r4, #28]
 8022b6e:	69a2      	ldr	r2, [r4, #24]
 8022b70:	3201      	adds	r2, #1
 8022b72:	2a06      	cmp	r2, #6
 8022b74:	bfc8      	it	gt
 8022b76:	2200      	movgt	r2, #0
 8022b78:	61a2      	str	r2, [r4, #24]
 8022b7a:	68e2      	ldr	r2, [r4, #12]
 8022b7c:	3b18      	subs	r3, #24
 8022b7e:	3201      	adds	r2, #1
 8022b80:	60a3      	str	r3, [r4, #8]
 8022b82:	6923      	ldr	r3, [r4, #16]
 8022b84:	60e2      	str	r2, [r4, #12]
 8022b86:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8022b8a:	428a      	cmp	r2, r1
 8022b8c:	dd0e      	ble.n	8022bac <localtime_r+0x150>
 8022b8e:	2b0b      	cmp	r3, #11
 8022b90:	eba2 0201 	sub.w	r2, r2, r1
 8022b94:	60e2      	str	r2, [r4, #12]
 8022b96:	f103 0201 	add.w	r2, r3, #1
 8022b9a:	bf09      	itett	eq
 8022b9c:	6963      	ldreq	r3, [r4, #20]
 8022b9e:	6122      	strne	r2, [r4, #16]
 8022ba0:	2200      	moveq	r2, #0
 8022ba2:	3301      	addeq	r3, #1
 8022ba4:	bf02      	ittt	eq
 8022ba6:	6122      	streq	r2, [r4, #16]
 8022ba8:	6163      	streq	r3, [r4, #20]
 8022baa:	61e2      	streq	r2, [r4, #28]
 8022bac:	f001 fa30 	bl	8024010 <__tz_unlock>
 8022bb0:	4620      	mov	r0, r4
 8022bb2:	b002      	add	sp, #8
 8022bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	dacb      	bge.n	8022b54 <localtime_r+0xf8>
 8022bbc:	3901      	subs	r1, #1
 8022bbe:	6061      	str	r1, [r4, #4]
 8022bc0:	333c      	adds	r3, #60	; 0x3c
 8022bc2:	e7c6      	b.n	8022b52 <localtime_r+0xf6>
 8022bc4:	2b00      	cmp	r3, #0
 8022bc6:	dacc      	bge.n	8022b62 <localtime_r+0x106>
 8022bc8:	3a01      	subs	r2, #1
 8022bca:	60a2      	str	r2, [r4, #8]
 8022bcc:	333c      	adds	r3, #60	; 0x3c
 8022bce:	e7c7      	b.n	8022b60 <localtime_r+0x104>
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	daeb      	bge.n	8022bac <localtime_r+0x150>
 8022bd4:	69e2      	ldr	r2, [r4, #28]
 8022bd6:	3a01      	subs	r2, #1
 8022bd8:	61e2      	str	r2, [r4, #28]
 8022bda:	69a2      	ldr	r2, [r4, #24]
 8022bdc:	3a01      	subs	r2, #1
 8022bde:	bf48      	it	mi
 8022be0:	2206      	movmi	r2, #6
 8022be2:	61a2      	str	r2, [r4, #24]
 8022be4:	68e2      	ldr	r2, [r4, #12]
 8022be6:	3318      	adds	r3, #24
 8022be8:	3a01      	subs	r2, #1
 8022bea:	60e2      	str	r2, [r4, #12]
 8022bec:	60a3      	str	r3, [r4, #8]
 8022bee:	2a00      	cmp	r2, #0
 8022bf0:	d1dc      	bne.n	8022bac <localtime_r+0x150>
 8022bf2:	6923      	ldr	r3, [r4, #16]
 8022bf4:	3b01      	subs	r3, #1
 8022bf6:	d405      	bmi.n	8022c04 <localtime_r+0x1a8>
 8022bf8:	6123      	str	r3, [r4, #16]
 8022bfa:	6923      	ldr	r3, [r4, #16]
 8022bfc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022c00:	60e3      	str	r3, [r4, #12]
 8022c02:	e7d3      	b.n	8022bac <localtime_r+0x150>
 8022c04:	230b      	movs	r3, #11
 8022c06:	6123      	str	r3, [r4, #16]
 8022c08:	6963      	ldr	r3, [r4, #20]
 8022c0a:	1e5a      	subs	r2, r3, #1
 8022c0c:	6162      	str	r2, [r4, #20]
 8022c0e:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8022c12:	0793      	lsls	r3, r2, #30
 8022c14:	d105      	bne.n	8022c22 <localtime_r+0x1c6>
 8022c16:	2164      	movs	r1, #100	; 0x64
 8022c18:	fb92 f3f1 	sdiv	r3, r2, r1
 8022c1c:	fb01 2313 	mls	r3, r1, r3, r2
 8022c20:	b963      	cbnz	r3, 8022c3c <localtime_r+0x1e0>
 8022c22:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022c26:	fb92 f3f1 	sdiv	r3, r2, r1
 8022c2a:	fb01 2313 	mls	r3, r1, r3, r2
 8022c2e:	fab3 f383 	clz	r3, r3
 8022c32:	095b      	lsrs	r3, r3, #5
 8022c34:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8022c38:	61e3      	str	r3, [r4, #28]
 8022c3a:	e7de      	b.n	8022bfa <localtime_r+0x19e>
 8022c3c:	2301      	movs	r3, #1
 8022c3e:	e7f9      	b.n	8022c34 <localtime_r+0x1d8>
 8022c40:	0802cae0 	.word	0x0802cae0
 8022c44:	20001084 	.word	0x20001084

08022c48 <__retarget_lock_init_recursive>:
 8022c48:	4770      	bx	lr

08022c4a <__retarget_lock_close_recursive>:
 8022c4a:	4770      	bx	lr

08022c4c <__retarget_lock_acquire>:
 8022c4c:	4770      	bx	lr

08022c4e <__retarget_lock_acquire_recursive>:
 8022c4e:	4770      	bx	lr

08022c50 <__retarget_lock_release>:
 8022c50:	4770      	bx	lr

08022c52 <__retarget_lock_release_recursive>:
 8022c52:	4770      	bx	lr

08022c54 <__swhatbuf_r>:
 8022c54:	b570      	push	{r4, r5, r6, lr}
 8022c56:	460e      	mov	r6, r1
 8022c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c5c:	2900      	cmp	r1, #0
 8022c5e:	b096      	sub	sp, #88	; 0x58
 8022c60:	4614      	mov	r4, r2
 8022c62:	461d      	mov	r5, r3
 8022c64:	da07      	bge.n	8022c76 <__swhatbuf_r+0x22>
 8022c66:	2300      	movs	r3, #0
 8022c68:	602b      	str	r3, [r5, #0]
 8022c6a:	89b3      	ldrh	r3, [r6, #12]
 8022c6c:	061a      	lsls	r2, r3, #24
 8022c6e:	d410      	bmi.n	8022c92 <__swhatbuf_r+0x3e>
 8022c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022c74:	e00e      	b.n	8022c94 <__swhatbuf_r+0x40>
 8022c76:	466a      	mov	r2, sp
 8022c78:	f001 fd3a 	bl	80246f0 <_fstat_r>
 8022c7c:	2800      	cmp	r0, #0
 8022c7e:	dbf2      	blt.n	8022c66 <__swhatbuf_r+0x12>
 8022c80:	9a01      	ldr	r2, [sp, #4]
 8022c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022c8a:	425a      	negs	r2, r3
 8022c8c:	415a      	adcs	r2, r3
 8022c8e:	602a      	str	r2, [r5, #0]
 8022c90:	e7ee      	b.n	8022c70 <__swhatbuf_r+0x1c>
 8022c92:	2340      	movs	r3, #64	; 0x40
 8022c94:	2000      	movs	r0, #0
 8022c96:	6023      	str	r3, [r4, #0]
 8022c98:	b016      	add	sp, #88	; 0x58
 8022c9a:	bd70      	pop	{r4, r5, r6, pc}

08022c9c <__smakebuf_r>:
 8022c9c:	898b      	ldrh	r3, [r1, #12]
 8022c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022ca0:	079d      	lsls	r5, r3, #30
 8022ca2:	4606      	mov	r6, r0
 8022ca4:	460c      	mov	r4, r1
 8022ca6:	d507      	bpl.n	8022cb8 <__smakebuf_r+0x1c>
 8022ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022cac:	6023      	str	r3, [r4, #0]
 8022cae:	6123      	str	r3, [r4, #16]
 8022cb0:	2301      	movs	r3, #1
 8022cb2:	6163      	str	r3, [r4, #20]
 8022cb4:	b002      	add	sp, #8
 8022cb6:	bd70      	pop	{r4, r5, r6, pc}
 8022cb8:	ab01      	add	r3, sp, #4
 8022cba:	466a      	mov	r2, sp
 8022cbc:	f7ff ffca 	bl	8022c54 <__swhatbuf_r>
 8022cc0:	9900      	ldr	r1, [sp, #0]
 8022cc2:	4605      	mov	r5, r0
 8022cc4:	4630      	mov	r0, r6
 8022cc6:	f000 f8af 	bl	8022e28 <_malloc_r>
 8022cca:	b948      	cbnz	r0, 8022ce0 <__smakebuf_r+0x44>
 8022ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cd0:	059a      	lsls	r2, r3, #22
 8022cd2:	d4ef      	bmi.n	8022cb4 <__smakebuf_r+0x18>
 8022cd4:	f023 0303 	bic.w	r3, r3, #3
 8022cd8:	f043 0302 	orr.w	r3, r3, #2
 8022cdc:	81a3      	strh	r3, [r4, #12]
 8022cde:	e7e3      	b.n	8022ca8 <__smakebuf_r+0xc>
 8022ce0:	4b0d      	ldr	r3, [pc, #52]	; (8022d18 <__smakebuf_r+0x7c>)
 8022ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8022ce4:	89a3      	ldrh	r3, [r4, #12]
 8022ce6:	6020      	str	r0, [r4, #0]
 8022ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022cec:	81a3      	strh	r3, [r4, #12]
 8022cee:	9b00      	ldr	r3, [sp, #0]
 8022cf0:	6163      	str	r3, [r4, #20]
 8022cf2:	9b01      	ldr	r3, [sp, #4]
 8022cf4:	6120      	str	r0, [r4, #16]
 8022cf6:	b15b      	cbz	r3, 8022d10 <__smakebuf_r+0x74>
 8022cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022cfc:	4630      	mov	r0, r6
 8022cfe:	f001 fdff 	bl	8024900 <_isatty_r>
 8022d02:	b128      	cbz	r0, 8022d10 <__smakebuf_r+0x74>
 8022d04:	89a3      	ldrh	r3, [r4, #12]
 8022d06:	f023 0303 	bic.w	r3, r3, #3
 8022d0a:	f043 0301 	orr.w	r3, r3, #1
 8022d0e:	81a3      	strh	r3, [r4, #12]
 8022d10:	89a0      	ldrh	r0, [r4, #12]
 8022d12:	4305      	orrs	r5, r0
 8022d14:	81a5      	strh	r5, [r4, #12]
 8022d16:	e7cd      	b.n	8022cb4 <__smakebuf_r+0x18>
 8022d18:	08022481 	.word	0x08022481

08022d1c <malloc>:
 8022d1c:	4b02      	ldr	r3, [pc, #8]	; (8022d28 <malloc+0xc>)
 8022d1e:	4601      	mov	r1, r0
 8022d20:	6818      	ldr	r0, [r3, #0]
 8022d22:	f000 b881 	b.w	8022e28 <_malloc_r>
 8022d26:	bf00      	nop
 8022d28:	20000108 	.word	0x20000108

08022d2c <free>:
 8022d2c:	4b02      	ldr	r3, [pc, #8]	; (8022d38 <free+0xc>)
 8022d2e:	4601      	mov	r1, r0
 8022d30:	6818      	ldr	r0, [r3, #0]
 8022d32:	f000 b829 	b.w	8022d88 <_free_r>
 8022d36:	bf00      	nop
 8022d38:	20000108 	.word	0x20000108

08022d3c <memcpy>:
 8022d3c:	440a      	add	r2, r1
 8022d3e:	4291      	cmp	r1, r2
 8022d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8022d44:	d100      	bne.n	8022d48 <memcpy+0xc>
 8022d46:	4770      	bx	lr
 8022d48:	b510      	push	{r4, lr}
 8022d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022d52:	4291      	cmp	r1, r2
 8022d54:	d1f9      	bne.n	8022d4a <memcpy+0xe>
 8022d56:	bd10      	pop	{r4, pc}

08022d58 <memset>:
 8022d58:	4402      	add	r2, r0
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	4293      	cmp	r3, r2
 8022d5e:	d100      	bne.n	8022d62 <memset+0xa>
 8022d60:	4770      	bx	lr
 8022d62:	f803 1b01 	strb.w	r1, [r3], #1
 8022d66:	e7f9      	b.n	8022d5c <memset+0x4>

08022d68 <_calloc_r>:
 8022d68:	b513      	push	{r0, r1, r4, lr}
 8022d6a:	434a      	muls	r2, r1
 8022d6c:	4611      	mov	r1, r2
 8022d6e:	9201      	str	r2, [sp, #4]
 8022d70:	f000 f85a 	bl	8022e28 <_malloc_r>
 8022d74:	4604      	mov	r4, r0
 8022d76:	b118      	cbz	r0, 8022d80 <_calloc_r+0x18>
 8022d78:	9a01      	ldr	r2, [sp, #4]
 8022d7a:	2100      	movs	r1, #0
 8022d7c:	f7ff ffec 	bl	8022d58 <memset>
 8022d80:	4620      	mov	r0, r4
 8022d82:	b002      	add	sp, #8
 8022d84:	bd10      	pop	{r4, pc}
	...

08022d88 <_free_r>:
 8022d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022d8a:	2900      	cmp	r1, #0
 8022d8c:	d048      	beq.n	8022e20 <_free_r+0x98>
 8022d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022d92:	9001      	str	r0, [sp, #4]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	f1a1 0404 	sub.w	r4, r1, #4
 8022d9a:	bfb8      	it	lt
 8022d9c:	18e4      	addlt	r4, r4, r3
 8022d9e:	f001 fde7 	bl	8024970 <__malloc_lock>
 8022da2:	4a20      	ldr	r2, [pc, #128]	; (8022e24 <_free_r+0x9c>)
 8022da4:	9801      	ldr	r0, [sp, #4]
 8022da6:	6813      	ldr	r3, [r2, #0]
 8022da8:	4615      	mov	r5, r2
 8022daa:	b933      	cbnz	r3, 8022dba <_free_r+0x32>
 8022dac:	6063      	str	r3, [r4, #4]
 8022dae:	6014      	str	r4, [r2, #0]
 8022db0:	b003      	add	sp, #12
 8022db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022db6:	f001 bde1 	b.w	802497c <__malloc_unlock>
 8022dba:	42a3      	cmp	r3, r4
 8022dbc:	d90b      	bls.n	8022dd6 <_free_r+0x4e>
 8022dbe:	6821      	ldr	r1, [r4, #0]
 8022dc0:	1862      	adds	r2, r4, r1
 8022dc2:	4293      	cmp	r3, r2
 8022dc4:	bf04      	itt	eq
 8022dc6:	681a      	ldreq	r2, [r3, #0]
 8022dc8:	685b      	ldreq	r3, [r3, #4]
 8022dca:	6063      	str	r3, [r4, #4]
 8022dcc:	bf04      	itt	eq
 8022dce:	1852      	addeq	r2, r2, r1
 8022dd0:	6022      	streq	r2, [r4, #0]
 8022dd2:	602c      	str	r4, [r5, #0]
 8022dd4:	e7ec      	b.n	8022db0 <_free_r+0x28>
 8022dd6:	461a      	mov	r2, r3
 8022dd8:	685b      	ldr	r3, [r3, #4]
 8022dda:	b10b      	cbz	r3, 8022de0 <_free_r+0x58>
 8022ddc:	42a3      	cmp	r3, r4
 8022dde:	d9fa      	bls.n	8022dd6 <_free_r+0x4e>
 8022de0:	6811      	ldr	r1, [r2, #0]
 8022de2:	1855      	adds	r5, r2, r1
 8022de4:	42a5      	cmp	r5, r4
 8022de6:	d10b      	bne.n	8022e00 <_free_r+0x78>
 8022de8:	6824      	ldr	r4, [r4, #0]
 8022dea:	4421      	add	r1, r4
 8022dec:	1854      	adds	r4, r2, r1
 8022dee:	42a3      	cmp	r3, r4
 8022df0:	6011      	str	r1, [r2, #0]
 8022df2:	d1dd      	bne.n	8022db0 <_free_r+0x28>
 8022df4:	681c      	ldr	r4, [r3, #0]
 8022df6:	685b      	ldr	r3, [r3, #4]
 8022df8:	6053      	str	r3, [r2, #4]
 8022dfa:	4421      	add	r1, r4
 8022dfc:	6011      	str	r1, [r2, #0]
 8022dfe:	e7d7      	b.n	8022db0 <_free_r+0x28>
 8022e00:	d902      	bls.n	8022e08 <_free_r+0x80>
 8022e02:	230c      	movs	r3, #12
 8022e04:	6003      	str	r3, [r0, #0]
 8022e06:	e7d3      	b.n	8022db0 <_free_r+0x28>
 8022e08:	6825      	ldr	r5, [r4, #0]
 8022e0a:	1961      	adds	r1, r4, r5
 8022e0c:	428b      	cmp	r3, r1
 8022e0e:	bf04      	itt	eq
 8022e10:	6819      	ldreq	r1, [r3, #0]
 8022e12:	685b      	ldreq	r3, [r3, #4]
 8022e14:	6063      	str	r3, [r4, #4]
 8022e16:	bf04      	itt	eq
 8022e18:	1949      	addeq	r1, r1, r5
 8022e1a:	6021      	streq	r1, [r4, #0]
 8022e1c:	6054      	str	r4, [r2, #4]
 8022e1e:	e7c7      	b.n	8022db0 <_free_r+0x28>
 8022e20:	b003      	add	sp, #12
 8022e22:	bd30      	pop	{r4, r5, pc}
 8022e24:	20001060 	.word	0x20001060

08022e28 <_malloc_r>:
 8022e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e2a:	1ccd      	adds	r5, r1, #3
 8022e2c:	f025 0503 	bic.w	r5, r5, #3
 8022e30:	3508      	adds	r5, #8
 8022e32:	2d0c      	cmp	r5, #12
 8022e34:	bf38      	it	cc
 8022e36:	250c      	movcc	r5, #12
 8022e38:	2d00      	cmp	r5, #0
 8022e3a:	4606      	mov	r6, r0
 8022e3c:	db01      	blt.n	8022e42 <_malloc_r+0x1a>
 8022e3e:	42a9      	cmp	r1, r5
 8022e40:	d903      	bls.n	8022e4a <_malloc_r+0x22>
 8022e42:	230c      	movs	r3, #12
 8022e44:	6033      	str	r3, [r6, #0]
 8022e46:	2000      	movs	r0, #0
 8022e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e4a:	f001 fd91 	bl	8024970 <__malloc_lock>
 8022e4e:	4921      	ldr	r1, [pc, #132]	; (8022ed4 <_malloc_r+0xac>)
 8022e50:	680a      	ldr	r2, [r1, #0]
 8022e52:	4614      	mov	r4, r2
 8022e54:	b99c      	cbnz	r4, 8022e7e <_malloc_r+0x56>
 8022e56:	4f20      	ldr	r7, [pc, #128]	; (8022ed8 <_malloc_r+0xb0>)
 8022e58:	683b      	ldr	r3, [r7, #0]
 8022e5a:	b923      	cbnz	r3, 8022e66 <_malloc_r+0x3e>
 8022e5c:	4621      	mov	r1, r4
 8022e5e:	4630      	mov	r0, r6
 8022e60:	f000 f8da 	bl	8023018 <_sbrk_r>
 8022e64:	6038      	str	r0, [r7, #0]
 8022e66:	4629      	mov	r1, r5
 8022e68:	4630      	mov	r0, r6
 8022e6a:	f000 f8d5 	bl	8023018 <_sbrk_r>
 8022e6e:	1c43      	adds	r3, r0, #1
 8022e70:	d123      	bne.n	8022eba <_malloc_r+0x92>
 8022e72:	230c      	movs	r3, #12
 8022e74:	6033      	str	r3, [r6, #0]
 8022e76:	4630      	mov	r0, r6
 8022e78:	f001 fd80 	bl	802497c <__malloc_unlock>
 8022e7c:	e7e3      	b.n	8022e46 <_malloc_r+0x1e>
 8022e7e:	6823      	ldr	r3, [r4, #0]
 8022e80:	1b5b      	subs	r3, r3, r5
 8022e82:	d417      	bmi.n	8022eb4 <_malloc_r+0x8c>
 8022e84:	2b0b      	cmp	r3, #11
 8022e86:	d903      	bls.n	8022e90 <_malloc_r+0x68>
 8022e88:	6023      	str	r3, [r4, #0]
 8022e8a:	441c      	add	r4, r3
 8022e8c:	6025      	str	r5, [r4, #0]
 8022e8e:	e004      	b.n	8022e9a <_malloc_r+0x72>
 8022e90:	6863      	ldr	r3, [r4, #4]
 8022e92:	42a2      	cmp	r2, r4
 8022e94:	bf0c      	ite	eq
 8022e96:	600b      	streq	r3, [r1, #0]
 8022e98:	6053      	strne	r3, [r2, #4]
 8022e9a:	4630      	mov	r0, r6
 8022e9c:	f001 fd6e 	bl	802497c <__malloc_unlock>
 8022ea0:	f104 000b 	add.w	r0, r4, #11
 8022ea4:	1d23      	adds	r3, r4, #4
 8022ea6:	f020 0007 	bic.w	r0, r0, #7
 8022eaa:	1ac2      	subs	r2, r0, r3
 8022eac:	d0cc      	beq.n	8022e48 <_malloc_r+0x20>
 8022eae:	1a1b      	subs	r3, r3, r0
 8022eb0:	50a3      	str	r3, [r4, r2]
 8022eb2:	e7c9      	b.n	8022e48 <_malloc_r+0x20>
 8022eb4:	4622      	mov	r2, r4
 8022eb6:	6864      	ldr	r4, [r4, #4]
 8022eb8:	e7cc      	b.n	8022e54 <_malloc_r+0x2c>
 8022eba:	1cc4      	adds	r4, r0, #3
 8022ebc:	f024 0403 	bic.w	r4, r4, #3
 8022ec0:	42a0      	cmp	r0, r4
 8022ec2:	d0e3      	beq.n	8022e8c <_malloc_r+0x64>
 8022ec4:	1a21      	subs	r1, r4, r0
 8022ec6:	4630      	mov	r0, r6
 8022ec8:	f000 f8a6 	bl	8023018 <_sbrk_r>
 8022ecc:	3001      	adds	r0, #1
 8022ece:	d1dd      	bne.n	8022e8c <_malloc_r+0x64>
 8022ed0:	e7cf      	b.n	8022e72 <_malloc_r+0x4a>
 8022ed2:	bf00      	nop
 8022ed4:	20001060 	.word	0x20001060
 8022ed8:	20001064 	.word	0x20001064

08022edc <_open_r>:
 8022edc:	b538      	push	{r3, r4, r5, lr}
 8022ede:	4d07      	ldr	r5, [pc, #28]	; (8022efc <_open_r+0x20>)
 8022ee0:	4604      	mov	r4, r0
 8022ee2:	4608      	mov	r0, r1
 8022ee4:	4611      	mov	r1, r2
 8022ee6:	2200      	movs	r2, #0
 8022ee8:	602a      	str	r2, [r5, #0]
 8022eea:	461a      	mov	r2, r3
 8022eec:	f7dd fff8 	bl	8000ee0 <_open>
 8022ef0:	1c43      	adds	r3, r0, #1
 8022ef2:	d102      	bne.n	8022efa <_open_r+0x1e>
 8022ef4:	682b      	ldr	r3, [r5, #0]
 8022ef6:	b103      	cbz	r3, 8022efa <_open_r+0x1e>
 8022ef8:	6023      	str	r3, [r4, #0]
 8022efa:	bd38      	pop	{r3, r4, r5, pc}
 8022efc:	20001130 	.word	0x20001130

08022f00 <putchar>:
 8022f00:	4b09      	ldr	r3, [pc, #36]	; (8022f28 <putchar+0x28>)
 8022f02:	b513      	push	{r0, r1, r4, lr}
 8022f04:	681c      	ldr	r4, [r3, #0]
 8022f06:	4601      	mov	r1, r0
 8022f08:	b134      	cbz	r4, 8022f18 <putchar+0x18>
 8022f0a:	69a3      	ldr	r3, [r4, #24]
 8022f0c:	b923      	cbnz	r3, 8022f18 <putchar+0x18>
 8022f0e:	9001      	str	r0, [sp, #4]
 8022f10:	4620      	mov	r0, r4
 8022f12:	f7ff fae9 	bl	80224e8 <__sinit>
 8022f16:	9901      	ldr	r1, [sp, #4]
 8022f18:	68a2      	ldr	r2, [r4, #8]
 8022f1a:	4620      	mov	r0, r4
 8022f1c:	b002      	add	sp, #8
 8022f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f22:	f002 b9a1 	b.w	8025268 <_putc_r>
 8022f26:	bf00      	nop
 8022f28:	20000108 	.word	0x20000108

08022f2c <srand>:
 8022f2c:	b538      	push	{r3, r4, r5, lr}
 8022f2e:	4b10      	ldr	r3, [pc, #64]	; (8022f70 <srand+0x44>)
 8022f30:	681d      	ldr	r5, [r3, #0]
 8022f32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8022f34:	4604      	mov	r4, r0
 8022f36:	b9b3      	cbnz	r3, 8022f66 <srand+0x3a>
 8022f38:	2018      	movs	r0, #24
 8022f3a:	f7ff feef 	bl	8022d1c <malloc>
 8022f3e:	4602      	mov	r2, r0
 8022f40:	63a8      	str	r0, [r5, #56]	; 0x38
 8022f42:	b920      	cbnz	r0, 8022f4e <srand+0x22>
 8022f44:	4b0b      	ldr	r3, [pc, #44]	; (8022f74 <srand+0x48>)
 8022f46:	480c      	ldr	r0, [pc, #48]	; (8022f78 <srand+0x4c>)
 8022f48:	2142      	movs	r1, #66	; 0x42
 8022f4a:	f001 fb5b 	bl	8024604 <__assert_func>
 8022f4e:	490b      	ldr	r1, [pc, #44]	; (8022f7c <srand+0x50>)
 8022f50:	4b0b      	ldr	r3, [pc, #44]	; (8022f80 <srand+0x54>)
 8022f52:	e9c0 1300 	strd	r1, r3, [r0]
 8022f56:	4b0b      	ldr	r3, [pc, #44]	; (8022f84 <srand+0x58>)
 8022f58:	6083      	str	r3, [r0, #8]
 8022f5a:	230b      	movs	r3, #11
 8022f5c:	8183      	strh	r3, [r0, #12]
 8022f5e:	2100      	movs	r1, #0
 8022f60:	2001      	movs	r0, #1
 8022f62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022f66:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8022f68:	2200      	movs	r2, #0
 8022f6a:	611c      	str	r4, [r3, #16]
 8022f6c:	615a      	str	r2, [r3, #20]
 8022f6e:	bd38      	pop	{r3, r4, r5, pc}
 8022f70:	20000108 	.word	0x20000108
 8022f74:	0802ca68 	.word	0x0802ca68
 8022f78:	0802cb40 	.word	0x0802cb40
 8022f7c:	abcd330e 	.word	0xabcd330e
 8022f80:	e66d1234 	.word	0xe66d1234
 8022f84:	0005deec 	.word	0x0005deec

08022f88 <rand>:
 8022f88:	4b17      	ldr	r3, [pc, #92]	; (8022fe8 <rand+0x60>)
 8022f8a:	b510      	push	{r4, lr}
 8022f8c:	681c      	ldr	r4, [r3, #0]
 8022f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022f90:	b9b3      	cbnz	r3, 8022fc0 <rand+0x38>
 8022f92:	2018      	movs	r0, #24
 8022f94:	f7ff fec2 	bl	8022d1c <malloc>
 8022f98:	63a0      	str	r0, [r4, #56]	; 0x38
 8022f9a:	b928      	cbnz	r0, 8022fa8 <rand+0x20>
 8022f9c:	4602      	mov	r2, r0
 8022f9e:	4b13      	ldr	r3, [pc, #76]	; (8022fec <rand+0x64>)
 8022fa0:	4813      	ldr	r0, [pc, #76]	; (8022ff0 <rand+0x68>)
 8022fa2:	214e      	movs	r1, #78	; 0x4e
 8022fa4:	f001 fb2e 	bl	8024604 <__assert_func>
 8022fa8:	4a12      	ldr	r2, [pc, #72]	; (8022ff4 <rand+0x6c>)
 8022faa:	4b13      	ldr	r3, [pc, #76]	; (8022ff8 <rand+0x70>)
 8022fac:	e9c0 2300 	strd	r2, r3, [r0]
 8022fb0:	4b12      	ldr	r3, [pc, #72]	; (8022ffc <rand+0x74>)
 8022fb2:	6083      	str	r3, [r0, #8]
 8022fb4:	230b      	movs	r3, #11
 8022fb6:	8183      	strh	r3, [r0, #12]
 8022fb8:	2201      	movs	r2, #1
 8022fba:	2300      	movs	r3, #0
 8022fbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022fc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022fc2:	480f      	ldr	r0, [pc, #60]	; (8023000 <rand+0x78>)
 8022fc4:	690a      	ldr	r2, [r1, #16]
 8022fc6:	694b      	ldr	r3, [r1, #20]
 8022fc8:	4c0e      	ldr	r4, [pc, #56]	; (8023004 <rand+0x7c>)
 8022fca:	4350      	muls	r0, r2
 8022fcc:	fb04 0003 	mla	r0, r4, r3, r0
 8022fd0:	fba2 3404 	umull	r3, r4, r2, r4
 8022fd4:	1c5a      	adds	r2, r3, #1
 8022fd6:	4404      	add	r4, r0
 8022fd8:	f144 0000 	adc.w	r0, r4, #0
 8022fdc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8022fe0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022fe4:	bd10      	pop	{r4, pc}
 8022fe6:	bf00      	nop
 8022fe8:	20000108 	.word	0x20000108
 8022fec:	0802ca68 	.word	0x0802ca68
 8022ff0:	0802cb40 	.word	0x0802cb40
 8022ff4:	abcd330e 	.word	0xabcd330e
 8022ff8:	e66d1234 	.word	0xe66d1234
 8022ffc:	0005deec 	.word	0x0005deec
 8023000:	5851f42d 	.word	0x5851f42d
 8023004:	4c957f2d 	.word	0x4c957f2d

08023008 <realloc>:
 8023008:	4b02      	ldr	r3, [pc, #8]	; (8023014 <realloc+0xc>)
 802300a:	460a      	mov	r2, r1
 802300c:	4601      	mov	r1, r0
 802300e:	6818      	ldr	r0, [r3, #0]
 8023010:	f001 bcba 	b.w	8024988 <_realloc_r>
 8023014:	20000108 	.word	0x20000108

08023018 <_sbrk_r>:
 8023018:	b538      	push	{r3, r4, r5, lr}
 802301a:	4d06      	ldr	r5, [pc, #24]	; (8023034 <_sbrk_r+0x1c>)
 802301c:	2300      	movs	r3, #0
 802301e:	4604      	mov	r4, r0
 8023020:	4608      	mov	r0, r1
 8023022:	602b      	str	r3, [r5, #0]
 8023024:	f7dd ff6a 	bl	8000efc <_sbrk>
 8023028:	1c43      	adds	r3, r0, #1
 802302a:	d102      	bne.n	8023032 <_sbrk_r+0x1a>
 802302c:	682b      	ldr	r3, [r5, #0]
 802302e:	b103      	cbz	r3, 8023032 <_sbrk_r+0x1a>
 8023030:	6023      	str	r3, [r4, #0]
 8023032:	bd38      	pop	{r3, r4, r5, pc}
 8023034:	20001130 	.word	0x20001130

08023038 <_raise_r>:
 8023038:	291f      	cmp	r1, #31
 802303a:	b538      	push	{r3, r4, r5, lr}
 802303c:	4604      	mov	r4, r0
 802303e:	460d      	mov	r5, r1
 8023040:	d904      	bls.n	802304c <_raise_r+0x14>
 8023042:	2316      	movs	r3, #22
 8023044:	6003      	str	r3, [r0, #0]
 8023046:	f04f 30ff 	mov.w	r0, #4294967295
 802304a:	bd38      	pop	{r3, r4, r5, pc}
 802304c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802304e:	b112      	cbz	r2, 8023056 <_raise_r+0x1e>
 8023050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023054:	b94b      	cbnz	r3, 802306a <_raise_r+0x32>
 8023056:	4620      	mov	r0, r4
 8023058:	f000 f830 	bl	80230bc <_getpid_r>
 802305c:	462a      	mov	r2, r5
 802305e:	4601      	mov	r1, r0
 8023060:	4620      	mov	r0, r4
 8023062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023066:	f000 b817 	b.w	8023098 <_kill_r>
 802306a:	2b01      	cmp	r3, #1
 802306c:	d00a      	beq.n	8023084 <_raise_r+0x4c>
 802306e:	1c59      	adds	r1, r3, #1
 8023070:	d103      	bne.n	802307a <_raise_r+0x42>
 8023072:	2316      	movs	r3, #22
 8023074:	6003      	str	r3, [r0, #0]
 8023076:	2001      	movs	r0, #1
 8023078:	e7e7      	b.n	802304a <_raise_r+0x12>
 802307a:	2400      	movs	r4, #0
 802307c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023080:	4628      	mov	r0, r5
 8023082:	4798      	blx	r3
 8023084:	2000      	movs	r0, #0
 8023086:	e7e0      	b.n	802304a <_raise_r+0x12>

08023088 <raise>:
 8023088:	4b02      	ldr	r3, [pc, #8]	; (8023094 <raise+0xc>)
 802308a:	4601      	mov	r1, r0
 802308c:	6818      	ldr	r0, [r3, #0]
 802308e:	f7ff bfd3 	b.w	8023038 <_raise_r>
 8023092:	bf00      	nop
 8023094:	20000108 	.word	0x20000108

08023098 <_kill_r>:
 8023098:	b538      	push	{r3, r4, r5, lr}
 802309a:	4d07      	ldr	r5, [pc, #28]	; (80230b8 <_kill_r+0x20>)
 802309c:	2300      	movs	r3, #0
 802309e:	4604      	mov	r4, r0
 80230a0:	4608      	mov	r0, r1
 80230a2:	4611      	mov	r1, r2
 80230a4:	602b      	str	r3, [r5, #0]
 80230a6:	f7dd fe94 	bl	8000dd2 <_kill>
 80230aa:	1c43      	adds	r3, r0, #1
 80230ac:	d102      	bne.n	80230b4 <_kill_r+0x1c>
 80230ae:	682b      	ldr	r3, [r5, #0]
 80230b0:	b103      	cbz	r3, 80230b4 <_kill_r+0x1c>
 80230b2:	6023      	str	r3, [r4, #0]
 80230b4:	bd38      	pop	{r3, r4, r5, pc}
 80230b6:	bf00      	nop
 80230b8:	20001130 	.word	0x20001130

080230bc <_getpid_r>:
 80230bc:	f7dd be81 	b.w	8000dc2 <_getpid>

080230c0 <siprintf>:
 80230c0:	b40e      	push	{r1, r2, r3}
 80230c2:	b500      	push	{lr}
 80230c4:	b09c      	sub	sp, #112	; 0x70
 80230c6:	ab1d      	add	r3, sp, #116	; 0x74
 80230c8:	9002      	str	r0, [sp, #8]
 80230ca:	9006      	str	r0, [sp, #24]
 80230cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80230d0:	4809      	ldr	r0, [pc, #36]	; (80230f8 <siprintf+0x38>)
 80230d2:	9107      	str	r1, [sp, #28]
 80230d4:	9104      	str	r1, [sp, #16]
 80230d6:	4909      	ldr	r1, [pc, #36]	; (80230fc <siprintf+0x3c>)
 80230d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80230dc:	9105      	str	r1, [sp, #20]
 80230de:	6800      	ldr	r0, [r0, #0]
 80230e0:	9301      	str	r3, [sp, #4]
 80230e2:	a902      	add	r1, sp, #8
 80230e4:	f001 fcd2 	bl	8024a8c <_svfiprintf_r>
 80230e8:	9b02      	ldr	r3, [sp, #8]
 80230ea:	2200      	movs	r2, #0
 80230ec:	701a      	strb	r2, [r3, #0]
 80230ee:	b01c      	add	sp, #112	; 0x70
 80230f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80230f4:	b003      	add	sp, #12
 80230f6:	4770      	bx	lr
 80230f8:	20000108 	.word	0x20000108
 80230fc:	ffff0208 	.word	0xffff0208

08023100 <__sread>:
 8023100:	b510      	push	{r4, lr}
 8023102:	460c      	mov	r4, r1
 8023104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023108:	f002 f8f6 	bl	80252f8 <_read_r>
 802310c:	2800      	cmp	r0, #0
 802310e:	bfab      	itete	ge
 8023110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023112:	89a3      	ldrhlt	r3, [r4, #12]
 8023114:	181b      	addge	r3, r3, r0
 8023116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802311a:	bfac      	ite	ge
 802311c:	6563      	strge	r3, [r4, #84]	; 0x54
 802311e:	81a3      	strhlt	r3, [r4, #12]
 8023120:	bd10      	pop	{r4, pc}

08023122 <__seofread>:
 8023122:	2000      	movs	r0, #0
 8023124:	4770      	bx	lr

08023126 <__swrite>:
 8023126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802312a:	461f      	mov	r7, r3
 802312c:	898b      	ldrh	r3, [r1, #12]
 802312e:	05db      	lsls	r3, r3, #23
 8023130:	4605      	mov	r5, r0
 8023132:	460c      	mov	r4, r1
 8023134:	4616      	mov	r6, r2
 8023136:	d505      	bpl.n	8023144 <__swrite+0x1e>
 8023138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802313c:	2302      	movs	r3, #2
 802313e:	2200      	movs	r2, #0
 8023140:	f001 fbf2 	bl	8024928 <_lseek_r>
 8023144:	89a3      	ldrh	r3, [r4, #12]
 8023146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802314a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802314e:	81a3      	strh	r3, [r4, #12]
 8023150:	4632      	mov	r2, r6
 8023152:	463b      	mov	r3, r7
 8023154:	4628      	mov	r0, r5
 8023156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802315a:	f001 b96d 	b.w	8024438 <_write_r>

0802315e <__sseek>:
 802315e:	b510      	push	{r4, lr}
 8023160:	460c      	mov	r4, r1
 8023162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023166:	f001 fbdf 	bl	8024928 <_lseek_r>
 802316a:	1c43      	adds	r3, r0, #1
 802316c:	89a3      	ldrh	r3, [r4, #12]
 802316e:	bf15      	itete	ne
 8023170:	6560      	strne	r0, [r4, #84]	; 0x54
 8023172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802317a:	81a3      	strheq	r3, [r4, #12]
 802317c:	bf18      	it	ne
 802317e:	81a3      	strhne	r3, [r4, #12]
 8023180:	bd10      	pop	{r4, pc}

08023182 <__sclose>:
 8023182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023186:	f001 ba5b 	b.w	8024640 <_close_r>

0802318a <strcpy>:
 802318a:	4603      	mov	r3, r0
 802318c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023190:	f803 2b01 	strb.w	r2, [r3], #1
 8023194:	2a00      	cmp	r2, #0
 8023196:	d1f9      	bne.n	802318c <strcpy+0x2>
 8023198:	4770      	bx	lr
	...

0802319c <iso_year_adjust>:
 802319c:	6941      	ldr	r1, [r0, #20]
 802319e:	2900      	cmp	r1, #0
 80231a0:	f240 736c 	movw	r3, #1900	; 0x76c
 80231a4:	bfa8      	it	ge
 80231a6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80231aa:	18ca      	adds	r2, r1, r3
 80231ac:	078b      	lsls	r3, r1, #30
 80231ae:	d105      	bne.n	80231bc <iso_year_adjust+0x20>
 80231b0:	2164      	movs	r1, #100	; 0x64
 80231b2:	fb92 f3f1 	sdiv	r3, r2, r1
 80231b6:	fb01 2313 	mls	r3, r1, r3, r2
 80231ba:	b9db      	cbnz	r3, 80231f4 <iso_year_adjust+0x58>
 80231bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80231c0:	fb92 f3f1 	sdiv	r3, r2, r1
 80231c4:	fb01 2313 	mls	r3, r1, r3, r2
 80231c8:	fab3 f383 	clz	r3, r3
 80231cc:	095b      	lsrs	r3, r3, #5
 80231ce:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80231d2:	0040      	lsls	r0, r0, #1
 80231d4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80231d8:	4418      	add	r0, r3
 80231da:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80231de:	4298      	cmp	r0, r3
 80231e0:	d03a      	beq.n	8023258 <iso_year_adjust+0xbc>
 80231e2:	dc21      	bgt.n	8023228 <iso_year_adjust+0x8c>
 80231e4:	2801      	cmp	r0, #1
 80231e6:	dc1a      	bgt.n	802321e <iso_year_adjust+0x82>
 80231e8:	2800      	cmp	r0, #0
 80231ea:	bfb4      	ite	lt
 80231ec:	2000      	movlt	r0, #0
 80231ee:	f04f 30ff 	movge.w	r0, #4294967295
 80231f2:	4770      	bx	lr
 80231f4:	2301      	movs	r3, #1
 80231f6:	e7ea      	b.n	80231ce <iso_year_adjust+0x32>
 80231f8:	2817      	cmp	r0, #23
 80231fa:	d813      	bhi.n	8023224 <iso_year_adjust+0x88>
 80231fc:	e8df f000 	tbb	[pc, r0]
 8023200:	0c0c0c0c 	.word	0x0c0c0c0c
 8023204:	0c0c1212 	.word	0x0c0c1212
 8023208:	12121212 	.word	0x12121212
 802320c:	12121212 	.word	0x12121212
 8023210:	0c0c1212 	.word	0x0c0c1212
 8023214:	0c0c1212 	.word	0x0c0c1212
 8023218:	f04f 30ff 	mov.w	r0, #4294967295
 802321c:	4770      	bx	lr
 802321e:	380a      	subs	r0, #10
 8023220:	2817      	cmp	r0, #23
 8023222:	d9e9      	bls.n	80231f8 <iso_year_adjust+0x5c>
 8023224:	2000      	movs	r0, #0
 8023226:	4770      	bx	lr
 8023228:	f241 63b4 	movw	r3, #5812	; 0x16b4
 802322c:	4298      	cmp	r0, r3
 802322e:	dc06      	bgt.n	802323e <iso_year_adjust+0xa2>
 8023230:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8023234:	4298      	cmp	r0, r3
 8023236:	bfd4      	ite	le
 8023238:	2000      	movle	r0, #0
 802323a:	2001      	movgt	r0, #1
 802323c:	4770      	bx	lr
 802323e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8023242:	3802      	subs	r0, #2
 8023244:	2815      	cmp	r0, #21
 8023246:	d8ed      	bhi.n	8023224 <iso_year_adjust+0x88>
 8023248:	2301      	movs	r3, #1
 802324a:	4083      	lsls	r3, r0
 802324c:	4803      	ldr	r0, [pc, #12]	; (802325c <iso_year_adjust+0xc0>)
 802324e:	4018      	ands	r0, r3
 8023250:	3800      	subs	r0, #0
 8023252:	bf18      	it	ne
 8023254:	2001      	movne	r0, #1
 8023256:	4770      	bx	lr
 8023258:	2001      	movs	r0, #1
 802325a:	4770      	bx	lr
 802325c:	002a001f 	.word	0x002a001f

08023260 <__strftime>:
 8023260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023264:	b091      	sub	sp, #68	; 0x44
 8023266:	461d      	mov	r5, r3
 8023268:	2300      	movs	r3, #0
 802326a:	4681      	mov	r9, r0
 802326c:	4688      	mov	r8, r1
 802326e:	9304      	str	r3, [sp, #16]
 8023270:	461c      	mov	r4, r3
 8023272:	7813      	ldrb	r3, [r2, #0]
 8023274:	2b00      	cmp	r3, #0
 8023276:	f000 84d1 	beq.w	8023c1c <__strftime+0x9bc>
 802327a:	2b25      	cmp	r3, #37	; 0x25
 802327c:	d11b      	bne.n	80232b6 <__strftime+0x56>
 802327e:	7857      	ldrb	r7, [r2, #1]
 8023280:	2f30      	cmp	r7, #48	; 0x30
 8023282:	d024      	beq.n	80232ce <__strftime+0x6e>
 8023284:	2f2b      	cmp	r7, #43	; 0x2b
 8023286:	d022      	beq.n	80232ce <__strftime+0x6e>
 8023288:	f102 0b01 	add.w	fp, r2, #1
 802328c:	2700      	movs	r7, #0
 802328e:	f89b 3000 	ldrb.w	r3, [fp]
 8023292:	3b31      	subs	r3, #49	; 0x31
 8023294:	2b08      	cmp	r3, #8
 8023296:	d81d      	bhi.n	80232d4 <__strftime+0x74>
 8023298:	4658      	mov	r0, fp
 802329a:	220a      	movs	r2, #10
 802329c:	a908      	add	r1, sp, #32
 802329e:	f000 fdff 	bl	8023ea0 <strtoul>
 80232a2:	f8dd b020 	ldr.w	fp, [sp, #32]
 80232a6:	4606      	mov	r6, r0
 80232a8:	f89b 3000 	ldrb.w	r3, [fp]
 80232ac:	2b45      	cmp	r3, #69	; 0x45
 80232ae:	d113      	bne.n	80232d8 <__strftime+0x78>
 80232b0:	f10b 0b01 	add.w	fp, fp, #1
 80232b4:	e012      	b.n	80232dc <__strftime+0x7c>
 80232b6:	f108 31ff 	add.w	r1, r8, #4294967295
 80232ba:	42a1      	cmp	r1, r4
 80232bc:	d802      	bhi.n	80232c4 <__strftime+0x64>
 80232be:	2400      	movs	r4, #0
 80232c0:	f000 bcb2 	b.w	8023c28 <__strftime+0x9c8>
 80232c4:	f809 3004 	strb.w	r3, [r9, r4]
 80232c8:	3201      	adds	r2, #1
 80232ca:	3401      	adds	r4, #1
 80232cc:	e7d1      	b.n	8023272 <__strftime+0x12>
 80232ce:	f102 0b02 	add.w	fp, r2, #2
 80232d2:	e7dc      	b.n	802328e <__strftime+0x2e>
 80232d4:	2600      	movs	r6, #0
 80232d6:	e7e7      	b.n	80232a8 <__strftime+0x48>
 80232d8:	2b4f      	cmp	r3, #79	; 0x4f
 80232da:	d0e9      	beq.n	80232b0 <__strftime+0x50>
 80232dc:	f89b 0000 	ldrb.w	r0, [fp]
 80232e0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80232e4:	2b55      	cmp	r3, #85	; 0x55
 80232e6:	d8ea      	bhi.n	80232be <__strftime+0x5e>
 80232e8:	a201      	add	r2, pc, #4	; (adr r2, 80232f0 <__strftime+0x90>)
 80232ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232ee:	bf00      	nop
 80232f0:	08023c0f 	.word	0x08023c0f
 80232f4:	080232bf 	.word	0x080232bf
 80232f8:	080232bf 	.word	0x080232bf
 80232fc:	080232bf 	.word	0x080232bf
 8023300:	080232bf 	.word	0x080232bf
 8023304:	080232bf 	.word	0x080232bf
 8023308:	080232bf 	.word	0x080232bf
 802330c:	080232bf 	.word	0x080232bf
 8023310:	080232bf 	.word	0x080232bf
 8023314:	080232bf 	.word	0x080232bf
 8023318:	080232bf 	.word	0x080232bf
 802331c:	080232bf 	.word	0x080232bf
 8023320:	080232bf 	.word	0x080232bf
 8023324:	080232bf 	.word	0x080232bf
 8023328:	080232bf 	.word	0x080232bf
 802332c:	080232bf 	.word	0x080232bf
 8023330:	080232bf 	.word	0x080232bf
 8023334:	080232bf 	.word	0x080232bf
 8023338:	080232bf 	.word	0x080232bf
 802333c:	080232bf 	.word	0x080232bf
 8023340:	080232bf 	.word	0x080232bf
 8023344:	080232bf 	.word	0x080232bf
 8023348:	080232bf 	.word	0x080232bf
 802334c:	080232bf 	.word	0x080232bf
 8023350:	080232bf 	.word	0x080232bf
 8023354:	080232bf 	.word	0x080232bf
 8023358:	080232bf 	.word	0x080232bf
 802335c:	080232bf 	.word	0x080232bf
 8023360:	08023487 	.word	0x08023487
 8023364:	080234e1 	.word	0x080234e1
 8023368:	08023557 	.word	0x08023557
 802336c:	080235f1 	.word	0x080235f1
 8023370:	080232bf 	.word	0x080232bf
 8023374:	0802363d 	.word	0x0802363d
 8023378:	0802371d 	.word	0x0802371d
 802337c:	0802381f 	.word	0x0802381f
 8023380:	0802382d 	.word	0x0802382d
 8023384:	080232bf 	.word	0x080232bf
 8023388:	080232bf 	.word	0x080232bf
 802338c:	080232bf 	.word	0x080232bf
 8023390:	0802385d 	.word	0x0802385d
 8023394:	080232bf 	.word	0x080232bf
 8023398:	080232bf 	.word	0x080232bf
 802339c:	08023875 	.word	0x08023875
 80233a0:	080232bf 	.word	0x080232bf
 80233a4:	080238c3 	.word	0x080238c3
 80233a8:	080239d9 	.word	0x080239d9
 80233ac:	080239eb 	.word	0x080239eb
 80233b0:	08023a43 	.word	0x08023a43
 80233b4:	08023a53 	.word	0x08023a53
 80233b8:	08023ac9 	.word	0x08023ac9
 80233bc:	0802354f 	.word	0x0802354f
 80233c0:	08023afd 	.word	0x08023afd
 80233c4:	08023bbb 	.word	0x08023bbb
 80233c8:	080232bf 	.word	0x080232bf
 80233cc:	080232bf 	.word	0x080232bf
 80233d0:	080232bf 	.word	0x080232bf
 80233d4:	080232bf 	.word	0x080232bf
 80233d8:	080232bf 	.word	0x080232bf
 80233dc:	080232bf 	.word	0x080232bf
 80233e0:	08023449 	.word	0x08023449
 80233e4:	080234b5 	.word	0x080234b5
 80233e8:	0802350f 	.word	0x0802350f
 80233ec:	080235c9 	.word	0x080235c9
 80233f0:	080235c9 	.word	0x080235c9
 80233f4:	080232bf 	.word	0x080232bf
 80233f8:	08023685 	.word	0x08023685
 80233fc:	080234b5 	.word	0x080234b5
 8023400:	080232bf 	.word	0x080232bf
 8023404:	0802384f 	.word	0x0802384f
 8023408:	0802381f 	.word	0x0802381f
 802340c:	0802382d 	.word	0x0802382d
 8023410:	08023857 	.word	0x08023857
 8023414:	08023861 	.word	0x08023861
 8023418:	080232bf 	.word	0x080232bf
 802341c:	08023875 	.word	0x08023875
 8023420:	080232bf 	.word	0x080232bf
 8023424:	0802353f 	.word	0x0802353f
 8023428:	080238d9 	.word	0x080238d9
 802342c:	080239dd 	.word	0x080239dd
 8023430:	08023a25 	.word	0x08023a25
 8023434:	080232bf 	.word	0x080232bf
 8023438:	08023ab9 	.word	0x08023ab9
 802343c:	08023547 	.word	0x08023547
 8023440:	08023ae1 	.word	0x08023ae1
 8023444:	08023b4d 	.word	0x08023b4d
 8023448:	69ab      	ldr	r3, [r5, #24]
 802344a:	4aa7      	ldr	r2, [pc, #668]	; (80236e8 <__strftime+0x488>)
 802344c:	3318      	adds	r3, #24
 802344e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023452:	4630      	mov	r0, r6
 8023454:	f7dc fef2 	bl	800023c <strlen>
 8023458:	3e01      	subs	r6, #1
 802345a:	4420      	add	r0, r4
 802345c:	f108 33ff 	add.w	r3, r8, #4294967295
 8023460:	42a0      	cmp	r0, r4
 8023462:	d107      	bne.n	8023474 <__strftime+0x214>
 8023464:	f89b 3000 	ldrb.w	r3, [fp]
 8023468:	2b00      	cmp	r3, #0
 802346a:	f000 83d7 	beq.w	8023c1c <__strftime+0x9bc>
 802346e:	f10b 0201 	add.w	r2, fp, #1
 8023472:	e6fe      	b.n	8023272 <__strftime+0x12>
 8023474:	42a3      	cmp	r3, r4
 8023476:	f67f af22 	bls.w	80232be <__strftime+0x5e>
 802347a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802347e:	f809 2004 	strb.w	r2, [r9, r4]
 8023482:	3401      	adds	r4, #1
 8023484:	e7ec      	b.n	8023460 <__strftime+0x200>
 8023486:	69aa      	ldr	r2, [r5, #24]
 8023488:	4b97      	ldr	r3, [pc, #604]	; (80236e8 <__strftime+0x488>)
 802348a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802348e:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8023490:	4630      	mov	r0, r6
 8023492:	f7dc fed3 	bl	800023c <strlen>
 8023496:	3e01      	subs	r6, #1
 8023498:	4420      	add	r0, r4
 802349a:	f108 33ff 	add.w	r3, r8, #4294967295
 802349e:	42a0      	cmp	r0, r4
 80234a0:	d0e0      	beq.n	8023464 <__strftime+0x204>
 80234a2:	42a3      	cmp	r3, r4
 80234a4:	f67f af0b 	bls.w	80232be <__strftime+0x5e>
 80234a8:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80234ac:	f809 2004 	strb.w	r2, [r9, r4]
 80234b0:	3401      	adds	r4, #1
 80234b2:	e7f4      	b.n	802349e <__strftime+0x23e>
 80234b4:	4b8c      	ldr	r3, [pc, #560]	; (80236e8 <__strftime+0x488>)
 80234b6:	692a      	ldr	r2, [r5, #16]
 80234b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80234bc:	4630      	mov	r0, r6
 80234be:	f7dc febd 	bl	800023c <strlen>
 80234c2:	3e01      	subs	r6, #1
 80234c4:	4420      	add	r0, r4
 80234c6:	f108 33ff 	add.w	r3, r8, #4294967295
 80234ca:	42a0      	cmp	r0, r4
 80234cc:	d0ca      	beq.n	8023464 <__strftime+0x204>
 80234ce:	42a3      	cmp	r3, r4
 80234d0:	f67f aef5 	bls.w	80232be <__strftime+0x5e>
 80234d4:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80234d8:	f809 2004 	strb.w	r2, [r9, r4]
 80234dc:	3401      	adds	r4, #1
 80234de:	e7f4      	b.n	80234ca <__strftime+0x26a>
 80234e0:	692b      	ldr	r3, [r5, #16]
 80234e2:	4a81      	ldr	r2, [pc, #516]	; (80236e8 <__strftime+0x488>)
 80234e4:	330c      	adds	r3, #12
 80234e6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80234ea:	4630      	mov	r0, r6
 80234ec:	f7dc fea6 	bl	800023c <strlen>
 80234f0:	3e01      	subs	r6, #1
 80234f2:	4420      	add	r0, r4
 80234f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80234f8:	42a0      	cmp	r0, r4
 80234fa:	d0b3      	beq.n	8023464 <__strftime+0x204>
 80234fc:	42a3      	cmp	r3, r4
 80234fe:	f67f aede 	bls.w	80232be <__strftime+0x5e>
 8023502:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023506:	f809 2004 	strb.w	r2, [r9, r4]
 802350a:	3401      	adds	r4, #1
 802350c:	e7f4      	b.n	80234f8 <__strftime+0x298>
 802350e:	4b76      	ldr	r3, [pc, #472]	; (80236e8 <__strftime+0x488>)
 8023510:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8023514:	4630      	mov	r0, r6
 8023516:	f7dc fe91 	bl	800023c <strlen>
 802351a:	7833      	ldrb	r3, [r6, #0]
 802351c:	2b00      	cmp	r3, #0
 802351e:	d0a1      	beq.n	8023464 <__strftime+0x204>
 8023520:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023522:	9300      	str	r3, [sp, #0]
 8023524:	4632      	mov	r2, r6
 8023526:	462b      	mov	r3, r5
 8023528:	eba8 0104 	sub.w	r1, r8, r4
 802352c:	eb09 0004 	add.w	r0, r9, r4
 8023530:	f7ff fe96 	bl	8023260 <__strftime>
 8023534:	2800      	cmp	r0, #0
 8023536:	f77f aec2 	ble.w	80232be <__strftime+0x5e>
 802353a:	4404      	add	r4, r0
 802353c:	e792      	b.n	8023464 <__strftime+0x204>
 802353e:	4b6a      	ldr	r3, [pc, #424]	; (80236e8 <__strftime+0x488>)
 8023540:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8023544:	e7e6      	b.n	8023514 <__strftime+0x2b4>
 8023546:	4b68      	ldr	r3, [pc, #416]	; (80236e8 <__strftime+0x488>)
 8023548:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 802354c:	e7e2      	b.n	8023514 <__strftime+0x2b4>
 802354e:	4b66      	ldr	r3, [pc, #408]	; (80236e8 <__strftime+0x488>)
 8023550:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8023554:	e7de      	b.n	8023514 <__strftime+0x2b4>
 8023556:	4965      	ldr	r1, [pc, #404]	; (80236ec <__strftime+0x48c>)
 8023558:	f8d5 a014 	ldr.w	sl, [r5, #20]
 802355c:	458a      	cmp	sl, r1
 802355e:	bfac      	ite	ge
 8023560:	2100      	movge	r1, #0
 8023562:	2101      	movlt	r1, #1
 8023564:	f1ba 0f00 	cmp.w	sl, #0
 8023568:	db0e      	blt.n	8023588 <__strftime+0x328>
 802356a:	2064      	movs	r0, #100	; 0x64
 802356c:	fb9a f0f0 	sdiv	r0, sl, r0
 8023570:	3013      	adds	r0, #19
 8023572:	b19f      	cbz	r7, 802359c <__strftime+0x33c>
 8023574:	2863      	cmp	r0, #99	; 0x63
 8023576:	dd25      	ble.n	80235c4 <__strftime+0x364>
 8023578:	4a5d      	ldr	r2, [pc, #372]	; (80236f0 <__strftime+0x490>)
 802357a:	4b5e      	ldr	r3, [pc, #376]	; (80236f4 <__strftime+0x494>)
 802357c:	2f2b      	cmp	r7, #43	; 0x2b
 802357e:	bf14      	ite	ne
 8023580:	4617      	movne	r7, r2
 8023582:	461f      	moveq	r7, r3
 8023584:	4a5c      	ldr	r2, [pc, #368]	; (80236f8 <__strftime+0x498>)
 8023586:	e00b      	b.n	80235a0 <__strftime+0x340>
 8023588:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 802358c:	9105      	str	r1, [sp, #20]
 802358e:	f001 f835 	bl	80245fc <abs>
 8023592:	2364      	movs	r3, #100	; 0x64
 8023594:	9905      	ldr	r1, [sp, #20]
 8023596:	fb90 f0f3 	sdiv	r0, r0, r3
 802359a:	e7ea      	b.n	8023572 <__strftime+0x312>
 802359c:	4f54      	ldr	r7, [pc, #336]	; (80236f0 <__strftime+0x490>)
 802359e:	4a57      	ldr	r2, [pc, #348]	; (80236fc <__strftime+0x49c>)
 80235a0:	4b57      	ldr	r3, [pc, #348]	; (8023700 <__strftime+0x4a0>)
 80235a2:	9001      	str	r0, [sp, #4]
 80235a4:	2e02      	cmp	r6, #2
 80235a6:	bf2c      	ite	cs
 80235a8:	ebc1 0606 	rsbcs	r6, r1, r6
 80235ac:	f1c1 0602 	rsbcc	r6, r1, #2
 80235b0:	494e      	ldr	r1, [pc, #312]	; (80236ec <__strftime+0x48c>)
 80235b2:	9600      	str	r6, [sp, #0]
 80235b4:	458a      	cmp	sl, r1
 80235b6:	bfa8      	it	ge
 80235b8:	463b      	movge	r3, r7
 80235ba:	eba8 0104 	sub.w	r1, r8, r4
 80235be:	eb09 0004 	add.w	r0, r9, r4
 80235c2:	e02a      	b.n	802361a <__strftime+0x3ba>
 80235c4:	4f4a      	ldr	r7, [pc, #296]	; (80236f0 <__strftime+0x490>)
 80235c6:	e7dd      	b.n	8023584 <__strftime+0x324>
 80235c8:	494e      	ldr	r1, [pc, #312]	; (8023704 <__strftime+0x4a4>)
 80235ca:	4a4f      	ldr	r2, [pc, #316]	; (8023708 <__strftime+0x4a8>)
 80235cc:	68eb      	ldr	r3, [r5, #12]
 80235ce:	2864      	cmp	r0, #100	; 0x64
 80235d0:	bf08      	it	eq
 80235d2:	460a      	moveq	r2, r1
 80235d4:	eba8 0104 	sub.w	r1, r8, r4
 80235d8:	eb09 0004 	add.w	r0, r9, r4
 80235dc:	f001 fe9e 	bl	802531c <sniprintf>
 80235e0:	2800      	cmp	r0, #0
 80235e2:	f6ff ae6c 	blt.w	80232be <__strftime+0x5e>
 80235e6:	4404      	add	r4, r0
 80235e8:	45a0      	cmp	r8, r4
 80235ea:	f63f af3b 	bhi.w	8023464 <__strftime+0x204>
 80235ee:	e666      	b.n	80232be <__strftime+0x5e>
 80235f0:	6968      	ldr	r0, [r5, #20]
 80235f2:	692b      	ldr	r3, [r5, #16]
 80235f4:	68ef      	ldr	r7, [r5, #12]
 80235f6:	2800      	cmp	r0, #0
 80235f8:	eb09 0604 	add.w	r6, r9, r4
 80235fc:	eba8 0104 	sub.w	r1, r8, r4
 8023600:	f103 0301 	add.w	r3, r3, #1
 8023604:	db0c      	blt.n	8023620 <__strftime+0x3c0>
 8023606:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802360a:	fb90 f2fc 	sdiv	r2, r0, ip
 802360e:	fb0c 0212 	mls	r2, ip, r2, r0
 8023612:	e9cd 7200 	strd	r7, r2, [sp]
 8023616:	4a3d      	ldr	r2, [pc, #244]	; (802370c <__strftime+0x4ac>)
 8023618:	4630      	mov	r0, r6
 802361a:	f001 fe7f 	bl	802531c <sniprintf>
 802361e:	e7df      	b.n	80235e0 <__strftime+0x380>
 8023620:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023624:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8023628:	f000 ffe8 	bl	80245fc <abs>
 802362c:	2264      	movs	r2, #100	; 0x64
 802362e:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8023632:	fb90 fcf2 	sdiv	ip, r0, r2
 8023636:	fb0c 0212 	mls	r2, ip, r2, r0
 802363a:	e7ea      	b.n	8023612 <__strftime+0x3b2>
 802363c:	2325      	movs	r3, #37	; 0x25
 802363e:	f88d 3020 	strb.w	r3, [sp, #32]
 8023642:	b187      	cbz	r7, 8023666 <__strftime+0x406>
 8023644:	2e06      	cmp	r6, #6
 8023646:	bf38      	it	cc
 8023648:	2606      	movcc	r6, #6
 802364a:	1fb3      	subs	r3, r6, #6
 802364c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8023650:	d10c      	bne.n	802366c <__strftime+0x40c>
 8023652:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8023656:	492e      	ldr	r1, [pc, #184]	; (8023710 <__strftime+0x4b0>)
 8023658:	f7ff fd97 	bl	802318a <strcpy>
 802365c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802365e:	9300      	str	r3, [sp, #0]
 8023660:	aa08      	add	r2, sp, #32
 8023662:	462b      	mov	r3, r5
 8023664:	e760      	b.n	8023528 <__strftime+0x2c8>
 8023666:	272b      	movs	r7, #43	; 0x2b
 8023668:	260a      	movs	r6, #10
 802366a:	e7ee      	b.n	802364a <__strftime+0x3ea>
 802366c:	4a29      	ldr	r2, [pc, #164]	; (8023714 <__strftime+0x4b4>)
 802366e:	211e      	movs	r1, #30
 8023670:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8023674:	f001 fe52 	bl	802531c <sniprintf>
 8023678:	2800      	cmp	r0, #0
 802367a:	ddea      	ble.n	8023652 <__strftime+0x3f2>
 802367c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8023680:	4418      	add	r0, r3
 8023682:	e7e8      	b.n	8023656 <__strftime+0x3f6>
 8023684:	4628      	mov	r0, r5
 8023686:	f7ff fd89 	bl	802319c <iso_year_adjust>
 802368a:	4606      	mov	r6, r0
 802368c:	6968      	ldr	r0, [r5, #20]
 802368e:	2800      	cmp	r0, #0
 8023690:	db11      	blt.n	80236b6 <__strftime+0x456>
 8023692:	2264      	movs	r2, #100	; 0x64
 8023694:	fb90 f3f2 	sdiv	r3, r0, r2
 8023698:	fb02 0313 	mls	r3, r2, r3, r0
 802369c:	441e      	add	r6, r3
 802369e:	2364      	movs	r3, #100	; 0x64
 80236a0:	fb96 f0f3 	sdiv	r0, r6, r3
 80236a4:	fb03 6610 	mls	r6, r3, r0, r6
 80236a8:	441e      	add	r6, r3
 80236aa:	fbb6 f2f3 	udiv	r2, r6, r3
 80236ae:	fb03 6312 	mls	r3, r3, r2, r6
 80236b2:	4a14      	ldr	r2, [pc, #80]	; (8023704 <__strftime+0x4a4>)
 80236b4:	e78e      	b.n	80235d4 <__strftime+0x374>
 80236b6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80236ba:	f000 ff9f 	bl	80245fc <abs>
 80236be:	2364      	movs	r3, #100	; 0x64
 80236c0:	2e00      	cmp	r6, #0
 80236c2:	fb90 f2f3 	sdiv	r2, r0, r3
 80236c6:	fb02 0313 	mls	r3, r2, r3, r0
 80236ca:	da05      	bge.n	80236d8 <__strftime+0x478>
 80236cc:	6969      	ldr	r1, [r5, #20]
 80236ce:	4a12      	ldr	r2, [pc, #72]	; (8023718 <__strftime+0x4b8>)
 80236d0:	4291      	cmp	r1, r2
 80236d2:	bfb8      	it	lt
 80236d4:	2601      	movlt	r6, #1
 80236d6:	e7e1      	b.n	802369c <__strftime+0x43c>
 80236d8:	d0e0      	beq.n	802369c <__strftime+0x43c>
 80236da:	6969      	ldr	r1, [r5, #20]
 80236dc:	4a03      	ldr	r2, [pc, #12]	; (80236ec <__strftime+0x48c>)
 80236de:	4291      	cmp	r1, r2
 80236e0:	bfb8      	it	lt
 80236e2:	f04f 36ff 	movlt.w	r6, #4294967295
 80236e6:	e7d9      	b.n	802369c <__strftime+0x43c>
 80236e8:	0802cd24 	.word	0x0802cd24
 80236ec:	fffff894 	.word	0xfffff894
 80236f0:	0802ce97 	.word	0x0802ce97
 80236f4:	0802cbae 	.word	0x0802cbae
 80236f8:	0802cba6 	.word	0x0802cba6
 80236fc:	0802cb9f 	.word	0x0802cb9f
 8023700:	0802cfd7 	.word	0x0802cfd7
 8023704:	0802cbbe 	.word	0x0802cbbe
 8023708:	0802cbb0 	.word	0x0802cbb0
 802370c:	0802cbb4 	.word	0x0802cbb4
 8023710:	0802cbc7 	.word	0x0802cbc7
 8023714:	0802cbc3 	.word	0x0802cbc3
 8023718:	fffff895 	.word	0xfffff895
 802371c:	4bb6      	ldr	r3, [pc, #728]	; (80239f8 <__strftime+0x798>)
 802371e:	6969      	ldr	r1, [r5, #20]
 8023720:	4299      	cmp	r1, r3
 8023722:	bfac      	ite	ge
 8023724:	2300      	movge	r3, #0
 8023726:	2301      	movlt	r3, #1
 8023728:	4628      	mov	r0, r5
 802372a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 802372e:	f7ff fd35 	bl	802319c <iso_year_adjust>
 8023732:	9906      	ldr	r1, [sp, #24]
 8023734:	2900      	cmp	r1, #0
 8023736:	4682      	mov	sl, r0
 8023738:	db27      	blt.n	802378a <__strftime+0x52a>
 802373a:	2264      	movs	r2, #100	; 0x64
 802373c:	fb91 f2f2 	sdiv	r2, r1, r2
 8023740:	3213      	adds	r2, #19
 8023742:	6968      	ldr	r0, [r5, #20]
 8023744:	2800      	cmp	r0, #0
 8023746:	db2b      	blt.n	80237a0 <__strftime+0x540>
 8023748:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802374c:	fb90 fefc 	sdiv	lr, r0, ip
 8023750:	fb0c 001e 	mls	r0, ip, lr, r0
 8023754:	f1ba 0f00 	cmp.w	sl, #0
 8023758:	da31      	bge.n	80237be <__strftime+0x55e>
 802375a:	6969      	ldr	r1, [r5, #20]
 802375c:	4ba7      	ldr	r3, [pc, #668]	; (80239fc <__strftime+0x79c>)
 802375e:	4299      	cmp	r1, r3
 8023760:	db38      	blt.n	80237d4 <__strftime+0x574>
 8023762:	eb0a 0300 	add.w	r3, sl, r0
 8023766:	1c59      	adds	r1, r3, #1
 8023768:	d139      	bne.n	80237de <__strftime+0x57e>
 802376a:	3a01      	subs	r2, #1
 802376c:	2363      	movs	r3, #99	; 0x63
 802376e:	2064      	movs	r0, #100	; 0x64
 8023770:	fb00 3202 	mla	r2, r0, r2, r3
 8023774:	9b05      	ldr	r3, [sp, #20]
 8023776:	2b00      	cmp	r3, #0
 8023778:	d036      	beq.n	80237e8 <__strftime+0x588>
 802377a:	232d      	movs	r3, #45	; 0x2d
 802377c:	f88d 3020 	strb.w	r3, [sp, #32]
 8023780:	b106      	cbz	r6, 8023784 <__strftime+0x524>
 8023782:	3e01      	subs	r6, #1
 8023784:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8023788:	e038      	b.n	80237fc <__strftime+0x59c>
 802378a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802378e:	9106      	str	r1, [sp, #24]
 8023790:	f000 ff34 	bl	80245fc <abs>
 8023794:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023798:	9906      	ldr	r1, [sp, #24]
 802379a:	fb90 f2fc 	sdiv	r2, r0, ip
 802379e:	e7d0      	b.n	8023742 <__strftime+0x4e2>
 80237a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80237a4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80237a8:	f000 ff28 	bl	80245fc <abs>
 80237ac:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80237b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80237b4:	fb90 fefc 	sdiv	lr, r0, ip
 80237b8:	fb0e 001c 	mls	r0, lr, ip, r0
 80237bc:	e7ca      	b.n	8023754 <__strftime+0x4f4>
 80237be:	d0d0      	beq.n	8023762 <__strftime+0x502>
 80237c0:	4b8d      	ldr	r3, [pc, #564]	; (80239f8 <__strftime+0x798>)
 80237c2:	4299      	cmp	r1, r3
 80237c4:	bfb4      	ite	lt
 80237c6:	2301      	movlt	r3, #1
 80237c8:	2300      	movge	r3, #0
 80237ca:	9305      	str	r3, [sp, #20]
 80237cc:	bfb8      	it	lt
 80237ce:	f04f 3aff 	movlt.w	sl, #4294967295
 80237d2:	e7c6      	b.n	8023762 <__strftime+0x502>
 80237d4:	f04f 0a01 	mov.w	sl, #1
 80237d8:	f8cd a014 	str.w	sl, [sp, #20]
 80237dc:	e7c1      	b.n	8023762 <__strftime+0x502>
 80237de:	2b64      	cmp	r3, #100	; 0x64
 80237e0:	bf04      	itt	eq
 80237e2:	3201      	addeq	r2, #1
 80237e4:	2300      	moveq	r3, #0
 80237e6:	e7c2      	b.n	802376e <__strftime+0x50e>
 80237e8:	2f2b      	cmp	r7, #43	; 0x2b
 80237ea:	d106      	bne.n	80237fa <__strftime+0x59a>
 80237ec:	f242 730f 	movw	r3, #9999	; 0x270f
 80237f0:	429a      	cmp	r2, r3
 80237f2:	d902      	bls.n	80237fa <__strftime+0x59a>
 80237f4:	f88d 7020 	strb.w	r7, [sp, #32]
 80237f8:	e7c2      	b.n	8023780 <__strftime+0x520>
 80237fa:	ab08      	add	r3, sp, #32
 80237fc:	2125      	movs	r1, #37	; 0x25
 80237fe:	7019      	strb	r1, [r3, #0]
 8023800:	b94f      	cbnz	r7, 8023816 <__strftime+0x5b6>
 8023802:	1c58      	adds	r0, r3, #1
 8023804:	497e      	ldr	r1, [pc, #504]	; (8023a00 <__strftime+0x7a0>)
 8023806:	9205      	str	r2, [sp, #20]
 8023808:	f7ff fcbf 	bl	802318a <strcpy>
 802380c:	9a05      	ldr	r2, [sp, #20]
 802380e:	9200      	str	r2, [sp, #0]
 8023810:	4633      	mov	r3, r6
 8023812:	aa08      	add	r2, sp, #32
 8023814:	e059      	b.n	80238ca <__strftime+0x66a>
 8023816:	2130      	movs	r1, #48	; 0x30
 8023818:	1c98      	adds	r0, r3, #2
 802381a:	7059      	strb	r1, [r3, #1]
 802381c:	e7f2      	b.n	8023804 <__strftime+0x5a4>
 802381e:	4979      	ldr	r1, [pc, #484]	; (8023a04 <__strftime+0x7a4>)
 8023820:	4a79      	ldr	r2, [pc, #484]	; (8023a08 <__strftime+0x7a8>)
 8023822:	68ab      	ldr	r3, [r5, #8]
 8023824:	286b      	cmp	r0, #107	; 0x6b
 8023826:	bf08      	it	eq
 8023828:	460a      	moveq	r2, r1
 802382a:	e6d3      	b.n	80235d4 <__strftime+0x374>
 802382c:	68ab      	ldr	r3, [r5, #8]
 802382e:	b163      	cbz	r3, 802384a <__strftime+0x5ea>
 8023830:	2b0c      	cmp	r3, #12
 8023832:	d004      	beq.n	802383e <__strftime+0x5de>
 8023834:	210c      	movs	r1, #12
 8023836:	fb93 f2f1 	sdiv	r2, r3, r1
 802383a:	fb01 3312 	mls	r3, r1, r2, r3
 802383e:	4972      	ldr	r1, [pc, #456]	; (8023a08 <__strftime+0x7a8>)
 8023840:	4a70      	ldr	r2, [pc, #448]	; (8023a04 <__strftime+0x7a4>)
 8023842:	2849      	cmp	r0, #73	; 0x49
 8023844:	bf08      	it	eq
 8023846:	460a      	moveq	r2, r1
 8023848:	e6c4      	b.n	80235d4 <__strftime+0x374>
 802384a:	230c      	movs	r3, #12
 802384c:	e7f7      	b.n	802383e <__strftime+0x5de>
 802384e:	69eb      	ldr	r3, [r5, #28]
 8023850:	4a6e      	ldr	r2, [pc, #440]	; (8023a0c <__strftime+0x7ac>)
 8023852:	3301      	adds	r3, #1
 8023854:	e6be      	b.n	80235d4 <__strftime+0x374>
 8023856:	692b      	ldr	r3, [r5, #16]
 8023858:	3301      	adds	r3, #1
 802385a:	e72a      	b.n	80236b2 <__strftime+0x452>
 802385c:	686b      	ldr	r3, [r5, #4]
 802385e:	e728      	b.n	80236b2 <__strftime+0x452>
 8023860:	f108 33ff 	add.w	r3, r8, #4294967295
 8023864:	42a3      	cmp	r3, r4
 8023866:	f67f ad2a 	bls.w	80232be <__strftime+0x5e>
 802386a:	230a      	movs	r3, #10
 802386c:	f809 3004 	strb.w	r3, [r9, r4]
 8023870:	3401      	adds	r4, #1
 8023872:	e5f7      	b.n	8023464 <__strftime+0x204>
 8023874:	68ab      	ldr	r3, [r5, #8]
 8023876:	2b0b      	cmp	r3, #11
 8023878:	bfcc      	ite	gt
 802387a:	22a4      	movgt	r2, #164	; 0xa4
 802387c:	22a0      	movle	r2, #160	; 0xa0
 802387e:	4b64      	ldr	r3, [pc, #400]	; (8023a10 <__strftime+0x7b0>)
 8023880:	4413      	add	r3, r2
 8023882:	685e      	ldr	r6, [r3, #4]
 8023884:	4630      	mov	r0, r6
 8023886:	f7dc fcd9 	bl	800023c <strlen>
 802388a:	1e72      	subs	r2, r6, #1
 802388c:	4420      	add	r0, r4
 802388e:	f108 36ff 	add.w	r6, r8, #4294967295
 8023892:	42a0      	cmp	r0, r4
 8023894:	f43f ade6 	beq.w	8023464 <__strftime+0x204>
 8023898:	42a6      	cmp	r6, r4
 802389a:	f67f ad10 	bls.w	80232be <__strftime+0x5e>
 802389e:	f89b 1000 	ldrb.w	r1, [fp]
 80238a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80238a6:	2950      	cmp	r1, #80	; 0x50
 80238a8:	d107      	bne.n	80238ba <__strftime+0x65a>
 80238aa:	495a      	ldr	r1, [pc, #360]	; (8023a14 <__strftime+0x7b4>)
 80238ac:	5cc9      	ldrb	r1, [r1, r3]
 80238ae:	f001 0103 	and.w	r1, r1, #3
 80238b2:	2901      	cmp	r1, #1
 80238b4:	bf08      	it	eq
 80238b6:	3320      	addeq	r3, #32
 80238b8:	b2db      	uxtb	r3, r3
 80238ba:	f809 3004 	strb.w	r3, [r9, r4]
 80238be:	3401      	adds	r4, #1
 80238c0:	e7e7      	b.n	8023892 <__strftime+0x632>
 80238c2:	686b      	ldr	r3, [r5, #4]
 80238c4:	9300      	str	r3, [sp, #0]
 80238c6:	4a54      	ldr	r2, [pc, #336]	; (8023a18 <__strftime+0x7b8>)
 80238c8:	68ab      	ldr	r3, [r5, #8]
 80238ca:	eba8 0104 	sub.w	r1, r8, r4
 80238ce:	eb09 0004 	add.w	r0, r9, r4
 80238d2:	f001 fd23 	bl	802531c <sniprintf>
 80238d6:	e683      	b.n	80235e0 <__strftime+0x380>
 80238d8:	6a2b      	ldr	r3, [r5, #32]
 80238da:	2b00      	cmp	r3, #0
 80238dc:	db79      	blt.n	80239d2 <__strftime+0x772>
 80238de:	f000 fb91 	bl	8024004 <__tz_lock>
 80238e2:	9b04      	ldr	r3, [sp, #16]
 80238e4:	b90b      	cbnz	r3, 80238ea <__strftime+0x68a>
 80238e6:	f000 fb99 	bl	802401c <_tzset_unlocked>
 80238ea:	f000 ff55 	bl	8024798 <__gettzinfo>
 80238ee:	6a2b      	ldr	r3, [r5, #32]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	bfcc      	ite	gt
 80238f4:	2350      	movgt	r3, #80	; 0x50
 80238f6:	2328      	movle	r3, #40	; 0x28
 80238f8:	58c3      	ldr	r3, [r0, r3]
 80238fa:	f1c3 0a00 	rsb	sl, r3, #0
 80238fe:	f000 fb87 	bl	8024010 <__tz_unlock>
 8023902:	2301      	movs	r3, #1
 8023904:	9304      	str	r3, [sp, #16]
 8023906:	f8d5 c014 	ldr.w	ip, [r5, #20]
 802390a:	4662      	mov	r2, ip
 802390c:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8023910:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023914:	9602      	str	r6, [sp, #8]
 8023916:	f143 36ff 	adc.w	r6, r3, #4294967295
 802391a:	9603      	str	r6, [sp, #12]
 802391c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023920:	2e00      	cmp	r6, #0
 8023922:	f177 0600 	sbcs.w	r6, r7, #0
 8023926:	eba8 0104 	sub.w	r1, r8, r4
 802392a:	eb09 0004 	add.w	r0, r9, r4
 802392e:	da05      	bge.n	802393c <__strftime+0x6dc>
 8023930:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8023934:	f143 33ff 	adc.w	r3, r3, #4294967295
 8023938:	9602      	str	r6, [sp, #8]
 802393a:	9303      	str	r3, [sp, #12]
 802393c:	9b02      	ldr	r3, [sp, #8]
 802393e:	089e      	lsrs	r6, r3, #2
 8023940:	9b03      	ldr	r3, [sp, #12]
 8023942:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8023946:	f10c 32ff 	add.w	r2, ip, #4294967295
 802394a:	109f      	asrs	r7, r3, #2
 802394c:	2364      	movs	r3, #100	; 0x64
 802394e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023952:	1af6      	subs	r6, r6, r3
 8023954:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8023958:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 802395c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023960:	fb92 f3f3 	sdiv	r3, r2, r3
 8023964:	18f6      	adds	r6, r6, r3
 8023966:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802396a:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 802396e:	f240 136d 	movw	r3, #365	; 0x16d
 8023972:	fb03 fc0c 	mul.w	ip, r3, ip
 8023976:	69eb      	ldr	r3, [r5, #28]
 8023978:	eb16 060c 	adds.w	r6, r6, ip
 802397c:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8023980:	18f6      	adds	r6, r6, r3
 8023982:	f04f 0c18 	mov.w	ip, #24
 8023986:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 802398a:	fba6 230c 	umull	r2, r3, r6, ip
 802398e:	68ae      	ldr	r6, [r5, #8]
 8023990:	fb0c 3307 	mla	r3, ip, r7, r3
 8023994:	1992      	adds	r2, r2, r6
 8023996:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 802399a:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 802399e:	fba2 670c 	umull	r6, r7, r2, ip
 80239a2:	fb0c 7703 	mla	r7, ip, r3, r7
 80239a6:	686b      	ldr	r3, [r5, #4]
 80239a8:	18f6      	adds	r6, r6, r3
 80239aa:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80239ae:	fba6 230c 	umull	r2, r3, r6, ip
 80239b2:	682e      	ldr	r6, [r5, #0]
 80239b4:	fb0c 3307 	mla	r3, ip, r7, r3
 80239b8:	1992      	adds	r2, r2, r6
 80239ba:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80239be:	ebb2 020a 	subs.w	r2, r2, sl
 80239c2:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80239c6:	e9cd 2300 	strd	r2, r3, [sp]
 80239ca:	4a14      	ldr	r2, [pc, #80]	; (8023a1c <__strftime+0x7bc>)
 80239cc:	f001 fca6 	bl	802531c <sniprintf>
 80239d0:	e606      	b.n	80235e0 <__strftime+0x380>
 80239d2:	f04f 0a00 	mov.w	sl, #0
 80239d6:	e796      	b.n	8023906 <__strftime+0x6a6>
 80239d8:	682b      	ldr	r3, [r5, #0]
 80239da:	e66a      	b.n	80236b2 <__strftime+0x452>
 80239dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80239e0:	42a3      	cmp	r3, r4
 80239e2:	f67f ac6c 	bls.w	80232be <__strftime+0x5e>
 80239e6:	2309      	movs	r3, #9
 80239e8:	e740      	b.n	802386c <__strftime+0x60c>
 80239ea:	682b      	ldr	r3, [r5, #0]
 80239ec:	9301      	str	r3, [sp, #4]
 80239ee:	686b      	ldr	r3, [r5, #4]
 80239f0:	9300      	str	r3, [sp, #0]
 80239f2:	4a0b      	ldr	r2, [pc, #44]	; (8023a20 <__strftime+0x7c0>)
 80239f4:	68ab      	ldr	r3, [r5, #8]
 80239f6:	e5e0      	b.n	80235ba <__strftime+0x35a>
 80239f8:	fffff894 	.word	0xfffff894
 80239fc:	fffff895 	.word	0xfffff895
 8023a00:	0802cbcf 	.word	0x0802cbcf
 8023a04:	0802cbb0 	.word	0x0802cbb0
 8023a08:	0802cbbe 	.word	0x0802cbbe
 8023a0c:	0802cbd3 	.word	0x0802cbd3
 8023a10:	0802cd24 	.word	0x0802cd24
 8023a14:	0802ce99 	.word	0x0802ce99
 8023a18:	0802cbe2 	.word	0x0802cbe2
 8023a1c:	0802cbd8 	.word	0x0802cbd8
 8023a20:	0802cbdd 	.word	0x0802cbdd
 8023a24:	f108 33ff 	add.w	r3, r8, #4294967295
 8023a28:	42a3      	cmp	r3, r4
 8023a2a:	f67f ac48 	bls.w	80232be <__strftime+0x5e>
 8023a2e:	69ab      	ldr	r3, [r5, #24]
 8023a30:	eb09 0204 	add.w	r2, r9, r4
 8023a34:	3401      	adds	r4, #1
 8023a36:	b913      	cbnz	r3, 8023a3e <__strftime+0x7de>
 8023a38:	2337      	movs	r3, #55	; 0x37
 8023a3a:	7013      	strb	r3, [r2, #0]
 8023a3c:	e512      	b.n	8023464 <__strftime+0x204>
 8023a3e:	3330      	adds	r3, #48	; 0x30
 8023a40:	e7fb      	b.n	8023a3a <__strftime+0x7da>
 8023a42:	69eb      	ldr	r3, [r5, #28]
 8023a44:	69aa      	ldr	r2, [r5, #24]
 8023a46:	3307      	adds	r3, #7
 8023a48:	1a9b      	subs	r3, r3, r2
 8023a4a:	2207      	movs	r2, #7
 8023a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8023a50:	e62f      	b.n	80236b2 <__strftime+0x452>
 8023a52:	4628      	mov	r0, r5
 8023a54:	f7ff fba2 	bl	802319c <iso_year_adjust>
 8023a58:	69aa      	ldr	r2, [r5, #24]
 8023a5a:	b132      	cbz	r2, 8023a6a <__strftime+0x80a>
 8023a5c:	3a01      	subs	r2, #1
 8023a5e:	2800      	cmp	r0, #0
 8023a60:	dc28      	bgt.n	8023ab4 <__strftime+0x854>
 8023a62:	69eb      	ldr	r3, [r5, #28]
 8023a64:	d103      	bne.n	8023a6e <__strftime+0x80e>
 8023a66:	330a      	adds	r3, #10
 8023a68:	e7ee      	b.n	8023a48 <__strftime+0x7e8>
 8023a6a:	2206      	movs	r2, #6
 8023a6c:	e7f7      	b.n	8023a5e <__strftime+0x7fe>
 8023a6e:	6968      	ldr	r0, [r5, #20]
 8023a70:	2800      	cmp	r0, #0
 8023a72:	eba2 0303 	sub.w	r3, r2, r3
 8023a76:	f240 726b 	movw	r2, #1899	; 0x76b
 8023a7a:	bfa8      	it	ge
 8023a7c:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8023a80:	4410      	add	r0, r2
 8023a82:	0782      	lsls	r2, r0, #30
 8023a84:	d105      	bne.n	8023a92 <__strftime+0x832>
 8023a86:	2264      	movs	r2, #100	; 0x64
 8023a88:	fb90 f1f2 	sdiv	r1, r0, r2
 8023a8c:	fb02 0111 	mls	r1, r2, r1, r0
 8023a90:	b971      	cbnz	r1, 8023ab0 <__strftime+0x850>
 8023a92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8023a96:	fb90 f2f1 	sdiv	r2, r0, r1
 8023a9a:	fb01 0212 	mls	r2, r1, r2, r0
 8023a9e:	fab2 f282 	clz	r2, r2
 8023aa2:	0952      	lsrs	r2, r2, #5
 8023aa4:	1a9a      	subs	r2, r3, r2
 8023aa6:	2a05      	cmp	r2, #5
 8023aa8:	bfb4      	ite	lt
 8023aaa:	2335      	movlt	r3, #53	; 0x35
 8023aac:	2334      	movge	r3, #52	; 0x34
 8023aae:	e600      	b.n	80236b2 <__strftime+0x452>
 8023ab0:	2201      	movs	r2, #1
 8023ab2:	e7f7      	b.n	8023aa4 <__strftime+0x844>
 8023ab4:	2301      	movs	r3, #1
 8023ab6:	e5fc      	b.n	80236b2 <__strftime+0x452>
 8023ab8:	f108 33ff 	add.w	r3, r8, #4294967295
 8023abc:	42a3      	cmp	r3, r4
 8023abe:	f67f abfe 	bls.w	80232be <__strftime+0x5e>
 8023ac2:	69ab      	ldr	r3, [r5, #24]
 8023ac4:	3330      	adds	r3, #48	; 0x30
 8023ac6:	e6d1      	b.n	802386c <__strftime+0x60c>
 8023ac8:	69ab      	ldr	r3, [r5, #24]
 8023aca:	b13b      	cbz	r3, 8023adc <__strftime+0x87c>
 8023acc:	3b01      	subs	r3, #1
 8023ace:	69ea      	ldr	r2, [r5, #28]
 8023ad0:	3207      	adds	r2, #7
 8023ad2:	1ad2      	subs	r2, r2, r3
 8023ad4:	2307      	movs	r3, #7
 8023ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ada:	e5ea      	b.n	80236b2 <__strftime+0x452>
 8023adc:	2306      	movs	r3, #6
 8023ade:	e7f6      	b.n	8023ace <__strftime+0x86e>
 8023ae0:	6968      	ldr	r0, [r5, #20]
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	db05      	blt.n	8023af2 <__strftime+0x892>
 8023ae6:	2264      	movs	r2, #100	; 0x64
 8023ae8:	fb90 f3f2 	sdiv	r3, r0, r2
 8023aec:	fb03 0312 	mls	r3, r3, r2, r0
 8023af0:	e5df      	b.n	80236b2 <__strftime+0x452>
 8023af2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023af6:	f000 fd81 	bl	80245fc <abs>
 8023afa:	e7f4      	b.n	8023ae6 <__strftime+0x886>
 8023afc:	696b      	ldr	r3, [r5, #20]
 8023afe:	4a4c      	ldr	r2, [pc, #304]	; (8023c30 <__strftime+0x9d0>)
 8023b00:	4293      	cmp	r3, r2
 8023b02:	da09      	bge.n	8023b18 <__strftime+0x8b8>
 8023b04:	212d      	movs	r1, #45	; 0x2d
 8023b06:	f88d 1020 	strb.w	r1, [sp, #32]
 8023b0a:	eba2 0a03 	sub.w	sl, r2, r3
 8023b0e:	b106      	cbz	r6, 8023b12 <__strftime+0x8b2>
 8023b10:	3e01      	subs	r6, #1
 8023b12:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8023b16:	e00b      	b.n	8023b30 <__strftime+0x8d0>
 8023b18:	2f2b      	cmp	r7, #43	; 0x2b
 8023b1a:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8023b1e:	d106      	bne.n	8023b2e <__strftime+0x8ce>
 8023b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8023b24:	459a      	cmp	sl, r3
 8023b26:	d902      	bls.n	8023b2e <__strftime+0x8ce>
 8023b28:	f88d 7020 	strb.w	r7, [sp, #32]
 8023b2c:	e7ef      	b.n	8023b0e <__strftime+0x8ae>
 8023b2e:	ab08      	add	r3, sp, #32
 8023b30:	2225      	movs	r2, #37	; 0x25
 8023b32:	701a      	strb	r2, [r3, #0]
 8023b34:	b937      	cbnz	r7, 8023b44 <__strftime+0x8e4>
 8023b36:	1c58      	adds	r0, r3, #1
 8023b38:	493e      	ldr	r1, [pc, #248]	; (8023c34 <__strftime+0x9d4>)
 8023b3a:	f7ff fb26 	bl	802318a <strcpy>
 8023b3e:	f8cd a000 	str.w	sl, [sp]
 8023b42:	e665      	b.n	8023810 <__strftime+0x5b0>
 8023b44:	2230      	movs	r2, #48	; 0x30
 8023b46:	1c98      	adds	r0, r3, #2
 8023b48:	705a      	strb	r2, [r3, #1]
 8023b4a:	e7f5      	b.n	8023b38 <__strftime+0x8d8>
 8023b4c:	6a2b      	ldr	r3, [r5, #32]
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	f6ff ac88 	blt.w	8023464 <__strftime+0x204>
 8023b54:	f000 fa56 	bl	8024004 <__tz_lock>
 8023b58:	9b04      	ldr	r3, [sp, #16]
 8023b5a:	b90b      	cbnz	r3, 8023b60 <__strftime+0x900>
 8023b5c:	f000 fa5e 	bl	802401c <_tzset_unlocked>
 8023b60:	f000 fe1a 	bl	8024798 <__gettzinfo>
 8023b64:	6a2b      	ldr	r3, [r5, #32]
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	bfcc      	ite	gt
 8023b6a:	2350      	movgt	r3, #80	; 0x50
 8023b6c:	2328      	movle	r3, #40	; 0x28
 8023b6e:	eb09 0704 	add.w	r7, r9, r4
 8023b72:	58c6      	ldr	r6, [r0, r3]
 8023b74:	f000 fa4c 	bl	8024010 <__tz_unlock>
 8023b78:	4276      	negs	r6, r6
 8023b7a:	233c      	movs	r3, #60	; 0x3c
 8023b7c:	fb96 f0f3 	sdiv	r0, r6, r3
 8023b80:	f000 fece 	bl	8024920 <labs>
 8023b84:	233c      	movs	r3, #60	; 0x3c
 8023b86:	eba8 0a04 	sub.w	sl, r8, r4
 8023b8a:	fb90 f2f3 	sdiv	r2, r0, r3
 8023b8e:	fb02 0013 	mls	r0, r2, r3, r0
 8023b92:	9000      	str	r0, [sp, #0]
 8023b94:	4a28      	ldr	r2, [pc, #160]	; (8023c38 <__strftime+0x9d8>)
 8023b96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8023b9a:	4651      	mov	r1, sl
 8023b9c:	4638      	mov	r0, r7
 8023b9e:	fb96 f3f3 	sdiv	r3, r6, r3
 8023ba2:	f001 fbbb 	bl	802531c <sniprintf>
 8023ba6:	2800      	cmp	r0, #0
 8023ba8:	f6ff ab89 	blt.w	80232be <__strftime+0x5e>
 8023bac:	4404      	add	r4, r0
 8023bae:	45a0      	cmp	r8, r4
 8023bb0:	f67f ab85 	bls.w	80232be <__strftime+0x5e>
 8023bb4:	2301      	movs	r3, #1
 8023bb6:	9304      	str	r3, [sp, #16]
 8023bb8:	e454      	b.n	8023464 <__strftime+0x204>
 8023bba:	6a2b      	ldr	r3, [r5, #32]
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	f6ff ac51 	blt.w	8023464 <__strftime+0x204>
 8023bc2:	f000 fa1f 	bl	8024004 <__tz_lock>
 8023bc6:	9b04      	ldr	r3, [sp, #16]
 8023bc8:	b90b      	cbnz	r3, 8023bce <__strftime+0x96e>
 8023bca:	f000 fa27 	bl	802401c <_tzset_unlocked>
 8023bce:	6a2b      	ldr	r3, [r5, #32]
 8023bd0:	4a1a      	ldr	r2, [pc, #104]	; (8023c3c <__strftime+0x9dc>)
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	bfd4      	ite	le
 8023bd6:	2300      	movle	r3, #0
 8023bd8:	2301      	movgt	r3, #1
 8023bda:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023bde:	4630      	mov	r0, r6
 8023be0:	f7dc fb2c 	bl	800023c <strlen>
 8023be4:	3e01      	subs	r6, #1
 8023be6:	4420      	add	r0, r4
 8023be8:	f108 33ff 	add.w	r3, r8, #4294967295
 8023bec:	42a0      	cmp	r0, r4
 8023bee:	d102      	bne.n	8023bf6 <__strftime+0x996>
 8023bf0:	f000 fa0e 	bl	8024010 <__tz_unlock>
 8023bf4:	e7de      	b.n	8023bb4 <__strftime+0x954>
 8023bf6:	42a3      	cmp	r3, r4
 8023bf8:	d905      	bls.n	8023c06 <__strftime+0x9a6>
 8023bfa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023bfe:	f809 2004 	strb.w	r2, [r9, r4]
 8023c02:	3401      	adds	r4, #1
 8023c04:	e7f2      	b.n	8023bec <__strftime+0x98c>
 8023c06:	f000 fa03 	bl	8024010 <__tz_unlock>
 8023c0a:	f7ff bb58 	b.w	80232be <__strftime+0x5e>
 8023c0e:	f108 33ff 	add.w	r3, r8, #4294967295
 8023c12:	42a3      	cmp	r3, r4
 8023c14:	f67f ab53 	bls.w	80232be <__strftime+0x5e>
 8023c18:	2325      	movs	r3, #37	; 0x25
 8023c1a:	e627      	b.n	802386c <__strftime+0x60c>
 8023c1c:	f1b8 0f00 	cmp.w	r8, #0
 8023c20:	d002      	beq.n	8023c28 <__strftime+0x9c8>
 8023c22:	2300      	movs	r3, #0
 8023c24:	f809 3004 	strb.w	r3, [r9, r4]
 8023c28:	4620      	mov	r0, r4
 8023c2a:	b011      	add	sp, #68	; 0x44
 8023c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c30:	fffff894 	.word	0xfffff894
 8023c34:	0802cbcf 	.word	0x0802cbcf
 8023c38:	0802cbec 	.word	0x0802cbec
 8023c3c:	2000016c 	.word	0x2000016c

08023c40 <strftime>:
 8023c40:	b513      	push	{r0, r1, r4, lr}
 8023c42:	4c03      	ldr	r4, [pc, #12]	; (8023c50 <strftime+0x10>)
 8023c44:	9400      	str	r4, [sp, #0]
 8023c46:	f7ff fb0b 	bl	8023260 <__strftime>
 8023c4a:	b002      	add	sp, #8
 8023c4c:	bd10      	pop	{r4, pc}
 8023c4e:	bf00      	nop
 8023c50:	200001d0 	.word	0x200001d0

08023c54 <strstr>:
 8023c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c56:	780c      	ldrb	r4, [r1, #0]
 8023c58:	b164      	cbz	r4, 8023c74 <strstr+0x20>
 8023c5a:	4603      	mov	r3, r0
 8023c5c:	781a      	ldrb	r2, [r3, #0]
 8023c5e:	4618      	mov	r0, r3
 8023c60:	1c5e      	adds	r6, r3, #1
 8023c62:	b90a      	cbnz	r2, 8023c68 <strstr+0x14>
 8023c64:	4610      	mov	r0, r2
 8023c66:	e005      	b.n	8023c74 <strstr+0x20>
 8023c68:	4294      	cmp	r4, r2
 8023c6a:	d108      	bne.n	8023c7e <strstr+0x2a>
 8023c6c:	460d      	mov	r5, r1
 8023c6e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8023c72:	b902      	cbnz	r2, 8023c76 <strstr+0x22>
 8023c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c76:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8023c7a:	4297      	cmp	r7, r2
 8023c7c:	d0f7      	beq.n	8023c6e <strstr+0x1a>
 8023c7e:	4633      	mov	r3, r6
 8023c80:	e7ec      	b.n	8023c5c <strstr+0x8>
	...

08023c84 <_strtol_l.isra.0>:
 8023c84:	2b01      	cmp	r3, #1
 8023c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023c8a:	d001      	beq.n	8023c90 <_strtol_l.isra.0+0xc>
 8023c8c:	2b24      	cmp	r3, #36	; 0x24
 8023c8e:	d906      	bls.n	8023c9e <_strtol_l.isra.0+0x1a>
 8023c90:	f7fe fa84 	bl	802219c <__errno>
 8023c94:	2316      	movs	r3, #22
 8023c96:	6003      	str	r3, [r0, #0]
 8023c98:	2000      	movs	r0, #0
 8023c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c9e:	4f3a      	ldr	r7, [pc, #232]	; (8023d88 <_strtol_l.isra.0+0x104>)
 8023ca0:	468e      	mov	lr, r1
 8023ca2:	4676      	mov	r6, lr
 8023ca4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8023ca8:	5de5      	ldrb	r5, [r4, r7]
 8023caa:	f015 0508 	ands.w	r5, r5, #8
 8023cae:	d1f8      	bne.n	8023ca2 <_strtol_l.isra.0+0x1e>
 8023cb0:	2c2d      	cmp	r4, #45	; 0x2d
 8023cb2:	d134      	bne.n	8023d1e <_strtol_l.isra.0+0x9a>
 8023cb4:	f89e 4000 	ldrb.w	r4, [lr]
 8023cb8:	f04f 0801 	mov.w	r8, #1
 8023cbc:	f106 0e02 	add.w	lr, r6, #2
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	d05c      	beq.n	8023d7e <_strtol_l.isra.0+0xfa>
 8023cc4:	2b10      	cmp	r3, #16
 8023cc6:	d10c      	bne.n	8023ce2 <_strtol_l.isra.0+0x5e>
 8023cc8:	2c30      	cmp	r4, #48	; 0x30
 8023cca:	d10a      	bne.n	8023ce2 <_strtol_l.isra.0+0x5e>
 8023ccc:	f89e 4000 	ldrb.w	r4, [lr]
 8023cd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023cd4:	2c58      	cmp	r4, #88	; 0x58
 8023cd6:	d14d      	bne.n	8023d74 <_strtol_l.isra.0+0xf0>
 8023cd8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8023cdc:	2310      	movs	r3, #16
 8023cde:	f10e 0e02 	add.w	lr, lr, #2
 8023ce2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8023ce6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023cea:	2600      	movs	r6, #0
 8023cec:	fbbc f9f3 	udiv	r9, ip, r3
 8023cf0:	4635      	mov	r5, r6
 8023cf2:	fb03 ca19 	mls	sl, r3, r9, ip
 8023cf6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8023cfa:	2f09      	cmp	r7, #9
 8023cfc:	d818      	bhi.n	8023d30 <_strtol_l.isra.0+0xac>
 8023cfe:	463c      	mov	r4, r7
 8023d00:	42a3      	cmp	r3, r4
 8023d02:	dd24      	ble.n	8023d4e <_strtol_l.isra.0+0xca>
 8023d04:	2e00      	cmp	r6, #0
 8023d06:	db1f      	blt.n	8023d48 <_strtol_l.isra.0+0xc4>
 8023d08:	45a9      	cmp	r9, r5
 8023d0a:	d31d      	bcc.n	8023d48 <_strtol_l.isra.0+0xc4>
 8023d0c:	d101      	bne.n	8023d12 <_strtol_l.isra.0+0x8e>
 8023d0e:	45a2      	cmp	sl, r4
 8023d10:	db1a      	blt.n	8023d48 <_strtol_l.isra.0+0xc4>
 8023d12:	fb05 4503 	mla	r5, r5, r3, r4
 8023d16:	2601      	movs	r6, #1
 8023d18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8023d1c:	e7eb      	b.n	8023cf6 <_strtol_l.isra.0+0x72>
 8023d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8023d20:	bf08      	it	eq
 8023d22:	f89e 4000 	ldrbeq.w	r4, [lr]
 8023d26:	46a8      	mov	r8, r5
 8023d28:	bf08      	it	eq
 8023d2a:	f106 0e02 	addeq.w	lr, r6, #2
 8023d2e:	e7c7      	b.n	8023cc0 <_strtol_l.isra.0+0x3c>
 8023d30:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8023d34:	2f19      	cmp	r7, #25
 8023d36:	d801      	bhi.n	8023d3c <_strtol_l.isra.0+0xb8>
 8023d38:	3c37      	subs	r4, #55	; 0x37
 8023d3a:	e7e1      	b.n	8023d00 <_strtol_l.isra.0+0x7c>
 8023d3c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8023d40:	2f19      	cmp	r7, #25
 8023d42:	d804      	bhi.n	8023d4e <_strtol_l.isra.0+0xca>
 8023d44:	3c57      	subs	r4, #87	; 0x57
 8023d46:	e7db      	b.n	8023d00 <_strtol_l.isra.0+0x7c>
 8023d48:	f04f 36ff 	mov.w	r6, #4294967295
 8023d4c:	e7e4      	b.n	8023d18 <_strtol_l.isra.0+0x94>
 8023d4e:	2e00      	cmp	r6, #0
 8023d50:	da05      	bge.n	8023d5e <_strtol_l.isra.0+0xda>
 8023d52:	2322      	movs	r3, #34	; 0x22
 8023d54:	6003      	str	r3, [r0, #0]
 8023d56:	4665      	mov	r5, ip
 8023d58:	b942      	cbnz	r2, 8023d6c <_strtol_l.isra.0+0xe8>
 8023d5a:	4628      	mov	r0, r5
 8023d5c:	e79d      	b.n	8023c9a <_strtol_l.isra.0+0x16>
 8023d5e:	f1b8 0f00 	cmp.w	r8, #0
 8023d62:	d000      	beq.n	8023d66 <_strtol_l.isra.0+0xe2>
 8023d64:	426d      	negs	r5, r5
 8023d66:	2a00      	cmp	r2, #0
 8023d68:	d0f7      	beq.n	8023d5a <_strtol_l.isra.0+0xd6>
 8023d6a:	b10e      	cbz	r6, 8023d70 <_strtol_l.isra.0+0xec>
 8023d6c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8023d70:	6011      	str	r1, [r2, #0]
 8023d72:	e7f2      	b.n	8023d5a <_strtol_l.isra.0+0xd6>
 8023d74:	2430      	movs	r4, #48	; 0x30
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d1b3      	bne.n	8023ce2 <_strtol_l.isra.0+0x5e>
 8023d7a:	2308      	movs	r3, #8
 8023d7c:	e7b1      	b.n	8023ce2 <_strtol_l.isra.0+0x5e>
 8023d7e:	2c30      	cmp	r4, #48	; 0x30
 8023d80:	d0a4      	beq.n	8023ccc <_strtol_l.isra.0+0x48>
 8023d82:	230a      	movs	r3, #10
 8023d84:	e7ad      	b.n	8023ce2 <_strtol_l.isra.0+0x5e>
 8023d86:	bf00      	nop
 8023d88:	0802ce99 	.word	0x0802ce99

08023d8c <_strtol_r>:
 8023d8c:	f7ff bf7a 	b.w	8023c84 <_strtol_l.isra.0>

08023d90 <strtol>:
 8023d90:	4613      	mov	r3, r2
 8023d92:	460a      	mov	r2, r1
 8023d94:	4601      	mov	r1, r0
 8023d96:	4802      	ldr	r0, [pc, #8]	; (8023da0 <strtol+0x10>)
 8023d98:	6800      	ldr	r0, [r0, #0]
 8023d9a:	f7ff bf73 	b.w	8023c84 <_strtol_l.isra.0>
 8023d9e:	bf00      	nop
 8023da0:	20000108 	.word	0x20000108

08023da4 <_strtoul_l.isra.0>:
 8023da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023da8:	4e3b      	ldr	r6, [pc, #236]	; (8023e98 <_strtoul_l.isra.0+0xf4>)
 8023daa:	4686      	mov	lr, r0
 8023dac:	468c      	mov	ip, r1
 8023dae:	4660      	mov	r0, ip
 8023db0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023db4:	5da5      	ldrb	r5, [r4, r6]
 8023db6:	f015 0508 	ands.w	r5, r5, #8
 8023dba:	d1f8      	bne.n	8023dae <_strtoul_l.isra.0+0xa>
 8023dbc:	2c2d      	cmp	r4, #45	; 0x2d
 8023dbe:	d134      	bne.n	8023e2a <_strtoul_l.isra.0+0x86>
 8023dc0:	f89c 4000 	ldrb.w	r4, [ip]
 8023dc4:	f04f 0801 	mov.w	r8, #1
 8023dc8:	f100 0c02 	add.w	ip, r0, #2
 8023dcc:	2b00      	cmp	r3, #0
 8023dce:	d05e      	beq.n	8023e8e <_strtoul_l.isra.0+0xea>
 8023dd0:	2b10      	cmp	r3, #16
 8023dd2:	d10c      	bne.n	8023dee <_strtoul_l.isra.0+0x4a>
 8023dd4:	2c30      	cmp	r4, #48	; 0x30
 8023dd6:	d10a      	bne.n	8023dee <_strtoul_l.isra.0+0x4a>
 8023dd8:	f89c 0000 	ldrb.w	r0, [ip]
 8023ddc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8023de0:	2858      	cmp	r0, #88	; 0x58
 8023de2:	d14f      	bne.n	8023e84 <_strtoul_l.isra.0+0xe0>
 8023de4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8023de8:	2310      	movs	r3, #16
 8023dea:	f10c 0c02 	add.w	ip, ip, #2
 8023dee:	f04f 37ff 	mov.w	r7, #4294967295
 8023df2:	2500      	movs	r5, #0
 8023df4:	fbb7 f7f3 	udiv	r7, r7, r3
 8023df8:	fb03 f907 	mul.w	r9, r3, r7
 8023dfc:	ea6f 0909 	mvn.w	r9, r9
 8023e00:	4628      	mov	r0, r5
 8023e02:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8023e06:	2e09      	cmp	r6, #9
 8023e08:	d818      	bhi.n	8023e3c <_strtoul_l.isra.0+0x98>
 8023e0a:	4634      	mov	r4, r6
 8023e0c:	42a3      	cmp	r3, r4
 8023e0e:	dd24      	ble.n	8023e5a <_strtoul_l.isra.0+0xb6>
 8023e10:	2d00      	cmp	r5, #0
 8023e12:	db1f      	blt.n	8023e54 <_strtoul_l.isra.0+0xb0>
 8023e14:	4287      	cmp	r7, r0
 8023e16:	d31d      	bcc.n	8023e54 <_strtoul_l.isra.0+0xb0>
 8023e18:	d101      	bne.n	8023e1e <_strtoul_l.isra.0+0x7a>
 8023e1a:	45a1      	cmp	r9, r4
 8023e1c:	db1a      	blt.n	8023e54 <_strtoul_l.isra.0+0xb0>
 8023e1e:	fb00 4003 	mla	r0, r0, r3, r4
 8023e22:	2501      	movs	r5, #1
 8023e24:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023e28:	e7eb      	b.n	8023e02 <_strtoul_l.isra.0+0x5e>
 8023e2a:	2c2b      	cmp	r4, #43	; 0x2b
 8023e2c:	bf08      	it	eq
 8023e2e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8023e32:	46a8      	mov	r8, r5
 8023e34:	bf08      	it	eq
 8023e36:	f100 0c02 	addeq.w	ip, r0, #2
 8023e3a:	e7c7      	b.n	8023dcc <_strtoul_l.isra.0+0x28>
 8023e3c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8023e40:	2e19      	cmp	r6, #25
 8023e42:	d801      	bhi.n	8023e48 <_strtoul_l.isra.0+0xa4>
 8023e44:	3c37      	subs	r4, #55	; 0x37
 8023e46:	e7e1      	b.n	8023e0c <_strtoul_l.isra.0+0x68>
 8023e48:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8023e4c:	2e19      	cmp	r6, #25
 8023e4e:	d804      	bhi.n	8023e5a <_strtoul_l.isra.0+0xb6>
 8023e50:	3c57      	subs	r4, #87	; 0x57
 8023e52:	e7db      	b.n	8023e0c <_strtoul_l.isra.0+0x68>
 8023e54:	f04f 35ff 	mov.w	r5, #4294967295
 8023e58:	e7e4      	b.n	8023e24 <_strtoul_l.isra.0+0x80>
 8023e5a:	2d00      	cmp	r5, #0
 8023e5c:	da07      	bge.n	8023e6e <_strtoul_l.isra.0+0xca>
 8023e5e:	2322      	movs	r3, #34	; 0x22
 8023e60:	f8ce 3000 	str.w	r3, [lr]
 8023e64:	f04f 30ff 	mov.w	r0, #4294967295
 8023e68:	b942      	cbnz	r2, 8023e7c <_strtoul_l.isra.0+0xd8>
 8023e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023e6e:	f1b8 0f00 	cmp.w	r8, #0
 8023e72:	d000      	beq.n	8023e76 <_strtoul_l.isra.0+0xd2>
 8023e74:	4240      	negs	r0, r0
 8023e76:	2a00      	cmp	r2, #0
 8023e78:	d0f7      	beq.n	8023e6a <_strtoul_l.isra.0+0xc6>
 8023e7a:	b10d      	cbz	r5, 8023e80 <_strtoul_l.isra.0+0xdc>
 8023e7c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8023e80:	6011      	str	r1, [r2, #0]
 8023e82:	e7f2      	b.n	8023e6a <_strtoul_l.isra.0+0xc6>
 8023e84:	2430      	movs	r4, #48	; 0x30
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d1b1      	bne.n	8023dee <_strtoul_l.isra.0+0x4a>
 8023e8a:	2308      	movs	r3, #8
 8023e8c:	e7af      	b.n	8023dee <_strtoul_l.isra.0+0x4a>
 8023e8e:	2c30      	cmp	r4, #48	; 0x30
 8023e90:	d0a2      	beq.n	8023dd8 <_strtoul_l.isra.0+0x34>
 8023e92:	230a      	movs	r3, #10
 8023e94:	e7ab      	b.n	8023dee <_strtoul_l.isra.0+0x4a>
 8023e96:	bf00      	nop
 8023e98:	0802ce99 	.word	0x0802ce99

08023e9c <_strtoul_r>:
 8023e9c:	f7ff bf82 	b.w	8023da4 <_strtoul_l.isra.0>

08023ea0 <strtoul>:
 8023ea0:	4613      	mov	r3, r2
 8023ea2:	460a      	mov	r2, r1
 8023ea4:	4601      	mov	r1, r0
 8023ea6:	4802      	ldr	r0, [pc, #8]	; (8023eb0 <strtoul+0x10>)
 8023ea8:	6800      	ldr	r0, [r0, #0]
 8023eaa:	f7ff bf7b 	b.w	8023da4 <_strtoul_l.isra.0>
 8023eae:	bf00      	nop
 8023eb0:	20000108 	.word	0x20000108

08023eb4 <__tzcalc_limits>:
 8023eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023eb8:	4680      	mov	r8, r0
 8023eba:	f000 fc6d 	bl	8024798 <__gettzinfo>
 8023ebe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8023ec2:	4598      	cmp	r8, r3
 8023ec4:	f340 8098 	ble.w	8023ff8 <__tzcalc_limits+0x144>
 8023ec8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8023ecc:	4443      	add	r3, r8
 8023ece:	109b      	asrs	r3, r3, #2
 8023ed0:	f240 126d 	movw	r2, #365	; 0x16d
 8023ed4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8023ed8:	fb02 3505 	mla	r5, r2, r5, r3
 8023edc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8023ee0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8023ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8023ee8:	441d      	add	r5, r3
 8023eea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023eee:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8023ef2:	fb98 f7f3 	sdiv	r7, r8, r3
 8023ef6:	fb03 8717 	mls	r7, r3, r7, r8
 8023efa:	4442      	add	r2, r8
 8023efc:	fab7 fc87 	clz	ip, r7
 8023f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8023f04:	f008 0303 	and.w	r3, r8, #3
 8023f08:	4415      	add	r5, r2
 8023f0a:	2264      	movs	r2, #100	; 0x64
 8023f0c:	f8c0 8004 	str.w	r8, [r0, #4]
 8023f10:	fb98 f6f2 	sdiv	r6, r8, r2
 8023f14:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023f18:	fb02 8616 	mls	r6, r2, r6, r8
 8023f1c:	4604      	mov	r4, r0
 8023f1e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8023f22:	9300      	str	r3, [sp, #0]
 8023f24:	f04f 0e07 	mov.w	lr, #7
 8023f28:	7a22      	ldrb	r2, [r4, #8]
 8023f2a:	6963      	ldr	r3, [r4, #20]
 8023f2c:	2a4a      	cmp	r2, #74	; 0x4a
 8023f2e:	d128      	bne.n	8023f82 <__tzcalc_limits+0xce>
 8023f30:	9900      	ldr	r1, [sp, #0]
 8023f32:	18ea      	adds	r2, r5, r3
 8023f34:	b901      	cbnz	r1, 8023f38 <__tzcalc_limits+0x84>
 8023f36:	b906      	cbnz	r6, 8023f3a <__tzcalc_limits+0x86>
 8023f38:	bb0f      	cbnz	r7, 8023f7e <__tzcalc_limits+0xca>
 8023f3a:	2b3b      	cmp	r3, #59	; 0x3b
 8023f3c:	bfd4      	ite	le
 8023f3e:	2300      	movle	r3, #0
 8023f40:	2301      	movgt	r3, #1
 8023f42:	4413      	add	r3, r2
 8023f44:	1e5a      	subs	r2, r3, #1
 8023f46:	69a3      	ldr	r3, [r4, #24]
 8023f48:	492c      	ldr	r1, [pc, #176]	; (8023ffc <__tzcalc_limits+0x148>)
 8023f4a:	fb01 3202 	mla	r2, r1, r2, r3
 8023f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023f50:	4413      	add	r3, r2
 8023f52:	461a      	mov	r2, r3
 8023f54:	17db      	asrs	r3, r3, #31
 8023f56:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8023f5a:	3428      	adds	r4, #40	; 0x28
 8023f5c:	45a3      	cmp	fp, r4
 8023f5e:	d1e3      	bne.n	8023f28 <__tzcalc_limits+0x74>
 8023f60:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8023f64:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8023f68:	4294      	cmp	r4, r2
 8023f6a:	eb75 0303 	sbcs.w	r3, r5, r3
 8023f6e:	bfb4      	ite	lt
 8023f70:	2301      	movlt	r3, #1
 8023f72:	2300      	movge	r3, #0
 8023f74:	6003      	str	r3, [r0, #0]
 8023f76:	2001      	movs	r0, #1
 8023f78:	b003      	add	sp, #12
 8023f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f7e:	2300      	movs	r3, #0
 8023f80:	e7df      	b.n	8023f42 <__tzcalc_limits+0x8e>
 8023f82:	2a44      	cmp	r2, #68	; 0x44
 8023f84:	d101      	bne.n	8023f8a <__tzcalc_limits+0xd6>
 8023f86:	18ea      	adds	r2, r5, r3
 8023f88:	e7dd      	b.n	8023f46 <__tzcalc_limits+0x92>
 8023f8a:	9a00      	ldr	r2, [sp, #0]
 8023f8c:	bb72      	cbnz	r2, 8023fec <__tzcalc_limits+0x138>
 8023f8e:	2e00      	cmp	r6, #0
 8023f90:	bf0c      	ite	eq
 8023f92:	46e0      	moveq	r8, ip
 8023f94:	f04f 0801 	movne.w	r8, #1
 8023f98:	4919      	ldr	r1, [pc, #100]	; (8024000 <__tzcalc_limits+0x14c>)
 8023f9a:	68e2      	ldr	r2, [r4, #12]
 8023f9c:	9201      	str	r2, [sp, #4]
 8023f9e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8023fa2:	fb0a 1808 	mla	r8, sl, r8, r1
 8023fa6:	462a      	mov	r2, r5
 8023fa8:	f04f 0900 	mov.w	r9, #0
 8023fac:	f1a8 0804 	sub.w	r8, r8, #4
 8023fb0:	9901      	ldr	r1, [sp, #4]
 8023fb2:	f109 0901 	add.w	r9, r9, #1
 8023fb6:	4549      	cmp	r1, r9
 8023fb8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8023fbc:	dc18      	bgt.n	8023ff0 <__tzcalc_limits+0x13c>
 8023fbe:	f102 0804 	add.w	r8, r2, #4
 8023fc2:	fb98 f9fe 	sdiv	r9, r8, lr
 8023fc6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8023fca:	eba8 0909 	sub.w	r9, r8, r9
 8023fce:	ebb3 0909 	subs.w	r9, r3, r9
 8023fd2:	6923      	ldr	r3, [r4, #16]
 8023fd4:	f103 33ff 	add.w	r3, r3, #4294967295
 8023fd8:	bf48      	it	mi
 8023fda:	f109 0907 	addmi.w	r9, r9, #7
 8023fde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8023fe2:	444b      	add	r3, r9
 8023fe4:	4553      	cmp	r3, sl
 8023fe6:	da05      	bge.n	8023ff4 <__tzcalc_limits+0x140>
 8023fe8:	441a      	add	r2, r3
 8023fea:	e7ac      	b.n	8023f46 <__tzcalc_limits+0x92>
 8023fec:	46e0      	mov	r8, ip
 8023fee:	e7d3      	b.n	8023f98 <__tzcalc_limits+0xe4>
 8023ff0:	4452      	add	r2, sl
 8023ff2:	e7dd      	b.n	8023fb0 <__tzcalc_limits+0xfc>
 8023ff4:	3b07      	subs	r3, #7
 8023ff6:	e7f5      	b.n	8023fe4 <__tzcalc_limits+0x130>
 8023ff8:	2000      	movs	r0, #0
 8023ffa:	e7bd      	b.n	8023f78 <__tzcalc_limits+0xc4>
 8023ffc:	00015180 	.word	0x00015180
 8024000:	0802cae0 	.word	0x0802cae0

08024004 <__tz_lock>:
 8024004:	4801      	ldr	r0, [pc, #4]	; (802400c <__tz_lock+0x8>)
 8024006:	f7fe be21 	b.w	8022c4c <__retarget_lock_acquire>
 802400a:	bf00      	nop
 802400c:	2000112b 	.word	0x2000112b

08024010 <__tz_unlock>:
 8024010:	4801      	ldr	r0, [pc, #4]	; (8024018 <__tz_unlock+0x8>)
 8024012:	f7fe be1d 	b.w	8022c50 <__retarget_lock_release>
 8024016:	bf00      	nop
 8024018:	2000112b 	.word	0x2000112b

0802401c <_tzset_unlocked>:
 802401c:	4b01      	ldr	r3, [pc, #4]	; (8024024 <_tzset_unlocked+0x8>)
 802401e:	6818      	ldr	r0, [r3, #0]
 8024020:	f000 b802 	b.w	8024028 <_tzset_unlocked_r>
 8024024:	20000108 	.word	0x20000108

08024028 <_tzset_unlocked_r>:
 8024028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802402c:	b08d      	sub	sp, #52	; 0x34
 802402e:	4607      	mov	r7, r0
 8024030:	f000 fbb2 	bl	8024798 <__gettzinfo>
 8024034:	49ae      	ldr	r1, [pc, #696]	; (80242f0 <_tzset_unlocked_r+0x2c8>)
 8024036:	4eaf      	ldr	r6, [pc, #700]	; (80242f4 <_tzset_unlocked_r+0x2cc>)
 8024038:	4605      	mov	r5, r0
 802403a:	4638      	mov	r0, r7
 802403c:	f000 fba4 	bl	8024788 <_getenv_r>
 8024040:	4604      	mov	r4, r0
 8024042:	b970      	cbnz	r0, 8024062 <_tzset_unlocked_r+0x3a>
 8024044:	4bac      	ldr	r3, [pc, #688]	; (80242f8 <_tzset_unlocked_r+0x2d0>)
 8024046:	4aad      	ldr	r2, [pc, #692]	; (80242fc <_tzset_unlocked_r+0x2d4>)
 8024048:	6018      	str	r0, [r3, #0]
 802404a:	4bad      	ldr	r3, [pc, #692]	; (8024300 <_tzset_unlocked_r+0x2d8>)
 802404c:	6018      	str	r0, [r3, #0]
 802404e:	4bad      	ldr	r3, [pc, #692]	; (8024304 <_tzset_unlocked_r+0x2dc>)
 8024050:	6830      	ldr	r0, [r6, #0]
 8024052:	e9c3 2200 	strd	r2, r2, [r3]
 8024056:	f7fe fe69 	bl	8022d2c <free>
 802405a:	6034      	str	r4, [r6, #0]
 802405c:	b00d      	add	sp, #52	; 0x34
 802405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024062:	6831      	ldr	r1, [r6, #0]
 8024064:	2900      	cmp	r1, #0
 8024066:	d15f      	bne.n	8024128 <_tzset_unlocked_r+0x100>
 8024068:	6830      	ldr	r0, [r6, #0]
 802406a:	f7fe fe5f 	bl	8022d2c <free>
 802406e:	4620      	mov	r0, r4
 8024070:	f7dc f8e4 	bl	800023c <strlen>
 8024074:	1c41      	adds	r1, r0, #1
 8024076:	4638      	mov	r0, r7
 8024078:	f7fe fed6 	bl	8022e28 <_malloc_r>
 802407c:	6030      	str	r0, [r6, #0]
 802407e:	2800      	cmp	r0, #0
 8024080:	d157      	bne.n	8024132 <_tzset_unlocked_r+0x10a>
 8024082:	7823      	ldrb	r3, [r4, #0]
 8024084:	4aa0      	ldr	r2, [pc, #640]	; (8024308 <_tzset_unlocked_r+0x2e0>)
 8024086:	49a1      	ldr	r1, [pc, #644]	; (802430c <_tzset_unlocked_r+0x2e4>)
 8024088:	2b3a      	cmp	r3, #58	; 0x3a
 802408a:	bf08      	it	eq
 802408c:	3401      	addeq	r4, #1
 802408e:	ae0a      	add	r6, sp, #40	; 0x28
 8024090:	4633      	mov	r3, r6
 8024092:	4620      	mov	r0, r4
 8024094:	f001 f976 	bl	8025384 <siscanf>
 8024098:	2800      	cmp	r0, #0
 802409a:	dddf      	ble.n	802405c <_tzset_unlocked_r+0x34>
 802409c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802409e:	18e7      	adds	r7, r4, r3
 80240a0:	5ce3      	ldrb	r3, [r4, r3]
 80240a2:	2b2d      	cmp	r3, #45	; 0x2d
 80240a4:	d149      	bne.n	802413a <_tzset_unlocked_r+0x112>
 80240a6:	3701      	adds	r7, #1
 80240a8:	f04f 34ff 	mov.w	r4, #4294967295
 80240ac:	f10d 0a20 	add.w	sl, sp, #32
 80240b0:	f10d 0b1e 	add.w	fp, sp, #30
 80240b4:	f04f 0800 	mov.w	r8, #0
 80240b8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80240bc:	4994      	ldr	r1, [pc, #592]	; (8024310 <_tzset_unlocked_r+0x2e8>)
 80240be:	9603      	str	r6, [sp, #12]
 80240c0:	f8cd b000 	str.w	fp, [sp]
 80240c4:	4633      	mov	r3, r6
 80240c6:	aa07      	add	r2, sp, #28
 80240c8:	4638      	mov	r0, r7
 80240ca:	f8ad 801e 	strh.w	r8, [sp, #30]
 80240ce:	f8ad 8020 	strh.w	r8, [sp, #32]
 80240d2:	f001 f957 	bl	8025384 <siscanf>
 80240d6:	4540      	cmp	r0, r8
 80240d8:	ddc0      	ble.n	802405c <_tzset_unlocked_r+0x34>
 80240da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80240de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80240e2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 802431c <_tzset_unlocked_r+0x2f4>
 80240e6:	213c      	movs	r1, #60	; 0x3c
 80240e8:	fb01 2203 	mla	r2, r1, r3, r2
 80240ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80240f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80240f4:	fb01 2303 	mla	r3, r1, r3, r2
 80240f8:	435c      	muls	r4, r3
 80240fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80240fc:	4c81      	ldr	r4, [pc, #516]	; (8024304 <_tzset_unlocked_r+0x2dc>)
 80240fe:	4b82      	ldr	r3, [pc, #520]	; (8024308 <_tzset_unlocked_r+0x2e0>)
 8024100:	6023      	str	r3, [r4, #0]
 8024102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024104:	4981      	ldr	r1, [pc, #516]	; (802430c <_tzset_unlocked_r+0x2e4>)
 8024106:	441f      	add	r7, r3
 8024108:	464a      	mov	r2, r9
 802410a:	4633      	mov	r3, r6
 802410c:	4638      	mov	r0, r7
 802410e:	f001 f939 	bl	8025384 <siscanf>
 8024112:	4540      	cmp	r0, r8
 8024114:	dc16      	bgt.n	8024144 <_tzset_unlocked_r+0x11c>
 8024116:	6823      	ldr	r3, [r4, #0]
 8024118:	6063      	str	r3, [r4, #4]
 802411a:	4b77      	ldr	r3, [pc, #476]	; (80242f8 <_tzset_unlocked_r+0x2d0>)
 802411c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802411e:	601a      	str	r2, [r3, #0]
 8024120:	4b77      	ldr	r3, [pc, #476]	; (8024300 <_tzset_unlocked_r+0x2d8>)
 8024122:	f8c3 8000 	str.w	r8, [r3]
 8024126:	e799      	b.n	802405c <_tzset_unlocked_r+0x34>
 8024128:	f7dc f890 	bl	800024c <strcmp>
 802412c:	2800      	cmp	r0, #0
 802412e:	d19b      	bne.n	8024068 <_tzset_unlocked_r+0x40>
 8024130:	e794      	b.n	802405c <_tzset_unlocked_r+0x34>
 8024132:	4621      	mov	r1, r4
 8024134:	f7ff f829 	bl	802318a <strcpy>
 8024138:	e7a3      	b.n	8024082 <_tzset_unlocked_r+0x5a>
 802413a:	2b2b      	cmp	r3, #43	; 0x2b
 802413c:	bf08      	it	eq
 802413e:	3701      	addeq	r7, #1
 8024140:	2401      	movs	r4, #1
 8024142:	e7b3      	b.n	80240ac <_tzset_unlocked_r+0x84>
 8024144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024146:	f8c4 9004 	str.w	r9, [r4, #4]
 802414a:	18fc      	adds	r4, r7, r3
 802414c:	5cfb      	ldrb	r3, [r7, r3]
 802414e:	2b2d      	cmp	r3, #45	; 0x2d
 8024150:	f040 808b 	bne.w	802426a <_tzset_unlocked_r+0x242>
 8024154:	3401      	adds	r4, #1
 8024156:	f04f 37ff 	mov.w	r7, #4294967295
 802415a:	2300      	movs	r3, #0
 802415c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024160:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024164:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024168:	930a      	str	r3, [sp, #40]	; 0x28
 802416a:	e9cd a602 	strd	sl, r6, [sp, #8]
 802416e:	e9cd b600 	strd	fp, r6, [sp]
 8024172:	4967      	ldr	r1, [pc, #412]	; (8024310 <_tzset_unlocked_r+0x2e8>)
 8024174:	4633      	mov	r3, r6
 8024176:	aa07      	add	r2, sp, #28
 8024178:	4620      	mov	r0, r4
 802417a:	f001 f903 	bl	8025384 <siscanf>
 802417e:	2800      	cmp	r0, #0
 8024180:	dc78      	bgt.n	8024274 <_tzset_unlocked_r+0x24c>
 8024182:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8024184:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8024188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802418a:	652f      	str	r7, [r5, #80]	; 0x50
 802418c:	441c      	add	r4, r3
 802418e:	462f      	mov	r7, r5
 8024190:	f04f 0900 	mov.w	r9, #0
 8024194:	7823      	ldrb	r3, [r4, #0]
 8024196:	2b2c      	cmp	r3, #44	; 0x2c
 8024198:	bf08      	it	eq
 802419a:	3401      	addeq	r4, #1
 802419c:	f894 8000 	ldrb.w	r8, [r4]
 80241a0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80241a4:	d178      	bne.n	8024298 <_tzset_unlocked_r+0x270>
 80241a6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80241aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80241ae:	ab09      	add	r3, sp, #36	; 0x24
 80241b0:	9300      	str	r3, [sp, #0]
 80241b2:	4958      	ldr	r1, [pc, #352]	; (8024314 <_tzset_unlocked_r+0x2ec>)
 80241b4:	9603      	str	r6, [sp, #12]
 80241b6:	4633      	mov	r3, r6
 80241b8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80241bc:	4620      	mov	r0, r4
 80241be:	f001 f8e1 	bl	8025384 <siscanf>
 80241c2:	2803      	cmp	r0, #3
 80241c4:	f47f af4a 	bne.w	802405c <_tzset_unlocked_r+0x34>
 80241c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80241cc:	1e4b      	subs	r3, r1, #1
 80241ce:	2b0b      	cmp	r3, #11
 80241d0:	f63f af44 	bhi.w	802405c <_tzset_unlocked_r+0x34>
 80241d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80241d8:	1e53      	subs	r3, r2, #1
 80241da:	2b04      	cmp	r3, #4
 80241dc:	f63f af3e 	bhi.w	802405c <_tzset_unlocked_r+0x34>
 80241e0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80241e4:	2b06      	cmp	r3, #6
 80241e6:	f63f af39 	bhi.w	802405c <_tzset_unlocked_r+0x34>
 80241ea:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80241ee:	f887 8008 	strb.w	r8, [r7, #8]
 80241f2:	617b      	str	r3, [r7, #20]
 80241f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241f6:	eb04 0803 	add.w	r8, r4, r3
 80241fa:	2302      	movs	r3, #2
 80241fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024200:	2300      	movs	r3, #0
 8024202:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024206:	f8ad 3020 	strh.w	r3, [sp, #32]
 802420a:	930a      	str	r3, [sp, #40]	; 0x28
 802420c:	f898 3000 	ldrb.w	r3, [r8]
 8024210:	2b2f      	cmp	r3, #47	; 0x2f
 8024212:	d109      	bne.n	8024228 <_tzset_unlocked_r+0x200>
 8024214:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024218:	e9cd b600 	strd	fp, r6, [sp]
 802421c:	493e      	ldr	r1, [pc, #248]	; (8024318 <_tzset_unlocked_r+0x2f0>)
 802421e:	4633      	mov	r3, r6
 8024220:	aa07      	add	r2, sp, #28
 8024222:	4640      	mov	r0, r8
 8024224:	f001 f8ae 	bl	8025384 <siscanf>
 8024228:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802422c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024230:	213c      	movs	r1, #60	; 0x3c
 8024232:	fb01 2203 	mla	r2, r1, r3, r2
 8024236:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802423a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802423e:	fb01 2303 	mla	r3, r1, r3, r2
 8024242:	61bb      	str	r3, [r7, #24]
 8024244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024246:	3728      	adds	r7, #40	; 0x28
 8024248:	4444      	add	r4, r8
 802424a:	f1b9 0f00 	cmp.w	r9, #0
 802424e:	d020      	beq.n	8024292 <_tzset_unlocked_r+0x26a>
 8024250:	6868      	ldr	r0, [r5, #4]
 8024252:	f7ff fe2f 	bl	8023eb4 <__tzcalc_limits>
 8024256:	4b28      	ldr	r3, [pc, #160]	; (80242f8 <_tzset_unlocked_r+0x2d0>)
 8024258:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802425a:	601a      	str	r2, [r3, #0]
 802425c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802425e:	1a9b      	subs	r3, r3, r2
 8024260:	4a27      	ldr	r2, [pc, #156]	; (8024300 <_tzset_unlocked_r+0x2d8>)
 8024262:	bf18      	it	ne
 8024264:	2301      	movne	r3, #1
 8024266:	6013      	str	r3, [r2, #0]
 8024268:	e6f8      	b.n	802405c <_tzset_unlocked_r+0x34>
 802426a:	2b2b      	cmp	r3, #43	; 0x2b
 802426c:	bf08      	it	eq
 802426e:	3401      	addeq	r4, #1
 8024270:	2701      	movs	r7, #1
 8024272:	e772      	b.n	802415a <_tzset_unlocked_r+0x132>
 8024274:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024278:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802427c:	213c      	movs	r1, #60	; 0x3c
 802427e:	fb01 2203 	mla	r2, r1, r3, r2
 8024282:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024286:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802428a:	fb01 2303 	mla	r3, r1, r3, r2
 802428e:	435f      	muls	r7, r3
 8024290:	e77a      	b.n	8024188 <_tzset_unlocked_r+0x160>
 8024292:	f04f 0901 	mov.w	r9, #1
 8024296:	e77d      	b.n	8024194 <_tzset_unlocked_r+0x16c>
 8024298:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802429c:	bf06      	itte	eq
 802429e:	3401      	addeq	r4, #1
 80242a0:	4643      	moveq	r3, r8
 80242a2:	2344      	movne	r3, #68	; 0x44
 80242a4:	220a      	movs	r2, #10
 80242a6:	a90b      	add	r1, sp, #44	; 0x2c
 80242a8:	4620      	mov	r0, r4
 80242aa:	9305      	str	r3, [sp, #20]
 80242ac:	f7ff fdf8 	bl	8023ea0 <strtoul>
 80242b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80242b4:	9b05      	ldr	r3, [sp, #20]
 80242b6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80242ba:	45a0      	cmp	r8, r4
 80242bc:	d114      	bne.n	80242e8 <_tzset_unlocked_r+0x2c0>
 80242be:	234d      	movs	r3, #77	; 0x4d
 80242c0:	f1b9 0f00 	cmp.w	r9, #0
 80242c4:	d107      	bne.n	80242d6 <_tzset_unlocked_r+0x2ae>
 80242c6:	722b      	strb	r3, [r5, #8]
 80242c8:	2103      	movs	r1, #3
 80242ca:	2302      	movs	r3, #2
 80242cc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80242d0:	f8c5 9014 	str.w	r9, [r5, #20]
 80242d4:	e791      	b.n	80241fa <_tzset_unlocked_r+0x1d2>
 80242d6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80242da:	220b      	movs	r2, #11
 80242dc:	2301      	movs	r3, #1
 80242de:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80242e2:	2300      	movs	r3, #0
 80242e4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80242e6:	e788      	b.n	80241fa <_tzset_unlocked_r+0x1d2>
 80242e8:	b280      	uxth	r0, r0
 80242ea:	723b      	strb	r3, [r7, #8]
 80242ec:	6178      	str	r0, [r7, #20]
 80242ee:	e784      	b.n	80241fa <_tzset_unlocked_r+0x1d2>
 80242f0:	0802ce20 	.word	0x0802ce20
 80242f4:	20001080 	.word	0x20001080
 80242f8:	20001088 	.word	0x20001088
 80242fc:	0802ce23 	.word	0x0802ce23
 8024300:	20001084 	.word	0x20001084
 8024304:	2000016c 	.word	0x2000016c
 8024308:	20001073 	.word	0x20001073
 802430c:	0802ce27 	.word	0x0802ce27
 8024310:	0802ce4a 	.word	0x0802ce4a
 8024314:	0802ce36 	.word	0x0802ce36
 8024318:	0802ce49 	.word	0x0802ce49
 802431c:	20001068 	.word	0x20001068

08024320 <_vsniprintf_r>:
 8024320:	b530      	push	{r4, r5, lr}
 8024322:	1e14      	subs	r4, r2, #0
 8024324:	4605      	mov	r5, r0
 8024326:	b09b      	sub	sp, #108	; 0x6c
 8024328:	4618      	mov	r0, r3
 802432a:	da05      	bge.n	8024338 <_vsniprintf_r+0x18>
 802432c:	238b      	movs	r3, #139	; 0x8b
 802432e:	602b      	str	r3, [r5, #0]
 8024330:	f04f 30ff 	mov.w	r0, #4294967295
 8024334:	b01b      	add	sp, #108	; 0x6c
 8024336:	bd30      	pop	{r4, r5, pc}
 8024338:	f44f 7302 	mov.w	r3, #520	; 0x208
 802433c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024340:	bf14      	ite	ne
 8024342:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024346:	4623      	moveq	r3, r4
 8024348:	9302      	str	r3, [sp, #8]
 802434a:	9305      	str	r3, [sp, #20]
 802434c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024350:	9100      	str	r1, [sp, #0]
 8024352:	9104      	str	r1, [sp, #16]
 8024354:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024358:	4602      	mov	r2, r0
 802435a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802435c:	4669      	mov	r1, sp
 802435e:	4628      	mov	r0, r5
 8024360:	f000 fb94 	bl	8024a8c <_svfiprintf_r>
 8024364:	1c43      	adds	r3, r0, #1
 8024366:	bfbc      	itt	lt
 8024368:	238b      	movlt	r3, #139	; 0x8b
 802436a:	602b      	strlt	r3, [r5, #0]
 802436c:	2c00      	cmp	r4, #0
 802436e:	d0e1      	beq.n	8024334 <_vsniprintf_r+0x14>
 8024370:	9b00      	ldr	r3, [sp, #0]
 8024372:	2200      	movs	r2, #0
 8024374:	701a      	strb	r2, [r3, #0]
 8024376:	e7dd      	b.n	8024334 <_vsniprintf_r+0x14>

08024378 <vsniprintf>:
 8024378:	b507      	push	{r0, r1, r2, lr}
 802437a:	9300      	str	r3, [sp, #0]
 802437c:	4613      	mov	r3, r2
 802437e:	460a      	mov	r2, r1
 8024380:	4601      	mov	r1, r0
 8024382:	4803      	ldr	r0, [pc, #12]	; (8024390 <vsniprintf+0x18>)
 8024384:	6800      	ldr	r0, [r0, #0]
 8024386:	f7ff ffcb 	bl	8024320 <_vsniprintf_r>
 802438a:	b003      	add	sp, #12
 802438c:	f85d fb04 	ldr.w	pc, [sp], #4
 8024390:	20000108 	.word	0x20000108

08024394 <__swbuf_r>:
 8024394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024396:	460e      	mov	r6, r1
 8024398:	4614      	mov	r4, r2
 802439a:	4605      	mov	r5, r0
 802439c:	b118      	cbz	r0, 80243a6 <__swbuf_r+0x12>
 802439e:	6983      	ldr	r3, [r0, #24]
 80243a0:	b90b      	cbnz	r3, 80243a6 <__swbuf_r+0x12>
 80243a2:	f7fe f8a1 	bl	80224e8 <__sinit>
 80243a6:	4b21      	ldr	r3, [pc, #132]	; (802442c <__swbuf_r+0x98>)
 80243a8:	429c      	cmp	r4, r3
 80243aa:	d12b      	bne.n	8024404 <__swbuf_r+0x70>
 80243ac:	686c      	ldr	r4, [r5, #4]
 80243ae:	69a3      	ldr	r3, [r4, #24]
 80243b0:	60a3      	str	r3, [r4, #8]
 80243b2:	89a3      	ldrh	r3, [r4, #12]
 80243b4:	071a      	lsls	r2, r3, #28
 80243b6:	d52f      	bpl.n	8024418 <__swbuf_r+0x84>
 80243b8:	6923      	ldr	r3, [r4, #16]
 80243ba:	b36b      	cbz	r3, 8024418 <__swbuf_r+0x84>
 80243bc:	6923      	ldr	r3, [r4, #16]
 80243be:	6820      	ldr	r0, [r4, #0]
 80243c0:	1ac0      	subs	r0, r0, r3
 80243c2:	6963      	ldr	r3, [r4, #20]
 80243c4:	b2f6      	uxtb	r6, r6
 80243c6:	4283      	cmp	r3, r0
 80243c8:	4637      	mov	r7, r6
 80243ca:	dc04      	bgt.n	80243d6 <__swbuf_r+0x42>
 80243cc:	4621      	mov	r1, r4
 80243ce:	4628      	mov	r0, r5
 80243d0:	f7fd ffe4 	bl	802239c <_fflush_r>
 80243d4:	bb30      	cbnz	r0, 8024424 <__swbuf_r+0x90>
 80243d6:	68a3      	ldr	r3, [r4, #8]
 80243d8:	3b01      	subs	r3, #1
 80243da:	60a3      	str	r3, [r4, #8]
 80243dc:	6823      	ldr	r3, [r4, #0]
 80243de:	1c5a      	adds	r2, r3, #1
 80243e0:	6022      	str	r2, [r4, #0]
 80243e2:	701e      	strb	r6, [r3, #0]
 80243e4:	6963      	ldr	r3, [r4, #20]
 80243e6:	3001      	adds	r0, #1
 80243e8:	4283      	cmp	r3, r0
 80243ea:	d004      	beq.n	80243f6 <__swbuf_r+0x62>
 80243ec:	89a3      	ldrh	r3, [r4, #12]
 80243ee:	07db      	lsls	r3, r3, #31
 80243f0:	d506      	bpl.n	8024400 <__swbuf_r+0x6c>
 80243f2:	2e0a      	cmp	r6, #10
 80243f4:	d104      	bne.n	8024400 <__swbuf_r+0x6c>
 80243f6:	4621      	mov	r1, r4
 80243f8:	4628      	mov	r0, r5
 80243fa:	f7fd ffcf 	bl	802239c <_fflush_r>
 80243fe:	b988      	cbnz	r0, 8024424 <__swbuf_r+0x90>
 8024400:	4638      	mov	r0, r7
 8024402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024404:	4b0a      	ldr	r3, [pc, #40]	; (8024430 <__swbuf_r+0x9c>)
 8024406:	429c      	cmp	r4, r3
 8024408:	d101      	bne.n	802440e <__swbuf_r+0x7a>
 802440a:	68ac      	ldr	r4, [r5, #8]
 802440c:	e7cf      	b.n	80243ae <__swbuf_r+0x1a>
 802440e:	4b09      	ldr	r3, [pc, #36]	; (8024434 <__swbuf_r+0xa0>)
 8024410:	429c      	cmp	r4, r3
 8024412:	bf08      	it	eq
 8024414:	68ec      	ldreq	r4, [r5, #12]
 8024416:	e7ca      	b.n	80243ae <__swbuf_r+0x1a>
 8024418:	4621      	mov	r1, r4
 802441a:	4628      	mov	r0, r5
 802441c:	f000 f81e 	bl	802445c <__swsetup_r>
 8024420:	2800      	cmp	r0, #0
 8024422:	d0cb      	beq.n	80243bc <__swbuf_r+0x28>
 8024424:	f04f 37ff 	mov.w	r7, #4294967295
 8024428:	e7ea      	b.n	8024400 <__swbuf_r+0x6c>
 802442a:	bf00      	nop
 802442c:	0802ca24 	.word	0x0802ca24
 8024430:	0802ca44 	.word	0x0802ca44
 8024434:	0802ca04 	.word	0x0802ca04

08024438 <_write_r>:
 8024438:	b538      	push	{r3, r4, r5, lr}
 802443a:	4d07      	ldr	r5, [pc, #28]	; (8024458 <_write_r+0x20>)
 802443c:	4604      	mov	r4, r0
 802443e:	4608      	mov	r0, r1
 8024440:	4611      	mov	r1, r2
 8024442:	2200      	movs	r2, #0
 8024444:	602a      	str	r2, [r5, #0]
 8024446:	461a      	mov	r2, r3
 8024448:	f7dc fcfa 	bl	8000e40 <_write>
 802444c:	1c43      	adds	r3, r0, #1
 802444e:	d102      	bne.n	8024456 <_write_r+0x1e>
 8024450:	682b      	ldr	r3, [r5, #0]
 8024452:	b103      	cbz	r3, 8024456 <_write_r+0x1e>
 8024454:	6023      	str	r3, [r4, #0]
 8024456:	bd38      	pop	{r3, r4, r5, pc}
 8024458:	20001130 	.word	0x20001130

0802445c <__swsetup_r>:
 802445c:	4b32      	ldr	r3, [pc, #200]	; (8024528 <__swsetup_r+0xcc>)
 802445e:	b570      	push	{r4, r5, r6, lr}
 8024460:	681d      	ldr	r5, [r3, #0]
 8024462:	4606      	mov	r6, r0
 8024464:	460c      	mov	r4, r1
 8024466:	b125      	cbz	r5, 8024472 <__swsetup_r+0x16>
 8024468:	69ab      	ldr	r3, [r5, #24]
 802446a:	b913      	cbnz	r3, 8024472 <__swsetup_r+0x16>
 802446c:	4628      	mov	r0, r5
 802446e:	f7fe f83b 	bl	80224e8 <__sinit>
 8024472:	4b2e      	ldr	r3, [pc, #184]	; (802452c <__swsetup_r+0xd0>)
 8024474:	429c      	cmp	r4, r3
 8024476:	d10f      	bne.n	8024498 <__swsetup_r+0x3c>
 8024478:	686c      	ldr	r4, [r5, #4]
 802447a:	89a3      	ldrh	r3, [r4, #12]
 802447c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024480:	0719      	lsls	r1, r3, #28
 8024482:	d42c      	bmi.n	80244de <__swsetup_r+0x82>
 8024484:	06dd      	lsls	r5, r3, #27
 8024486:	d411      	bmi.n	80244ac <__swsetup_r+0x50>
 8024488:	2309      	movs	r3, #9
 802448a:	6033      	str	r3, [r6, #0]
 802448c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024490:	81a3      	strh	r3, [r4, #12]
 8024492:	f04f 30ff 	mov.w	r0, #4294967295
 8024496:	e03e      	b.n	8024516 <__swsetup_r+0xba>
 8024498:	4b25      	ldr	r3, [pc, #148]	; (8024530 <__swsetup_r+0xd4>)
 802449a:	429c      	cmp	r4, r3
 802449c:	d101      	bne.n	80244a2 <__swsetup_r+0x46>
 802449e:	68ac      	ldr	r4, [r5, #8]
 80244a0:	e7eb      	b.n	802447a <__swsetup_r+0x1e>
 80244a2:	4b24      	ldr	r3, [pc, #144]	; (8024534 <__swsetup_r+0xd8>)
 80244a4:	429c      	cmp	r4, r3
 80244a6:	bf08      	it	eq
 80244a8:	68ec      	ldreq	r4, [r5, #12]
 80244aa:	e7e6      	b.n	802447a <__swsetup_r+0x1e>
 80244ac:	0758      	lsls	r0, r3, #29
 80244ae:	d512      	bpl.n	80244d6 <__swsetup_r+0x7a>
 80244b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80244b2:	b141      	cbz	r1, 80244c6 <__swsetup_r+0x6a>
 80244b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80244b8:	4299      	cmp	r1, r3
 80244ba:	d002      	beq.n	80244c2 <__swsetup_r+0x66>
 80244bc:	4630      	mov	r0, r6
 80244be:	f7fe fc63 	bl	8022d88 <_free_r>
 80244c2:	2300      	movs	r3, #0
 80244c4:	6363      	str	r3, [r4, #52]	; 0x34
 80244c6:	89a3      	ldrh	r3, [r4, #12]
 80244c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80244cc:	81a3      	strh	r3, [r4, #12]
 80244ce:	2300      	movs	r3, #0
 80244d0:	6063      	str	r3, [r4, #4]
 80244d2:	6923      	ldr	r3, [r4, #16]
 80244d4:	6023      	str	r3, [r4, #0]
 80244d6:	89a3      	ldrh	r3, [r4, #12]
 80244d8:	f043 0308 	orr.w	r3, r3, #8
 80244dc:	81a3      	strh	r3, [r4, #12]
 80244de:	6923      	ldr	r3, [r4, #16]
 80244e0:	b94b      	cbnz	r3, 80244f6 <__swsetup_r+0x9a>
 80244e2:	89a3      	ldrh	r3, [r4, #12]
 80244e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80244e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80244ec:	d003      	beq.n	80244f6 <__swsetup_r+0x9a>
 80244ee:	4621      	mov	r1, r4
 80244f0:	4630      	mov	r0, r6
 80244f2:	f7fe fbd3 	bl	8022c9c <__smakebuf_r>
 80244f6:	89a0      	ldrh	r0, [r4, #12]
 80244f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80244fc:	f010 0301 	ands.w	r3, r0, #1
 8024500:	d00a      	beq.n	8024518 <__swsetup_r+0xbc>
 8024502:	2300      	movs	r3, #0
 8024504:	60a3      	str	r3, [r4, #8]
 8024506:	6963      	ldr	r3, [r4, #20]
 8024508:	425b      	negs	r3, r3
 802450a:	61a3      	str	r3, [r4, #24]
 802450c:	6923      	ldr	r3, [r4, #16]
 802450e:	b943      	cbnz	r3, 8024522 <__swsetup_r+0xc6>
 8024510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024514:	d1ba      	bne.n	802448c <__swsetup_r+0x30>
 8024516:	bd70      	pop	{r4, r5, r6, pc}
 8024518:	0781      	lsls	r1, r0, #30
 802451a:	bf58      	it	pl
 802451c:	6963      	ldrpl	r3, [r4, #20]
 802451e:	60a3      	str	r3, [r4, #8]
 8024520:	e7f4      	b.n	802450c <__swsetup_r+0xb0>
 8024522:	2000      	movs	r0, #0
 8024524:	e7f7      	b.n	8024516 <__swsetup_r+0xba>
 8024526:	bf00      	nop
 8024528:	20000108 	.word	0x20000108
 802452c:	0802ca24 	.word	0x0802ca24
 8024530:	0802ca44 	.word	0x0802ca44
 8024534:	0802ca04 	.word	0x0802ca04

08024538 <__register_exitproc>:
 8024538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802453c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80245f8 <__register_exitproc+0xc0>
 8024540:	4606      	mov	r6, r0
 8024542:	f8d8 0000 	ldr.w	r0, [r8]
 8024546:	461f      	mov	r7, r3
 8024548:	460d      	mov	r5, r1
 802454a:	4691      	mov	r9, r2
 802454c:	f7fe fb7f 	bl	8022c4e <__retarget_lock_acquire_recursive>
 8024550:	4b25      	ldr	r3, [pc, #148]	; (80245e8 <__register_exitproc+0xb0>)
 8024552:	681c      	ldr	r4, [r3, #0]
 8024554:	b934      	cbnz	r4, 8024564 <__register_exitproc+0x2c>
 8024556:	4c25      	ldr	r4, [pc, #148]	; (80245ec <__register_exitproc+0xb4>)
 8024558:	601c      	str	r4, [r3, #0]
 802455a:	4b25      	ldr	r3, [pc, #148]	; (80245f0 <__register_exitproc+0xb8>)
 802455c:	b113      	cbz	r3, 8024564 <__register_exitproc+0x2c>
 802455e:	681b      	ldr	r3, [r3, #0]
 8024560:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024564:	6863      	ldr	r3, [r4, #4]
 8024566:	2b1f      	cmp	r3, #31
 8024568:	dd07      	ble.n	802457a <__register_exitproc+0x42>
 802456a:	f8d8 0000 	ldr.w	r0, [r8]
 802456e:	f7fe fb70 	bl	8022c52 <__retarget_lock_release_recursive>
 8024572:	f04f 30ff 	mov.w	r0, #4294967295
 8024576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802457a:	b34e      	cbz	r6, 80245d0 <__register_exitproc+0x98>
 802457c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024580:	b988      	cbnz	r0, 80245a6 <__register_exitproc+0x6e>
 8024582:	4b1c      	ldr	r3, [pc, #112]	; (80245f4 <__register_exitproc+0xbc>)
 8024584:	b923      	cbnz	r3, 8024590 <__register_exitproc+0x58>
 8024586:	f8d8 0000 	ldr.w	r0, [r8]
 802458a:	f7fe fb61 	bl	8022c50 <__retarget_lock_release>
 802458e:	e7f0      	b.n	8024572 <__register_exitproc+0x3a>
 8024590:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024594:	f7fe fbc2 	bl	8022d1c <malloc>
 8024598:	2800      	cmp	r0, #0
 802459a:	d0f4      	beq.n	8024586 <__register_exitproc+0x4e>
 802459c:	2300      	movs	r3, #0
 802459e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80245a2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80245a6:	6863      	ldr	r3, [r4, #4]
 80245a8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80245ac:	2201      	movs	r2, #1
 80245ae:	409a      	lsls	r2, r3
 80245b0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80245b4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80245b8:	4313      	orrs	r3, r2
 80245ba:	2e02      	cmp	r6, #2
 80245bc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80245c0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80245c4:	bf02      	ittt	eq
 80245c6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80245ca:	431a      	orreq	r2, r3
 80245cc:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80245d0:	6863      	ldr	r3, [r4, #4]
 80245d2:	f8d8 0000 	ldr.w	r0, [r8]
 80245d6:	1c5a      	adds	r2, r3, #1
 80245d8:	3302      	adds	r3, #2
 80245da:	6062      	str	r2, [r4, #4]
 80245dc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80245e0:	f7fe fb37 	bl	8022c52 <__retarget_lock_release_recursive>
 80245e4:	2000      	movs	r0, #0
 80245e6:	e7c6      	b.n	8024576 <__register_exitproc+0x3e>
 80245e8:	20001118 	.word	0x20001118
 80245ec:	2000108c 	.word	0x2000108c
 80245f0:	00000000 	.word	0x00000000
 80245f4:	08022d1d 	.word	0x08022d1d
 80245f8:	20000174 	.word	0x20000174

080245fc <abs>:
 80245fc:	2800      	cmp	r0, #0
 80245fe:	bfb8      	it	lt
 8024600:	4240      	neglt	r0, r0
 8024602:	4770      	bx	lr

08024604 <__assert_func>:
 8024604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024606:	4614      	mov	r4, r2
 8024608:	461a      	mov	r2, r3
 802460a:	4b09      	ldr	r3, [pc, #36]	; (8024630 <__assert_func+0x2c>)
 802460c:	681b      	ldr	r3, [r3, #0]
 802460e:	4605      	mov	r5, r0
 8024610:	68d8      	ldr	r0, [r3, #12]
 8024612:	b14c      	cbz	r4, 8024628 <__assert_func+0x24>
 8024614:	4b07      	ldr	r3, [pc, #28]	; (8024634 <__assert_func+0x30>)
 8024616:	9100      	str	r1, [sp, #0]
 8024618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802461c:	4906      	ldr	r1, [pc, #24]	; (8024638 <__assert_func+0x34>)
 802461e:	462b      	mov	r3, r5
 8024620:	f000 f854 	bl	80246cc <fiprintf>
 8024624:	f7fd fda0 	bl	8022168 <abort>
 8024628:	4b04      	ldr	r3, [pc, #16]	; (802463c <__assert_func+0x38>)
 802462a:	461c      	mov	r4, r3
 802462c:	e7f3      	b.n	8024616 <__assert_func+0x12>
 802462e:	bf00      	nop
 8024630:	20000108 	.word	0x20000108
 8024634:	0802ce5c 	.word	0x0802ce5c
 8024638:	0802ce69 	.word	0x0802ce69
 802463c:	0802ce97 	.word	0x0802ce97

08024640 <_close_r>:
 8024640:	b538      	push	{r3, r4, r5, lr}
 8024642:	4d06      	ldr	r5, [pc, #24]	; (802465c <_close_r+0x1c>)
 8024644:	2300      	movs	r3, #0
 8024646:	4604      	mov	r4, r0
 8024648:	4608      	mov	r0, r1
 802464a:	602b      	str	r3, [r5, #0]
 802464c:	f7dc fc14 	bl	8000e78 <_close>
 8024650:	1c43      	adds	r3, r0, #1
 8024652:	d102      	bne.n	802465a <_close_r+0x1a>
 8024654:	682b      	ldr	r3, [r5, #0]
 8024656:	b103      	cbz	r3, 802465a <_close_r+0x1a>
 8024658:	6023      	str	r3, [r4, #0]
 802465a:	bd38      	pop	{r3, r4, r5, pc}
 802465c:	20001130 	.word	0x20001130

08024660 <__sflags>:
 8024660:	780b      	ldrb	r3, [r1, #0]
 8024662:	2b72      	cmp	r3, #114	; 0x72
 8024664:	b530      	push	{r4, r5, lr}
 8024666:	d022      	beq.n	80246ae <__sflags+0x4e>
 8024668:	2b77      	cmp	r3, #119	; 0x77
 802466a:	d024      	beq.n	80246b6 <__sflags+0x56>
 802466c:	2b61      	cmp	r3, #97	; 0x61
 802466e:	d027      	beq.n	80246c0 <__sflags+0x60>
 8024670:	2316      	movs	r3, #22
 8024672:	6003      	str	r3, [r0, #0]
 8024674:	2000      	movs	r0, #0
 8024676:	bd30      	pop	{r4, r5, pc}
 8024678:	2d62      	cmp	r5, #98	; 0x62
 802467a:	d012      	beq.n	80246a2 <__sflags+0x42>
 802467c:	2d78      	cmp	r5, #120	; 0x78
 802467e:	d013      	beq.n	80246a8 <__sflags+0x48>
 8024680:	2d2b      	cmp	r5, #43	; 0x2b
 8024682:	d107      	bne.n	8024694 <__sflags+0x34>
 8024684:	f020 001c 	bic.w	r0, r0, #28
 8024688:	f023 0303 	bic.w	r3, r3, #3
 802468c:	f040 0010 	orr.w	r0, r0, #16
 8024690:	f043 0302 	orr.w	r3, r3, #2
 8024694:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8024698:	2d00      	cmp	r5, #0
 802469a:	d1ed      	bne.n	8024678 <__sflags+0x18>
 802469c:	4323      	orrs	r3, r4
 802469e:	6013      	str	r3, [r2, #0]
 80246a0:	e7e9      	b.n	8024676 <__sflags+0x16>
 80246a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80246a6:	e7f5      	b.n	8024694 <__sflags+0x34>
 80246a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80246ac:	e7f2      	b.n	8024694 <__sflags+0x34>
 80246ae:	2400      	movs	r4, #0
 80246b0:	4623      	mov	r3, r4
 80246b2:	2004      	movs	r0, #4
 80246b4:	e7ee      	b.n	8024694 <__sflags+0x34>
 80246b6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80246ba:	2301      	movs	r3, #1
 80246bc:	2008      	movs	r0, #8
 80246be:	e7e9      	b.n	8024694 <__sflags+0x34>
 80246c0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80246c4:	2301      	movs	r3, #1
 80246c6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80246ca:	e7e3      	b.n	8024694 <__sflags+0x34>

080246cc <fiprintf>:
 80246cc:	b40e      	push	{r1, r2, r3}
 80246ce:	b503      	push	{r0, r1, lr}
 80246d0:	4601      	mov	r1, r0
 80246d2:	ab03      	add	r3, sp, #12
 80246d4:	4805      	ldr	r0, [pc, #20]	; (80246ec <fiprintf+0x20>)
 80246d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80246da:	6800      	ldr	r0, [r0, #0]
 80246dc:	9301      	str	r3, [sp, #4]
 80246de:	f000 faff 	bl	8024ce0 <_vfiprintf_r>
 80246e2:	b002      	add	sp, #8
 80246e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80246e8:	b003      	add	sp, #12
 80246ea:	4770      	bx	lr
 80246ec:	20000108 	.word	0x20000108

080246f0 <_fstat_r>:
 80246f0:	b538      	push	{r3, r4, r5, lr}
 80246f2:	4d07      	ldr	r5, [pc, #28]	; (8024710 <_fstat_r+0x20>)
 80246f4:	2300      	movs	r3, #0
 80246f6:	4604      	mov	r4, r0
 80246f8:	4608      	mov	r0, r1
 80246fa:	4611      	mov	r1, r2
 80246fc:	602b      	str	r3, [r5, #0]
 80246fe:	f7dc fbc7 	bl	8000e90 <_fstat>
 8024702:	1c43      	adds	r3, r0, #1
 8024704:	d102      	bne.n	802470c <_fstat_r+0x1c>
 8024706:	682b      	ldr	r3, [r5, #0]
 8024708:	b103      	cbz	r3, 802470c <_fstat_r+0x1c>
 802470a:	6023      	str	r3, [r4, #0]
 802470c:	bd38      	pop	{r3, r4, r5, pc}
 802470e:	bf00      	nop
 8024710:	20001130 	.word	0x20001130

08024714 <_findenv_r>:
 8024714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024718:	4607      	mov	r7, r0
 802471a:	4689      	mov	r9, r1
 802471c:	4616      	mov	r6, r2
 802471e:	f000 fe7d 	bl	802541c <__env_lock>
 8024722:	4b18      	ldr	r3, [pc, #96]	; (8024784 <_findenv_r+0x70>)
 8024724:	681c      	ldr	r4, [r3, #0]
 8024726:	469a      	mov	sl, r3
 8024728:	b134      	cbz	r4, 8024738 <_findenv_r+0x24>
 802472a:	464b      	mov	r3, r9
 802472c:	4698      	mov	r8, r3
 802472e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8024732:	b139      	cbz	r1, 8024744 <_findenv_r+0x30>
 8024734:	293d      	cmp	r1, #61	; 0x3d
 8024736:	d1f9      	bne.n	802472c <_findenv_r+0x18>
 8024738:	4638      	mov	r0, r7
 802473a:	f000 fe75 	bl	8025428 <__env_unlock>
 802473e:	2000      	movs	r0, #0
 8024740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024744:	eba8 0809 	sub.w	r8, r8, r9
 8024748:	46a3      	mov	fp, r4
 802474a:	f854 0b04 	ldr.w	r0, [r4], #4
 802474e:	2800      	cmp	r0, #0
 8024750:	d0f2      	beq.n	8024738 <_findenv_r+0x24>
 8024752:	4642      	mov	r2, r8
 8024754:	4649      	mov	r1, r9
 8024756:	f000 fe41 	bl	80253dc <strncmp>
 802475a:	2800      	cmp	r0, #0
 802475c:	d1f4      	bne.n	8024748 <_findenv_r+0x34>
 802475e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024762:	eb03 0508 	add.w	r5, r3, r8
 8024766:	f813 3008 	ldrb.w	r3, [r3, r8]
 802476a:	2b3d      	cmp	r3, #61	; 0x3d
 802476c:	d1ec      	bne.n	8024748 <_findenv_r+0x34>
 802476e:	f8da 3000 	ldr.w	r3, [sl]
 8024772:	ebab 0303 	sub.w	r3, fp, r3
 8024776:	109b      	asrs	r3, r3, #2
 8024778:	4638      	mov	r0, r7
 802477a:	6033      	str	r3, [r6, #0]
 802477c:	f000 fe54 	bl	8025428 <__env_unlock>
 8024780:	1c68      	adds	r0, r5, #1
 8024782:	e7dd      	b.n	8024740 <_findenv_r+0x2c>
 8024784:	20000000 	.word	0x20000000

08024788 <_getenv_r>:
 8024788:	b507      	push	{r0, r1, r2, lr}
 802478a:	aa01      	add	r2, sp, #4
 802478c:	f7ff ffc2 	bl	8024714 <_findenv_r>
 8024790:	b003      	add	sp, #12
 8024792:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08024798 <__gettzinfo>:
 8024798:	4800      	ldr	r0, [pc, #0]	; (802479c <__gettzinfo+0x4>)
 802479a:	4770      	bx	lr
 802479c:	20000178 	.word	0x20000178

080247a0 <gmtime_r>:
 80247a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247a4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80247a8:	460c      	mov	r4, r1
 80247aa:	4a51      	ldr	r2, [pc, #324]	; (80248f0 <gmtime_r+0x150>)
 80247ac:	2300      	movs	r3, #0
 80247ae:	4630      	mov	r0, r6
 80247b0:	4639      	mov	r1, r7
 80247b2:	f7db ffff 	bl	80007b4 <__aeabi_ldivmod>
 80247b6:	4639      	mov	r1, r7
 80247b8:	4605      	mov	r5, r0
 80247ba:	4a4d      	ldr	r2, [pc, #308]	; (80248f0 <gmtime_r+0x150>)
 80247bc:	4630      	mov	r0, r6
 80247be:	2300      	movs	r3, #0
 80247c0:	f7db fff8 	bl	80007b4 <__aeabi_ldivmod>
 80247c4:	2a00      	cmp	r2, #0
 80247c6:	bfbc      	itt	lt
 80247c8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80247cc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80247d0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80247d4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80247d8:	fbb2 f3f1 	udiv	r3, r2, r1
 80247dc:	fb01 2213 	mls	r2, r1, r3, r2
 80247e0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80247e4:	bfac      	ite	ge
 80247e6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80247ea:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80247ee:	60a3      	str	r3, [r4, #8]
 80247f0:	fbb2 f3f1 	udiv	r3, r2, r1
 80247f4:	fb01 2213 	mls	r2, r1, r3, r2
 80247f8:	6063      	str	r3, [r4, #4]
 80247fa:	6022      	str	r2, [r4, #0]
 80247fc:	1cc3      	adds	r3, r0, #3
 80247fe:	2207      	movs	r2, #7
 8024800:	fb93 f2f2 	sdiv	r2, r3, r2
 8024804:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8024808:	1a9b      	subs	r3, r3, r2
 802480a:	bf48      	it	mi
 802480c:	3307      	addmi	r3, #7
 802480e:	2800      	cmp	r0, #0
 8024810:	61a3      	str	r3, [r4, #24]
 8024812:	bfb8      	it	lt
 8024814:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8024818:	4936      	ldr	r1, [pc, #216]	; (80248f4 <gmtime_r+0x154>)
 802481a:	bfae      	itee	ge
 802481c:	fb90 f1f1 	sdivge	r1, r0, r1
 8024820:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8024824:	fb93 f1f1 	sdivlt	r1, r3, r1
 8024828:	4b33      	ldr	r3, [pc, #204]	; (80248f8 <gmtime_r+0x158>)
 802482a:	fb03 0001 	mla	r0, r3, r1, r0
 802482e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8024832:	fbb0 f2f2 	udiv	r2, r0, r2
 8024836:	4402      	add	r2, r0
 8024838:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802483c:	fbb0 f3fc 	udiv	r3, r0, ip
 8024840:	1ad2      	subs	r2, r2, r3
 8024842:	f240 176d 	movw	r7, #365	; 0x16d
 8024846:	4b2d      	ldr	r3, [pc, #180]	; (80248fc <gmtime_r+0x15c>)
 8024848:	fbb0 f3f3 	udiv	r3, r0, r3
 802484c:	2664      	movs	r6, #100	; 0x64
 802484e:	1ad3      	subs	r3, r2, r3
 8024850:	fbb3 f5f7 	udiv	r5, r3, r7
 8024854:	fbb3 f3fc 	udiv	r3, r3, ip
 8024858:	fbb5 f2f6 	udiv	r2, r5, r6
 802485c:	1ad3      	subs	r3, r2, r3
 802485e:	4403      	add	r3, r0
 8024860:	fb07 3315 	mls	r3, r7, r5, r3
 8024864:	2099      	movs	r0, #153	; 0x99
 8024866:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802486a:	f10c 0c02 	add.w	ip, ip, #2
 802486e:	f103 0e01 	add.w	lr, r3, #1
 8024872:	fbbc f7f0 	udiv	r7, ip, r0
 8024876:	4378      	muls	r0, r7
 8024878:	3002      	adds	r0, #2
 802487a:	f04f 0805 	mov.w	r8, #5
 802487e:	fbb0 f0f8 	udiv	r0, r0, r8
 8024882:	ebae 0000 	sub.w	r0, lr, r0
 8024886:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802488a:	45f4      	cmp	ip, lr
 802488c:	bf94      	ite	ls
 802488e:	f04f 0c02 	movls.w	ip, #2
 8024892:	f06f 0c09 	mvnhi.w	ip, #9
 8024896:	4467      	add	r7, ip
 8024898:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 802489c:	fb0c 5101 	mla	r1, ip, r1, r5
 80248a0:	2f01      	cmp	r7, #1
 80248a2:	bf98      	it	ls
 80248a4:	3101      	addls	r1, #1
 80248a6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80248aa:	d30c      	bcc.n	80248c6 <gmtime_r+0x126>
 80248ac:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80248b0:	61e3      	str	r3, [r4, #28]
 80248b2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80248b6:	2300      	movs	r3, #0
 80248b8:	60e0      	str	r0, [r4, #12]
 80248ba:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80248be:	6223      	str	r3, [r4, #32]
 80248c0:	4620      	mov	r0, r4
 80248c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80248c6:	f015 0f03 	tst.w	r5, #3
 80248ca:	d102      	bne.n	80248d2 <gmtime_r+0x132>
 80248cc:	fb06 5212 	mls	r2, r6, r2, r5
 80248d0:	b95a      	cbnz	r2, 80248ea <gmtime_r+0x14a>
 80248d2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80248d6:	fbb5 f2f6 	udiv	r2, r5, r6
 80248da:	fb06 5212 	mls	r2, r6, r2, r5
 80248de:	fab2 f282 	clz	r2, r2
 80248e2:	0952      	lsrs	r2, r2, #5
 80248e4:	333b      	adds	r3, #59	; 0x3b
 80248e6:	4413      	add	r3, r2
 80248e8:	e7e2      	b.n	80248b0 <gmtime_r+0x110>
 80248ea:	2201      	movs	r2, #1
 80248ec:	e7fa      	b.n	80248e4 <gmtime_r+0x144>
 80248ee:	bf00      	nop
 80248f0:	00015180 	.word	0x00015180
 80248f4:	00023ab1 	.word	0x00023ab1
 80248f8:	fffdc54f 	.word	0xfffdc54f
 80248fc:	00023ab0 	.word	0x00023ab0

08024900 <_isatty_r>:
 8024900:	b538      	push	{r3, r4, r5, lr}
 8024902:	4d06      	ldr	r5, [pc, #24]	; (802491c <_isatty_r+0x1c>)
 8024904:	2300      	movs	r3, #0
 8024906:	4604      	mov	r4, r0
 8024908:	4608      	mov	r0, r1
 802490a:	602b      	str	r3, [r5, #0]
 802490c:	f7dc fad0 	bl	8000eb0 <_isatty>
 8024910:	1c43      	adds	r3, r0, #1
 8024912:	d102      	bne.n	802491a <_isatty_r+0x1a>
 8024914:	682b      	ldr	r3, [r5, #0]
 8024916:	b103      	cbz	r3, 802491a <_isatty_r+0x1a>
 8024918:	6023      	str	r3, [r4, #0]
 802491a:	bd38      	pop	{r3, r4, r5, pc}
 802491c:	20001130 	.word	0x20001130

08024920 <labs>:
 8024920:	2800      	cmp	r0, #0
 8024922:	bfb8      	it	lt
 8024924:	4240      	neglt	r0, r0
 8024926:	4770      	bx	lr

08024928 <_lseek_r>:
 8024928:	b538      	push	{r3, r4, r5, lr}
 802492a:	4d07      	ldr	r5, [pc, #28]	; (8024948 <_lseek_r+0x20>)
 802492c:	4604      	mov	r4, r0
 802492e:	4608      	mov	r0, r1
 8024930:	4611      	mov	r1, r2
 8024932:	2200      	movs	r2, #0
 8024934:	602a      	str	r2, [r5, #0]
 8024936:	461a      	mov	r2, r3
 8024938:	f7dc fac5 	bl	8000ec6 <_lseek>
 802493c:	1c43      	adds	r3, r0, #1
 802493e:	d102      	bne.n	8024946 <_lseek_r+0x1e>
 8024940:	682b      	ldr	r3, [r5, #0]
 8024942:	b103      	cbz	r3, 8024946 <_lseek_r+0x1e>
 8024944:	6023      	str	r3, [r4, #0]
 8024946:	bd38      	pop	{r3, r4, r5, pc}
 8024948:	20001130 	.word	0x20001130

0802494c <__ascii_mbtowc>:
 802494c:	b082      	sub	sp, #8
 802494e:	b901      	cbnz	r1, 8024952 <__ascii_mbtowc+0x6>
 8024950:	a901      	add	r1, sp, #4
 8024952:	b142      	cbz	r2, 8024966 <__ascii_mbtowc+0x1a>
 8024954:	b14b      	cbz	r3, 802496a <__ascii_mbtowc+0x1e>
 8024956:	7813      	ldrb	r3, [r2, #0]
 8024958:	600b      	str	r3, [r1, #0]
 802495a:	7812      	ldrb	r2, [r2, #0]
 802495c:	1e10      	subs	r0, r2, #0
 802495e:	bf18      	it	ne
 8024960:	2001      	movne	r0, #1
 8024962:	b002      	add	sp, #8
 8024964:	4770      	bx	lr
 8024966:	4610      	mov	r0, r2
 8024968:	e7fb      	b.n	8024962 <__ascii_mbtowc+0x16>
 802496a:	f06f 0001 	mvn.w	r0, #1
 802496e:	e7f8      	b.n	8024962 <__ascii_mbtowc+0x16>

08024970 <__malloc_lock>:
 8024970:	4801      	ldr	r0, [pc, #4]	; (8024978 <__malloc_lock+0x8>)
 8024972:	f7fe b96c 	b.w	8022c4e <__retarget_lock_acquire_recursive>
 8024976:	bf00      	nop
 8024978:	20001128 	.word	0x20001128

0802497c <__malloc_unlock>:
 802497c:	4801      	ldr	r0, [pc, #4]	; (8024984 <__malloc_unlock+0x8>)
 802497e:	f7fe b968 	b.w	8022c52 <__retarget_lock_release_recursive>
 8024982:	bf00      	nop
 8024984:	20001128 	.word	0x20001128

08024988 <_realloc_r>:
 8024988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802498a:	4607      	mov	r7, r0
 802498c:	4614      	mov	r4, r2
 802498e:	460e      	mov	r6, r1
 8024990:	b921      	cbnz	r1, 802499c <_realloc_r+0x14>
 8024992:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024996:	4611      	mov	r1, r2
 8024998:	f7fe ba46 	b.w	8022e28 <_malloc_r>
 802499c:	b922      	cbnz	r2, 80249a8 <_realloc_r+0x20>
 802499e:	f7fe f9f3 	bl	8022d88 <_free_r>
 80249a2:	4625      	mov	r5, r4
 80249a4:	4628      	mov	r0, r5
 80249a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80249a8:	f000 fd5e 	bl	8025468 <_malloc_usable_size_r>
 80249ac:	42a0      	cmp	r0, r4
 80249ae:	d20f      	bcs.n	80249d0 <_realloc_r+0x48>
 80249b0:	4621      	mov	r1, r4
 80249b2:	4638      	mov	r0, r7
 80249b4:	f7fe fa38 	bl	8022e28 <_malloc_r>
 80249b8:	4605      	mov	r5, r0
 80249ba:	2800      	cmp	r0, #0
 80249bc:	d0f2      	beq.n	80249a4 <_realloc_r+0x1c>
 80249be:	4631      	mov	r1, r6
 80249c0:	4622      	mov	r2, r4
 80249c2:	f7fe f9bb 	bl	8022d3c <memcpy>
 80249c6:	4631      	mov	r1, r6
 80249c8:	4638      	mov	r0, r7
 80249ca:	f7fe f9dd 	bl	8022d88 <_free_r>
 80249ce:	e7e9      	b.n	80249a4 <_realloc_r+0x1c>
 80249d0:	4635      	mov	r5, r6
 80249d2:	e7e7      	b.n	80249a4 <_realloc_r+0x1c>

080249d4 <__ssputs_r>:
 80249d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80249d8:	688e      	ldr	r6, [r1, #8]
 80249da:	429e      	cmp	r6, r3
 80249dc:	4682      	mov	sl, r0
 80249de:	460c      	mov	r4, r1
 80249e0:	4690      	mov	r8, r2
 80249e2:	461f      	mov	r7, r3
 80249e4:	d838      	bhi.n	8024a58 <__ssputs_r+0x84>
 80249e6:	898a      	ldrh	r2, [r1, #12]
 80249e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80249ec:	d032      	beq.n	8024a54 <__ssputs_r+0x80>
 80249ee:	6825      	ldr	r5, [r4, #0]
 80249f0:	6909      	ldr	r1, [r1, #16]
 80249f2:	eba5 0901 	sub.w	r9, r5, r1
 80249f6:	6965      	ldr	r5, [r4, #20]
 80249f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80249fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024a00:	3301      	adds	r3, #1
 8024a02:	444b      	add	r3, r9
 8024a04:	106d      	asrs	r5, r5, #1
 8024a06:	429d      	cmp	r5, r3
 8024a08:	bf38      	it	cc
 8024a0a:	461d      	movcc	r5, r3
 8024a0c:	0553      	lsls	r3, r2, #21
 8024a0e:	d531      	bpl.n	8024a74 <__ssputs_r+0xa0>
 8024a10:	4629      	mov	r1, r5
 8024a12:	f7fe fa09 	bl	8022e28 <_malloc_r>
 8024a16:	4606      	mov	r6, r0
 8024a18:	b950      	cbnz	r0, 8024a30 <__ssputs_r+0x5c>
 8024a1a:	230c      	movs	r3, #12
 8024a1c:	f8ca 3000 	str.w	r3, [sl]
 8024a20:	89a3      	ldrh	r3, [r4, #12]
 8024a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024a26:	81a3      	strh	r3, [r4, #12]
 8024a28:	f04f 30ff 	mov.w	r0, #4294967295
 8024a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a30:	6921      	ldr	r1, [r4, #16]
 8024a32:	464a      	mov	r2, r9
 8024a34:	f7fe f982 	bl	8022d3c <memcpy>
 8024a38:	89a3      	ldrh	r3, [r4, #12]
 8024a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024a42:	81a3      	strh	r3, [r4, #12]
 8024a44:	6126      	str	r6, [r4, #16]
 8024a46:	6165      	str	r5, [r4, #20]
 8024a48:	444e      	add	r6, r9
 8024a4a:	eba5 0509 	sub.w	r5, r5, r9
 8024a4e:	6026      	str	r6, [r4, #0]
 8024a50:	60a5      	str	r5, [r4, #8]
 8024a52:	463e      	mov	r6, r7
 8024a54:	42be      	cmp	r6, r7
 8024a56:	d900      	bls.n	8024a5a <__ssputs_r+0x86>
 8024a58:	463e      	mov	r6, r7
 8024a5a:	4632      	mov	r2, r6
 8024a5c:	6820      	ldr	r0, [r4, #0]
 8024a5e:	4641      	mov	r1, r8
 8024a60:	f000 fce8 	bl	8025434 <memmove>
 8024a64:	68a3      	ldr	r3, [r4, #8]
 8024a66:	6822      	ldr	r2, [r4, #0]
 8024a68:	1b9b      	subs	r3, r3, r6
 8024a6a:	4432      	add	r2, r6
 8024a6c:	60a3      	str	r3, [r4, #8]
 8024a6e:	6022      	str	r2, [r4, #0]
 8024a70:	2000      	movs	r0, #0
 8024a72:	e7db      	b.n	8024a2c <__ssputs_r+0x58>
 8024a74:	462a      	mov	r2, r5
 8024a76:	f7ff ff87 	bl	8024988 <_realloc_r>
 8024a7a:	4606      	mov	r6, r0
 8024a7c:	2800      	cmp	r0, #0
 8024a7e:	d1e1      	bne.n	8024a44 <__ssputs_r+0x70>
 8024a80:	6921      	ldr	r1, [r4, #16]
 8024a82:	4650      	mov	r0, sl
 8024a84:	f7fe f980 	bl	8022d88 <_free_r>
 8024a88:	e7c7      	b.n	8024a1a <__ssputs_r+0x46>
	...

08024a8c <_svfiprintf_r>:
 8024a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a90:	4698      	mov	r8, r3
 8024a92:	898b      	ldrh	r3, [r1, #12]
 8024a94:	061b      	lsls	r3, r3, #24
 8024a96:	b09d      	sub	sp, #116	; 0x74
 8024a98:	4607      	mov	r7, r0
 8024a9a:	460d      	mov	r5, r1
 8024a9c:	4614      	mov	r4, r2
 8024a9e:	d50e      	bpl.n	8024abe <_svfiprintf_r+0x32>
 8024aa0:	690b      	ldr	r3, [r1, #16]
 8024aa2:	b963      	cbnz	r3, 8024abe <_svfiprintf_r+0x32>
 8024aa4:	2140      	movs	r1, #64	; 0x40
 8024aa6:	f7fe f9bf 	bl	8022e28 <_malloc_r>
 8024aaa:	6028      	str	r0, [r5, #0]
 8024aac:	6128      	str	r0, [r5, #16]
 8024aae:	b920      	cbnz	r0, 8024aba <_svfiprintf_r+0x2e>
 8024ab0:	230c      	movs	r3, #12
 8024ab2:	603b      	str	r3, [r7, #0]
 8024ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8024ab8:	e0d1      	b.n	8024c5e <_svfiprintf_r+0x1d2>
 8024aba:	2340      	movs	r3, #64	; 0x40
 8024abc:	616b      	str	r3, [r5, #20]
 8024abe:	2300      	movs	r3, #0
 8024ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8024ac2:	2320      	movs	r3, #32
 8024ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8024acc:	2330      	movs	r3, #48	; 0x30
 8024ace:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024c78 <_svfiprintf_r+0x1ec>
 8024ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024ad6:	f04f 0901 	mov.w	r9, #1
 8024ada:	4623      	mov	r3, r4
 8024adc:	469a      	mov	sl, r3
 8024ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024ae2:	b10a      	cbz	r2, 8024ae8 <_svfiprintf_r+0x5c>
 8024ae4:	2a25      	cmp	r2, #37	; 0x25
 8024ae6:	d1f9      	bne.n	8024adc <_svfiprintf_r+0x50>
 8024ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8024aec:	d00b      	beq.n	8024b06 <_svfiprintf_r+0x7a>
 8024aee:	465b      	mov	r3, fp
 8024af0:	4622      	mov	r2, r4
 8024af2:	4629      	mov	r1, r5
 8024af4:	4638      	mov	r0, r7
 8024af6:	f7ff ff6d 	bl	80249d4 <__ssputs_r>
 8024afa:	3001      	adds	r0, #1
 8024afc:	f000 80aa 	beq.w	8024c54 <_svfiprintf_r+0x1c8>
 8024b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024b02:	445a      	add	r2, fp
 8024b04:	9209      	str	r2, [sp, #36]	; 0x24
 8024b06:	f89a 3000 	ldrb.w	r3, [sl]
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	f000 80a2 	beq.w	8024c54 <_svfiprintf_r+0x1c8>
 8024b10:	2300      	movs	r3, #0
 8024b12:	f04f 32ff 	mov.w	r2, #4294967295
 8024b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024b1a:	f10a 0a01 	add.w	sl, sl, #1
 8024b1e:	9304      	str	r3, [sp, #16]
 8024b20:	9307      	str	r3, [sp, #28]
 8024b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024b26:	931a      	str	r3, [sp, #104]	; 0x68
 8024b28:	4654      	mov	r4, sl
 8024b2a:	2205      	movs	r2, #5
 8024b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024b30:	4851      	ldr	r0, [pc, #324]	; (8024c78 <_svfiprintf_r+0x1ec>)
 8024b32:	f7db fb95 	bl	8000260 <memchr>
 8024b36:	9a04      	ldr	r2, [sp, #16]
 8024b38:	b9d8      	cbnz	r0, 8024b72 <_svfiprintf_r+0xe6>
 8024b3a:	06d0      	lsls	r0, r2, #27
 8024b3c:	bf44      	itt	mi
 8024b3e:	2320      	movmi	r3, #32
 8024b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024b44:	0711      	lsls	r1, r2, #28
 8024b46:	bf44      	itt	mi
 8024b48:	232b      	movmi	r3, #43	; 0x2b
 8024b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8024b52:	2b2a      	cmp	r3, #42	; 0x2a
 8024b54:	d015      	beq.n	8024b82 <_svfiprintf_r+0xf6>
 8024b56:	9a07      	ldr	r2, [sp, #28]
 8024b58:	4654      	mov	r4, sl
 8024b5a:	2000      	movs	r0, #0
 8024b5c:	f04f 0c0a 	mov.w	ip, #10
 8024b60:	4621      	mov	r1, r4
 8024b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024b66:	3b30      	subs	r3, #48	; 0x30
 8024b68:	2b09      	cmp	r3, #9
 8024b6a:	d94e      	bls.n	8024c0a <_svfiprintf_r+0x17e>
 8024b6c:	b1b0      	cbz	r0, 8024b9c <_svfiprintf_r+0x110>
 8024b6e:	9207      	str	r2, [sp, #28]
 8024b70:	e014      	b.n	8024b9c <_svfiprintf_r+0x110>
 8024b72:	eba0 0308 	sub.w	r3, r0, r8
 8024b76:	fa09 f303 	lsl.w	r3, r9, r3
 8024b7a:	4313      	orrs	r3, r2
 8024b7c:	9304      	str	r3, [sp, #16]
 8024b7e:	46a2      	mov	sl, r4
 8024b80:	e7d2      	b.n	8024b28 <_svfiprintf_r+0x9c>
 8024b82:	9b03      	ldr	r3, [sp, #12]
 8024b84:	1d19      	adds	r1, r3, #4
 8024b86:	681b      	ldr	r3, [r3, #0]
 8024b88:	9103      	str	r1, [sp, #12]
 8024b8a:	2b00      	cmp	r3, #0
 8024b8c:	bfbb      	ittet	lt
 8024b8e:	425b      	neglt	r3, r3
 8024b90:	f042 0202 	orrlt.w	r2, r2, #2
 8024b94:	9307      	strge	r3, [sp, #28]
 8024b96:	9307      	strlt	r3, [sp, #28]
 8024b98:	bfb8      	it	lt
 8024b9a:	9204      	strlt	r2, [sp, #16]
 8024b9c:	7823      	ldrb	r3, [r4, #0]
 8024b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8024ba0:	d10c      	bne.n	8024bbc <_svfiprintf_r+0x130>
 8024ba2:	7863      	ldrb	r3, [r4, #1]
 8024ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8024ba6:	d135      	bne.n	8024c14 <_svfiprintf_r+0x188>
 8024ba8:	9b03      	ldr	r3, [sp, #12]
 8024baa:	1d1a      	adds	r2, r3, #4
 8024bac:	681b      	ldr	r3, [r3, #0]
 8024bae:	9203      	str	r2, [sp, #12]
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	bfb8      	it	lt
 8024bb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8024bb8:	3402      	adds	r4, #2
 8024bba:	9305      	str	r3, [sp, #20]
 8024bbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024c88 <_svfiprintf_r+0x1fc>
 8024bc0:	7821      	ldrb	r1, [r4, #0]
 8024bc2:	2203      	movs	r2, #3
 8024bc4:	4650      	mov	r0, sl
 8024bc6:	f7db fb4b 	bl	8000260 <memchr>
 8024bca:	b140      	cbz	r0, 8024bde <_svfiprintf_r+0x152>
 8024bcc:	2340      	movs	r3, #64	; 0x40
 8024bce:	eba0 000a 	sub.w	r0, r0, sl
 8024bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8024bd6:	9b04      	ldr	r3, [sp, #16]
 8024bd8:	4303      	orrs	r3, r0
 8024bda:	3401      	adds	r4, #1
 8024bdc:	9304      	str	r3, [sp, #16]
 8024bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024be2:	4826      	ldr	r0, [pc, #152]	; (8024c7c <_svfiprintf_r+0x1f0>)
 8024be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024be8:	2206      	movs	r2, #6
 8024bea:	f7db fb39 	bl	8000260 <memchr>
 8024bee:	2800      	cmp	r0, #0
 8024bf0:	d038      	beq.n	8024c64 <_svfiprintf_r+0x1d8>
 8024bf2:	4b23      	ldr	r3, [pc, #140]	; (8024c80 <_svfiprintf_r+0x1f4>)
 8024bf4:	bb1b      	cbnz	r3, 8024c3e <_svfiprintf_r+0x1b2>
 8024bf6:	9b03      	ldr	r3, [sp, #12]
 8024bf8:	3307      	adds	r3, #7
 8024bfa:	f023 0307 	bic.w	r3, r3, #7
 8024bfe:	3308      	adds	r3, #8
 8024c00:	9303      	str	r3, [sp, #12]
 8024c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c04:	4433      	add	r3, r6
 8024c06:	9309      	str	r3, [sp, #36]	; 0x24
 8024c08:	e767      	b.n	8024ada <_svfiprintf_r+0x4e>
 8024c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8024c0e:	460c      	mov	r4, r1
 8024c10:	2001      	movs	r0, #1
 8024c12:	e7a5      	b.n	8024b60 <_svfiprintf_r+0xd4>
 8024c14:	2300      	movs	r3, #0
 8024c16:	3401      	adds	r4, #1
 8024c18:	9305      	str	r3, [sp, #20]
 8024c1a:	4619      	mov	r1, r3
 8024c1c:	f04f 0c0a 	mov.w	ip, #10
 8024c20:	4620      	mov	r0, r4
 8024c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024c26:	3a30      	subs	r2, #48	; 0x30
 8024c28:	2a09      	cmp	r2, #9
 8024c2a:	d903      	bls.n	8024c34 <_svfiprintf_r+0x1a8>
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	d0c5      	beq.n	8024bbc <_svfiprintf_r+0x130>
 8024c30:	9105      	str	r1, [sp, #20]
 8024c32:	e7c3      	b.n	8024bbc <_svfiprintf_r+0x130>
 8024c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8024c38:	4604      	mov	r4, r0
 8024c3a:	2301      	movs	r3, #1
 8024c3c:	e7f0      	b.n	8024c20 <_svfiprintf_r+0x194>
 8024c3e:	ab03      	add	r3, sp, #12
 8024c40:	9300      	str	r3, [sp, #0]
 8024c42:	462a      	mov	r2, r5
 8024c44:	4b0f      	ldr	r3, [pc, #60]	; (8024c84 <_svfiprintf_r+0x1f8>)
 8024c46:	a904      	add	r1, sp, #16
 8024c48:	4638      	mov	r0, r7
 8024c4a:	f3af 8000 	nop.w
 8024c4e:	1c42      	adds	r2, r0, #1
 8024c50:	4606      	mov	r6, r0
 8024c52:	d1d6      	bne.n	8024c02 <_svfiprintf_r+0x176>
 8024c54:	89ab      	ldrh	r3, [r5, #12]
 8024c56:	065b      	lsls	r3, r3, #25
 8024c58:	f53f af2c 	bmi.w	8024ab4 <_svfiprintf_r+0x28>
 8024c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024c5e:	b01d      	add	sp, #116	; 0x74
 8024c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c64:	ab03      	add	r3, sp, #12
 8024c66:	9300      	str	r3, [sp, #0]
 8024c68:	462a      	mov	r2, r5
 8024c6a:	4b06      	ldr	r3, [pc, #24]	; (8024c84 <_svfiprintf_r+0x1f8>)
 8024c6c:	a904      	add	r1, sp, #16
 8024c6e:	4638      	mov	r0, r7
 8024c70:	f000 f9d4 	bl	802501c <_printf_i>
 8024c74:	e7eb      	b.n	8024c4e <_svfiprintf_r+0x1c2>
 8024c76:	bf00      	nop
 8024c78:	0802cfa3 	.word	0x0802cfa3
 8024c7c:	0802cfad 	.word	0x0802cfad
 8024c80:	00000000 	.word	0x00000000
 8024c84:	080249d5 	.word	0x080249d5
 8024c88:	0802cfa9 	.word	0x0802cfa9

08024c8c <__sfputc_r>:
 8024c8c:	6893      	ldr	r3, [r2, #8]
 8024c8e:	3b01      	subs	r3, #1
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	b410      	push	{r4}
 8024c94:	6093      	str	r3, [r2, #8]
 8024c96:	da08      	bge.n	8024caa <__sfputc_r+0x1e>
 8024c98:	6994      	ldr	r4, [r2, #24]
 8024c9a:	42a3      	cmp	r3, r4
 8024c9c:	db01      	blt.n	8024ca2 <__sfputc_r+0x16>
 8024c9e:	290a      	cmp	r1, #10
 8024ca0:	d103      	bne.n	8024caa <__sfputc_r+0x1e>
 8024ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ca6:	f7ff bb75 	b.w	8024394 <__swbuf_r>
 8024caa:	6813      	ldr	r3, [r2, #0]
 8024cac:	1c58      	adds	r0, r3, #1
 8024cae:	6010      	str	r0, [r2, #0]
 8024cb0:	7019      	strb	r1, [r3, #0]
 8024cb2:	4608      	mov	r0, r1
 8024cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024cb8:	4770      	bx	lr

08024cba <__sfputs_r>:
 8024cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cbc:	4606      	mov	r6, r0
 8024cbe:	460f      	mov	r7, r1
 8024cc0:	4614      	mov	r4, r2
 8024cc2:	18d5      	adds	r5, r2, r3
 8024cc4:	42ac      	cmp	r4, r5
 8024cc6:	d101      	bne.n	8024ccc <__sfputs_r+0x12>
 8024cc8:	2000      	movs	r0, #0
 8024cca:	e007      	b.n	8024cdc <__sfputs_r+0x22>
 8024ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024cd0:	463a      	mov	r2, r7
 8024cd2:	4630      	mov	r0, r6
 8024cd4:	f7ff ffda 	bl	8024c8c <__sfputc_r>
 8024cd8:	1c43      	adds	r3, r0, #1
 8024cda:	d1f3      	bne.n	8024cc4 <__sfputs_r+0xa>
 8024cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024ce0 <_vfiprintf_r>:
 8024ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ce4:	460d      	mov	r5, r1
 8024ce6:	b09d      	sub	sp, #116	; 0x74
 8024ce8:	4614      	mov	r4, r2
 8024cea:	4698      	mov	r8, r3
 8024cec:	4606      	mov	r6, r0
 8024cee:	b118      	cbz	r0, 8024cf8 <_vfiprintf_r+0x18>
 8024cf0:	6983      	ldr	r3, [r0, #24]
 8024cf2:	b90b      	cbnz	r3, 8024cf8 <_vfiprintf_r+0x18>
 8024cf4:	f7fd fbf8 	bl	80224e8 <__sinit>
 8024cf8:	4b89      	ldr	r3, [pc, #548]	; (8024f20 <_vfiprintf_r+0x240>)
 8024cfa:	429d      	cmp	r5, r3
 8024cfc:	d11b      	bne.n	8024d36 <_vfiprintf_r+0x56>
 8024cfe:	6875      	ldr	r5, [r6, #4]
 8024d00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024d02:	07d9      	lsls	r1, r3, #31
 8024d04:	d405      	bmi.n	8024d12 <_vfiprintf_r+0x32>
 8024d06:	89ab      	ldrh	r3, [r5, #12]
 8024d08:	059a      	lsls	r2, r3, #22
 8024d0a:	d402      	bmi.n	8024d12 <_vfiprintf_r+0x32>
 8024d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024d0e:	f7fd ff9e 	bl	8022c4e <__retarget_lock_acquire_recursive>
 8024d12:	89ab      	ldrh	r3, [r5, #12]
 8024d14:	071b      	lsls	r3, r3, #28
 8024d16:	d501      	bpl.n	8024d1c <_vfiprintf_r+0x3c>
 8024d18:	692b      	ldr	r3, [r5, #16]
 8024d1a:	b9eb      	cbnz	r3, 8024d58 <_vfiprintf_r+0x78>
 8024d1c:	4629      	mov	r1, r5
 8024d1e:	4630      	mov	r0, r6
 8024d20:	f7ff fb9c 	bl	802445c <__swsetup_r>
 8024d24:	b1c0      	cbz	r0, 8024d58 <_vfiprintf_r+0x78>
 8024d26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024d28:	07dc      	lsls	r4, r3, #31
 8024d2a:	d50e      	bpl.n	8024d4a <_vfiprintf_r+0x6a>
 8024d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8024d30:	b01d      	add	sp, #116	; 0x74
 8024d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d36:	4b7b      	ldr	r3, [pc, #492]	; (8024f24 <_vfiprintf_r+0x244>)
 8024d38:	429d      	cmp	r5, r3
 8024d3a:	d101      	bne.n	8024d40 <_vfiprintf_r+0x60>
 8024d3c:	68b5      	ldr	r5, [r6, #8]
 8024d3e:	e7df      	b.n	8024d00 <_vfiprintf_r+0x20>
 8024d40:	4b79      	ldr	r3, [pc, #484]	; (8024f28 <_vfiprintf_r+0x248>)
 8024d42:	429d      	cmp	r5, r3
 8024d44:	bf08      	it	eq
 8024d46:	68f5      	ldreq	r5, [r6, #12]
 8024d48:	e7da      	b.n	8024d00 <_vfiprintf_r+0x20>
 8024d4a:	89ab      	ldrh	r3, [r5, #12]
 8024d4c:	0598      	lsls	r0, r3, #22
 8024d4e:	d4ed      	bmi.n	8024d2c <_vfiprintf_r+0x4c>
 8024d50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024d52:	f7fd ff7e 	bl	8022c52 <__retarget_lock_release_recursive>
 8024d56:	e7e9      	b.n	8024d2c <_vfiprintf_r+0x4c>
 8024d58:	2300      	movs	r3, #0
 8024d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8024d5c:	2320      	movs	r3, #32
 8024d5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024d62:	f8cd 800c 	str.w	r8, [sp, #12]
 8024d66:	2330      	movs	r3, #48	; 0x30
 8024d68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024f2c <_vfiprintf_r+0x24c>
 8024d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024d70:	f04f 0901 	mov.w	r9, #1
 8024d74:	4623      	mov	r3, r4
 8024d76:	469a      	mov	sl, r3
 8024d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024d7c:	b10a      	cbz	r2, 8024d82 <_vfiprintf_r+0xa2>
 8024d7e:	2a25      	cmp	r2, #37	; 0x25
 8024d80:	d1f9      	bne.n	8024d76 <_vfiprintf_r+0x96>
 8024d82:	ebba 0b04 	subs.w	fp, sl, r4
 8024d86:	d00b      	beq.n	8024da0 <_vfiprintf_r+0xc0>
 8024d88:	465b      	mov	r3, fp
 8024d8a:	4622      	mov	r2, r4
 8024d8c:	4629      	mov	r1, r5
 8024d8e:	4630      	mov	r0, r6
 8024d90:	f7ff ff93 	bl	8024cba <__sfputs_r>
 8024d94:	3001      	adds	r0, #1
 8024d96:	f000 80aa 	beq.w	8024eee <_vfiprintf_r+0x20e>
 8024d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d9c:	445a      	add	r2, fp
 8024d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8024da0:	f89a 3000 	ldrb.w	r3, [sl]
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	f000 80a2 	beq.w	8024eee <_vfiprintf_r+0x20e>
 8024daa:	2300      	movs	r3, #0
 8024dac:	f04f 32ff 	mov.w	r2, #4294967295
 8024db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024db4:	f10a 0a01 	add.w	sl, sl, #1
 8024db8:	9304      	str	r3, [sp, #16]
 8024dba:	9307      	str	r3, [sp, #28]
 8024dbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8024dc2:	4654      	mov	r4, sl
 8024dc4:	2205      	movs	r2, #5
 8024dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024dca:	4858      	ldr	r0, [pc, #352]	; (8024f2c <_vfiprintf_r+0x24c>)
 8024dcc:	f7db fa48 	bl	8000260 <memchr>
 8024dd0:	9a04      	ldr	r2, [sp, #16]
 8024dd2:	b9d8      	cbnz	r0, 8024e0c <_vfiprintf_r+0x12c>
 8024dd4:	06d1      	lsls	r1, r2, #27
 8024dd6:	bf44      	itt	mi
 8024dd8:	2320      	movmi	r3, #32
 8024dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024dde:	0713      	lsls	r3, r2, #28
 8024de0:	bf44      	itt	mi
 8024de2:	232b      	movmi	r3, #43	; 0x2b
 8024de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024de8:	f89a 3000 	ldrb.w	r3, [sl]
 8024dec:	2b2a      	cmp	r3, #42	; 0x2a
 8024dee:	d015      	beq.n	8024e1c <_vfiprintf_r+0x13c>
 8024df0:	9a07      	ldr	r2, [sp, #28]
 8024df2:	4654      	mov	r4, sl
 8024df4:	2000      	movs	r0, #0
 8024df6:	f04f 0c0a 	mov.w	ip, #10
 8024dfa:	4621      	mov	r1, r4
 8024dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024e00:	3b30      	subs	r3, #48	; 0x30
 8024e02:	2b09      	cmp	r3, #9
 8024e04:	d94e      	bls.n	8024ea4 <_vfiprintf_r+0x1c4>
 8024e06:	b1b0      	cbz	r0, 8024e36 <_vfiprintf_r+0x156>
 8024e08:	9207      	str	r2, [sp, #28]
 8024e0a:	e014      	b.n	8024e36 <_vfiprintf_r+0x156>
 8024e0c:	eba0 0308 	sub.w	r3, r0, r8
 8024e10:	fa09 f303 	lsl.w	r3, r9, r3
 8024e14:	4313      	orrs	r3, r2
 8024e16:	9304      	str	r3, [sp, #16]
 8024e18:	46a2      	mov	sl, r4
 8024e1a:	e7d2      	b.n	8024dc2 <_vfiprintf_r+0xe2>
 8024e1c:	9b03      	ldr	r3, [sp, #12]
 8024e1e:	1d19      	adds	r1, r3, #4
 8024e20:	681b      	ldr	r3, [r3, #0]
 8024e22:	9103      	str	r1, [sp, #12]
 8024e24:	2b00      	cmp	r3, #0
 8024e26:	bfbb      	ittet	lt
 8024e28:	425b      	neglt	r3, r3
 8024e2a:	f042 0202 	orrlt.w	r2, r2, #2
 8024e2e:	9307      	strge	r3, [sp, #28]
 8024e30:	9307      	strlt	r3, [sp, #28]
 8024e32:	bfb8      	it	lt
 8024e34:	9204      	strlt	r2, [sp, #16]
 8024e36:	7823      	ldrb	r3, [r4, #0]
 8024e38:	2b2e      	cmp	r3, #46	; 0x2e
 8024e3a:	d10c      	bne.n	8024e56 <_vfiprintf_r+0x176>
 8024e3c:	7863      	ldrb	r3, [r4, #1]
 8024e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8024e40:	d135      	bne.n	8024eae <_vfiprintf_r+0x1ce>
 8024e42:	9b03      	ldr	r3, [sp, #12]
 8024e44:	1d1a      	adds	r2, r3, #4
 8024e46:	681b      	ldr	r3, [r3, #0]
 8024e48:	9203      	str	r2, [sp, #12]
 8024e4a:	2b00      	cmp	r3, #0
 8024e4c:	bfb8      	it	lt
 8024e4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8024e52:	3402      	adds	r4, #2
 8024e54:	9305      	str	r3, [sp, #20]
 8024e56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024f3c <_vfiprintf_r+0x25c>
 8024e5a:	7821      	ldrb	r1, [r4, #0]
 8024e5c:	2203      	movs	r2, #3
 8024e5e:	4650      	mov	r0, sl
 8024e60:	f7db f9fe 	bl	8000260 <memchr>
 8024e64:	b140      	cbz	r0, 8024e78 <_vfiprintf_r+0x198>
 8024e66:	2340      	movs	r3, #64	; 0x40
 8024e68:	eba0 000a 	sub.w	r0, r0, sl
 8024e6c:	fa03 f000 	lsl.w	r0, r3, r0
 8024e70:	9b04      	ldr	r3, [sp, #16]
 8024e72:	4303      	orrs	r3, r0
 8024e74:	3401      	adds	r4, #1
 8024e76:	9304      	str	r3, [sp, #16]
 8024e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024e7c:	482c      	ldr	r0, [pc, #176]	; (8024f30 <_vfiprintf_r+0x250>)
 8024e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024e82:	2206      	movs	r2, #6
 8024e84:	f7db f9ec 	bl	8000260 <memchr>
 8024e88:	2800      	cmp	r0, #0
 8024e8a:	d03f      	beq.n	8024f0c <_vfiprintf_r+0x22c>
 8024e8c:	4b29      	ldr	r3, [pc, #164]	; (8024f34 <_vfiprintf_r+0x254>)
 8024e8e:	bb1b      	cbnz	r3, 8024ed8 <_vfiprintf_r+0x1f8>
 8024e90:	9b03      	ldr	r3, [sp, #12]
 8024e92:	3307      	adds	r3, #7
 8024e94:	f023 0307 	bic.w	r3, r3, #7
 8024e98:	3308      	adds	r3, #8
 8024e9a:	9303      	str	r3, [sp, #12]
 8024e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e9e:	443b      	add	r3, r7
 8024ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8024ea2:	e767      	b.n	8024d74 <_vfiprintf_r+0x94>
 8024ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8024ea8:	460c      	mov	r4, r1
 8024eaa:	2001      	movs	r0, #1
 8024eac:	e7a5      	b.n	8024dfa <_vfiprintf_r+0x11a>
 8024eae:	2300      	movs	r3, #0
 8024eb0:	3401      	adds	r4, #1
 8024eb2:	9305      	str	r3, [sp, #20]
 8024eb4:	4619      	mov	r1, r3
 8024eb6:	f04f 0c0a 	mov.w	ip, #10
 8024eba:	4620      	mov	r0, r4
 8024ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ec0:	3a30      	subs	r2, #48	; 0x30
 8024ec2:	2a09      	cmp	r2, #9
 8024ec4:	d903      	bls.n	8024ece <_vfiprintf_r+0x1ee>
 8024ec6:	2b00      	cmp	r3, #0
 8024ec8:	d0c5      	beq.n	8024e56 <_vfiprintf_r+0x176>
 8024eca:	9105      	str	r1, [sp, #20]
 8024ecc:	e7c3      	b.n	8024e56 <_vfiprintf_r+0x176>
 8024ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8024ed2:	4604      	mov	r4, r0
 8024ed4:	2301      	movs	r3, #1
 8024ed6:	e7f0      	b.n	8024eba <_vfiprintf_r+0x1da>
 8024ed8:	ab03      	add	r3, sp, #12
 8024eda:	9300      	str	r3, [sp, #0]
 8024edc:	462a      	mov	r2, r5
 8024ede:	4b16      	ldr	r3, [pc, #88]	; (8024f38 <_vfiprintf_r+0x258>)
 8024ee0:	a904      	add	r1, sp, #16
 8024ee2:	4630      	mov	r0, r6
 8024ee4:	f3af 8000 	nop.w
 8024ee8:	4607      	mov	r7, r0
 8024eea:	1c78      	adds	r0, r7, #1
 8024eec:	d1d6      	bne.n	8024e9c <_vfiprintf_r+0x1bc>
 8024eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024ef0:	07d9      	lsls	r1, r3, #31
 8024ef2:	d405      	bmi.n	8024f00 <_vfiprintf_r+0x220>
 8024ef4:	89ab      	ldrh	r3, [r5, #12]
 8024ef6:	059a      	lsls	r2, r3, #22
 8024ef8:	d402      	bmi.n	8024f00 <_vfiprintf_r+0x220>
 8024efa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024efc:	f7fd fea9 	bl	8022c52 <__retarget_lock_release_recursive>
 8024f00:	89ab      	ldrh	r3, [r5, #12]
 8024f02:	065b      	lsls	r3, r3, #25
 8024f04:	f53f af12 	bmi.w	8024d2c <_vfiprintf_r+0x4c>
 8024f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024f0a:	e711      	b.n	8024d30 <_vfiprintf_r+0x50>
 8024f0c:	ab03      	add	r3, sp, #12
 8024f0e:	9300      	str	r3, [sp, #0]
 8024f10:	462a      	mov	r2, r5
 8024f12:	4b09      	ldr	r3, [pc, #36]	; (8024f38 <_vfiprintf_r+0x258>)
 8024f14:	a904      	add	r1, sp, #16
 8024f16:	4630      	mov	r0, r6
 8024f18:	f000 f880 	bl	802501c <_printf_i>
 8024f1c:	e7e4      	b.n	8024ee8 <_vfiprintf_r+0x208>
 8024f1e:	bf00      	nop
 8024f20:	0802ca24 	.word	0x0802ca24
 8024f24:	0802ca44 	.word	0x0802ca44
 8024f28:	0802ca04 	.word	0x0802ca04
 8024f2c:	0802cfa3 	.word	0x0802cfa3
 8024f30:	0802cfad 	.word	0x0802cfad
 8024f34:	00000000 	.word	0x00000000
 8024f38:	08024cbb 	.word	0x08024cbb
 8024f3c:	0802cfa9 	.word	0x0802cfa9

08024f40 <_printf_common>:
 8024f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024f44:	4616      	mov	r6, r2
 8024f46:	4699      	mov	r9, r3
 8024f48:	688a      	ldr	r2, [r1, #8]
 8024f4a:	690b      	ldr	r3, [r1, #16]
 8024f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024f50:	4293      	cmp	r3, r2
 8024f52:	bfb8      	it	lt
 8024f54:	4613      	movlt	r3, r2
 8024f56:	6033      	str	r3, [r6, #0]
 8024f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024f5c:	4607      	mov	r7, r0
 8024f5e:	460c      	mov	r4, r1
 8024f60:	b10a      	cbz	r2, 8024f66 <_printf_common+0x26>
 8024f62:	3301      	adds	r3, #1
 8024f64:	6033      	str	r3, [r6, #0]
 8024f66:	6823      	ldr	r3, [r4, #0]
 8024f68:	0699      	lsls	r1, r3, #26
 8024f6a:	bf42      	ittt	mi
 8024f6c:	6833      	ldrmi	r3, [r6, #0]
 8024f6e:	3302      	addmi	r3, #2
 8024f70:	6033      	strmi	r3, [r6, #0]
 8024f72:	6825      	ldr	r5, [r4, #0]
 8024f74:	f015 0506 	ands.w	r5, r5, #6
 8024f78:	d106      	bne.n	8024f88 <_printf_common+0x48>
 8024f7a:	f104 0a19 	add.w	sl, r4, #25
 8024f7e:	68e3      	ldr	r3, [r4, #12]
 8024f80:	6832      	ldr	r2, [r6, #0]
 8024f82:	1a9b      	subs	r3, r3, r2
 8024f84:	42ab      	cmp	r3, r5
 8024f86:	dc26      	bgt.n	8024fd6 <_printf_common+0x96>
 8024f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024f8c:	1e13      	subs	r3, r2, #0
 8024f8e:	6822      	ldr	r2, [r4, #0]
 8024f90:	bf18      	it	ne
 8024f92:	2301      	movne	r3, #1
 8024f94:	0692      	lsls	r2, r2, #26
 8024f96:	d42b      	bmi.n	8024ff0 <_printf_common+0xb0>
 8024f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024f9c:	4649      	mov	r1, r9
 8024f9e:	4638      	mov	r0, r7
 8024fa0:	47c0      	blx	r8
 8024fa2:	3001      	adds	r0, #1
 8024fa4:	d01e      	beq.n	8024fe4 <_printf_common+0xa4>
 8024fa6:	6823      	ldr	r3, [r4, #0]
 8024fa8:	68e5      	ldr	r5, [r4, #12]
 8024faa:	6832      	ldr	r2, [r6, #0]
 8024fac:	f003 0306 	and.w	r3, r3, #6
 8024fb0:	2b04      	cmp	r3, #4
 8024fb2:	bf08      	it	eq
 8024fb4:	1aad      	subeq	r5, r5, r2
 8024fb6:	68a3      	ldr	r3, [r4, #8]
 8024fb8:	6922      	ldr	r2, [r4, #16]
 8024fba:	bf0c      	ite	eq
 8024fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024fc0:	2500      	movne	r5, #0
 8024fc2:	4293      	cmp	r3, r2
 8024fc4:	bfc4      	itt	gt
 8024fc6:	1a9b      	subgt	r3, r3, r2
 8024fc8:	18ed      	addgt	r5, r5, r3
 8024fca:	2600      	movs	r6, #0
 8024fcc:	341a      	adds	r4, #26
 8024fce:	42b5      	cmp	r5, r6
 8024fd0:	d11a      	bne.n	8025008 <_printf_common+0xc8>
 8024fd2:	2000      	movs	r0, #0
 8024fd4:	e008      	b.n	8024fe8 <_printf_common+0xa8>
 8024fd6:	2301      	movs	r3, #1
 8024fd8:	4652      	mov	r2, sl
 8024fda:	4649      	mov	r1, r9
 8024fdc:	4638      	mov	r0, r7
 8024fde:	47c0      	blx	r8
 8024fe0:	3001      	adds	r0, #1
 8024fe2:	d103      	bne.n	8024fec <_printf_common+0xac>
 8024fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8024fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024fec:	3501      	adds	r5, #1
 8024fee:	e7c6      	b.n	8024f7e <_printf_common+0x3e>
 8024ff0:	18e1      	adds	r1, r4, r3
 8024ff2:	1c5a      	adds	r2, r3, #1
 8024ff4:	2030      	movs	r0, #48	; 0x30
 8024ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024ffa:	4422      	add	r2, r4
 8024ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025004:	3302      	adds	r3, #2
 8025006:	e7c7      	b.n	8024f98 <_printf_common+0x58>
 8025008:	2301      	movs	r3, #1
 802500a:	4622      	mov	r2, r4
 802500c:	4649      	mov	r1, r9
 802500e:	4638      	mov	r0, r7
 8025010:	47c0      	blx	r8
 8025012:	3001      	adds	r0, #1
 8025014:	d0e6      	beq.n	8024fe4 <_printf_common+0xa4>
 8025016:	3601      	adds	r6, #1
 8025018:	e7d9      	b.n	8024fce <_printf_common+0x8e>
	...

0802501c <_printf_i>:
 802501c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025020:	460c      	mov	r4, r1
 8025022:	4691      	mov	r9, r2
 8025024:	7e27      	ldrb	r7, [r4, #24]
 8025026:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025028:	2f78      	cmp	r7, #120	; 0x78
 802502a:	4680      	mov	r8, r0
 802502c:	469a      	mov	sl, r3
 802502e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025032:	d807      	bhi.n	8025044 <_printf_i+0x28>
 8025034:	2f62      	cmp	r7, #98	; 0x62
 8025036:	d80a      	bhi.n	802504e <_printf_i+0x32>
 8025038:	2f00      	cmp	r7, #0
 802503a:	f000 80d8 	beq.w	80251ee <_printf_i+0x1d2>
 802503e:	2f58      	cmp	r7, #88	; 0x58
 8025040:	f000 80a3 	beq.w	802518a <_printf_i+0x16e>
 8025044:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802504c:	e03a      	b.n	80250c4 <_printf_i+0xa8>
 802504e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025052:	2b15      	cmp	r3, #21
 8025054:	d8f6      	bhi.n	8025044 <_printf_i+0x28>
 8025056:	a001      	add	r0, pc, #4	; (adr r0, 802505c <_printf_i+0x40>)
 8025058:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802505c:	080250b5 	.word	0x080250b5
 8025060:	080250c9 	.word	0x080250c9
 8025064:	08025045 	.word	0x08025045
 8025068:	08025045 	.word	0x08025045
 802506c:	08025045 	.word	0x08025045
 8025070:	08025045 	.word	0x08025045
 8025074:	080250c9 	.word	0x080250c9
 8025078:	08025045 	.word	0x08025045
 802507c:	08025045 	.word	0x08025045
 8025080:	08025045 	.word	0x08025045
 8025084:	08025045 	.word	0x08025045
 8025088:	080251d5 	.word	0x080251d5
 802508c:	080250f9 	.word	0x080250f9
 8025090:	080251b7 	.word	0x080251b7
 8025094:	08025045 	.word	0x08025045
 8025098:	08025045 	.word	0x08025045
 802509c:	080251f7 	.word	0x080251f7
 80250a0:	08025045 	.word	0x08025045
 80250a4:	080250f9 	.word	0x080250f9
 80250a8:	08025045 	.word	0x08025045
 80250ac:	08025045 	.word	0x08025045
 80250b0:	080251bf 	.word	0x080251bf
 80250b4:	680b      	ldr	r3, [r1, #0]
 80250b6:	1d1a      	adds	r2, r3, #4
 80250b8:	681b      	ldr	r3, [r3, #0]
 80250ba:	600a      	str	r2, [r1, #0]
 80250bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80250c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80250c4:	2301      	movs	r3, #1
 80250c6:	e0a3      	b.n	8025210 <_printf_i+0x1f4>
 80250c8:	6825      	ldr	r5, [r4, #0]
 80250ca:	6808      	ldr	r0, [r1, #0]
 80250cc:	062e      	lsls	r6, r5, #24
 80250ce:	f100 0304 	add.w	r3, r0, #4
 80250d2:	d50a      	bpl.n	80250ea <_printf_i+0xce>
 80250d4:	6805      	ldr	r5, [r0, #0]
 80250d6:	600b      	str	r3, [r1, #0]
 80250d8:	2d00      	cmp	r5, #0
 80250da:	da03      	bge.n	80250e4 <_printf_i+0xc8>
 80250dc:	232d      	movs	r3, #45	; 0x2d
 80250de:	426d      	negs	r5, r5
 80250e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250e4:	485e      	ldr	r0, [pc, #376]	; (8025260 <_printf_i+0x244>)
 80250e6:	230a      	movs	r3, #10
 80250e8:	e019      	b.n	802511e <_printf_i+0x102>
 80250ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80250ee:	6805      	ldr	r5, [r0, #0]
 80250f0:	600b      	str	r3, [r1, #0]
 80250f2:	bf18      	it	ne
 80250f4:	b22d      	sxthne	r5, r5
 80250f6:	e7ef      	b.n	80250d8 <_printf_i+0xbc>
 80250f8:	680b      	ldr	r3, [r1, #0]
 80250fa:	6825      	ldr	r5, [r4, #0]
 80250fc:	1d18      	adds	r0, r3, #4
 80250fe:	6008      	str	r0, [r1, #0]
 8025100:	0628      	lsls	r0, r5, #24
 8025102:	d501      	bpl.n	8025108 <_printf_i+0xec>
 8025104:	681d      	ldr	r5, [r3, #0]
 8025106:	e002      	b.n	802510e <_printf_i+0xf2>
 8025108:	0669      	lsls	r1, r5, #25
 802510a:	d5fb      	bpl.n	8025104 <_printf_i+0xe8>
 802510c:	881d      	ldrh	r5, [r3, #0]
 802510e:	4854      	ldr	r0, [pc, #336]	; (8025260 <_printf_i+0x244>)
 8025110:	2f6f      	cmp	r7, #111	; 0x6f
 8025112:	bf0c      	ite	eq
 8025114:	2308      	moveq	r3, #8
 8025116:	230a      	movne	r3, #10
 8025118:	2100      	movs	r1, #0
 802511a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802511e:	6866      	ldr	r6, [r4, #4]
 8025120:	60a6      	str	r6, [r4, #8]
 8025122:	2e00      	cmp	r6, #0
 8025124:	bfa2      	ittt	ge
 8025126:	6821      	ldrge	r1, [r4, #0]
 8025128:	f021 0104 	bicge.w	r1, r1, #4
 802512c:	6021      	strge	r1, [r4, #0]
 802512e:	b90d      	cbnz	r5, 8025134 <_printf_i+0x118>
 8025130:	2e00      	cmp	r6, #0
 8025132:	d04d      	beq.n	80251d0 <_printf_i+0x1b4>
 8025134:	4616      	mov	r6, r2
 8025136:	fbb5 f1f3 	udiv	r1, r5, r3
 802513a:	fb03 5711 	mls	r7, r3, r1, r5
 802513e:	5dc7      	ldrb	r7, [r0, r7]
 8025140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025144:	462f      	mov	r7, r5
 8025146:	42bb      	cmp	r3, r7
 8025148:	460d      	mov	r5, r1
 802514a:	d9f4      	bls.n	8025136 <_printf_i+0x11a>
 802514c:	2b08      	cmp	r3, #8
 802514e:	d10b      	bne.n	8025168 <_printf_i+0x14c>
 8025150:	6823      	ldr	r3, [r4, #0]
 8025152:	07df      	lsls	r7, r3, #31
 8025154:	d508      	bpl.n	8025168 <_printf_i+0x14c>
 8025156:	6923      	ldr	r3, [r4, #16]
 8025158:	6861      	ldr	r1, [r4, #4]
 802515a:	4299      	cmp	r1, r3
 802515c:	bfde      	ittt	le
 802515e:	2330      	movle	r3, #48	; 0x30
 8025160:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025164:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025168:	1b92      	subs	r2, r2, r6
 802516a:	6122      	str	r2, [r4, #16]
 802516c:	f8cd a000 	str.w	sl, [sp]
 8025170:	464b      	mov	r3, r9
 8025172:	aa03      	add	r2, sp, #12
 8025174:	4621      	mov	r1, r4
 8025176:	4640      	mov	r0, r8
 8025178:	f7ff fee2 	bl	8024f40 <_printf_common>
 802517c:	3001      	adds	r0, #1
 802517e:	d14c      	bne.n	802521a <_printf_i+0x1fe>
 8025180:	f04f 30ff 	mov.w	r0, #4294967295
 8025184:	b004      	add	sp, #16
 8025186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802518a:	4835      	ldr	r0, [pc, #212]	; (8025260 <_printf_i+0x244>)
 802518c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025190:	6823      	ldr	r3, [r4, #0]
 8025192:	680e      	ldr	r6, [r1, #0]
 8025194:	061f      	lsls	r7, r3, #24
 8025196:	f856 5b04 	ldr.w	r5, [r6], #4
 802519a:	600e      	str	r6, [r1, #0]
 802519c:	d514      	bpl.n	80251c8 <_printf_i+0x1ac>
 802519e:	07d9      	lsls	r1, r3, #31
 80251a0:	bf44      	itt	mi
 80251a2:	f043 0320 	orrmi.w	r3, r3, #32
 80251a6:	6023      	strmi	r3, [r4, #0]
 80251a8:	b91d      	cbnz	r5, 80251b2 <_printf_i+0x196>
 80251aa:	6823      	ldr	r3, [r4, #0]
 80251ac:	f023 0320 	bic.w	r3, r3, #32
 80251b0:	6023      	str	r3, [r4, #0]
 80251b2:	2310      	movs	r3, #16
 80251b4:	e7b0      	b.n	8025118 <_printf_i+0xfc>
 80251b6:	6823      	ldr	r3, [r4, #0]
 80251b8:	f043 0320 	orr.w	r3, r3, #32
 80251bc:	6023      	str	r3, [r4, #0]
 80251be:	2378      	movs	r3, #120	; 0x78
 80251c0:	4828      	ldr	r0, [pc, #160]	; (8025264 <_printf_i+0x248>)
 80251c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80251c6:	e7e3      	b.n	8025190 <_printf_i+0x174>
 80251c8:	065e      	lsls	r6, r3, #25
 80251ca:	bf48      	it	mi
 80251cc:	b2ad      	uxthmi	r5, r5
 80251ce:	e7e6      	b.n	802519e <_printf_i+0x182>
 80251d0:	4616      	mov	r6, r2
 80251d2:	e7bb      	b.n	802514c <_printf_i+0x130>
 80251d4:	680b      	ldr	r3, [r1, #0]
 80251d6:	6826      	ldr	r6, [r4, #0]
 80251d8:	6960      	ldr	r0, [r4, #20]
 80251da:	1d1d      	adds	r5, r3, #4
 80251dc:	600d      	str	r5, [r1, #0]
 80251de:	0635      	lsls	r5, r6, #24
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	d501      	bpl.n	80251e8 <_printf_i+0x1cc>
 80251e4:	6018      	str	r0, [r3, #0]
 80251e6:	e002      	b.n	80251ee <_printf_i+0x1d2>
 80251e8:	0671      	lsls	r1, r6, #25
 80251ea:	d5fb      	bpl.n	80251e4 <_printf_i+0x1c8>
 80251ec:	8018      	strh	r0, [r3, #0]
 80251ee:	2300      	movs	r3, #0
 80251f0:	6123      	str	r3, [r4, #16]
 80251f2:	4616      	mov	r6, r2
 80251f4:	e7ba      	b.n	802516c <_printf_i+0x150>
 80251f6:	680b      	ldr	r3, [r1, #0]
 80251f8:	1d1a      	adds	r2, r3, #4
 80251fa:	600a      	str	r2, [r1, #0]
 80251fc:	681e      	ldr	r6, [r3, #0]
 80251fe:	6862      	ldr	r2, [r4, #4]
 8025200:	2100      	movs	r1, #0
 8025202:	4630      	mov	r0, r6
 8025204:	f7db f82c 	bl	8000260 <memchr>
 8025208:	b108      	cbz	r0, 802520e <_printf_i+0x1f2>
 802520a:	1b80      	subs	r0, r0, r6
 802520c:	6060      	str	r0, [r4, #4]
 802520e:	6863      	ldr	r3, [r4, #4]
 8025210:	6123      	str	r3, [r4, #16]
 8025212:	2300      	movs	r3, #0
 8025214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025218:	e7a8      	b.n	802516c <_printf_i+0x150>
 802521a:	6923      	ldr	r3, [r4, #16]
 802521c:	4632      	mov	r2, r6
 802521e:	4649      	mov	r1, r9
 8025220:	4640      	mov	r0, r8
 8025222:	47d0      	blx	sl
 8025224:	3001      	adds	r0, #1
 8025226:	d0ab      	beq.n	8025180 <_printf_i+0x164>
 8025228:	6823      	ldr	r3, [r4, #0]
 802522a:	079b      	lsls	r3, r3, #30
 802522c:	d413      	bmi.n	8025256 <_printf_i+0x23a>
 802522e:	68e0      	ldr	r0, [r4, #12]
 8025230:	9b03      	ldr	r3, [sp, #12]
 8025232:	4298      	cmp	r0, r3
 8025234:	bfb8      	it	lt
 8025236:	4618      	movlt	r0, r3
 8025238:	e7a4      	b.n	8025184 <_printf_i+0x168>
 802523a:	2301      	movs	r3, #1
 802523c:	4632      	mov	r2, r6
 802523e:	4649      	mov	r1, r9
 8025240:	4640      	mov	r0, r8
 8025242:	47d0      	blx	sl
 8025244:	3001      	adds	r0, #1
 8025246:	d09b      	beq.n	8025180 <_printf_i+0x164>
 8025248:	3501      	adds	r5, #1
 802524a:	68e3      	ldr	r3, [r4, #12]
 802524c:	9903      	ldr	r1, [sp, #12]
 802524e:	1a5b      	subs	r3, r3, r1
 8025250:	42ab      	cmp	r3, r5
 8025252:	dcf2      	bgt.n	802523a <_printf_i+0x21e>
 8025254:	e7eb      	b.n	802522e <_printf_i+0x212>
 8025256:	2500      	movs	r5, #0
 8025258:	f104 0619 	add.w	r6, r4, #25
 802525c:	e7f5      	b.n	802524a <_printf_i+0x22e>
 802525e:	bf00      	nop
 8025260:	0802cfb4 	.word	0x0802cfb4
 8025264:	0802cfc5 	.word	0x0802cfc5

08025268 <_putc_r>:
 8025268:	b570      	push	{r4, r5, r6, lr}
 802526a:	460d      	mov	r5, r1
 802526c:	4614      	mov	r4, r2
 802526e:	4606      	mov	r6, r0
 8025270:	b118      	cbz	r0, 802527a <_putc_r+0x12>
 8025272:	6983      	ldr	r3, [r0, #24]
 8025274:	b90b      	cbnz	r3, 802527a <_putc_r+0x12>
 8025276:	f7fd f937 	bl	80224e8 <__sinit>
 802527a:	4b1c      	ldr	r3, [pc, #112]	; (80252ec <_putc_r+0x84>)
 802527c:	429c      	cmp	r4, r3
 802527e:	d124      	bne.n	80252ca <_putc_r+0x62>
 8025280:	6874      	ldr	r4, [r6, #4]
 8025282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025284:	07d8      	lsls	r0, r3, #31
 8025286:	d405      	bmi.n	8025294 <_putc_r+0x2c>
 8025288:	89a3      	ldrh	r3, [r4, #12]
 802528a:	0599      	lsls	r1, r3, #22
 802528c:	d402      	bmi.n	8025294 <_putc_r+0x2c>
 802528e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025290:	f7fd fcdd 	bl	8022c4e <__retarget_lock_acquire_recursive>
 8025294:	68a3      	ldr	r3, [r4, #8]
 8025296:	3b01      	subs	r3, #1
 8025298:	2b00      	cmp	r3, #0
 802529a:	60a3      	str	r3, [r4, #8]
 802529c:	da05      	bge.n	80252aa <_putc_r+0x42>
 802529e:	69a2      	ldr	r2, [r4, #24]
 80252a0:	4293      	cmp	r3, r2
 80252a2:	db1c      	blt.n	80252de <_putc_r+0x76>
 80252a4:	b2eb      	uxtb	r3, r5
 80252a6:	2b0a      	cmp	r3, #10
 80252a8:	d019      	beq.n	80252de <_putc_r+0x76>
 80252aa:	6823      	ldr	r3, [r4, #0]
 80252ac:	1c5a      	adds	r2, r3, #1
 80252ae:	6022      	str	r2, [r4, #0]
 80252b0:	701d      	strb	r5, [r3, #0]
 80252b2:	b2ed      	uxtb	r5, r5
 80252b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80252b6:	07da      	lsls	r2, r3, #31
 80252b8:	d405      	bmi.n	80252c6 <_putc_r+0x5e>
 80252ba:	89a3      	ldrh	r3, [r4, #12]
 80252bc:	059b      	lsls	r3, r3, #22
 80252be:	d402      	bmi.n	80252c6 <_putc_r+0x5e>
 80252c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80252c2:	f7fd fcc6 	bl	8022c52 <__retarget_lock_release_recursive>
 80252c6:	4628      	mov	r0, r5
 80252c8:	bd70      	pop	{r4, r5, r6, pc}
 80252ca:	4b09      	ldr	r3, [pc, #36]	; (80252f0 <_putc_r+0x88>)
 80252cc:	429c      	cmp	r4, r3
 80252ce:	d101      	bne.n	80252d4 <_putc_r+0x6c>
 80252d0:	68b4      	ldr	r4, [r6, #8]
 80252d2:	e7d6      	b.n	8025282 <_putc_r+0x1a>
 80252d4:	4b07      	ldr	r3, [pc, #28]	; (80252f4 <_putc_r+0x8c>)
 80252d6:	429c      	cmp	r4, r3
 80252d8:	bf08      	it	eq
 80252da:	68f4      	ldreq	r4, [r6, #12]
 80252dc:	e7d1      	b.n	8025282 <_putc_r+0x1a>
 80252de:	4629      	mov	r1, r5
 80252e0:	4622      	mov	r2, r4
 80252e2:	4630      	mov	r0, r6
 80252e4:	f7ff f856 	bl	8024394 <__swbuf_r>
 80252e8:	4605      	mov	r5, r0
 80252ea:	e7e3      	b.n	80252b4 <_putc_r+0x4c>
 80252ec:	0802ca24 	.word	0x0802ca24
 80252f0:	0802ca44 	.word	0x0802ca44
 80252f4:	0802ca04 	.word	0x0802ca04

080252f8 <_read_r>:
 80252f8:	b538      	push	{r3, r4, r5, lr}
 80252fa:	4d07      	ldr	r5, [pc, #28]	; (8025318 <_read_r+0x20>)
 80252fc:	4604      	mov	r4, r0
 80252fe:	4608      	mov	r0, r1
 8025300:	4611      	mov	r1, r2
 8025302:	2200      	movs	r2, #0
 8025304:	602a      	str	r2, [r5, #0]
 8025306:	461a      	mov	r2, r3
 8025308:	f7db fd7d 	bl	8000e06 <_read>
 802530c:	1c43      	adds	r3, r0, #1
 802530e:	d102      	bne.n	8025316 <_read_r+0x1e>
 8025310:	682b      	ldr	r3, [r5, #0]
 8025312:	b103      	cbz	r3, 8025316 <_read_r+0x1e>
 8025314:	6023      	str	r3, [r4, #0]
 8025316:	bd38      	pop	{r3, r4, r5, pc}
 8025318:	20001130 	.word	0x20001130

0802531c <sniprintf>:
 802531c:	b40c      	push	{r2, r3}
 802531e:	b530      	push	{r4, r5, lr}
 8025320:	4b17      	ldr	r3, [pc, #92]	; (8025380 <sniprintf+0x64>)
 8025322:	1e0c      	subs	r4, r1, #0
 8025324:	681d      	ldr	r5, [r3, #0]
 8025326:	b09d      	sub	sp, #116	; 0x74
 8025328:	da08      	bge.n	802533c <sniprintf+0x20>
 802532a:	238b      	movs	r3, #139	; 0x8b
 802532c:	602b      	str	r3, [r5, #0]
 802532e:	f04f 30ff 	mov.w	r0, #4294967295
 8025332:	b01d      	add	sp, #116	; 0x74
 8025334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025338:	b002      	add	sp, #8
 802533a:	4770      	bx	lr
 802533c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025340:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025344:	bf14      	ite	ne
 8025346:	f104 33ff 	addne.w	r3, r4, #4294967295
 802534a:	4623      	moveq	r3, r4
 802534c:	9304      	str	r3, [sp, #16]
 802534e:	9307      	str	r3, [sp, #28]
 8025350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025354:	9002      	str	r0, [sp, #8]
 8025356:	9006      	str	r0, [sp, #24]
 8025358:	f8ad 3016 	strh.w	r3, [sp, #22]
 802535c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802535e:	ab21      	add	r3, sp, #132	; 0x84
 8025360:	a902      	add	r1, sp, #8
 8025362:	4628      	mov	r0, r5
 8025364:	9301      	str	r3, [sp, #4]
 8025366:	f7ff fb91 	bl	8024a8c <_svfiprintf_r>
 802536a:	1c43      	adds	r3, r0, #1
 802536c:	bfbc      	itt	lt
 802536e:	238b      	movlt	r3, #139	; 0x8b
 8025370:	602b      	strlt	r3, [r5, #0]
 8025372:	2c00      	cmp	r4, #0
 8025374:	d0dd      	beq.n	8025332 <sniprintf+0x16>
 8025376:	9b02      	ldr	r3, [sp, #8]
 8025378:	2200      	movs	r2, #0
 802537a:	701a      	strb	r2, [r3, #0]
 802537c:	e7d9      	b.n	8025332 <sniprintf+0x16>
 802537e:	bf00      	nop
 8025380:	20000108 	.word	0x20000108

08025384 <siscanf>:
 8025384:	b40e      	push	{r1, r2, r3}
 8025386:	b510      	push	{r4, lr}
 8025388:	b09f      	sub	sp, #124	; 0x7c
 802538a:	ac21      	add	r4, sp, #132	; 0x84
 802538c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8025390:	f854 2b04 	ldr.w	r2, [r4], #4
 8025394:	9201      	str	r2, [sp, #4]
 8025396:	f8ad 101c 	strh.w	r1, [sp, #28]
 802539a:	9004      	str	r0, [sp, #16]
 802539c:	9008      	str	r0, [sp, #32]
 802539e:	f7da ff4d 	bl	800023c <strlen>
 80253a2:	4b0c      	ldr	r3, [pc, #48]	; (80253d4 <siscanf+0x50>)
 80253a4:	9005      	str	r0, [sp, #20]
 80253a6:	9009      	str	r0, [sp, #36]	; 0x24
 80253a8:	930d      	str	r3, [sp, #52]	; 0x34
 80253aa:	480b      	ldr	r0, [pc, #44]	; (80253d8 <siscanf+0x54>)
 80253ac:	9a01      	ldr	r2, [sp, #4]
 80253ae:	6800      	ldr	r0, [r0, #0]
 80253b0:	9403      	str	r4, [sp, #12]
 80253b2:	2300      	movs	r3, #0
 80253b4:	9311      	str	r3, [sp, #68]	; 0x44
 80253b6:	9316      	str	r3, [sp, #88]	; 0x58
 80253b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80253bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80253c0:	a904      	add	r1, sp, #16
 80253c2:	4623      	mov	r3, r4
 80253c4:	f000 f8b2 	bl	802552c <__ssvfiscanf_r>
 80253c8:	b01f      	add	sp, #124	; 0x7c
 80253ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253ce:	b003      	add	sp, #12
 80253d0:	4770      	bx	lr
 80253d2:	bf00      	nop
 80253d4:	08023123 	.word	0x08023123
 80253d8:	20000108 	.word	0x20000108

080253dc <strncmp>:
 80253dc:	b510      	push	{r4, lr}
 80253de:	b16a      	cbz	r2, 80253fc <strncmp+0x20>
 80253e0:	3901      	subs	r1, #1
 80253e2:	1884      	adds	r4, r0, r2
 80253e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80253e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80253ec:	4293      	cmp	r3, r2
 80253ee:	d103      	bne.n	80253f8 <strncmp+0x1c>
 80253f0:	42a0      	cmp	r0, r4
 80253f2:	d001      	beq.n	80253f8 <strncmp+0x1c>
 80253f4:	2b00      	cmp	r3, #0
 80253f6:	d1f5      	bne.n	80253e4 <strncmp+0x8>
 80253f8:	1a98      	subs	r0, r3, r2
 80253fa:	bd10      	pop	{r4, pc}
 80253fc:	4610      	mov	r0, r2
 80253fe:	e7fc      	b.n	80253fa <strncmp+0x1e>

08025400 <__ascii_wctomb>:
 8025400:	b149      	cbz	r1, 8025416 <__ascii_wctomb+0x16>
 8025402:	2aff      	cmp	r2, #255	; 0xff
 8025404:	bf85      	ittet	hi
 8025406:	238a      	movhi	r3, #138	; 0x8a
 8025408:	6003      	strhi	r3, [r0, #0]
 802540a:	700a      	strbls	r2, [r1, #0]
 802540c:	f04f 30ff 	movhi.w	r0, #4294967295
 8025410:	bf98      	it	ls
 8025412:	2001      	movls	r0, #1
 8025414:	4770      	bx	lr
 8025416:	4608      	mov	r0, r1
 8025418:	4770      	bx	lr
	...

0802541c <__env_lock>:
 802541c:	4801      	ldr	r0, [pc, #4]	; (8025424 <__env_lock+0x8>)
 802541e:	f7fd bc16 	b.w	8022c4e <__retarget_lock_acquire_recursive>
 8025422:	bf00      	nop
 8025424:	20001126 	.word	0x20001126

08025428 <__env_unlock>:
 8025428:	4801      	ldr	r0, [pc, #4]	; (8025430 <__env_unlock+0x8>)
 802542a:	f7fd bc12 	b.w	8022c52 <__retarget_lock_release_recursive>
 802542e:	bf00      	nop
 8025430:	20001126 	.word	0x20001126

08025434 <memmove>:
 8025434:	4288      	cmp	r0, r1
 8025436:	b510      	push	{r4, lr}
 8025438:	eb01 0402 	add.w	r4, r1, r2
 802543c:	d902      	bls.n	8025444 <memmove+0x10>
 802543e:	4284      	cmp	r4, r0
 8025440:	4623      	mov	r3, r4
 8025442:	d807      	bhi.n	8025454 <memmove+0x20>
 8025444:	1e43      	subs	r3, r0, #1
 8025446:	42a1      	cmp	r1, r4
 8025448:	d008      	beq.n	802545c <memmove+0x28>
 802544a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802544e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025452:	e7f8      	b.n	8025446 <memmove+0x12>
 8025454:	4402      	add	r2, r0
 8025456:	4601      	mov	r1, r0
 8025458:	428a      	cmp	r2, r1
 802545a:	d100      	bne.n	802545e <memmove+0x2a>
 802545c:	bd10      	pop	{r4, pc}
 802545e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025466:	e7f7      	b.n	8025458 <memmove+0x24>

08025468 <_malloc_usable_size_r>:
 8025468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802546c:	1f18      	subs	r0, r3, #4
 802546e:	2b00      	cmp	r3, #0
 8025470:	bfbc      	itt	lt
 8025472:	580b      	ldrlt	r3, [r1, r0]
 8025474:	18c0      	addlt	r0, r0, r3
 8025476:	4770      	bx	lr

08025478 <_sungetc_r>:
 8025478:	b538      	push	{r3, r4, r5, lr}
 802547a:	1c4b      	adds	r3, r1, #1
 802547c:	4614      	mov	r4, r2
 802547e:	d103      	bne.n	8025488 <_sungetc_r+0x10>
 8025480:	f04f 35ff 	mov.w	r5, #4294967295
 8025484:	4628      	mov	r0, r5
 8025486:	bd38      	pop	{r3, r4, r5, pc}
 8025488:	8993      	ldrh	r3, [r2, #12]
 802548a:	f023 0320 	bic.w	r3, r3, #32
 802548e:	8193      	strh	r3, [r2, #12]
 8025490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025492:	6852      	ldr	r2, [r2, #4]
 8025494:	b2cd      	uxtb	r5, r1
 8025496:	b18b      	cbz	r3, 80254bc <_sungetc_r+0x44>
 8025498:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802549a:	4293      	cmp	r3, r2
 802549c:	dd08      	ble.n	80254b0 <_sungetc_r+0x38>
 802549e:	6823      	ldr	r3, [r4, #0]
 80254a0:	1e5a      	subs	r2, r3, #1
 80254a2:	6022      	str	r2, [r4, #0]
 80254a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80254a8:	6863      	ldr	r3, [r4, #4]
 80254aa:	3301      	adds	r3, #1
 80254ac:	6063      	str	r3, [r4, #4]
 80254ae:	e7e9      	b.n	8025484 <_sungetc_r+0xc>
 80254b0:	4621      	mov	r1, r4
 80254b2:	f000 fb39 	bl	8025b28 <__submore>
 80254b6:	2800      	cmp	r0, #0
 80254b8:	d0f1      	beq.n	802549e <_sungetc_r+0x26>
 80254ba:	e7e1      	b.n	8025480 <_sungetc_r+0x8>
 80254bc:	6921      	ldr	r1, [r4, #16]
 80254be:	6823      	ldr	r3, [r4, #0]
 80254c0:	b151      	cbz	r1, 80254d8 <_sungetc_r+0x60>
 80254c2:	4299      	cmp	r1, r3
 80254c4:	d208      	bcs.n	80254d8 <_sungetc_r+0x60>
 80254c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80254ca:	42a9      	cmp	r1, r5
 80254cc:	d104      	bne.n	80254d8 <_sungetc_r+0x60>
 80254ce:	3b01      	subs	r3, #1
 80254d0:	3201      	adds	r2, #1
 80254d2:	6023      	str	r3, [r4, #0]
 80254d4:	6062      	str	r2, [r4, #4]
 80254d6:	e7d5      	b.n	8025484 <_sungetc_r+0xc>
 80254d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80254dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80254e0:	6363      	str	r3, [r4, #52]	; 0x34
 80254e2:	2303      	movs	r3, #3
 80254e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80254e6:	4623      	mov	r3, r4
 80254e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80254ec:	6023      	str	r3, [r4, #0]
 80254ee:	2301      	movs	r3, #1
 80254f0:	e7dc      	b.n	80254ac <_sungetc_r+0x34>

080254f2 <__ssrefill_r>:
 80254f2:	b510      	push	{r4, lr}
 80254f4:	460c      	mov	r4, r1
 80254f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80254f8:	b169      	cbz	r1, 8025516 <__ssrefill_r+0x24>
 80254fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80254fe:	4299      	cmp	r1, r3
 8025500:	d001      	beq.n	8025506 <__ssrefill_r+0x14>
 8025502:	f7fd fc41 	bl	8022d88 <_free_r>
 8025506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025508:	6063      	str	r3, [r4, #4]
 802550a:	2000      	movs	r0, #0
 802550c:	6360      	str	r0, [r4, #52]	; 0x34
 802550e:	b113      	cbz	r3, 8025516 <__ssrefill_r+0x24>
 8025510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025512:	6023      	str	r3, [r4, #0]
 8025514:	bd10      	pop	{r4, pc}
 8025516:	6923      	ldr	r3, [r4, #16]
 8025518:	6023      	str	r3, [r4, #0]
 802551a:	2300      	movs	r3, #0
 802551c:	6063      	str	r3, [r4, #4]
 802551e:	89a3      	ldrh	r3, [r4, #12]
 8025520:	f043 0320 	orr.w	r3, r3, #32
 8025524:	81a3      	strh	r3, [r4, #12]
 8025526:	f04f 30ff 	mov.w	r0, #4294967295
 802552a:	e7f3      	b.n	8025514 <__ssrefill_r+0x22>

0802552c <__ssvfiscanf_r>:
 802552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025530:	460c      	mov	r4, r1
 8025532:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8025536:	2100      	movs	r1, #0
 8025538:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802553c:	49b2      	ldr	r1, [pc, #712]	; (8025808 <__ssvfiscanf_r+0x2dc>)
 802553e:	91a0      	str	r1, [sp, #640]	; 0x280
 8025540:	f10d 0804 	add.w	r8, sp, #4
 8025544:	49b1      	ldr	r1, [pc, #708]	; (802580c <__ssvfiscanf_r+0x2e0>)
 8025546:	4fb2      	ldr	r7, [pc, #712]	; (8025810 <__ssvfiscanf_r+0x2e4>)
 8025548:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8025814 <__ssvfiscanf_r+0x2e8>
 802554c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8025550:	4606      	mov	r6, r0
 8025552:	91a1      	str	r1, [sp, #644]	; 0x284
 8025554:	9300      	str	r3, [sp, #0]
 8025556:	f892 a000 	ldrb.w	sl, [r2]
 802555a:	f1ba 0f00 	cmp.w	sl, #0
 802555e:	f000 8151 	beq.w	8025804 <__ssvfiscanf_r+0x2d8>
 8025562:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8025566:	f013 0308 	ands.w	r3, r3, #8
 802556a:	f102 0501 	add.w	r5, r2, #1
 802556e:	d019      	beq.n	80255a4 <__ssvfiscanf_r+0x78>
 8025570:	6863      	ldr	r3, [r4, #4]
 8025572:	2b00      	cmp	r3, #0
 8025574:	dd0f      	ble.n	8025596 <__ssvfiscanf_r+0x6a>
 8025576:	6823      	ldr	r3, [r4, #0]
 8025578:	781a      	ldrb	r2, [r3, #0]
 802557a:	5cba      	ldrb	r2, [r7, r2]
 802557c:	0712      	lsls	r2, r2, #28
 802557e:	d401      	bmi.n	8025584 <__ssvfiscanf_r+0x58>
 8025580:	462a      	mov	r2, r5
 8025582:	e7e8      	b.n	8025556 <__ssvfiscanf_r+0x2a>
 8025584:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8025586:	3201      	adds	r2, #1
 8025588:	9245      	str	r2, [sp, #276]	; 0x114
 802558a:	6862      	ldr	r2, [r4, #4]
 802558c:	3301      	adds	r3, #1
 802558e:	3a01      	subs	r2, #1
 8025590:	6062      	str	r2, [r4, #4]
 8025592:	6023      	str	r3, [r4, #0]
 8025594:	e7ec      	b.n	8025570 <__ssvfiscanf_r+0x44>
 8025596:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025598:	4621      	mov	r1, r4
 802559a:	4630      	mov	r0, r6
 802559c:	4798      	blx	r3
 802559e:	2800      	cmp	r0, #0
 80255a0:	d0e9      	beq.n	8025576 <__ssvfiscanf_r+0x4a>
 80255a2:	e7ed      	b.n	8025580 <__ssvfiscanf_r+0x54>
 80255a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80255a8:	f040 8083 	bne.w	80256b2 <__ssvfiscanf_r+0x186>
 80255ac:	9341      	str	r3, [sp, #260]	; 0x104
 80255ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80255b0:	7853      	ldrb	r3, [r2, #1]
 80255b2:	2b2a      	cmp	r3, #42	; 0x2a
 80255b4:	bf02      	ittt	eq
 80255b6:	2310      	moveq	r3, #16
 80255b8:	1c95      	addeq	r5, r2, #2
 80255ba:	9341      	streq	r3, [sp, #260]	; 0x104
 80255bc:	220a      	movs	r2, #10
 80255be:	46ab      	mov	fp, r5
 80255c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80255c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80255c8:	2b09      	cmp	r3, #9
 80255ca:	d91d      	bls.n	8025608 <__ssvfiscanf_r+0xdc>
 80255cc:	4891      	ldr	r0, [pc, #580]	; (8025814 <__ssvfiscanf_r+0x2e8>)
 80255ce:	2203      	movs	r2, #3
 80255d0:	f7da fe46 	bl	8000260 <memchr>
 80255d4:	b140      	cbz	r0, 80255e8 <__ssvfiscanf_r+0xbc>
 80255d6:	2301      	movs	r3, #1
 80255d8:	eba0 0009 	sub.w	r0, r0, r9
 80255dc:	fa03 f000 	lsl.w	r0, r3, r0
 80255e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80255e2:	4318      	orrs	r0, r3
 80255e4:	9041      	str	r0, [sp, #260]	; 0x104
 80255e6:	465d      	mov	r5, fp
 80255e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80255ec:	2b78      	cmp	r3, #120	; 0x78
 80255ee:	d806      	bhi.n	80255fe <__ssvfiscanf_r+0xd2>
 80255f0:	2b57      	cmp	r3, #87	; 0x57
 80255f2:	d810      	bhi.n	8025616 <__ssvfiscanf_r+0xea>
 80255f4:	2b25      	cmp	r3, #37	; 0x25
 80255f6:	d05c      	beq.n	80256b2 <__ssvfiscanf_r+0x186>
 80255f8:	d856      	bhi.n	80256a8 <__ssvfiscanf_r+0x17c>
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	d074      	beq.n	80256e8 <__ssvfiscanf_r+0x1bc>
 80255fe:	2303      	movs	r3, #3
 8025600:	9347      	str	r3, [sp, #284]	; 0x11c
 8025602:	230a      	movs	r3, #10
 8025604:	9342      	str	r3, [sp, #264]	; 0x108
 8025606:	e081      	b.n	802570c <__ssvfiscanf_r+0x1e0>
 8025608:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802560a:	fb02 1303 	mla	r3, r2, r3, r1
 802560e:	3b30      	subs	r3, #48	; 0x30
 8025610:	9343      	str	r3, [sp, #268]	; 0x10c
 8025612:	465d      	mov	r5, fp
 8025614:	e7d3      	b.n	80255be <__ssvfiscanf_r+0x92>
 8025616:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802561a:	2a20      	cmp	r2, #32
 802561c:	d8ef      	bhi.n	80255fe <__ssvfiscanf_r+0xd2>
 802561e:	a101      	add	r1, pc, #4	; (adr r1, 8025624 <__ssvfiscanf_r+0xf8>)
 8025620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8025624:	080256f7 	.word	0x080256f7
 8025628:	080255ff 	.word	0x080255ff
 802562c:	080255ff 	.word	0x080255ff
 8025630:	08025755 	.word	0x08025755
 8025634:	080255ff 	.word	0x080255ff
 8025638:	080255ff 	.word	0x080255ff
 802563c:	080255ff 	.word	0x080255ff
 8025640:	080255ff 	.word	0x080255ff
 8025644:	080255ff 	.word	0x080255ff
 8025648:	080255ff 	.word	0x080255ff
 802564c:	080255ff 	.word	0x080255ff
 8025650:	0802576b 	.word	0x0802576b
 8025654:	08025741 	.word	0x08025741
 8025658:	080256af 	.word	0x080256af
 802565c:	080256af 	.word	0x080256af
 8025660:	080256af 	.word	0x080256af
 8025664:	080255ff 	.word	0x080255ff
 8025668:	08025745 	.word	0x08025745
 802566c:	080255ff 	.word	0x080255ff
 8025670:	080255ff 	.word	0x080255ff
 8025674:	080255ff 	.word	0x080255ff
 8025678:	080255ff 	.word	0x080255ff
 802567c:	0802577b 	.word	0x0802577b
 8025680:	0802574d 	.word	0x0802574d
 8025684:	080256ef 	.word	0x080256ef
 8025688:	080255ff 	.word	0x080255ff
 802568c:	080255ff 	.word	0x080255ff
 8025690:	08025777 	.word	0x08025777
 8025694:	080255ff 	.word	0x080255ff
 8025698:	08025741 	.word	0x08025741
 802569c:	080255ff 	.word	0x080255ff
 80256a0:	080255ff 	.word	0x080255ff
 80256a4:	080256f7 	.word	0x080256f7
 80256a8:	3b45      	subs	r3, #69	; 0x45
 80256aa:	2b02      	cmp	r3, #2
 80256ac:	d8a7      	bhi.n	80255fe <__ssvfiscanf_r+0xd2>
 80256ae:	2305      	movs	r3, #5
 80256b0:	e02b      	b.n	802570a <__ssvfiscanf_r+0x1de>
 80256b2:	6863      	ldr	r3, [r4, #4]
 80256b4:	2b00      	cmp	r3, #0
 80256b6:	dd0d      	ble.n	80256d4 <__ssvfiscanf_r+0x1a8>
 80256b8:	6823      	ldr	r3, [r4, #0]
 80256ba:	781a      	ldrb	r2, [r3, #0]
 80256bc:	4552      	cmp	r2, sl
 80256be:	f040 80a1 	bne.w	8025804 <__ssvfiscanf_r+0x2d8>
 80256c2:	3301      	adds	r3, #1
 80256c4:	6862      	ldr	r2, [r4, #4]
 80256c6:	6023      	str	r3, [r4, #0]
 80256c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80256ca:	3a01      	subs	r2, #1
 80256cc:	3301      	adds	r3, #1
 80256ce:	6062      	str	r2, [r4, #4]
 80256d0:	9345      	str	r3, [sp, #276]	; 0x114
 80256d2:	e755      	b.n	8025580 <__ssvfiscanf_r+0x54>
 80256d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80256d6:	4621      	mov	r1, r4
 80256d8:	4630      	mov	r0, r6
 80256da:	4798      	blx	r3
 80256dc:	2800      	cmp	r0, #0
 80256de:	d0eb      	beq.n	80256b8 <__ssvfiscanf_r+0x18c>
 80256e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80256e2:	2800      	cmp	r0, #0
 80256e4:	f040 8084 	bne.w	80257f0 <__ssvfiscanf_r+0x2c4>
 80256e8:	f04f 30ff 	mov.w	r0, #4294967295
 80256ec:	e086      	b.n	80257fc <__ssvfiscanf_r+0x2d0>
 80256ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80256f0:	f042 0220 	orr.w	r2, r2, #32
 80256f4:	9241      	str	r2, [sp, #260]	; 0x104
 80256f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80256f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80256fc:	9241      	str	r2, [sp, #260]	; 0x104
 80256fe:	2210      	movs	r2, #16
 8025700:	2b6f      	cmp	r3, #111	; 0x6f
 8025702:	9242      	str	r2, [sp, #264]	; 0x108
 8025704:	bf34      	ite	cc
 8025706:	2303      	movcc	r3, #3
 8025708:	2304      	movcs	r3, #4
 802570a:	9347      	str	r3, [sp, #284]	; 0x11c
 802570c:	6863      	ldr	r3, [r4, #4]
 802570e:	2b00      	cmp	r3, #0
 8025710:	dd41      	ble.n	8025796 <__ssvfiscanf_r+0x26a>
 8025712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025714:	0659      	lsls	r1, r3, #25
 8025716:	d404      	bmi.n	8025722 <__ssvfiscanf_r+0x1f6>
 8025718:	6823      	ldr	r3, [r4, #0]
 802571a:	781a      	ldrb	r2, [r3, #0]
 802571c:	5cba      	ldrb	r2, [r7, r2]
 802571e:	0712      	lsls	r2, r2, #28
 8025720:	d440      	bmi.n	80257a4 <__ssvfiscanf_r+0x278>
 8025722:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8025724:	2b02      	cmp	r3, #2
 8025726:	dc4f      	bgt.n	80257c8 <__ssvfiscanf_r+0x29c>
 8025728:	466b      	mov	r3, sp
 802572a:	4622      	mov	r2, r4
 802572c:	a941      	add	r1, sp, #260	; 0x104
 802572e:	4630      	mov	r0, r6
 8025730:	f000 f874 	bl	802581c <_scanf_chars>
 8025734:	2801      	cmp	r0, #1
 8025736:	d065      	beq.n	8025804 <__ssvfiscanf_r+0x2d8>
 8025738:	2802      	cmp	r0, #2
 802573a:	f47f af21 	bne.w	8025580 <__ssvfiscanf_r+0x54>
 802573e:	e7cf      	b.n	80256e0 <__ssvfiscanf_r+0x1b4>
 8025740:	220a      	movs	r2, #10
 8025742:	e7dd      	b.n	8025700 <__ssvfiscanf_r+0x1d4>
 8025744:	2300      	movs	r3, #0
 8025746:	9342      	str	r3, [sp, #264]	; 0x108
 8025748:	2303      	movs	r3, #3
 802574a:	e7de      	b.n	802570a <__ssvfiscanf_r+0x1de>
 802574c:	2308      	movs	r3, #8
 802574e:	9342      	str	r3, [sp, #264]	; 0x108
 8025750:	2304      	movs	r3, #4
 8025752:	e7da      	b.n	802570a <__ssvfiscanf_r+0x1de>
 8025754:	4629      	mov	r1, r5
 8025756:	4640      	mov	r0, r8
 8025758:	f000 f9ac 	bl	8025ab4 <__sccl>
 802575c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802575e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025762:	9341      	str	r3, [sp, #260]	; 0x104
 8025764:	4605      	mov	r5, r0
 8025766:	2301      	movs	r3, #1
 8025768:	e7cf      	b.n	802570a <__ssvfiscanf_r+0x1de>
 802576a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802576c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025770:	9341      	str	r3, [sp, #260]	; 0x104
 8025772:	2300      	movs	r3, #0
 8025774:	e7c9      	b.n	802570a <__ssvfiscanf_r+0x1de>
 8025776:	2302      	movs	r3, #2
 8025778:	e7c7      	b.n	802570a <__ssvfiscanf_r+0x1de>
 802577a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802577c:	06c3      	lsls	r3, r0, #27
 802577e:	f53f aeff 	bmi.w	8025580 <__ssvfiscanf_r+0x54>
 8025782:	9b00      	ldr	r3, [sp, #0]
 8025784:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8025786:	1d19      	adds	r1, r3, #4
 8025788:	9100      	str	r1, [sp, #0]
 802578a:	681b      	ldr	r3, [r3, #0]
 802578c:	07c0      	lsls	r0, r0, #31
 802578e:	bf4c      	ite	mi
 8025790:	801a      	strhmi	r2, [r3, #0]
 8025792:	601a      	strpl	r2, [r3, #0]
 8025794:	e6f4      	b.n	8025580 <__ssvfiscanf_r+0x54>
 8025796:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8025798:	4621      	mov	r1, r4
 802579a:	4630      	mov	r0, r6
 802579c:	4798      	blx	r3
 802579e:	2800      	cmp	r0, #0
 80257a0:	d0b7      	beq.n	8025712 <__ssvfiscanf_r+0x1e6>
 80257a2:	e79d      	b.n	80256e0 <__ssvfiscanf_r+0x1b4>
 80257a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80257a6:	3201      	adds	r2, #1
 80257a8:	9245      	str	r2, [sp, #276]	; 0x114
 80257aa:	6862      	ldr	r2, [r4, #4]
 80257ac:	3a01      	subs	r2, #1
 80257ae:	2a00      	cmp	r2, #0
 80257b0:	6062      	str	r2, [r4, #4]
 80257b2:	dd02      	ble.n	80257ba <__ssvfiscanf_r+0x28e>
 80257b4:	3301      	adds	r3, #1
 80257b6:	6023      	str	r3, [r4, #0]
 80257b8:	e7ae      	b.n	8025718 <__ssvfiscanf_r+0x1ec>
 80257ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80257bc:	4621      	mov	r1, r4
 80257be:	4630      	mov	r0, r6
 80257c0:	4798      	blx	r3
 80257c2:	2800      	cmp	r0, #0
 80257c4:	d0a8      	beq.n	8025718 <__ssvfiscanf_r+0x1ec>
 80257c6:	e78b      	b.n	80256e0 <__ssvfiscanf_r+0x1b4>
 80257c8:	2b04      	cmp	r3, #4
 80257ca:	dc06      	bgt.n	80257da <__ssvfiscanf_r+0x2ae>
 80257cc:	466b      	mov	r3, sp
 80257ce:	4622      	mov	r2, r4
 80257d0:	a941      	add	r1, sp, #260	; 0x104
 80257d2:	4630      	mov	r0, r6
 80257d4:	f000 f87a 	bl	80258cc <_scanf_i>
 80257d8:	e7ac      	b.n	8025734 <__ssvfiscanf_r+0x208>
 80257da:	4b0f      	ldr	r3, [pc, #60]	; (8025818 <__ssvfiscanf_r+0x2ec>)
 80257dc:	2b00      	cmp	r3, #0
 80257de:	f43f aecf 	beq.w	8025580 <__ssvfiscanf_r+0x54>
 80257e2:	466b      	mov	r3, sp
 80257e4:	4622      	mov	r2, r4
 80257e6:	a941      	add	r1, sp, #260	; 0x104
 80257e8:	4630      	mov	r0, r6
 80257ea:	f3af 8000 	nop.w
 80257ee:	e7a1      	b.n	8025734 <__ssvfiscanf_r+0x208>
 80257f0:	89a3      	ldrh	r3, [r4, #12]
 80257f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80257f6:	bf18      	it	ne
 80257f8:	f04f 30ff 	movne.w	r0, #4294967295
 80257fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8025800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025804:	9844      	ldr	r0, [sp, #272]	; 0x110
 8025806:	e7f9      	b.n	80257fc <__ssvfiscanf_r+0x2d0>
 8025808:	08025479 	.word	0x08025479
 802580c:	080254f3 	.word	0x080254f3
 8025810:	0802ce99 	.word	0x0802ce99
 8025814:	0802cfa9 	.word	0x0802cfa9
 8025818:	00000000 	.word	0x00000000

0802581c <_scanf_chars>:
 802581c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025820:	4615      	mov	r5, r2
 8025822:	688a      	ldr	r2, [r1, #8]
 8025824:	4680      	mov	r8, r0
 8025826:	460c      	mov	r4, r1
 8025828:	b932      	cbnz	r2, 8025838 <_scanf_chars+0x1c>
 802582a:	698a      	ldr	r2, [r1, #24]
 802582c:	2a00      	cmp	r2, #0
 802582e:	bf0c      	ite	eq
 8025830:	2201      	moveq	r2, #1
 8025832:	f04f 32ff 	movne.w	r2, #4294967295
 8025836:	608a      	str	r2, [r1, #8]
 8025838:	6822      	ldr	r2, [r4, #0]
 802583a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80258c8 <_scanf_chars+0xac>
 802583e:	06d1      	lsls	r1, r2, #27
 8025840:	bf5f      	itttt	pl
 8025842:	681a      	ldrpl	r2, [r3, #0]
 8025844:	1d11      	addpl	r1, r2, #4
 8025846:	6019      	strpl	r1, [r3, #0]
 8025848:	6816      	ldrpl	r6, [r2, #0]
 802584a:	2700      	movs	r7, #0
 802584c:	69a0      	ldr	r0, [r4, #24]
 802584e:	b188      	cbz	r0, 8025874 <_scanf_chars+0x58>
 8025850:	2801      	cmp	r0, #1
 8025852:	d107      	bne.n	8025864 <_scanf_chars+0x48>
 8025854:	682b      	ldr	r3, [r5, #0]
 8025856:	781a      	ldrb	r2, [r3, #0]
 8025858:	6963      	ldr	r3, [r4, #20]
 802585a:	5c9b      	ldrb	r3, [r3, r2]
 802585c:	b953      	cbnz	r3, 8025874 <_scanf_chars+0x58>
 802585e:	bb27      	cbnz	r7, 80258aa <_scanf_chars+0x8e>
 8025860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025864:	2802      	cmp	r0, #2
 8025866:	d120      	bne.n	80258aa <_scanf_chars+0x8e>
 8025868:	682b      	ldr	r3, [r5, #0]
 802586a:	781b      	ldrb	r3, [r3, #0]
 802586c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8025870:	071b      	lsls	r3, r3, #28
 8025872:	d41a      	bmi.n	80258aa <_scanf_chars+0x8e>
 8025874:	6823      	ldr	r3, [r4, #0]
 8025876:	06da      	lsls	r2, r3, #27
 8025878:	bf5e      	ittt	pl
 802587a:	682b      	ldrpl	r3, [r5, #0]
 802587c:	781b      	ldrbpl	r3, [r3, #0]
 802587e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8025882:	682a      	ldr	r2, [r5, #0]
 8025884:	686b      	ldr	r3, [r5, #4]
 8025886:	3201      	adds	r2, #1
 8025888:	602a      	str	r2, [r5, #0]
 802588a:	68a2      	ldr	r2, [r4, #8]
 802588c:	3b01      	subs	r3, #1
 802588e:	3a01      	subs	r2, #1
 8025890:	606b      	str	r3, [r5, #4]
 8025892:	3701      	adds	r7, #1
 8025894:	60a2      	str	r2, [r4, #8]
 8025896:	b142      	cbz	r2, 80258aa <_scanf_chars+0x8e>
 8025898:	2b00      	cmp	r3, #0
 802589a:	dcd7      	bgt.n	802584c <_scanf_chars+0x30>
 802589c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80258a0:	4629      	mov	r1, r5
 80258a2:	4640      	mov	r0, r8
 80258a4:	4798      	blx	r3
 80258a6:	2800      	cmp	r0, #0
 80258a8:	d0d0      	beq.n	802584c <_scanf_chars+0x30>
 80258aa:	6823      	ldr	r3, [r4, #0]
 80258ac:	f013 0310 	ands.w	r3, r3, #16
 80258b0:	d105      	bne.n	80258be <_scanf_chars+0xa2>
 80258b2:	68e2      	ldr	r2, [r4, #12]
 80258b4:	3201      	adds	r2, #1
 80258b6:	60e2      	str	r2, [r4, #12]
 80258b8:	69a2      	ldr	r2, [r4, #24]
 80258ba:	b102      	cbz	r2, 80258be <_scanf_chars+0xa2>
 80258bc:	7033      	strb	r3, [r6, #0]
 80258be:	6923      	ldr	r3, [r4, #16]
 80258c0:	441f      	add	r7, r3
 80258c2:	6127      	str	r7, [r4, #16]
 80258c4:	2000      	movs	r0, #0
 80258c6:	e7cb      	b.n	8025860 <_scanf_chars+0x44>
 80258c8:	0802ce99 	.word	0x0802ce99

080258cc <_scanf_i>:
 80258cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258d0:	4698      	mov	r8, r3
 80258d2:	4b74      	ldr	r3, [pc, #464]	; (8025aa4 <_scanf_i+0x1d8>)
 80258d4:	460c      	mov	r4, r1
 80258d6:	4682      	mov	sl, r0
 80258d8:	4616      	mov	r6, r2
 80258da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80258de:	b087      	sub	sp, #28
 80258e0:	ab03      	add	r3, sp, #12
 80258e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80258e6:	4b70      	ldr	r3, [pc, #448]	; (8025aa8 <_scanf_i+0x1dc>)
 80258e8:	69a1      	ldr	r1, [r4, #24]
 80258ea:	4a70      	ldr	r2, [pc, #448]	; (8025aac <_scanf_i+0x1e0>)
 80258ec:	2903      	cmp	r1, #3
 80258ee:	bf18      	it	ne
 80258f0:	461a      	movne	r2, r3
 80258f2:	68a3      	ldr	r3, [r4, #8]
 80258f4:	9201      	str	r2, [sp, #4]
 80258f6:	1e5a      	subs	r2, r3, #1
 80258f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80258fc:	bf88      	it	hi
 80258fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8025902:	4627      	mov	r7, r4
 8025904:	bf82      	ittt	hi
 8025906:	eb03 0905 	addhi.w	r9, r3, r5
 802590a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802590e:	60a3      	strhi	r3, [r4, #8]
 8025910:	f857 3b1c 	ldr.w	r3, [r7], #28
 8025914:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8025918:	bf98      	it	ls
 802591a:	f04f 0900 	movls.w	r9, #0
 802591e:	6023      	str	r3, [r4, #0]
 8025920:	463d      	mov	r5, r7
 8025922:	f04f 0b00 	mov.w	fp, #0
 8025926:	6831      	ldr	r1, [r6, #0]
 8025928:	ab03      	add	r3, sp, #12
 802592a:	7809      	ldrb	r1, [r1, #0]
 802592c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8025930:	2202      	movs	r2, #2
 8025932:	f7da fc95 	bl	8000260 <memchr>
 8025936:	b328      	cbz	r0, 8025984 <_scanf_i+0xb8>
 8025938:	f1bb 0f01 	cmp.w	fp, #1
 802593c:	d159      	bne.n	80259f2 <_scanf_i+0x126>
 802593e:	6862      	ldr	r2, [r4, #4]
 8025940:	b92a      	cbnz	r2, 802594e <_scanf_i+0x82>
 8025942:	6822      	ldr	r2, [r4, #0]
 8025944:	2308      	movs	r3, #8
 8025946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802594a:	6063      	str	r3, [r4, #4]
 802594c:	6022      	str	r2, [r4, #0]
 802594e:	6822      	ldr	r2, [r4, #0]
 8025950:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8025954:	6022      	str	r2, [r4, #0]
 8025956:	68a2      	ldr	r2, [r4, #8]
 8025958:	1e51      	subs	r1, r2, #1
 802595a:	60a1      	str	r1, [r4, #8]
 802595c:	b192      	cbz	r2, 8025984 <_scanf_i+0xb8>
 802595e:	6832      	ldr	r2, [r6, #0]
 8025960:	1c51      	adds	r1, r2, #1
 8025962:	6031      	str	r1, [r6, #0]
 8025964:	7812      	ldrb	r2, [r2, #0]
 8025966:	f805 2b01 	strb.w	r2, [r5], #1
 802596a:	6872      	ldr	r2, [r6, #4]
 802596c:	3a01      	subs	r2, #1
 802596e:	2a00      	cmp	r2, #0
 8025970:	6072      	str	r2, [r6, #4]
 8025972:	dc07      	bgt.n	8025984 <_scanf_i+0xb8>
 8025974:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8025978:	4631      	mov	r1, r6
 802597a:	4650      	mov	r0, sl
 802597c:	4790      	blx	r2
 802597e:	2800      	cmp	r0, #0
 8025980:	f040 8085 	bne.w	8025a8e <_scanf_i+0x1c2>
 8025984:	f10b 0b01 	add.w	fp, fp, #1
 8025988:	f1bb 0f03 	cmp.w	fp, #3
 802598c:	d1cb      	bne.n	8025926 <_scanf_i+0x5a>
 802598e:	6863      	ldr	r3, [r4, #4]
 8025990:	b90b      	cbnz	r3, 8025996 <_scanf_i+0xca>
 8025992:	230a      	movs	r3, #10
 8025994:	6063      	str	r3, [r4, #4]
 8025996:	6863      	ldr	r3, [r4, #4]
 8025998:	4945      	ldr	r1, [pc, #276]	; (8025ab0 <_scanf_i+0x1e4>)
 802599a:	6960      	ldr	r0, [r4, #20]
 802599c:	1ac9      	subs	r1, r1, r3
 802599e:	f000 f889 	bl	8025ab4 <__sccl>
 80259a2:	f04f 0b00 	mov.w	fp, #0
 80259a6:	68a3      	ldr	r3, [r4, #8]
 80259a8:	6822      	ldr	r2, [r4, #0]
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d03d      	beq.n	8025a2a <_scanf_i+0x15e>
 80259ae:	6831      	ldr	r1, [r6, #0]
 80259b0:	6960      	ldr	r0, [r4, #20]
 80259b2:	f891 c000 	ldrb.w	ip, [r1]
 80259b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80259ba:	2800      	cmp	r0, #0
 80259bc:	d035      	beq.n	8025a2a <_scanf_i+0x15e>
 80259be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80259c2:	d124      	bne.n	8025a0e <_scanf_i+0x142>
 80259c4:	0510      	lsls	r0, r2, #20
 80259c6:	d522      	bpl.n	8025a0e <_scanf_i+0x142>
 80259c8:	f10b 0b01 	add.w	fp, fp, #1
 80259cc:	f1b9 0f00 	cmp.w	r9, #0
 80259d0:	d003      	beq.n	80259da <_scanf_i+0x10e>
 80259d2:	3301      	adds	r3, #1
 80259d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80259d8:	60a3      	str	r3, [r4, #8]
 80259da:	6873      	ldr	r3, [r6, #4]
 80259dc:	3b01      	subs	r3, #1
 80259de:	2b00      	cmp	r3, #0
 80259e0:	6073      	str	r3, [r6, #4]
 80259e2:	dd1b      	ble.n	8025a1c <_scanf_i+0x150>
 80259e4:	6833      	ldr	r3, [r6, #0]
 80259e6:	3301      	adds	r3, #1
 80259e8:	6033      	str	r3, [r6, #0]
 80259ea:	68a3      	ldr	r3, [r4, #8]
 80259ec:	3b01      	subs	r3, #1
 80259ee:	60a3      	str	r3, [r4, #8]
 80259f0:	e7d9      	b.n	80259a6 <_scanf_i+0xda>
 80259f2:	f1bb 0f02 	cmp.w	fp, #2
 80259f6:	d1ae      	bne.n	8025956 <_scanf_i+0x8a>
 80259f8:	6822      	ldr	r2, [r4, #0]
 80259fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80259fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8025a02:	d1bf      	bne.n	8025984 <_scanf_i+0xb8>
 8025a04:	2310      	movs	r3, #16
 8025a06:	6063      	str	r3, [r4, #4]
 8025a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8025a0c:	e7a2      	b.n	8025954 <_scanf_i+0x88>
 8025a0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8025a12:	6022      	str	r2, [r4, #0]
 8025a14:	780b      	ldrb	r3, [r1, #0]
 8025a16:	f805 3b01 	strb.w	r3, [r5], #1
 8025a1a:	e7de      	b.n	80259da <_scanf_i+0x10e>
 8025a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8025a20:	4631      	mov	r1, r6
 8025a22:	4650      	mov	r0, sl
 8025a24:	4798      	blx	r3
 8025a26:	2800      	cmp	r0, #0
 8025a28:	d0df      	beq.n	80259ea <_scanf_i+0x11e>
 8025a2a:	6823      	ldr	r3, [r4, #0]
 8025a2c:	05d9      	lsls	r1, r3, #23
 8025a2e:	d50d      	bpl.n	8025a4c <_scanf_i+0x180>
 8025a30:	42bd      	cmp	r5, r7
 8025a32:	d909      	bls.n	8025a48 <_scanf_i+0x17c>
 8025a34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8025a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025a3c:	4632      	mov	r2, r6
 8025a3e:	4650      	mov	r0, sl
 8025a40:	4798      	blx	r3
 8025a42:	f105 39ff 	add.w	r9, r5, #4294967295
 8025a46:	464d      	mov	r5, r9
 8025a48:	42bd      	cmp	r5, r7
 8025a4a:	d028      	beq.n	8025a9e <_scanf_i+0x1d2>
 8025a4c:	6822      	ldr	r2, [r4, #0]
 8025a4e:	f012 0210 	ands.w	r2, r2, #16
 8025a52:	d113      	bne.n	8025a7c <_scanf_i+0x1b0>
 8025a54:	702a      	strb	r2, [r5, #0]
 8025a56:	6863      	ldr	r3, [r4, #4]
 8025a58:	9e01      	ldr	r6, [sp, #4]
 8025a5a:	4639      	mov	r1, r7
 8025a5c:	4650      	mov	r0, sl
 8025a5e:	47b0      	blx	r6
 8025a60:	f8d8 3000 	ldr.w	r3, [r8]
 8025a64:	6821      	ldr	r1, [r4, #0]
 8025a66:	1d1a      	adds	r2, r3, #4
 8025a68:	f8c8 2000 	str.w	r2, [r8]
 8025a6c:	f011 0f20 	tst.w	r1, #32
 8025a70:	681b      	ldr	r3, [r3, #0]
 8025a72:	d00f      	beq.n	8025a94 <_scanf_i+0x1c8>
 8025a74:	6018      	str	r0, [r3, #0]
 8025a76:	68e3      	ldr	r3, [r4, #12]
 8025a78:	3301      	adds	r3, #1
 8025a7a:	60e3      	str	r3, [r4, #12]
 8025a7c:	1bed      	subs	r5, r5, r7
 8025a7e:	44ab      	add	fp, r5
 8025a80:	6925      	ldr	r5, [r4, #16]
 8025a82:	445d      	add	r5, fp
 8025a84:	6125      	str	r5, [r4, #16]
 8025a86:	2000      	movs	r0, #0
 8025a88:	b007      	add	sp, #28
 8025a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a8e:	f04f 0b00 	mov.w	fp, #0
 8025a92:	e7ca      	b.n	8025a2a <_scanf_i+0x15e>
 8025a94:	07ca      	lsls	r2, r1, #31
 8025a96:	bf4c      	ite	mi
 8025a98:	8018      	strhmi	r0, [r3, #0]
 8025a9a:	6018      	strpl	r0, [r3, #0]
 8025a9c:	e7eb      	b.n	8025a76 <_scanf_i+0x1aa>
 8025a9e:	2001      	movs	r0, #1
 8025aa0:	e7f2      	b.n	8025a88 <_scanf_i+0x1bc>
 8025aa2:	bf00      	nop
 8025aa4:	08029978 	.word	0x08029978
 8025aa8:	08023e9d 	.word	0x08023e9d
 8025aac:	08023d8d 	.word	0x08023d8d
 8025ab0:	0802cfef 	.word	0x0802cfef

08025ab4 <__sccl>:
 8025ab4:	b570      	push	{r4, r5, r6, lr}
 8025ab6:	780b      	ldrb	r3, [r1, #0]
 8025ab8:	4604      	mov	r4, r0
 8025aba:	2b5e      	cmp	r3, #94	; 0x5e
 8025abc:	bf0b      	itete	eq
 8025abe:	784b      	ldrbeq	r3, [r1, #1]
 8025ac0:	1c48      	addne	r0, r1, #1
 8025ac2:	1c88      	addeq	r0, r1, #2
 8025ac4:	2200      	movne	r2, #0
 8025ac6:	bf08      	it	eq
 8025ac8:	2201      	moveq	r2, #1
 8025aca:	1e61      	subs	r1, r4, #1
 8025acc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8025ad0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8025ad4:	42a9      	cmp	r1, r5
 8025ad6:	d1fb      	bne.n	8025ad0 <__sccl+0x1c>
 8025ad8:	b90b      	cbnz	r3, 8025ade <__sccl+0x2a>
 8025ada:	3801      	subs	r0, #1
 8025adc:	bd70      	pop	{r4, r5, r6, pc}
 8025ade:	f082 0101 	eor.w	r1, r2, #1
 8025ae2:	54e1      	strb	r1, [r4, r3]
 8025ae4:	1c42      	adds	r2, r0, #1
 8025ae6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8025aea:	2d2d      	cmp	r5, #45	; 0x2d
 8025aec:	f102 36ff 	add.w	r6, r2, #4294967295
 8025af0:	4610      	mov	r0, r2
 8025af2:	d006      	beq.n	8025b02 <__sccl+0x4e>
 8025af4:	2d5d      	cmp	r5, #93	; 0x5d
 8025af6:	d0f1      	beq.n	8025adc <__sccl+0x28>
 8025af8:	b90d      	cbnz	r5, 8025afe <__sccl+0x4a>
 8025afa:	4630      	mov	r0, r6
 8025afc:	e7ee      	b.n	8025adc <__sccl+0x28>
 8025afe:	462b      	mov	r3, r5
 8025b00:	e7ef      	b.n	8025ae2 <__sccl+0x2e>
 8025b02:	7816      	ldrb	r6, [r2, #0]
 8025b04:	2e5d      	cmp	r6, #93	; 0x5d
 8025b06:	d0fa      	beq.n	8025afe <__sccl+0x4a>
 8025b08:	42b3      	cmp	r3, r6
 8025b0a:	dcf8      	bgt.n	8025afe <__sccl+0x4a>
 8025b0c:	4618      	mov	r0, r3
 8025b0e:	3001      	adds	r0, #1
 8025b10:	4286      	cmp	r6, r0
 8025b12:	5421      	strb	r1, [r4, r0]
 8025b14:	dcfb      	bgt.n	8025b0e <__sccl+0x5a>
 8025b16:	43d8      	mvns	r0, r3
 8025b18:	4430      	add	r0, r6
 8025b1a:	1c5d      	adds	r5, r3, #1
 8025b1c:	42b3      	cmp	r3, r6
 8025b1e:	bfa8      	it	ge
 8025b20:	2000      	movge	r0, #0
 8025b22:	182b      	adds	r3, r5, r0
 8025b24:	3202      	adds	r2, #2
 8025b26:	e7de      	b.n	8025ae6 <__sccl+0x32>

08025b28 <__submore>:
 8025b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b2c:	460c      	mov	r4, r1
 8025b2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8025b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025b34:	4299      	cmp	r1, r3
 8025b36:	d11d      	bne.n	8025b74 <__submore+0x4c>
 8025b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025b3c:	f7fd f974 	bl	8022e28 <_malloc_r>
 8025b40:	b918      	cbnz	r0, 8025b4a <__submore+0x22>
 8025b42:	f04f 30ff 	mov.w	r0, #4294967295
 8025b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025b4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8025b50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8025b54:	6360      	str	r0, [r4, #52]	; 0x34
 8025b56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8025b5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8025b5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8025b62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8025b66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8025b6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8025b6e:	6020      	str	r0, [r4, #0]
 8025b70:	2000      	movs	r0, #0
 8025b72:	e7e8      	b.n	8025b46 <__submore+0x1e>
 8025b74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8025b76:	0077      	lsls	r7, r6, #1
 8025b78:	463a      	mov	r2, r7
 8025b7a:	f7fe ff05 	bl	8024988 <_realloc_r>
 8025b7e:	4605      	mov	r5, r0
 8025b80:	2800      	cmp	r0, #0
 8025b82:	d0de      	beq.n	8025b42 <__submore+0x1a>
 8025b84:	eb00 0806 	add.w	r8, r0, r6
 8025b88:	4601      	mov	r1, r0
 8025b8a:	4632      	mov	r2, r6
 8025b8c:	4640      	mov	r0, r8
 8025b8e:	f7fd f8d5 	bl	8022d3c <memcpy>
 8025b92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8025b96:	f8c4 8000 	str.w	r8, [r4]
 8025b9a:	e7e9      	b.n	8025b70 <__submore+0x48>

08025b9c <_init>:
 8025b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b9e:	bf00      	nop
 8025ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025ba2:	bc08      	pop	{r3}
 8025ba4:	469e      	mov	lr, r3
 8025ba6:	4770      	bx	lr

08025ba8 <_fini>:
 8025ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025baa:	bf00      	nop
 8025bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025bae:	bc08      	pop	{r3}
 8025bb0:	469e      	mov	lr, r3
 8025bb2:	4770      	bx	lr
 8025bb4:	0000      	movs	r0, r0
	...

08025bb8 <__time_veneer>:
 8025bb8:	e51ff004 	ldr	pc, [pc, #-4]	; 8025bbc <__time_veneer+0x4>
 8025bbc:	20000518 	.word	0x20000518
